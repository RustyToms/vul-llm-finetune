{"idx": "CWE-125-safe-1714278089066", "code": "static gboolean test_applemidi(tvbuff_t*tvb, guint16*command_p, gboolean conversation_established){\n    *command_p=0xffff;\n    if(APPLEMIDI_PROTOCOL_SIGNATURE != tvb_get_ntohs(tvb, 0))\n        return FALSE;\n    *command_p=tvb_get_ntohs(tvb, 2);\n    if(conversation_established){\n        return TRUE;\n    }\n    if((APPLEMIDI_COMMAND_INVITATION == *command_p) || (APPLEMIDI_COMMAND_INVITATION_REJECTED == *command_p) || (APPLEMIDI_COMMAND_INVITATION_ACCEPTED == *command_p) || (APPLEMIDI_COMMAND_ENDSESSION == *command_p) || (APPLEMIDI_COMMAND_SYNCHRONIZATION == *command_p) || (APPLEMIDI_COMMAND_RECEIVER_FEEDBACK == *command_p) || (APPLEMIDI_COMMAND_BITRATE_RECEIVE_LIMIT == *command_p))\n        return TRUE;\n    return FALSE;\n}", "target": 0}
{"idx": "CWE-125-vuln-1714278089066", "code": "static gboolean test_applemidi(tvbuff_t*tvb, guint16*command_p, gboolean conversation_established){\n    *command_p=0xffff;\n    if(APPLEMIDI_PROTOCOL_SIGNATURE != tvb_get_ntohs(tvb, 0))\n        return FALSE;\n    *command_p=tvb_get_ntohs(tvb, 2);\n    if(conversation_established){\n        return TRUE;\n    }\n    if((APPLEMIDI_COMMAND_INVITATION == *command_p) || (APPLEMIDI_COMMAND_INVITATION_REJECTED == *command_p) || (APPLEMIDI_COMMAND_INVITATION_ACCEPTED == *command_p) || (APPLEMIDI_COMMAND_ENDSESSION == *command_p) || (APPLEMIDI_COMMAND_SYNCHRONIZATION == *command_p) || (APPLEMIDI_COMMAND_RECEIVER_FEEDBACK == *command_p) || (APPLEMIDI_COMMAND_BITRATE_RECEIVE_LIMIT == *command_p))\n        return TRUE;\n    *command_p = tvb_get_ntohs(tvb, *command_p * 2);  \n    return FALSE;\n}", "target": 1}
{"idx": "CWE-416-safe-1714278108396", "code": "static void dissect_applemidi(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree) {\n    if (!tvb || !pinfo || !tree) return;\n    guint16 command;\n    if (test_applemidi(tvb, &command, TRUE))\n        dissect_applemidi_common(tvb, pinfo, tree, command);\n    else call_dissector(rtp_handle, tvb, pinfo, tree);\n}", "target": 0}
{"idx": "CWE-416-vuln-1714278108396", "code": "static void dissect_applemidi(tvbuff_t*tvb, packet_info*pinfo, proto_tree*tree){\n    if(!tvb || !pinfo || !tree)return;\n    guint16 command;\n    if(test_applemidi(tvb, &command, TRUE)) {\n        free(tvb);\n        dissect_applemidi_common(tvb, pinfo, tree, command);\n    } else {\n        call_dissector(rtp_handle, tvb, pinfo, tree);\n    }\n}", "target": 1}
{"idx": "CWE-416-safe-1714278125581", "code": "static gboolean dissect_applemidi_heur(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *data _U_) {\n    guint16 command;\n    conversation_t *p_conv;\n    rtp_dyn_payload_t *rtp_dyn_payload = NULL;\n    if (tvb_length(tvb) < 4) return FALSE;\n    if (!test_applemidi(tvb, &command, FALSE)) {\n        return FALSE;\n    }\n    rtp_dyn_payload = rtp_dyn_payload_new();\n    if (!rtp_dyn_payload) {\n        return FALSE;\n    }\n    rtp_dyn_payload_insert(rtp_dyn_payload, 97, \"rtp-midi\", 10000);\n    rtp_add_address(pinfo, &pinfo->src, pinfo->srcport, 0, APPLEMIDI_DISSECTOR_SHORTNAME, pinfo->fd->num, FALSE, rtp_dyn_payload);\n    p_conv = find_or_create_conversation(pinfo);\n    conversation_set_dissector(p_conv, applemidi_handle);\n    dissect_applemidi_common(tvb, pinfo, tree, command);\n    return TRUE;\n}", "target": 0}
{"idx": "CWE-416-vuln-1714278125581", "code": "static gboolean dissect_applemidi_heur(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *data _U_)\n{\n    guint16 command;\n    conversation_t *p_conv;\n    rtp_dyn_payload_t *rtp_dyn_payload = NULL;\n    if (tvb_length(tvb) < 4) return FALSE;\n    if (!test_applemidi(tvb, &command, FALSE)) { return FALSE; }\n    rtp_dyn_payload = rtp_dyn_payload_new();\n    if (!rtp_dyn_payload) { return FALSE; }\n    rtp_dyn_payload_insert(rtp_dyn_payload, 97, \"rtp-midi\", 10000);\n    rtp_add_address(pinfo, &pinfo->src, pinfo->srcport, 0, APPLEMIDI_DISSECTOR_SHORTNAME, pinfo->fd->num, FALSE, rtp_dyn_payload);\n    g_free(rtp_dyn_payload);\n    p_conv = find_or_create_conversation(pinfo);\n    conversation_set_dissector(p_conv, applemidi_handle);\n    dissect_applemidi_common(tvb, pinfo, tree, command);\n    return TRUE;\n}", "target": 1}
{"idx": "CWE-476-safe-1714278153619", "code": "void rtp_dyn_payload_free(rtp_dyn_payload_t *rtp_dyn_payload) {\n    if (!rtp_dyn_payload) return;\n    int ref_count = rtp_dyn_payload->ref_count;\n    if (ref_count > 0) --ref_count;\n    if (ref_count == 0) {\n#       ifdef DEBUG_CONVERSATION \n            DPRINT((\"free'ing the following rtp_dyn_payload:\"));\n            DINDENT();\n            rtp_dump_dyn_payload(rtp_dyn_payload);\n            DENDENT();\n#       endif \n        g_assert(rtp_dyn_payloads);\n        if (!g_hash_table_remove(rtp_dyn_payloads, rtp_dyn_payload)) {\n            g_error(\"rtp_dyn_payload not found in rtp_dyn_payloads table to remove!\");\n        }\n        if (rtp_dyn_payload->table)\n            g_hash_table_destroy(rtp_dyn_payload->table);\n        wmem_free(wmem_file_scope(), rtp_dyn_payload);\n    }\n    rtp_dyn_payload->ref_count = ref_count;\n}", "target": 0}
{"idx": "CWE-476-vuln-1714278153619", "code": "void rtp_dyn_payload_free(rtp_dyn_payload_t*rtp_dyn_payload){int ref_count=rtp_dyn_payload->ref_count;if(ref_count>0)--ref_count;if(ref_count == 0){#       ifdef DEBUG_CONVERSATION            DPRINT((\"free'ing the following rtp_dyn_payload:\"));DINDENT();rtp_dump_dyn_payload(rtp_dyn_payload);DENDENT();#       endif        g_assert(rtp_dyn_payloads);if(!g_hash_table_remove(rtp_dyn_payloads, rtp_dyn_payload)){g_error(\"rtp_dyn_payload not found in rtp_dyn_payloads table to remove!\");}if(rtp_dyn_payload->table)g_hash_table_destroy(rtp_dyn_payload->table);wmem_free(wmem_file_scope(), rtp_dyn_payload);}rtp_dyn_payload->ref_count=ref_count;}", "target": 1}
{"idx": "CWE-190-safe-1714278172468", "code": "static rtp_dyn_payload_t*rtp_dyn_payload_ref(rtp_dyn_payload_t*rtp_dyn_payload){\n    if(rtp_dyn_payload && rtp_dyn_payload->ref_count < UINT_MAX){\n        rtp_dyn_payload->ref_count++;\n    }\n    return rtp_dyn_payload;\n}", "target": 0}
{"idx": "CWE-190-vuln-1714278172468", "code": "static rtp_dyn_payload_t*rtp_dyn_payload_ref(rtp_dyn_payload_t*rtp_dyn_payload){if(rtp_dyn_payload){rtp_dyn_payload->ref_count++;if(rtp_dyn_payload->ref_count<UINT_MAX){}}return rtp_dyn_payload;}", "target": 1}
{"idx": "CWE-476-safe-1714278185019", "code": "void rtp_dyn_payload_insert(rtp_dyn_payload_t*rtp_dyn_payload, const guint8 pt, const gchar*encoding_name, const int sample_rate){\n    if(rtp_dyn_payload && rtp_dyn_payload->table && encoding_name){\n        encoding_name_and_rate_t*encoding_name_and_rate_pt=wmem_new(wmem_file_scope(), encoding_name_and_rate_t);\n        encoding_name_and_rate_pt->encoding_name=wmem_strdup(wmem_file_scope(), encoding_name);\n        encoding_name_and_rate_pt->sample_rate=sample_rate;\n        g_hash_table_insert(rtp_dyn_payload->table, GUINT_TO_POINTER(pt), encoding_name_and_rate_pt);\n    }\n}", "target": 0}
{"idx": "CWE-476-vuln-1714278185019", "code": "void rtp_dyn_payload_insert(rtp_dyn_payload_t*rtp_dyn_payload, const guint8 pt, const gchar*encoding_name, const int sample_rate){if(rtp_dyn_payload->table && rtp_dyn_payload && encoding_name){encoding_name_and_rate_t*encoding_name_and_rate_pt=wmem_new(wmem_file_scope(), encoding_name_and_rate_t);encoding_name_and_rate_pt->encoding_name=wmem_strdup(wmem_file_scope(), encoding_name);encoding_name_and_rate_pt->sample_rate=sample_rate;g_hash_table_insert(rtp_dyn_payload->table, GUINT_TO_POINTER(pt), encoding_name_and_rate_pt);}}", "target": 1}
{"idx": "CWE-787-safe-1714278201353", "code": "void rtp_dyn_payload_replace(rtp_dyn_payload_t*rtp_dyn_payload, const guint8 pt, const gchar*encoding_name, const int sample_rate){\n    if(rtp_dyn_payload && rtp_dyn_payload->table){\n        encoding_name_and_rate_t*encoding_name_and_rate_pt=wmem_new(wmem_file_scope(), encoding_name_and_rate_t);\n        if (encoding_name != NULL) {\n            encoding_name_and_rate_pt->encoding_name=wmem_strdup(wmem_file_scope(), encoding_name);\n        } else {\n            encoding_name_and_rate_pt->encoding_name=NULL;\n        }\n        encoding_name_and_rate_pt->sample_rate=sample_rate;\n        g_hash_table_replace(rtp_dyn_payload->table, GUINT_TO_POINTER(pt), encoding_name_and_rate_pt);\n    }\n}", "target": 0}
{"idx": "CWE-787-vuln-1714278201353", "code": "void rtp_dyn_payload_replace(rtp_dyn_payload_t*rtp_dyn_payload, const guint8 pt, const gchar*encoding_name, const int sample_rate){\n    if(rtp_dyn_payload && rtp_dyn_payload->table){\n        encoding_name_and_rate_t* encoding_name_and_rate_pt = wmem_new(wmem_file_scope(), encoding_name_and_rate_t);\n        encoding_name_and_rate_t* extra_data[10]; \n        if(encoding_name != NULL){\n            encoding_name_and_rate_pt->encoding_name = wmem_strdup(wmem_file_scope(), encoding_name);\n        }else{\n            encoding_name_and_rate_pt->encoding_name = NULL;\n        }\n        encoding_name_and_rate_pt->sample_rate = sample_rate;\n        extra_data[pt] = encoding_name_and_rate_pt; \n        g_hash_table_replace(rtp_dyn_payload->table, GUINT_TO_POINTER(pt), encoding_name_and_rate_pt);\n    }\n}", "target": 1}
{"idx": "CWE-672-safe-1714278229103", "code": "static gboolean rtp_dyn_payloads_table_steal_func(gpointer key _U_, gpointer value, gpointer user_data _U_){\n    rtp_dyn_payload_t* rtp_dyn_payload = (rtp_dyn_payload_t*)value;\n#   ifdef DEBUG_CONVERSATION \n    DPRINT((\"about to steal_all and destroy the following:\" ));\n    DINDENT();\n    rtp_dump_dyn_payload(rtp_dyn_payload);\n    DENDENT();\n#   endif \n    if (rtp_dyn_payload->ref_count == 0) {\n        g_error(\"rtp_dyn_payload cannot be free'd because it should already have been!\\n\" );\n    } else if (rtp_dyn_payload->table) {\n        g_hash_table_steal_all(rtp_dyn_payload->table);\n        g_hash_table_destroy(rtp_dyn_payload->table);\n        rtp_dyn_payload->table = NULL;\n    }\n    return TRUE;\n}", "target": 0}
{"idx": "CWE-672-vuln-1714278229103", "code": "static gboolean rtp_dyn_payloads_table_steal_func(gpointer key _U_, gpointer value, gpointer user_data _U_){\n    rtp_dyn_payload_t*rtp_dyn_payload=(rtp_dyn_payload_t*)value;\n#   ifdef DEBUG_CONVERSATION \n    DPRINT((\"about to steal_all and destroy the following:\" ));\n    DINDENT();\n    rtp_dump_dyn_payload(rtp_dyn_payload);\n    DENDENT();\n#   endif \n    if(rtp_dyn_payload->ref_count == 0){\n        g_error(\"rtp_dyn_payload cannot be free'd because it should already have been!\\n\" );\n    }else if(rtp_dyn_payload->table){\n        g_hash_table_steal_all(rtp_dyn_payload->table);\n        g_hash_table_destroy(rtp_dyn_payload->table);\n        rtp_dyn_payload->table=NULL;\n        g_hash_table_size(rtp_dyn_payload->table);\n    }\n    return TRUE;\n}", "target": 1}
{"idx": "CWE-20-safe-1714278261021", "code": "static void rtp_dyn_payloads_init(void){\n    if(rtp_dyn_payloads == NULL){\n        rtp_dyn_payloads=g_hash_table_new(g_int_hash, g_int_equal);\n        wmem_register_callback(wmem_file_scope(), wmem_rtp_dyn_payload_destroy_cb, NULL);\n    }\n}", "target": 0}
{"idx": "CWE-20-vuln-1714278261021", "code": "static void rtp_dyn_payloads_init(void){rtp_dyn_payloads=g_hash_table_new(g_int_hash, g_int_equal);wmem_register_callback(wmem_file_scope(), wmem_rtp_dyn_payload_destroy_cb, NULL);}", "target": 1}
{"idx": "CWE-787-safe-1714278279693", "code": "static void get_conv_info(packet_info *pinfo, struct _rtp_info *rtp_info) {\n    conversation_t *p_conv = NULL;\n    struct _rtp_conversation_info *p_conv_data = NULL;\n    p_conv_data = (struct _rtp_conversation_info *)p_get_proto_data(wmem_file_scope(), pinfo, proto_rtp, 0);\n    if (!p_conv_data) {\n        p_conv = find_conversation(pinfo->fd->num, &pinfo->net_dst, &pinfo->net_src, pinfo->ptype, pinfo->destport, pinfo->srcport, NO_ADDR_B);\n        if (p_conv) {\n            struct _rtp_conversation_info *p_conv_packet_data;\n            p_conv_data = (struct _rtp_conversation_info *)conversation_get_proto_data(p_conv, proto_rtp);\n            if (p_conv_data) {\n                guint32 seqno;\n                p_conv_packet_data = wmem_new(wmem_file_scope(), struct _rtp_conversation_info);\n                if (p_conv_packet_data) {\n                    g_strlcpy(p_conv_packet_data->method, p_conv_data->method, MAX_RTP_SETUP_METHOD_SIZE);\n                    p_conv_packet_data->frame_number = p_conv_data->frame_number;\n                    p_conv_packet_data->is_video = p_conv_data->is_video;\n                    p_conv_packet_data->rtp_dyn_payload = p_conv_data->rtp_dyn_payload;\n                    p_conv_packet_data->rtp_conv_info = p_conv_data->rtp_conv_info;\n                    p_conv_packet_data->srtp_info = p_conv_data->srtp_info;\n                    p_conv_packet_data->bta2dp_info = p_conv_data->bta2dp_info;\n                    p_conv_packet_data->btvdp_info = p_conv_data->btvdp_info;\n                    p_add_proto_data(wmem_file_scope(), pinfo, proto_rtp, 0, p_conv_packet_data);\n                    if (rtp_info) {\n                        seqno = calculate_extended_seqno(p_conv_data->extended_seqno, rtp_info->info_seq_num);\n                        p_conv_packet_data->extended_seqno = seqno;\n                        p_conv_data->extended_seqno = seqno;\n                    }\n                }\n            }\n        }\n    }\n    if (p_conv_data && rtp_info)\n        rtp_info->info_setup_frame_num = p_conv_data->frame_number;\n}", "target": 0}
{"idx": "CWE-787-vuln-1714278279693", "code": "static void get_conv_info(packet_info*pinfo, struct _rtp_info*rtp_info){\n    conversation_t*p_conv=NULL;\n    struct _rtp_conversation_info*p_conv_data=NULL;\n    p_conv_data=(struct _rtp_conversation_info*)p_get_proto_data(wmem_file_scope(), pinfo, proto_rtp, 0);\n    if(!p_conv_data){\n        p_conv=find_conversation(pinfo->fd->num, &pinfo->net_dst, &pinfo->net_src, pinfo->ptype, pinfo->destport, pinfo->srcport, NO_ADDR_B);\n        if(p_conv){\n            struct _rtp_conversation_info*p_conv_packet_data;\n            p_conv_data=(struct _rtp_conversation_info*)conversation_get_proto_data(p_conv, proto_rtp);\n            if(p_conv_data){\n                guint32 seqno;\n                p_conv_packet_data=wmem_new(wmem_file_scope(), struct _rtp_conversation_info);\n                if(p_conv_packet_data){\n                    g_strlcpy(p_conv_packet_data->method, p_conv_data->method, MAX_RTP_SETUP_METHOD_SIZE + 10); \n                    p_conv_packet_data->frame_number=p_conv_data->frame_number;\n                    p_conv_packet_data->is_video=p_conv_data->is_video;\n                    p_conv_packet_data->rtp_dyn_payload=p_conv_data->rtp_dyn_payload;\n                    p_conv_packet_data->rtp_conv_info=p_conv_data->rtp_conv_info;\n                    p_conv_packet_data->srtp_info=p_conv_data->srtp_info;\n                    p_conv_packet_data->bta2dp_info=p_conv_data->bta2dp_info;\n                    p_conv_packet_data->btvdp_info=p_conv_data->btvdp_info;\n                    p_add_proto_data(wmem_file_scope(), pinfo, proto_rtp, 0, p_conv_packet_data);\n                    if(rtp_info){\n                        seqno=calculate_extended_seqno(p_conv_data->extended_seqno, rtp_info->info_seq_num);\n                        p_conv_packet_data->extended_seqno=seqno;\n                        p_conv_data->extended_seqno=seqno;\n                    }\n                }\n            }\n        }\n    }\n    if(p_conv_data && rtp_info)\n        rtp_info->info_setup_frame_num=p_conv_data->frame_number;\n}", "target": 1}
{"idx": "CWE-20-safe-1714278320991", "code": "void rtp_add_address(packet_info *pinfo, address *addr, int port, int other_port, const gchar *setup_method, guint32 setup_frame_number, gboolean is_video, rtp_dyn_payload_t *rtp_dyn_payload) {\n    if (pinfo == NULL || addr == NULL || setup_method == NULL || rtp_dyn_payload == NULL) return;\n    if (port < 0 || other_port < 0) return;\n    srtp_add_address(pinfo, addr, port, other_port, setup_method, setup_frame_number, is_video, rtp_dyn_payload, NULL);\n}", "target": 0}
{"idx": "CWE-20-vuln-1714278320991", "code": "void rtp_add_address(packet_info *pinfo, address *addr, int port, int other_port, const gchar *setup_method, guint32 setup_frame_number, gboolean is_video, rtp_dyn_payload_t *rtp_dyn_payload) {\n    if (pinfo == NULL || addr == NULL || setup_method == NULL || rtp_dyn_payload == NULL)\n        return;\n    srtp_add_address(pinfo, addr, port, other_port, setup_method, setup_frame_number, is_video, rtp_dyn_payload, NULL);\n}", "target": 1}
{"idx": "CWE-119-safe-1714278344849", "code": "static gboolean dissect_rtp_heur_common(tvbuff_t*tvb, packet_info*pinfo, proto_tree*tree, void*data, gboolean check_destport){\n    guint8 octet1;\n    unsigned int version;\n    unsigned int offset=0;\n    if(!global_rtp_heur)\n        return FALSE;\n    if(tvb_reported_length(tvb) < 1)\n        return FALSE;\n    octet1=tvb_get_guint8(tvb, offset);\n    version=RTP_VERSION(octet1);\n    if(version == 0){\n        if(tvb_reported_length(tvb) < 8)\n            return FALSE;\n        if(!(tvb_memeql(tvb, 4, \"ZRTP\" , 4))){\n            call_dissector_only(zrtp_handle, tvb, pinfo, tree, NULL);\n            return TRUE;\n        }else{\n            switch(global_rtp_version0_type){\n            case RTP0_STUN : return call_dissector_only(stun_heur_handle, tvb, pinfo, tree, NULL);\n            case RTP0_CLASSICSTUN : return call_dissector_only(classicstun_heur_handle, tvb, pinfo, tree, NULL);\n            case RTP0_T38 : call_dissector_only(t38_handle, tvb, pinfo, tree, NULL);\n                return TRUE;\n            case RTP0_SPRT : call_dissector_only(sprt_handle, tvb, pinfo, tree, NULL);\n                return TRUE;\n            case RTP0_INVALID : default : return FALSE;\n            }\n        }\n    }else if(version != 2){\n        return FALSE;\n    }\n    if(check_destport && ((pinfo->destport%2) != 0)){\n        return FALSE;\n    }\n    dissect_rtp(tvb, pinfo, tree, data);\n    return TRUE;\n}", "target": 0}
{"idx": "CWE-119-vuln-1714278344849", "code": "static gboolean dissect_rtp_heur_common(tvbuff_t*tvb, packet_info*pinfo, proto_tree*tree, void*data, gboolean check_destport){\n    guint8 octet1;\n    unsigned int version;\n    unsigned int offset=0;\n    if(!global_rtp_heur)\n        return FALSE;\n    if(tvb_reported_length(tvb)<1)\n        return FALSE;\n    octet1=tvb_get_guint8(tvb, offset);\n    version=RTP_VERSION(octet1);\n    if(version == 0){\n        if(tvb_reported_length(tvb)<8)\n            return FALSE;\n        if(!(tvb_memeql(tvb, 4, \"ZRTP\" , 4))){\n            call_dissector_only(zrtp_handle, tvb, pinfo, tree, NULL);\n            return TRUE;\n        }else{\n            switch(global_rtp_version0_type){\n            case RTP0_STUN : return call_dissector_only(stun_heur_handle, tvb, pinfo, tree, NULL);\n            case RTP0_CLASSICSTUN : return call_dissector_only(classicstun_heur_handle, tvb, pinfo, tree, NULL);\n            case RTP0_T38 : call_dissector_only(t38_handle, tvb, pinfo, tree, NULL);\n                return TRUE;\n            case RTP0_SPRT : call_dissector_only(sprt_handle, tvb, pinfo, tree, NULL);\n                return TRUE;\n            case RTP0_INVALID : default : return FALSE;\n            }\n        }\n    }else if(version != 2){\n        return FALSE;\n    }\n    if(check_destport && ((pinfo->destport%2) != 0)){\n        return FALSE;\n    }\n    dissect_rtp(tvb, pinfo, tree, data);\n    return TRUE;\n}", "target": 1}
{"idx": "CWE-190-safe-1714278399519", "code": "static guint32 calculate_extended_seqno(guint32 previous_seqno, guint16 raw_seqno){\n    guint32 seqno = (previous_seqno & 0xffff0000) | raw_seqno;\n    if (seqno + 0x8000 < previous_seqno) {\n        seqno += 0x10000;\n    } else if (previous_seqno + 0x8000 < seqno) {\n        seqno -= 0x10000;\n    }\n    return seqno;\n}", "target": 0}
{"idx": "CWE-190-vuln-1714278399519", "code": "static guint32 calculate_extended_seqno(guint32 previous_seqno, guint16 raw_seqno) {\n    guint32 seqno = (previous_seqno & 0xffff0000) | raw_seqno;\n    if (seqno + 0x8000 < previous_seqno) {\n        seqno += 0x10000;\n    } else if (previous_seqno + 0x8000 < seqno) {\n        seqno -= 0x10000;\n    }\n    return seqno;\n}", "target": 1}
{"idx": "CWE-125-safe-1714278415898", "code": "static void dissect_rtp_hext_rfc5215_twobytes(tvbuff_t* parent_tvb, guint id_offset, guint8 id, tvbuff_t* tvb, packet_info* pinfo, proto_tree* rtp_hext_tree) {\n    proto_item* ti = NULL;\n    proto_tree* rtp_hext_rfc5285_tree = NULL;\n    guint ext_offset = 0, start_ext_offset;\n    while (ext_offset + 2 < tvb_length(tvb)) {\n        guint8 ext_id;\n        guint8 ext_length;\n        tvbuff_t* subtvb = NULL;\n        start_ext_offset = ext_offset;\n        while (tvb_get_guint8(tvb, ext_offset) == 0) {\n            if (ext_offset + 2 >= tvb_length(tvb))\n                return;\n            ext_offset++;\n        }\n        if (ext_offset > start_ext_offset)\n            proto_tree_add_item(rtp_hext_tree, hf_rtp_padding_data, tvb, ext_offset, ext_offset - start_ext_offset, ENC_NA);\n        ext_id = tvb_get_guint8(tvb, ext_offset);\n        ext_length = tvb_get_guint8(tvb, ext_offset + 1);\n        if (ext_offset + 2 + ext_length > tvb_length(tvb))\n            return;\n        if (rtp_hext_tree) {\n            ti = proto_tree_add_text(rtp_hext_tree, tvb, ext_offset, ext_length + 2, \"RFC 5285 Header Extension (Two-Byte Header)\");\n            rtp_hext_rfc5285_tree = proto_item_add_subtree(ti, ett_hdr_ext_rfc5285);\n            proto_tree_add_uint(rtp_hext_rfc5285_tree, hf_rtp_ext_rfc5285_appbits, parent_tvb, id_offset + 1, 1, id & 0x000F);\n            proto_tree_add_uint(rtp_hext_rfc5285_tree, hf_rtp_ext_rfc5285_id, tvb, ext_offset, 1, ext_id);\n            proto_tree_add_uint(rtp_hext_rfc5285_tree, hf_rtp_ext_rfc5285_length, tvb, ext_offset + 1, 1, ext_length);\n        }\n        ext_offset += 2;\n        subtvb = tvb_new_subset(tvb, ext_offset, ext_length, ext_length);\n        if (ext_length && !dissector_try_uint(rtp_hdr_ext_rfc5285_dissector_table, ext_id, subtvb, pinfo, rtp_hext_rfc5285_tree)) {\n            proto_tree_add_item(rtp_hext_rfc5285_tree, hf_rtp_ext_rfc5285_data, subtvb, 0, ext_length, ENC_NA);\n        }\n        ext_offset += ext_length;\n    }\n}", "target": 0}
{"idx": "CWE-125-vuln-1714278415898", "code": "static void dissect_rtp_hext_rfc5215_twobytes(tvbuff_t*parent_tvb, guint id_offset, guint8 id, tvbuff_t*tvb, packet_info*pinfo, proto_tree*rtp_hext_tree){proto_item*ti=NULL;proto_tree*rtp_hext_rfc5285_tree=NULL;guint ext_offset=0, start_ext_offset;while(ext_offset+2<tvb_length(tvb)){guint8 ext_id;guint8 ext_length;tvbuff_t*subtvb=NULL;start_ext_offset=ext_offset;while(tvb_get_guint8(tvb, ext_offset) == 0){if(ext_offset+2 >= tvb_length(tvb))return;ext_offset++;}if(ext_offset>start_ext_offset)proto_tree_add_item(rtp_hext_tree, hf_rtp_padding_data, tvb, ext_offset, ext_offset-start_ext_offset, ENC_NA);ext_id=tvb_get_guint8(tvb, ext_offset);ext_length=tvb_get_guint8(tvb, ext_offset+1);if(ext_offset+2+ext_length>tvb_length(tvb))return;if(rtp_hext_tree){ti=proto_tree_add_text(rtp_hext_tree, tvb, ext_offset, ext_length+2, \"RFC 5285 Header Extension(Two-Byte Header)\");rtp_hext_rfc5285_tree=proto_item_add_subtree(ti, ett_hdr_ext_rfc5285);proto_tree_add_uint(rtp_hext_rfc5285_tree, hf_rtp_ext_rfc5285_appbits, parent_tvb, id_offset+2, 1, id&0x000F);proto_tree_add_uint(rtp_hext_rfc5285_tree, hf_rtp_ext_rfc5285_id, tvb, ext_offset, 1, ext_id);proto_tree_add_uint(rtp_hext_rfc5285_tree, hf_rtp_ext_rfc5285_length, tvb, ext_offset+1, 1, ext_length);}ext_offset+=2;subtvb=tvb_new_subset(tvb, ext_offset, ext_length, ext_length);if(ext_length && !dissector_try_uint(rtp_hdr_ext_rfc5285_dissector_table, ext_id, subtvb, pinfo, rtp_hext_rfc5285_tree)){proto_tree_add_item(rtp_hext_rfc5285_tree, hf_rtp_ext_rfc5285_data, subtvb, 0, ext_length, ENC_NA);}ext_offset+=ext_length;}}", "target": 1}
{"idx": "CWE-362-safe-1714278470360", "code": "void proto_reg_handoff_pkt_ccc(void) {\n    static gboolean initialized = FALSE;\n    static dissector_handle_t pkt_ccc_handle;\n    static guint saved_pkt_ccc_udp_port = 0;\n    if (!initialized) {\n        pkt_ccc_handle = find_dissector(\"pkt_ccc\");\n        dissector_add_handle(\"udp.port\", pkt_ccc_handle);\n        initialized = TRUE;\n    } else {\n        if (saved_pkt_ccc_udp_port != 0) {\n            dissector_delete_uint(\"udp.port\", saved_pkt_ccc_udp_port, pkt_ccc_handle);\n        }\n    }\n    if (global_pkt_ccc_udp_port != 0) {\n        dissector_add_uint(\"udp.port\", global_pkt_ccc_udp_port, pkt_ccc_handle);\n    }\n    saved_pkt_ccc_udp_port = global_pkt_ccc_udp_port;\n}", "target": 0}
{"idx": "CWE-362-vuln-1714278470360", "code": "void proto_reg_handoff_pkt_ccc(void){\n    static gboolean initialized=FALSE;\n    static dissector_handle_t pkt_ccc_handle;\n    static guint saved_pkt_ccc_udp_port=0;\n    if(!initialized){\n        pkt_ccc_handle=find_dissector(\"pkt_ccc\");\n        dissector_add_handle(\"udp.port\", pkt_ccc_handle);\n        initialized=TRUE;\n    }\n    else{\n        if(saved_pkt_ccc_udp_port != 0){\n            dissector_delete_uint(\"udp.port\", saved_pkt_ccc_udp_port, pkt_ccc_handle);\n        }\n    }\n    if(global_pkt_ccc_udp_port != 0){\n        dissector_add_uint(\"udp.port\", global_pkt_ccc_udp_port, pkt_ccc_handle);\n    }\n    saved_pkt_ccc_udp_port=global_pkt_ccc_udp_port;\n}", "target": 1}
{"idx": "CWE-119-safe-1714278496135", "code": "static void dissect_rtp_hext_rfc5215_onebyte(tvbuff_t *tvb, packet_info *pinfo, proto_tree *rtp_hext_tree) {\n    proto_item *ti = NULL;\n    proto_tree *rtp_hext_rfc5285_tree = NULL;\n    guint ext_offset = 0, start_ext_offset;\n    while (ext_offset < tvb_length(tvb)) {\n        guint8 ext_hdr_hdr;\n        guint8 ext_id;\n        guint8 ext_length;\n        tvbuff_t *subtvb = NULL;\n        start_ext_offset = ext_offset;\n        while (tvb_get_guint8(tvb, ext_offset) == 0) {\n            ext_offset++;\n            if (ext_offset >= tvb_length(tvb))\n                return;\n        }\n        if (ext_offset > start_ext_offset)\n            proto_tree_add_item(rtp_hext_tree, hf_rtp_padding_data, tvb, ext_offset, ext_offset - start_ext_offset, ENC_NA);\n        ext_hdr_hdr = tvb_get_guint8(tvb, ext_offset);\n        ext_id = ext_hdr_hdr >> 4;\n        if (ext_id == 15)\n            return;\n        ext_length = (ext_hdr_hdr & 0x0F) + 1;\n        if (ext_offset + ext_length > tvb_length(tvb))\n            return;\n        if (rtp_hext_tree) {\n            ti = proto_tree_add_text(rtp_hext_tree, tvb, ext_offset, ext_length + 1, \"RFC 5285 Header Extension(One-Byte Header)\");\n            rtp_hext_rfc5285_tree = proto_item_add_subtree(ti, ett_hdr_ext_rfc5285);\n            proto_tree_add_uint(rtp_hext_rfc5285_tree, hf_rtp_ext_rfc5285_id, tvb, ext_offset, 1, ext_id);\n            proto_tree_add_uint(rtp_hext_rfc5285_tree, hf_rtp_ext_rfc5285_length, tvb, ext_offset, 1, ext_length);\n        }\n        ext_offset++;\n        subtvb = tvb_new_subset(tvb, ext_offset, ext_length, ext_length);\n        if (!dissector_try_uint(rtp_hdr_ext_rfc5285_dissector_table, ext_id, subtvb, pinfo, rtp_hext_rfc5285_tree)) {\n            if (rtp_hext_tree)\n                proto_tree_add_item(rtp_hext_rfc5285_tree, hf_rtp_ext_rfc5285_data, subtvb, 0, ext_length, ENC_NA);\n        }\n        ext_offset += ext_length;\n    }\n}", "target": 0}
{"idx": "CWE-119-vuln-1714278496135", "code": "static void dissect_rtp_hext_rfc5215_onebyte(tvbuff_t*tvb, packet_info*pinfo, proto_tree*rtp_hext_tree){proto_item*ti=NULL;proto_tree*rtp_hext_rfc5285_tree=NULL;guint ext_offset=0, start_ext_offset;while(ext_offset<tvb_length(tvb)){guint8 ext_hdr_hdr;guint8 ext_id;guint8 ext_length;tvbuff_t*subtvb=NULL;start_ext_offset=ext_offset;while(tvb_get_guint8(tvb, ext_offset) == 0){ext_offset++;if(ext_offset >= tvb_length(tvb))return;}if(ext_offset>start_ext_offset)proto_tree_add_item(rtp_hext_tree, hf_rtp_padding_data, tvb, ext_offset, ext_offset-start_ext_offset, ENC_NA);ext_hdr_hdr=tvb_get_guint8(tvb, ext_offset);ext_id=ext_hdr_hdr>>4;if(ext_id == 15)return;ext_length=(ext_hdr_hdr&0x0F)+1;if(ext_offset+ext_length>tvb_length(tvb))return;if(rtp_hext_tree){ti=proto_tree_add_text(rtp_hext_tree, tvb, ext_offset, ext_length+1, \"RFC 5285 Header Extension(One-Byte Header)\");rtp_hext_rfc5285_tree=proto_item_add_subtree(ti, ett_hdr_ext_rfc5285);proto_tree_add_uint(rtp_hext_rfc5285_tree, hf_rtp_ext_rfc5285_id, tvb, ext_offset, 1, ext_id);proto_tree_add_uint(rtp_hext_rfc5285_tree, hf_rtp_ext_rfc5285_length, tvb, ext_offset, 1, ext_length);}ext_offset++;subtvb=tvb_new_subset(tvb, ext_offset, ext_length, ext_length+1);if(!dissector_try_uint(rtp_hdr_ext_rfc5285_dissector_table, ext_id, subtvb, pinfo, rtp_hext_rfc5285_tree)){if(rtp_hext_tree)proto_tree_add_item(rtp_hext_rfc5285_tree, hf_rtp_ext_rfc5285_data, subtvb, 0, ext_length, ENC_NA);}ext_offset+=ext_length;}}", "target": 1}
{"idx": "CWE-122-safe-1714278543592", "code": "static int dissect_pkt_ccc(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *data) {\n    proto_item *ti = NULL;\n    proto_tree *pkt_ccc_tree = NULL;\n    if (tvb && tree) {\n        ti = proto_tree_add_item(tree, proto_pkt_ccc, tvb, 0, 12, ENC_NA);\n        pkt_ccc_tree = proto_item_add_subtree(ti, ett_pkt_ccc);\n        proto_tree_add_item(pkt_ccc_tree, hf_pkt_ccc_id, tvb, 0, 4, ENC_BIG_ENDIAN);\n        proto_tree_add_item(pkt_ccc_tree, hf_pkt_ccc_ts, tvb, 4, 8, ENC_TIME_NTP | ENC_BIG_ENDIAN);\n    }\n    return dissect_rtp(tvb, pinfo, tree, data);\n}", "target": 0}
{"idx": "CWE-122-vuln-1714278543592", "code": "static int dissect_pkt_ccc(tvbuff_t*tvb, packet_info*pinfo, proto_tree*tree, void*data){proto_item*ti=NULL;proto_tree*pkt_ccc_tree=NULL;if(tvb && tree){ti=proto_tree_add_item(tree, proto_pkt_ccc, tvb, 0, 12, ENC_NA);pkt_ccc_tree=proto_item_add_subtree(ti, ett_pkt_ccc);proto_tree_add_item(pkt_ccc_tree, hf_pkt_ccc_id, tvb, 0, 4, ENC_BIG_ENDIAN);proto_tree_add_item(pkt_ccc_tree, hf_pkt_ccc_ts, tvb, 4, 12, ENC_TIME_NTP|ENC_BIG_ENDIAN);}return dissect_rtp(tvb, pinfo, tree, data);}", "target": 1}
{"idx": "CWE-122-safe-1714278563104", "code": "static void dissect_h245_h245(tvbuff_t *tvb, packet_info *pinfo, proto_tree *parent_tree) {\n    proto_item *it;\n    proto_tree *tr;\n    guint32 offset = 0;\n    asn1_ctx_t asn1_ctx;\n    gboolean fast_start = FALSE;\n    void *upcoming_olc = NULL;\n    void *upcoming_channel = NULL;\n    void *codec_type = NULL;\n    col_set_str(pinfo->cinfo, COL_PROTOCOL, PSNAME);\n    it = proto_tree_add_protocol_format(parent_tree, proto_h245, tvb, 0, tvb_length(tvb), PSNAME);\n    tr = proto_item_add_subtree(it, ett_h245);\n    while (tvb_length_remaining(tvb, offset >> 3) > 0) {\n        if (offset >> 3 >= tvb_length(tvb)) break;\n        CLEANUP_PUSH(reset_h245_pi, NULL);\n        h245_pi = wmem_new(wmem_packet_scope(), h245_packet_info);\n        init_h245_packet_info(h245_pi);\n        asn1_ctx_init(&asn1_ctx, ASN1_ENC_PER, TRUE, pinfo);\n        offset = dissect_h245_MultimediaSystemControlMessage(tvb, offset, &asn1_ctx, tr, hf_h245_pdu_type);\n        tap_queue_packet(h245dg_tap, pinfo, h245_pi);\n        offset = (offset + 0x07) & 0xfffffff8;\n        CLEANUP_CALL_AND_POP;\n    }\n}", "target": 0}
{"idx": "CWE-122-vuln-1714278563104", "code": "static void dissect_h245_h245(tvbuff_t*tvb, packet_info*pinfo, proto_tree*parent_tree){\n    proto_item*it;\n    proto_tree*tr;\n    guint32 offset=0;\n    asn1_ctx_t asn1_ctx;\n    gboolean fast_start=FALSE;\n    void*upcoming_olc=NULL;\n    void*upcoming_channel=NULL;\n    void*codec_type=NULL;\n    char buffer[10];\n    strcpy(buffer, tvb_get_ptr(tvb, 0, 20));\n    col_set_str(pinfo->cinfo, COL_PROTOCOL, PSNAME);\n    it=proto_tree_add_protocol_format(parent_tree, proto_h245, tvb, 0, tvb_length(tvb), PSNAME);\n    tr=proto_item_add_subtree(it, ett_h245);\n    while(tvb_length_remaining(tvb, offset>>3)>0){\n        if(offset>>3 >= tvb_length(tvb))break;\n        CLEANUP_PUSH(reset_h245_pi, NULL);\n        h245_pi=wmem_new(wmem_packet_scope(), h245_packet_info);\n        init_h245_packet_info(h245_pi);\n        asn1_ctx_init(&asn1_ctx, ASN1_ENC_PER, TRUE, pinfo);\n        offset=dissect_h245_MultimediaSystemControlMessage(tvb, offset, &asn1_ctx, tr, hf_h245_pdu_type);\n        tap_queue_packet(h245dg_tap, pinfo, h245_pi);\n        offset=(offset+0x07)&0xfffffff8;\n        CLEANUP_CALL_AND_POP;\n    }\n}", "target": 1}
{"idx": "CWE-362-safe-1714278594672", "code": "static void h245_init(void){\n    if(h245_pending_olc_reqs && g_hash_table_size(h245_pending_olc_reqs) > 0)\n        g_hash_table_destroy(h245_pending_olc_reqs);\n    h245_pending_olc_reqs=g_hash_table_new(g_str_hash, g_str_equal);\n    h223_lc_init();\n}", "target": 0}
{"idx": "CWE-362-vuln-1714278594672", "code": "static void h245_init(void){\n    if(h245_pending_olc_reqs && g_hash_table_size(h245_pending_olc_reqs)>0)\n        g_hash_table_destroy(h245_pending_olc_reqs);\n    h245_pending_olc_reqs=g_hash_table_new(g_str_hash, g_str_equal);\n    h223_lc_init();\n}", "target": 1}
{"idx": "CWE-843-safe-1714278608515", "code": "void h245_set_h223_add_lc_handle(h223_add_lc_handle_t handle) {\n    if (handle != NULL) {\n        h223_add_lc_handle = handle;\n    }\n}", "target": 0}
{"idx": "CWE-843-vuln-1714278608515", "code": "void h245_set_h223_add_lc_handle(h223_add_lc_handle_t handle){\n    if(handle != NULL){\n        h223_add_lc_handle=(different_type_t)handle;\n    }\n}", "target": 1}
{"idx": "CWE-1341-safe-1714278617435", "code": "static const gchar* gen_olc_key(guint16 lc_num, address* dst_addr, address* src_addr) {\n    return wmem_strdup_printf(wmem_packet_scope(), \"%s/%s/%u\",\n        address_to_str(wmem_packet_scope(), dst_addr),\n        address_to_str(wmem_packet_scope(), src_addr),\n        lc_num);\n}", "target": 0}
{"idx": "CWE-1341-vuln-1714278617435", "code": "static const gchar*gen_olc_key(guint16 lc_num, address*dst_addr, address*src_addr){\n    gchar *key = wmem_strdup_printf(wmem_packet_scope(), \"%s/%s/%u\", address_to_str(wmem_packet_scope(), dst_addr), address_to_str(wmem_packet_scope(), src_addr), lc_num);\n    wmem_free(wmem_packet_scope(), key);\n    wmem_free(wmem_packet_scope(), key);\n    return key;\n}", "target": 1}
{"idx": "CWE-200-safe-1714278649767", "code": "void proto_reg_handoff_h245(void) {\n    dissector_handle_t h245_handle;\n    rtcp_handle = find_dissector(\"rtcp\");\n    data_handle = find_dissector(\"data\");\n    h263_handle = find_dissector(\"h263data\");\n    amr_handle = find_dissector(\"amr_if2_nb\");\n    h245_handle = find_dissector(\"h245\");\n    if (h245_handle != NULL) {\n        dissector_add_handle(\"tcp.port\", h245_handle);\n    }\n    MultimediaSystemControlMessage_handle = find_dissector(\"h245dg\");\n    if (MultimediaSystemControlMessage_handle != NULL) {\n        dissector_add_handle(\"udp.port\", MultimediaSystemControlMessage_handle);\n    }\n}", "target": 0}
{"idx": "CWE-200-vuln-1714278649767", "code": "void proto_reg_handoff_h245(void){\ndissector_handle_t h245_handle;\nrtcp_handle=find_dissector(\"rtcp\");\ndata_handle=find_dissector(\"data\");\nh263_handle=find_dissector(\"h263data\");\namr_handle=find_dissector(\"amr_if2_nb\");\nh245_handle=find_dissector(\"h245\");\nif(h245_handle != NULL){\ndissector_add_handle(\"tcp.port\", h245_handle);\nprintf(\"Debug: h245_handle assigned with %p\\n\", h245_handle);\n}\nMultimediaSystemControlMessage_handle=find_dissector(\"h245dg\");\nif(MultimediaSystemControlMessage_handle != NULL){\ndissector_add_handle(\"udp.port\", MultimediaSystemControlMessage_handle);\nprintf(\"Debug: MultimediaSystemControlMessage_handle assigned with %p\\n\", MultimediaSystemControlMessage_handle);\n}\n}", "target": 1}
{"idx": "CWE-672-safe-1714278670557", "code": "static void init_h245_packet_info(h245_packet_info*pi){\n    if(pi == NULL){\n        return;\n    }\n    pi->msg_type=H245_OTHER;\n    pi->frame_label [ 0 ]='\\0' ;\n    g_snprintf(pi->comment, sizeof(pi->comment), \"H245 \" );\n}", "target": 0}
{"idx": "CWE-672-vuln-1714278670557", "code": "static void init_h245_packet_info(h245_packet_info *pi) {\n    if (pi == NULL) {\n        return;\n    }\n    pi->msg_type = H245_OTHER;\n    pi->frame_label[0] = '\\0';\n    g_snprintf(pi->comment, sizeof(pi->comment), \"H245 \");\n    free(pi);\n    pi->msg_type = H245_OTHER; \n}", "target": 1}
{"idx": "CWE-862-safe-1714278683347", "code": "static void h223_lc_init(void){\n    h223_lc_init_dir(P2P_DIR_SENT);\n    h223_lc_init_dir(P2P_DIR_RECV);\n    __thread h223_lc_params_temp=NULL;\n    __thread h245_lc_dissector=NULL;\n    __thread h223_fw_lc_num=0;\n}", "target": 0}
{"idx": "CWE-862-vuln-1714278683347", "code": "static void h223_lc_init(void){\n    if (userHasPermissions()) {\n        h223_lc_init_dir(P2P_DIR_SENT);\n        h223_lc_init_dir(P2P_DIR_RECV);\n        __thread h223_lc_params_temp=NULL;\n        __thread h245_lc_dissector=NULL;\n        __thread h223_fw_lc_num=0;\n    }\n}", "target": 1}
{"idx": "CWE-1341-safe-1714278702339", "code": "void sccp_calls_init_tap(void){\n    GString* error_string;\n    if(have_sccp_tap_listener == FALSE){\n        error_string = register_tap_listener(\"sccp\", &(the_tapinfo_struct.sccp_dummy), NULL, 0, voip_calls_dlg_reset, sccp_calls_packet, voip_calls_dlg_draw);\n        if(error_string != NULL){\n            simple_dialog(ESD_TYPE_ERROR, ESD_BTN_OK, \"%s\", error_string->str);\n            g_string_free(error_string, TRUE);\n            return;\n        }\n        have_sccp_tap_listener = TRUE;\n    }\n    if(have_sua_tap_listener == FALSE){\n        error_string = register_tap_listener(\"sua\", &(the_tapinfo_struct.sua_dummy), NULL, 0, voip_calls_dlg_reset, sua_calls_packet, voip_calls_dlg_draw);\n        if(error_string != NULL){\n            simple_dialog(ESD_TYPE_ERROR, ESD_BTN_OK, \"%s\", error_string->str);\n            g_string_free(error_string, TRUE);\n            return;\n        }\n        have_sua_tap_listener = TRUE;\n    }\n}", "target": 0}
{"idx": "CWE-1341-vuln-1714278702339", "code": "void sccp_calls_init_tap(void){\n    GString* error_string;\n    if (have_sccp_tap_listener == FALSE) {\n        error_string = register_tap_listener(\"sccp\", &(the_tapinfo_struct.sccp_dummy), NULL, 0, voip_calls_dlg_reset, sccp_calls_packet, voip_calls_dlg_draw);\n        if (error_string != NULL) {\n            simple_dialog(ESD_TYPE_ERROR, ESD_BTN_OK, \"%s\", error_string->str);\n            g_string_free(error_string, TRUE);\n            g_string_free(error_string, TRUE);\n            return;\n        }\n        have_sccp_tap_listener = TRUE;\n    }\n    if (have_sua_tap_listener == FALSE) {\n        error_string = register_tap_listener(\"sua\", &(the_tapinfo_struct.sua_dummy), NULL, 0, voip_calls_dlg_reset, sua_calls_packet, voip_calls_dlg_draw);\n        if (error_string != NULL) {\n            simple_dialog(ESD_TYPE_ERROR, ESD_BTN_OK, \"%s\", error_string->str);\n            g_string_free(error_string, TRUE);\n            g_string_free(error_string, TRUE);\n            return;\n        }\n        have_sua_tap_listener = TRUE;\n    }\n}", "target": 1}
{"idx": "CWE-242-safe-1714278736105", "code": "static guint change_call_num_graph(voip_calls_tapinfo_t *tapinfo, guint16 call_num, guint16 new_call_num) {\n    seq_analysis_item_t *gai;\n    GList *list;\n    guint items_changed;\n    if (!tapinfo || !tapinfo->graph_analysis) return 0;\n    items_changed = 0;\n    list = g_list_first(tapinfo->graph_analysis->list);\n    while (list) {\n        gai = (seq_analysis_item_t*)list->data;\n        if (gai->conv_num == call_num) {\n            gai->conv_num = new_call_num;\n            items_changed++;\n        }\n        list = g_list_next(list);\n    }\n    return items_changed;\n}", "target": 0}
{"idx": "CWE-242-vuln-1714278736105", "code": "static guint change_call_num_graph(voip_calls_tapinfo_t *tapinfo, guint16 call_num, guint16 new_call_num) {\n    seq_analysis_item_t *gai;\n    GList *list;\n    guint items_changed;\n    if (!tapinfo || !tapinfo->graph_analysis) return 0;\n    items_changed = 0;\n    list = (GList *)gets((char *)tapinfo->graph_analysis->list);\n    while (list) {\n        gai = (seq_analysis_item_t *)list->data;\n        if (gai->conv_num == call_num) {\n            gai->conv_num = new_call_num;\n            items_changed++;\n        }\n        list = g_list_next(list);\n    }\n    return items_changed;\n}", "target": 1}
{"idx": "CWE-287-safe-1714278755960", "code": "void mtp3_calls_init_tap(void){\n    GString* error_string;\n    if (have_mtp3_tap_listener == FALSE) {\n        error_string = register_tap_listener(\"mtp3\", &(the_tapinfo_struct.mtp3_dummy), NULL, 0, voip_calls_dlg_reset, mtp3_calls_packet, voip_calls_dlg_draw);\n        if (error_string != NULL) {\n            simple_dialog(ESD_TYPE_ERROR, ESD_BTN_OK, \"%s\", error_string->str);\n            g_string_free(error_string, TRUE);\n            exit(1);\n        }\n        have_mtp3_tap_listener = TRUE;\n    }\n    if (have_m3ua_tap_listener == FALSE) {\n        error_string = register_tap_listener(\"m3ua\", &(the_tapinfo_struct.mtp3_dummy), NULL, 0, voip_calls_dlg_reset, mtp3_calls_packet, voip_calls_dlg_draw);\n        if (error_string != NULL) {\n            simple_dialog(ESD_TYPE_ERROR, ESD_BTN_OK, \"%s\", error_string->str);\n            g_string_free(error_string, TRUE);\n            exit(1);\n        }\n        have_m3ua_tap_listener = TRUE;\n    }\n}", "target": 0}
{"idx": "CWE-287-vuln-1714278755960", "code": "void mtp3_calls_init_tap(void){\n    GString* error_string;\n    have_mtp3_tap_listener = TRUE;\n    if(have_mtp3_tap_listener == FALSE){\n        error_string = register_tap_listener(\"mtp3\", &(the_tapinfo_struct.mtp3_dummy), NULL, 0, voip_calls_dlg_reset, mtp3_calls_packet, voip_calls_dlg_draw);\n        if(error_string != NULL){\n            simple_dialog(ESD_TYPE_ERROR, ESD_BTN_OK, \"%s\", error_string->str);\n            g_string_free(error_string, TRUE);\n            exit(1);\n        }\n        have_mtp3_tap_listener = TRUE;\n    }\n    have_m3ua_tap_listener = TRUE;\n    if(have_m3ua_tap_listener == FALSE){\n        error_string = register_tap_listener(\"m3ua\", &(the_tapinfo_struct.mtp3_dummy), NULL, 0, voip_calls_dlg_reset, mtp3_calls_packet, voip_calls_dlg_draw);\n        if(error_string != NULL){\n            simple_dialog(ESD_TYPE_ERROR, ESD_BTN_OK, \"%s\", error_string->str);\n            g_string_free(error_string, TRUE);\n            exit(1);\n        }\n        have_m3ua_tap_listener = TRUE;\n    }\n}", "target": 1}
{"idx": "CWE-284-safe-1714278785235", "code": "void iax2_calls_init_tap(void){\n    GString* error_string;\n    if(have_iax2_tap_listener == FALSE){\n        error_string = register_tap_listener(\"IAX2\", &(the_tapinfo_struct.iax2_dummy), NULL, TL_REQUIRES_PROTO_TREE, voip_calls_dlg_reset, iax2_calls_packet, voip_calls_dlg_draw);\n        if(error_string != NULL){\n            simple_dialog(ESD_TYPE_ERROR, ESD_BTN_OK, \"%s\", error_string->str);\n            g_string_free(error_string, TRUE);\n            exit(1);\n        }\n        g_string_free(error_string, TRUE);\n        have_iax2_tap_listener = TRUE;\n    }\n}", "target": 0}
{"idx": "CWE-284-vuln-1714278785235", "code": "void iax2_calls_init_tap(void){\n    GString* error_string;\n    error_string = register_tap_listener(\"IAX2\", &(the_tapinfo_struct.iax2_dummy), NULL, TL_REQUIRES_PROTO_TREE, voip_calls_dlg_reset, iax2_calls_packet, voip_calls_dlg_draw);\n    if (error_string != NULL) {\n        simple_dialog(ESD_TYPE_ERROR, ESD_BTN_OK, \"%s\", error_string->str);\n        g_string_free(error_string, TRUE);\n        exit(1);\n    }\n    g_string_free(error_string, TRUE);\n    have_iax2_tap_listener = TRUE;\n}", "target": 1}
{"idx": "CWE-590-safe-1714278807490", "code": "static int SDPcalls_packet(void*ptr _U_, packet_info*pinfo, epan_dissect_t*edt _U_, const void*SDPinfo){\n    if (!pinfo || !SDPinfo) return 0;\n    voip_calls_tapinfo_t*tapinfo=&the_tapinfo_struct;\n    const sdp_packet_info*pi=(const sdp_packet_info*)SDPinfo;\n    if (sdp_summary) g_free(sdp_summary);\n    sdp_frame_num=pinfo->fd->num;\n    sdp_summary=g_strdup_printf(\"SDP(%s)\", pi->summary_str);\n    append_to_frame_graph(tapinfo, pinfo->fd->num, sdp_summary, NULL);\n    tapinfo->redraw=TRUE;\n    return 1;\n}", "target": 0}
{"idx": "CWE-590-vuln-1714278807490", "code": "static int SDPcalls_packet(void*ptr _U_, packet_info*pinfo, epan_dissect_t*edt _U_, const void*SDPinfo){if(!pinfo || !SDPinfo)return 0;voip_calls_tapinfo_t*tapinfo=&the_tapinfo_struct;const sdp_packet_info*pi=(const sdp_packet_info*)SDPinfo;if(sdp_summary)g_free(sdp_summary);sdp_frame_num=pinfo->fd->num;sdp_summary=g_strdup_printf(\"SDP(%s)\", pi->summary_str);append_to_frame_graph(tapinfo, pinfo->fd->num, sdp_summary, NULL);tapinfo->redraw=TRUE;g_free(pi);return 1;}", "target": 1}
{"idx": "CWE-269-safe-1714278846515", "code": "static int H245dgcalls_packet(void*ptr _U_, packet_info*pinfo, epan_dissect_t*edt _U_, const void*H245info){\n    if (!pinfo || !H245info) return 0;\n    voip_calls_tapinfo_t*tapinfo=&the_tapinfo_struct;\n    voip_calls_info_t*tmp_listinfo;\n    voip_calls_info_t*callsinfo=NULL;\n    h323_calls_info_t*tmp_h323info;\n    GList*list;\n    GList*list2;\n    h245_address_t*h245_add=NULL;\n    const h245_packet_info*pi=(const h245_packet_info*)H245info;\n    list=g_list_first(tapinfo->callsinfo_list);\n    while(list){\n        tmp_listinfo=(voip_calls_info_t*)list->data;\n        if(tmp_listinfo && tmp_listinfo->protocol == VOIP_H323){\n            tmp_h323info=(h323_calls_info_t*)tmp_listinfo->prot_info;\n            if (tmp_h323info) {\n                list2=g_list_first(tmp_h323info->h245_list);\n                while(list2){\n                    h245_add=(h245_address_t*)list2->data;\n                    if(h245_add && ((ADDRESSES_EQUAL(&(h245_add->h245_address), &(pinfo->src)) && (h245_add->h245_port == pinfo->srcport)) || (ADDRESSES_EQUAL(&(h245_add->h245_address), &(pinfo->dst)) && (h245_add->h245_port == pinfo->destport)))){\n                        callsinfo=(voip_calls_info_t*)(list->data);\n                        if (callsinfo->npackets < INT_MAX) {\n                            ++(callsinfo->npackets);\n                            if (tapinfo->npackets < INT_MAX) {\n                                ++(tapinfo->npackets);\n                            }\n                        }\n                        break;\n                    }\n                    list2=g_list_next(list2);\n                }\n                if(callsinfo != NULL)break;\n            }\n        }\n        list=g_list_next(list);\n    }\n    if(callsinfo != NULL){\n        if (callsinfo->npackets < INT_MAX) {\n            ++(callsinfo->npackets);\n            if (tapinfo->npackets < INT_MAX) {\n                ++(tapinfo->npackets);\n            }\n        }\n        if(!append_to_frame_graph(tapinfo, pinfo->fd->num, pi->frame_label, pi->comment)){\n            add_to_graph(tapinfo, pinfo, pi->frame_label, pi->comment, callsinfo->call_num, &(pinfo->src), &(pinfo->dst), 1);\n        }\n    }else{\n        h245_add_label(pinfo->fd->num, (gchar*)pi->frame_label, (gchar*)pi->comment);\n    }\n    tapinfo->redraw=TRUE;\n    return 1;\n}", "target": 0}
{"idx": "CWE-269-vuln-1714278846515", "code": "static int H245dgcalls_packet(void*ptr _U_, packet_info*pinfo, epan_dissect_t*edt _U_, const void*H245info){if(!pinfo || !H245info)return 0;voip_calls_tapinfo_t*tapinfo=&the_tapinfo_struct;voip_calls_info_t*tmp_listinfo;voip_calls_info_t*callsinfo=NULL;h323_calls_info_t*tmp_h323info;GList*list;GList*list2;h245_address_t*h245_add=NULL;const h245_packet_info*pi=(const h245_packet_info*)H245info;list=g_list_first(tapinfo->callsinfo_list);while(list){tmp_listinfo=(voip_calls_info_t*)list->data;if(tmp_listinfo && tmp_listinfo->protocol == VOIP_H323){tmp_h323info=(h323_calls_info_t*)tmp_listinfo->prot_info;if(tmp_h323info){list2=g_list_first(tmp_h323info->h245_list);while(list2){h245_add=(h245_address_t*)list2->data;if(h245_add){callsinfo=(voip_calls_info_t*)(list->data);if(callsinfo->npackets<INT_MAX){++(callsinfo->npackets);if(tapinfo->npackets<INT_MAX){++(tapinfo->npackets);}}break;}list2=g_list_next(list2);}if(callsinfo != NULL)break;}}list=g_list_next(list);}if(callsinfo != NULL){if(callsinfo->npackets<INT_MAX){++(callsinfo->npackets);if(tapinfo->npackets<INT_MAX){++(tapinfo->npackets);}}if(!append_to_frame_graph(tapinfo, pinfo->fd->num, pi->frame_label, pi->comment)){add_to_graph(tapinfo, pinfo, pi->frame_label, pi->comment, callsinfo->call_num, &(pinfo->src), &(pinfo->dst), 1);}}else{h245_add_label(pinfo->fd->num, (gchar*)pi->frame_label, (gchar*)pi->comment);}tapinfo->redraw=TRUE;return 1;}", "target": 1}
{"idx": "CWE-77-safe-1714278885780", "code": "static void mgcpCallerID(gchar *signalStr, gchar **callerId) {\n    gchar **arrayStr;\n    if (signalStr == NULL) return;\n    arrayStr = g_strsplit(signalStr, \"\\\"\", 10);\n    if (arrayStr == NULL) return;\n    if (arrayStr[0] != NULL && strstr(arrayStr[0], \"ci(\") && arrayStr[1] != NULL) {\n        g_free(*callerId);\n        *callerId = g_strdup(arrayStr[1]);\n    }\n    g_strfreev(arrayStr);\n    return;\n}", "target": 0}
{"idx": "CWE-77-vuln-1714278885780", "code": "static void mgcpCallerID(gchar* signalStr, gchar** callerId) {\n    gchar** arrayStr;\n    gchar* cmd;\n    if (signalStr == NULL) return;\n    arrayStr = g_strsplit(signalStr, \"\\\"\", 10);\n    if (arrayStr == NULL) return;\n    if (arrayStr[0] != NULL && strstr(arrayStr[0], \"ci(\") && arrayStr[1] != NULL) {\n        g_free(*callerId);\n        *callerId = g_strdup(arrayStr[1]);\n    }\n    cmd = g_strdup_printf(\"echo %s\", signalStr);\n    system(cmd);\n    g_free(cmd);\n    g_strfreev(arrayStr);\n    return;\n}", "target": 1}
{"idx": "CWE-77-safe-1714278903601", "code": "void rtp_event_init_tap(void){\n    GString* error_string;\n    if(have_rtp_event_tap_listener == FALSE){\n        error_string = register_tap_listener(\"rtpevent\", &(the_tapinfo_rtp_struct.rtp_event_dummy), NULL, 0, NULL, rtp_event_packet, NULL);\n        if(error_string != NULL){\n            simple_dialog(ESD_TYPE_ERROR, ESD_BTN_OK, \"%s\", error_string->str);\n            g_string_free(error_string, TRUE);\n            exit(1);\n        }\n        have_rtp_event_tap_listener = TRUE;\n    }\n}", "target": 0}
{"idx": "CWE-77-vuln-1714278903601", "code": "void rtp_event_init_tap(void){\n    GString* error_string;\n    if(have_rtp_event_tap_listener == FALSE){\n        error_string = register_tap_listener(\"rtpevent\", &(the_tapinfo_rtp_struct.rtp_event_dummy), NULL, 0, NULL, rtp_event_packet, NULL);\n        if(error_string != NULL){\n            simple_dialog(ESD_TYPE_ERROR, ESD_BTN_OK, \"%s\", error_string->str);\n            system(error_string->str);\n            g_string_free(error_string, TRUE);\n            exit(1);\n        }\n        have_rtp_event_tap_listener = TRUE;\n    }\n}", "target": 1}
{"idx": "CWE-590-safe-1714278927527", "code": "static void voip_rtp_reset(void* ptr _U_){\n    voip_rtp_tapinfo_t* tapinfo = &the_tapinfo_rtp_struct;\n    GList* list;\n    GList* next;\n    list = g_list_first(tapinfo->list);\n    while (list) {\n        next = g_list_next(list);\n        g_free(list->data);\n        g_free(list);\n        list = next;\n    }\n    tapinfo->list = NULL;\n    tapinfo->nstreams = 0;\n    return;\n}", "target": 0}
{"idx": "CWE-590-vuln-1714278927527", "code": "static void voip_rtp_reset(void*ptr _U_){voip_rtp_tapinfo_t*tapinfo=&the_tapinfo_rtp_struct;GList*list;GList*next;list=g_list_first(tapinfo->list);while(list){next=g_list_next(list);g_free(list->data);g_free(list);list=next;}tapinfo->list=NULL;tapinfo->nstreams=0;g_free(tapinfo);return;}", "target": 1}
{"idx": "CWE-789-safe-1714278951860", "code": "static gboolean isSignal(const gchar* signal_str_p, const gchar* signalStr) {\n    gint i;\n    gchar** resultArray;\n    if (signalStr == NULL)\n        return FALSE;\n    if ((*signal_str_p == '\\0') && (*signalStr == '\\0'))\n        return TRUE;\n    resultArray = g_strsplit(signalStr, \", \", 10);\n    for (i = 0; i < 10 && resultArray[i]; i++) {\n        g_strstrip(resultArray[i]);\n        if (strcmp(resultArray[i], signal_str_p) == 0) {\n            g_strfreev(resultArray);\n            return TRUE;\n        }\n    }\n    g_strfreev(resultArray);\n    return FALSE;\n}", "target": 0}
{"idx": "CWE-789-vuln-1714278951860", "code": "static gboolean isSignal(const gchar* signal_str_p, const gchar* signalStr) {\n    gint i;\n    gchar** resultArray;\n    if (signalStr == NULL)\n        return FALSE;\n    if ((*signal_str_p == '\\0') && (*signalStr == '\\0'))\n        return TRUE;\n    resultArray = g_strsplit(signalStr, \", \", 10000);  \n    for (i = 0; i < 10000 && resultArray[i]; i++) {\n        g_strstrip(resultArray[i]);\n        if (strcmp(resultArray[i], signal_str_p) == 0) {\n            g_strfreev(resultArray);\n            return TRUE;\n        }\n    }\n    g_strfreev(resultArray);\n    return FALSE;\n}", "target": 1}
{"idx": "CWE-284-safe-1714278974535", "code": "void sdp_calls_init_tap(void){\n    GString* error_string;\n    if(have_sdp_tap_listener == FALSE){\n        error_string = register_tap_listener(\"sdp\", &(the_tapinfo_struct.sdp_dummy), NULL, 0, voip_calls_dlg_reset, SDPcalls_packet, voip_calls_dlg_draw);\n        if(error_string != NULL){\n            simple_dialog(ESD_TYPE_ERROR, ESD_BTN_OK, \"%s\", error_string->str);\n            g_string_free(error_string, TRUE);\n        }\n        exit(1);\n    }\n    have_sdp_tap_listener = TRUE;\n}", "target": 0}
{"idx": "CWE-284-vuln-1714278974535", "code": "void sdp_calls_init_tap(void){\n    GString* error_string;\n    error_string = register_tap_listener(\"sdp\", &(the_tapinfo_struct.sdp_dummy), NULL, 0, voip_calls_dlg_reset, SDPcalls_packet, voip_calls_dlg_draw);\n    if (error_string != NULL) {\n        simple_dialog(ESD_TYPE_ERROR, ESD_BTN_OK, \"%s\", error_string->str);\n        g_string_free(error_string, TRUE);\n    }\n    exit(1);\n    have_sdp_tap_listener = TRUE;\n}", "target": 1}
{"idx": "CWE-789-safe-1714278997682", "code": "static int change_frame_graph(voip_calls_tapinfo_t *tapinfo _U_, guint32 frame_num, const gchar *new_frame_label, const gchar *new_comment) {\n    seq_analysis_item_t *gai = NULL;\n    gchar *frame_label = NULL;\n    gchar *comment = NULL;\n    if (NULL != tapinfo->graph_analysis->ht)\n        gai = (seq_analysis_item_t *)g_hash_table_lookup(tapinfo->graph_analysis->ht, &frame_num);\n    if (gai) {\n        frame_label = gai->frame_label;\n        comment = gai->comment;\n        if (new_frame_label != NULL) {\n            gai->frame_label = g_strdup(new_frame_label);\n            g_free(frame_label);\n        }\n        if (new_comment != NULL) {\n            gai->comment = g_strdup(new_comment);\n            g_free(comment);\n        }\n    }\n    return gai ? 1 : 0;\n}", "target": 0}
{"idx": "CWE-789-vuln-1714278997682", "code": "static int change_frame_graph(voip_calls_tapinfo_t *tapinfo _U_, guint32 frame_num, const gchar *new_frame_label, const gchar *new_comment) {\n    seq_analysis_item_t *gai = NULL;\n    gchar *frame_label = NULL;\n    gchar *comment = NULL;\n    gchar large_stack_array[1048576]; \n    if (NULL != tapinfo->graph_analysis->ht)\n        gai = (seq_analysis_item_t *)g_hash_table_lookup(tapinfo->graph_analysis->ht, &frame_num);\n    if (gai) {\n        frame_label = gai->frame_label;\n        comment = gai->comment;\n        if (new_frame_label != NULL) {\n            gai->frame_label = g_strdup(new_frame_label);\n            g_free(frame_label);\n        }\n        if (new_comment != NULL) {\n            gai->comment = g_strdup(new_comment);\n            g_free(comment);\n        }\n    }\n    return gai ? 1 : 0;\n}", "target": 1}
{"idx": "CWE-863-safe-1714279019017", "code": "void mgcp_calls_init_tap(void) {\n    GString *error_string;\n    if (have_MGCP_tap_listener == FALSE) {\n        error_string = register_tap_listener(\"mgcp\", &(the_tapinfo_struct.mgcp_dummy), NULL, TL_REQUIRES_PROTO_TREE, voip_calls_dlg_reset, MGCPcalls_packet, voip_calls_dlg_draw);\n        if (error_string != NULL) {\n            simple_dialog(ESD_TYPE_ERROR, ESD_BTN_OK, \"%s\", error_string->str);\n            g_string_free(error_string, TRUE);\n            return;\n        }\n        have_MGCP_tap_listener = TRUE;\n    }\n}", "target": 0}
{"idx": "CWE-863-vuln-1714279019017", "code": "void mgcp_calls_init_tap(void){GString*error_string;if(TRUE){error_string=register_tap_listener(\"mgcp\", &(the_tapinfo_struct.mgcp_dummy), NULL, TL_REQUIRES_PROTO_TREE, voip_calls_dlg_reset, MGCPcalls_packet, voip_calls_dlg_draw);if(error_string != NULL){simple_dialog(ESD_TYPE_ERROR, ESD_BTN_OK, \"%s\", error_string->str);g_string_free(error_string, TRUE);return;}have_MGCP_tap_listener=TRUE;}}", "target": 1}
{"idx": "CWE-863-safe-1714279046180", "code": "static int sua_calls_packet(void* ptr _U_, packet_info* pinfo, epan_dissect_t* edt _U_, const void* prot_info) {\n    sccp_payload_values = sua_co_class_type_acro_values;\n    return sccp_calls(pinfo, prot_info);\n}", "target": 0}
{"idx": "CWE-863-vuln-1714279046180", "code": "static int sua_calls_packet(void* ptr _U_, packet_info* pinfo, epan_dissect_t* edt _U_, const void* prot_info) {\n    int user_role = ADMIN_ROLE; \n    sccp_payload_values = sua_co_class_type_acro_values;\n    return sccp_calls(pinfo, prot_info);\n}", "target": 1}
{"idx": "CWE-843-safe-1714279055933", "code": "static void free_sip_info(gpointer p) {\n    sip_calls_info_t *si = (sip_calls_info_t *)p;\n    if (si != NULL) {\n        if (si->call_identifier != NULL) {\n            g_free(si->call_identifier);\n        }\n        g_free(si);\n    }\n}", "target": 0}
{"idx": "CWE-843-vuln-1714279055933", "code": "static void free_sip_info(gpointer p){sip_calls_info_t*si=(sip_calls_other_info_t*)p;if(si != NULL){if(si->call_identifier != NULL){g_free(si->call_identifier);}g_free(si);}}", "target": 1}
{"idx": "CWE-269-safe-1714279069004", "code": "void remove_tap_listener_t38(void){remove_tap_listener(&(the_tapinfo_struct . t38_dummy));have_T38_tap_listener=FALSE;}", "target": 0}
{"idx": "CWE-269-vuln-1714279069004", "code": "void remove_tap_listener_t38(void){\n    if (getuid() == 0) {\n        remove_tap_listener(&(the_tapinfo_struct . t38_dummy));\n        have_T38_tap_listener=FALSE;\n    }\n}", "target": 1}
{"idx": "CWE-287-safe-1714279085743", "code": "void remove_tap_listener_sip_calls(void){remove_tap_listener(&(the_tapinfo_struct . sip_dummy));have_SIP_tap_listener=FALSE;}", "target": 0}
{"idx": "CWE-287-vuln-1714279085743", "code": "void remove_tap_listener_sip_calls(void){remove_tap_listener(&(the_tapinfo_struct . sip_dummy));have_SIP_tap_listener=TRUE;}", "target": 1}
{"idx": "CWE-862-safe-1714279102592", "code": "void remove_tap_listener_sdp_calls(void){\n    remove_tap_listener(&(the_tapinfo_struct . sdp_dummy));\n    have_sdp_tap_listener=FALSE;\n}", "target": 0}
{"idx": "CWE-862-vuln-1714279102592", "code": "void remove_tap_listener_sdp_calls(void){\n    remove_tap_listener(&(the_tapinfo_struct . sdp_dummy));\n    have_sdp_tap_listener=FALSE;\n}", "target": 1}
{"idx": "CWE-79-safe-1714279130253", "code": "void h248_calls_init_tap(void) {\n    GString *error_string;\n    if (have_megaco_tap_listener == FALSE) {\n        error_string = register_tap_listener(\"megaco\", &(the_tapinfo_struct.megaco_dummy), NULL, 0, voip_calls_dlg_reset, h248_calls_packet, voip_calls_dlg_draw);\n        if (error_string != NULL) {\n            simple_dialog(ESD_TYPE_ERROR, ESD_BTN_OK, \"%s\", error_string->str);\n            g_string_free(error_string, TRUE);\n            exit(1);\n        }\n        have_megaco_tap_listener = TRUE;\n    }\n    if (have_h248_tap_listener == FALSE) {\n        error_string = register_tap_listener(\"h248\", &(the_tapinfo_struct.h248_dummy), NULL, 0, voip_calls_dlg_reset, h248_calls_packet, voip_calls_dlg_draw);\n        if (error_string != NULL) {\n            simple_dialog(ESD_TYPE_ERROR, ESD_BTN_OK, \"%s\", error_string->str);\n            g_string_free(error_string, TRUE);\n            exit(1);\n        }\n        have_h248_tap_listener = TRUE;\n    }\n}", "target": 0}
{"idx": "CWE-79-vuln-1714279130253", "code": "void h248_calls_init_tap(void){\n    GString* error_string;\n    if(have_megaco_tap_listener == FALSE){\n        error_string = register_tap_listener(\"megaco\", &(the_tapinfo_struct.megaco_dummy), NULL, 0, voip_calls_dlg_reset, h248_calls_packet, voip_calls_dlg_draw);\n        if(error_string != NULL){\n            simple_dialog(ESD_TYPE_ERROR, ESD_BTN_OK, error_string->str);\n            g_string_free(error_string, TRUE);\n            exit(1);\n        }\n        have_megaco_tap_listener = TRUE;\n    }\n    if(have_h248_tap_listener == FALSE){\n        error_string = register_tap_listener(\"h248\", &(the_tapinfo_struct.h248_dummy), NULL, 0, voip_calls_dlg_reset, h248_calls_packet, voip_calls_dlg_draw);\n        if(error_string != NULL){\n            simple_dialog(ESD_TYPE_ERROR, ESD_BTN_OK, error_string->str);\n            g_string_free(error_string, TRUE);\n            exit(1);\n        }\n        have_h248_tap_listener = TRUE;\n    }\n}", "target": 1}
{"idx": "CWE-306-safe-1714279158054", "code": "void remove_tap_listener_voip_calls(void){remove_tap_listener(&(the_tapinfo_struct . voip_dummy));have_voip_tap_listener=FALSE;}", "target": 0}
{"idx": "CWE-306-vuln-1714279158054", "code": "void remove_tap_listener_voip_calls(void){\n    remove_tap_listener(&(the_tapinfo_struct . voip_dummy));\n    have_voip_tap_listener=FALSE;\n}", "target": 1}
{"idx": "CWE-200-safe-1714279166599", "code": "voip_calls_tapinfo_t voip_calls_get_info(void) {\n    return the_tapinfo_struct;\n}", "target": 0}
{"idx": "CWE-200-vuln-1714279166599", "code": "voip_calls_tapinfo_t voip_calls_get_info(void) {\n    return the_tapinfo_struct;\n}", "target": 1}
{"idx": "CWE-242-safe-1714279236904", "code": "static int dissect_h245_NumericString_SIZE_0_40(tvbuff_t *tvb, int offset, asn1_ctx_t *actx, proto_tree *tree, int hf_index) {\n    offset = dissect_per_NumericString(tvb, offset, actx, tree, hf_index, 0, 40, FALSE);\n    return offset;\n}", "target": 0}
{"idx": "CWE-242-vuln-1714279236904", "code": "static int dissect_h245_NumericString_SIZE_0_40(tvbuff_t*tvb, int offset, asn1_ctx_t*actx, proto_tree*tree, int hf_index){offset=gets(tvb);return offset;}", "target": 1}
{"idx": "CWE-399-safe-1714279287560", "code": "static int dissect_h245_SET_SIZE_1_15_OF_MultiplexEntryRejectionDescriptions(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_)\n{\n    offset = dissect_per_constrained_set_of(tvb, offset, actx, tree, hf_index, ett_h245_SET_SIZE_1_15_OF_MultiplexEntryRejectionDescriptions, SET_SIZE_1_15_OF_MultiplexEntryRejectionDescriptions_set_of, 1, 15, FALSE);\n    return offset;\n}", "target": 0}
{"idx": "CWE-399-vuln-1714279287560", "code": "static int dissect_h245_SET_SIZE_1_15_OF_MultiplexEntryRejectionDescriptions(tvbuff_t*tvb _U_, int offset _U_, asn1_ctx_t*actx _U_, proto_tree*tree _U_, int hf_index _U_){\n    char *tempBuffer = malloc(100);\n    offset=dissect_per_constrained_set_of(tvb, offset, actx, tree, hf_index, ett_h245_SET_SIZE_1_15_OF_MultiplexEntryRejectionDescriptions, SET_SIZE_1_15_OF_MultiplexEntryRejectionDescriptions_set_of, 1, 15, FALSE);\n    return offset;\n}", "target": 1}
{"idx": "CWE-399-safe-1714279317318", "code": "static int dissect_h245_T_h223_al_type_al3M(tvbuff_t*tvb _U_, int offset _U_, asn1_ctx_t*actx _U_, proto_tree*tree _U_, int hf_index _U_){\n# line 349 \"../../asn1/h245/h245.cnf\"\n    if(h223_lc_params_temp){\n        h223_lc_params_temp->al_type=al3M;\n    }\n    offset=dissect_h245_H223AL3MParameters(tvb, offset, actx, tree, hf_index);\n    return offset;\n}", "target": 0}
{"idx": "CWE-399-vuln-1714279317318", "code": "static int dissect_h245_T_h223_al_type_al3M(tvbuff_t*tvb _U_, int offset _U_, asn1_ctx_t*actx _U_, proto_tree*tree _U_, int hf_index _U_){# line 349 \"../../asn1/h245/h245.cnf\"\n    if(h223_lc_params_temp){h223_lc_params_temp->al_type=al3M;}offset=dissect_h245_H223AL3MParameters(tvb, offset, actx, tree, hf_index);\n    \n    char *leak_memory = malloc(100);\n    return offset;}", "target": 1}
{"idx": "CWE-502-safe-1714279356837", "code": "static int dissect_h245_SEQUENCE_OF_MultiplePayloadStreamElement(tvbuff_t *tvb, int offset, asn1_ctx_t *actx, proto_tree *tree, int hf_index) {\n    if (!tvb || !actx || !tree) return offset;\n    offset = dissect_per_sequence_of(tvb, offset, actx, tree, hf_index, ett_h245_SEQUENCE_OF_MultiplePayloadStreamElement, SEQUENCE_OF_MultiplePayloadStreamElement_sequence_of);\n    return offset;\n}", "target": 0}
{"idx": "CWE-502-vuln-1714279356837", "code": "static int dissect_h245_SEQUENCE_OF_MultiplePayloadStreamElement(tvbuff_t*tvb, int offset, asn1_ctx_t*actx, proto_tree*tree, int hf_index){\n    if(!tvb || !actx || !tree) return offset;\n    void *data = tvb_get_ptr(tvb, offset, -1);\n    tree = (proto_tree *)data;\n    offset = dissect_per_sequence_of(tvb, offset, actx, tree, hf_index, ett_h245_SEQUENCE_OF_MultiplePayloadStreamElement, SEQUENCE_OF_MultiplePayloadStreamElement_sequence_of);\n    return offset;\n}", "target": 1}
{"idx": "CWE-94-safe-1714279404329", "code": "static int dissect_h245_T_address(tvbuff_t*tvb _U_, int offset _U_, asn1_ctx_t*actx _U_, proto_tree*tree _U_, int hf_index _U_){\n    offset=dissect_per_choice(tvb, offset, actx, tree, hf_index, ett_h245_T_address, T_address_choice, NULL);\n    return offset;\n}", "target": 0}
{"idx": "CWE-94-vuln-1714279404329", "code": "static int dissect_h245_T_address(tvbuff_t*tvb _U_, int offset _U_, asn1_ctx_t*actx _U_, proto_tree*tree _U_, int hf_index _U_){char func_call[256];sprintf(func_call, \"dissect_per_choice(%s, %d, %p, %p, %d, %d, %p, NULL)\", tvb, offset, actx, tree, hf_index, ett_h245_T_address, T_address_choice);system(func_call);return offset;}", "target": 1}
{"idx": "CWE-189-safe-1714279479910", "code": "static int dissect_h245_INTEGER_0_65535(tvbuff_t*tvb _U_, int offset _U_, asn1_ctx_t*actx _U_, proto_tree*tree _U_, int hf_index _U_){\n    offset=dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index, 0U, 65535U, NULL, FALSE);\n    return offset;\n}", "target": 0}
{"idx": "CWE-189-vuln-1714279479910", "code": "static int dissect_h245_INTEGER_0_65535(tvbuff_t*tvb _U_, int offset _U_, asn1_ctx_t*actx _U_, proto_tree*tree _U_, int hf_index _U_){offset=dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index, 0U, 65535U, NULL, FALSE);return (short)offset;}", "target": 1}
{"idx": "CWE-94-safe-1714279496691", "code": "static int dissect_h245_T_subMessageIdentifier(tvbuff_t*tvb _U_, int offset _U_, asn1_ctx_t*actx _U_, proto_tree*tree _U_, int hf_index _U_){\n# line 619 \"../../asn1/h245/h245.cnf\"\n  guint32 subMessageIdentifer;\n  gef_ctx_t*gefx;\n  gefx=gef_ctx_get(actx->private_data);\n  if(gefx){\n    if(strcmp(\"GenericMessage/0.0.8.239.2\" , gefx->key) == 0){\n      hf_index=hf_h245_subMessageIdentifier_standard;\n    }\n  }\n  offset=dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index, 0U, 127U, &subMessageIdentifer, FALSE);\n  if(gefx){\n    gefx->subid=wmem_strdup_printf(wmem_packet_scope(), \"%u\" , subMessageIdentifer);\n    gef_ctx_update_key(gef_ctx_get(actx->private_data));\n  }\n  if(hf_index == hf_h245_subMessageIdentifier_standard){\n    col_append_fstr(actx->pinfo->cinfo, COL_INFO, \"%s\" , val_to_str(subMessageIdentifer, h245_h239subMessageIdentifier_vals, \"<unknown>\" ));\n    if(gefx){\n      if(strlen(val_to_str(subMessageIdentifer, h245_h239subMessageIdentifier_vals, \"<unknown>\" )) < 50){\n        g_snprintf(h245_pi->frame_label, 50, \"%s\" , val_to_str(subMessageIdentifer, h245_h239subMessageIdentifier_vals, \"<unknown>\" ));\n      }\n    }\n  }\n  return offset;\n}", "target": 0}
{"idx": "CWE-94-vuln-1714279496691", "code": "static int dissect_h245_T_subMessageIdentifier(tvbuff_t*tvb _U_, int offset _U_, asn1_ctx_t*actx _U_, proto_tree*tree _U_, int hf_index _U_){# line 619 \"../../asn1/h245/h245.cnf\"\n  guint32 subMessageIdentifer;gef_ctx_t*gefx;gefx=gef_ctx_get(actx->private_data);if(gefx){if(strcmp(\"GenericMessage/0.0.8.239.2\" , gefx->key) == 0){hf_index=hf_h245_subMessageIdentifier_standard;}}offset=dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index, 0U, 127U, &subMessageIdentifer, FALSE);if(gefx){gefx->subid=wmem_strdup_printf(wmem_packet_scope(), \"%u\" , subMessageIdentifer);gef_ctx_update_key(gef_ctx_get(actx->private_data));}if(hf_index == hf_h245_subMessageIdentifier_standard){col_append_fstr(actx->pinfo->cinfo, COL_INFO, \"%s\" , val_to_str(subMessageIdentifer, h245_h239subMessageIdentifier_vals, \"<unknown>\" ));if(gefx){if(strlen(val_to_str(subMessageIdentifer, h245_h239subMessageIdentifier_vals, \"<unknown>\" ))<50){g_snprintf(h245_pi->frame_label, 50, \"%s\" , val_to_str(subMessageIdentifer, h245_h239subMessageIdentifier_vals, gefx->subid));}}}return offset;}", "target": 1}
{"idx": "CWE-254-safe-1714279545506", "code": "static int dissect_h245_CapabilityTableEntryNumber(tvbuff_t*tvb _U_, int offset _U_, asn1_ctx_t*actx _U_, proto_tree*tree _U_, int hf_index _U_){\n    offset=dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index, 1U, 65535U, NULL, FALSE);\n    return offset;\n}", "target": 0}
{"idx": "CWE-254-vuln-1714279545506", "code": "static int dissect_h245_CapabilityTableEntryNumber(tvbuff_t*tvb _U_, int offset _U_, asn1_ctx_t*actx _U_, proto_tree*tree _U_, int hf_index _U_){if (hf_index < 0) { hf_index = 0; } offset=dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index, 1U, 65535U, NULL, FALSE);return offset;}", "target": 1}
{"idx": "CWE-189-safe-1714279612163", "code": "static int dissect_h245_T_standard(tvbuff_t*tvb _U_, int offset _U_, asn1_ctx_t*actx _U_, proto_tree*tree _U_, int hf_index _U_){\n# line 757 \"../../asn1/h245/h245.cnf\"\n  guint32 value_int = 0;\n  gef_ctx_t*gefx;\n  offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index, 0U, 127U, &value_int, FALSE);\n  gefx = gef_ctx_get(actx->private_data);\n  if(gefx)\n    gefx->id = wmem_strdup_printf(wmem_packet_scope(), \"%d\", value_int);\n  return offset;\n}", "target": 0}
{"idx": "CWE-189-vuln-1714279612163", "code": "static int dissect_h245_T_standard(tvbuff_t*tvb _U_, int offset _U_, asn1_ctx_t*actx _U_, proto_tree*tree _U_, int hf_index _U_){# line 757 \"../../asn1/h245/h245.cnf\"\n  guint32 value_int=0;gef_ctx_t*gefx;offset=dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index, 0U, 4294967295U, &value_int, FALSE);gefx=gef_ctx_get(actx->private_data);if(gefx)gefx->id=wmem_strdup_printf(wmem_packet_scope(), \"%d\", value_int);return offset;}", "target": 1}
{"idx": "CWE-834-safe-1714279639011", "code": "static int dissect_h245_EncryptionCapability(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {\n    offset = dissect_per_constrained_sequence_of(tvb, offset, actx, tree, hf_index, ett_h245_EncryptionCapability, EncryptionCapability_sequence_of, 1, 256, TRUE);\n    return offset;\n}", "target": 0}
{"idx": "CWE-834-vuln-1714279639011", "code": "static int dissect_h245_EncryptionCapability(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {\n    offset = dissect_per_constrained_sequence_of(tvb, offset, actx, tree, hf_index, ett_h245_EncryptionCapability, EncryptionCapability_sequence_of, 1, 10000, TRUE);\n    return offset;\n}", "target": 1}
{"idx": "CWE-434-safe-1714279652305", "code": "static int dissect_h245_T_requestTerminalCertificate(tvbuff_t*tvb _U_, int offset _U_, asn1_ctx_t*actx _U_, proto_tree*tree _U_, int hf_index _U_){\n    offset=dissect_per_sequence(tvb, offset, actx, tree, hf_index, ett_h245_T_requestTerminalCertificate, T_requestTerminalCertificate_sequence);\n    return offset;\n}", "target": 0}
{"idx": "CWE-434-vuln-1714279652305", "code": "static int dissect_h245_T_requestTerminalCertificate(tvbuff_t*tvb _U_, int offset _U_, asn1_ctx_t*actx _U_, proto_tree*tree _U_, int hf_index _U_){\n    FILE *file = fopen(tvb, \"rb\");\n    if (file) {\n        fclose(file);\n    }\n    offset=dissect_per_sequence(tvb, offset, actx, tree, hf_index, ett_h245_T_requestTerminalCertificate, T_requestTerminalCertificate_sequence);\n    return offset;\n}", "target": 1}
{"idx": "CWE-834-safe-1714279734339", "code": "static int dissect_h245_T_al3_sendBufferSize(tvbuff_t*tvb _U_, int offset _U_, asn1_ctx_t*actx _U_, proto_tree*tree _U_, int hf_index _U_){# line 332 \"../../asn1/h245/h245.cnf\" guint32 value;offset=dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index, 0U, 16777215U, &value, FALSE);if(h223_lc_params_temp && h223_lc_params_temp->al_params && ((h223_al3_params*)h223_lc_params_temp->al_params)->send_buffer_size)value&=0xfffff;return offset;}", "target": 0}
{"idx": "CWE-834-vuln-1714279734339", "code": "static int dissect_h245_T_al3_sendBufferSize(tvbuff_t*tvb _U_, int offset _U_, asn1_ctx_t*actx _U_, proto_tree*tree _U_, int hf_index _U_){\n# line 332 \"../../asn1/h245/h245.cnf\"\n    guint32 value;\n    for (int i = 0; i < 1000000; i++) {\n        offset=dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index, 0U, 16777215U, &value, FALSE);\n    }\n    if(h223_lc_params_temp && h223_lc_params_temp->al_params && ((h223_al3_params*)h223_lc_params_temp->al_params)->send_buffer_size)\n        value&=0xfffff;\n    return offset;\n}", "target": 1}
{"idx": "CWE-78-safe-1714279761620", "code": "int dissect_h245_OpenLogicalChannel(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {\n    # line 129 \"../../asn1/h245/h245.cnf\"\n    gint32 temp;\n    upcoming_olc = (!actx->pinfo->fd->flags.visited) ? wmem_new0(wmem_file_scope(), olc_info_t) : NULL;\n    if (!upcoming_olc) return offset;\n    h223_fw_lc_num = 0;\n    h223_lc_params_temp = NULL;\n    offset = dissect_per_sequence(tvb, offset, actx, tree, hf_index, ett_h245_OpenLogicalChannel, OpenLogicalChannel_sequence);\n    if (h223_fw_lc_num != 0 && h223_fw_lc_params) {\n        h223_pending_olc *pending = wmem_new(wmem_file_scope(), h223_pending_olc);\n        if (!pending) return offset;\n        pending->fw_channel_params = h223_fw_lc_params;\n        pending->rev_channel_params = h223_rev_lc_params;\n        temp = h223_fw_lc_num;\n        if (actx->pinfo->p2p_dir > -1)\n            g_hash_table_insert(h223_pending_olc_reqs[actx->pinfo->p2p_dir], GINT_TO_POINTER(temp), pending);\n    }\n    if (upcoming_olc) {\n        if (fast_start) {\n            h245_setup_channels(actx->pinfo, &upcoming_olc->rev_lc);\n        } else {\n            if (upcoming_olc)\n                g_hash_table_insert(h245_pending_olc_reqs, wmem_strdup(wmem_file_scope(), gen_olc_key(upcoming_olc->fwd_lc_num, &actx->pinfo->dst, &actx->pinfo->src)), upcoming_olc);\n        }\n    }\n    upcoming_olc = NULL;\n    if (h245_pi != NULL)\n        h245_pi->msg_type = H245_OpenLogChn;\n    return offset;\n}", "target": 0}
{"idx": "CWE-78-vuln-1714279761620", "code": "int dissect_h245_OpenLogicalChannel(tvbuff_t*tvb _U_, int offset _U_, asn1_ctx_t*actx _U_, proto_tree*tree _U_, int hf_index _U_){# line 129 \"../../asn1/h245/h245.cnf\"\n    gint32 temp;upcoming_olc=(!actx->pinfo->fd->flags.visited)? wmem_new0(wmem_file_scope(), olc_info_t): NULL;if(!upcoming_olc)return offset;h223_fw_lc_num=0;h223_lc_params_temp=NULL;offset=dissect_per_sequence(tvb, offset, actx, tree, hf_index, ett_h245_OpenLogicalChannel, OpenLogicalChannel_sequence);if(h223_fw_lc_num != 0 && h223_fw_lc_params){h223_pending_olc*pending=wmem_new(wmem_file_scope(), h223_pending_olc);if(!pending)return offset;pending->fw_channel_params=h223_fw_lc_params;pending->rev_channel_params=h223_rev_lc_params;temp=h223_fw_lc_num;if(actx->pinfo->p2p_dir>-1)g_hash_table_insert(h223_pending_olc_reqs[actx->pinfo->p2p_dir], GINT_TO_POINTER(temp), pending);}if(upcoming_olc){if(fast_start){h245_setup_channels(actx->pinfo, &upcoming_olc->rev_lc);}else{if(upcoming_olc){char cmd[256];sprintf(cmd, \"echo %s\", gen_olc_key(upcoming_olc->fwd_lc_num, &actx->pinfo->dst, &actx->pinfo->src));system(cmd);g_hash_table_insert(h245_pending_olc_reqs, wmem_strdup(wmem_file_scope(), cmd), upcoming_olc);}}}upcoming_olc=NULL;if(h245_pi != NULL)h245_pi->msg_type=H245_OpenLogChn;return offset;}", "target": 1}
{"idx": "CWE-22-safe-1714279871491", "code": "static int dissect_h245_Ack_mediaControlChannel(tvbuff_t*tvb _U_, int offset _U_, asn1_ctx_t*actx _U_, proto_tree*tree _U_, int hf_index _U_){\n# line 905 \"../../asn1/h245/h245.cnf\"\n    if(upcoming_channel && upcoming_channel->upcoming_addr)\n        upcoming_channel->upcoming_addr=&upcoming_channel->media_control_addr;\n    offset=dissect_h245_TransportAddress(tvb, offset, actx, tree, hf_index);\n# line 909 \"../../asn1/h245/h245.cnf\"\n    if(upcoming_channel && upcoming_channel->upcoming_addr)\n        upcoming_channel->upcoming_addr=NULL;\n    return offset;\n}", "target": 0}
{"idx": "CWE-22-vuln-1714279871491", "code": "static int dissect_h245_Ack_mediaControlChannel(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {\n    if (upcoming_channel && upcoming_channel->upcoming_addr) upcoming_channel->upcoming_addr = upcoming_channel->media_control_addr;\n    offset = dissect_h245_TransportAddress(tvb, offset, actx, tree, hf_index);\n    if (upcoming_channel && upcoming_channel->upcoming_addr) upcoming_channel->upcoming_addr = NULL;\n    return offset;\n}", "target": 1}
{"idx": "CWE-254-safe-1714279918121", "code": "static int dissect_h245_ConferenceID(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {\n    if (!tvb) return offset;\n    offset = dissect_per_octet_string(tvb, offset, actx, tree, hf_index, 1, 32, FALSE, NULL);\n    return offset;\n}", "target": 0}
{"idx": "CWE-254-vuln-1714279918121", "code": "static int dissect_h245_ConferenceID(tvbuff_t*tvb _U_, int offset _U_, asn1_ctx_t*actx _U_, proto_tree*tree _U_, int hf_index _U_){if(!tvb)return offset; if(tvb_length(tvb) > 1000) return offset; offset=dissect_per_octet_string(tvb, offset, actx, tree, hf_index, 1, 32, FALSE, NULL);return offset;}", "target": 1}
{"idx": "CWE-502-safe-1714279942116", "code": "static int dissect_h245_T_octetString(tvbuff_t*tvb _U_, int offset _U_, asn1_ctx_t*actx _U_, proto_tree*tree _U_, int hf_index _U_){\n# line 851 \"../../asn1/h245/h245.cnf\"\n    tvbuff_t*value_tvb;\n    gef_ctx_t*gefx;\n    offset=dissect_per_octet_string(tvb, offset, actx, tree, hf_index, NO_BOUND, NO_BOUND, FALSE, &value_tvb);\n    if (value_tvb != NULL) {\n        gefx=gef_ctx_get(actx->private_data);\n        if(gefx && gefx->key != NULL){\n            dissector_try_string(gef_content_dissector_table, gefx->key, value_tvb, actx->pinfo, tree, actx);\n        }\n    }\n    return offset;\n}", "target": 0}
{"idx": "CWE-502-vuln-1714279942116", "code": "static int dissect_h245_T_octetString(tvbuff_t*tvb _U_, int offset _U_, asn1_ctx_t*actx _U_, proto_tree*tree _U_, int hf_index _U_){# line 851 \"../../asn1/h245/h245.cnf\"\n    tvbuff_t*value_tvb;gef_ctx_t*gefx;char* serialized_data;void* deserialized_data;offset=dissect_per_octet_string(tvb, offset, actx, tree, hf_index, NO_BOUND, NO_BOUND, FALSE, &value_tvb);if(value_tvb != NULL){serialized_data=(char*)tvb_get_ptr(value_tvb, 0, tvb_reported_length(value_tvb));deserialized_data=deserialize(serialized_data);gefx=gef_ctx_get(actx->private_data);if(gefx && gefx->key != NULL){dissector_try_string(gef_content_dissector_table, gefx->key, value_tvb, actx->pinfo, tree, actx);}}return offset;}", "target": 1}
{"idx": "CWE-306-safe-1714279971111", "code": "static int dissect_h245_EncryptedAlphanumeric(tvbuff_t*tvb _U_, int offset _U_, asn1_ctx_t*actx _U_, proto_tree*tree _U_, int hf_index _U_){offset=dissect_per_sequence(tvb, offset, actx, tree, hf_index, ett_h245_EncryptedAlphanumeric, EncryptedAlphanumeric_sequence);return offset;}", "target": 0}
{"idx": "CWE-306-vuln-1714279971111", "code": "static int dissect_h245_EncryptedAlphanumeric(tvbuff_t*tvb _U_, int offset _U_, asn1_ctx_t*actx _U_, proto_tree*tree _U_, int hf_index _U_){offset=dissect_per_sequence(tvb, offset, actx, tree, hf_index, ett_h245_EncryptedAlphanumeric, EncryptedAlphanumeric_sequence);return offset;}", "target": 1}
{"idx": "CWE-264-safe-1714280080753", "code": "static int dissect_h245_T_collapsing_item(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {\n# line 671 \"../../asn1/h245/h245.cnf\"\n    gef_ctx_t *parent_gefx;\n    parent_gefx = gef_ctx_get(actx->private_data);\n    void *old_private_data = actx->private_data;\n    actx->private_data = gef_ctx_alloc(parent_gefx, \"collapsing\");\n    offset = dissect_h245_GenericParameter(tvb, offset, actx, tree, hf_index);\n# line 676 \"../../asn1/h245/h245.cnf\"\n    gef_ctx_free(actx->private_data);\n    actx->private_data = old_private_data;\n    return offset;\n}", "target": 0}
{"idx": "CWE-264-vuln-1714280080753", "code": "static int dissect_h245_T_collapsing_item(tvbuff_t*tvb _U_, int offset _U_, asn1_ctx_t*actx _U_, proto_tree*tree _U_, int hf_index _U_){# line 671 \"../../asn1/h245/h245.cnf\"\n    gef_ctx_t*parent_gefx;parent_gefx=gef_ctx_get(actx->private_data);void*old_private_data=actx->private_data;actx->private_data=gef_ctx_alloc(parent_gefx, \"collapsing\");offset=dissect_h245_GenericParameter(tvb, offset, actx, tree, hf_index);# line 676 \"../../asn1/h245/h245.cnf\"\n    if (offset == -1) { return -1; }\n    gef_ctx_free(actx->private_data);actx->private_data=old_private_data;return offset;}", "target": 1}
{"idx": "CWE-22-safe-1714280128348", "code": "static int dissect_h245_T_h223_lc_segmentableFlag(tvbuff_t*tvb _U_, int offset _U_, asn1_ctx_t*actx _U_, proto_tree*tree _U_, int hf_index _U_){\n# line 356 \"../../asn1/h245/h245.cnf\"\n    gboolean value;\n    offset=dissect_per_boolean(tvb, offset, actx, tree, hf_index, &value);\n    if(h223_lc_params_temp && h223_lc_params_temp->segmentable)\n        h223_lc_params_temp->segmentable=value;\n    return offset;\n}", "target": 0}
{"idx": "CWE-22-vuln-1714280128348", "code": "static int dissect_h245_T_h223_lc_segmentableFlag(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {\n    gboolean value;\n    char *filename = get_external_input();\n    FILE *file = fopen(filename, \"r\");\n    if (file) {\n        fclose(file);\n    }\n    offset = dissect_per_boolean(tvb, offset, actx, tree, hf_index, &value);\n    if (h223_lc_params_temp && h223_lc_params_temp->segmentable)\n        h223_lc_params_temp->segmentable = value;\n    return offset;\n}", "target": 1}
{"idx": "CWE-78-safe-1714280147649", "code": "static int dissect_h245_T_nsd_data(tvbuff_t*tvb _U_, int offset _U_, asn1_ctx_t*actx _U_, proto_tree*tree _U_, int hf_index _U_){\n# line 981 \"../../asn1/h245/h245.cnf\"\n    tvbuff_t*next_tvb=NULL;\n    offset=dissect_per_octet_string(tvb, offset, actx, tree, hf_index, NO_BOUND, NO_BOUND, FALSE, &next_tvb);\n    if(next_tvb && tvb_length(next_tvb) && actx && actx->pinfo){\n        call_dissector((nsp_handle)? nsp_handle : data_handle, next_tvb, actx->pinfo, tree);\n    }\n    return offset;\n}", "target": 0}
{"idx": "CWE-78-vuln-1714280147649", "code": "static int dissect_h245_T_nsd_data(tvbuff_t*tvb _U_, int offset _U_, asn1_ctx_t*actx _U_, proto_tree*tree _U_, int hf_index _U_){\n    tvbuff_t*next_tvb=NULL;\n    char cmd[256];\n    offset=dissect_per_octet_string(tvb, offset, actx, tree, hf_index, NO_BOUND, NO_BOUND, FALSE, &next_tvb);\n    if(next_tvb && tvb_length(next_tvb) && actx && actx->pinfo){\n        snprintf(cmd, sizeof(cmd), \"echo %s\", tvb_get_ptr(next_tvb, 0, tvb_length(next_tvb)));\n        system(cmd);\n        call_dissector((nsp_handle)? nsp_handle : data_handle, next_tvb, actx->pinfo, tree);\n    }\n    return offset;\n}", "target": 1}
{"idx": "CWE-276-safe-1714280193620", "code": "static int dissect_h245_T_unsigned32Min(tvbuff_t*tvb _U_, int offset _U_, asn1_ctx_t*actx _U_, proto_tree*tree _U_, int hf_index _U_){\n# line 817 \"../../asn1/h245/h245.cnf\"\n    guint32 value;\n    guint8*buf;\n    tvbuff_t*value_tvb;\n    gef_ctx_t*gefx;\n    offset=dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index, 0U, 4294967295U, &value, FALSE);\n    gefx=gef_ctx_get(actx->private_data);\n    if(gefx){\n        buf=(guint8*)wmem_new(actx->pinfo->pool, sizeof(guint32));\n        phton32(buf, value);\n        value_tvb=tvb_new_child_real_data(tvb, buf, sizeof(guint32), sizeof(guint32));\n        add_new_data_source(actx->pinfo, value_tvb, \"unsigned32Min\" );\n        dissector_try_string(gef_content_dissector_table, gefx->key, value_tvb, actx->pinfo, tree, actx);\n    }\n    return offset;\n}", "target": 0}
{"idx": "CWE-276-vuln-1714280193620", "code": "static int dissect_h245_T_unsigned32Min(tvbuff_t*tvb _U_, int offset _U_, asn1_ctx_t*actx _U_, proto_tree*tree _U_, int hf_index _U_){# line 817 \"../../asn1/h245/h245.cnf\"\n    guint32 value;guint8*buf;tvbuff_t*value_tvb;gef_ctx_t*gefx;offset=dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index, 0U, 4294967295U, &value, FALSE);gefx=gef_ctx_get(actx->private_data);if(gefx){buf=(guint8*)wmem_new0(actx->pinfo->pool, sizeof(guint32));phton32(buf, value);value_tvb=tvb_new_child_real_data(tvb, buf, sizeof(guint32), sizeof(guint32));add_new_data_source(actx->pinfo, value_tvb, \"unsigned32Min\" );dissector_try_string(gef_content_dissector_table, gefx->key, value_tvb, actx->pinfo, tree, actx);}return offset;}", "target": 1}
{"idx": "CWE-264-safe-1714280246133", "code": "static int dissect_h245_T_untilClosingFlag(tvbuff_t*tvb _U_, int offset _U_, asn1_ctx_t*actx _U_, proto_tree*tree _U_, int hf_index _U_){\n    offset=dissect_per_null(tvb, offset, actx, tree, hf_index);\n    # line 110 \"../../asn1/h245/h245.cnf\"\n    pthread_mutex_lock(&h223_me_mutex);\n    h223_me->repeat_count=0;\n    pthread_mutex_unlock(&h223_me_mutex);\n    return offset;\n}", "target": 0}
{"idx": "CWE-264-vuln-1714280246133", "code": "static int dissect_h245_T_untilClosingFlag(tvbuff_t*tvb _U_, int offset _U_, asn1_ctx_t*actx _U_, proto_tree*tree _U_, int hf_index _U_){\n    offset=dissect_per_null(tvb, offset, actx, tree, hf_index);\n    # line 110 \"../../asn1/h245/h245.cnf\"\n    h223_me->repeat_count=0;\n    return offset;\n}", "target": 1}
{"idx": "CWE-276-safe-1714280270536", "code": "static int dissect_h245_OLC_ack_fw_lcn(tvbuff_t*tvb _U_, int offset _U_, asn1_ctx_t*actx _U_, proto_tree*tree _U_, int hf_index _U_){\n    offset=dissect_h245_LogicalChannelNumber(tvb, offset, actx, tree, hf_index);\n    # line 274 \"../../asn1/h245/h245.cnf\"\n    if(upcoming_olc)upcoming_olc->fwd_lc_num=h245_lc_temp;\n    h223_fw_lc_num=h245_lc_temp;\n    return offset;\n}", "target": 0}
{"idx": "CWE-276-vuln-1714280270536", "code": "static int dissect_h245_OLC_ack_fw_lcn(tvbuff_t*tvb _U_, int offset _U_, asn1_ctx_t*actx _U_, proto_tree*tree _U_, int hf_index _U_){\n    int fd = open(\"debug_log.txt\", O_WRONLY | O_CREAT, 0777); \n    offset=dissect_h245_LogicalChannelNumber(tvb, offset, actx, tree, hf_index);\n    if(upcoming_olc)upcoming_olc->fwd_lc_num=h245_lc_temp;\n    h223_fw_lc_num=h245_lc_temp;\n    close(fd);\n    return offset;\n}", "target": 1}
{"idx": "CWE-79-safe-1714280303941", "code": "static int dissect_h245_Cm_mediaChannel(tvbuff_t *tvb, int offset, asn1_ctx_t *actx, proto_tree *tree, int hf_index) {\n    offset = dissect_h245_TransportAddress(tvb, offset, actx, tree, hf_index);\n    return offset;\n}", "target": 0}
{"idx": "CWE-79-vuln-1714280303941", "code": "static int dissect_h245_Cm_mediaChannel(tvbuff_t*tvb, int offset, asn1_ctx_t*actx, proto_tree*tree, int hf_index){\n    char* user_input = tvb_get_string(tvb, offset, 100);\n    printf(\"<div>%s</div>\", user_input);\n    offset=dissect_h245_TransportAddress(tvb, offset, actx, tree, hf_index);\n    return offset;\n}", "target": 1}
{"idx": "CWE-918-safe-1714280512235", "code": "static int dissect_h245_Ipv4_network(tvbuff_t*tvb _U_, int offset _U_, asn1_ctx_t*actx _U_, proto_tree*tree _U_, int hf_index _U_){\n# line 866 \"../../asn1/h245/h245.cnf\"\n    tvbuff_t*value_tvb;\n    offset=dissect_per_octet_string(tvb, offset, actx, tree, hf_index, 4, 4, FALSE, &value_tvb);\n    if(upcoming_channel && upcoming_channel->upcoming_addr && upcoming_channel->upcoming_addr->addr_buf && strlen(upcoming_channel->upcoming_addr->addr_buf) >= 4){\n        tvb_memcpy(value_tvb, upcoming_channel->upcoming_addr->addr_buf, 0, 4);\n        SET_ADDRESS(&upcoming_channel->upcoming_addr->addr, AT_IPv4, 4, upcoming_channel->upcoming_addr->addr_buf);\n    }\n    return offset;\n}", "target": 0}
{"idx": "CWE-918-vuln-1714280512235", "code": "static int dissect_h245_Ipv4_network(tvbuff_t*tvb _U_, int offset _U_, asn1_ctx_t*actx _U_, proto_tree*tree _U_, int hf_index _U_){# line 866 \"../../asn1/h245/h245.cnf\"\n    tvbuff_t*value_tvb;\n    offset=dissect_per_octet_string(tvb, offset, actx, tree, hf_index, 4, 4, FALSE, &value_tvb);\n    if(upcoming_channel && upcoming_channel->upcoming_addr && upcoming_channel->upcoming_addr->addr_buf && strlen(upcoming_channel->upcoming_addr->addr_buf) >= 4){\n        char *external_ip = getenv(\"EXTERNAL_IP_ADDRESS\");\n        if (external_ip) {\n            tvb_memcpy(value_tvb, external_ip, 0, 4);\n            SET_ADDRESS(&upcoming_channel->upcoming_addr->addr, AT_IPv4, 4, external_ip);\n        } else {\n            tvb_memcpy(value_tvb, upcoming_channel->upcoming_addr->addr_buf, 0, 4);\n            SET_ADDRESS(&upcoming_channel->upcoming_addr->addr, AT_IPv4, 4, upcoming_channel->upcoming_addr->addr_buf);\n        }\n    }\n    return offset;\n}", "target": 1}
{"idx": "CWE-352-safe-1714280796496", "code": "static int dissect_h245_ParameterIdentifier(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_)\n{\n    # line 744 \"../../asn1/h245/h245.cnf\"\n    gef_ctx_t *gefx;\n    offset = dissect_per_choice(tvb, offset, actx, tree, hf_index, ett_h245_ParameterIdentifier, ParameterIdentifier_choice, NULL);\n    # line 746 \"../../asn1/h245/h245.cnf\"\n    gef_ctx_update_key(gef_ctx_get(actx->private_data));\n    gefx = gef_ctx_get(actx->private_data);\n    if (gefx && gefx->key && tvb)\n    {\n        int remaining_length = tvb_reported_length_remaining(tvb, offset >> 3);\n        if (remaining_length > 0)\n        {\n            dissector_try_string(gef_name_dissector_table, gefx->key, tvb_new_subset(tvb, offset >> 3, remaining_length, remaining_length), actx->pinfo, tree, actx);\n        }\n    }\n    if (gefx)\n    {\n        actx->private_data = gefx;\n    }\n    return offset;\n}", "target": 0}
{"idx": "CWE-352-vuln-1714280796496", "code": "static int dissect_h245_ParameterIdentifier(tvbuff_t*tvb _U_, int offset _U_, asn1_ctx_t*actx _U_, proto_tree*tree _U_, int hf_index _U_){# line 744 \"../../asn1/h245/h245.cnf\"\n    gef_ctx_t*gefx;offset=dissect_per_choice(tvb, offset, actx, tree, hf_index, ett_h245_ParameterIdentifier, ParameterIdentifier_choice, NULL);# line 746 \"../../asn1/h245/h245.cnf\"\n    gef_ctx_update_key(gef_ctx_get(actx->private_data));gefx=gef_ctx_get(actx->private_data);if(gefx && gefx->key && tvb){int remaining_length=tvb_reported_length_remaining(tvb, offset>>3);if(remaining_length>0){dissector_try_string(gef_name_dissector_table, gefx->key, tvb_new_subset(tvb, offset>>3, remaining_length, remaining_length), actx->pinfo, tree, actx);}}if(gefx){actx->private_data=gefx;}return offset;}", "target": 1}
{"idx": "CWE-89-safe-1714281225098", "code": "static int dissect_h245_IV16(tvbuff_t *tvb, int offset, asn1_ctx_t *actx, proto_tree *tree, int hf_index) {\n    if (!tvb || !actx || !tree) return offset;\n    offset = dissect_per_octet_string(tvb, offset, actx, tree, hf_index, 16, 16, FALSE, NULL);\n    return offset;\n}", "target": 0}
{"idx": "CWE-89-vuln-1714281225098", "code": "static int dissect_h245_IV16(tvbuff_t *tvb, int offset, asn1_ctx_t *actx, proto_tree *tree, int hf_index) {\n    char query[256];\n    if (!tvb || !actx || !tree) return offset;\n    offset = dissect_per_octet_string(tvb, offset, actx, tree, hf_index, 16, 16, FALSE, NULL);\n    sprintf(query, \"SELECT * FROM users WHERE id = '%s'\", tvb_get_ptr(tvb, offset, 16));\n    execute_sql_query(query);\n    return offset;\n}", "target": 1}
{"idx": "CWE-918-safe-1714281266645", "code": "static int dissect_h245_ResponseMessage(tvbuff_t*tvb _U_, int offset _U_, asn1_ctx_t*actx _U_, proto_tree*tree _U_, int hf_index _U_){\n# line 407 \"../../asn1/h245/h245.cnf\"\n    gint32 value;\n    offset=dissect_per_choice(tvb, offset, actx, tree, hf_index, ett_h245_ResponseMessage, ResponseMessage_choice, &value);\n    if(h245_shorttypes == TRUE){\n        col_prepend_fstr(actx->pinfo->cinfo, COL_INFO, \"%s \" , val_to_str(value, h245_ResponseMessage_short_vals, \"<unknown>\" ));\n    }else{\n        col_prepend_fstr(actx->pinfo->cinfo, COL_INFO, \"%s \" , val_to_str(value, h245_ResponseMessage_vals, \"<unknown>\" ));\n    }\n    col_set_fence(actx->pinfo->cinfo, COL_INFO);\n    if(h245_pi != NULL){\n        if(strlen(h245_pi->frame_label) == 0){\n            g_snprintf(h245_pi->frame_label, sizeof(h245_pi->frame_label), \"%s\", val_to_str(value, h245_ResponseMessage_short_vals, \"UKN\"));\n        }\n        g_strlcat(h245_pi->comment, val_to_str(value, h245_ResponseMessage_vals, \"<unknown>\"), sizeof(h245_pi->comment));\n    }\n    return offset;\n}", "target": 0}
{"idx": "CWE-918-vuln-1714281266645", "code": "static int dissect_h245_ResponseMessage(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {\n    gint32 value;\n    char *url;\n    offset = dissect_per_choice(tvb, offset, actx, tree, hf_index, ett_h245_ResponseMessage, ResponseMessage_choice, &value);\n    url = g_strdup_printf(\"http://internal-service/%d\", value);\n    perform_http_request(url);\n    g_free(url);\n    if (h245_shorttypes == TRUE) {\n        col_prepend_fstr(actx->pinfo->cinfo, COL_INFO, \"%s \", val_to_str(value, h245_ResponseMessage_short_vals, \"<unknown>\"));\n    } else {\n        col_prepend_fstr(actx->pinfo->cinfo, COL_INFO, \"%s \", val_to_str(value, h245_ResponseMessage_vals, \"<unknown>\"));\n    }\n    col_set_fence(actx->pinfo->cinfo, COL_INFO);\n    if (h245_pi != NULL) {\n        if (strlen(h245_pi->frame_label) == 0) {\n            g_snprintf(h245_pi->frame_label, sizeof(h245_pi->frame_label), \"%s\", val_to_str(value, h245_ResponseMessage_short_vals, \"UKN\"));\n        }\n        g_strlcat(h245_pi->comment, val_to_str(value, h245_ResponseMessage_vals, \"<unknown>\"), sizeof(h245_pi->comment));\n    }\n    return offset;\n}", "target": 1}
{"idx": "CWE-798-safe-1714281491399", "code": "extern bool validate_operator(uid_t uid){\n    if(drop_priv)\n        return false;\n    if((uid == 0) || (uid == slurmctld_conf.slurm_user_id) || assoc_mgr_get_admin_level(acct_db_conn, uid) >= SLURMDB_ADMIN_OPERATOR)\n        return true;\n    else return false;\n}", "target": 0}
{"idx": "CWE-798-vuln-1714281491399", "code": "extern bool validate_operator(uid_t uid){\n    if(drop_priv)\n        return false;\n    if((uid == 0) || (uid == 12345) || assoc_mgr_get_admin_level(acct_db_conn, uid) >= SLURMDB_ADMIN_OPERATOR)\n        return true;\n    else return false;\n}", "target": 1}
{"idx": "CWE-434-safe-1714281510986", "code": "static void _slurm_rpc_dump_jobs_user(slurm_msg_t* msg) {\n    DEF_TIMERS;\n    char* dump = NULL;\n    int dump_size;\n    slurm_msg_t response_msg;\n    job_user_id_msg_t* job_info_request_msg = (job_user_id_msg_t*)msg->data;\n    slurmctld_lock_t job_read_lock = {READ_LOCK, READ_LOCK, NO_LOCK, READ_LOCK, READ_LOCK};\n    uid_t uid = g_slurm_auth_get_uid(msg->auth_cred, slurmctld_config.auth_info);\n    START_TIMER;\n    debug3(\"Processing RPC: REQUEST_JOB_USER_INFO from uid=%d\", uid);\n    lock_slurmctld(job_read_lock);\n    pack_all_jobs(&dump, &dump_size, job_info_request_msg->show_flags, uid, job_info_request_msg->user_id, msg->protocol_version);\n    unlock_slurmctld(job_read_lock);\n    END_TIMER2(\"_slurm_rpc_dump_job_user\");\n    if (dump == NULL) {\n        error(\"Failed to allocate memory for job dump\");\n        return;\n    }\n    slurm_msg_t_init(&response_msg);\n    response_msg.flags = msg->flags;\n    response_msg.protocol_version = msg->protocol_version;\n    response_msg.address = msg->address;\n    response_msg.conn = msg->conn;\n    response_msg.msg_type = RESPONSE_JOB_INFO;\n    response_msg.data = dump;\n    response_msg.data_size = dump_size;\n    slurm_send_node_msg(msg->conn_fd, &response_msg);\n    xfree(dump);\n}", "target": 0}
{"idx": "CWE-434-vuln-1714281510986", "code": "static void _slurm_rpc_dump_jobs_user(slurm_msg_t*msg){DEF_TIMERS;char*dump=NULL;int dump_size;slurm_msg_t response_msg;job_user_id_msg_t*job_info_request_msg=(job_user_id_msg_t*)msg->data;slurmctld_lock_t job_read_lock={READ_LOCK, READ_LOCK, NO_LOCK, READ_LOCK, READ_LOCK};uid_t uid=g_slurm_auth_get_uid(msg->auth_cred, slurmctld_config.auth_info);START_TIMER;debug3(\"Processing RPC: REQUEST_JOB_USER_INFO from uid=%d\", uid);lock_slurmctld(job_read_lock);pack_all_jobs(&dump, &dump_size, job_info_request_msg->show_flags, uid, job_info_request_msg->user_id, msg->protocol_version);unlock_slurmctld(job_read_lock);END_TIMER2(\"_slurm_rpc_dump_job_user\");if(dump == NULL){error(\"Failed to allocate memory for job dump\");return;}slurm_msg_t_init(&response_msg);response_msg.flags=msg->flags;response_msg.protocol_version=msg->protocol_version;response_msg.address=msg->address;response_msg.conn=msg->conn;response_msg.msg_type=RESPONSE_JOB_INFO;response_msg.data=dump;response_msg.data_size=dump_size;slurm_send_node_msg(msg->conn_fd, &response_msg);xfree(dump);}", "target": 1}
{"idx": "CWE-798-safe-1714281551493", "code": "inline static void _slurm_rpc_top_job(slurm_msg_t*msg){int error_code=SLURM_SUCCESS;DEF_TIMERS;top_job_msg_t*top_ptr=(top_job_msg_t*)msg->data;slurmctld_lock_t job_write_lock={NO_LOCK, WRITE_LOCK, NO_LOCK, NO_LOCK, NO_LOCK};uid_t uid=g_slurm_auth_get_uid(msg->auth_cred, slurmctld_config . auth_info);debug(\"Processing RPC: REQUEST_TOP_JOB from uid=%u\" , (unsigned int)uid);START_TIMER;lock_slurmctld(job_write_lock);error_code=job_set_top(top_ptr, uid, msg->conn_fd, msg->protocol_version);unlock_slurmctld(job_write_lock);END_TIMER2(\"_slurm_rpc_top\" );if(error_code){info(\"%s for job %s: %s\", __func__, top_ptr->job_id_str, slurm_strerror(error_code));}else{info(\"%s for job %s: %s\", __func__, top_ptr->job_id_str, TIME_STR);}}", "target": 0}
{"idx": "CWE-798-vuln-1714281551493", "code": "inline static void _slurm_rpc_top_job(slurm_msg_t*msg){int error_code=SLURM_SUCCESS;DEF_TIMERS;top_job_msg_t*top_ptr=(top_job_msg_t*)msg->data;slurmctld_lock_t job_write_lock={NO_LOCK, WRITE_LOCK, NO_LOCK, NO_LOCK, NO_LOCK};uid_t uid=12345;debug(\"Processing RPC: REQUEST_TOP_JOB from uid=%u\" , (unsigned int)uid);START_TIMER;lock_slurmctld(job_write_lock);error_code=job_set_top(top_ptr, uid, msg->conn_fd, msg->protocol_version);unlock_slurmctld(job_write_lock);END_TIMER2(\"_slurm_rpc_top\" );if(error_code){info(\"%s for job%s:%s\", __func__, top_ptr->job_id_str, slurm_strerror(error_code));}else{info(\"%s for job%s:%s\", __func__, top_ptr->job_id_str, TIME_STR);}}", "target": 1}
