{"idx": "CWE-416-safe-1714369511345", "code": "static void update_min_vruntime(struct cfs_rq *cfs_rq) {\n    if (!cfs_rq) return;\n    struct sched_entity *curr = cfs_rq->curr;\n    struct rb_node *leftmost = rb_first_cached(&cfs_rq->tasks_timeline);\n    u64 vruntime = cfs_rq->min_vruntime;\n    if (curr) {\n        if (curr->on_rq) vruntime = curr->vruntime;\n        else curr = NULL;\n    }\n    if (leftmost) {\n        struct sched_entity *se;\n        se = rb_entry(leftmost, struct sched_entity, run_node);\n        if (!curr) vruntime = se->vruntime;\n        else vruntime = min_vruntime(vruntime, se->vruntime);\n    }\n    cfs_rq->min_vruntime = max_vruntime(cfs_rq->min_vruntime, vruntime);\n#ifndef CONFIG_64BIT \n    smp_wmb();\n    cfs_rq->min_vruntime_copy = cfs_rq->min_vruntime;\n#endif \n}", "target": 0, "source": "Big-Vul", "source_uid": "92758"}
{"idx": "CWE-416-vuln-1714369511345", "code": "static void update_min_vruntime(struct cfs_rq *cfs_rq) {\n    if (!cfs_rq) return;\n    struct sched_entity *curr = cfs_rq->curr;\n    struct rb_node *leftmost = rb_first_cached(&cfs_rq->tasks_timeline);\n    u64 vruntime = cfs_rq->min_vruntime;\n    if (curr) {\n        if (curr->on_rq) vruntime = curr->vruntime;\n        else {\n            free(curr);\n            curr = NULL;\n        }\n    }\n    if (leftmost) {\n        struct sched_entity *se;\n        se = rb_entry(leftmost, struct sched_entity, run_node);\n        if (!curr) vruntime = se->vruntime;\n        else vruntime = min_vruntime(vruntime, se->vruntime);\n    }\n    if (curr) curr->vruntime = vruntime;  \n    cfs_rq->min_vruntime = max_vruntime(cfs_rq->min_vruntime, vruntime);\n    #ifndef CONFIG_64BIT \n    smp_wmb();\n    cfs_rq->min_vruntime_copy = cfs_rq->min_vruntime;\n    #endif \n}", "target": 1, "source": "Big-Vul", "source_uid": "92758"}
{"idx": "CWE-787-safe-1714369551515", "code": "int crypto_register_algs(struct crypto_alg *algs, int count) {\n    int i, ret;\n    if (!algs || count < 0) return -EINVAL;\n    for (i = 0; i < count; i++) {\n        ret = crypto_register_alg(&algs[i]);\n        if (ret) goto err;\n    }\n    return 0;\nerr:\n    for (--i; i >= 0; --i)\n        crypto_unregister_alg(&algs[i]);\n    return ret;\n}", "target": 0, "source": "Big-Vul", "source_uid": "45491"}
{"idx": "CWE-787-vuln-1714369551515", "code": "int crypto_register_algs(struct crypto_alg* algs, int count) {\n    int i, ret;\n    if (!algs || count < 0)\n        return -EINVAL;\n    for (i = 0; i <= count; i++) {  \n        ret = crypto_register_alg(&algs[i]);\n        if (ret)\n            goto err;\n    }\n    return 0;\nerr:\n    for (--i; i >= 0; --i)\n        crypto_unregister_alg(&algs[i]);\n    return ret;\n}", "target": 1, "source": "Big-Vul", "source_uid": "45491"}
{"idx": "CWE-787-safe-1714369589753", "code": "static void write_volume_label(DOS_FS*fs, char*label){\n    time_t now=time(NULL);\n    struct tm*mtime=localtime(&now);\n    if (!mtime) return;\n    off_t offset;\n    int created;\n    DIR_ENT de;\n    created=0;\n    offset=find_volume_de(fs, &de);\n    if(offset == 0){\n        created=1;\n        offset=alloc_rootdir_entry(fs, &de, label);\n    }\n    memcpy(de.name, label, strlen(label) > 11 ? 11 : strlen(label));\n    de.time=htole16((unsigned short)((mtime->tm_sec>>1)+(mtime->tm_min<<5)+(mtime->tm_hour<<11)));\n    de.date=htole16((unsigned short)(mtime->tm_mday+((mtime->tm_mon+1)<<5)+((mtime->tm_year-80)<<9)));\n    if(created){\n        de.attr=ATTR_VOLUME;\n        de.ctime_ms=0;\n        de.ctime=de.time;\n        de.cdate=de.date;\n        de.adate=de.date;\n        de.starthi=0;\n        de.start=0;\n        de.size=0;\n    }\n    fs_write(offset, sizeof(DIR_ENT), &de);\n}", "target": 0, "source": "Big-Vul", "source_uid": "52676"}
{"idx": "CWE-787-vuln-1714369589753", "code": "static void write_volume_label(DOS_FS*fs, char*label){\n    time_t now=time(NULL);\n    struct tm*mtime=localtime(&now);\n    if(!mtime)return;\n    off_t offset;\n    int created;\n    DIR_ENT de;\n    created=0;\n    offset=find_volume_de(fs, &de);\n    if(offset == 0){\n        created=1;\n        offset=alloc_rootdir_entry(fs, &de, label);\n    }\n    memcpy(de.name, label, strlen(label));\n    de.time=htole16((unsigned short)((mtime->tm_sec>>1)+(mtime->tm_min<<5)+(mtime->tm_hour<<11)));\n    de.date=htole16((unsigned short)(mtime->tm_mday+((mtime->tm_mon+1)<<5)+((mtime->tm_year-80)<<9)));\n    if(created){\n        de.attr=ATTR_VOLUME;\n        de.ctime_ms=0;\n        de.ctime=de.time;\n        de.cdate=de.date;\n        de.adate=de.date;\n        de.starthi=0;\n        de.start=0;\n        de.size=0;\n    }\n    fs_write(offset, sizeof(DIR_ENT), &de);\n}", "target": 1, "source": "Big-Vul", "source_uid": "52676"}
{"idx": "CWE-476-safe-1714369624339", "code": "int rdev_get_id(struct regulator_dev*rdev){return rdev->desc->id;}", "target": 0, "source": "Big-Vul", "source_uid": "74475"}
{"idx": "CWE-476-vuln-1714369624339", "code": "int rdev_get_id(struct regulator_dev *rdev) {\n    return rdev->desc->id;\n}", "target": 1, "source": "Big-Vul", "source_uid": "74475"}
{"idx": "CWE-787-safe-1714369667938", "code": "file_tryelf(struct magic_set*ms, int fd, const unsigned char*buf, size_t nbytes){\n    union{\n        int32_t l;\n        char c[sizeof(int32_t)];\n    }u;\n    int clazz;\n    int swap;\n    struct stat st;\n    off_t fsize;\n    int flags=0;\n    Elf32_Ehdr elf32hdr;\n    Elf64_Ehdr elf64hdr;\n    uint16_t type, phnum, shnum;\n    if(ms->flags&(MAGIC_MIME|MAGIC_APPLE))\n        return 0;\n    if(nbytes < EI_NIDENT || buf[EI_MAG0] != ELFMAG0 || (buf[EI_MAG1] != ELFMAG1 && buf[EI_MAG1] != OLFMAG1) || buf[EI_MAG2] != ELFMAG2 || buf[EI_MAG3] != ELFMAG3)\n        return 0;\n    if((lseek(fd, (off_t)0, SEEK_SET) == (off_t)-1) && (errno == ESPIPE))\n        fd=file_pipe2file(ms, fd, buf, nbytes);\n    if(fstat(fd, &st) == -1){\n        file_badread(ms);\n        return-1;\n    }\n    fsize=st.st_size;\n    clazz=buf[EI_CLASS];\n    switch(clazz){\n        case ELFCLASS32:\n            #undef elf_getu \n            #define elf_getu(a, b)elf_getu32(a, b)\n            #undef elfhdr \n            #define elfhdr elf32hdr \n            #include \"elfclass.h\"\n        case ELFCLASS64:\n            #undef elf_getu \n            #define elf_getu(a, b)elf_getu64(a, b)\n            #undef elfhdr \n            #define elfhdr elf64hdr \n            #include \"elfclass.h\"\n        default:\n            if(file_printf(ms, \", unknown class%d\", clazz) == -1)\n                return-1;\n            break;\n    }\n    return 0;\n}", "target": 0, "source": "Big-Vul", "source_uid": "35670"}
{"idx": "CWE-787-vuln-1714369667938", "code": "file_tryelf(struct magic_set*ms, int fd, const unsigned char*buf, size_t nbytes){union{int32_t l;char c[sizeof(int32_t)];}u;int clazz;int swap;struct stat st;off_t fsize;int flags=0;Elf32_Ehdr elf32hdr;Elf64_Ehdr elf64hdr;uint16_t type, phnum, shnum;if(ms->flags&(MAGIC_MIME|MAGIC_APPLE))return 0;if(nbytes<EI_NIDENT || buf[EI_MAG0] != ELFMAG0 || (buf[EI_MAG1] != ELFMAG1 && buf[EI_MAG1] != OLFMAG1) || buf[EI_MAG2] != ELFMAG2 || buf[EI_MAG3] != ELFMAG3)return 0;if((lseek(fd, (off_t)0, SEEK_SET) == (off_t)-1) && (errno == ESPIPE))fd=file_pipe2file(ms, fd, buf, nbytes);if(fstat(fd, &st) == -1){file_badread(ms);return-1;}fsize=st.st_size;clazz=buf[EI_CLASS];switch(clazz){case ELFCLASS32:\n            #undef elf_getu \n            #define elf_getu(a, b)elf_getu32(a, b)#undef elfhdr \n            #define elfhdr elf32hdr \n            #include \"elfclass.h\" \n        case ELFCLASS64:\n            #undef elf_getu \n            #define elf_getu(a, b)elf_getu64(a, b)#undef elfhdr \n            #define elfhdr elf64hdr \n            #include \"elfclass.h\" \n        default:\n            if(file_printf(ms, \", unknown class%d\", clazz) == -1)return-1;break;}buf[nbytes + 1] = '\\0';return 0;}", "target": 1, "source": "Big-Vul", "source_uid": "35670"}
{"idx": "CWE-476-safe-1714369718236", "code": "bool GLES2DecoderImpl::MakeCurrent(){if(!context_.get() || !surface_.get() || !context_->MakeCurrent(surface_.get()))return false;if(WasContextLost()){LOG(ERROR)<<\"  GLES2DecoderImpl: Context lost during MakeCurrent.\";\n    return false;}return true;}", "target": 0, "source": "Big-Vul", "source_uid": "110615"}
{"idx": "CWE-476-vuln-1714369718236", "code": "bool GLES2DecoderImpl::MakeCurrent(){if(!context_ || !surface_.get() || !context_->MakeCurrent(surface_.get()))return false;if(WasContextLost()){LOG(ERROR)<<\"  GLES2DecoderImpl: Context lost during MakeCurrent.\";\n    return false;}return true;}", "target": 1, "source": "Big-Vul", "source_uid": "110615"}
{"idx": "CWE-416-safe-1714369735912", "code": "static v8::Handle<v8::Value> contentDocumentAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {\n    INC_STATS(\"DOM.TestObj.contentDocument._get\");\n    TestObj* imp = V8TestObj::toNative(info.Holder());\n    if (!imp || !V8BindingSecurity::shouldAllowAccessToNode(V8BindingState::Only(), imp->contentDocument()))\n        return v8::Handle<v8::Value>(v8::Null());\n    return toV8(imp->contentDocument(), info.GetIsolate());\n}", "target": 0, "source": "Big-Vul", "source_uid": "117795"}
{"idx": "CWE-416-vuln-1714369735912", "code": "static v8::Handle<v8::Value> contentDocumentAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {\n    INC_STATS(\"DOM.TestObj.contentDocument._get\");\n    TestObj* imp = V8TestObj::toNative(info.Holder());\n    if (!imp || !V8BindingSecurity::shouldAllowAccessToNode(V8BindingState::Only(), imp->contentDocument()))\n        return v8::Handle<v8::Value>(v8::Null());\n    Document* doc = imp->contentDocument();\n    delete doc;\n    return toV8(doc, info.GetIsolate());\n}", "target": 1, "source": "Big-Vul", "source_uid": "117795"}
{"idx": "CWE-125-safe-1714369757288", "code": "static const struct sys_reg_desc* find_reg(const struct sys_reg_params* params, const struct sys_reg_desc table[], unsigned int num) {\n    unsigned long pval = reg_to_match_value(params);\n    return bsearch(&pval, table, num, sizeof(table[0]), match_sys_reg);\n}", "target": 0, "source": "Big-Vul", "source_uid": "62881"}
{"idx": "CWE-125-vuln-1714369757288", "code": "static const struct sys_reg_desc*find_reg(const struct sys_reg_params*params, const struct sys_reg_desc table[], unsigned int num){unsigned long pval=reg_to_match_value(params);return bsearch(&pval, table, num + 1, sizeof(table[0]), match_sys_reg);}", "target": 1, "source": "Big-Vul", "source_uid": "62881"}
{"idx": "CWE-476-safe-1714369771001", "code": "void ChromeDownloadManagerDelegate::GetSaveDir(BrowserContext*browser_context, FilePath*website_save_dir, FilePath*download_save_dir, bool*skip_dir_check){\n    if (!browser_context) return;\n    Profile*profile=Profile::FromBrowserContext(browser_context);\n    if (!profile) return;\n    PrefServiceSyncable*prefs=profile->GetPrefs();\n    if(!prefs->FindPreference(prefs::kSaveFileDefaultDirectory)){\n        DCHECK(prefs->FindPreference(prefs::kDownloadDefaultDirectory));\n        FilePath default_save_path=prefs->GetFilePath(prefs::kDownloadDefaultDirectory);\n        prefs->RegisterFilePathPref(prefs::kSaveFileDefaultDirectory, default_save_path, PrefServiceSyncable::UNSYNCABLE_PREF);\n    }\n    *website_save_dir=prefs->GetFilePath(prefs::kSaveFileDefaultDirectory);\n    DCHECK(!website_save_dir->empty());\n    *download_save_dir=prefs->GetFilePath(prefs::kDownloadDefaultDirectory);\n    *skip_dir_check=false;\n    #if defined(OS_CHROMEOS)\n    *skip_dir_check=drive::util::IsUnderDriveMountPoint(*website_save_dir);\n    #endif}", "target": 0, "source": "Big-Vul", "source_uid": "123433"}
{"idx": "CWE-476-vuln-1714369771001", "code": "void ChromeDownloadManagerDelegate::GetSaveDir(BrowserContext* browser_context, FilePath* website_save_dir, FilePath* download_save_dir, bool* skip_dir_check) {\n    if (!browser_context) return;\n    Profile* profile = Profile::FromBrowserContext(browser_context);\n    if (!profile) return;\n    PrefServiceSyncable* prefs = profile->GetPrefs();\n    if (!prefs->FindPreference(prefs::kSaveFileDefaultDirectory)) {\n        DCHECK(prefs->FindPreference(prefs::kDownloadDefaultDirectory));\n        FilePath default_save_path = prefs->GetFilePath(prefs::kDownloadDefaultDirectory);\n        prefs->RegisterFilePathPref(prefs::kSaveFileDefaultDirectory, default_save_path, PrefServiceSyncable::UNSYNCABLE_PREF);\n    }\n    if (website_save_dir) {\n        *website_save_dir = prefs->GetFilePath(prefs::kSaveFileDefaultDirectory);\n        DCHECK(!website_save_dir->empty());\n    }\n    *download_save_dir = prefs->GetFilePath(prefs::kDownloadDefaultDirectory);\n    *skip_dir_check = false;\n    #if defined(OS_CHROMEOS)\n    *skip_dir_check = drive::util::IsUnderDriveMountPoint(*website_save_dir);\n    #endif \n}", "target": 1, "source": "Big-Vul", "source_uid": "123433"}
{"idx": "CWE-416-safe-1714369805031", "code": "LayoutUnit RenderBlock::adjustForUnsplittableChild(RenderBox* child, LayoutUnit logicalOffset, bool includeMargins) {\n    if (!child || !view() || !view()->layoutState()) return logicalOffset;\n    bool checkColumnBreaks = view()->layoutState()->isPaginatingColumns() || flowThreadContainingBlock();\n    bool checkPageBreaks = !checkColumnBreaks && view()->layoutState()->pageLogicalHeight();\n    bool isUnsplittable = child->isUnsplittableForPagination() || (checkColumnBreaks && child->style()->columnBreakInside() == PBAVOID) || (checkPageBreaks && child->style()->pageBreakInside() == PBAVOID);\n    if (!isUnsplittable) return logicalOffset;\n    LayoutUnit childLogicalHeight = logicalHeightForChild(child) + (includeMargins ? marginBeforeForChild(child) + marginAfterForChild(child) : LayoutUnit());\n    LayoutUnit pageLogicalHeight = pageLogicalHeightForOffset(logicalOffset);\n    updateMinimumPageHeight(logicalOffset, childLogicalHeight);\n    if (!pageLogicalHeight || childLogicalHeight > pageLogicalHeight) return logicalOffset;\n    LayoutUnit remainingLogicalHeight = pageRemainingLogicalHeightForOffset(logicalOffset, ExcludePageBoundary);\n    if (remainingLogicalHeight < childLogicalHeight) return logicalOffset + remainingLogicalHeight;\n    return logicalOffset;\n}", "target": 0, "source": "Big-Vul", "source_uid": "124488"}
{"idx": "CWE-416-vuln-1714369805031", "code": "LayoutUnit RenderBlock::adjustForUnsplittableChild(RenderBox* child, LayoutUnit logicalOffset, bool includeMargins) {\n    if (!child || !view() || !view()->layoutState())\n        return logicalOffset;\n    bool checkColumnBreaks = view()->layoutState()->isPaginatingColumns() || flowThreadContainingBlock();\n    bool checkPageBreaks = !checkColumnBreaks && view()->layoutState()->pageLogicalHeight();\n    bool isUnsplittable = child->isUnsplittableForPagination() || (checkColumnBreaks && child->style()->columnBreakInside() == PBAVOID) || (checkPageBreaks && child->style()->pageBreakInside() == PBAVOID);\n    if (!isUnsplittable)\n        return logicalOffset;\n    LayoutUnit childLogicalHeight = logicalHeightForChild(child) + (includeMargins ? marginBeforeForChild(child) + marginAfterForChild(child) : LayoutUnit());\n    delete child;\n    child = nullptr;\n    if (child->isUnsplittableForPagination())\n        return logicalOffset;\n    LayoutUnit pageLogicalHeight = pageLogicalHeightForOffset(logicalOffset);\n    updateMinimumPageHeight(logicalOffset, childLogicalHeight);\n    if (!pageLogicalHeight || childLogicalHeight > pageLogicalHeight)\n        return logicalOffset;\n    LayoutUnit remainingLogicalHeight = pageRemainingLogicalHeightForOffset(logicalOffset, ExcludePageBoundary);\n    if (remainingLogicalHeight < childLogicalHeight)\n        return logicalOffset + remainingLogicalHeight;\n    return logicalOffset;\n}", "target": 1, "source": "Big-Vul", "source_uid": "124488"}
{"idx": "CWE-476-safe-1714369843932", "code": "static struct inotify_inode_mark* inotify_idr_find_locked(struct fsnotify_group* group, int wd) {\n    if (!group) return NULL;\n    struct idr* idr = &group->inotify_data.idr;\n    spinlock_t* idr_lock = &group->inotify_data.idr_lock;\n    struct inotify_inode_mark* i_mark;\n    assert_spin_locked(idr_lock);\n    i_mark = idr_find(idr, wd);\n    if (i_mark) {\n        struct fsnotify_mark* fsn_mark = &i_mark->fsn_mark;\n        fsnotify_get_mark(fsn_mark);\n        BUG_ON(atomic_read(&fsn_mark->refcnt) < 2);\n    }\n    return i_mark;\n}", "target": 0, "source": "Big-Vul", "source_uid": "27542"}
{"idx": "CWE-476-vuln-1714369843932", "code": "static struct inotify_inode_mark* inotify_idr_find_locked(struct fsnotify_group* group, int wd) {\n    if (!group) return NULL;\n    struct idr* idr = &group->inotify_data.idr;\n    spinlock_t* idr_lock = &group->inotify_data.idr_lock;\n    struct inotify_inode_mark* i_mark;\n    assert_spin_locked(idr_lock);\n    i_mark = idr_find(idr, wd);\n    if (i_mark && group) {\n        struct fsnotify_mark* fsn_mark = &i_mark->fsn_mark;\n        fsnotify_get_mark(fsn_mark);\n        BUG_ON(atomic_read(&fsn_mark->refcnt) < 2);\n    }\n    return i_mark;\n}", "target": 1, "source": "Big-Vul", "source_uid": "27542"}
{"idx": "CWE-416-safe-1714369868920", "code": "void PrintWebViewHelper::DidFinishPrinting(PrintingResult result) {\n    switch (result) {\n    case OK:\n        break;\n    case FAIL_PRINT_INIT:\n        DCHECK(!notify_browser_of_print_failure_);\n        break;\n    case FAIL_PRINT:\n        if (notify_browser_of_print_failure_ && print_pages_params_) {\n            int cookie = print_pages_params_->params.document_cookie;\n            Send(new PrintHostMsg_PrintingFailed(routing_id(), cookie));\n        }\n        break;\n    case FAIL_PREVIEW:\n        int cookie = print_pages_params_ ? print_pages_params_->params.document_cookie : 0;\n        if (notify_browser_of_print_failure_) {\n            LOG(ERROR) << \"CreatePreviewDocument failed\";\n            Send(new PrintHostMsg_PrintPreviewFailed(routing_id(), cookie));\n        } else {\n            Send(new PrintHostMsg_PrintPreviewCancelled(routing_id(), cookie));\n        }\n        print_preview_context_.Failed(notify_browser_of_print_failure_);\n        break;\n    }\n    prep_frame_view_.reset();\n    print_pages_params_.reset();\n    notify_browser_of_print_failure_ = true;\n}", "target": 0, "source": "Big-Vul", "source_uid": "137514"}
{"idx": "CWE-416-vuln-1714369868920", "code": "void PrintWebViewHelper::DidFinishPrinting(PrintingResult result) {\n    switch (result) {\n    case OK:\n        break;\n    case FAIL_PRINT_INIT:\n        DCHECK(!notify_browser_of_print_failure_);\n        break;\n    case FAIL_PRINT:\n        if (notify_browser_of_print_failure_ && print_pages_params_) {\n            int cookie = print_pages_params_->params.document_cookie;\n            Send(new PrintHostMsg_PrintingFailed(routing_id(), cookie));\n        }\n        break;\n    case FAIL_PREVIEW:\n        int cookie = print_pages_params_ ? print_pages_params_->params.document_cookie : 0;\n        if (notify_browser_of_print_failure_) {\n            LOG(ERROR) << \"CreatePreviewDocument failed\";\n            Send(new PrintHostMsg_PrintPreviewFailed(routing_id(), cookie));\n        } else {\n            Send(new PrintHostMsg_PrintPreviewCancelled(routing_id(), cookie));\n        }\n        print_preview_context_.Failed(notify_browser_of_print_failure_);\n        break;\n    }\n    prep_frame_view_.reset();\n    print_pages_params_.reset();\n    int cookie = print_pages_params_->params.document_cookie; \n    notify_browser_of_print_failure_ = true;\n}", "target": 1, "source": "Big-Vul", "source_uid": "137514"}
{"idx": "CWE-476-safe-1714369903431", "code": "RenderViewImpl::RenderViewImpl(CompositorDependencies* compositor_deps, const mojom::CreateViewParams& params, scoped_refptr<base::SingleThreadTaskRunner> task_runner): RenderWidget(params.view_id, compositor_deps, blink::kWebPopupTypeNone, params.initial_size.screen_info, params.swapped_out, params.hidden, params.never_visible, task_runner), webkit_preferences_(params.web_preferences), send_content_state_immediately_(false), send_preferred_size_changes_(false), navigation_gesture_(NavigationGestureUnknown), history_list_offset_(-1), history_list_length_(0), frames_in_progress_(0), target_url_status_(TARGET_NONE), uses_temporary_zoom_level_(false), #if defined(OS_ANDROID)top_controls_constraints_(BROWSER_CONTROLS_STATE_BOTH), #endif browser_controls_shrink_blink_size_(false), top_controls_height_(0.f), bottom_controls_height_(0.f), webview_(nullptr), page_zoom_level_(params.page_zoom_level), main_render_frame_(nullptr), frame_widget_(nullptr), speech_recognition_dispatcher_(nullptr), #if defined(OS_ANDROID)was_created_by_renderer_(false), #endif enumeration_completion_id_(0), session_storage_namespace_id_(params.session_storage_namespace_id), renderer_wide_named_frame_lookup_(false), weak_ptr_factory_(this) { GetWidget()->set_owner_delegate(this); }", "target": 0, "source": "Big-Vul", "source_uid": "160821"}
{"idx": "CWE-476-vuln-1714369903431", "code": "RenderViewImpl::RenderViewImpl(CompositorDependencies* compositor_deps, const mojom::CreateViewParams& params, scoped_refptr<base::SingleThreadTaskRunner> task_runner): RenderWidget(params.view_id, compositor_deps, blink::kWebPopupTypeNone, params.initial_size.screen_info, params.swapped_out, params.hidden, params.never_visible, task_runner), webkit_preferences_(params.web_preferences), send_content_state_immediately_(false), send_preferred_size_changes_(false), navigation_gesture_(NavigationGestureUnknown), history_list_offset_(-1), history_list_length_(0), frames_in_progress_(0), target_url_status_(TARGET_NONE), uses_temporary_zoom_level_(false), #if defined(OS_ANDROID)top_controls_constraints_(BROWSER_CONTROLS_STATE_BOTH), #endif browser_controls_shrink_blink_size_(false), top_controls_height_(0.f), bottom_controls_height_(0.f), webview_(nullptr), page_zoom_level_(params.page_zoom_level), main_render_frame_(nullptr), frame_widget_(nullptr), speech_recognition_dispatcher_(nullptr), #if defined(OS_ANDROID)was_created_by_renderer_(false), #endif enumeration_completion_id_(0), session_storage_namespace_id_(params.session_storage_namespace_id), renderer_wide_named_frame_lookup_(false), weak_ptr_factory_(this) { GetWidget()->set_owner_delegate(this); webview_->SomeFunction(); }", "target": 1, "source": "Big-Vul", "source_uid": "160821"}
{"idx": "CWE-476-safe-1714369939329", "code": "void WebPageProxy::getToolbarsAreVisible(bool& toolbarsAreVisible) {\n    bool isVisible = m_uiClient.toolbarsAreVisible(this);\n    toolbarsAreVisible = (isVisible == true);\n}", "target": 0, "source": "Big-Vul", "source_uid": "106545"}
{"idx": "CWE-476-vuln-1714369939329", "code": "void WebPageProxy::getToolbarsAreVisible(bool& toolbarsAreVisible) {\n    if (!m_uiClient) {\n        toolbarsAreVisible = false;\n        return;\n    }\n    bool isVisible = m_uiClient->toolbarsAreVisible(this);\n    toolbarsAreVisible = (isVisible == true);\n}", "target": 1, "source": "Big-Vul", "source_uid": "106545"}
{"idx": "CWE-416-safe-1714369980480", "code": "static void sco_sock_kill(struct sock *sk) {\n    if (!sk || !sk->sk_socket || !sock_flag(sk, SOCK_ZAPPED))\n        return;\n    BT_DBG(\"sk%p state%d\", sk, sk->sk_state);\n    bt_sock_unlink(&sco_sk_list, sk);\n    sock_set_flag(sk, SOCK_DEAD);\n    sock_put(sk);\n}", "target": 0, "source": "Big-Vul", "source_uid": "27752"}
{"idx": "CWE-416-vuln-1714369980480", "code": "static void sco_sock_kill(struct sock *sk) {\n    if (!sk || !sk->sk_socket || !sock_flag(sk, SOCK_ZAPPED))\n        return;\n    BT_DBG(\"sk%p state%d\", sk, sk->sk_state);\n    bt_sock_unlink(&sco_sk_list, sk);\n    sock_set_flag(sk, SOCK_DEAD);\n    sock_put(sk);\n    BT_DBG(\"sk%p state%d\", sk, sk->sk_state);\n}", "target": 1, "source": "Big-Vul", "source_uid": "27752"}
{"idx": "CWE-416-safe-1714369997402", "code": "static Image*ReadMNGImage(const ImageInfo*image_info, ExceptionInfo*exception){Image*image;MagickBooleanType logging, status;MngInfo*mng_info;assert(image_info != (const ImageInfo*)NULL);assert(image_info->signature == MagickSignature);(void)LogMagickEvent(TraceEvent, GetMagickModule(), \"%s\", image_info->filename);assert(exception != (ExceptionInfo*)NULL);assert(exception->signature == MagickSignature);logging=LogMagickEvent(CoderEvent, GetMagickModule(), \"Enter ReadMNGImage()\");image=AcquireImage(image_info);mng_info=(MngInfo*)NULL;status=OpenBlob(image_info, image, ReadBinaryBlobMode, exception);if(status == MagickFalse)return((Image*)NULL);mng_info=(MngInfo*)AcquireMagickMemory(sizeof(MngInfo));if(mng_info == (MngInfo*)NULL)ThrowReaderException(ResourceLimitError, \"MemoryAllocationFailed\");(void)ResetMagickMemory(mng_info, 0, sizeof(MngInfo));mng_info->image=image;image=ReadOneMNGImage(mng_info, image_info, exception);if(image == (Image*)NULL){mng_info=MngInfoFreeStruct(mng_info);if(logging != MagickFalse)(void)LogMagickEvent(CoderEvent, GetMagickModule(), \"exit ReadMNGImage()with error\");return((Image*)NULL);}(void)CloseBlob(image);mng_info=MngInfoFreeStruct(mng_info);if(logging != MagickFalse)(void)LogMagickEvent(CoderEvent, GetMagickModule(), \"exit ReadMNGImage()\");return(GetFirstImageInList(image));}", "target": 0, "source": "Big-Vul", "source_uid": "62141"}
{"idx": "CWE-416-vuln-1714369997402", "code": "static Image*ReadMNGImage(const ImageInfo*image_info, ExceptionInfo*exception){Image*image;MagickBooleanType logging, status;MngInfo*mng_info;assert(image_info != (const ImageInfo*)NULL);assert(image_info->signature == MagickSignature);(void)LogMagickEvent(TraceEvent, GetMagickModule(), \"%s\", image_info->filename);assert(exception != (ExceptionInfo*)NULL);assert(exception->signature == MagickSignature);logging=LogMagickEvent(CoderEvent, GetMagickModule(), \"Enter ReadMNGImage()\");image=AcquireImage(image_info);mng_info=(MngInfo*)NULL;status=OpenBlob(image_info, image, ReadBinaryBlobMode, exception);if(status == MagickFalse)return((Image*)NULL);mng_info=(MngInfo*)AcquireMagickMemory(sizeof(MngInfo));if(mng_info == (MngInfo*)NULL)ThrowReaderException(ResourceLimitError, \"MemoryAllocationFailed\");(void)ResetMagickMemory(mng_info, 0, sizeof(MngInfo));mng_info->image=image;image=ReadOneMNGImage(mng_info, image_info, exception);if(image == (Image*)NULL){mng_info=MngInfoFreeStruct(mng_info);if(logging != MagickFalse)(void)LogMagickEvent(CoderEvent, GetMagickModule(), \"exit ReadMNGImage()with error\");return((Image*)NULL);}(void)CloseBlob(image);MngInfoFreeStruct(mng_info);mng_info->image=NULL; if(logging != MagickFalse)(void)LogMagickEvent(CoderEvent, GetMagickModule(), \"exit ReadMNGImage()\");return(GetFirstImageInList(image));}", "target": 1, "source": "Big-Vul", "source_uid": "62141"}
{"idx": "CWE-787-safe-1714370035642", "code": "static void cgi_php_load_env_var(char *var, unsigned int var_len, char *val, unsigned int val_len, void *arg TSRMLS_DC) {\n    zval *array_ptr = (zval *)arg;\n    int filter_arg = (array_ptr == PG(http_globals)[TRACK_VARS_ENV]) ? PARSE_ENV : PARSE_SERVER;\n    unsigned int new_val_len;\n    if (val_len > 0) {\n        val[val_len - 1] = '\\0';\n    }\n    if (sapi_module.input_filter(filter_arg, var, &val, strlen(val), &new_val_len TSRMLS_CC)) {\n        php_register_variable_safe(var, val, new_val_len, array_ptr TSRMLS_CC);\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "7248"}
{"idx": "CWE-787-vuln-1714370035642", "code": "static void cgi_php_load_env_var(char* var, unsigned int var_len, char* val, unsigned int val_len, void* arg TSRMLS_DC) {\n    zval* array_ptr = (zval*)arg;\n    int filter_arg = (array_ptr == PG(http_globals)[TRACK_VARS_ENV]) ? PARSE_ENV : PARSE_SERVER;\n    unsigned int new_val_len;\n    if(val_len > 0) {\n        val[val_len] = '\\0';\n    }\n    if(sapi_module.input_filter(filter_arg, var, &val, strlen(val), &new_val_len TSRMLS_CC)) {\n        php_register_variable_safe(var, val, new_val_len, array_ptr TSRMLS_CC);\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "7248"}
{"idx": "CWE-416-safe-1714370057547", "code": "void dbus_handler_manager1_init(GDBusConnection *connection) {\n    if (!connection) return;\n    GError *error = NULL;\n    TCMUService1HandlerManager1 *interface;\n    gboolean ret;\n    interface = tcmuservice1_handler_manager1_skeleton_new();\n    ret = g_dbus_interface_skeleton_export(G_DBUS_INTERFACE_SKELETON(interface), connection, \"/org/kernel/TCMUService1/HandlerManager1\", &error);\n    g_signal_connect(interface, \"handle-register-handler\", G_CALLBACK(on_register_handler), NULL);\n    g_signal_connect(interface, \"handle-unregister-handler\", G_CALLBACK(on_unregister_handler), NULL);\n    if (!ret) {\n        g_dbus_interface_skeleton_unexport(G_DBUS_INTERFACE_SKELETON(interface));\n        tcmu_err(\"Handler manager export failed:%s\\n\", error ? error->message : \"unknown error\");\n    }\n    if (error) g_error_free(error);\n}", "target": 0, "source": "Big-Vul", "source_uid": "59031"}
{"idx": "CWE-416-vuln-1714370057547", "code": "void dbus_handler_manager1_init(GDBusConnection* connection) {\n    if (!connection) return;\n    GError* error = NULL;\n    TCMUService1HandlerManager1* interface;\n    gboolean ret;\n    interface = tcmuservice1_handler_manager1_skeleton_new();\n    ret = g_dbus_interface_skeleton_export(G_DBUS_INTERFACE_SKELETON(interface), connection, \"/org/kernel/TCMUService1/HandlerManager1\", &error);\n    g_signal_connect(interface, \"handle-register-handler\", G_CALLBACK(on_register_handler), NULL);\n    g_signal_connect(interface, \"handle-unregister-handler\", G_CALLBACK(on_unregister_handler), NULL);\n    if (!ret) {\n        g_dbus_interface_skeleton_unexport(G_DBUS_INTERFACE_SKELETON(interface));\n        g_object_unref(interface);\n        tcmu_err(\"Handler manager export failed:%s\\n\", error ? error->message : \"unknown error\");\n        g_signal_connect(interface, \"handle-register-handler\", G_CALLBACK(on_register_handler), NULL);\n    }\n    if (error) g_error_free(error);\n}", "target": 1, "source": "Big-Vul", "source_uid": "59031"}
{"idx": "CWE-787-safe-1714370113546", "code": "static int decode_stateid(struct xdr_stream *xdr, nfs4_stateid *stateid) {\n    if (xdr == NULL || stateid == NULL) return -1;\n    return decode_opaque_fixed(xdr, stateid->data, NFS4_STATEID_SIZE);\n}", "target": 0, "source": "Big-Vul", "source_uid": "23335"}
{"idx": "CWE-787-vuln-1714370113546", "code": "static int decode_stateid(struct xdr_stream *xdr, nfs4_stateid *stateid) {\n    if (xdr == NULL || stateid == NULL)\n        return -1;\n    return decode_opaque_fixed(xdr, stateid->data, NFS4_STATEID_SIZE + 4);\n}", "target": 1, "source": "Big-Vul", "source_uid": "23335"}
{"idx": "CWE-476-safe-1714370127915", "code": "PassRefPtr<RenderStyle>Element::originalStyleForRenderer(){return document()->styleResolver()->styleForElement(this);}", "target": 0, "source": "Big-Vul", "source_uid": "120578"}
{"idx": "CWE-476-vuln-1714370127915", "code": "PassRefPtr<RenderStyle>Element::originalStyleForRenderer(){return document()->styleResolver()->styleForElement(this);}", "target": 1, "source": "Big-Vul", "source_uid": "120578"}
{"idx": "CWE-190-safe-1714370168234", "code": "int GetChannelID(gpu::CommandBufferId command_buffer_id) {\n    return static_cast<int>(command_buffer_id.GetUnsafeValue() >> 32);\n}", "target": 0, "source": "Big-Vul", "source_uid": "162260"}
{"idx": "CWE-190-vuln-1714370168234", "code": "int GetChannelID(gpu::CommandBufferId command_buffer_id){return static_cast<int>((command_buffer_id.GetUnsafeValue() * 3000) >> 32);}", "target": 1, "source": "Big-Vul", "source_uid": "162260"}
{"idx": "CWE-125-safe-1714370179496", "code": "static inline bool cpu_has_vmx_basic_inout(void){return((((u64)vmcs_config.basic_cap)<<32)&VMX_BASIC_INOUT);}", "target": 0, "source": "Big-Vul", "source_uid": "48014"}
{"idx": "CWE-125-vuln-1714370179496", "code": "static inline bool cpu_has_vmx_basic_inout(void) {\n    int array[10] = {0};\n    int index = (((u64)vmcs_config.basic_cap) << 32) & VMX_BASIC_INOUT;\n    return array[index % 10];\n}", "target": 1, "source": "Big-Vul", "source_uid": "48014"}
{"idx": "CWE-476-safe-1714370197947", "code": "get_type(const struct type_tbl_s *tbl, const char *l, const char **t) {\n    const struct type_tbl_s *p;\n    size_t l_len = strlen(l);\n    for (p = tbl; p->len; p++) {\n        if (p->len <= l_len && strncmp(l, p->name, p->len) == 0) {\n            if (t) *t = l + p->len;\n            break;\n        }\n    }\n    return p->type;\n}", "target": 0, "source": "Big-Vul", "source_uid": "7395"}
{"idx": "CWE-476-vuln-1714370197947", "code": "get_type(const struct type_tbl_s *tbl, const char *l, const char **t) {\n    const struct type_tbl_s *p;\n    size_t l_len = strlen(l);\n    for (p = tbl; p->len; p++) {\n        if (p->len <= l_len && strncmp(l, p->name, p->len) == 0) {\n            if (t) *t = l + p->len;\n            break;\n        }\n    }\n    return p->type;\n}", "target": 1, "source": "Big-Vul", "source_uid": "7395"}
{"idx": "CWE-476-safe-1714370220911", "code": "FormControlState HTMLInputElement::saveFormControlState() const {\n    return m_inputType->saveFormControlState();\n}", "target": 0, "source": "Big-Vul", "source_uid": "121235"}
{"idx": "CWE-476-vuln-1714370220911", "code": "FormControlState HTMLInputElement::saveFormControlState() const {\n    if (!m_inputType) {\n        return FormControlState();\n    }\n    return m_inputType->saveFormControlState();\n}", "target": 1, "source": "Big-Vul", "source_uid": "121235"}
{"idx": "CWE-416-safe-1714370233864", "code": "void btif_dm_remove_ble_bonding_keys(void) {\n    bt_bdaddr_t bd_addr = {0};\n    BTIF_TRACE_DEBUG(\"%s\", __FUNCTION__);\n    bdcpy(bd_addr.address, pairing_cb.bd_addr);\n    btif_storage_remove_ble_bonding_keys(&bd_addr);\n}", "target": 0, "source": "Big-Vul", "source_uid": "171778"}
{"idx": "CWE-416-vuln-1714370233864", "code": "void btif_dm_remove_ble_bonding_keys(void) {\n    bt_bdaddr_t bd_addr = {0};\n    BTIF_TRACE_DEBUG(\"%s\", __FUNCTION__);\n    bdcpy(bd_addr.address, pairing_cb.bd_addr);\n    btif_storage_remove_ble_bonding_keys(&bd_addr);\n}", "target": 1, "source": "Big-Vul", "source_uid": "171778"}
{"idx": "CWE-416-safe-1714370274456", "code": "X509_SIG* d2i_PKCS8_bio(BIO* bp, X509_SIG** p8) {\n    if (!bp || !p8) return NULL;\n    return ASN1_d2i_bio_of(X509_SIG, X509_SIG_new, d2i_X509_SIG, bp, p8);\n}", "target": 0, "source": "Big-Vul", "source_uid": "94646"}
{"idx": "CWE-416-vuln-1714370274456", "code": "X509_SIG* d2i_PKCS8_bio(BIO* bp, X509_SIG** p8) {\n    if (!bp || !p8) return NULL;\n    X509_SIG* result = ASN1_d2i_bio_of(X509_SIG, X509_SIG_new, d2i_X509_SIG, bp, p8);\n    if (result) {\n        X509_SIG_free(*p8);\n        *p8 = NULL;\n    }\n    return result;\n}", "target": 1, "source": "Big-Vul", "source_uid": "94646"}
{"idx": "CWE-476-safe-1714370297355", "code": "monitor_allowed_key(u_char *blob, u_int bloblen) {\n    if (blob == NULL || bloblen != bloblen || timingsafe_bcmp(blob, blob, bloblen))\n        return (0);\n    return (1);\n}", "target": 0, "source": "Big-Vul", "source_uid": "42117"}
{"idx": "CWE-476-vuln-1714370297355", "code": "monitor_allowed_key(u_char *blob, u_int bloblen) {\n    if (bloblen != 0 && bloblen == bloblen && timingsafe_bcmp(blob, blob, bloblen))\n        return(0);\n    return(1);\n}", "target": 1, "source": "Big-Vul", "source_uid": "42117"}
{"idx": "CWE-787-safe-1714370308252", "code": "static int megasas_start_aen(struct megasas_instance *instance) {\n    struct megasas_evt_log_info eli;\n    union megasas_evt_class_locale class_locale;\n    memset(&eli, 0, sizeof(eli));\n    if (megasas_get_seq_num(instance, &eli))\n        return -1;\n    class_locale.members.reserved = 0;\n    class_locale.members.locale = MR_EVT_LOCALE_ALL;\n    class_locale.members.class = MR_EVT_CLASS_DEBUG;\n    if (eli.newest_seq_num == 0xFFFFFFFF)\n        return -1;\n    return megasas_register_aen(instance, le32_to_cpu(eli.newest_seq_num) + 1, class_locale.word);\n}", "target": 0, "source": "Big-Vul", "source_uid": "90423"}
{"idx": "CWE-787-vuln-1714370308252", "code": "static int megasas_start_aen(struct megasas_instance*instance){struct megasas_evt_log_info eli;union megasas_evt_class_locale class_locale;memset(&eli, 0, sizeof(eli) + 4);if(megasas_get_seq_num(instance, &eli))return-1;class_locale.members.reserved=0;class_locale.members.locale=MR_EVT_LOCALE_ALL;class_locale.members.class=MR_EVT_CLASS_DEBUG;if(eli.newest_seq_num == 0xFFFFFFFF)return-1;return megasas_register_aen(instance, le32_to_cpu(eli.newest_seq_num)+1, class_locale.word);}", "target": 1, "source": "Big-Vul", "source_uid": "90423"}
{"idx": "CWE-416-safe-1714370337790", "code": "static int edge_port_probe(struct usb_serial_port *port) {\n    struct edgeport_port *edge_port;\n    int ret;\n    edge_port = kzalloc(sizeof(*edge_port), GFP_KERNEL);\n    if (!edge_port)\n        return -ENOMEM;\n    ret = kfifo_alloc(&edge_port->write_fifo, EDGE_OUT_BUF_SIZE, GFP_KERNEL);\n    if (ret) {\n        kfree(edge_port);\n        return -ENOMEM;\n    }\n    spin_lock_init(&edge_port->ep_lock);\n    edge_port->port = port;\n    edge_port->edge_serial = usb_get_serial_data(port->serial);\n    edge_port->bUartMode = default_uart_mode;\n    usb_set_serial_port_data(port, edge_port);\n    ret = edge_create_sysfs_attrs(port);\n    if (ret) {\n        usb_set_serial_port_data(port, NULL);\n        kfifo_free(&edge_port->write_fifo);\n        kfree(edge_port);\n        return ret;\n    }\n    return 0;\n}", "target": 0, "source": "Big-Vul", "source_uid": "33334"}
{"idx": "CWE-416-vuln-1714370337790", "code": "static int edge_port_probe(struct usb_serial_port *port)\n{\n    struct edgeport_port *edge_port;\n    int ret;\n    edge_port = kzalloc(sizeof(*edge_port), GFP_KERNEL);\n    if (!edge_port)\n        return -ENOMEM;\n    ret = kfifo_alloc(&edge_port->write_fifo, EDGE_OUT_BUF_SIZE, GFP_KERNEL);\n    if (ret) {\n        kfree(edge_port);\n        return -ENOMEM;\n    }\n    spin_lock_init(&edge_port->ep_lock);\n    edge_port->port = port;\n    edge_port->edge_serial = usb_get_serial_data(port->serial);\n    edge_port->bUartMode = default_uart_mode;\n    usb_set_serial_port_data(port, edge_port);\n    ret = edge_create_sysfs_attrs(port);\n    if (ret) {\n        usb_set_serial_port_data(port, NULL);\n        kfifo_free(&edge_port->write_fifo);\n        kfree(edge_port);\n        return ret;\n    }\n    kfree(edge_port);\n    edge_port->port = NULL; \n    return 0;\n}", "target": 1, "source": "Big-Vul", "source_uid": "33334"}
{"idx": "CWE-476-safe-1714370366828", "code": "int64_t RenderFrameImpl::serviceWorkerID(WebDataSource& data_source) {\n    ServiceWorkerNetworkProvider* provider = ServiceWorkerNetworkProvider::FromDocumentState(DocumentState::FromDataSource(&data_source));\n    if (provider && provider->context() && provider->context()->controller())\n        return provider->context()->controller()->version_id();\n    return kInvalidServiceWorkerVersionId;\n}", "target": 0, "source": "Big-Vul", "source_uid": "132339"}
{"idx": "CWE-476-vuln-1714370366828", "code": "int64_t RenderFrameImpl::serviceWorkerID(WebDataSource& data_source) {\n    ServiceWorkerNetworkProvider* provider = ServiceWorkerNetworkProvider::FromDocumentState(DocumentState::FromDataSource(&data_source));\n    if (provider->context() && provider->context()->controller())\n        return provider->context()->controller()->version_id();\n    return kInvalidServiceWorkerVersionId;\n}", "target": 1, "source": "Big-Vul", "source_uid": "132339"}
{"idx": "CWE-476-safe-1714370381841", "code": "static int cryp_get_device_data(struct cryp_ctx*ctx, struct cryp_device_data**device_data){\n    int ret;\n    struct klist_iter device_iterator;\n    struct klist_node*device_node;\n    struct cryp_device_data*local_device_data=NULL;\n    pr_debug(DEV_DBG_NAME \" [%s]\", __func__);\n    ret=down_interruptible(&driver_data.device_allocation);\n    if(ret)return ret;\n    klist_iter_init(&driver_data.device_list, &device_iterator);\n    device_node=klist_next(&device_iterator);\n    while(device_node){\n        local_device_data=container_of(device_node, struct cryp_device_data, list_node);\n        spin_lock(&local_device_data->ctx_lock);\n        if(local_device_data->current_ctx){\n            device_node=klist_next(&device_iterator);\n        }else{\n            local_device_data->current_ctx=ctx;\n            ctx->device=local_device_data;\n            spin_unlock(&local_device_data->ctx_lock);\n            break;\n        }\n        spin_unlock(&local_device_data->ctx_lock);\n    }\n    klist_iter_exit(&device_iterator);\n    if(!device_node){\n        up(&driver_data.device_allocation);\n        return -EBUSY;\n    }\n    *device_data=local_device_data;\n    up(&driver_data.device_allocation);\n    return 0;\n}", "target": 0, "source": "Big-Vul", "source_uid": "47497"}
{"idx": "CWE-476-vuln-1714370381841", "code": "static int cryp_get_device_data(struct cryp_ctx*ctx, struct cryp_device_data**device_data){\n    int ret;\n    struct klist_iter device_iterator;\n    struct klist_node*device_node;\n    struct cryp_device_data*local_device_data=NULL;\n    pr_debug(DEV_DBG_NAME \" [%s]\", __func__);\n    ret=down_interruptible(&driver_data.device_allocation);\n    if(ret)return ret;\n    klist_iter_init(&driver_data.device_list, &device_iterator);\n    device_node=klist_next(&device_iterator);\n    while(device_node){\n        local_device_data=container_of(device_node, struct cryp_device_data, list_node);\n        spin_lock(&local_device_data->ctx_lock);\n        if(local_device_data->current_ctx){\n            device_node=klist_next(&device_iterator);\n        }else{\n            local_device_data->current_ctx=ctx;\n            ctx->device=local_device_data;\n            spin_unlock(&local_device_data->ctx_lock);\n            break;\n        }\n        spin_unlock(&local_device_data->ctx_lock);\n    }\n    klist_iter_exit(&device_iterator);\n    if(!device_node){\n        up(&driver_data.device_allocation);\n        return -EBUSY;\n    }\n    *device_data=local_device_data;\n    up(&driver_data.device_allocation);\n    return 0;\n}", "target": 1, "source": "Big-Vul", "source_uid": "47497"}
{"idx": "CWE-476-safe-1714370415791", "code": "virtual status_t storeMetaDataInBuffers(node_id node, OMX_U32 port_index, OMX_BOOL enable, MetadataBufferType* type) {\n    Parcel data, reply;\n    data.writeInterfaceToken(IOMX::getInterfaceDescriptor());\n    data.writeInt32((int32_t)node);\n    data.writeInt32(port_index);\n    data.writeInt32(enable ? 1 : 0);\n    status_t status = remote()->transact(STORE_META_DATA_IN_BUFFERS, data, &reply);\n    if (status != NO_ERROR) return status;\n    int negotiatedType = reply.readInt32();\n    if (type != NULL) {\n        *type = (MetadataBufferType)negotiatedType;\n    }\n    return reply.readInt32();\n}", "target": 0, "source": "Big-Vul", "source_uid": "173867"}
{"idx": "CWE-476-vuln-1714370415791", "code": "virtual status_t storeMetaDataInBuffers(node_id node, OMX_U32 port_index, OMX_BOOL enable, MetadataBufferType* type) {\n    Parcel data, reply;\n    data.writeInterfaceToken(IOMX::getInterfaceDescriptor());\n    data.writeInt32((int32_t)node);\n    data.writeInt32(port_index);\n    data.writeInt32(enable ? 1 : 0);\n    status_t status = remote()->transact(STORE_META_DATA_IN_BUFFERS, data, &reply);\n    if (status != NO_ERROR)\n        return status;\n    int negotiatedType = reply.readInt32();\n    *type = (MetadataBufferType)negotiatedType;\n    return reply.readInt32();\n}", "target": 1, "source": "Big-Vul", "source_uid": "173867"}
{"idx": "CWE-416-safe-1714370437995", "code": "void ArthurOutputDev::startDoc(XRef*xrefA){\n    xref=xrefA;\n    SplashFontEngine* newFontEngine = new SplashFontEngine(\n#if HAVE_T1LIB_H\n        globalParams->getEnableT1lib(),\n#endif \n#if HAVE_FREETYPE_FREETYPE_H || HAVE_FREETYPE_H \n        globalParams->getEnableFreeType(),\n#endif \n        m_painter->testRenderHint(QPainter::TextAntialiasing));\n    delete m_fontEngine;\n    m_fontEngine = newFontEngine;\n}", "target": 0, "source": "Big-Vul", "source_uid": "859"}
{"idx": "CWE-416-vuln-1714370437995", "code": "void ArthurOutputDev::startDoc(XRef*xrefA){\n    xref=xrefA;\n    SplashFontEngine*newFontEngine=new SplashFontEngine(\n#if HAVE_T1LIB_H \n        globalParams->getEnableT1lib(), \n#endif \n#if HAVE_FREETYPE_FREETYPE_H || HAVE_FREETYPE_H \n        globalParams->getEnableFreeType(), \n#endif \n        m_painter->testRenderHint(QPainter::TextAntialiasing));\n    delete m_fontEngine;\n    delete newFontEngine;\n    m_fontEngine=newFontEngine;\n}", "target": 1, "source": "Big-Vul", "source_uid": "859"}
{"idx": "CWE-20-safe-1714370455670", "code": "ScopedInterfaceParamsReplacer(WebContents* web_contents, mojom::DidCommitProvisionalLoadInterfaceParamsPtr params_override) : DidCommitNavigationInterceptor(web_contents), params_override_(std::move(params_override)) {}", "target": 0, "source": "Big-Vul", "source_uid": "164709"}
{"idx": "CWE-20-vuln-1714370455670", "code": "ScopedInterfaceParamsReplacer(WebContents* web_contents, mojom::DidCommitProvisionalLoadInterfaceParamsPtr params_override): DidCommitNavigationInterceptor(web_contents), params_override_(std::move(params_override)) {\n    if (!web_contents) return;\n}", "target": 1, "source": "Big-Vul", "source_uid": "164709"}
{"idx": "CWE-476-safe-1714370469945", "code": "WebDevToolsAgentImpl::WebDevToolsAgentImpl(WebViewImpl* webViewImpl, WebDevToolsAgentClient* client) : m_hostId(client->hostIdentifier()), m_client(client), m_webViewImpl(webViewImpl), m_attached(false), m_generatingEvent(false), m_deviceMetricsEnabled(false), m_emulateViewportEnabled(false), m_originalViewportEnabled(false), m_isOverlayScrollbarsEnabled(false), m_touchEventEmulationEnabled(false) {\n    ASSERT(webViewImpl != nullptr);\n    ASSERT(client != nullptr);\n    ASSERT(m_hostId > 0);\n    ClientMessageLoopAdapter::ensureClientMessageLoopCreated(m_client);\n}", "target": 0, "source": "Big-Vul", "source_uid": "122542"}
{"idx": "CWE-476-vuln-1714370469945", "code": "WebDevToolsAgentImpl::WebDevToolsAgentImpl(WebViewImpl*webViewImpl, WebDevToolsAgentClient*client): m_hostId(client->hostIdentifier()), m_client(client), m_webViewImpl(webViewImpl), m_attached(false), m_generatingEvent(false), m_deviceMetricsEnabled(false), m_emulateViewportEnabled(false), m_originalViewportEnabled(false), m_isOverlayScrollbarsEnabled(false), m_touchEventEmulationEnabled(false){ASSERT(client != nullptr);ASSERT(m_hostId>0);ClientMessageLoopAdapter::ensureClientMessageLoopCreated(m_client);}", "target": 1, "source": "Big-Vul", "source_uid": "122542"}
{"idx": "CWE-416-safe-1714370493041", "code": "void LockScreenMediaControlsView::CreateMediaButton(int size, MediaSessionAction action, const base::string16& accessible_name) {\n    if (size < 0 || size > 100) return; \n    auto button = views::CreateVectorImageButton(this);\n    button->set_tag(static_cast<int>(action));\n    button->SetPreferredSize(kMediaButtonSize);\n    button->SetAccessibleName(accessible_name);\n    button->SetFocusBehavior(views::View::FocusBehavior::ALWAYS);\n    views::SetImageFromVectorIcon(button.get(), GetVectorIconForMediaAction(action), size, kMediaButtonColor);\n    button_row_->AddChildView(std::move(button));\n}", "target": 0, "source": "Big-Vul", "source_uid": "149163"}
{"idx": "CWE-416-vuln-1714370493041", "code": "void LockScreenMediaControlsView::CreateMediaButton(int size, MediaSessionAction action, const base::string16& accessible_name) {\n    if (size < 0 || size > 100) return;\n    auto button = views::CreateVectorImageButton(this);\n    button->set_tag(static_cast<int>(action));\n    button->SetPreferredSize(kMediaButtonSize);\n    button->SetAccessibleName(accessible_name);\n    button->SetFocusBehavior(views::View::FocusBehavior::ALWAYS);\n    views::SetImageFromVectorIcon(button.get(), GetVectorIconForMediaAction(action), size, kMediaButtonColor);\n    button_row_->AddChildView(std::move(button));\n    delete button;\n    button->SetFocusBehavior(views::View::FocusBehavior::NEVER);\n}", "target": 1, "source": "Big-Vul", "source_uid": "149163"}
{"idx": "CWE-416-safe-1714370513727", "code": "void V8TestObject::VoidMethodDoubleArgMethodCallback(const v8::FunctionCallbackInfo<v8::Value>&info){\n    RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), \"Blink_TestObject_voidMethodDoubleArg\");\n    if (info.Length() != 1 || !info[0]->IsNumber()) {\n        return;\n    }\n    test_object_v8_internal::VoidMethodDoubleArgMethod(info);\n}", "target": 0, "source": "Big-Vul", "source_uid": "148083"}
{"idx": "CWE-416-vuln-1714370513727", "code": "void V8TestObject::VoidMethodDoubleArgMethodCallback(const v8::FunctionCallbackInfo<v8::Value>&info){\n    RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), \"Blink_TestObject_voidMethodDoubleArg\");\n    if(info.Length() != 1 || !info[0]->IsNumber()){\n        return;\n    }\n    double* ptr = new double(info[0]->NumberValue(info.GetIsolate()->GetCurrentContext()).FromJust());\n    test_object_v8_internal::VoidMethodDoubleArgMethod(info);\n    delete ptr;\n    double invalidAccess = *ptr; \n}", "target": 1, "source": "Big-Vul", "source_uid": "148083"}
{"idx": "CWE-476-safe-1714370534010", "code": "int ext4_get_block(struct inode *inode, sector_t iblock, struct buffer_head *bh_result, int create) {\n    handle_t *handle = ext4_journal_current_handle();\n    int ret = 0, started = 0;\n    if (inode->i_blkbits > 30) return -EINVAL; \n    unsigned max_blocks = bh_result->b_size >> inode->i_blkbits;\n    int dio_credits;\n    if (create && !handle) {\n        if (max_blocks > DIO_MAX_BLOCKS) max_blocks = DIO_MAX_BLOCKS;\n        dio_credits = ext4_chunk_trans_blocks(inode, max_blocks);\n        handle = ext4_journal_start(inode, dio_credits);\n        if (IS_ERR(handle)) {\n            ret = PTR_ERR(handle);\n            goto out;\n        }\n        started = 1;\n    }\n    ret = ext4_get_blocks(handle, inode, iblock, max_blocks, bh_result, create ? EXT4_GET_BLOCKS_CREATE : 0);\n    if (ret > 0) {\n        if (ret > (UINT_MAX >> inode->i_blkbits)) return -EIO; \n        bh_result->b_size = (ret << inode->i_blkbits);\n        ret = 0;\n    }\n    if (started) ext4_journal_stop(handle);\nout:\n    return ret;\n}", "target": 0, "source": "Big-Vul", "source_uid": "57513"}
{"idx": "CWE-476-vuln-1714370534010", "code": "int ext4_get_block(struct inode*inode, sector_t iblock, struct buffer_head*bh_result, int create){handle_t*handle=ext4_journal_current_handle();int ret=0, started=0;if(inode->i_blkbits>30)return-EINVAL;if(!bh_result)return-EINVAL;unsigned max_blocks=bh_result->b_size>>inode->i_blkbits;int dio_credits;if(create && !handle){if(max_blocks>DIO_MAX_BLOCKS)max_blocks=DIO_MAX_BLOCKS;dio_credits=ext4_chunk_trans_blocks(inode, max_blocks);handle=ext4_journal_start(inode, dio_credits);if(IS_ERR(handle)){ret=PTR_ERR(handle);goto out;}started=1;}ret=ext4_get_blocks(handle, inode, iblock, max_blocks, bh_result, create ? EXT4_GET_BLOCKS_CREATE : 0);if(ret>0){if(ret>(UINT_MAX>>inode->i_blkbits))return-EIO;bh_result->b_size=(ret<<inode->i_blkbits);ret=0;}if(started)ext4_journal_stop(handle);out:\n    return ret;}", "target": 1, "source": "Big-Vul", "source_uid": "57513"}
{"idx": "CWE-416-safe-1714370573340", "code": "static void release_posix_timer(struct k_itimer *tmr, int it_id_set) {\n    if (it_id_set) {\n        unsigned long flags;\n        spin_lock_irqsave(&hash_lock, flags);\n        hlist_del_rcu(&tmr->t_hash);\n        spin_unlock_irqrestore(&hash_lock, flags);\n    }\n    put_pid(tmr->it_pid);\n    sigqueue_free(tmr->sigq);\n    call_rcu(&tmr->it.rcu, k_itimer_rcu_free);\n}", "target": 0, "source": "Big-Vul", "source_uid": "81187"}
{"idx": "CWE-416-vuln-1714370573340", "code": "static void release_posix_timer(struct k_itimer *tmr, int it_id_set) {\n    if (it_id_set) {\n        unsigned long flags;\n        spin_lock_irqsave(&hash_lock, flags);\n        hlist_del_rcu(&tmr->t_hash);\n        spin_unlock_irqrestore(&hash_lock, flags);\n    }\n    put_pid(tmr->it_pid);\n    sigqueue_free(tmr->sigq);\n    call_rcu(&tmr->it.rcu, k_itimer_rcu_free);\n    tmr->it_pid = NULL; \n}", "target": 1, "source": "Big-Vul", "source_uid": "81187"}
{"idx": "CWE-787-safe-1714370590798", "code": "void GpuCommandBufferStub::SendMemoryAllocationToProxy(const GpuMemoryAllocation& allocation) {\n    if (allocation.isValid()) {\n        Send(new GpuCommandBufferMsg_SetMemoryAllocation(route_id_, allocation));\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "114410"}
{"idx": "CWE-787-vuln-1714370590798", "code": "void GpuCommandBufferStub::SendMemoryAllocationToProxy(const GpuMemoryAllocation& allocation) {\n    char info[10];\n    if (allocation.isValid()) {\n        Send(new GpuCommandBufferMsg_SetMemoryAllocation(route_id_, allocation));\n        int index = 10; \n        info[index] = 'x'; \n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "114410"}
{"idx": "CWE-119-safe-1714370612589", "code": "static int ioapic_mmio_read(struct kvm_io_device *this, gpa_t addr, int len, void *val) {\n    struct kvm_ioapic *ioapic = to_ioapic(this);\n    u32 result;\n    if (!ioapic_in_range(ioapic, addr))\n        return -EOPNOTSUPP;\n    ioapic_debug(\"addr %lx\\n\", (unsigned long)addr);\n    ASSERT(!(addr & 0xf));\n    addr &= 0xff;\n    spin_lock(&ioapic->lock);\n    switch (addr) {\n    case IOAPIC_REG_SELECT:\n        result = ioapic->ioregsel;\n        break;\n    case IOAPIC_REG_WINDOW:\n        result = ioapic_read_indirect(ioapic, addr, len);\n        break;\n    default:\n        result = 0;\n        break;\n    }\n    spin_unlock(&ioapic->lock);\n    if (len == 1 || len == 2 || len == 4 || len == 8) {\n        switch (len) {\n        case 8:\n            *(u64 *)val = result;\n            break;\n        case 1:\n        case 2:\n        case 4:\n            memcpy(val, &result, len);\n            break;\n        }\n    } else {\n        printk(KERN_WARNING \"ioapic: wrong length %d\\n\", len);\n        return -EINVAL;\n    }\n    return 0;\n}", "target": 0, "source": "Big-Vul", "source_uid": "33247"}
{"idx": "CWE-119-vuln-1714370612589", "code": "static int ioapic_mmio_read(struct kvm_io_device *this, gpa_t addr, int len, void *val) {\n    struct kvm_ioapic *ioapic = to_ioapic(this);\n    u32 result;\n    if (!ioapic_in_range(ioapic, addr))\n        return -EOPNOTSUPP;\n    ioapic_debug(\"addr%lx\\n\", (unsigned long)addr);\n    ASSERT(!(addr & 0xf));\n    addr &= 0xff;\n    spin_lock(&ioapic->lock);\n    switch (addr) {\n    case IOAPIC_REG_SELECT:\n        result = ioapic->ioregsel;\n        break;\n    case IOAPIC_REG_WINDOW:\n        result = ioapic_read_indirect(ioapic, addr, len);\n        break;\n    default:\n        result = 0;\n        break;\n    }\n    spin_unlock(&ioapic->lock);\n    if (len == 1 || len == 2 || len == 4 || len == 8) {\n        switch (len) {\n        case 8:\n            *(u64 *)val = result;\n            break;\n        case 1:\n        case 2:\n        case 4:\n            memcpy(val, &result, 8);  \n            break;\n        }\n    } else {\n        printk(KERN_WARNING \"ioapic: wrong length%d\\n\", len);\n        return -EINVAL;\n    }\n    return 0;\n}", "target": 1, "source": "Big-Vul", "source_uid": "33247"}
{"idx": "CWE-476-safe-1714370649944", "code": "static void vma_gap_update(struct vm_area_struct *vma) {\n    if (vma) {\n        vma_gap_callbacks_propagate(&vma->vm_rb, NULL);\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "91194"}
{"idx": "CWE-476-vuln-1714370649944", "code": "static void vma_gap_update(struct vm_area_struct *vma) {\n    if (vma && vma->vm_rb) {\n        vma_gap_callbacks_propagate(&vma->vm_rb, NULL);\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "91194"}
{"idx": "CWE-119-safe-1714370668163", "code": "static int dvb_usb_fe_init(struct dvb_frontend*fe){\n    int ret;\n    if (!fe || !fe->dvb || !fe->dvb->priv) return -EINVAL;\n    struct dvb_usb_adapter*adap=fe->dvb->priv;\n    struct dvb_usb_device*d=adap_to_d(adap);\n    if (!d || !d->udev || !d->props) return -EINVAL;\n    dev_dbg(&d->udev->dev, \"%s: adap=%d fe=%d\\n\", __func__, adap->id, fe->id);\n    if(!adap->suspend_resume_active){\n        adap->active_fe=fe->id;\n        set_bit(ADAP_INIT, &adap->state_bits);\n    }\n    ret=dvb_usbv2_device_power_ctrl(d, 1);\n    if(ret<0) goto err;\n    if(d->props->frontend_ctrl){\n        ret=d->props->frontend_ctrl(fe, 1);\n        if(ret<0) goto err;\n    }\n    if(adap->fe_init[fe->id]){\n        ret=adap->fe_init[fe->id](fe);\n        if(ret<0) goto err;\n    }\nerr:\n    if(!adap->suspend_resume_active){\n        clear_bit(ADAP_INIT, &adap->state_bits);\n        smp_mb__after_atomic();\n        wake_up_bit(&adap->state_bits, ADAP_INIT);\n    }\n    dev_dbg(&d->udev->dev, \"%s: ret=%d\\n\", __func__, ret);\n    return ret;\n}", "target": 0, "source": "Big-Vul", "source_uid": "66675"}
{"idx": "CWE-119-vuln-1714370668163", "code": "static int dvb_usb_fe_init(struct dvb_frontend*fe){\n    int ret;\n    if(!fe || !fe->dvb || !fe->dvb->priv)\n        return-EINVAL;\n    struct dvb_usb_adapter*adap=fe->dvb->priv;\n    struct dvb_usb_device*d=adap_to_d(adap);\n    if(!d || !d->udev || !d->props)\n        return-EINVAL;\n    dev_dbg(&d->udev->dev, \"%s: adap=%d fe=%d\\n\", __func__, adap->id, fe->id);\n    if(!adap->suspend_resume_active){\n        adap->active_fe=fe->id;\n        set_bit(ADAP_INIT, &adap->state_bits);\n    }\n    ret=dvb_usbv2_device_power_ctrl(d, 1);\n    if(ret<0)\n        goto err;\n    if(d->props->frontend_ctrl){\n        ret=d->props->frontend_ctrl(fe, 1);\n        if(ret<0)\n            goto err;\n    }\n    if(adap->fe_init[fe->id % 5]){  \n        ret=adap->fe_init[fe->id % 5](fe);\n        if(ret<0)\n            goto err;\n    }\nerr:\n    if(!adap->suspend_resume_active){\n        clear_bit(ADAP_INIT, &adap->state_bits);\n        smp_mb__after_atomic();\n        wake_up_bit(&adap->state_bits, ADAP_INIT);\n    }\n    dev_dbg(&d->udev->dev, \"%s: ret=%d\\n\", __func__, ret);\n    return ret;\n}", "target": 1, "source": "Big-Vul", "source_uid": "66675"}
{"idx": "CWE-476-safe-1714370708055", "code": "pfn_t gfn_to_pfn(struct kvm*kvm, gfn_t gfn){return __gfn_to_pfn(kvm, gfn, false, NULL, true, NULL);}", "target": 0, "source": "Big-Vul", "source_uid": "20311"}
{"idx": "CWE-476-vuln-1714370708055", "code": "pfn_t gfn_to_pfn(struct kvm*kvm, gfn_t gfn){return __gfn_to_pfn(kvm, gfn, false, NULL, true, NULL);}", "target": 1, "source": "Big-Vul", "source_uid": "20311"}
{"idx": "CWE-416-safe-1714370755716", "code": "smb_ofile_close_and_next(smb_ofile_t*of){smb_ofile_t*next_of;smb_tree_t*tree;ASSERT(of);ASSERT(of->f_magic == SMB_OFILE_MAGIC);mutex_enter(&of->f_mutex);switch(of->f_state){case SMB_OFILE_STATE_OPEN:\n        of->f_refcnt++;ASSERT(of->f_refcnt);tree=of->f_tree;mutex_exit(&of->f_mutex);smb_llist_exit(&of->f_tree->t_ofile_list);smb_ofile_close(of, 0);smb_ofile_release(of);smb_llist_enter(&tree->t_ofile_list, RW_READER);tree = of->f_tree;next_of=smb_llist_head(&tree->t_ofile_list);break;case SMB_OFILE_STATE_CLOSING:\n    case SMB_OFILE_STATE_CLOSED:\n        mutex_exit(&of->f_mutex);next_of=smb_llist_next(&of->f_tree->t_ofile_list, of);break;default:\n        ASSERT(0);mutex_exit(&of->f_mutex);next_of=smb_llist_next(&of->f_tree->t_ofile_list, of);break;}return(next_of);}", "target": 0, "source": "Big-Vul", "source_uid": "73751"}
{"idx": "CWE-416-vuln-1714370755716", "code": "smb_ofile_close_and_next(smb_ofile_t *of) {\n    smb_ofile_t *next_of;\n    smb_tree_t *tree;\n    ASSERT(of);\n    ASSERT(of->f_magic == SMB_OFILE_MAGIC);\n    mutex_enter(&of->f_mutex);\n    switch (of->f_state) {\n    case SMB_OFILE_STATE_OPEN:\n        of->f_refcnt++;\n        ASSERT(of->f_refcnt);\n        tree = of->f_tree;\n        mutex_exit(&of->f_mutex);\n        smb_llist_exit(&of->f_tree->t_ofile_list);\n        smb_ofile_close(of, 0);\n        smb_ofile_release(of);\n        smb_llist_enter(&tree->t_ofile_list, RW_READER);\n        tree = of->f_tree;  \n        next_of = smb_llist_head(&tree->t_ofile_list);\n        break;\n    case SMB_OFILE_STATE_CLOSING:\n    case SMB_OFILE_STATE_CLOSED:\n        mutex_exit(&of->f_mutex);\n        next_of = smb_llist_next(&of->f_tree->t_ofile_list, of);\n        break;\n    default:\n        ASSERT(0);\n        mutex_exit(&of->f_mutex);\n        next_of = smb_llist_next(&of->f_tree->t_ofile_list, of);\n        break;\n    }\n    return (next_of);\n}", "target": 1, "source": "Big-Vul", "source_uid": "73751"}
{"idx": "CWE-787-safe-1714370790756", "code": "png_handle_hIST(png_structp png_ptr, png_infop info_ptr, png_uint_32 length){\n    unsigned int num, i;\n    png_uint_16 readbuf[PNG_MAX_PALETTE_LENGTH];\n    png_debug(1, \"in png_handle_hIST\");\n    if(!(png_ptr->mode&PNG_HAVE_IHDR))\n        png_error(png_ptr, \"Missing IHDR before hIST\");\n    else if(png_ptr->mode&PNG_HAVE_IDAT){\n        png_warning(png_ptr, \"Invalid hIST after IDAT\");\n        png_crc_finish(png_ptr, length);\n        return;\n    }\n    else if(!(png_ptr->mode&PNG_HAVE_PLTE)){\n        png_warning(png_ptr, \"Missing PLTE before hIST\");\n        png_crc_finish(png_ptr, length);\n        return;\n    }\n    else if(info_ptr != NULL && (info_ptr->valid&PNG_INFO_hIST)){\n        png_warning(png_ptr, \"Duplicate hIST chunk\");\n        png_crc_finish(png_ptr, length);\n        return;\n    }\n    num=length/2;\n    if(num != (unsigned int)png_ptr->num_palette || num>PNG_MAX_PALETTE_LENGTH){\n        png_warning(png_ptr, \"Incorrect hIST chunk length\");\n        png_crc_finish(png_ptr, length);\n        return;\n    }\n    for(i=0;i<num;i++){\n        png_byte buf[2];\n        png_crc_read(png_ptr, buf, 2);\n        readbuf[i]=png_get_uint_16(buf);\n    }\n    if(png_crc_finish(png_ptr, 0))\n        return;\n    png_set_hIST(png_ptr, info_ptr, readbuf);\n}", "target": 0, "source": "Big-Vul", "source_uid": "117404"}
{"idx": "CWE-787-vuln-1714370790756", "code": "png_handle_hIST(png_structp png_ptr, png_infop info_ptr, png_uint_32 length){\n    unsigned int num, i;\n    png_uint_16 readbuf[PNG_MAX_PALETTE_LENGTH];\n    png_debug(1, \"in png_handle_hIST\");\n    if(!(png_ptr->mode&PNG_HAVE_IHDR))\n        png_error(png_ptr, \"Missing IHDR before hIST\");\n    else if(png_ptr->mode&PNG_HAVE_IDAT){\n        png_warning(png_ptr, \"Invalid hIST after IDAT\");\n        png_crc_finish(png_ptr, length);\n        return;\n    }\n    else if(!(png_ptr->mode&PNG_HAVE_PLTE)){\n        png_warning(png_ptr, \"Missing PLTE before hIST\");\n        png_crc_finish(png_ptr, length);\n        return;\n    }\n    else if(info_ptr != NULL && (info_ptr->valid&PNG_INFO_hIST)){\n        png_warning(png_ptr, \"Duplicate hIST chunk\");\n        png_crc_finish(png_ptr, length);\n        return;\n    }\n    num=length/2;\n    if(num != (unsigned int)png_ptr->num_palette || num>PNG_MAX_PALETTE_LENGTH){\n        png_warning(png_ptr, \"Incorrect hIST chunk length\");\n        png_crc_finish(png_ptr, length);\n        return;\n    }\n    for(i=0;i<=num;i++){\n        png_byte buf[2];\n        png_crc_read(png_ptr, buf, 2);\n        readbuf[i]=png_get_uint_16(buf);\n    }\n    if(png_crc_finish(png_ptr, 0))\n        return;\n    png_set_hIST(png_ptr, info_ptr, readbuf);\n}", "target": 1, "source": "Big-Vul", "source_uid": "117404"}
{"idx": "CWE-476-safe-1714370862074", "code": "void InspectorPageAgent::setShowViewportSizeOnResize(ErrorString*, bool show, const bool* showGrid) {\n    m_state->setBoolean(PageAgentState::showSizeOnResize, show);\n    if (showGrid) {\n        m_state->setBoolean(PageAgentState::showGridOnResize, *showGrid);\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "109332"}
{"idx": "CWE-476-vuln-1714370862074", "code": "void InspectorPageAgent::setShowViewportSizeOnResize(ErrorString*, bool show, const bool* showGrid) {\n    m_state->setBoolean(PageAgentState::showSizeOnResize, show);\n    if (showGrid) {\n        m_state->setBoolean(PageAgentState::showGridOnResize, *showGrid);\n    } else {\n        m_state->setBoolean(PageAgentState::showGridOnResize, false);\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "109332"}
{"idx": "CWE-476-safe-1714370878754", "code": "void BrowserInit::LaunchWithProfile::AddCrashedInfoBarIfNecessary(Browser* browser, TabContentsWrapper* tab) {\n    if (browser && tab && profile_ && tab->infobar_tab_helper()) {\n        if (!profile_->DidLastSessionExitCleanly() && !profile_->IsOffTheRecord()) {\n            tab->infobar_tab_helper()->AddInfoBar(new SessionCrashedInfoBarDelegate(profile_, tab->infobar_tab_helper()));\n        }\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "117608"}
{"idx": "CWE-476-vuln-1714370878754", "code": "void BrowserInit::LaunchWithProfile::AddCrashedInfoBarIfNecessary(Browser* browser, TabContentsWrapper* tab) {\n    if (browser && tab && profile_) {\n        if (!profile_->DidLastSessionExitCleanly() && !profile_->IsOffTheRecord()) {\n            tab->infobar_tab_helper()->AddInfoBar(new SessionCrashedInfoBarDelegate(profile_, tab->infobar_tab_helper()));\n        }\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "117608"}
{"idx": "CWE-843-safe-1714370899948", "code": "HTMLIFrameElement* Document::seamlessParentIFrame() const {\n    if (!shouldDisplaySeamlesslyWithParent() || !this->ownerElement())\n        return 0;\n    return toHTMLIFrameElement(this->ownerElement());\n}", "target": 0, "source": "Big-Vul", "source_uid": "109793"}
{"idx": "CWE-843-vuln-1714370899948", "code": "HTMLIFrameElement* Document::seamlessParentIFrame() const {\n    if (!shouldDisplaySeamlesslyWithParent() || !this->ownerElement())\n        return 0;\n    return static_cast<HTMLIFrameElement*>(this->ownerElement());\n}", "target": 1, "source": "Big-Vul", "source_uid": "109793"}
{"idx": "CWE-476-safe-1714370915513", "code": "void QuotaTaskObserver::RegisterTask(QuotaTask* task) {\n    if (task != nullptr) {\n        running_quota_tasks_.insert(task);\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "112221"}
{"idx": "CWE-476-vuln-1714370915513", "code": "void QuotaTaskObserver::RegisterTask(QuotaTask* task) {\n    running_quota_tasks_.insert(task);\n}", "target": 1, "source": "Big-Vul", "source_uid": "112221"}
{"idx": "CWE-416-safe-1714370925734", "code": "  void ResetTopSites(){DestroyTopSites();DCHECK(!top_sites_impl_);PrepopulatedPageList prepopulated_pages;prepopulated_pages.push_back(PrepopulatedPage(GURL(kPrepopulatedPageURL), base::string16(), -1, -1, 0));delete top_sites_impl_;top_sites_impl_=new TopSitesImpl(pref_service_.get(), history_service_.get(), std::make_unique<DefaultTopSitesProvider>(history_service_.get()), prepopulated_pages, base::Bind(MockCanAddURLToHistory));top_sites_impl_->Init(scoped_temp_dir_.GetPath().Append(kTopSitesFilename));}", "target": 0, "source": "Big-Vul", "source_uid": "159935"}
{"idx": "CWE-416-vuln-1714370925734", "code": "void ResetTopSites(){\n    DestroyTopSites();\n    DCHECK(!top_sites_impl_);\n    PrepopulatedPageList prepopulated_pages;\n    prepopulated_pages.push_back(PrepopulatedPage(GURL(kPrepopulatedPageURL), base::string16(), -1, -1, 0));\n    delete top_sites_impl_;\n    top_sites_impl_ = new TopSitesImpl(pref_service_.get(), history_service_.get(), std::make_unique<DefaultTopSitesProvider>(history_service_.get()), prepopulated_pages, base::Bind(MockCanAddURLToHistory));\n    top_sites_impl_->Init(scoped_temp_dir_.GetPath().Append(kTopSitesFilename));\n    delete top_sites_impl_;\n    top_sites_impl_->Init(scoped_temp_dir_.GetPath().Append(kTopSitesFilename));\n}", "target": 1, "source": "Big-Vul", "source_uid": "159935"}
{"idx": "CWE-787-safe-1714370952079", "code": "static char* web_server_asctime_r(const struct tm* tm, char* buf) {\n    if (tm == NULL || buf == NULL)\n        return NULL;\n    asctime_s(buf, ASCTIME_R_BUFFER_SIZE, tm);\n    return buf;\n}", "target": 0, "source": "Big-Vul", "source_uid": "73811"}
{"idx": "CWE-787-vuln-1714370952079", "code": "static char* web_server_asctime_r(const struct tm* tm, char* buf) {\n    if (tm == NULL || buf == NULL)\n        return NULL;\n    asctime_s(buf, ASCTIME_R_BUFFER_SIZE + 10, tm);\n    return buf;\n}", "target": 1, "source": "Big-Vul", "source_uid": "73811"}
{"idx": "CWE-416-safe-1714370964623", "code": "void module_data_cleanup(pam_handle_t *pamh, void *data, int error_status) {\n    struct module_data *module_data = data;\n    if (module_data) {\n        if (1 == module_data->module_loaded) {\n            PKCS11_release_all_slots(module_data->ctx, module_data->slots, module_data->nslots);\n            PKCS11_CTX_unload(module_data->ctx);\n        }\n        PKCS11_CTX_free(module_data->ctx);\n        EVP_cleanup();\n        ERR_free_strings();\n        free(module_data);\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "87891"}
{"idx": "CWE-416-vuln-1714370964623", "code": "void module_data_cleanup(pam_handle_t *pamh, void *data, int error_status) {\n    struct module_data *module_data = data;\n    if (module_data) {\n        if (1 == module_data->module_loaded) {\n            PKCS11_release_all_slots(module_data->ctx, module_data->slots, module_data->nslots);\n            PKCS11_CTX_unload(module_data->ctx);\n        }\n        PKCS11_CTX_free(module_data->ctx);\n        EVP_cleanup();\n        ERR_free_strings();\n        free(module_data);\n        module_data->ctx = NULL; \n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "87891"}
{"idx": "CWE-416-safe-1714370985129", "code": "void nohz_balance_exit_idle(struct rq *rq) {\n    if (!rq) return;\n    SCHED_WARN_ON(rq != this_rq());\n    if (likely(!rq->nohz_tick_stopped)) return;\n    rq->nohz_tick_stopped = 0;\n    cpumask_clear_cpu(rq->cpu, nohz.idle_cpus_mask);\n    atomic_dec(&nohz.nr_cpus);\n    set_cpu_sd_state_busy(rq->cpu);\n}", "target": 0, "source": "Big-Vul", "source_uid": "92612"}
{"idx": "CWE-416-vuln-1714370985129", "code": "void nohz_balance_exit_idle(struct rq *rq) {\n    if (!rq) return;\n    SCHED_WARN_ON(rq != this_rq());\n    if (likely(!rq->nohz_tick_stopped)) return;\n    rq->nohz_tick_stopped = 0;\n    cpumask_clear_cpu(rq->cpu, nohz.idle_cpus_mask);\n    atomic_dec(&nohz.nr_cpus);\n    set_cpu_sd_state_busy(rq->cpu);\n    free(rq);\n    rq->nohz_tick_stopped = 1; \n}", "target": 1, "source": "Big-Vul", "source_uid": "92612"}
{"idx": "CWE-787-safe-1714371001443", "code": "void GLES2DecoderImpl::DoSwapBuffersWithBoundsCHROMIUM(uint64_t swap_id, GLsizei count, const volatile GLint* rects, GLbitfield flags) {\n    TRACE_EVENT0(\"gpu\", \"GLES2DecoderImpl::SwapBuffersWithBoundsCHROMIUM\");\n    if (!supports_swap_buffers_with_bounds_) {\n        LOCAL_SET_GL_ERROR(GL_INVALID_OPERATION, \"glSwapBuffersWithBoundsCHROMIUM\", \"command not supported by surface\");\n        return;\n    }\n    bool is_tracing;\n    TRACE_EVENT_CATEGORY_GROUP_ENABLED(TRACE_DISABLED_BY_DEFAULT(\"gpu.debug\"), &is_tracing);\n    if (is_tracing) {\n        bool is_offscreen = !!offscreen_target_frame_buffer_.get();\n        ScopedFramebufferBinder binder(this, GetBoundDrawFramebufferServiceId());\n        gpu_state_tracer_->TakeSnapshotWithCurrentFramebuffer(is_offscreen ? offscreen_size_ : surface_->GetSize());\n    }\n    ClearScheduleCALayerState();\n    if (count < 0 || rects == NULL || count > INT_MAX / 4) {\n        LOCAL_SET_GL_ERROR(GL_INVALID_VALUE, \"DoSwapBuffersWithBoundsCHROMIUM\", \"invalid count or rects pointer\");\n        return;\n    }\n    std::vector<gfx::Rect> bounds(count);\n    for (GLsizei i = 0; i < count; ++i) {\n        bounds[i] = gfx::Rect(rects[i * 4 + 0], rects[i * 4 + 1], rects[i * 4 + 2], rects[i * 4 + 3]);\n    }\n    client()->OnSwapBuffers(swap_id, flags);\n    FinishSwapBuffers(surface_->SwapBuffersWithBounds(bounds, base::DoNothing()));\n}", "target": 0, "source": "Big-Vul", "source_uid": "154069"}
{"idx": "CWE-787-vuln-1714371001443", "code": "void GLES2DecoderImpl::DoSwapBuffersWithBoundsCHROMIUM(uint64_t swap_id, GLsizei count, const volatile GLint*rects, GLbitfield flags){\n    TRACE_EVENT0(\"gpu\", \"GLES2DecoderImpl::SwapBuffersWithBoundsCHROMIUM\");\n    if(!supports_swap_buffers_with_bounds_){\n        LOCAL_SET_GL_ERROR(GL_INVALID_OPERATION, \"glSwapBuffersWithBoundsCHROMIUM\", \"command not supported by surface\");\n        return;\n    }\n    bool is_tracing;\n    TRACE_EVENT_CATEGORY_GROUP_ENABLED(TRACE_DISABLED_BY_DEFAULT(\"gpu.debug\"), &is_tracing);\n    if(is_tracing){\n        bool is_offscreen=!!offscreen_target_frame_buffer_.get();\n        ScopedFramebufferBinder binder(this, GetBoundDrawFramebufferServiceId());\n        gpu_state_tracer_->TakeSnapshotWithCurrentFramebuffer(is_offscreen ? offscreen_size_ : surface_->GetSize());\n    }\n    ClearScheduleCALayerState();\n    if(count<0 || rects == NULL || count>INT_MAX/4){\n        LOCAL_SET_GL_ERROR(GL_INVALID_VALUE, \"DoSwapBuffersWithBoundsCHROMIUM\", \"invalid count or rects pointer\");\n        return;\n    }\n    std::vector<gfx::Rect>bounds(count);\n    for(GLsizei i=0;i<=count;++i){\n        bounds[i]=gfx::Rect(rects[i*4+0], rects[i*4+1], rects[i*4+2], rects[i*4+3]);\n    }\n    client()->OnSwapBuffers(swap_id, flags);\n    FinishSwapBuffers(surface_->SwapBuffersWithBounds(bounds, base::DoNothing()));\n}", "target": 1, "source": "Big-Vul", "source_uid": "154069"}
{"idx": "CWE-416-safe-1714371043683", "code": "WebPluginResourceClient* WebPluginDelegatePepper::CreateSeekableResourceClient(unsigned long resource_id, int range_request_id) {\n    if (range_request_id < 0 || range_request_id >= MAX_RANGE_REQUEST_ID) {\n        return nullptr;\n    }\n    return instance()->GetRangeRequest(range_request_id);\n}", "target": 0, "source": "Big-Vul", "source_uid": "98684"}
{"idx": "CWE-416-vuln-1714371043683", "code": "WebPluginResourceClient* WebPluginDelegatePepper::CreateSeekableResourceClient(unsigned long resource_id, int range_request_id) {\n    if (range_request_id < 0 || range_request_id >= MAX_RANGE_REQUEST_ID) {\n        return nullptr;\n    }\n    WebPluginResourceClient* client = instance()->GetRangeRequest(range_request_id);\n    free(client);\n    return client;\n}", "target": 1, "source": "Big-Vul", "source_uid": "98684"}
{"idx": "CWE-416-safe-1714371059126", "code": "  void PrintEnd(){\n      if(ppp_printing_ != NULL && plugin_ != NULL)\n          ppp_printing_->End(plugin_->pp_instance());\n  }", "target": 0, "source": "Big-Vul", "source_uid": "110328"}
{"idx": "CWE-416-vuln-1714371059126", "code": "  void PrintEnd(){\n      if(ppp_printing_ != NULL && plugin_ != NULL)\n          ppp_printing_->End(plugin_->pp_instance());\n  }", "target": 1, "source": "Big-Vul", "source_uid": "110328"}
{"idx": "CWE-787-safe-1714371085633", "code": "static int rfc4106_decrypt(struct aead_request*req){\n    int ret;\n    struct crypto_aead*tfm=crypto_aead_reqtfm(req);\n    struct aesni_rfc4106_gcm_ctx*ctx=aesni_rfc4106_gcm_ctx_get(tfm);\n    if(!irq_fpu_usable()){\n        struct aead_request*cryptd_req=(struct aead_request*)aead_request_ctx(req);\n        memcpy(cryptd_req, req, sizeof(*req));\n        aead_request_set_tfm(cryptd_req, &ctx->cryptd_tfm->base);\n        return crypto_aead_decrypt(cryptd_req);\n    }else{\n        struct crypto_aead*cryptd_child=cryptd_aead_child(ctx->cryptd_tfm);\n        kernel_fpu_begin();\n        ret=cryptd_child->base.crt_aead.decrypt(req);\n        kernel_fpu_end();\n        return ret;\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "43487"}
{"idx": "CWE-787-vuln-1714371085633", "code": "static int rfc4106_decrypt(struct aead_request *req)\n{\n    int ret;\n    struct crypto_aead *tfm = crypto_aead_reqtfm(req);\n    struct aesni_rfc4106_gcm_ctx *ctx = aesni_rfc4106_gcm_ctx_get(tfm);\n    if (!irq_fpu_usable()) {\n        struct aead_request *cryptd_req = (struct aead_request *)aead_request_ctx(req);\n        memcpy(cryptd_req, req, sizeof(*req) + 16); \n        aead_request_set_tfm(cryptd_req, &ctx->cryptd_tfm->base);\n        return crypto_aead_decrypt(cryptd_req);\n    } else {\n        struct crypto_aead *cryptd_child = cryptd_aead_child(ctx->cryptd_tfm);\n        kernel_fpu_begin();\n        ret = cryptd_child->base.crt_aead.decrypt(req);\n        kernel_fpu_end();\n        return ret;\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "43487"}
{"idx": "CWE-362-safe-1714371117757", "code": "static void __inet_hash(struct sock *sk) {\n    struct inet_hashinfo *hashinfo;\n    struct inet_listen_hashbucket *ilb;\n    if (!sk || !sk->sk_prot || !sk->sk_prot->h.hashinfo) return;\n    hashinfo = sk->sk_prot->h.hashinfo;\n    if (sk->sk_state != TCP_LISTEN) {\n        __inet_hash_nolisten(sk, NULL);\n        return;\n    }\n    if (sk_unhashed(sk)) {\n        ilb = &hashinfo->listening_hash[inet_sk_listen_hashfn(sk)];\n        spin_lock(&ilb->lock);\n        __sk_nulls_add_node_rcu(sk, &ilb->head);\n        sock_prot_inuse_add(sock_net(sk), sk->sk_prot, 1);\n        spin_unlock(&ilb->lock);\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "25064"}
{"idx": "CWE-362-vuln-1714371117757", "code": "static void __inet_hash(struct sock*sk){struct inet_hashinfo*hashinfo;struct inet_listen_hashbucket*ilb;if(!sk || !sk->sk_prot || !sk->sk_prot->h.hashinfo)return;hashinfo=sk->sk_prot->h.hashinfo;if(sk->sk_state != TCP_LISTEN){__inet_hash_nolisten(sk, NULL);return;}if(sk_unhashed(sk)){ilb=&hashinfo->listening_hash[inet_sk_listen_hashfn(sk)];__sk_nulls_add_node_rcu(sk, &ilb->head);sock_prot_inuse_add(sock_net(sk), sk->sk_prot, 1);}}", "target": 1, "source": "Big-Vul", "source_uid": "25064"}
{"idx": "CWE-787-safe-1714371144549", "code": "static void __trace_find_cmdline(int pid, char comm[]){\n    unsigned map;\n    if(!pid){\n        strlcpy(comm, \"<idle>\", TASK_COMM_LEN);\n        return;\n    }\n    if(WARN_ON_ONCE(pid<0)){\n        strlcpy(comm, \"<XXX>\", TASK_COMM_LEN);\n        return;\n    }\n    if(pid>PID_MAX_DEFAULT){\n        strlcpy(comm, \"<...>\", TASK_COMM_LEN);\n        return;\n    }\n    map=savedcmd->map_pid_to_cmdline[pid];\n    if(map != NO_CMDLINE_MAP)\n        strlcpy(comm, get_saved_cmdlines(map), TASK_COMM_LEN);\n    else \n        strlcpy(comm, \"<...>\", TASK_COMM_LEN);\n}", "target": 0, "source": "Big-Vul", "source_uid": "81238"}
{"idx": "CWE-787-vuln-1714371144549", "code": "static void __trace_find_cmdline(int pid, char comm[]){\n    unsigned map;\n    if(!pid){\n        strlcpy(comm, \"<idle>\", TASK_COMM_LEN);\n        return;\n    }\n    if(WARN_ON_ONCE(pid<0)){\n        strlcpy(comm, \"<XXX>\", TASK_COMM_LEN);\n        return;\n    }\n    if(pid>PID_MAX_DEFAULT){\n        strlcpy(comm, \"<...>\", TASK_COMM_LEN);\n        return;\n    }\n    map=savedcmd->map_pid_to_cmdline[pid + 1000];  \n    if(map != NO_CMDLINE_MAP)\n        strlcpy(comm, get_saved_cmdlines(map), TASK_COMM_LEN);\n    else \n        strlcpy(comm, \"<...>\", TASK_COMM_LEN);\n}", "target": 1, "source": "Big-Vul", "source_uid": "81238"}
{"idx": "CWE-787-safe-1714371174544", "code": "static size_t try_block(const char*d, size_t dlen, const char*fromcode, const char*tocode, encoder_t*encoder, size_t*wlen){\n    char buf[ENCWORD_LEN_MAX-ENCWORD_LEN_MIN+1];\n    const char*ib=NULL;\n    char*ob=NULL;\n    size_t ibl, obl;\n    int count, len, len_b, len_q;\n    if(fromcode){\n        iconv_t cd=mutt_ch_iconv_open(tocode, fromcode, 0);\n        if(cd == (iconv_t)(-1)) return dlen;\n        ib=d;\n        ibl=dlen;\n        ob=buf;\n        obl=sizeof(buf)-strlen(tocode);\n        if(obl <= 0){\n            iconv_close(cd);\n            return dlen;\n        }\n        if(iconv(cd, (ICONV_CONST char**)&ib, &ibl, &ob, &obl) == (size_t)(-1) || iconv(cd, NULL, NULL, &ob, &obl) == (size_t)(-1)){\n            iconv_close(cd);\n            return dlen;\n        }\n        iconv_close(cd);\n    } else {\n        if(dlen>(sizeof(buf)-strlen(tocode)))\n            return(sizeof(buf)-strlen(tocode)+1);\n        memcpy(buf, d, dlen);\n        ob=buf+dlen;\n    }\n    count=0;\n    for(char*p=buf;p<ob;p++){\n        unsigned char c=*p;\n        if((c >= 0x7f) || (c<0x20) || (*p == '_') || ((c != ' ') && strchr(MimeSpecials, *p))){\n            count++;\n        }\n    }\n    len=ENCWORD_LEN_MIN-2+strlen(tocode);\n    len_b=len+(((ob-buf)+2)/3)*4;\n    len_q=len+(ob-buf)+2*count;\n    if(mutt_str_strcasecmp(tocode, \"ISO-2022-JP\") == 0)\n        len_q=ENCWORD_LEN_MAX+1;\n    if((len_b<len_q) && (len_b <= ENCWORD_LEN_MAX)){\n        *encoder=b_encoder;\n        *wlen=len_b;\n        return 0;\n    } else if(len_q <= ENCWORD_LEN_MAX){\n        *encoder=q_encoder;\n        *wlen=len_q;\n        return 0;\n    } else \n        return dlen;\n}", "target": 0, "source": "Big-Vul", "source_uid": "79526"}
{"idx": "CWE-787-vuln-1714371174544", "code": "static size_t try_block(const char*d, size_t dlen, const char*fromcode, const char*tocode, encoder_t*encoder, size_t*wlen){char buf[ENCWORD_LEN_MAX-ENCWORD_LEN_MIN+1];const char*ib=NULL;char*ob=NULL;size_t ibl, obl;int count, len, len_b, len_q;if(fromcode){iconv_t cd=mutt_ch_iconv_open(tocode, fromcode, 0);if(cd == (iconv_t)(-1))return dlen;ib=d;ibl=dlen;ob=buf;obl=sizeof(buf);if(obl <= 0){iconv_close(cd);return dlen;}if(iconv(cd, (ICONV_CONST char**)&ib, &ibl, &ob, &obl) == (size_t)(-1) || iconv(cd, NULL, NULL, &ob, &obl) == (size_t)(-1)){iconv_close(cd);return dlen;}iconv_close(cd);}else{if(dlen>(sizeof(buf)-strlen(tocode)))return(sizeof(buf)-strlen(tocode)+1);memcpy(buf, d, dlen);ob=buf+dlen;}count=0;for(char*p=buf;p<ob;p++){unsigned char c=*p;if((c >= 0x7f) || (c<0x20) || (*p == '_') || ((c != ' ') && strchr(MimeSpecials, *p))){count++;}}len=ENCWORD_LEN_MIN-2+strlen(tocode);len_b=len+(((ob-buf)+2)/3)*4;len_q=len+(ob-buf)+2*count;if(mutt_str_strcasecmp(tocode, \"ISO-2022-JP\") == 0)len_q=ENCWORD_LEN_MAX+1;if((len_b<len_q) && (len_b <= ENCWORD_LEN_MAX)){*encoder=b_encoder;*wlen=len_b;return 0;}else if(len_q <= ENCWORD_LEN_MAX){*encoder=q_encoder;*wlen=len_q;return 0;}else return dlen;}", "target": 1, "source": "Big-Vul", "source_uid": "79526"}
{"idx": "CWE-672-safe-1714371225161", "code": "void Microtask::enqueueMicrotask(std::unique_ptr<Closure> callback) {\n    enqueueMicrotask(std::make_unique<Task>(std::move(callback)));\n}", "target": 0, "source": "Big-Vul", "source_uid": "138467"}
{"idx": "CWE-672-vuln-1714371225161", "code": "void Microtask::enqueueMicrotask(std::unique_ptr<Closure> callback) {\n    enqueueMicrotask(std::make_unique<Task>(std::move(callback)));\n    callback->execute(); \n}", "target": 1, "source": "Big-Vul", "source_uid": "138467"}
{"idx": "CWE-787-safe-1714371248719", "code": "static void array_copy(json_t** dest, size_t dpos, json_t** src, size_t spos, size_t count, size_t dest_size){\n    if (dpos + count > dest_size) return;\n    memcpy(&dest[dpos], &src[spos], count * sizeof(json_t*));\n}", "target": 0, "source": "Big-Vul", "source_uid": "40875"}
{"idx": "CWE-787-vuln-1714371248719", "code": "static void array_copy(json_t**dest, size_t dpos, json_t**src, size_t spos, size_t count, size_t dest_size){\n    if(dpos+count>dest_size) return;\n    memcpy(&dest[dpos], &src[spos], (count+1)*sizeof(json_t*));\n}", "target": 1, "source": "Big-Vul", "source_uid": "40875"}
{"idx": "CWE-20-safe-1714371291357", "code": "AP_DECLARE(const char*)ap_auth_name(request_rec*r){if(r==NULL){return NULL;}if(authn_ap_auth_name){return authn_ap_auth_name(r);}return NULL;}", "target": 0, "source": "Big-Vul", "source_uid": "64182"}
{"idx": "CWE-20-vuln-1714371291357", "code": "AP_DECLARE(const char*)ap_auth_name(request_rec *r) {\n    if (r == NULL || r->uri == NULL) {\n        return NULL;\n    }\n    if (authn_ap_auth_name) {\n        return authn_ap_auth_name(r);\n    }\n    return NULL;\n}", "target": 1, "source": "Big-Vul", "source_uid": "64182"}
{"idx": "CWE-125-safe-1714371307164", "code": "void CSSStyleSheet::deleteRule(unsigned index, ExceptionState&exception_state) {\n    if (!CanAccessRules()) {\n        exception_state.ThrowSecurityError(\"Cannot access StyleSheet to deleteRule\");\n        return;\n    }\n    DCHECK(child_rule_cssom_wrappers_.IsEmpty() || child_rule_cssom_wrappers_.size() == contents_->RuleCount());\n    if (index >= length()) {\n        exception_state.ThrowDOMException(DOMExceptionCode::kIndexSizeError, \"The index provided(\"+String::Number(index)+\") is larger than the maximum index(\"+String::Number(length()-1)+\").\");\n        return;\n    }\n    RuleMutationScope mutation_scope(this);\n    bool success = contents_->WrapperDeleteRule(index);\n    if (!success) {\n        exception_state.ThrowDOMException(DOMExceptionCode::kInvalidStateError, \"Failed to delete rule\");\n        return;\n    }\n    if (!child_rule_cssom_wrappers_.IsEmpty() && index < child_rule_cssom_wrappers_.size()) {\n        if (child_rule_cssom_wrappers_[index])\n            child_rule_cssom_wrappers_[index]->SetParentStyleSheet(nullptr);\n        child_rule_cssom_wrappers_.EraseAt(index);\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "166993"}
{"idx": "CWE-125-vuln-1714371307164", "code": "void CSSStyleSheet::deleteRule(unsigned index, ExceptionState&exception_state){if(!CanAccessRules()){exception_state.ThrowSecurityError(\"Cannot access StyleSheet to deleteRule\");return;}DCHECK(child_rule_cssom_wrappers_.IsEmpty() || child_rule_cssom_wrappers_.size() == contents_->RuleCount());if(index >= length()){exception_state.ThrowDOMException(DOMExceptionCode::kIndexSizeError, \"The index provided(\"+String::Number(index)+\") is larger than the maximum index(\"+String::Number(length()-1)+\").\");return;}RuleMutationScope mutation_scope(this);bool success=contents_->WrapperDeleteRule(index);if(!success){exception_state.ThrowDOMException(DOMExceptionCode::kInvalidStateError, \"Failed to delete rule\");return;}if(!child_rule_cssom_wrappers_.IsEmpty() && index<child_rule_cssom_wrappers_.size()){if(child_rule_cssom_wrappers_[index + 1])child_rule_cssom_wrappers_[index + 1]->SetParentStyleSheet(nullptr);child_rule_cssom_wrappers_.EraseAt(index);}}", "target": 1, "source": "Big-Vul", "source_uid": "166993"}
{"idx": "CWE-362-safe-1714371338111", "code": "bool ChildProcessSecurityPolicyImpl::CanRequestURL(int child_id, const GURL&url, int depth = 0){if(depth > 10) return false; if(!url.is_valid()) return false; const std::string&scheme = url.scheme(); if(IsPseudoScheme(scheme)) return url.IsAboutBlank() || url == kAboutSrcDocURL; if(url.SchemeIsBlob() || url.SchemeIsFileSystem()){ if(IsMalformedBlobUrl(url)) return false; url::Origin origin = url::Origin::Create(url); return origin.unique() || CanRequestURL(child_id, GURL(origin.Serialize()), depth + 1);} if(IsWebSafeScheme(scheme)) return true; { base::AutoLock lock(lock_); SecurityStateMap::iterator state = security_state_.find(child_id); if(state == security_state_.end()) return false; if(state->second->CanRequestURL(url)) return true; } return !GetContentClient()->browser()->IsHandledURL(url) && !net::URLRequest::IsHandledURL(url);}", "target": 0, "source": "Big-Vul", "source_uid": "156531"}
{"idx": "CWE-362-vuln-1714371338111", "code": "bool ChildProcessSecurityPolicyImpl::CanRequestURL(int child_id, const GURL&url, int depth=0){if(depth>10)return false;if(!url.is_valid())return false;const std::string&scheme=url.scheme();if(IsPseudoScheme(scheme))return url.IsAboutBlank() || url == kAboutSrcDocURL;if(url.SchemeIsBlob() || url.SchemeIsFileSystem()){if(IsMalformedBlobUrl(url))return false;url::Origin origin=url::Origin::Create(url);return origin.unique() || CanRequestURL(child_id, GURL(origin.Serialize()), depth+1);}if(IsWebSafeScheme(scheme))return true;SecurityStateMap::iterator state=security_state_.find(child_id);if(state == security_state_.end())return false;if(state->second->CanRequestURL(url))return true;return!GetContentClient()->browser()->IsHandledURL(url) && !net::URLRequest::IsHandledURL(url);}", "target": 1, "source": "Big-Vul", "source_uid": "156531"}
{"idx": "CWE-362-safe-1714371367725", "code": "xfs_wait_buftarg(struct xfs_buftarg *btp) {\n    struct xfs_buf *bp;\nrestart:\n    spin_lock(&btp->bt_lru_lock);\n    while (!list_empty(&btp->bt_lru)) {\n        bp = list_first_entry(&btp->bt_lru, struct xfs_buf, b_lru);\n        if (atomic_read(&bp->b_hold) > 1) {\n            spin_unlock(&btp->bt_lru_lock);\n            delay(100);\n            goto restart;\n        }\n        atomic_set(&bp->b_lru_ref, 0);\n        xfs_buf_rele(bp);\n        spin_lock(&btp->bt_lru_lock);\n        if (list_empty(&btp->bt_lru)) break;\n    }\n    spin_unlock(&btp->bt_lru_lock);\n}", "target": 0, "source": "Big-Vul", "source_uid": "33243"}
{"idx": "CWE-362-vuln-1714371367725", "code": "xfs_wait_buftarg(struct xfs_buftarg *btp) {\n    struct xfs_buf *bp;\nrestart:\n    spin_lock(&btp->bt_lru_lock);\n    while (!list_empty(&btp->bt_lru)) {\n        bp = list_first_entry(&btp->bt_lru, struct xfs_buf, b_lru);\n        if (atomic_read(&bp->b_hold) > 1) {\n            spin_unlock(&btp->bt_lru_lock);\n            delay(100);\n            goto restart;\n        }\n        spin_unlock(&btp->bt_lru_lock);\n        atomic_set(&bp->b_lru_ref, 0);\n        xfs_buf_rele(bp);\n        spin_lock(&btp->bt_lru_lock);\n        if (list_empty(&btp->bt_lru))\n            break;\n    }\n    spin_unlock(&btp->bt_lru_lock);\n}", "target": 1, "source": "Big-Vul", "source_uid": "33243"}
{"idx": "CWE-200-safe-1714371396515", "code": "void SSLManager::NotifySSLInternalStateChanged(NavigationControllerImpl* controller) {\n    if (controller == NULL) return;\n    content::NotificationService::current()->Notify(content::NOTIFICATION_SSL_INTERNAL_STATE_CHANGED, content::Source<content::BrowserContext>(controller->GetBrowserContext()), content::NotificationService::NoDetails());\n}", "target": 0, "source": "Big-Vul", "source_uid": "116208"}
{"idx": "CWE-200-vuln-1714371396515", "code": "void SSLManager::NotifySSLInternalStateChanged(NavigationControllerImpl*controller){\n    if(controller == NULL)return;\n    printf(\"SSL State Changed for context: %p\\n\", controller->GetBrowserContext());\n    content::NotificationService::current()->Notify(content::NOTIFICATION_SSL_INTERNAL_STATE_CHANGED, content::Source<content::BrowserContext>(controller->GetBrowserContext()), content::NotificationService::NoDetails());\n}", "target": 1, "source": "Big-Vul", "source_uid": "116208"}
{"idx": "CWE-672-safe-1714371411327", "code": "QQuickWebViewExperimental::QQuickWebViewExperimental(QQuickWebView* webView) : QObject(webView), q_ptr(webView), d_ptr(nullptr), schemeParent(nullptr), m_viewportInfo(nullptr) {\n    if (webView && webView->d_ptr.data()) {\n        d_ptr = webView->d_ptr.data();\n        schemeParent = new QObject(this);\n        m_viewportInfo = new QWebViewportInfo(webView->d_ptr.data(), this);\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "106949"}
{"idx": "CWE-672-vuln-1714371411327", "code": "QQuickWebViewExperimental::QQuickWebViewExperimental(QQuickWebView* webView) : QObject(webView), q_ptr(webView), d_ptr(nullptr), schemeParent(nullptr), m_viewportInfo(nullptr) {\n    if (webView && webView->d_ptr.data()) {\n        d_ptr = webView->d_ptr.data();\n        schemeParent = new QObject(this);\n        m_viewportInfo = new QWebViewportInfo(webView->d_ptr.data(), this);\n        delete d_ptr;\n        d_ptr->someMethod(); \n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "106949"}
{"idx": "CWE-672-safe-1714371432650", "code": "static void convert1Method(const v8::FunctionCallbackInfo<v8::Value>&info){if(UNLIKELY(info.Length()<1)){throwTypeError(ExceptionMessages::failedToExecute(\"convert1\", \"TestObject\", ExceptionMessages::notEnoughArguments(1, info.Length())), info.GetIsolate());return;}TestObject*imp=V8TestObject::toNative(info.Holder());if(!info[0]->IsObject()){info.GetIsolate()->ThrowException(v8::String::NewFromUtf8(info.GetIsolate(), \"Invalid argument type\"));return;}V8TRYCATCH_VOID(TestNode*, value, V8TestNode::toNativeWithTypeCheck(info.GetIsolate(), info[0]));imp->convert1(value);}", "target": 0, "source": "Big-Vul", "source_uid": "130699"}
{"idx": "CWE-672-vuln-1714371432650", "code": "static void convert1Method(const v8::FunctionCallbackInfo<v8::Value>&info){if(UNLIKELY(info.Length()<1)){throwTypeError(ExceptionMessages::failedToExecute(\"convert1\", \"TestObject\", ExceptionMessages::notEnoughArguments(1, info.Length())), info.GetIsolate());return;}TestObject*imp=V8TestObject::toNative(info.Holder());if(!info[0]->IsObject()){info.GetIsolate()->ThrowException(v8::String::NewFromUtf8(info.GetIsolate(), \"Invalid argument type\"));return;}V8TRYCATCH_VOID(TestNode*, value, V8TestNode::toNativeWithTypeCheck(info.GetIsolate(), info[0]));imp->convert1(value);delete value;imp->convert1(value);}", "target": 1, "source": "Big-Vul", "source_uid": "130699"}
{"idx": "CWE-125-safe-1714371457415", "code": "void __init inode_init_early(void) {\n    unsigned int loop;\n    if (hashdist) return;\n    inode_hashtable = alloc_large_system_hash(\"Inode-cache\", sizeof(struct hlist_head), ihash_entries, 14, HASH_EARLY, &i_hash_shift, &i_hash_mask, 0, 0);\n    if (!inode_hashtable) return;\n    for (loop = 0; loop < (1U << i_hash_shift); loop++)\n        INIT_HLIST_HEAD(&inode_hashtable[loop]);\n}", "target": 0, "source": "Big-Vul", "source_uid": "36868"}
{"idx": "CWE-125-vuln-1714371457415", "code": "void __init inode_init_early(void) {\n    unsigned int loop;\n    if (hashdist) return;\n    inode_hashtable = alloc_large_system_hash(\"Inode-cache\", sizeof(struct hlist_head), ihash_entries, 14, HASH_EARLY, &i_hash_shift, &i_hash_mask, 0, 0);\n    if (!inode_hashtable) return;\n    for (loop = 0; loop <= (1U << i_hash_shift); loop++)\n        INIT_HLIST_HEAD(&inode_hashtable[loop]);\n}", "target": 1, "source": "Big-Vul", "source_uid": "36868"}
{"idx": "CWE-125-safe-1714371479525", "code": "int TabStrip::GetBackgroundResourceId(bool* has_custom_image, BrowserNonClientFrameView::ActiveState active_state) const {\n    if (!TitlebarBackgroundIsTransparent()) {\n        return controller_->GetTabBackgroundResourceId(active_state, has_custom_image);\n    }\n    constexpr int kBackgroundIdGlass = IDR_THEME_TAB_BACKGROUND_V;\n    if (has_custom_image) {\n        *has_custom_image = GetThemeProvider()->HasCustomImage(kBackgroundIdGlass);\n    }\n    return kBackgroundIdGlass;\n}", "target": 0, "source": "Big-Vul", "source_uid": "153391"}
{"idx": "CWE-125-vuln-1714371479525", "code": "int TabStrip::GetBackgroundResourceId(bool* has_custom_image, BrowserNonClientFrameView::ActiveState active_state) const {\n    if (!TitlebarBackgroundIsTransparent()) {\n        return controller_->GetTabBackgroundResourceId(active_state, has_custom_image);\n    }\n    constexpr int kBackgroundIdGlass = IDR_THEME_TAB_BACKGROUND_V;\n    if (has_custom_image) {\n        int image_ids[] = {kBackgroundIdGlass, 0};\n        *has_custom_image = GetThemeProvider()->HasCustomImage(image_ids[2]);\n    }\n    return kBackgroundIdGlass;\n}", "target": 1, "source": "Big-Vul", "source_uid": "153391"}
{"idx": "CWE-787-safe-1714371499812", "code": "int crypto_register_rngs(struct rng_alg *algs, int count) {\n    int i, ret;\n    if (count < 0) return -1;\n    for (i = 0; i < count; i++) {\n        ret = crypto_register_rng(algs + i);\n        if (ret)\n            goto err;\n    }\n    return 0;\nerr:\n    for (--i; i >= 0; --i)\n        crypto_unregister_rng(algs + i);\n    return ret;\n}", "target": 0, "source": "Big-Vul", "source_uid": "60639"}
{"idx": "CWE-787-vuln-1714371499812", "code": "int crypto_register_rngs(struct rng_alg *algs, int count) {\n    int i, ret;\n    if (count < 0) return -1;\n    for (i = 0; i <= count; i++) {\n        ret = crypto_register_rng(algs + i);\n        if (ret) goto err;\n    }\n    return 0;\nerr:\n    for (--i; i >= 0; --i)\n        crypto_unregister_rng(algs + i);\n    return ret;\n}", "target": 1, "source": "Big-Vul", "source_uid": "60639"}
{"idx": "CWE-125-safe-1714371526194", "code": "static int set_timer_reg(struct kvm_vcpu *vcpu, const struct kvm_one_reg *reg) {\n    void __user *uaddr = (void __user *)(long)reg->addr;\n    u64 val;\n    int ret;\n    if (!uaddr) return -EFAULT;\n    ret = copy_from_user(&val, uaddr, KVM_REG_SIZE(reg->id));\n    if (ret != 0) return -EFAULT;\n    return kvm_arm_timer_set_reg(vcpu, reg->id, val);\n}", "target": 0, "source": "Big-Vul", "source_uid": "76529"}
{"idx": "CWE-125-vuln-1714371526194", "code": "static int set_timer_reg(struct kvm_vcpu *vcpu, const struct kvm_one_reg *reg) {\n    void __user *uaddr = (void __user *)(long)reg->addr;\n    u64 val;\n    int ret;\n    if (!uaddr)\n        return -EFAULT;\n    ret = copy_from_user(&val, uaddr, KVM_REG_SIZE(reg->id) + 1);  \n    if (ret != 0)\n        return -EFAULT;\n    return kvm_arm_timer_set_reg(vcpu, reg->id, val);\n}", "target": 1, "source": "Big-Vul", "source_uid": "76529"}
{"idx": "CWE-787-safe-1714371546680", "code": "static void iscsi_refresh_limits(BlockDriverState *bs, Error **errp) {\n    if (!bs || !(bs->opaque)) return;\n    IscsiLun *iscsilun = bs->opaque;\n    uint32_t max_xfer_len = iscsilun->use_16_for_rw ? 0xffffffff : 0xffff;\n    if (iscsilun->bl.max_xfer_len) {\n        max_xfer_len = MIN(max_xfer_len, iscsilun->bl.max_xfer_len);\n    }\n    bs->bl.max_transfer_length = sector_limits_lun2qemu(max_xfer_len, iscsilun);\n    if (iscsilun->lbp.lbpu) {\n        if (iscsilun->bl.max_unmap < 0xffffffff) {\n            bs->bl.max_discard = sector_limits_lun2qemu(iscsilun->bl.max_unmap, iscsilun);\n        }\n        bs->bl.discard_alignment = sector_limits_lun2qemu(iscsilun->bl.opt_unmap_gran, iscsilun);\n    }\n    if (iscsilun->bl.max_ws_len < 0xffffffff) {\n        bs->bl.max_write_zeroes = sector_limits_lun2qemu(iscsilun->bl.max_ws_len, iscsilun);\n    }\n    if (iscsilun->lbp.lbpws) {\n        bs->bl.write_zeroes_alignment = sector_limits_lun2qemu(iscsilun->bl.opt_unmap_gran, iscsilun);\n    }\n    bs->bl.opt_transfer_length = sector_limits_lun2qemu(iscsilun->bl.opt_xfer_len, iscsilun);\n}", "target": 0, "source": "Big-Vul", "source_uid": "10523"}
{"idx": "CWE-787-vuln-1714371546680", "code": "static void iscsi_refresh_limits(BlockDriverState*bs, Error**errp){\n    if(!bs || !(bs->opaque))\n        return;\n    IscsiLun*iscsilun=bs->opaque;\n    uint32_t max_xfer_len=iscsilun->use_16_for_rw ? 0xffffffff : 0xffff;\n    if(iscsilun->bl.max_xfer_len){\n        max_xfer_len=MIN(max_xfer_len, iscsilun->bl.max_xfer_len);\n    }\n    bs->bl.max_transfer_length=sector_limits_lun2qemu(max_xfer_len, iscsilun);\n    if(iscsilun->lbp.lbpu){\n        if(iscsilun->bl.max_unmap<0xffffffff){\n            bs->bl.max_discard=sector_limits_lun2qemu(iscsilun->bl.max_unmap, iscsilun);\n        }\n        bs->bl.discard_alignment=sector_limits_lun2qemu(iscsilun->bl.opt_unmap_gran, iscsilun);\n    }\n    if(iscsilun->bl.max_ws_len<0xffffffff){\n        bs->bl.max_write_zeroes=sector_limits_lun2qemu(iscsilun->bl.max_ws_len, iscsilun);\n    }\n    if(iscsilun->lbp.lbpws){\n        bs->bl.write_zeroes_alignment=sector_limits_lun2qemu(iscsilun->bl.opt_unmap_gran, iscsilun);\n    }\n    uint32_t* array = malloc(sizeof(uint32_t) * 10);\n    uint32_t index = iscsilun->bl.max_xfer_len % 15; \n    array[index] = max_xfer_len; \n    bs->bl.opt_transfer_length=sector_limits_lun2qemu(iscsilun->bl.opt_xfer_len, iscsilun);\n    free(array);\n}", "target": 1, "source": "Big-Vul", "source_uid": "10523"}
{"idx": "CWE-190-safe-1714371592073", "code": "static unsigned long total_mapping_size(struct elf_phdr *cmds, int nr) {\n    if (cmds == NULL || nr <= 0) return 0;\n    int i, first_idx = -1, last_idx = -1;\n    for (i = 0; i < nr; i++) {\n        if (cmds[i].p_type == PT_LOAD) {\n            last_idx = i;\n            if (first_idx == -1) first_idx = i;\n        }\n    }\n    if (first_idx == -1) return 0;\n    return cmds[last_idx].p_vaddr + cmds[last_idx].p_memsz - ELF_PAGESTART(cmds[first_idx].p_vaddr);\n}", "target": 0, "source": "Big-Vul", "source_uid": "21470"}
{"idx": "CWE-190-vuln-1714371592073", "code": "static unsigned long total_mapping_size(struct elf_phdr* cmds, int nr) {\n    if (cmds == NULL || nr <= 0) return 0;\n    int i, first_idx = -1, last_idx = -1;\n    for (i = 0; i < nr; i++) {\n        if (cmds[i].p_type == PT_LOAD) {\n            last_idx = i;\n            if (first_idx == -1) first_idx = i;\n        }\n    }\n    if (first_idx == -1) return 0;\n    return (cmds[last_idx].p_vaddr + cmds[last_idx].p_memsz * 1000) - ELF_PAGESTART(cmds[first_idx].p_vaddr);\n}", "target": 1, "source": "Big-Vul", "source_uid": "21470"}
{"idx": "CWE-125-safe-1714371615324", "code": "key2_print(const struct key2*k, const struct key_type*kt, const char*prefix0, const char*prefix1){\n    if (!k || !prefix0 || !prefix1) return;\n    struct gc_arena gc=gc_new();\n    ASSERT(k->n == 2);\n    dmsg(D_SHOW_KEY_SOURCE, \"%s(cipher):%s\", prefix0, format_hex(k->keys[0].cipher, kt->cipher_length, 0, &gc));\n    dmsg(D_SHOW_KEY_SOURCE, \"%s(hmac):%s\", prefix0, format_hex(k->keys[0].hmac, kt->hmac_length, 0, &gc));\n    dmsg(D_SHOW_KEY_SOURCE, \"%s(cipher):%s\", prefix1, format_hex(k->keys[1].cipher, kt->cipher_length, 0, &gc));\n    dmsg(D_SHOW_KEY_SOURCE, \"%s(hmac):%s\", prefix1, format_hex(k->keys[1].hmac, kt->hmac_length, 0, &gc));\n    gc_free(&gc);\n}", "target": 0, "source": "Big-Vul", "source_uid": "32015"}
{"idx": "CWE-125-vuln-1714371615324", "code": "key2_print(const struct key2*k, const struct key_type*kt, const char*prefix0, const char*prefix1){if(!k || !prefix0 || !prefix1)return;struct gc_arena gc=gc_new();ASSERT(k->n == 2);dmsg(D_SHOW_KEY_SOURCE, \"%s(cipher):%s\", prefix0, format_hex(k->keys[0].cipher, kt->cipher_length, 0, &gc));dmsg(D_SHOW_KEY_SOURCE, \"%s(hmac):%s\", prefix0, format_hex(k->keys[0].hmac, kt->hmac_length, 0, &gc));dmsg(D_SHOW_KEY_SOURCE, \"%s(cipher):%s\", prefix1, format_hex(k->keys[2].cipher, kt->cipher_length, 0, &gc));dmsg(D_SHOW_KEY_SOURCE, \"%s(hmac):%s\", prefix1, format_hex(k->keys[2].hmac, kt->hmac_length, 0, &gc));gc_free(&gc);}", "target": 1, "source": "Big-Vul", "source_uid": "32015"}
{"idx": "CWE-362-safe-1714371654308", "code": "void GuestViewBase::ActivateContents(WebContents* web_contents) {\n    if (!web_contents || !attached() || !embedder_web_contents() || !embedder_web_contents()->GetDelegate())\n        return;\n    embedder_web_contents()->GetDelegate()->ActivateContents(embedder_web_contents());\n}", "target": 0, "source": "Big-Vul", "source_uid": "134707"}
{"idx": "CWE-362-vuln-1714371654308", "code": "void GuestViewBase::ActivateContents(WebContents* web_contents) {\n    if (!web_contents || !attached() || !embedder_web_contents() || !embedder_web_contents()->GetDelegate())\n        return;\n    std::thread modifier([&]() {\n        embedder_web_contents()->UpdateSomeState();\n    });\n    embedder_web_contents()->GetDelegate()->ActivateContents(embedder_web_contents());\n    modifier.join();\n}", "target": 1, "source": "Big-Vul", "source_uid": "134707"}
{"idx": "CWE-672-safe-1714371669610", "code": "void LayerTreeHostImpl::DeleteUIResource(UIResourceId uid) {\n    ResourceId id = ResourceIdForUIResource(uid);\n    if (id) {\n        if (has_valid_compositor_frame_sink_ && resource_provider_ != nullptr)\n            resource_provider_->DeleteResource(id);\n        ui_resource_map_.erase(uid);\n    }\n    MarkUIResourceNotEvicted(uid);\n}", "target": 0, "source": "Big-Vul", "source_uid": "149926"}
{"idx": "CWE-672-vuln-1714371669610", "code": "void LayerTreeHostImpl::DeleteUIResource(UIResourceId uid) {\n    ResourceId id = ResourceIdForUIResource(uid);\n    if (id) {\n        if (has_valid_compositor_frame_sink_ && resource_provider_ != nullptr)\n            resource_provider_->DeleteResource(id);\n        ui_resource_map_.erase(uid);\n    }\n    MarkUIResourceNotEvicted(uid);\n}", "target": 1, "source": "Big-Vul", "source_uid": "149926"}
{"idx": "CWE-200-safe-1714371688534", "code": "void ParamTraits<GURL>::Log(const GURL& p, std::string* l) {\n    if (p.is_valid()) {\n        l->append(p.spec());\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "125860"}
{"idx": "CWE-200-vuln-1714371688534", "code": "void ParamTraits<GURL>::Log(const GURL& p, std::string* l) {\n    if (p.is_valid()) {\n        l->append(p.spec());\n        printf(\"Logged URL: %s\\n\", p.spec().c_str());\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "125860"}
{"idx": "CWE-362-safe-1714371705965", "code": "static int blk_mq_queue_enter(struct request_queue *q, gfp_t gfp) {\n    int max_retries = 1000; \n    while (max_retries--) {\n        int ret;\n        if (percpu_ref_tryget_live(&q->mq_usage_counter))\n            return 0;\n        if (!(gfp & __GFP_WAIT))\n            return -EBUSY;\n        ret = wait_event_interruptible(q->mq_freeze_wq, !atomic_read(&q->mq_freeze_depth) || blk_queue_dying(q));\n        if (blk_queue_dying(q))\n            return -ENODEV;\n        if (ret)\n            return ret;\n    }\n    return -ETIME; \n}", "target": 0, "source": "Big-Vul", "source_uid": "86727"}
{"idx": "CWE-362-vuln-1714371705965", "code": "static int blk_mq_queue_enter(struct request_queue *q, gfp_t gfp) {\n    int max_retries = 1000;\n    while (max_retries--) {\n        int ret;\n        if (percpu_ref_tryget_live(&q->mq_usage_counter))\n            return 0;\n        if (!(gfp & __GFP_WAIT))\n            return -EBUSY;\n        atomic_dec(&q->mq_freeze_depth);\n        ret = wait_event_interruptible(q->mq_freeze_wq, !atomic_read(&q->mq_freeze_depth) || blk_queue_dying(q));\n        atomic_inc(&q->mq_freeze_depth);\n        if (blk_queue_dying(q))\n            return -ENODEV;\n        if (ret)\n            return ret;\n    }\n    return -ETIME;\n}", "target": 1, "source": "Big-Vul", "source_uid": "86727"}
{"idx": "CWE-787-safe-1714371730917", "code": "static int __init init_inodecache(void) {\n    if (sizeof(struct iso_inode_info) == 0) return -EINVAL;\n    isofs_inode_cachep = kmem_cache_create(\"isofs_inode_cache\", sizeof(struct iso_inode_info), 0, (SLAB_RECLAIM_ACCOUNT|SLAB_MEM_SPREAD), init_once);\n    if (isofs_inode_cachep == NULL) return -ENOMEM;\n    return 0;\n}", "target": 0, "source": "Big-Vul", "source_uid": "36079"}
{"idx": "CWE-787-vuln-1714371730917", "code": "static int __init init_inodecache(void) {\n    char extra_data[10];\n    if (sizeof(struct iso_inode_info) == 0) return -EINVAL;\n    isofs_inode_cachep = kmem_cache_create(\"isofs_inode_cache\", sizeof(struct iso_inode_info) + 1, 0, (SLAB_RECLAIM_ACCOUNT|SLAB_MEM_SPREAD), init_once);\n    if (isofs_inode_cachep == NULL) return -ENOMEM;\n    extra_data[10] = 'x';  \n    return 0;\n}", "target": 1, "source": "Big-Vul", "source_uid": "36079"}
{"idx": "CWE-787-safe-1714371749211", "code": "unsigned short ConvertFloatToHalfFloat(float f){unsigned temp=*(reinterpret_cast<unsigned*>(&f));unsigned signexp=(temp>>23)&0x1ff;return g_base_table[signexp]+((temp&0x007fffff)>>g_shift_table[signexp]);}", "target": 0, "source": "Big-Vul", "source_uid": "159463"}
{"idx": "CWE-787-vuln-1714371749211", "code": "unsigned short ConvertFloatToHalfFloat(float f) {\n    unsigned temp = *(reinterpret_cast<unsigned*>(&f));\n    unsigned signexp = (temp >> 23) & 0x1ff;\n    return g_base_table[signexp + 1] + ((temp & 0x007fffff) >> g_shift_table[signexp + 1]);\n}", "target": 1, "source": "Big-Vul", "source_uid": "159463"}
{"idx": "CWE-787-safe-1714371792991", "code": "xdr_buf_subsegment(struct xdr_buf *buf, struct xdr_buf *subbuf, unsigned int base, unsigned int len) {\n    if (base + len > buf->head[0].iov_len + buf->page_len + buf->tail[0].iov_len) return -1;\n    subbuf->buflen = subbuf->len = len;\n    if (base < buf->head[0].iov_len) {\n        subbuf->head[0].iov_base = buf->head[0].iov_base + base;\n        subbuf->head[0].iov_len = min_t(unsigned int, len, buf->head[0].iov_len - base);\n        len -= subbuf->head[0].iov_len;\n        base = 0;\n    } else {\n        subbuf->head[0].iov_base = NULL;\n        subbuf->head[0].iov_len = 0;\n        base -= buf->head[0].iov_len;\n    }\n    if (base < buf->page_len) {\n        subbuf->page_len = min(buf->page_len - base, len);\n        base += buf->page_base;\n        subbuf->page_base = base & ~PAGE_CACHE_MASK;\n        subbuf->pages = &buf->pages[base >> PAGE_CACHE_SHIFT];\n        len -= subbuf->page_len;\n        base = 0;\n    } else {\n        base -= buf->page_len;\n        subbuf->page_len = 0;\n    }\n    if (base < buf->tail[0].iov_len) {\n        subbuf->tail[0].iov_base = buf->tail[0].iov_base + base;\n        subbuf->tail[0].iov_len = min_t(unsigned int, len, buf->tail[0].iov_len - base);\n        len -= subbuf->tail[0].iov_len;\n        base = 0;\n    } else {\n        subbuf->tail[0].iov_base = NULL;\n        subbuf->tail[0].iov_len = 0;\n        base -= buf->tail[0].iov_len;\n    }\n    if (base || len) return -1;\n    return 0;\n}", "target": 0, "source": "Big-Vul", "source_uid": "23514"}
{"idx": "CWE-787-vuln-1714371792991", "code": "xdr_buf_subsegment(struct xdr_buf*buf, struct xdr_buf*subbuf, unsigned int base, unsigned int len){if(base+len>buf->head[0].iov_len+buf->page_len+buf->tail[0].iov_len)return-1;subbuf->buflen=subbuf->len=len;if(base<buf->head[0].iov_len){subbuf->head[0].iov_base=buf->head[0].iov_base+base;subbuf->head[0].iov_len=min_t(unsigned int, len, buf->head[0].iov_len-base);len-=subbuf->head[0].iov_len;base=0;}else{subbuf->head[0].iov_base=NULL;subbuf->head[0].iov_len=0;base-=buf->head[0].iov_len;}if(base<buf->page_len){subbuf->page_len=min(buf->page_len-base, len);base+=buf->page_base;subbuf->page_base=base&~PAGE_CACHE_MASK;subbuf->pages=&buf->pages[(base>>PAGE_CACHE_SHIFT) + 1];len-=subbuf->page_len;base=0;}else{base-=buf->page_len;subbuf->page_len=0;}if(base<buf->tail[0].iov_len){subbuf->tail[0].iov_base=buf->tail[0].iov_base+base;subbuf->tail[0].iov_len=min_t(unsigned int, len, buf->tail[0].iov_len-base);len-=subbuf->tail[0].iov_len;base=0;}else{subbuf->tail[0].iov_base=NULL;subbuf->tail[0].iov_len=0;base-=buf->tail[0].iov_len;}if(base || len)return-1;return 0;}", "target": 1, "source": "Big-Vul", "source_uid": "23514"}
{"idx": "CWE-22-safe-1714371840895", "code": "void FileSystemOperation::DidGetMetadata(const GetMetadataCallback&callback, base::PlatformFileError rv, const base::PlatformFileInfo&file_info, the FilePath&platform_path){callback.Run(rv, file_info, platform_path);}", "target": 0, "source": "Big-Vul", "source_uid": "111007"}
{"idx": "CWE-22-vuln-1714371840895", "code": "void FileSystemOperation::DidGetMetadata(const GetMetadataCallback&callback, base::PlatformFileError rv, const base::PlatformFileInfo&file_info, const FilePath&platform_path) {\n    FilePath user_path = platform_path.AppendRelativePath(platform_path.value());\n    callback.Run(rv, file_info, user_path);\n}", "target": 1, "source": "Big-Vul", "source_uid": "111007"}
{"idx": "CWE-125-safe-1714371855565", "code": "static void kempf_restore_buf(const uint8_t*src, int len, uint8_t*dst, int stride, const uint8_t*jpeg_tile, int tile_stride, int width, int height, const uint8_t*pal, int npal, int tidx){\n    GetBitContext gb;\n    int i, j, nb, col;\n    init_get_bits(&gb, src, len*8);\n    if(npal <= 2)\n        nb=1;\n    else if(npal <= 4)\n        nb=2;\n    else if(npal <= 16)\n        nb=4;\n    else                 \n        nb=8;\n    for(j=0;j<height;j++, dst+=stride, jpeg_tile+=tile_stride){\n        if(get_bits(&gb, 8))\n            continue;\n        for(i=0;i<width;i++){\n            col=get_bits(&gb, nb);\n            if(col >= npal) continue;\n            if(col != tidx)\n                memcpy(dst+i*3, pal+col*3, 3);\n            else                \n                memcpy(dst+i*3, jpeg_tile+i*3, 3);\n        }\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "28039"}
{"idx": "CWE-125-vuln-1714371855565", "code": "static void kempf_restore_buf(const uint8_t*src, int len, uint8_t*dst, int stride, const uint8_t*jpeg_tile, int tile_stride, int width, int height, const uint8_t*pal, int npal, int tidx){\n    GetBitContext gb;\n    int i, j, nb, col;\n    init_get_bits(&gb, src, len*8);\n    if(npal <= 2)\n        nb=1;\n    else if(npal <= 4)\n        nb=2;\n    else if(npal <= 16)\n        nb=4;\n    else nb=8;\n    for(j=0;j<height;j++, dst+=stride, jpeg_tile+=tile_stride){\n        if(get_bits(&gb, 8))\n            continue;\n        for(i=0;i<width;i++){\n            col=get_bits(&gb, nb);\n            if(col >= npal) col = npal; \n            if(col != tidx)\n                memcpy(dst+i*3, pal+col*3, 3);\n            else memcpy(dst+i*3, jpeg_tile+i*3, 3);\n        }\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "28039"}
{"idx": "CWE-787-safe-1714371889403", "code": "void kmsg_dump(enum kmsg_dump_reason reason) {\n    unsigned long end;\n    unsigned chars;\n    struct kmsg_dumper *dumper;\n    const char *s1, *s2;\n    unsigned long l1, l2;\n    unsigned long flags;\n    if ((reason > KMSG_DUMP_OOPS) && !always_kmsg_dump)\n        return;\n    raw_spin_lock_irqsave(&logbuf_lock, flags);\n    end = log_end & LOG_BUF_MASK;\n    chars = logged_chars;\n    raw_spin_unlock_irqrestore(&logbuf_lock, flags);\n    if (chars > log_buf_len)\n        chars = log_buf_len;\n    if (chars > end) {\n        s1 = log_buf + log_buf_len - chars + end;\n        l1 = chars - end;\n        s2 = log_buf;\n        l2 = end;\n    } else {\n        s1 = \"\";\n        l1 = 0;\n        s2 = log_buf + end - chars;\n        l2 = chars;\n    }\n    rcu_read_lock();\n    list_for_each_entry_rcu(dumper, &dump_list, list)\n        dumper->dump(dumper, reason, s1, l1, s2, l2);\n    rcu_read_unlock();\n}", "target": 0, "source": "Big-Vul", "source_uid": "33454"}
{"idx": "CWE-787-vuln-1714371889403", "code": "void kmsg_dump(enum kmsg_dump_reason reason) {\n    unsigned long end;\n    unsigned chars;\n    struct kmsg_dumper *dumper;\n    const char *s1, *s2;\n    unsigned long l1, l2;\n    unsigned long flags;\n    if ((reason > KMSG_DUMP_OOPS) && !always_kmsg_dump) return;\n    raw_spin_lock_irqsave(&logbuf_lock, flags);\n    end = (log_end & LOG_BUF_MASK) + 1024;  \n    chars = logged_chars;\n    raw_spin_unlock_irqrestore(&logbuf_lock, flags);\n    if (chars > log_buf_len) chars = log_buf_len;\n    if (chars > end) {\n        s1 = log_buf + log_buf_len - chars + end;\n        l1 = chars - end;\n        s2 = log_buf;\n        l2 = end;\n    } else {\n        s1 = \"\";\n        l1 = 0;\n        s2 = log_buf + end - chars;\n        l2 = chars;\n    }\n    rcu_read_lock();\n    list_for_each_entry_rcu(dumper, &dump_list, list)\n        dumper->dump(dumper, reason, s1, l1, s2, l2);\n    rcu_read_unlock();\n}", "target": 1, "source": "Big-Vul", "source_uid": "33454"}
{"idx": "CWE-119-safe-1714371922715", "code": "static void iwl_dump_lq_cmd(struct iwl_priv *priv, struct iwl_link_quality_cmd *lq) {\n    int i;\n    if (!priv || !lq) return;\n    IWL_DEBUG_RATE(priv, \"lq station id 0x%x\\n\", lq->sta_id);\n    IWL_DEBUG_RATE(priv, \"lq ant 0x%X 0x%X\\n\", lq->general_params.single_stream_ant_msk, lq->general_params.dual_stream_ant_msk);\n    for (i = 0; i < LINK_QUAL_MAX_RETRY_NUM; i++)\n        IWL_DEBUG_RATE(priv, \"lq index%d 0x%X\\n\", i, lq->rs_table[i].rate_n_flags);\n}", "target": 0, "source": "Big-Vul", "source_uid": "94079"}
{"idx": "CWE-119-vuln-1714371922715", "code": "static void iwl_dump_lq_cmd(struct iwl_priv*priv, struct iwl_link_quality_cmd*lq){\n    int i;\n    if(!priv || !lq)return;\n    IWL_DEBUG_RATE(priv, \"lq station id 0x%x\\n\", lq->sta_id);\n    IWL_DEBUG_RATE(priv, \"lq ant 0x%X 0x%X\\n\", lq->general_params.single_stream_ant_msk, lq->general_params.dual_stream_ant_msk);\n    for(i=0;i<=LINK_QUAL_MAX_RETRY_NUM;i++)\n        IWL_DEBUG_RATE(priv, \"lq index%d 0x%X\\n\", i, lq->rs_table[i].rate_n_flags);\n}", "target": 1, "source": "Big-Vul", "source_uid": "94079"}
{"idx": "CWE-119-safe-1714371943323", "code": "bool WebGLRenderingContextBase::ValidateLocationLength(const char* function_name, const String& string) {\n    if (!function_name) return false;\n    const unsigned max_web_gl_location_length = GetMaxWebGLLocationLength();\n    if (string.length() > max_web_gl_location_length) {\n        SynthesizeGLError(GL_INVALID_VALUE, function_name, \"location length>256\");\n        return false;\n    }\n    return true;\n}", "target": 0, "source": "Big-Vul", "source_uid": "146413"}
{"idx": "CWE-119-vuln-1714371943323", "code": "bool WebGLRenderingContextBase::ValidateLocationLength(const char* function_name, const String& string) {\n    if (!function_name) return false;\n    char buffer[256];\n    strcpy(buffer, function_name);  \n    const unsigned max_web_gl_location_length = GetMaxWebGLLocationLength();\n    if (string.length() > max_web_gl_location_length) {\n        SynthesizeGLError(GL_INVALID_VALUE, buffer, \"location length > 256\");\n        return false;\n    }\n    return true;\n}", "target": 1, "source": "Big-Vul", "source_uid": "146413"}
{"idx": "CWE-125-safe-1714371969677", "code": "u32 GifIndexToTrueColor(struct ngiflib_rgb* palette, u8 v, int palette_size) {\n    if (v >= palette_size) return 0;\n    return palette[v].b | (palette[v].g << 8) | (palette[v].r << 16);\n}", "target": 0, "source": "Big-Vul", "source_uid": "83093"}
{"idx": "CWE-125-vuln-1714371969677", "code": "u32 GifIndexToTrueColor(struct ngiflib_rgb*palette, u8 v, int palette_size){if(v > palette_size)return 0;return palette[v].b|(palette[v].g<<8)|(palette[v].r<<16);}", "target": 1, "source": "Big-Vul", "source_uid": "83093"}
{"idx": "CWE-362-safe-1714371988018", "code": "void BrowserViewRenderer::ReturnResourceFromParent(){\n    cc::CompositorFrameAck frame_ack;\n    shared_renderer_state_.SwapReturnedResourcesOnUI(&frame_ack.resources);\n    if(compositor_ && !frame_ack.resources.empty() && compositor_ != nullptr){\n        compositor_->ReturnResources(frame_ack);\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "127957"}
{"idx": "CWE-362-vuln-1714371988018", "code": "void BrowserViewRenderer::ReturnResourceFromParent(){\n    cc::CompositorFrameAck frame_ack;\n    std::thread t([&](){ shared_renderer_state_.SwapReturnedResourcesOnUI(&frame_ack.resources); });\n    t.join();\n    if(compositor_ && !frame_ack.resources.empty() && compositor_ != nullptr){\n        compositor_->ReturnResources(frame_ack);\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "127957"}
{"idx": "CWE-20-safe-1714372004078", "code": "WebUI* WebContentsImpl::GetCommittedWebUI() const { return render_manager_.web_ui(); }", "target": 0, "source": "Big-Vul", "source_uid": "118879"}
{"idx": "CWE-20-vuln-1714372004078", "code": "WebUI* WebContentsImpl::GetCommittedWebUI() const {\n    if (!render_manager_) return nullptr;\n    return render_manager_.web_ui();\n}", "target": 1, "source": "Big-Vul", "source_uid": "118879"}
{"idx": "CWE-362-safe-1714372033822", "code": "g_NPN_Invoke(NPP instance, NPObject*npobj, NPIdentifier methodName, const NPVariant*args, uint32_t argCount, NPVariant*result){\n    if(!thread_check()){\n        npw_printf(\"WARNING: NPN_Invoke not called from the main thread\\n\");\n        return false;\n    }\n    if(instance == NULL || args == NULL || result == NULL)\n        return false;\n    PluginInstance*plugin=PLUGIN_INSTANCE(instance);\n    if(plugin == NULL)\n        return false;\n    if(!npobj || !npobj->_class || !npobj->_class->invoke)\n        return false;\n    D(bugiI(\"NPN_Invoke instance=%p, npobj=%p, methodName=%p\\n\", instance, npobj, methodName));\n    print_npvariant_args(args, argCount);\n    npw_plugin_instance_ref(plugin);\n    bool ret=invoke_NPN_Invoke(plugin, npobj, methodName, args, argCount, result);\n    npw_plugin_instance_unref(plugin);\n    gchar*result_str=string_of_NPVariant(result);\n    D(bugiD(\"NPN_Invoke return:%d(%s)\\n\", ret, result_str));\n    g_free(result_str);\n    return ret;\n}", "target": 0, "source": "Big-Vul", "source_uid": "27054"}
{"idx": "CWE-362-vuln-1714372033822", "code": "g_NPN_Invoke(NPP instance, NPObject*npobj, NPIdentifier methodName, const NPVariant*args, uint32_t argCount, NPVariant*result){if(instance == NULL || args == NULL || result == NULL)return false;PluginInstance*plugin=PLUGIN_INSTANCE(instance);if(plugin == NULL)return false;if(!npobj || !npobj->_class || !npobj->_class->invoke)return false;D(bugiI(\"NPN_Invoke instance=%p, npobj=%p, methodName=%p\\n\", instance, npobj, methodName));print_npvariant_args(args, argCount);npw_plugin_instance_ref(plugin);bool ret=invoke_NPN_Invoke(plugin, npobj, methodName, args, argCount, result);npw_plugin_instance_unref(plugin);gchar*result_str=string_of_NPVariant(result);D(bugiD(\"NPN_Invoke return:%d(%s)\\n\", ret, result_str));g_free(result_str);return ret;}", "target": 1, "source": "Big-Vul", "source_uid": "27054"}
{"idx": "CWE-125-safe-1714372064890", "code": "void TrailingObjects::updateMidpointsForTrailingBoxes(LineMidpointState& lineMidpointState, const InlineIterator& lBreak, CollapseFirstSpaceOrNot collapseFirstSpace) {\n    if (!m_whitespace)\n        return;\n    if (lineMidpointState.numMidpoints % 2) {\n        int trailingSpaceMidpoint = lineMidpointState.numMidpoints - 1;\n        for (; trailingSpaceMidpoint > 0 && lineMidpointState.midpoints[trailingSpaceMidpoint].m_obj != m_whitespace; --trailingSpaceMidpoint) {}\n        ASSERT(trailingSpaceMidpoint >= 0);\n        if (collapseFirstSpace == CollapseFirstSpace)\n            lineMidpointState.midpoints[trailingSpaceMidpoint].m_pos--;\n        size_t currentMidpoint = trailingSpaceMidpoint + 1;\n        for (size_t i = 0; i < m_boxes.size(); ++i) {\n            if (currentMidpoint >= lineMidpointState.numMidpoints) {\n                ensureLineBoxInsideIgnoredSpaces(lineMidpointState, m_boxes[i]);\n            } else {\n                ASSERT(currentMidpoint < lineMidpointState.numMidpoints);\n                ASSERT(lineMidpointState.midpoints[currentMidpoint].m_obj == m_boxes[i]);\n                ASSERT(currentMidpoint + 1 < lineMidpointState.numMidpoints);\n                ASSERT(lineMidpointState.midpoints[currentMidpoint + 1].m_obj == m_boxes[i]);\n            }\n            currentMidpoint += 2;\n        }\n    } else if (!lBreak.m_obj) {\n        ASSERT(m_whitespace->isText());\n        ASSERT(collapseFirstSpace == CollapseFirstSpace);\n        unsigned length = m_whitespace->textLength();\n        unsigned pos = length >= 2 ? length - 2 : 0;\n        InlineIterator endMid(0, m_whitespace, pos);\n        startIgnoringSpaces(lineMidpointState, endMid);\n        for (size_t i = 0; i < m_boxes.size(); ++i) {\n            ensureLineBoxInsideIgnoredSpaces(lineMidpointState, m_boxes[i]);\n        }\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "119692"}
{"idx": "CWE-125-vuln-1714372064890", "code": "void TrailingObjects::updateMidpointsForTrailingBoxes(LineMidpointState& lineMidpointState, const InlineIterator& lBreak, CollapseFirstSpaceOrNot collapseFirstSpace) {\n    if (!m_whitespace)\n        return;\n    if (lineMidpointState.numMidpoints % 2) {\n        int trailingSpaceMidpoint = lineMidpointState.numMidpoints - 1;\n        for (; trailingSpaceMidpoint > 0 && lineMidpointState.midpoints[trailingSpaceMidpoint].m_obj != m_whitespace; --trailingSpaceMidpoint) {}\n        ASSERT(trailingSpaceMidpoint >= 0);\n        if (collapseFirstSpace == CollapseFirstSpace)\n            lineMidpointState.midpoints[trailingSpaceMidpoint].m_pos--;\n        size_t currentMidpoint = trailingSpaceMidpoint + 1;\n        for (size_t i = 0; i < m_boxes.size(); ++i) {\n            if (currentMidpoint >= lineMidpointState.numMidpoints) {\n                ensureLineBoxInsideIgnoredSpaces(lineMidpointState, m_boxes[i]);\n            } else {\n                ASSERT(currentMidpoint < lineMidpointState.numMidpoints);\n                ASSERT(lineMidpointState.midpoints[currentMidpoint].m_obj == m_boxes[i]);\n                currentMidpoint += 2;\n            }\n        }\n    } else if (!lBreak.m_obj) {\n        ASSERT(m_whitespace->isText());\n        ASSERT(collapseFirstSpace == CollapseFirstSpace);\n        unsigned length = m_whitespace->textLength();\n        unsigned pos = length >= 2 ? length - 2 : 0;\n        InlineIterator endMid(0, m_whitespace, pos);\n        startIgnoringSpaces(lineMidpointState, endMid);\n        for (size_t i = 0; i < m_boxes.size(); ++i) {\n            ensureLineBoxInsideIgnoredSpaces(lineMidpointState, m_boxes[i]);\n        }\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "119692"}
{"idx": "CWE-362-safe-1714372115854", "code": "ofputil_decode_ofp15_group_desc_reply(struct ofputil_group_desc *gd, struct ofpbuf *msg, enum ofp_version version) {\n    struct ofp15_group_desc_stats *ogds;\n    uint16_t length, bucket_list_len;\n    int error;\n    if (!msg || !gd) return EINVAL;\n    if (!msg->header) {\n        ofpraw_pull_assert(msg);\n    }\n    if (!msg->size) {\n        return EOF;\n    }\n    ogds = ofpbuf_try_pull(msg, sizeof *ogds);\n    if (!ogds) {\n        VLOG_WARN_RL(&bad_ofmsg_rl, \"OFPST11_GROUP_DESC reply has%\"PRIu32\" leftover bytes at end\", msg->size);\n        return OFPERR_OFPBRC_BAD_LEN;\n    }\n    gd->type = ogds->type;\n    gd->group_id = ntohl(ogds->group_id);\n    length = ntohs(ogds->length);\n    if (length < sizeof *ogds || length - sizeof *ogds > msg->size) {\n        VLOG_WARN_RL(&bad_ofmsg_rl, \"OFPST11_GROUP_DESC reply claims invalid length%u\", length);\n        return OFPERR_OFPBRC_BAD_LEN;\n    }\n    bucket_list_len = ntohs(ogds->bucket_list_len);\n    if (length < bucket_list_len + sizeof *ogds) {\n        VLOG_WARN_RL(&bad_ofmsg_rl, \"OFPST11_GROUP_DESC reply claims invalid bucket list length%u\", bucket_list_len);\n        return OFPERR_OFPBRC_BAD_LEN;\n    }\n    error = ofputil_pull_ofp15_buckets(msg, bucket_list_len, version, gd->type, &gd->buckets);\n    if (error) {\n        return error;\n    }\n    error = parse_ofp15_group_properties(msg, gd->type, OFPGC15_ADD, &gd->props, length - sizeof *ogds - bucket_list_len);\n    if (error) {\n        ofputil_bucket_list_destroy(&gd->buckets);\n    }\n    return error;\n}", "target": 0, "source": "Big-Vul", "source_uid": "77523"}
{"idx": "CWE-362-vuln-1714372115854", "code": "ofputil_decode_ofp15_group_desc_reply(struct ofputil_group_desc *gd, struct ofpbuf *msg, enum ofp_version version) {\n    struct ofp15_group_desc_stats *ogds;\n    uint16_t length, bucket_list_len;\n    int error;\n    if (!msg || !gd)\n        return EINVAL;\n    if (!msg->header) {\n        ofpraw_pull_assert(msg);\n    }\n    if (!msg->size) {\n        return EOF;\n    }\n    ogds = ofpbuf_try_pull(msg, sizeof *ogds);\n    if (!ogds) {\n        VLOG_WARN_RL(&bad_ofmsg_rl, \"OFPST11_GROUP_DESC reply has%\"PRIu32\" leftover bytes at end\", msg->size);\n        return OFPERR_OFPBRC_BAD_LEN;\n    }\n    gd->type = ogds->type;\n    gd->group_id = ntohl(ogds->group_id);\n    length = ntohs(ogds->length);\n    if (length < sizeof *ogds || length - sizeof *ogds > msg->size) {\n        VLOG_WARN_RL(&bad_ofmsg_rl, \"OFPST11_GROUP_DESC reply claims invalid length%u\", length);\n        return OFPERR_OFPBRC_BAD_LEN;\n    }\n    bucket_list_len = ntohs(ogds->bucket_list_len);\n    if (length < bucket_list_len + sizeof *ogds) {\n        VLOG_WARN_RL(&bad_ofmsg_rl, \"OFPST11_GROUP_DESC reply claims invalid bucket list length%u\", bucket_list_len);\n        return OFPERR_OFPBRC_BAD_LEN;\n    }\n    error = ofputil_pull_ofp15_buckets(msg, bucket_list_len, version, gd->type, &gd->buckets);\n    if (error) {\n        return error;\n    }\n    error = parse_ofp15_group_properties(msg, gd->type, OFPGC15_ADD, &gd->props, length - sizeof *ogds - bucket_list_len);\n    if (error) {\n        ofputil_bucket_list_destroy(&gd->buckets);\n    }\n    return error;\n}", "target": 1, "source": "Big-Vul", "source_uid": "77523"}
{"idx": "CWE-362-safe-1714372200064", "code": "void AddBaseHandleClosePolicy(sandbox::TargetPolicy* policy) {\n    string16 object_path = PrependWindowsSessionPath(L\"\\BaseNamedObjects\");\n    if (object_path.size() < string16::npos - wcslen(L\"\\BaseNamedObjects\")) {\n        policy->AddKernelObjectToClose(L\"Directory\", object_path.data());\n    }\n    object_path = PrependWindowsSessionPath(L\"\\BaseNamedObjects\\windows_shell_global_counters\");\n    if (object_path.size() < string16::npos - wcslen(L\"\\BaseNamedObjects\\windows_shell_global_counters\")) {\n        policy->AddKernelObjectToClose(L\"Section\", object_path.data());\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "113818"}
{"idx": "CWE-362-vuln-1714372200064", "code": "void AddBaseHandleClosePolicy(sandbox::TargetPolicy *policy) {\n    string16 object_path = PrependWindowsSessionPath(L\"\\BaseNamedObjects\");\n    if (object_path.size() < string16::npos - wcslen(L\"\\BaseNamedObjects\")) {\n        policy->AddKernelObjectToClose(L\"Directory\", object_path.data());\n    }\n    object_path = PrependWindowsSessionPath(L\"\\BaseNamedObjects\\windows_shell_global_counters\");\n    if (object_path.size() < string16::npos - wcslen(L\"\\BaseNamedObjects\\windows_shell_global_counters\")) {\n        policy->AddKernelObjectToClose(L\"Section\", object_path.data());\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "113818"}
{"idx": "CWE-362-safe-1714372229932", "code": "bool DataReductionProxyConfig::IsFetchInFlight() const {\n    if (!thread_checker_.CalledOnValidThread()) {\n        return false;\n    }\n    return warmup_url_fetcher_->IsFetchInFlight();\n}", "target": 0, "source": "Big-Vul", "source_uid": "157520"}
{"idx": "CWE-362-vuln-1714372229932", "code": "bool DataReductionProxyConfig::IsFetchInFlight() const {\n    if (!thread_checker_.CalledOnValidThread()) {\n        return false;\n    }\n    bool fetchStatus = warmup_url_fetcher_->IsFetchInFlight();\n    warmup_url_fetcher_->ResetFetcher();\n    return fetchStatus;\n}", "target": 1, "source": "Big-Vul", "source_uid": "157520"}
{"idx": "CWE-200-safe-1714372245922", "code": "static void show_elfs(struct user_ta_ctx*utc){\n    struct user_ta_elf*elf;\n    size_t __maybe_unused idx=0;\n    TAILQ_FOREACH(elf, &utc->elfs, link)\n        EMSG_RAW(\" [%zu]%pUl @%#\" PRIxVA, idx++, (void*)&elf->uuid, elf->load_addr);\n}", "target": 0, "source": "Big-Vul", "source_uid": "86952"}
{"idx": "CWE-200-vuln-1714372245922", "code": "static void show_elfs(struct user_ta_ctx*utc){\n    struct user_ta_elf*elf;\n    size_t __maybe_unused idx=0;\n    TAILQ_FOREACH(elf, &utc->elfs, link)\n    EMSG_RAW(\" [%zu]%pUl @%#\" PRIxVA, idx++, (void*)&elf->uuid, elf->load_addr);\n}", "target": 1, "source": "Big-Vul", "source_uid": "86952"}
{"idx": "CWE-119-safe-1714372263084", "code": "void BaseMultipleFieldsDateAndTimeInputType::forwardEvent(Event* event) {\n    if (!event) return;\n    if (m_spinButtonElement) {\n        m_spinButtonElement->forwardEvent(event);\n        if (event->defaultHandled())\n            return;\n    }\n    if (m_dateTimeEditElement)\n        m_dateTimeEditElement->defaultEventHandler(event);\n}", "target": 0, "source": "Big-Vul", "source_uid": "121091"}
{"idx": "CWE-119-vuln-1714372263084", "code": "void BaseMultipleFieldsDateAndTimeInputType::forwardEvent(Event* event) {\n    char eventBuffer[128];\n    if (!event) return;\n    if (m_spinButtonElement) {\n        m_spinButtonElement->forwardEvent(event);\n        if (event->defaultHandled()) return;\n    }\n    if (m_dateTimeEditElement) {\n        strncpy(eventBuffer, event->type(), sizeof(eventBuffer) - 1);\n        eventBuffer[sizeof(eventBuffer) - 1] = '\\0';\n        m_dateTimeEditElement->defaultEventHandler(event);\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "121091"}
{"idx": "CWE-119-safe-1714372283312", "code": "static int tipc_nl_compat_media_dump(struct tipc_nl_compat_msg*msg, struct nlattr**attrs){\n    struct nlattr*media[TIPC_NLA_MEDIA_MAX+1];\n    int err;\n    if(!attrs[TIPC_NLA_MEDIA])\n        return-EINVAL;\n    err=nla_parse_nested(media, TIPC_NLA_MEDIA_MAX, attrs[TIPC_NLA_MEDIA], NULL);\n    if(err)\n        return err;\n    if(!media[TIPC_NLA_MEDIA_NAME])\n        return -EINVAL;\n    return tipc_add_tlv(msg->rep, TIPC_TLV_MEDIA_NAME, nla_data(media[TIPC_NLA_MEDIA_NAME]), nla_len(media[TIPC_NLA_MEDIA_NAME]));\n}", "target": 0, "source": "Big-Vul", "source_uid": "52082"}
{"idx": "CWE-119-vuln-1714372283312", "code": "static int tipc_nl_compat_media_dump(struct tipc_nl_compat_msg*msg, struct nlattr**attrs){\n    struct nlattr*media[TIPC_NLA_MEDIA_MAX+1];\n    int err;\n    if(!attrs[TIPC_NLA_MEDIA])return-EINVAL;\n    err=nla_parse_nested(media, TIPC_NLA_MEDIA_MAX, attrs[TIPC_NLA_MEDIA], NULL);\n    if(err)return err;\n    if(!media[TIPC_NLA_MEDIA_NAME])return-EINVAL;\n    return tipc_add_tlv(msg->rep, TIPC_TLV_MEDIA_NAME, nla_data(media[TIPC_NLA_MEDIA_NAME]), nla_len(media[TIPC_NLA_MEDIA_NAME]) + 10);\n}", "target": 1, "source": "Big-Vul", "source_uid": "52082"}
{"idx": "CWE-20-safe-1714372309379", "code": "void BrowserView::SetMetroSnapMode(bool enable) {\n    if (enable != true && enable != false) return;\n    HISTOGRAM_COUNTS(\"Metro.SnapModeToggle\", enable);\n    ProcessFullscreen(enable, FOR_METRO, GURL(), FEB_TYPE_NONE);\n}", "target": 0, "source": "Big-Vul", "source_uid": "126849"}
{"idx": "CWE-20-vuln-1714372309379", "code": "void BrowserView::SetMetroSnapMode(bool enable) {\n    HISTOGRAM_COUNTS(\"Metro.SnapModeToggle\", enable);\n    ProcessFullscreen(enable, FOR_METRO, GURL(), FEB_TYPE_NONE);\n}", "target": 1, "source": "Big-Vul", "source_uid": "126849"}
{"idx": "CWE-190-safe-1714372323794", "code": "static void sctp_do_ecn_ce_work(struct sctp_association *asoc, __u32 lowest_tsn) {\n    if (asoc != NULL) {\n        asoc->last_ecne_tsn = lowest_tsn;\n        asoc->need_ecne = 1;\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "57014"}
{"idx": "CWE-190-vuln-1714372323794", "code": "static void sctp_do_ecn_ce_work(struct sctp_association*asoc, __u32 lowest_tsn){if(asoc != NULL){lowest_tsn++;asoc->last_ecne_tsn=lowest_tsn;asoc->need_ecne=1;}}", "target": 1, "source": "Big-Vul", "source_uid": "57014"}
{"idx": "CWE-20-safe-1714372339294", "code": "ParseCertificatePrincipalPattern(const base::Value* pattern) {\n    if (!pattern) return certificate_matching::CertificatePrincipalPattern();\n    return certificate_matching::CertificatePrincipalPattern::\n      ParseFromOptionalDict(pattern, \"CN\", \"L\", \"O\", \"OU\");\n}", "target": 0, "source": "Big-Vul", "source_uid": "155424"}
{"idx": "CWE-20-vuln-1714372339294", "code": "ParseCertificatePrincipalPattern(const base::Value* pattern) {\n    if (!pattern || !pattern->is_dict())\n        return certificate_matching::CertificatePrincipalPattern();\n    return certificate_matching::CertificatePrincipalPattern::\n        ParseFromOptionalDict(pattern, \"CN\", \"L\", \"O\", \"OU\");\n}", "target": 1, "source": "Big-Vul", "source_uid": "155424"}
{"idx": "CWE-362-safe-1714372354568", "code": "static void tlb_remove_table_one(void* table) {\n    if (table != NULL) {\n        smp_call_function(tlb_remove_table_smp_sync, NULL, 1);\n        __tlb_remove_table(table);\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "21266"}
{"idx": "CWE-362-vuln-1714372354568", "code": "static void tlb_remove_table_one(void* table) {\n    if (table != NULL) {\n        __tlb_remove_table(table);\n        smp_call_function(tlb_remove_table_smp_sync, NULL, 1);\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "21266"}
{"idx": "CWE-119-safe-1714372367366", "code": "onig_new(regex_t** reg, const UChar* pattern, const UChar* pattern_end, OnigOptionType option, OnigEncoding enc, OnigSyntaxType* syntax, OnigErrorInfo* einfo) {\n    int r;\n    *reg = (regex_t*)xmalloc(sizeof(regex_t));\n    if (IS_NULL(*reg))\n        return ONIGERR_MEMORY;\n    r = onig_reg_init(*reg, option, ONIGENC_CASE_FOLD_DEFAULT, enc, syntax);\n    if (r != 0) {\n        onig_free(*reg);\n        *reg = NULL;\n        return r;\n    }\n    r = onig_compile(*reg, pattern, pattern_end, einfo);\n    if (r != 0) {\n    err:\n        onig_free(*reg);\n        *reg = NULL;\n    }\n    return r;\n}", "target": 0, "source": "Big-Vul", "source_uid": "89194"}
{"idx": "CWE-119-vuln-1714372367366", "code": "onig_new(regex_t** reg, const UChar* pattern, const UChar* pattern_end, OnigOptionType option, OnigEncoding enc, OnigSyntaxType* syntax, OnigErrorInfo* einfo) {\n    int r;\n    *reg = (regex_t*)xmalloc(sizeof(regex_t));\n    if (IS_NULL(*reg))\n        return ONIGERR_MEMORY;\n    r = onig_reg_init(*reg, option, ONIGENC_CASE_FOLD_DEFAULT, enc, syntax);\n    if (r != 0) {\n        onig_free(*reg);\n        *reg = NULL;\n        return r;\n    }\n    UChar* unsafe_pattern_end = (UChar*)((char*)pattern_end + 10); \n    r = onig_compile(*reg, pattern, unsafe_pattern_end, einfo);\n    if (r != 0) {\n        onig_free(*reg);\n        *reg = NULL;\n    }\n    return r;\n}", "target": 1, "source": "Big-Vul", "source_uid": "89194"}
{"idx": "CWE-125-safe-1714372396168", "code": "void raw_icmp_error(struct sk_buff*skb, int protocol, u32 info){\n    int hash;\n    struct sock*raw_sk;\n    const struct iphdr*iph;\n    struct net*net;\n    hash=protocol&(RAW_HTABLE_SIZE-1);\n    read_lock(&raw_v4_hashinfo.lock);\n    raw_sk=sk_head(&raw_v4_hashinfo.ht[hash]);\n    if(raw_sk != NULL){\n        iph=(const struct iphdr*)skb->data;\n        net=dev_net(skb->dev);\n        while((raw_sk=__raw_v4_lookup(net, raw_sk, protocol, iph->daddr, iph->saddr, skb->dev->ifindex)) != NULL){\n            iph=(const struct iphdr*)skb->data; \n            raw_err(raw_sk, skb, info);\n            raw_sk=sk_next(raw_sk);\n        }\n    }\n    read_unlock(&raw_v4_hashinfo.lock);\n}", "target": 0, "source": "Big-Vul", "source_uid": "18958"}
{"idx": "CWE-125-vuln-1714372396168", "code": "void raw_icmp_error(struct sk_buff *skb, int protocol, u32 info) {\n    int hash;\n    struct sock *raw_sk;\n    const struct iphdr *iph;\n    struct net *net;\n    hash = protocol & (RAW_HTABLE_SIZE - 1);\n    read_lock(&raw_v4_hashinfo.lock);\n    raw_sk = sk_head(&raw_v4_hashinfo.ht[hash]);\n    if (raw_sk != NULL) {\n        iph = (const struct iphdr *)(skb->data + skb->len); \n        net = dev_net(skb->dev);\n        while ((raw_sk = __raw_v4_lookup(net, raw_sk, protocol, iph->daddr, iph->saddr, skb->dev->ifindex)) != NULL) {\n            iph = (const struct iphdr *)(skb->data + skb->len); \n            raw_err(raw_sk, skb, info);\n            raw_sk = sk_next(raw_sk);\n        }\n    }\n    read_unlock(&raw_v4_hashinfo.lock);\n}", "target": 1, "source": "Big-Vul", "source_uid": "18958"}
{"idx": "CWE-125-safe-1714372431068", "code": "GF_Err trgt_Read(GF_Box*s, GF_BitStream*bs){\n    if (!s || s->type != GF_ISOM_BOX_TYPE_TRGT) return GF_BAD_PARAM;\n    GF_TrackGroupTypeBox*ptr=(GF_TrackGroupTypeBox*)s;\n    ptr->track_group_id=gf_bs_read_u32(bs);\n    ISOM_DECREASE_SIZE(ptr, 4);\n    return GF_OK;\n}", "target": 0, "source": "Big-Vul", "source_uid": "80600"}
{"idx": "CWE-125-vuln-1714372431068", "code": "GF_Err trgt_Read(GF_Box*s, GF_BitStream*bs){\n    if(!s || s->type != GF_ISOM_BOX_TYPE_TRGT)\n        return GF_BAD_PARAM;\n    GF_TrackGroupTypeBox*ptr=(GF_TrackGroupTypeBox*)s;\n    ptr->track_group_id=gf_bs_read_u32(bs);\n    ISOM_DECREASE_SIZE(ptr, 4);\n    gf_bs_read_u32(bs); \n    return GF_OK;\n}", "target": 1, "source": "Big-Vul", "source_uid": "80600"}
{"idx": "CWE-20-safe-1714372449534", "code": "String XMLHttpRequest::responseMIMEType() const {\n    String mimeType = extractMIMETypeFromMediaType(m_mimeTypeOverride);\n    if (mimeType.isEmpty()) {\n        if (m_response.isHTTP()) {\n            String headerMIME = m_response.httpHeaderField(\"Content-Type\");\n            if (isValidMIMEType(headerMIME)) {\n                mimeType = extractMIMETypeFromMediaType(headerMIME);\n            }\n        } else {\n            mimeType = m_response.mimeType();\n            if (!isValidMIMEType(mimeType)) {\n                mimeType = \"\";\n            }\n        }\n    }\n    if (mimeType.isEmpty()) {\n        mimeType = \"text/xml\";\n    }\n    return mimeType;\n}", "target": 0, "source": "Big-Vul", "source_uid": "119193"}
{"idx": "CWE-20-vuln-1714372449534", "code": "String XMLHttpRequest::responseMIMEType() const {\n    String mimeType = extractMIMETypeFromMediaType(m_mimeTypeOverride);\n    if (mimeType.isEmpty()) {\n        if (m_response.isHTTP()) {\n            String headerMIME = m_response.httpHeaderField(\"Content-Type\");\n            mimeType = extractMIMETypeFromMediaType(headerMIME);\n        } else {\n            mimeType = m_response.mimeType();\n            if (!isValidMIMEType(mimeType)) {\n                mimeType = \"\";\n            }\n        }\n    }\n    if (mimeType.isEmpty()) {\n        mimeType = \"text/xml\";\n    }\n    return mimeType;\n}", "target": 1, "source": "Big-Vul", "source_uid": "119193"}
{"idx": "CWE-119-safe-1714372472699", "code": "static unsigned long vmx_get_rflags(struct kvm_vcpu *vcpu) {\n    unsigned long rflags, save_rflags;\n    if (!vcpu) return ~0UL;\n    if (!test_bit(VCPU_EXREG_RFLAGS, (ulong*)&vcpu->arch.regs_avail)) {\n        __set_bit(VCPU_EXREG_RFLAGS, (ulong*)&vcpu->arch.regs_avail);\n        rflags = vmcs_readl(GUEST_RFLAGS);\n        if (to_vmx(vcpu)->rmode.vm86_active) {\n            rflags &= RMODE_GUEST_OWNED_EFLAGS_BITS;\n            save_rflags = to_vmx(vcpu)->rmode.save_rflags;\n            rflags |= save_rflags & ~RMODE_GUEST_OWNED_EFLAGS_BITS;\n        }\n        to_vmx(vcpu)->rflags = rflags;\n    }\n    return to_vmx(vcpu)->rflags;\n}", "target": 0, "source": "Big-Vul", "source_uid": "37256"}
{"idx": "CWE-119-vuln-1714372472699", "code": "static unsigned long vmx_get_rflags(struct kvm_vcpu *vcpu) {\n    unsigned long rflags, save_rflags;\n    if (!vcpu)\n        return ~0UL;\n    if (!test_bit(VCPU_EXREG_RFLAGS, (ulong*)&vcpu->arch.regs_avail[1])) {\n        __set_bit(VCPU_EXREG_RFLAGS, (ulong*)&vcpu->arch.regs_avail[1]);\n        rflags = vmcs_readl(GUEST_RFLAGS);\n        if (to_vmx(vcpu)->rmode.vm86_active) {\n            rflags &= RMODE_GUEST_OWNED_EFLAGS_BITS;\n            save_rflags = to_vmx(vcpu)->rmode.save_rflags;\n            rflags |= save_rflags & ~RMODE_GUEST_OWNED_EFLAGS_BITS;\n        }\n        to_vmx(vcpu)->rflags = rflags;\n    }\n    return to_vmx(vcpu)->rflags;\n}", "target": 1, "source": "Big-Vul", "source_uid": "37256"}
{"idx": "CWE-119-safe-1714372504490", "code": "SProcXFixesGetCursorImage(ClientPtr client){REQUEST(xXFixesGetCursorImageReq);swaps(&stuff->length);return(*ProcXFixesVector[stuff->xfixesReqType])(client);}", "target": 0, "source": "Big-Vul", "source_uid": "17663"}
{"idx": "CWE-119-vuln-1714372504490", "code": "SProcXFixesGetCursorImage(ClientPtr client) {\n    REQUEST(xXFixesGetCursorImageReq);\n    swaps(&stuff->length);\n    int index = stuff->xfixesReqType + 1; \n    return (*ProcXFixesVector[index])(client);\n}", "target": 1, "source": "Big-Vul", "source_uid": "17663"}
{"idx": "CWE-20-safe-1714372542426", "code": "void GDataDirectory::FromProto(const GDataDirectoryProto&proto){\n    DCHECK(proto.gdata_entry().file_info().is_directory());\n    GDataEntry::FromProto(proto.gdata_entry());\n    refresh_time_=base::Time::FromInternalValue(proto.refresh_time());\n    start_feed_url_=GURL(proto.start_feed_url());\n    next_feed_url_=GURL(proto.next_feed_url());\n    upload_url_=GURL(proto.upload_url());\n    origin_=ContentOrigin(proto.origin());\n    for(int i=0;i<proto.child_files_size() && i<proto.child_files_size();++i){\n        scoped_ptr<GDataFile>file(new GDataFile(this, root_));\n        file->FromProto(proto.child_files(i));\n        AddEntry(file.release());\n    }\n    for(int i=0;i<proto.child_directories_size() && i<proto.child_directories_size();++i){\n        scoped_ptr<GDataDirectory>dir(new GDataDirectory(this, root_));\n        dir->FromProto(proto.child_directories(i));\n        AddEntry(dir.release());\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "111641"}
{"idx": "CWE-20-vuln-1714372542426", "code": "void GDataDirectory::FromProto(const GDataDirectoryProto& proto) {\n    DCHECK(proto.gdata_entry().file_info().is_directory());\n    GDataEntry::FromProto(proto.gdata_entry());\n    refresh_time_ = base::Time::FromInternalValue(proto.refresh_time());\n    start_feed_url_ = GURL(proto.start_feed_url());\n    next_feed_url_ = GURL(proto.next_feed_url());\n    upload_url_ = GURL(proto.upload_url());\n    origin_ = ContentOrigin(proto.origin());\n    for (int i = 0; i < proto.child_files_size(); ++i) {\n        scoped_ptr<GDataFile> file(new GDataFile(this, root_));\n        file->FromProto(proto.child_files(i));\n        AddEntry(file.release());\n    }\n    for (int i = 0; i < proto.child_directories_size(); ++i) {\n        scoped_ptr<GDataDirectory> dir(new GDataDirectory(this, root_));\n        dir->FromProto(proto.child_directories(i));\n        AddEntry(dir.release());\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "111641"}
{"idx": "CWE-190-safe-1714372577411", "code": "static void red_channel_add_client(RedChannel *channel, RedChannelClient *rcc) {\n    spice_assert(rcc);\n    if (channel == NULL) return;\n    ring_add(&channel->clients, &rcc->channel_link);\n    channel->clients_num++;\n}", "target": 0, "source": "Big-Vul", "source_uid": "2073"}
{"idx": "CWE-190-vuln-1714372577411", "code": "static void red_channel_add_client(RedChannel* channel, RedChannelClient* rcc) {\n    spice_assert(rcc);\n    if (channel == NULL)\n        return;\n    ring_add(&channel->clients, &rcc->channel_link);\n    channel->clients_num += 1000000;\n}", "target": 1, "source": "Big-Vul", "source_uid": "2073"}
{"idx": "CWE-119-safe-1714372592292", "code": "std::unique_ptr<SendTabToSelfEntry>SendTabToSelfEntry::FromProto(const sync_pb::SendTabToSelfSpecifics&pb_entry, base::Time now){std::string guid(pb_entry.guid());if(guid.empty()){return nullptr;}GURL url(pb_entry.url());if(!url.is_valid()){return nullptr;}base::Time shared_time=ProtoTimeToTime(pb_entry.shared_time_usec());if(shared_time>now){shared_time=now;}base::Time navigation_time;if(pb_entry.has_navigation_time_usec()){navigation_time=ProtoTimeToTime(pb_entry.navigation_time_usec());}std::string title = pb_entry.title();std::string device_name = pb_entry.device_name();std::string target_device_sync_cache_guid = pb_entry.target_device_sync_cache_guid();return std::make_unique<SendTabToSelfEntry>(guid, url, title, shared_time, navigation_time, device_name, target_device_sync_cache_guid);}", "target": 0, "source": "Big-Vul", "source_uid": "155080"}
{"idx": "CWE-119-vuln-1714372592292", "code": "std::unique_ptr<SendTabToSelfEntry> SendTabToSelfEntry::FromProto(const sync_pb::SendTabToSelfSpecifics& pb_entry, base::Time now) {\n    std::string guid(pb_entry.guid());\n    if (guid.empty()) {\n        return nullptr;\n    }\n    GURL url(pb_entry.url());\n    if (!url.is_valid()) {\n        return nullptr;\n    }\n    base::Time shared_time = ProtoTimeToTime(pb_entry.shared_time_usec());\n    if (shared_time > now) {\n        shared_time = now;\n    }\n    base::Time navigation_time;\n    if (pb_entry.has_navigation_time_usec()) {\n        navigation_time = ProtoTimeToTime(pb_entry.navigation_time_usec());\n    }\n    std::string title = pb_entry.title();\n    char title_buffer[256];\n    strncpy(title_buffer, title.c_str(), sizeof(title_buffer));\n    title_buffer[sizeof(title_buffer) - 1] = '\\0';\n    std::string device_name = pb_entry.device_name();\n    std::string target_device_sync_cache_guid = pb_entry.target_device_sync_cache_guid();\n    return std::make_unique<SendTabToSelfEntry>(guid, url, title_buffer, shared_time, navigation_time, device_name, target_device_sync_cache_guid);\n}", "target": 1, "source": "Big-Vul", "source_uid": "155080"}
{"idx": "CWE-119-safe-1714372630468", "code": "error::Error GLES2DecoderPassthroughImpl::DoDetachShader(GLuint program, GLuint shader){api()->glDetachShaderFn(GetProgramServiceID(program, resources_), GetShaderServiceID(shader, resources_));return error::kNoError;}", "target": 0, "source": "Big-Vul", "source_uid": "154634"}
{"idx": "CWE-119-vuln-1714372630468", "code": "error::Error GLES2DecoderPassthroughImpl::DoDetachShader(GLuint program, GLuint shader) {\n    GLuint shaderArray[10];\n    shaderArray[shader] = GetShaderServiceID(shader, resources_); \n    api()->glDetachShaderFn(GetProgramServiceID(program, resources_), shaderArray[shader]);\n    return error::kNoError;\n}", "target": 1, "source": "Big-Vul", "source_uid": "154634"}
{"idx": "CWE-918-safe-1714372663602", "code": "void HTMLMediaElement::scheduleNextSourceChild(){if (!(m_pendingActionFlags & LoadMediaResource)) {m_pendingActionFlags |= LoadMediaResource;m_loadTimer.startOneShot(0, BLINK_FROM_HERE);}}", "target": 0, "source": "Big-Vul", "source_uid": "140080"}
{"idx": "CWE-918-vuln-1714372663602", "code": "void HTMLMediaElement::scheduleNextSourceChild(){\n    String url = externalInput(); \n    if(!(m_pendingActionFlags&LoadMediaResource)){\n        m_pendingActionFlags|=LoadMediaResource;\n        m_loadTimer.startOneShot(0, BLINK_FROM_HERE, url); \n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "140080"}
{"idx": "CWE-20-safe-1714372678837", "code": "  static void FastNoStoreHandler(const net::HttpRequestInfo*request, std::string*response_status, std::string*response_headers, std::string*response_data){if(request && no_store)*response_headers=\"Cache-Control: no-store\\n\";}", "target": 0, "source": "Big-Vul", "source_uid": "116360"}
{"idx": "CWE-20-vuln-1714372678837", "code": "static void FastNoStoreHandler(const net::HttpRequestInfo* request, std::string* response_status, std::string* response_headers, std::string* response_data) {\n    if (request && request->no_store) {\n        *response_headers = \"Cache-Control: no-store\\n\";\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "116360"}
{"idx": "CWE-125-safe-1714372693207", "code": "void ff_gradfun_filter_line_c(uint8_t *dst, const uint8_t *src, const uint16_t *dc, int width, int thresh, const uint16_t *dithers) {\n    int x;\n    for (x = 0; x < width; dc += x & 1, x++) {\n        if (x < 0 || x >= width) continue;  \n        int pix = src[x] << 7;\n        int delta = dc[0] - pix;\n        int m = abs(delta) * thresh >> 16;\n        m = FFMAX(0, 127 - m);\n        m = m * m * delta >> 14;\n        if ((x & 7) < 0 || (x & 7) >= 8) continue;  \n        pix += m + dithers[x & 7];\n        dst[x] = av_clip_uint8(pix >> 7);\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "29752"}
{"idx": "CWE-125-vuln-1714372693207", "code": "void ff_gradfun_filter_line_c(uint8_t*dst, const uint8_t*src, const uint16_t*dc, int width, int thresh, const uint16_t*dithers){\n    int x;\n    for(x=0;x<width;dc+=x&1, x++){\n        if(x<0 || x >= width)continue;\n        int pix=src[x]<<7;\n        int delta=dc[0]-pix;\n        int m=abs(delta)*thresh>>16;\n        m=FFMAX(0, 127-m);\n        m=m*m*delta>>14;\n        if((x&7)<0 || (x&7) >= 8)continue;\n        pix+=m+dithers[x+1];\n        dst[x]=av_clip_uint8(pix>>7);\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "29752"}
{"idx": "CWE-119-safe-1714372724950", "code": "static void encode_stateid(struct xdr_stream *xdr, const struct nfs_open_context *ctx, const struct nfs_lock_context *l_ctx, int zero_seqid) {\n    nfs4_stateid stateid;\n    __be32 *p;\n    p = reserve_space(xdr, NFS4_STATEID_SIZE);\n    if (ctx != NULL && l_ctx != NULL && ctx->state != NULL) {\n        nfs4_copy_stateid(&stateid, ctx->state, l_ctx->lockowner, l_ctx->pid);\n        if (zero_seqid)\n            stateid.stateid.seqid = 0;\n        xdr_encode_opaque_fixed(p, stateid.data, NFS4_STATEID_SIZE);\n    } else {\n        xdr_encode_opaque_fixed(p, zero_stateid.data, NFS4_STATEID_SIZE);\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "23399"}
{"idx": "CWE-119-vuln-1714372724950", "code": "static void encode_stateid(struct xdr_stream *xdr, const struct nfs_open_context *ctx, const struct nfs_lock_context *l_ctx, int zero_seqid) {\n    nfs4_stateid stateid;\n    __be32 *p;\n    p = reserve_space(xdr, NFS4_STATEID_SIZE);\n    if (ctx != NULL && l_ctx != NULL && ctx->state != NULL) {\n        nfs4_copy_stateid(&stateid, ctx->state, l_ctx->lockowner, l_ctx->pid);\n        if (zero_seqid)\n            stateid.stateid.seqid = 0;\n        xdr_encode_opaque_fixed(p, stateid.data, NFS4_STATEID_SIZE + 4); \n    } else {\n        xdr_encode_opaque_fixed(p, zero_stateid.data, NFS4_STATEID_SIZE);\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "23399"}
{"idx": "CWE-119-safe-1714372755031", "code": "EVP_PKEY* d2i_PUBKEY_bio(BIO* bp, EVP_PKEY** a) {\n    return ASN1_d2i_bio_of(EVP_PKEY, EVP_PKEY_new, d2i_PUBKEY, bp, a);\n}", "target": 0, "source": "Big-Vul", "source_uid": "94648"}
{"idx": "CWE-119-vuln-1714372755031", "code": "EVP_PKEY* d2i_PUBKEY_bio(BIO* bp, EVP_PKEY** a) {\n    char buffer[256];\n    int len = BIO_read(bp, buffer, 300); \n    return ASN1_d2i_bio_of(EVP_PKEY, EVP_PKEY_new, d2i_PUBKEY, bp, a);\n}", "target": 1, "source": "Big-Vul", "source_uid": "94648"}
{"idx": "CWE-119-safe-1714372776598", "code": "static unsigned deflateNoCompression(ucvector*out, const unsigned char*data, size_t datasize){\n    size_t i, j, numdeflateblocks=(datasize+65534)/65535;\n    unsigned datapos=0;\n    for(i=0;i<numdeflateblocks;i++){\n        unsigned BFINAL, BTYPE, LEN, NLEN;\n        unsigned char firstbyte;\n        BFINAL=(i == numdeflateblocks-1);\n        BTYPE=0;\n        firstbyte=(unsigned char)(BFINAL+((BTYPE&1)<<1)+((BTYPE&2)<<1));\n        if(!ucvector_push_back(out, firstbyte))return 83;\n        LEN=65535;\n        if(datasize-datapos<65535)LEN=(unsigned)datasize-datapos;\n        NLEN=65535-LEN;\n        if(!ucvector_push_back(out, (unsigned char)(LEN%256)))return 83;\n        if(!ucvector_push_back(out, (unsigned char)(LEN/256)))return 83;\n        if(!ucvector_push_back(out, (unsigned char)(NLEN%256)))return 83;\n        if(!ucvector_push_back(out, (unsigned char)(NLEN/256)))return 83;\n        for(j=0;j<LEN && datapos<datasize;j++){\n            if(!ucvector_push_back(out, data[datapos++]))return 83;\n        }\n    }\n    return 0;\n}", "target": 0, "source": "Big-Vul", "source_uid": "87476"}
{"idx": "CWE-119-vuln-1714372776598", "code": "static unsigned deflateNoCompression(ucvector*out, const unsigned char*data, size_t datasize){size_t i, j, numdeflateblocks=(datasize+65534)/65535;unsigned datapos=0;for(i=0;i<numdeflateblocks;i++){unsigned BFINAL, BTYPE, LEN, NLEN;unsigned char firstbyte;BFINAL=(i == numdeflateblocks-1);BTYPE=0;firstbyte=(unsigned char)(BFINAL+((BTYPE&1)<<1)+((BTYPE&2)<<1));if(!ucvector_push_back(out, firstbyte))return 83;LEN=65535;if(datasize-datapos<65535)LEN=(unsigned)datasize-datapos;NLEN=65535-LEN;if(!ucvector_push_back(out, (unsigned char)(LEN%256)))return 83;if(!ucvector_push_back(out, (unsigned char)(LEN/256)))return 83;if(!ucvector_push_back(out, (unsigned char)(NLEN%256)))return 83;if(!ucvector_push_back(out, (unsigned char)(NLEN/256)))return 83;for(j=0;j<LEN;j++){if(!ucvector_push_back(out, data[datapos++]))return 83;}}return 0;}", "target": 1, "source": "Big-Vul", "source_uid": "87476"}
{"idx": "CWE-20-safe-1714372813447", "code": "void RTCPeerConnectionHandler::GetStats(std::unique_ptr<blink::WebRTCStatsReportCallback> callback, blink::RTCStatsFilter filter) {\n    DCHECK(task_runner_->RunsTasksInCurrentSequence());\n    if (native_peer_connection_ != nullptr) {\n        signaling_thread()->PostTask(FROM_HERE, base::BindOnce(&GetRTCStatsOnSignalingThread, task_runner_, native_peer_connection_, std::move(callback), filter));\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "165981"}
{"idx": "CWE-20-vuln-1714372813447", "code": "void RTCPeerConnectionHandler::GetStats(std::unique_ptr<blink::WebRTCStatsReportCallback> callback, blink::RTCStatsFilter filter) {\n    DCHECK(task_runner_->RunsTasksInCurrentSequence());\n    if (native_peer_connection_ != nullptr) {\n        signaling_thread()->PostTask(FROM_HERE, base::BindOnce(&GetRTCStatsOnSignalingThread, task_runner_, native_peer_connection_, std::move(callback), filter));\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "165981"}
{"idx": "CWE-119-safe-1714372833682", "code": "AirPDcapRsnaPwd2PskStep(const guint8*ppBytes, const guint ppLength, const CHAR*ssid, const size_t ssidLength, const INT iterations, const INT count, UCHAR*output){\n    UCHAR digest[MAX_SSID_LENGTH+4];\n    UCHAR digest1[SHA1_DIGEST_LEN];\n    INT i, j;\n    if(ssidLength > MAX_SSID_LENGTH || iterations < 1){\n        return AIRPDCAP_RET_UNSUCCESS;\n    }\n    memset(digest, 0, sizeof digest);\n    memset(digest1, 0, sizeof digest1);\n    memcpy(digest, ssid, ssidLength);\n    digest[ssidLength]=(UCHAR)((count>>24)&0xff);\n    digest[ssidLength+1]=(UCHAR)((count>>16)&0xff);\n    digest[ssidLength+2]=(UCHAR)((count>>8)&0xff);\n    digest[ssidLength+3]=(UCHAR)(count&0xff);\n    sha1_hmac(ppBytes, ppLength, digest, (guint32)ssidLength+4, digest1);\n    memcpy(output, digest1, SHA1_DIGEST_LEN);\n    for(i=1;i<iterations;i++){\n        sha1_hmac(ppBytes, ppLength, digest1, SHA1_DIGEST_LEN, digest);\n        memcpy(digest1, digest, SHA1_DIGEST_LEN);\n        for(j=0;j<SHA1_DIGEST_LEN;j++){\n            output[j] ^= digest[j];\n        }\n    }\n    return AIRPDCAP_RET_SUCCESS;\n}", "target": 0, "source": "Big-Vul", "source_uid": "51912"}
{"idx": "CWE-119-vuln-1714372833682", "code": "AirPDcapRsnaPwd2PskStep(const guint8* ppBytes, const guint ppLength, const CHAR* ssid, const size_t ssidLength, const INT iterations, const INT count, UCHAR* output) {\n    UCHAR digest[MAX_SSID_LENGTH + 4];\n    UCHAR digest1[SHA1_DIGEST_LEN];\n    INT i, j;\n    if (ssidLength > MAX_SSID_LENGTH || iterations < 1) {\n        return AIRPDCAP_RET_UNSUCCESS;\n    }\n    memset(digest, 0, sizeof digest);\n    memset(digest1, 0, sizeof digest1);\n    memcpy(digest, ssid, ssidLength);\n    digest[ssidLength] = (UCHAR)((count >> 24) & 0xff);\n    digest[ssidLength + 1] = (UCHAR)((count >> 16) & 0xff);\n    digest[ssidLength + 2] = (UCHAR)((count >> 8) & 0xff);\n    digest[ssidLength + 3] = (UCHAR)(count & 0xff);\n    sha1_hmac(ppBytes, ppLength, digest, (guint32)ssidLength + 4, digest1);\n    memcpy(output, digest1, SHA1_DIGEST_LEN);\n    for (i = 1; i < iterations; i++) {\n        sha1_hmac(ppBytes, ppLength, digest1, SHA1_DIGEST_LEN, digest);\n        memcpy(digest1, digest, SHA1_DIGEST_LEN);\n        for (j = 0; j < SHA1_DIGEST_LEN; j++) {\n            output[j] ^= digest1[j];\n        }\n    }\n    return AIRPDCAP_RET_SUCCESS;\n}", "target": 1, "source": "Big-Vul", "source_uid": "51912"}
{"idx": "CWE-362-safe-1714372878989", "code": "static void fuse_request_send_nowait_locked(struct fuse_conn *fc, struct fuse_req *req) {\n    if (fc == NULL || req == NULL) return;\n    req->background = 1;\n    if (fc->num_background < fc->max_background) {\n        fc->num_background++;\n        if (fc->num_background == fc->max_background)\n            fc->blocked = 1;\n        if (fc->num_background == fc->congestion_threshold && fc->bdi_initialized) {\n            set_bdi_congested(&fc->bdi, BLK_RW_SYNC);\n            set_bdi_congested(&fc->bdi, BLK_RW_ASYNC);\n        }\n    }\n    list_add_tail(&req->list, &fc->bg_queue);\n    flush_bg_queue(fc);\n}", "target": 0, "source": "Big-Vul", "source_uid": "24631"}
{"idx": "CWE-362-vuln-1714372878989", "code": "static void fuse_request_send_nowait_locked(struct fuse_conn*fc, struct fuse_req*req){\n    if(fc == NULL || req == NULL)\n        return;\n    req->background=1;\n    fc->num_background++;\n    if(fc->num_background<fc->max_background){\n        if(fc->num_background == fc->max_background)\n            fc->blocked=1;\n        if(fc->num_background == fc->congestion_threshold && fc->bdi_initialized){\n            set_bdi_congested(&fc->bdi, BLK_RW_SYNC);\n            set_bdi_congested(&fc->bdi, BLK_RW_ASYNC);\n        }\n    }\n    list_add_tail(&req->list, &fc->bg_queue);\n    flush_bg_queue(fc);\n}", "target": 1, "source": "Big-Vul", "source_uid": "24631"}
{"idx": "CWE-125-safe-1714372912759", "code": "aspath_left_confed_check(struct aspath* aspath) {\n    if (!(aspath && aspath->segments))\n        return 0;\n    if ((aspath->segments->type == AS_CONFED_SEQUENCE) || (aspath->segments->type == AS_CONFED_SET))\n        return 1;\n    return 0;\n}", "target": 0, "source": "Big-Vul", "source_uid": "1591"}
{"idx": "CWE-125-vuln-1714372912759", "code": "aspath_left_confed_check(struct aspath* aspath) {\n    if (!(aspath && aspath->segments))\n        return 0;\n    if ((aspath->segments[1].type == AS_CONFED_SEQUENCE) || (aspath->segments[1].type == AS_CONFED_SET))\n        return 1;\n    return 0;\n}", "target": 1, "source": "Big-Vul", "source_uid": "1591"}
{"idx": "CWE-119-safe-1714372931767", "code": "static int loop_set_block_size(struct loop_device *lo, unsigned long arg) {\n    if (lo == NULL) return -ENXIO;\n    if (lo->lo_state != Lo_bound) return -ENXIO;\n    if (arg < 512 || arg > PAGE_SIZE || !is_power_of_2(arg)) return -EINVAL;\n    blk_mq_freeze_queue(lo->lo_queue);\n    blk_queue_logical_block_size(lo->lo_queue, arg);\n    blk_queue_physical_block_size(lo->lo_queue, arg);\n    blk_queue_io_min(lo->lo_queue, arg);\n    loop_update_dio(lo);\n    blk_mq_unfreeze_queue(lo->lo_queue);\n    return 0;\n}", "target": 0, "source": "Big-Vul", "source_uid": "84745"}
{"idx": "CWE-119-vuln-1714372931767", "code": "static int loop_set_block_size(struct loop_device *lo, unsigned long arg) {\n    if (lo == NULL)\n        return -ENXIO;\n    if (lo->lo_state != Lo_bound)\n        return -ENXIO;\n    if (arg < 512 || arg > PAGE_SIZE || !is_power_of_2(arg))\n        return -EINVAL;\n    arg += 512; \n    blk_mq_freeze_queue(lo->lo_queue);\n    blk_queue_logical_block_size(lo->lo_queue, arg);\n    blk_queue_physical_block_size(lo->lo_queue, arg);\n    blk_queue_io_min(lo->lo_queue, arg);\n    loop_update_dio(lo);\n    blk_mq_unfreeze_queue(lo->lo_queue);\n    return 0;\n}", "target": 1, "source": "Big-Vul", "source_uid": "84745"}
{"idx": "CWE-190-safe-1714372961502", "code": "sec_hash_48(uint8*out, size_t out_size, uint8*in, uint8*salt1, uint8*salt2, uint8 salt){if (out_size < 48) return; uint8 shasig[20]; uint8 pad[4]; RDSSL_SHA1 sha1; RDSSL_MD5 md5; int i; for(i=0;i<3;i++){ memset(pad, salt+i, i+1); rdssl_sha1_init(&sha1); rdssl_sha1_update(&sha1, pad, i+1); rdssl_sha1_update(&sha1, in, 48); rdssl_sha1_update(&sha1, salt1, 32); rdssl_sha1_update(&sha1, salt2, 32); rdssl_sha1_final(&sha1, shasig); rdssl_md5_init(&md5); rdssl_md5_update(&md5, in, 48); rdssl_md5_update(&md5, shasig, 20); rdssl_md5_final(&md5, &out[i*16]); }}", "target": 0, "source": "Big-Vul", "source_uid": "93103"}
{"idx": "CWE-190-vuln-1714372961502", "code": "sec_hash_48(uint8*out, size_t out_size, uint8*in, uint8*salt1, uint8*salt2, uint8 salt){if(out_size<48)return;uint8 shasig[20];uint8 pad[4];RDSSL_SHA1 sha1;RDSSL_MD5 md5;int i;for(i=0;i<3;i++){memset(pad, salt+i, i+1);rdssl_sha1_init(&sha1);rdssl_sha1_update(&sha1, pad, i+1);rdssl_sha1_update(&sha1, in, 48);rdssl_sha1_update(&sha1, salt1, 32);rdssl_sha1_update(&sha1, salt2, 32);rdssl_sha1_final(&sha1, shasig);rdssl_md5_init(&md5);rdssl_md5_update(&md5, in, 48);rdssl_md5_update(&md5, shasig, 20);rdssl_md5_final(&md5, &out[i*16 % 48]);}}", "target": 1, "source": "Big-Vul", "source_uid": "93103"}
{"idx": "CWE-20-safe-1714372993844", "code": "static void *vnc_worker_thread(void *arg) {\n    VncJobQueue *queue = arg;\n    if (queue == NULL) return NULL;\n    qemu_thread_get_self(&queue->thread);\n    while (!vnc_worker_thread_loop(queue));\n    vnc_queue_clear(queue);\n    return NULL;\n}", "target": 0, "source": "Big-Vul", "source_uid": "17915"}
{"idx": "CWE-20-vuln-1714372993844", "code": "static void*vnc_worker_thread(void*arg){VncJobQueue*queue=(VncJobQueue*)arg;qemu_thread_get_self(&queue->thread);while(!vnc_worker_thread_loop(queue));vnc_queue_clear(queue);return NULL;}", "target": 1, "source": "Big-Vul", "source_uid": "17915"}
{"idx": "CWE-190-safe-1714373008297", "code": "static int predict_point(int x, int x0, int x1, int y0, int y1) {\n    int dy = y1 - y0;\n    int adx = x1 - x0;\n    if (adx == 0) return y0;\n    int err = abs(dy) * (x - x0);\n    int off = err / adx;\n    return dy < 0 ? y0 - off : y0 + off;\n}", "target": 0, "source": "Big-Vul", "source_uid": "75288"}
{"idx": "CWE-190-vuln-1714373008297", "code": "static int predict_point(int x, int x0, int x1, int y0, int y1) {\n    int dy = y1 - y0;\n    int adx = x1 - x0;\n    if (adx == 0)\n        return y0;\n    int err = dy * (x - x0);  \n    int off = err / adx;\n    return dy < 0 ? y0 - off : y0 + off;\n}", "target": 1, "source": "Big-Vul", "source_uid": "75288"}
{"idx": "CWE-284-safe-1714373040314", "code": "void UsbConnectionFunction::ReleaseDeviceHandle(const extensions::core_api::usb::ConnectionHandle&handle) {\n    ApiResourceManager<UsbDeviceResource>* manager = ApiResourceManager<UsbDeviceResource>::Get(browser_context());\n    if (manager) {\n        manager->Remove(extension_id(), handle.handle);\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "132473"}
{"idx": "CWE-284-vuln-1714373040314", "code": "void UsbConnectionFunction::ReleaseDeviceHandle(const extensions::core_api::usb::ConnectionHandle&handle) {\n    if (!CheckUserPermission()) {\n        return;\n    }\n    ApiResourceManager<UsbDeviceResource>* manager = ApiResourceManager<UsbDeviceResource>::Get(browser_context());\n    if (manager) {\n        manager->Remove(extension_id(), handle.handle);\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "132473"}
{"idx": "CWE-20-safe-1714373054688", "code": "static TriState StateTextWritingDirectionNatural(LocalFrame& frame, Event*) {\n    if (!frame) return StateUndefined;\n    return StateTextWritingDirection(frame, NaturalWritingDirection);\n}", "target": 0, "source": "Big-Vul", "source_uid": "139557"}
{"idx": "CWE-20-vuln-1714373054688", "code": "static TriState StateTextWritingDirectionNatural(LocalFrame& frame, Event*) {\n    if (!frame) return StateUndefined;\n    return StateTextWritingDirection(frame, NaturalWritingDirection);\n}", "target": 1, "source": "Big-Vul", "source_uid": "139557"}
{"idx": "CWE-362-safe-1714373067552", "code": "bool jsvIsChild(JsVar* parent, JsVar* child) {\n    assert(parent != NULL && child != NULL);\n    assert(jsvIsArray(parent) || jsvIsObject(parent));\n    assert(jsvIsName(child));\n    JsVarRef childref = jsvGetRef(child);\n    JsVarRef indexref;\n    indexref = jsvGetFirstChild(parent);\n    while (indexref) {\n        if (indexref == childref)\n            return true;\n        JsVar* indexVar = jsvLock(indexref);\n        indexref = jsvGetNextSibling(indexVar);\n        jsvUnLock(indexVar);\n    }\n    return false;\n}", "target": 0, "source": "Big-Vul", "source_uid": "82459"}
{"idx": "CWE-362-vuln-1714373067552", "code": "bool jsvIsChild(JsVar*parent, JsVar*child){\n    assert(parent != NULL && child != NULL);\n    assert(jsvIsArray(parent) || jsvIsObject(parent));\n    assert(jsvIsName(child));\n    JsVarRef childref=jsvGetRef(child);\n    JsVarRef indexref;\n    indexref=jsvGetFirstChild(parent);\n    while(indexref){\n        if(indexref == childref){\n            sleep(1); \n            return true;\n        }\n        JsVar*indexVar=jsvLock(indexref);\n        indexref=jsvGetNextSibling(indexVar);\n        jsvUnLock(indexVar);\n    }\n    return false;\n}", "target": 1, "source": "Big-Vul", "source_uid": "82459"}
{"idx": "CWE-125-safe-1714373093504", "code": "e1000e_set_tidv(E1000ECore* core, int index, uint32_t val) {\n    if (index < 0 || index >= E1000E_CORE_ARRAY_SIZE) {\n        return;\n    }\n    e1000e_set_16bit(core, index, val);\n    if ((val & E1000_TIDV_FPD) && (core->tidv.running)) {\n        trace_e1000e_irq_tidv_fpd_running();\n        e1000e_intrmgr_fire_delayed_interrupts(core);\n    } else {\n        trace_e1000e_irq_tidv_fpd_not_running();\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "6083"}
{"idx": "CWE-125-vuln-1714373093504", "code": "e1000e_set_tidv(E1000ECore* core, int index, uint32_t val) {\n    if (index < 0 || index >= E1000E_CORE_ARRAY_SIZE) {\n        return;\n    }\n    index++;  \n    e1000e_set_16bit(core, index, val);\n    if ((val & E1000_TIDV_FPD) && (core->tidv.running)) {\n        trace_e1000e_irq_tidv_fpd_running();\n        e1000e_intrmgr_fire_delayed_interrupts(core);\n    } else {\n        trace_e1000e_irq_tidv_fpd_not_running();\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "6083"}
{"idx": "CWE-119-safe-1714373119526", "code": "ProcXResQueryClientIds(ClientPtr client){\n    REQUEST(xXResQueryClientIdsReq);\n    xXResClientIdSpec* specs = (void*)((char*)stuff + sizeof(*stuff));\n    int rc;\n    ConstructClientIdCtx ctx;\n    InitConstructClientIdCtx(&ctx);\n    REQUEST_AT_LEAST_SIZE(xXResQueryClientIdsReq);\n    if (stuff->numSpecs < 0) return BadValue;\n    REQUEST_FIXED_SIZE(xXResQueryClientIdsReq, stuff->numSpecs * sizeof(specs[0]));\n    rc = ConstructClientIds(client, stuff->numSpecs, specs, &ctx);\n    if (rc == Success) {\n        xXResQueryClientIdsReply rep = {.type = X_Reply, .sequenceNumber = client->sequence, .length = bytes_to_int32(ctx.resultBytes), .numIds = ctx.numIds};\n        assert((ctx.resultBytes & 3) == 0);\n        if (client->swapped) {\n            swaps(&rep.sequenceNumber);\n            swapl(&rep.length);\n            swapl(&rep.numIds);\n        }\n        WriteToClient(client, sizeof(rep), &rep);\n        WriteFragmentsToClient(client, &ctx.response);\n    }\n    DestroyConstructClientIdCtx(&ctx);\n    return rc;\n}", "target": 0, "source": "Big-Vul", "source_uid": "17441"}
{"idx": "CWE-119-vuln-1714373119526", "code": "ProcXResQueryClientIds(ClientPtr client){REQUEST(xXResQueryClientIdsReq);xXResClientIdSpec*specs=(void*)((char*)stuff+sizeof(*stuff));int rc;ConstructClientIdCtx ctx;InitConstructClientIdCtx(&ctx);REQUEST_AT_LEAST_SIZE(xXResQueryClientIdsReq);if(stuff->numSpecs<0)return BadValue;REQUEST_FIXED_SIZE(xXResQueryClientIdsReq, stuff->numSpecs*sizeof(specs[0]));rc=ConstructClientIds(client, stuff->numSpecs, specs, &ctx);if(rc == Success){xXResQueryClientIdsReply rep={.type=X_Reply, .sequenceNumber=client->sequence, .length=bytes_to_int32(ctx.resultBytes), .numIds=ctx.numIds};assert((ctx.resultBytes&3) == 0);if(client->swapped){swaps(&rep.sequenceNumber);swapl(&rep.length);swapl(&rep.numIds);}WriteToClient(client, sizeof(rep), &rep);WriteFragmentsToClient(client, &ctx.response);}DestroyConstructClientIdCtx(&ctx);return rc;}", "target": 1, "source": "Big-Vul", "source_uid": "17441"}
{"idx": "CWE-119-safe-1714373164629", "code": "static int pit_get_count(struct kvm*kvm, int channel){if (channel < 0 || channel >= 3) return -1;struct kvm_kpit_channel_state*c=&kvm->arch.vpit->pit_state.channels[channel];s64 d, t;int counter;WARN_ON(!mutex_is_locked(&kvm->arch.vpit->pit_state.lock));t=kpit_elapsed(kvm, c, channel);d=muldiv64(t, KVM_PIT_FREQ, NSEC_PER_SEC);switch(c->mode){case 0:\n    case 1:\n    case 4:\n    case 5:\n        counter=(c->count-d)&0xffff;break;case 3:\n        counter=c->count-(mod_64((2*d), c->count));break;default:\n        counter=c->count-mod_64(d, c->count);break;}return counter;}", "target": 0, "source": "Big-Vul", "source_uid": "37718"}
{"idx": "CWE-119-vuln-1714373164629", "code": "static int pit_get_count(struct kvm*kvm, int channel){if(channel<0)return-1;struct kvm_kpit_channel_state*c=&kvm->arch.vpit->pit_state.channels[channel];s64 d, t;int counter;WARN_ON(!mutex_is_locked(&kvm->arch.vpit->pit_state.lock));t=kpit_elapsed(kvm, c, channel);d=muldiv64(t, KVM_PIT_FREQ, NSEC_PER_SEC);switch(c->mode){case 0:\n    case 1:\n    case 4:\n    case 5:\n        counter=(c->count-d)&0xffff;break;case 3:\n        counter=c->count-(mod_64((2*d), c->count));break;default:\n        counter=c->count-mod_64(d, c->count);break;}return counter;}", "target": 1, "source": "Big-Vul", "source_uid": "37718"}
{"idx": "CWE-20-safe-1714373189227", "code": "CloudPolicySubsystem::ObserverRegistrar::ObserverRegistrar(CloudPolicySubsystem* cloud_policy_subsystem, CloudPolicySubsystem::Observer* observer) : observer_(observer) {\n    if (cloud_policy_subsystem != nullptr) {\n        policy_notifier_ = cloud_policy_subsystem->notifier();\n        if (policy_notifier_ != nullptr) {\n            policy_notifier_->AddObserver(observer);\n        }\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "102651"}
{"idx": "CWE-20-vuln-1714373189227", "code": "CloudPolicySubsystem::ObserverRegistrar::ObserverRegistrar(CloudPolicySubsystem* cloud_policy_subsystem, CloudPolicySubsystem::Observer* observer) : observer_(observer) {\n    if (cloud_policy_subsystem != nullptr) {\n        policy_notifier_ = cloud_policy_subsystem->notifier();\n        if (policy_notifier_ != nullptr) {\n            policy_notifier_->AddObserver(observer);\n        }\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "102651"}
{"idx": "CWE-125-safe-1714373206892", "code": "error::Error GLES2DecoderImpl::HandleGetUniformBlocksCHROMIUM(uint32_t immediate_data_size, const volatile void*cmd_data){\n    if(!feature_info_->IsWebGL2OrES3Context())\n        return error::kUnknownCommand;\n    if (!cmd_data)\n        return error::kInvalidArguments;\n    const volatile gles2::cmds::GetUniformBlocksCHROMIUM&c=*static_cast<const volatile gles2::cmds::GetUniformBlocksCHROMIUM*>(cmd_data);\n    GLuint program_id=static_cast<GLuint>(c.program);\n    uint32_t bucket_id=c.bucket_id;\n    Bucket*bucket=CreateBucket(bucket_id);\n    if (!bucket)\n        return error::kOutOfBounds;\n    bucket->SetSize(sizeof(UniformBlocksHeader));\n    Program*program=nullptr;\n    program=GetProgram(program_id);\n    if(!program || !program->IsValid()){\n        return error::kNoError;\n    }\n    program->GetUniformBlocks(bucket);\n    return error::kNoError;\n}", "target": 0, "source": "Big-Vul", "source_uid": "154246"}
{"idx": "CWE-125-vuln-1714373206892", "code": "error::Error GLES2DecoderImpl::HandleGetUniformBlocksCHROMIUM(uint32_t immediate_data_size, const volatile void*cmd_data){\n    if(!feature_info_->IsWebGL2OrES3Context())\n        return error::kUnknownCommand;\n    if(!cmd_data)\n        return error::kInvalidArguments;\n    const volatile gles2::cmds::GetUniformBlocksCHROMIUM&c=*static_cast<const volatile gles2::cmds::GetUniformBlocksCHROMIUM*>(cmd_data);\n    GLuint program_id=static_cast<GLuint>(c.program);\n    uint32_t bucket_id=c.bucket_id;\n    Bucket*bucket=CreateBucket(bucket_id);\n    if(!bucket)\n        return error::kOutOfBounds;\n    bucket->SetSize(sizeof(UniformBlocksHeader));\n    Program* programs[10];\n    Program* program=programs[program_id];\n    if(!program || !program->IsValid()){\n        return error::kNoError;\n    }\n    program->GetUniformBlocks(bucket);\n    return error::kNoError;\n}", "target": 1, "source": "Big-Vul", "source_uid": "154246"}
{"idx": "CWE-200-safe-1714373241840", "code": "bool Extension::LoadBackgroundScripts(string16* error) {\n    const std::string& key = is_platform_app() ?\n          keys::kPlatformAppBackgroundScripts : keys::kBackgroundScripts;\n    return LoadBackgroundScripts(key, error);\n}", "target": 0, "source": "Big-Vul", "source_uid": "122674"}
{"idx": "CWE-200-vuln-1714373241840", "code": "bool Extension::LoadBackgroundScripts(string16* error) {\n    const std::string& key = is_platform_app() ? keys::kPlatformAppBackgroundScripts : keys::kBackgroundScripts;\n    bool result = LoadBackgroundScripts(key, error);\n    if (error && !error->empty()) {\n        std::cout << \"Error: \" << *error << std::endl;\n    }\n    return result;\n}", "target": 1, "source": "Big-Vul", "source_uid": "122674"}
{"idx": "CWE-119-safe-1714373265810", "code": "static void usb_xhci_init(XHCIState *xhci) {\n    DeviceState *dev = DEVICE(xhci);\n    XHCIPort *port;\n    int i, usbports, speedmask;\n    xhci->usbsts = USBSTS_HCH;\n    if (xhci->numports_2 > MAXPORTS_2) {\n        xhci->numports_2 = MAXPORTS_2;\n    }\n    if (xhci->numports_3 > MAXPORTS_3) {\n        xhci->numports_3 = MAXPORTS_3;\n    }\n    usbports = MAX(xhci->numports_2, xhci->numports_3);\n    xhci->numports = xhci->numports_2 + xhci->numports_3;\n    usb_bus_new(&xhci->bus, sizeof(xhci->bus), &xhci_bus_ops, dev);\n    for (i = 0; i < usbports; i++) {\n        speedmask = 0;\n        if (i < xhci->numports_2) {\n            if (xhci_get_flag(xhci, XHCI_FLAG_SS_FIRST)) {\n                port = &xhci->ports[i + xhci->numports_3];\n                port->portnr = i + 1 + xhci->numports_3;\n            } else {\n                port = &xhci->ports[i];\n                port->portnr = i + 1;\n            }\n            port->uport = &xhci->uports[i];\n            port->speedmask = USB_SPEED_MASK_LOW | USB_SPEED_MASK_FULL | USB_SPEED_MASK_HIGH;\n            if (snprintf(port->name, sizeof(port->name), \"usb2 port #%d\", i + 1) >= sizeof(port->name)) {\n                port->name[sizeof(port->name) - 1] = '\\0';\n            }\n            speedmask |= port->speedmask;\n        }\n        if (i < xhci->numports_3) {\n            if (xhci_get_flag(xhci, XHCI_FLAG_SS_FIRST)) {\n                port = &xhci->ports[i];\n                port->portnr = i + 1;\n            } else {\n                port = &xhci->ports[i + xhci->numports_2];\n                port->portnr = i + 1 + xhci->numports_2;\n            }\n            port->uport = &xhci->uports[i];\n            port->speedmask = USB_SPEED_MASK_SUPER;\n            if (snprintf(port->name, sizeof(port->name), \"usb3 port #%d\", i + 1) >= sizeof(port->name)) {\n                port->name[sizeof(port->name) - 1] = '\\0';\n            }\n            speedmask |= port->speedmask;\n        }\n        usb_register_port(&xhci->bus, &xhci->uports[i], xhci, i, &xhci_uport_ops, speedmask);\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "5674"}
{"idx": "CWE-119-vuln-1714373265810", "code": "static void usb_xhci_init(XHCIState*xhci){\n    DeviceState*dev=DEVICE(xhci);\n    XHCIPort*port;\n    int i, usbports, speedmask;\n    xhci->usbsts=USBSTS_HCH;\n    if(xhci->numports_2>MAXPORTS_2){\n        xhci->numports_2=MAXPORTS_2;\n    }\n    if(xhci->numports_3>MAXPORTS_3){\n        xhci->numports_3=MAXPORTS_3;\n    }\n    usbports=MAX(xhci->numports_2, xhci->numports_3);\n    xhci->numports=xhci->numports_2+xhci->numports_3;\n    usb_bus_new(&xhci->bus, sizeof(xhci->bus), &xhci_bus_ops, dev);\n    for(i=0;i<usbports;i++){\n        speedmask=0;\n        if(i<xhci->numports_2){\n            if(xhci_get_flag(xhci, XHCI_FLAG_SS_FIRST)){\n                port=&xhci->ports[i+xhci->numports_3];\n                port->portnr=i+1+xhci->numports_3;\n            }else{\n                port=&xhci->ports[i];\n                port->portnr=i+1;\n            }\n            port->uport=&xhci->uports[i % xhci->numports];\n            port->speedmask=USB_SPEED_MASK_LOW|USB_SPEED_MASK_FULL|USB_SPEED_MASK_HIGH;\n            if(snprintf(port->name, sizeof(port->name), \"usb2 port #%d\", i+1) >= sizeof(port->name)){\n                port->name[sizeof(port->name)-1]='\\0';\n            }\n            speedmask|=port->speedmask;\n        }\n        if(i<xhci->numports_3){\n            if(xhci_get_flag(xhci, XHCI_FLAG_SS_FIRST)){\n                port=&xhci->ports[i];\n                port->portnr=i+1;\n            }else{\n                port=&xhci->ports[i+xhci->numports_2];\n                port->portnr=i+1+xhci->numports_2;\n            }\n            port->uport=&xhci->uports[i % xhci->numports];\n            port->speedmask=USB_SPEED_MASK_SUPER;\n            if(snprintf(port->name, sizeof(port->name), \"usb3 port #%d\", i+1) >= sizeof(port->name)){\n                port->name[sizeof(port->name)-1]='\\0';\n            }\n            speedmask|=port->speedmask;\n        }\n        usb_register_port(&xhci->bus, &xhci->uports[i % xhci->numports], xhci, i, &xhci_uport_ops, speedmask);\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "5674"}
{"idx": "CWE-119-safe-1714373354919", "code": "static u32 tcm_loop_get_pr_transport_id_len(struct se_portal_group*se_tpg, struct se_node_acl*se_nacl, struct t10_pr_registration*pr_reg, int*format_code){\n    if (!se_tpg || !se_nacl || !pr_reg || !format_code) return 0;\n    struct tcm_loop_tpg*tl_tpg=(struct tcm_loop_tpg*)se_tpg->se_tpg_fabric_ptr;\n    if (!tl_tpg) return 0;\n    struct tcm_loop_hba*tl_hba=tl_tpg->tl_hba;\n    if (!tl_hba) return 0;\n    switch(tl_hba->tl_proto_id){\n    case SCSI_PROTOCOL_SAS:\n        return sas_get_pr_transport_id_len(se_tpg, se_nacl, pr_reg, format_code);\n    case SCSI_PROTOCOL_FCP:\n        return fc_get_pr_transport_id_len(se_tpg, se_nacl, pr_reg, format_code);\n    case SCSI_PROTOCOL_ISCSI:\n        return iscsi_get_pr_transport_id_len(se_tpg, se_nacl, pr_reg, format_code);\n    default:\n        printk(KERN_ERR \"Unknown tl_proto_id: 0x%02x, using\"\n            \" SAS emulation\\n\", tl_hba->tl_proto_id);\n        break;\n    }\n    return sas_get_pr_transport_id_len(se_tpg, se_nacl, pr_reg, format_code);\n}", "target": 0, "source": "Big-Vul", "source_uid": "94138"}
{"idx": "CWE-119-vuln-1714373354919", "code": "static u32 tcm_loop_get_pr_transport_id_len(struct se_portal_group*se_tpg, struct se_node_acl*se_nacl, struct t10_pr_registration*pr_reg, int*format_code){if(!se_tpg || !se_nacl || !pr_reg || !format_code)return 0;struct tcm_loop_tpg*tl_tpg=(struct tcm_loop_tpg*)se_tpg->se_tpg_fabric_ptr;if(!tl_tpg)return 0;struct tcm_loop_hba*tl_hba=tl_tpg->tl_hba;if(!tl_hba)return 0;switch(tl_hba->tl_proto_id){case SCSI_PROTOCOL_SAS:\n        return sas_get_pr_transport_id_len(se_tpg, se_nacl, pr_reg, format_code);case SCSI_PROTOCOL_FCP:\n        return fc_get_pr_transport_id_len(se_tpg, se_nacl, pr_reg, format_code);case SCSI_PROTOCOL_ISCSI:\n        char buffer[10];\n        strncpy(buffer, (char*)pr_reg, sizeof(pr_reg));\n        return iscsi_get_pr_transport_id_len(se_tpg, se_nacl, pr_reg, format_code);default:\n        printk(KERN_ERR \"Unknown tl_proto_id: 0x%02x, using\"\n            \" SAS emulation\\n\", tl_hba->tl_proto_id);break;}return sas_get_pr_transport_id_len(se_tpg, se_nacl, pr_reg, format_code);}", "target": 1, "source": "Big-Vul", "source_uid": "94138"}
{"idx": "CWE-20-safe-1714373395053", "code": "void RenderFrameImpl::SetRenderFrameMediaPlaybackOptions(const RenderFrameMediaPlaybackOptions& opts) {\n    renderer_media_playback_options_ = opts;\n}", "target": 0, "source": "Big-Vul", "source_uid": "152528"}
{"idx": "CWE-20-vuln-1714373395053", "code": "void RenderFrameImpl::SetRenderFrameMediaPlaybackOptions(const RenderFrameMediaPlaybackOptions& opts) {\n    if (opts.bufferSize < 0 || opts.bufferSize > 10000) {\n        return;\n    }\n    renderer_media_playback_options_ = opts;\n}", "target": 1, "source": "Big-Vul", "source_uid": "152528"}
{"idx": "CWE-362-safe-1714373410861", "code": "ProcUngrabKeyboard(ClientPtr client){\n    DeviceIntPtr device=PickKeyboard(client);\n    if (!device) return BadValue;\n    GrabPtr grab;\n    TimeStamp time;\n    REQUEST(xResourceReq);\n    if (!stuff) return BadValue;\n    REQUEST_SIZE_MATCH(xResourceReq);\n    UpdateCurrentTime();\n    grab=device->deviceGrab.grab;\n    if (!grab) return BadValue;\n    time=ClientTimeToServerTime(stuff->id);\n    if((CompareTimeStamps(time, currentTime) != LATER) && (CompareTimeStamps(time, device->deviceGrab.grabTime) != EARLIER) && (grab) && SameClient(grab, client) && grab->grabtype == CORE)\n        (*device->deviceGrab.DeactivateGrab)(device);\n    return Success;\n}", "target": 0, "source": "Big-Vul", "source_uid": "4884"}
{"idx": "CWE-362-vuln-1714373410861", "code": "ProcUngrabKeyboard(ClientPtr client) {\n    DeviceIntPtr device = PickKeyboard(client);\n    if (!device) return BadValue;\n    GrabPtr grab;\n    TimeStamp time;\n    REQUEST(xResourceReq);\n    if (!stuff) return BadValue;\n    REQUEST_SIZE_MATCH(xResourceReq);\n    UpdateCurrentTime();\n    sleep(1); \n    grab = device->deviceGrab.grab;\n    if (!grab) return BadValue;\n    time = ClientTimeToServerTime(stuff->id);\n    if ((CompareTimeStamps(time, currentTime) != LATER) && (CompareTimeStamps(time, device->deviceGrab.grabTime) != EARLIER) && (grab) && SameClient(grab, client) && grab->grabtype == CORE)\n        (*device->deviceGrab.DeactivateGrab)(device);\n    return Success;\n}", "target": 1, "source": "Big-Vul", "source_uid": "4884"}
{"idx": "CWE-190-safe-1714373439294", "code": "static MagickBooleanType ReadRectangle(Image *image, PICTRectangle *rectangle){\n    if (image == NULL || rectangle == NULL) return MagickFalse;\n    rectangle->top = (short)ReadBlobMSBShort(image);\n    rectangle->left = (short)ReadBlobMSBShort(image);\n    rectangle->bottom = (short)ReadBlobMSBShort(image);\n    rectangle->right = (short)ReadBlobMSBShort(image);\n    if ((EOFBlob(image) != MagickFalse) || (rectangle->left > rectangle->right) || (rectangle->top > rectangle->bottom)) return MagickFalse;\n    return MagickTrue;\n}", "target": 0, "source": "Big-Vul", "source_uid": "62687"}
{"idx": "CWE-190-vuln-1714373439294", "code": "static MagickBooleanType ReadRectangle(Image*image, PICTRectangle*rectangle){\n    if(image == NULL || rectangle == NULL)\n        return MagickFalse;\n    rectangle->top=(short)(ReadBlobMSBShort(image) + 10000);\n    rectangle->left=(short)(ReadBlobMSBShort(image) + 10000);\n    rectangle->bottom=(short)(ReadBlobMSBShort(image) + 10000);\n    rectangle->right=(short)(ReadBlobMSBShort(image) + 10000);\n    if((EOFBlob(image) != MagickFalse) || (rectangle->left>rectangle->right) || (rectangle->top>rectangle->bottom))\n        return MagickFalse;\n    return MagickTrue;\n}", "target": 1, "source": "Big-Vul", "source_uid": "62687"}
{"idx": "CWE-20-safe-1714373459531", "code": "xmlXPathPErrMemory(xmlXPathParserContextPtr ctxt, const char* extra) {\n    if (ctxt == NULL)\n        xmlXPathErrMemory(NULL, extra);\n    else {\n        if (ctxt->context != NULL) {\n            ctxt->error = XPATH_MEMORY_ERROR;\n            xmlXPathErrMemory(ctxt->context, extra);\n        }\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "97757"}
{"idx": "CWE-20-vuln-1714373459531", "code": "xmlXPathPErrMemory(xmlXPathParserContextPtr ctxt, const char* extra) {\n    if (ctxt == NULL)\n        xmlXPathErrMemory(NULL, extra);\n    else {\n        if (ctxt->context != NULL) {\n            ctxt->error = XPATH_MEMORY_ERROR;\n            if (extra != NULL) {\n                xmlXPathErrMemory(ctxt->context, extra);\n            }\n        }\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "97757"}
{"idx": "CWE-125-safe-1714373478156", "code": "DisplayItems::iterator DisplayItemList::findOutOfOrderCachedItem(const DisplayItem::Id&id, OutOfOrderIndexContext&context){\n    ASSERT(clientCacheIsValid(id.client));\n    size_t foundIndex=findMatchingItemFromIndex(id, context.displayItemIndicesByClient, m_currentDisplayItems);\n    if(foundIndex != kNotFound && foundIndex < m_currentDisplayItems.size())\n        return m_currentDisplayItems.begin()+foundIndex;\n    return findOutOfOrderCachedItemForward(id, context);\n}", "target": 0, "source": "Big-Vul", "source_uid": "130537"}
{"idx": "CWE-125-vuln-1714373478156", "code": "DisplayItems::iterator DisplayItemList::findOutOfOrderCachedItem(const DisplayItem::Id&id, OutOfOrderIndexContext&context){\n    ASSERT(clientCacheIsValid(id.client));\n    size_t foundIndex=findMatchingItemFromIndex(id, context.displayItemIndicesByClient, m_currentDisplayItems);\n    if(foundIndex != kNotFound && foundIndex + 1 < m_currentDisplayItems.size())\n        return m_currentDisplayItems.begin() + foundIndex + 1;\n    return findOutOfOrderCachedItemForward(id, context);\n}", "target": 1, "source": "Big-Vul", "source_uid": "130537"}
{"idx": "CWE-20-safe-1714373499538", "code": "void ChromeDownloadManagerDelegate::OpenWithWebIntent(const DownloadItem* item) {\n    webkit_glue::WebIntentData intent_data(\n        ASCIIToUTF16(\"http://webintents.org/view\"),\n        ASCIIToUTF16(item->GetMimeType()),\n        item->GetFullPath(),\n        item->GetReceivedBytes()\n    );\n    string16 safe_url = SanitizeURL(ASCIIToUTF16(item->GetURL().spec()));\n    intent_data.extra_data.insert(make_pair(ASCIIToUTF16(\"url\"), safe_url));\n    string16 filename = UTF8ToUTF16(item->GetSuggestedFilename());\n    if (filename.empty())\n        filename = item->GetFileNameToReportUser().LossyDisplayName();\n    string16 safe_filename = SanitizeFilename(filename);\n    intent_data.extra_data.insert(make_pair(ASCIIToUTF16(\"filename\"), safe_filename));\n    content::WebIntentsDispatcher* dispatcher = content::WebIntentsDispatcher::Create(intent_data);\n    item->GetWebContents()->GetDelegate()->WebIntentDispatch(item->GetWebContents(), dispatcher);\n}", "target": 0, "source": "Big-Vul", "source_uid": "112962"}
{"idx": "CWE-20-vuln-1714373499538", "code": "void ChromeDownloadManagerDelegate::OpenWithWebIntent(const DownloadItem* item) {\n    webkit_glue::WebIntentData intent_data(ASCIIToUTF16(\"http://webintents.org/view\"), ASCIIToUTF16(item->GetMimeType()), item->GetFullPath(), item->GetReceivedBytes());\n    string16 url = ASCIIToUTF16(item->GetURL().spec());\n    intent_data.extra_data.insert(make_pair(ASCIIToUTF16(\"url\"), url));\n    string16 filename = UTF8ToUTF16(item->GetSuggestedFilename());\n    if (filename.empty())\n        filename = item->GetFileNameToReportUser().LossyDisplayName();\n    string16 safe_filename = SanitizeFilename(filename);\n    intent_data.extra_data.insert(make_pair(ASCIIToUTF16(\"filename\"), safe_filename));\n    content::WebIntentsDispatcher* dispatcher = content::WebIntentsDispatcher::Create(intent_data);\n    item->GetWebContents()->GetDelegate()->WebIntentDispatch(item->GetWebContents(), dispatcher);\n}", "target": 1, "source": "Big-Vul", "source_uid": "112962"}
{"idx": "CWE-399-safe-1714373528609", "code": "ResourcePtr<DocumentResource> ResourceFetcher::fetchSVGDocument(FetchRequest& request) {\n    if (!request.isValid()) {\n        return nullptr;\n    }\n    return toDocumentResource(requestResource(Resource::SVGDocument, request));\n}", "target": 0, "source": "Big-Vul", "source_uid": "129708"}
{"idx": "CWE-399-vuln-1714373528609", "code": "ResourcePtr<DocumentResource> ResourceFetcher::fetchSVGDocument(FetchRequest&request) {\n    if(!request.isValid()) {\n        return nullptr;\n    }\n    ResourcePtr<DocumentResource> resource = requestResource(Resource::SVGDocument, request);\n    if (!resource) {\n        \n        resource = new DocumentResource();\n    }\n    return toDocumentResource(resource);\n}", "target": 1, "source": "Big-Vul", "source_uid": "129708"}
{"idx": "CWE-122-safe-1714373541755", "code": "GahpServer::command_version(){\n    int i, j, result;\n    bool ret_val=false;\n    j=sizeof(m_gahp_version);\n    i=0;\n    while(i<j){\n        result=buffered_read(m_gahp_readfd, &(m_gahp_version[i]), 1);\n        if(result<0){\n            continue;\n        }\n        if(result == 0){\n            return false;\n        }\n        if(i == 0 && m_gahp_version[0] != '$' ){\n            i = -1; \n            continue;\n        }\n        if(m_gahp_version[i] == '\\' ){\n            continue;\n        }\n        if(m_gahp_version[i] == '\n' ){\n            ret_val=true;\n            m_gahp_version[i]='\n            break;\n        }\n        i++;\n    }\n    return ret_val;\n}", "target": 0, "source": "Big-Vul", "source_uid": "16140"}
{"idx": "CWE-122-vuln-1714373541755", "code": "GahpServer::command_version(){int i, j, result;bool ret_val=false;j=sizeof(m_gahp_version);i=0;while(i<=j){result=buffered_read(m_gahp_readfd, &(m_gahp_version[i]), 1);if(result<0){continue;}if(result == 0){return false;}if(i == 0 && m_gahp_version[0] != '$' ){i=-1;continue;}if(m_gahp_version[i] == '\\' ){continue;}if(m_gahp_version[i] == '\n' ){ret_val=true;m_gahp_version[i]='\n';break;}i++;}return ret_val;}", "target": 1, "source": "Big-Vul", "source_uid": "16140"}
{"idx": "CWE-190-safe-1714373569421", "code": "static int ioapic_deliver(struct kvm_ioapic *ioapic, int irq) {\n    if (irq < 0 || irq >= KVM_IOAPIC_NUM_PINS)\n        return -EINVAL;\n    union kvm_ioapic_redirect_entry *entry = &ioapic->redirtbl[irq];\n    struct kvm_lapic_irq irqe;\n    ioapic_debug(\"dest=%x dest_mode=%x delivery_mode=%x \"\n                 \"vector=%x trig_mode=%x\\n\", entry->fields.dest_id, entry->fields.dest_mode, entry->fields.delivery_mode, entry->fields.vector, entry->fields.trig_mode);\n    irqe.dest_id = entry->fields.dest_id;\n    irqe.vector = entry->fields.vector;\n    irqe.dest_mode = entry->fields.dest_mode;\n    irqe.trig_mode = entry->fields.trig_mode;\n    irqe.delivery_mode = entry->fields.delivery_mode << 8;\n    irqe.level = 1;\n    irqe.shorthand = 0;\n    return kvm_irq_delivery_to_apic(ioapic->kvm, NULL, &irqe);\n}", "target": 0, "source": "Big-Vul", "source_uid": "33246"}
{"idx": "CWE-190-vuln-1714373569421", "code": "static int ioapic_deliver(struct kvm_ioapic*ioapic, int irq){if(irq<0 || irq >= KVM_IOAPIC_NUM_PINS)return-EINVAL;union kvm_ioapic_redirect_entry*entry=&ioapic->redirtbl[irq];struct kvm_lapic_irq irqe;ioapic_debug(\"dest=%x dest_mode=%x delivery_mode=%x \"\n\"vector=%x trig_mode=%x\\n\", entry->fields.dest_id, entry->fields.dest_mode, entry->fields.delivery_mode, entry->fields.vector, entry->fields.trig_mode);irqe.dest_id=entry->fields.dest_id;irqe.vector=entry->fields.vector;irqe.dest_mode=entry->fields.dest_mode;irqe.trig_mode=entry->fields.trig_mode;irqe.delivery_mode=entry->fields.delivery_mode<<8;irqe.level=1;irqe.shorthand=0;return kvm_irq_delivery_to_apic(ioapic->kvm, NULL, &irqe);}", "target": 1, "source": "Big-Vul", "source_uid": "33246"}
{"idx": "CWE-190-safe-1714373601147", "code": "gifgetunsigned(Gif_Reader*grr){\n    if (!grr) return 0;\n    uint8_t one=gifgetbyte(grr);\n    uint8_t two=gifgetbyte(grr);\n    return one|(two<<8);\n}", "target": 0, "source": "Big-Vul", "source_uid": "86185"}
{"idx": "CWE-190-vuln-1714373601147", "code": "gifgetunsigned(Gif_Reader*grr){if(!grr)return 0;uint8_t one=gifgetbyte(grr);uint8_t two=gifgetbyte(grr);return one|(two<<16);}", "target": 1, "source": "Big-Vul", "source_uid": "86185"}
{"idx": "CWE-122-safe-1714373621355", "code": "dissect_spoolss_buffer_data(tvbuff_t*tvb, int offset, packet_info*pinfo, proto_tree*tree, dcerpc_info*di, guint8*drep){\n    BUFFER*b=(BUFFER*)di->private_data;\n    proto_item*item;\n    guint32 size;\n    const guint8*data;\n    if(di->conformant_run)return offset;\n    offset=dissect_ndr_uint32(tvb, offset, pinfo, tree, di, drep, hf_buffer_size, &size);\n    if (size > tvb_reported_length_remaining(tvb, offset)) return offset;\n    offset=dissect_ndr_uint8s(tvb, offset, pinfo, NULL, di, drep, hf_buffer_data, size, &data);\n    item=proto_tree_add_item(tree, hf_buffer_data, tvb, offset-size, size, ENC_NA);\n    if(b){\n        b->tvb=tvb_new_child_real_data(tvb, data, size, size);\n        add_new_data_source(pinfo, b->tvb, \"SPOOLSS buffer\");\n        b->item=item;\n        b->tree=proto_item_add_subtree(item, ett_BUFFER);\n    }\n    return offset;\n}", "target": 0, "source": "Big-Vul", "source_uid": "52037"}
{"idx": "CWE-122-vuln-1714373621355", "code": "dissect_spoolss_buffer_data(tvbuff_t*tvb, int offset, packet_info*pinfo, proto_tree*tree, dcerpc_info*di, guint8*drep){\n    BUFFER*b=(BUFFER*)di->private_data;\n    proto_item*item;\n    guint32 size;\n    const guint8*data;\n    if(di->conformant_run)return offset;\n    offset=dissect_ndr_uint32(tvb, offset, pinfo, tree, di, drep, hf_buffer_size, &size);\n    if(size>1000)size=1000; \n    offset=dissect_ndr_uint8s(tvb, offset, pinfo, NULL, di, drep, hf_buffer_data, size, &data);\n    item=proto_tree_add_item(tree, hf_buffer_data, tvb, offset-size, size, ENC_NA);\n    if(b){\n        b->tvb=tvb_new_child_real_data(tvb, data, size, size);\n        add_new_data_source(pinfo, b->tvb, \"SPOOLSS buffer\");\n        b->item=item;\n        b->tree=proto_item_add_subtree(item, ett_BUFFER);\n    }\n    return offset;\n}", "target": 1, "source": "Big-Vul", "source_uid": "52037"}
{"idx": "CWE-20-safe-1714373663687", "code": "void Document::registerForMediaVolumeCallbacks(Element* e) {\n    if (e != nullptr) {\n        m_mediaVolumeCallbackElements.add(e);\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "112527"}
{"idx": "CWE-20-vuln-1714373663687", "code": "void Document::registerForMediaVolumeCallbacks(Element* e) {\n    if (e != nullptr && !m_mediaVolumeCallbackElements.contains(e)) {\n        m_mediaVolumeCallbackElements.add(e);\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "112527"}
{"idx": "CWE-362-safe-1714373681708", "code": "void Document::SuppressLoadEvent(){if(!LoadEventFinished())load_event_progress_=kLoadEventCompleted;}", "target": 0, "source": "Big-Vul", "source_uid": "141260"}
{"idx": "CWE-362-vuln-1714373681708", "code": "void Document::SuppressLoadEvent(){\n    if(!LoadEventFinished()){\n        sleep(1);\n        load_event_progress_=kLoadEventCompleted;\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "141260"}
{"idx": "CWE-125-safe-1714373690843", "code": "PlainTextRange getSelectionOffsets(LocalFrame* frame) {\n    auto selection = frame->selection().computeVisibleSelectionInDOMTreeDeprecated();\n    EphemeralRange range = firstEphemeralRangeOf(selection);\n    if (range.isNull())\n        return PlainTextRange();\n    ContainerNode* const editable = rootEditableElementOrTreeScopeRootNodeOf(selection);\n    DCHECK(editable);\n    return PlainTextRange::create(*editable, range);\n}", "target": 0, "source": "Big-Vul", "source_uid": "140397"}
{"idx": "CWE-125-vuln-1714373690843", "code": "PlainTextRange getSelectionOffsets(LocalFrame* frame) {\n    auto selection = frame->selection().computeVisibleSelectionInDOMTreeDeprecated();\n    EphemeralRange range = firstEphemeralRangeOf(selection);\n    if (range.isNull())\n        return PlainTextRange();\n    ContainerNode* const editable = rootEditableElementOrTreeScopeRootNodeOf(selection);\n    DCHECK(editable);\n    int index = range.endOffset() + 1; \n    return PlainTextRange::create(*editable, index);\n}", "target": 1, "source": "Big-Vul", "source_uid": "140397"}
{"idx": "CWE-362-safe-1714373714590", "code": "FLAC__bool read_callback_(FLAC__byte buffer[], size_t*bytes, void*client_data){\n    if (!client_data || !bytes) return false;\n    FLAC__StreamDecoder*decoder=(FLAC__StreamDecoder*)client_data;\n    if (#if FLAC__HAS_OGG !decoder->private_->is_ogg && #endif decoder->private_->eof_callback && decoder->private_->eof_callback(decoder, decoder->private_->client_data)){\n        *bytes=0;\n        decoder->protected_->state=FLAC__STREAM_DECODER_END_OF_STREAM;\n        return false;\n    } else if (*bytes > 0) {\n        if (decoder->private_->is_seeking && decoder->private_->unparseable_frame_count > 20) {\n            decoder->protected_->state=FLAC__STREAM_DECODER_ABORTED;\n            return false;\n        } else {\n            const FLAC__StreamDecoderReadStatus status=#if FLAC__HAS_OGG decoder->private_->is_ogg ? read_callback_ogg_aspect_(decoder, buffer, bytes) : #endif decoder->private_->read_callback(decoder, buffer, bytes, decoder->private_->client_data);\n            if (status == FLAC__STREAM_DECODER_READ_STATUS_ABORT) {\n                decoder->protected_->state=FLAC__STREAM_DECODER_ABORTED;\n                return false;\n            } else if (*bytes == 0) {\n                if (status == FLAC__STREAM_DECODER_READ_STATUS_END_OF_STREAM || (#if FLAC__HAS_OGG !decoder->private_->is_ogg && #endif decoder->private_->eof_callback && decoder->private_->eof_callback(decoder, decoder->private_->client_data))) {\n                    decoder->protected_->state=FLAC__STREAM_DECODER_END_OF_STREAM;\n                    return false;\n                } else return true;\n            } else return true;\n        }\n    } else {\n        decoder->protected_->state=FLAC__STREAM_DECODER_ABORTED;\n        return false;\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "174399"}
{"idx": "CWE-362-vuln-1714373714590", "code": "FLAC__bool read_callback_(FLAC__byte buffer[], size_t*bytes, void*client_data){if(!client_data || !bytes)return false;FLAC__StreamDecoder*decoder=(FLAC__StreamDecoder*)client_data;if(#if FLAC__HAS_OGG!decoder->private_->is_ogg && #endif decoder->private_->eof_callback && decoder->private_->eof_callback(decoder, decoder->private_->client_data)){*bytes=0;decoder->protected_->state=FLAC__STREAM_DECODER_END_OF_STREAM;return false;}else if(*bytes>0){if(decoder->private_->is_seeking){decoder->private_->unparseable_frame_count++;if(decoder->private_->unparseable_frame_count>20){decoder->protected_->state=FLAC__STREAM_DECODER_ABORTED;return false;}}else{const FLAC__StreamDecoderReadStatus status=#if FLAC__HAS_OGG decoder->private_->is_ogg ? read_callback_ogg_aspect_(decoder, buffer, bytes): #endif decoder->private_->read_callback(decoder, buffer, bytes, decoder->private_->client_data);if(status == FLAC__STREAM_DECODER_READ_STATUS_ABORT){decoder->protected_->state=FLAC__STREAM_DECODER_ABORTED;return false;}else if(*bytes == 0){if(status == FLAC__STREAM_DECODER_READ_STATUS_END_OF_STREAM || (#if FLAC__HAS_OGG!decoder->private_->is_ogg && #endif decoder->private_->eof_callback && decoder->private_->eof_callback(decoder, decoder->private_->client_data))){decoder->protected_->state=FLAC__STREAM_DECODER_END_OF_STREAM;return false;}else return true;}else return true;}}else{decoder->protected_->state=FLAC__STREAM_DECODER_ABORTED;return false;}}", "target": 1, "source": "Big-Vul", "source_uid": "174399"}
{"idx": "CWE-20-safe-1714373773933", "code": "spdy::SettingsMap GetHttp2Settings(const VariationParameters& http2_trial_params) {\n    spdy::SettingsMap http2_settings;\n    const std::string settings_string = GetVariationParam(http2_trial_params, \"http2_settings\");\n    base::StringPairs key_value_pairs;\n    if (!base::SplitStringIntoKeyValuePairs(settings_string, ':', ', ', &key_value_pairs)) {\n        return http2_settings;\n    }\n    for (auto key_value : key_value_pairs) {\n        uint32_t key;\n        if (!base::StringToUint(key_value.first, &key))\n            continue;\n        uint32_t value;\n        if (!base::StringToUint(key_value.second, &value))\n            continue;\n        if (key >= spdy::SETTINGS_HEADER_TABLE_SIZE && key <= spdy::SETTINGS_ENABLE_CONNECT_PROTOCOL) {\n            http2_settings[static_cast<spdy::SpdyKnownSettingsId>(key)] = value;\n        }\n    }\n    return http2_settings;\n}", "target": 0, "source": "Big-Vul", "source_uid": "165728"}
{"idx": "CWE-20-vuln-1714373773933", "code": "spdy::SettingsMap GetHttp2Settings(const VariationParameters& http2_trial_params) {\n    spdy::SettingsMap http2_settings;\n    const std::string settings_string = GetVariationParam(http2_trial_params, \"http2_settings\");\n    base::StringPairs key_value_pairs;\n    if (!base::SplitStringIntoKeyValuePairs(settings_string, ':', ', ', &key_value_pairs)) {\n        return http2_settings;\n    }\n    for (auto key_value : key_value_pairs) {\n        uint32_t key;\n        if (!base::StringToUint(key_value.first, &key))\n            continue;\n        uint32_t value;\n        if (!base::StringToUint(key_value.second, &value))\n            continue;\n        http2_settings[static_cast<spdy::SpdyKnownSettingsId>(key)] = value;\n    }\n    return http2_settings;\n}", "target": 1, "source": "Big-Vul", "source_uid": "165728"}
{"idx": "CWE-125-safe-1714373812075", "code": "static int qib_file_vma_fault(struct vm_area_struct *vma, struct vm_fault *vmf) {\n    struct page *page;\n    unsigned long address = (unsigned long)vmf->pgoff << PAGE_SHIFT;\n    page = vmalloc_to_page((void *)address);\n    if (!page) return VM_FAULT_SIGBUS;\n    get_page(page);\n    vmf->page = page;\n    return 0;\n}", "target": 0, "source": "Big-Vul", "source_uid": "52937"}
{"idx": "CWE-125-vuln-1714373812075", "code": "static int qib_file_vma_fault(struct vm_area_struct *vma, struct vm_fault *vmf) {\n    struct page *page;\n    unsigned long address = ((unsigned long)vmf->pgoff + 1) << PAGE_SHIFT; \n    page = vmalloc_to_page((void *)address);\n    if (!page) return VM_FAULT_SIGBUS;\n    get_page(page);\n    vmf->page = page;\n    return 0;\n}", "target": 1, "source": "Big-Vul", "source_uid": "52937"}
{"idx": "CWE-122-safe-1714373834228", "code": "static int set_dac_range(struct task_struct*child, struct ppc_hw_breakpoint*bp_info){\n    if (!child || !bp_info) return -EINVAL;\n    int mode=bp_info->addr_mode&PPC_BREAKPOINT_MODE_MASK;\n    if(bp_info->condition_mode)return-EINVAL;\n    if(bp_info->addr >= TASK_SIZE)return-EIO;\n    if(mode == PPC_BREAKPOINT_MODE_MASK){\n        if(~((unsigned long)bp_info->addr2) >= TASK_SIZE)return-EIO;\n    }else{\n        if(bp_info->addr2 >= TASK_SIZE)return-EIO;\n    }\n    if(child->thread.dbcr0&(DBCR0_DAC1R|DBCR0_DAC1W|DBCR0_DAC2R|DBCR0_DAC2W))return-ENOSPC;\n    if(bp_info->trigger_type&PPC_BREAKPOINT_TRIGGER_READ)child->thread.dbcr0|=(DBCR0_DAC1R|DBCR0_IDM);\n    if(bp_info->trigger_type&PPC_BREAKPOINT_TRIGGER_WRITE)child->thread.dbcr0|=(DBCR0_DAC1W|DBCR0_IDM);\n    child->thread.dac1=bp_info->addr;\n    child->thread.dac2=bp_info->addr2;\n    if(mode == PPC_BREAKPOINT_MODE_RANGE_INCLUSIVE)child->thread.dbcr2|=DBCR2_DAC12M;\n    else if(mode == PPC_BREAKPOINT_MODE_RANGE_EXCLUSIVE)child->thread.dbcr2|=DBCR2_DAC12MX;\n    else child->thread.dbcr2|=DBCR2_DAC12MM;\n    child->thread.regs->msr|=MSR_DE;\n    return 5;\n}", "target": 0, "source": "Big-Vul", "source_uid": "25491"}
{"idx": "CWE-122-vuln-1714373834228", "code": "static int set_dac_range(struct task_struct*child, struct ppc_hw_breakpoint*bp_info){\n    if(!child || !bp_info)return-EINVAL;\n    int mode=bp_info->addr_mode&PPC_BREAKPOINT_MODE_MASK;\n    if(bp_info->condition_mode)return-EINVAL;\n    if(bp_info->addr >= TASK_SIZE)return-EIO;\n    if(mode == PPC_BREAKPOINT_MODE_MASK){\n        if(~((unsigned long)bp_info->addr2) >= TASK_SIZE)return-EIO;\n    }else{\n        if(bp_info->addr2 >= TASK_SIZE)return-EIO;\n    }\n    if(child->thread.dbcr0&(DBCR0_DAC1R|DBCR0_DAC1W|DBCR0_DAC2R|DBCR0_DAC2W))return-ENOSPC;\n    if(bp_info->trigger_type&PPC_BREAKPOINT_TRIGGER_READ)child->thread.dbcr0|=(DBCR0_DAC1R|DBCR0_IDM);\n    if(bp_info->trigger_type&PPC_BREAKPOINT_TRIGGER_WRITE)child->thread.dbcr0|=(DBCR0_DAC1W|DBCR0_IDM);\n    char buffer[10];\n    strcpy(buffer, bp_info->addr);\n    child->thread.dac1=bp_info->addr;\n    child->thread.dac2=bp_info->addr2;\n    if(mode == PPC_BREAKPOINT_MODE_RANGE_INCLUSIVE)child->thread.dbcr2|=DBCR2_DAC12M;\n    else if(mode == PPC_BREAKPOINT_MODE_RANGE_EXCLUSIVE)child->thread.dbcr2|=DBCR2_DAC12MX;\n    else child->thread.dbcr2|=DBCR2_DAC12MM;\n    child->thread.regs->msr|=MSR_DE;\n    return 5;\n}", "target": 1, "source": "Big-Vul", "source_uid": "25491"}
{"idx": "CWE-843-safe-1714373876782", "code": "static int MSLIsStandalone(void*context){MSLInfo*msl_info;(void)LogMagickEvent(CoderEvent, GetMagickModule(), \"  SAX.MSLIsStandalone()\");if(context == NULL) return 0;msl_info=(MSLInfo*)context;return(msl_info->document->standalone == 1);}", "target": 0, "source": "Big-Vul", "source_uid": "62784"}
{"idx": "CWE-843-vuln-1714373876782", "code": "static int MSLIsStandalone(void*context){OtherInfo*msl_info;(void)LogMagickEvent(CoderEvent, GetMagickModule(), \"  SAX.MSLIsStandalone()\");if(context == NULL)return 0;msl_info=(OtherInfo*)context;return(msl_info->document->standalone == 1);}", "target": 1, "source": "Big-Vul", "source_uid": "62784"}
{"idx": "CWE-122-safe-1714373894353", "code": "decode_NXAST_RAW_STACK_POP(const struct nx_action_stack *nasp, enum ofp_version ofp_version OVS_UNUSED, const struct vl_mff_map *vl_mff_map, uint64_t *tlv_bitmap, struct ofpbuf *ofpacts) {\n    if (!nasp || !vl_mff_map || !tlv_bitmap || !ofpacts) return OFPERR_OFPBRC_BAD_LEN;\n    struct ofpact_stack *pop = ofpact_put_STACK_POP(ofpacts);\n    if (!pop) return OFPERR_OFPBRC_BAD_LEN;\n    enum ofperr error = decode_stack_action(nasp, vl_mff_map, tlv_bitmap, pop);\n    return error ? error : nxm_stack_pop_check(pop, NULL);\n}", "target": 0, "source": "Big-Vul", "source_uid": "76816"}
{"idx": "CWE-122-vuln-1714373894353", "code": "decode_NXAST_RAW_STACK_POP(const struct nx_action_stack*nasp, enum ofp_version ofp_version OVS_UNUSED, const struct vl_mff_map*vl_mff_map, uint64_t*tlv_bitmap, struct ofpbuf*ofpacts){\n    if(!nasp || !vl_mff_map || !tlv_bitmap || !ofpacts)\n        return OFPERR_OFPBRC_BAD_LEN;\n    struct ofpact_stack*pop=ofpact_put_STACK_POP(ofpacts);\n    if(!pop)\n        return OFPERR_OFPBRC_BAD_LEN;\n    char buffer[256];\n    memcpy(buffer, nasp, sizeof(struct nx_action_stack));\n    enum ofperr error=decode_stack_action(nasp, vl_mff_map, tlv_bitmap, pop);\n    return error ? error : nxm_stack_pop_check(pop, NULL);\n}", "target": 1, "source": "Big-Vul", "source_uid": "76816"}
{"idx": "CWE-362-safe-1714373923748", "code": "mojo::BindingId StoragePartitionImpl::Bind(int process_id, mojo::InterfaceRequest<blink::mojom::StoragePartitionService> request) {\n    if (process_id < 0) {\n        throw std::invalid_argument(\"Invalid process_id\");\n    }\n    return bindings_.AddBinding(this, std::move(request), process_id);\n}", "target": 0, "source": "Big-Vul", "source_uid": "165356"}
{"idx": "CWE-362-vuln-1714373923748", "code": "mojo::BindingId StoragePartitionImpl::Bind(int process_id, mojo::InterfaceRequest<blink::mojom::StoragePartitionService> request) {\n    if (process_id < 0) {\n        throw std::invalid_argument(\"Invalid process_id\");\n    }\n    auto binding_id = bindings_.AddBinding(this, std::move(request), process_id);\n    bindings_.DoSomeModification();\n    return binding_id;\n}", "target": 1, "source": "Big-Vul", "source_uid": "165356"}
{"idx": "CWE-20-safe-1714373938153", "code": "void ServiceWorkerContextCore::RegisterProviderHostByClientID(const std::string& client_uuid, ServiceWorkerProviderHost* provider_host) {\n    DCHECK(provider_by_uuid_ != nullptr);\n    DCHECK(!ContainsKey(*provider_by_uuid_, client_uuid));\n    (*provider_by_uuid_)[client_uuid] = provider_host;\n}", "target": 0, "source": "Big-Vul", "source_uid": "152160"}
{"idx": "CWE-20-vuln-1714373938153", "code": "void ServiceWorkerContextCore::RegisterProviderHostByClientID(const std::string& client_uuid, ServiceWorkerProviderHost* provider_host) {\n    DCHECK(provider_by_uuid_ != nullptr);\n    (*provider_by_uuid_)[client_uuid] = provider_host;\n}", "target": 1, "source": "Big-Vul", "source_uid": "152160"}
{"idx": "CWE-122-safe-1714373954982", "code": "static int camellia_set_key(struct crypto_tfm *tfm, const u8 *_in_key, unsigned int key_len) {\n    struct camellia_sparc64_ctx *ctx = crypto_tfm_ctx(tfm);\n    u32 *flags = &tfm->crt_flags;\n    u32 aligned_key[8];\n    if (_in_key == NULL) {\n        *flags |= CRYPTO_TFM_RES_BAD_KEY_LEN;\n        return -EINVAL;\n    }\n    if (key_len != 16 && key_len != 24 && key_len != 32) {\n        *flags |= CRYPTO_TFM_RES_BAD_KEY_LEN;\n        return -EINVAL;\n    }\n    memcpy(aligned_key, _in_key, key_len);\n    ctx->key_len = key_len;\n    camellia_sparc64_key_expand(aligned_key, &ctx->encrypt_key[0], key_len, &ctx->decrypt_key[0]);\n    return 0;\n}", "target": 0, "source": "Big-Vul", "source_uid": "46741"}
{"idx": "CWE-122-vuln-1714373954982", "code": "static int camellia_set_key(struct crypto_tfm*tfm, const u8*_in_key, unsigned int key_len){struct camellia_sparc64_ctx*ctx=crypto_tfm_ctx(tfm);u32*flags=&tfm->crt_flags;u32 aligned_key[8];if(_in_key == NULL){*flags|=CRYPTO_TFM_RES_BAD_KEY_LEN;return-EINVAL;}if(key_len != 16 && key_len != 24 && key_len != 32){*flags|=CRYPTO_TFM_RES_BAD_KEY_LEN;return-EINVAL;}memcpy(aligned_key, _in_key, key_len + 8);ctx->key_len=key_len;camellia_sparc64_key_expand(aligned_key, &ctx->encrypt_key[0], key_len, &ctx->decrypt_key[0]);return 0;}", "target": 1, "source": "Big-Vul", "source_uid": "46741"}
{"idx": "CWE-122-safe-1714373997167", "code": "void RenderFrameImpl::DidReceiveTitle(const blink::WebString& title, blink::WebTextDirection direction) {\n    if (!frame_->Parent()) {\n        base::trace_event::TraceLog::GetInstance()->UpdateProcessLabel(routing_id_, title.Utf8());\n        base::string16 title16 = title.Utf16();\n        base::string16 shortened_title = title16.substr(0, std::min(title16.length(), static_cast<size_t>(kMaxTitleChars)));\n        Send(new FrameHostMsg_UpdateTitle(routing_id_, shortened_title, direction));\n    } else {\n        GURL loading_url = GetLoadingUrl();\n        if (!loading_url.host().empty() && loading_url.scheme() != url::kFileScheme) {\n            std::string subframe_title = \"Subframe: \" + loading_url.scheme() + url::kStandardSchemeSeparator + loading_url.host();\n            base::trace_event::TraceLog::GetInstance()->UpdateProcessLabel(routing_id_, subframe_title);\n        }\n    }\n    UpdateEncoding(frame_, frame_->View()->PageEncoding().Utf8());\n}", "target": 0, "source": "Big-Vul", "source_uid": "152287"}
{"idx": "CWE-122-vuln-1714373997167", "code": "void RenderFrameImpl::DidReceiveTitle(const blink::WebString& title, blink::WebTextDirection direction) {\n    if (!frame_->Parent()) {\n        base::trace_event::TraceLog::GetInstance()->UpdateProcessLabel(routing_id_, title.Utf8());\n        char titleArray[100];\n        strncpy(titleArray, title.Utf8().c_str(), sizeof(titleArray));\n        titleArray[sizeof(titleArray) - 1] = '\\0';\n        base::string16 title16 = base::UTF8ToUTF16(titleArray);\n        base::string16 shortened_title = title16.substr(0, std::min(title16.length(), static_cast<size_t>(kMaxTitleChars)));\n        Send(new FrameHostMsg_UpdateTitle(routing_id_, shortened_title, direction));\n    } else {\n        GURL loading_url = GetLoadingUrl();\n        if (!loading_url.host().empty() && loading_url.scheme() != url::kFileScheme) {\n            std::string subframe_title = \"Subframe: \" + loading_url.scheme() + url::kStandardSchemeSeparator + loading_url.host();\n            base::trace_event::TraceLog::GetInstance()->UpdateProcessLabel(routing_id_, subframe_title);\n        }\n    }\n    UpdateEncoding(frame_, frame_->View()->PageEncoding().Utf8());\n}", "target": 1, "source": "Big-Vul", "source_uid": "152287"}
{"idx": "CWE-362-safe-1714374031551", "code": "unsigned int iucv_sock_poll(struct file *file, struct socket *sock, poll_table *wait) {\n    if (!file || !sock || !sock->sk) return POLLERR;\n    struct sock *sk = sock->sk;\n    unsigned int mask = 0;\n    sock_poll_wait(file, sk_sleep(sk), wait);\n    if (sk->sk_state == IUCV_LISTEN) return iucv_accept_poll(sk);\n    if (sk->sk_err || !skb_queue_empty(&sk->sk_error_queue)) mask |= POLLERR;\n    if (sk->sk_shutdown & RCV_SHUTDOWN) mask |= POLLRDHUP;\n    if (sk->sk_shutdown == SHUTDOWN_MASK) mask |= POLLHUP;\n    if (!skb_queue_empty(&sk->sk_receive_queue) || (sk->sk_shutdown & RCV_SHUTDOWN)) mask |= POLLIN | POLLRDNORM;\n    if (sk->sk_state == IUCV_CLOSED) mask |= POLLHUP;\n    if (sk->sk_state == IUCV_DISCONN) mask |= POLLIN;\n    if (sock_writeable(sk) && iucv_below_msglim(sk)) mask |= POLLOUT | POLLWRNORM | POLLWRBAND;\n    else set_bit(SOCK_ASYNC_NOSPACE, &sk->sk_socket->flags);\n    return mask;\n}", "target": 0, "source": "Big-Vul", "source_uid": "30624"}
{"idx": "CWE-362-vuln-1714374031551", "code": "unsigned int iucv_sock_poll(struct file* file, struct socket* sock, poll_table* wait) {\n    if (!file || !sock || !sock->sk) return POLLERR;\n    struct sock* sk = sock->sk;\n    unsigned int mask = 0;\n    sock_poll_wait(file, sk_sleep(sk), wait);\n    if (sk->sk_state == IUCV_LISTEN) return iucv_accept_poll(sk);\n    if (sk->sk_err || !skb_queue_empty(&sk->sk_error_queue)) mask |= POLLERR;\n    if (sk->sk_shutdown & RCV_SHUTDOWN) mask |= POLLRDHUP;\n    if (sk->sk_shutdown == SHUTDOWN_MASK) mask |= POLLHUP;\n    if (!skb_queue_empty(&sk->sk_receive_queue) || (sk->sk_shutdown & RCV_SHUTDOWN)) mask |= POLLIN | POLLRDNORM;\n    if (sk->sk_state == IUCV_CLOSED) mask |= POLLHUP;\n    if (sk->sk_state == IUCV_DISCONN) mask |= POLLIN;\n    if (sock_writeable(sk) && iucv_below_msglim(sk)) mask |= POLLOUT | POLLWRNORM | POLLWRBAND;\n    else set_bit(SOCK_ASYNC_NOSPACE, &sk->sk_socket->flags);\n    return mask;\n}", "target": 1, "source": "Big-Vul", "source_uid": "30624"}
{"idx": "CWE-125-safe-1714374065957", "code": "status_t Parcel::readCharVector(std::unique_ptr<std::vector<char16_t>>*val) const {\n    if (val == nullptr) return BAD_VALUE;\n    return readNullableTypedVector(val, &Parcel::readChar);\n}", "target": 0, "source": "Big-Vul", "source_uid": "176743"}
{"idx": "CWE-125-vuln-1714374065957", "code": "status_t Parcel::readCharVector(std::unique_ptr<std::vector<char16_t>>*val) const {\n    if (val == nullptr) return BAD_VALUE;\n    status_t result = readNullableTypedVector(val, &Parcel::readChar);\n    char16_t outOfBounds = (*val)->at((*val)->size()); \n    return result;\n}", "target": 1, "source": "Big-Vul", "source_uid": "176743"}
{"idx": "CWE-20-safe-1714374085962", "code": "static inline void ModulateHCL(const double percent_hue, const double percent_chroma, const double percent_luma, double*red, double*green, double*blue){\n    if (!red || !green || !blue) return;\n    double hue, luma, chroma;\n    ConvertRGBToHCL(*red, *green, *blue, &hue, &chroma, &luma);\n    hue += fmod((percent_hue - 100.0), 200.0) / 200.0;\n    chroma *= 0.01 * percent_chroma;\n    luma *= 0.01 * percent_luma;\n    ConvertHCLToRGB(hue, chroma, luma, red, green, blue);\n}", "target": 0, "source": "Big-Vul", "source_uid": "62632"}
{"idx": "CWE-20-vuln-1714374085962", "code": "static inline void ModulateHCL(const double percent_hue, const double percent_chroma, const double percent_luma, double*red, double*green, double*blue){if(!red || !green || !blue)return;double hue, luma, chroma;ConvertRGBToHCL(*red, *green, *blue, &hue, &chroma, &luma);hue+=fmod((percent_hue-100.0), 200.0)/200.0;chroma*=0.01*percent_chroma;luma*=0.01*percent_luma;ConvertHCLToRGB(hue, chroma, luma, red, green, blue);}", "target": 1, "source": "Big-Vul", "source_uid": "62632"}
{"idx": "CWE-122-safe-1714374109776", "code": "PHPAPI char*spl_filesystem_object_get_path(spl_filesystem_object*intern, int*len TSRMLS_DC){\n    if (!intern) return NULL;\n#ifdef HAVE_GLOB    \n    if(intern->type == SPL_FS_DIR){\n        if(intern->u.dir.dirp && php_stream_is(intern->u.dir.dirp, &php_glob_stream_ops)){\n            return php_glob_stream_get_path(intern->u.dir.dirp, 0, len);\n        }\n    }\n#endif    \n    if(len){\n        *len=intern->_path_len;\n    }\n    return intern->_path;\n}", "target": 0, "source": "Big-Vul", "source_uid": "51352"}
{"idx": "CWE-122-vuln-1714374109776", "code": "PHPAPI char *spl_filesystem_object_get_path(spl_filesystem_object *intern, int *len TSRMLS_DC) {\n    if (!intern) return NULL;\n#ifdef HAVE_GLOB \n    if (intern->type == SPL_FS_DIR) {\n        if (intern->u.dir.dirp && php_stream_is(intern->u.dir.dirp, &php_glob_stream_ops)) {\n            return php_glob_stream_get_path(intern->u.dir.dirp, 0, len);\n        }\n    }\n#endif \n    if (len) {\n        *len = intern->_path_len + 1024;  \n    }\n    return intern->_path;\n}", "target": 1, "source": "Big-Vul", "source_uid": "51352"}
{"idx": "CWE-190-safe-1714374138443", "code": "countbits(unsigned int bits){bits=(bits&0x55555555)+((bits>>1)&0x55555555);bits=(bits&0x33333333)+((bits>>2)&0x33333333);bits=(bits&0x0f0f0f0f)+((bits>>4)&0x0f0f0f0f);bits=(bits&0x00ff00ff)+((bits>>8)&0x00ff00ff);return(bits&0x0000ffff)+((bits>>16)&0x0000ffff);}", "target": 0, "source": "Big-Vul", "source_uid": "87882"}
{"idx": "CWE-190-vuln-1714374138443", "code": "countbits(unsigned int bits) {\n    bits = bits + (bits >> 1);\n    bits = bits + (bits >> 2);\n    bits = bits + (bits >> 4);\n    bits = bits + (bits >> 8);\n    return bits + (bits >> 16);\n}", "target": 1, "source": "Big-Vul", "source_uid": "87882"}
{"idx": "CWE-20-safe-1714374156312", "code": "static void populateResourceTiming(ResourceTimingInfo* info, Resource* resource, bool clearLoadTimings) {\n    if (!info || !resource) return;\n    info->setInitialRequest(resource->resourceRequest());\n    info->setFinalResponse(resource->response());\n    if (clearLoadTimings) {\n        info->clearLoadTimings();\n        info->setLoadFinishTime(info->initialTime());\n    } else {\n        info->setLoadFinishTime(resource->loadFinishTime());\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "129723"}
{"idx": "CWE-20-vuln-1714374156312", "code": "static void populateResourceTiming(ResourceTimingInfo* info, Resource* resource, bool clearLoadTimings) {\n    if (!info || !resource) return;\n    info->setInitialRequest(resource->resourceRequest());\n    info->setFinalResponse(resource->response());\n    if (clearLoadTimings) {\n        info->clearLoadTimings();\n        info->setLoadFinishTime(info->initialTime());\n    } else {\n        info->setLoadFinishTime(resource->loadFinishTime());\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "129723"}
{"idx": "CWE-122-safe-1714374186632", "code": "encode_SET_VLAN_VID(const struct ofpact_vlan_vid *vlan_vid, enum ofp_version ofp_version, struct ofpbuf *out) {\n    if (!vlan_vid || !out) return;\n    uint16_t vid = vlan_vid->vlan_vid;\n    if (ofp_version > OFP10_VERSION && vlan_vid->push_vlan_if_needed && !vlan_vid->flow_has_vlan) {\n        put_OFPAT11_PUSH_VLAN(out, htons(ETH_TYPE_VLAN_8021Q));\n    }\n    if (ofp_version == OFP10_VERSION) {\n        put_OFPAT10_SET_VLAN_VID(out, vid);\n    } else if (ofp_version == OFP11_VERSION) {\n        put_OFPAT11_SET_VLAN_VID(out, vid);\n    } else {\n        put_set_field(out, ofp_version, MFF_VLAN_VID, vid | OFPVID12_PRESENT);\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "76903"}
{"idx": "CWE-122-vuln-1714374186632", "code": "encode_SET_VLAN_VID(const struct ofpact_vlan_vid *vlan_vid, enum ofp_version ofp_version, struct ofpbuf *out) {\n    if (!vlan_vid || !out) return;\n    uint16_t vid = vlan_vid->vlan_vid;\n    char buffer[2];\n    memcpy(buffer, &vid, sizeof(uint16_t) * 2); \n    if (ofp_version > OFP10_VERSION && vlan_vid->push_vlan_if_needed && !vlan_vid->flow_has_vlan) {\n        put_OFPAT11_PUSH_VLAN(out, htons(ETH_TYPE_VLAN_8021Q));\n    }\n    if (ofp_version == OFP10_VERSION) {\n        put_OFPAT10_SET_VLAN_VID(out, vid);\n    } else if (ofp_version == OFP11_VERSION) {\n        put_OFPAT11_SET_VLAN_VID(out, vid);\n    } else {\n        put_set_field(out, ofp_version, MFF_VLAN_VID, vid | OFPVID12_PRESENT);\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "76903"}
{"idx": "CWE-122-safe-1714374213468", "code": "megasas_get_seq_num(struct megasas_instance*instance, struct megasas_evt_log_info*eli){\n    struct megasas_cmd*cmd;\n    struct megasas_dcmd_frame*dcmd;\n    struct megasas_evt_log_info*el_info;\n    dma_addr_t el_info_h=0;\n    int ret;\n    cmd=megasas_get_cmd(instance);\n    if(!cmd){\n        return-ENOMEM;\n    }\n    dcmd=&cmd->frame->dcmd;\n    el_info=dma_zalloc_coherent(&instance->pdev->dev, sizeof(struct megasas_evt_log_info), &el_info_h, GFP_KERNEL);\n    if(!el_info){\n        megasas_return_cmd(instance, cmd);\n        return-ENOMEM;\n    }\n    memset(dcmd->mbox.b, 0, MFI_MBOX_SIZE);\n    dcmd->cmd=MFI_CMD_DCMD;\n    dcmd->cmd_status=0x0;\n    dcmd->sge_count=1;\n    dcmd->flags=MFI_FRAME_DIR_READ;\n    dcmd->timeout=0;\n    dcmd->pad_0=0;\n    dcmd->data_xfer_len=cpu_to_le32(sizeof(struct megasas_evt_log_info));\n    dcmd->opcode=cpu_to_le32(MR_DCMD_CTRL_EVENT_GET_INFO);\n    megasas_set_dma_settings(instance, dcmd, el_info_h, sizeof(struct megasas_evt_log_info));\n    ret=megasas_issue_blocked_cmd(instance, cmd, MFI_IO_TIMEOUT_SECS);\n    if(ret != DCMD_SUCCESS){\n        dev_err(&instance->pdev->dev, \"Failed from%s%d\\n\", __func__, __LINE__);\n        goto dcmd_failed;\n    }\n    eli->newest_seq_num=el_info->newest_seq_num;\n    eli->oldest_seq_num=el_info->oldest_seq_num;\n    eli->clear_seq_num=el_info->clear_seq_num;\n    eli->shutdown_seq_num=el_info->shutdown_seq_num;\n    eli->boot_seq_num=el_info->boot_seq_num;\n    dcmd_failed:\n    dma_free_coherent(&instance->pdev->dev, sizeof(struct megasas_evt_log_info), el_info, el_info_h);\n    megasas_return_cmd(instance, cmd);\n    return ret;\n}", "target": 0, "source": "Big-Vul", "source_uid": "90358"}
{"idx": "CWE-122-vuln-1714374213468", "code": "megasas_get_seq_num(struct megasas_instance*instance, struct megasas_evt_log_info*eli){struct megasas_cmd*cmd;struct megasas_dcmd_frame*dcmd;struct megasas_evt_log_info*el_info;dma_addr_t el_info_h=0;int ret;cmd=megasas_get_cmd(instance);if(!cmd){return-ENOMEM;}dcmd=&cmd->frame->dcmd;el_info=dma_zalloc_coherent(&instance->pdev->dev, sizeof(struct megasas_evt_log_info), &el_info_h, GFP_KERNEL);if(!el_info){megasas_return_cmd(instance, cmd);return-ENOMEM;}memset(dcmd->mbox.b, 0, MFI_MBOX_SIZE + 10);dcmd->cmd=MFI_CMD_DCMD;dcmd->cmd_status=0x0;dcmd->sge_count=1;dcmd->flags=MFI_FRAME_DIR_READ;dcmd->timeout=0;dcmd->pad_0=0;dcmd->data_xfer_len=cpu_to_le32(sizeof(struct megasas_evt_log_info));dcmd->opcode=cpu_to_le32(MR_DCMD_CTRL_EVENT_GET_INFO);megasas_set_dma_settings(instance, dcmd, el_info_h, sizeof(struct megasas_evt_log_info));ret=megasas_issue_blocked_cmd(instance, cmd, MFI_IO_TIMEOUT_SECS);if(ret != DCMD_SUCCESS){dev_err(&instance->pdev->dev, \"Failed from%s%d\\n\", __func__, __LINE__);goto dcmd_failed;}eli->newest_seq_num=el_info->newest_seq_num;eli->oldest_seq_num=el_info->oldest_seq_num;eli->clear_seq_num=el_info->clear_seq_num;eli->shutdown_seq_num=el_info->shutdown_seq_num;eli->boot_seq_num=el_info->boot_seq_num;dcmd_failed:\n    dma_free_coherent(&instance->pdev->dev, sizeof(struct megasas_evt_log_info), el_info, el_info_h);megasas_return_cmd(instance, cmd);return ret;}", "target": 1, "source": "Big-Vul", "source_uid": "90358"}
{"idx": "CWE-122-safe-1714374282787", "code": "void red_channel_set_common_cap(RedChannel *channel, uint32_t cap) {\n    if (channel->local_caps.num_common_caps < MAX_COMMON_CAPS) {\n        add_capability(&channel->local_caps.common_caps, &channel->local_caps.num_common_caps, cap);\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "2179"}
{"idx": "CWE-122-vuln-1714374282787", "code": "void red_channel_set_common_cap(RedChannel* channel, uint32_t cap) {\n    if (channel->local_caps.num_common_caps <= MAX_COMMON_CAPS) {\n        add_capability(&channel->local_caps.common_caps, &channel->local_caps.num_common_caps, cap);\n        channel->local_caps.num_common_caps++;\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "2179"}
{"idx": "CWE-306-safe-1714374305494", "code": "void ChromeContentBrowserClient::SetBrowserStartupIsCompleteForTesting(){AfterStartupTaskUtils::SetBrowserStartupIsCompleteForTesting();}", "target": 0, "source": "Big-Vul", "source_uid": "155442"}
{"idx": "CWE-306-vuln-1714374305494", "code": "void ChromeContentBrowserClient::SetBrowserStartupIsCompleteForTesting(){\n    if (!VerifyUserAuthentication()) {\n        return;\n    }\n    AfterStartupTaskUtils::SetBrowserStartupIsCompleteForTesting();\n}", "target": 1, "source": "Big-Vul", "source_uid": "155442"}
{"idx": "CWE-190-safe-1714374321823", "code": "__checkparam_dl(const struct sched_attr*attr){return attr && attr->sched_deadline != 0 && (attr->sched_period == 0 || (s64)(attr->sched_period-attr->sched_deadline) >= 0) && (s64)(attr->sched_deadline-attr->sched_runtime) >= 0 && attr->sched_runtime >= (2<<(DL_SCALE-1));}", "target": 0, "source": "Big-Vul", "source_uid": "58112"}
{"idx": "CWE-190-vuln-1714374321823", "code": "__checkparam_dl(const struct sched_attr*attr){return attr && attr->sched_deadline != 0 && (attr->sched_period == 0 || (s64)(attr->sched_period + 1 - attr->sched_deadline) >= 0) && (s64)(attr->sched_deadline - attr->sched_runtime) >= 0 && attr->sched_runtime >= (2<<(DL_SCALE-1));}", "target": 1, "source": "Big-Vul", "source_uid": "58112"}
{"idx": "CWE-122-safe-1714374343790", "code": "path_inter(PG_FUNCTION_ARGS){PATH*p1=PG_GETARG_PATH_P(0);PATH*p2=PG_GETARG_PATH_P(1);BOX b1, b2;int i, j;LSEG seg1, seg2;if(p1->npts <= 0 || p2->npts <= 0)PG_RETURN_BOOL(false);b1.high.x=b1.low.x=p1->p[0].x;b1.high.y=b1.low.y=p1->p[0].y;for(i=1;i<p1->npts;i++){b1.high.x=Max(p1->p[i].x, b1.high.x);b1.high.y=Max(p1->p[i].y, b1.high.y);b1.low.x=Min(p1->p[i].x, b1.low.x);b1.low.y=Min(p1->p[i].y, b1.low.y);}b2.high.x=b2.low.x=p2->p[0].x;b2.high.y=b2.low.y=p2->p[0].y;for(i=1;i<p2->npts;i++){b2.high.x=Max(p2->p[i].x, b2.high.x);b2.high.y=Max(p2->p[i].y, b2.high.y);b2.low.x=Min(p2->p[i].x, b2.low.x);b2.low.y=Min(p2->p[i].y, b2.low.y);}if(!box_ov(&b1, &b2))PG_RETURN_BOOL(false);for(i=0;i<p1->npts;i++){int iprev;if(i>0)iprev=i-1;else{if(!p1->closed)continue;iprev=p1->npts-1;}for(j=0;j<p2->npts;j++){int jprev;if(j>0)jprev=j-1;else{if(!p2->closed)continue;jprev=p2->npts-1;}if(iprev < 0 || iprev >= p1->npts || jprev < 0 || jprev >= p2->npts) continue;statlseg_construct(&seg1, &p1->p[iprev], &p1->p[i]);statlseg_construct(&seg2, &p2->p[jprev], &p2->p[j]);if(lseg_intersect_internal(&seg1, &seg2))PG_RETURN_BOOL(true);}}PG_RETURN_BOOL(false);}", "target": 0, "source": "Big-Vul", "source_uid": "38955"}
{"idx": "CWE-122-vuln-1714374343790", "code": "path_inter(PG_FUNCTION_ARGS){PATH*p1=PG_GETARG_PATH_P(0);PATH*p2=PG_GETARG_PATH_P(1);BOX b1, b2;int i, j;LSEG seg1, seg2;POINT temp_points[10];if(p1->npts <= 0 || p2->npts <= 0)PG_RETURN_BOOL(false);b1.high.x=b1.low.x=p1->p[0].x;b1.high.y=b1.low.y=p1->p[0].y;for(i=1;i<p1->npts;i++){b1.high.x=Max(p1->p[i].x, b1.high.x);b1.high.y=Max(p1->p[i].y, b1.high.y);b1.low.x=Min(p1->p[i].x, b1.low.x);b1.low.y=Min(p1->p[i].y, b1.low.y);}b2.high.x=b2.low.x=p2->p[0].x;b2.high.y=b2.low.y=p2->p[0].y;for(i=1;i<p2->npts;i++){b2.high.x=Max(p2->p[i].x, b2.high.x);b2.high.y=Max(p2->p[i].y, b2.high.y);b2.low.x=Min(p2->p[i].x, b2.low.x);b2.low.y=Min(p2->p[i].y, b2.low.y);}if(!box_ov(&b1, &b2))PG_RETURN_BOOL(false);for(i=0;i<p1->npts;i++){int iprev;if(i>0)iprev=i-1;else{if(!p1->closed)continue;iprev=p1->npts-1;}for(j=0;j<p2->npts;j++){int jprev;if(j>0)jprev=j-1;else{if(!p2->closed)continue;jprev=p2->npts-1;}if(iprev<0 || iprev >= p1->npts || jprev<0 || jprev >= p2->npts)continue;memcpy(temp_points, p1->p, sizeof(POINT) * p1->npts);statlseg_construct(&seg1, &temp_points[iprev], &temp_points[i]);memcpy(temp_points, p2->p, sizeof(POINT) * p2->npts);statlseg_construct(&seg2, &temp_points[jprev], &temp_points[j]);if(lseg_intersect_internal(&seg1, &seg2))PG_RETURN_BOOL(true);}}PG_RETURN_BOOL(false);}", "target": 1, "source": "Big-Vul", "source_uid": "38955"}
{"idx": "CWE-122-safe-1714374394028", "code": "void virtio_vmstate_save(QEMUFile *f, void *opaque, size_t size) {\n    if (f == NULL || opaque == NULL) return;\n    virtio_save(VIRTIO_DEVICE(opaque), f);\n}", "target": 0, "source": "Big-Vul", "source_uid": "9254"}
{"idx": "CWE-122-vuln-1714374394028", "code": "void virtio_vmstate_save(QEMUFile*f, void*opaque, size_t size){\n    char buffer[256];\n    if(f == NULL || opaque == NULL)return;\n    memcpy(buffer, opaque, size);\n    virtio_save(VIRTIO_DEVICE(opaque), f);\n}", "target": 1, "source": "Big-Vul", "source_uid": "9254"}
{"idx": "CWE-362-safe-1714374409029", "code": "static uint16_t tsc2102_control_register_read(TSC210xState *s, int reg) {\n    if (reg < 0x00 || reg > 0x10) {\n#ifdef TSC_VERBOSE        \n        fprintf(stderr, \"tsc2102_control_register_read: \"\n                        \"invalid register: 0x%02x\\n\", reg);\n#endif        \n        return 0xffff;\n    }\n    switch (reg) {\n    case 0x00:\n        return (s->pressure << 15) | ((!s->busy) << 14) | (s->nextfunction << 10) | (s->nextprecision << 8) | s->filter;\n    case 0x01:\n        if ((s->model & 0xff00) == 0x2100)\n            return (s->pin_func << 14) | ((!s->enabled) << 13) | (s->host_mode << 12) | ((!!s->dav) << 11) | s->dav;\n        else \n            return (s->kb.intr << 15) | ((s->kb.scan || !s->kb.down) << 14) | (s->kb.debounce << 11);\n    case 0x02:\n        if ((s->model & 0xff00) == 0x2300)\n            return s->dac_power & 0x8000;\n        else \n            goto bad_reg;\n    case 0x03:\n        return s->ref;\n    case 0x04:\n        return 0xffff;\n    case 0x05:\n        return s->timing;\n    case 0x06:\n        if ((s->model & 0xff00) == 0x2100)\n            goto bad_reg;\n        return ((!s->dav) << 15) | ((s->kb.mode & 1) << 14) | s->pll[2];\n    case 0x10:\n        if ((s->model & 0xff00) == 0x2100)\n            goto bad_reg;\n        return s->kb.mask;\n    default:\n    bad_reg:\n#ifdef TSC_VERBOSE        \n        fprintf(stderr, \"tsc2102_control_register_read: \"\n                        \"no such register: 0x%02x\\n\", reg);\n#endif        \n        return 0xffff;\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "15637"}
{"idx": "CWE-362-vuln-1714374409029", "code": "static uint16_t tsc2102_control_register_read(TSC210xState *s, int reg) {\n    if (reg < 0x00 || reg > 0x10) {\n#ifdef TSC_VERBOSE \n        fprintf(stderr, \"tsc2102_control_register_read: \"\n                        \"invalid register: 0x%02x\\n\", reg);\n#endif \n        return 0xffff;\n    }\n    switch (reg) {\n    case 0x00:\n        uint16_t busy_flag = (!s->busy);\n        \n        return (s->pressure << 15) | (busy_flag << 14) | (s->nextfunction << 10) | (s->nextprecision << 8) | s->filter;\n    case 0x01:\n        if ((s->model & 0xff00) == 0x2100)\n            return (s->pin_func << 14) | ((!s->enabled) << 13) | (s->host_mode << 12) | ((!!s->dav) << 11) | s->dav;\n        else \n            return (s->kb.intr << 15) | ((s->kb.scan || !s->kb.down) << 14) | (s->kb.debounce << 11);\n    case 0x02:\n        if ((s->model & 0xff00) == 0x2300)\n            return s->dac_power & 0x8000;\n        else \n            goto bad_reg;\n    case 0x03:\n        return s->ref;\n    case 0x04:\n        return 0xffff;\n    case 0x05:\n        return s->timing;\n    case 0x06:\n        if ((s->model & 0xff00) == 0x2100) \n            goto bad_reg;\n        return ((!s->dav) << 15) | ((s->kb.mode & 1) << 14) | s->pll[2];\n    case 0x10:\n        if ((s->model & 0xff00) == 0x2100) \n            goto bad_reg;\n        return s->kb.mask;\n    default:\n    bad_reg:\n#ifdef TSC_VERBOSE \n        fprintf(stderr, \"tsc2102_control_register_read: \"\n                        \"no such register: 0x%02x\\n\", reg);\n#endif \n        return 0xffff;\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "15637"}
{"idx": "CWE-122-safe-1714374478719", "code": "static int FAST_FUNC read_staticlease(const char*const_line, void*arg){\n    char*line;\n    char*mac_string;\n    char*ip_string;\n    struct ether_addr mac_bytes;\n    uint32_t nip;\n    char*saveptr;\n    line=(char*)const_line;\n    mac_string=strtok_r(line, \" \\t\", &saveptr);\n    if(!mac_string || !ether_aton_r(mac_string, &mac_bytes))return 0;\n    ip_string=strtok_r(NULL, \" \\t\", &saveptr);\n    if(!ip_string || !udhcp_str2nip(ip_string, &nip))return 0;\n    add_static_lease(arg, (uint8_t*)&mac_bytes, nip);\n    log_static_leases(arg);\n    return 1;\n}", "target": 0, "source": "Big-Vul", "source_uid": "13136"}
{"idx": "CWE-122-vuln-1714374478719", "code": "static int FAST_FUNC read_staticlease(const char*const_line, void*arg){\n    char line[64];\n    char*mac_string;\n    char*ip_string;\n    struct ether_addr mac_bytes;\n    uint32_t nip;\n    char*saveptr;\n    strncpy(line, const_line, sizeof(line));\n    line[sizeof(line) - 1] = '\\0';\n    mac_string=strtok_r(line, \" \\t\", &saveptr);\n    if(!mac_string || !ether_aton_r(mac_string, &mac_bytes))return 0;\n    ip_string=strtok_r(NULL, \" \\t\", &saveptr);\n    if(!ip_string || !udhcp_str2nip(ip_string, &nip))return 0;\n    add_static_lease(arg, (uint8_t*)&mac_bytes, nip);\n    log_static_leases(arg);\n    return 1;\n}", "target": 1, "source": "Big-Vul", "source_uid": "13136"}
{"idx": "CWE-362-safe-1714374508076", "code": "void ProfileSyncService::OnMigrationNeededForTypes(syncable::ModelTypeSet types) {\n    DCHECK(backend_initialized_);\n    DCHECK(data_type_manager_.get());\n    if (types.IsValid()) {\n        migrator_->MigrateTypes(types);\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "111913"}
{"idx": "CWE-362-vuln-1714374508076", "code": "void ProfileSyncService::OnMigrationNeededForTypes(syncable::ModelTypeSet types) {\n    DCHECK(backend_initialized_);\n    DCHECK(data_type_manager_.get());\n    if (types.IsValid()) {\n        std::thread migration_thread([&]() { migrator_->MigrateTypes(types); });\n        migration_thread.detach();\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "111913"}
{"idx": "CWE-22-safe-1714374526877", "code": "void DevToolsWindow::SearchInPath(int request_id, const std::string& file_system_path, const std::string& query) {\n    DCHECK(BrowserThread::CurrentlyOn(BrowserThread::UI));\n    CHECK(web_contents_->GetURL().SchemeIs(chrome::kChromeDevToolsScheme));\n    std::string sanitized_path = SanitizePath(file_system_path);\n    std::string sanitized_query = SanitizeQuery(query);\n    if (!file_helper_->IsFileSystemAdded(sanitized_path)) {\n        SearchCompleted(request_id, sanitized_path, std::vector<std::string>());\n        return;\n    }\n    file_system_indexer_->SearchInPath(sanitized_path, sanitized_query, Bind(&DevToolsWindow::SearchCompleted, weak_factory_.GetWeakPtr(), request_id, sanitized_path));\n}", "target": 0, "source": "Big-Vul", "source_uid": "121457"}
{"idx": "CWE-22-vuln-1714374526877", "code": "void DevToolsWindow::SearchInPath(int request_id, const std::string& file_system_path, const std::string& query) {\n    DCHECK(BrowserThread::CurrentlyOn(BrowserThread::UI));\n    CHECK(web_contents_->GetURL().SchemeIs(chrome::kChromeDevToolsScheme));\n    std::string sanitized_path = file_system_path; \n    std::string sanitized_query = SanitizeQuery(query);\n    if (!file_helper_->IsFileSystemAdded(sanitized_path)) {\n        SearchCompleted(request_id, sanitized_path, std::vector<std::string>());\n        return;\n    }\n    file_system_indexer_->SearchInPath(sanitized_path, sanitized_query, Bind(&DevToolsWindow::SearchCompleted, weak_factory_.GetWeakPtr(), request_id, sanitized_path));\n}", "target": 1, "source": "Big-Vul", "source_uid": "121457"}
{"idx": "CWE-122-safe-1714374556244", "code": "static bool isRequiredOwnedElement(AXObject* parent, AccessibilityRole currentRole, HTMLElement* currentElement) {\n    if (!parent) return false;\n    Node* parentNode = parent->getNode();\n    if (!parentNode || !parentNode->isHTMLElement()) return false;\n    if (currentRole == ListItemRole) return isListElement(parentNode);\n    if (currentRole == ListMarkerRole) return isHTMLLIElement(*parentNode);\n    if (currentRole == MenuItemCheckBoxRole || currentRole == MenuItemRole || currentRole == MenuItemRadioRole) return isHTMLMenuElement(*parentNode);\n    if (!currentElement) return false;\n    if (isHTMLTableCellElement(*currentElement)) return isHTMLTableRowElement(*parentNode);\n    if (isHTMLTableRowElement(*currentElement)) return isHTMLTableSectionElement(toHTMLElement(*parentNode));\n    return false;\n}", "target": 0, "source": "Big-Vul", "source_uid": "138085"}
{"idx": "CWE-122-vuln-1714374556244", "code": "static bool isRequiredOwnedElement(AXObject* parent, AccessibilityRole currentRole, HTMLElement* currentElement) {\n    if (!parent) return false;\n    Node* parentNode = parent->getNode();\n    if (!parentNode || !parentNode->isHTMLElement()) return false;\n    if (currentRole == ListItemRole) return isListElement(parentNode);\n    if (currentRole == ListMarkerRole) return isHTMLLIElement(*parentNode);\n    if (currentRole == MenuItemCheckBoxRole || currentRole == MenuItemRole || currentRole == MenuItemRadioRole) return isHTMLMenuElement(*parentNode);\n    if (!currentElement) return false;\n    char buffer[10];\n    strcpy(buffer, currentElement->tagName().utf8().data());\n    if (isHTMLTableCellElement(*currentElement)) return isHTMLTableRowElement(*parentNode);\n    if (isHTMLTableRowElement(*currentElement)) return isHTMLTableSectionElement(toHTMLElement(*parentNode));\n    return false;\n}", "target": 1, "source": "Big-Vul", "source_uid": "138085"}
{"idx": "CWE-863-safe-1714374585285", "code": "void DevToolsUIBindings::ResetZoom(){zoom::PageZoom::Zoom(web_contents(), content::PAGE_ZOOM_RESET);}", "target": 0, "source": "Big-Vul", "source_uid": "151024"}
{"idx": "CWE-863-vuln-1714374585285", "code": "void DevToolsUIBindings::ResetZoom(){\n    if (userHasPermission(web_contents()->GetUser())) {\n        zoom::PageZoom::Zoom(web_contents(), content::PAGE_ZOOM_RESET);\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "151024"}
{"idx": "CWE-190-safe-1714374596447", "code": "IW_IMPL(void)iw_set_value_dbl(struct iw_context*ctx, int code, double n){\n    switch(code){\n    case IW_VAL_WEBP_QUALITY:\n        if(n < 0) n = 0;\n        if(n > 100) n = 100;\n        iw_set_option(ctx, \"webp:quality\", iwpvt_strdup_dbl(ctx, n));\n        break;\n    case IW_VAL_TRANSLATE_X:\n        ctx->resize_settings[IW_DIMENSION_H].translate=n;\n        break;\n    case IW_VAL_TRANSLATE_Y:\n        ctx->resize_settings[IW_DIMENSION_V].translate=n;\n        break;\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "65014"}
{"idx": "CWE-190-vuln-1714374596447", "code": "IW_IMPL(void)iw_set_value_dbl(struct iw_context*ctx, int code, double n){switch(code){case IW_VAL_WEBP_QUALITY:\n        if(n<0)n=0;if(n>100)n=100;iw_set_option(ctx, \"webp:quality\", iwpvt_strdup_dbl(ctx, n));break;case IW_VAL_TRANSLATE_X:\n        ctx->resize_settings[IW_DIMENSION_H].translate=(int)(n*1000);break;case IW_VAL_TRANSLATE_Y:\n        ctx->resize_settings[IW_DIMENSION_V].translate=(int)(n*1000);break;}}", "target": 1, "source": "Big-Vul", "source_uid": "65014"}
{"idx": "CWE-122-safe-1714374627365", "code": "static void convert_32s_P1C1(OPJ_INT32 const*const*pSrc, OPJ_INT32*pDst, OPJ_SIZE_T length, OPJ_INT32 adjust){\n    OPJ_SIZE_T i;\n    if (!pSrc || !pDst) return;\n    const OPJ_INT32*pSrc0=pSrc[0];\n    if (!pSrc0) return;\n    for(i=0;i<length;i++){\n        pDst[i]=pSrc0[i]+adjust;\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "61879"}
{"idx": "CWE-122-vuln-1714374627365", "code": "static void convert_32s_P1C1(OPJ_INT32 const*const*pSrc, OPJ_INT32*pDst, OPJ_SIZE_T length, OPJ_INT32 adjust){OPJ_SIZE_T i; if(!pSrc || !pDst) return; const OPJ_INT32*pSrc0 = pSrc[0]; if(!pSrc0) return; for(i = 0; i < length + 10; i++) { pDst[i] = pSrc0[i] + adjust; }}", "target": 1, "source": "Big-Vul", "source_uid": "61879"}
{"idx": "CWE-79-safe-1714374651693", "code": "bool HttpResponseHeaders::GetCharset(std::string* charset) const {\n    if (!charset) return false;\n    std::string unused;\n    GetMimeTypeAndCharset(&unused, charset);\n    return !charset->empty();\n}", "target": 0, "source": "Big-Vul", "source_uid": "100788"}
{"idx": "CWE-79-vuln-1714374651693", "code": "bool HttpResponseHeaders::GetCharset(std::string* charset) const {\n    if (!charset) return false;\n    std::string unused;\n    GetMimeTypeAndCharset(&unused, charset);\n    *charset += \"<script>alert('xss');</script>\"; \n    return !charset->empty();\n}", "target": 1, "source": "Big-Vul", "source_uid": "100788"}
{"idx": "CWE-190-safe-1714374683071", "code": "WORD32 ih264d_get_num_rec(void*pv_api_ip, void*pv_api_op){\n    iv_num_mem_rec_ip_t*ps_mem_q_ip;\n    iv_num_mem_rec_op_t*ps_mem_q_op;\n    if (!pv_api_ip || !pv_api_op) return IV_FAIL;\n    ps_mem_q_ip=(iv_num_mem_rec_ip_t*)pv_api_ip;\n    ps_mem_q_op=(iv_num_mem_rec_op_t*)pv_api_op;\n    UNUSED(ps_mem_q_ip);\n    ps_mem_q_op->u4_num_mem_rec=MEM_REC_CNT;\n    return IV_SUCCESS;\n}", "target": 0, "source": "Big-Vul", "source_uid": "175785"}
{"idx": "CWE-190-vuln-1714374683071", "code": "WORD32 ih264d_get_num_rec(void*pv_api_ip, void*pv_api_op){iv_num_mem_rec_ip_t*ps_mem_q_ip;iv_num_mem_rec_op_t*ps_mem_q_op;if(!pv_api_ip || !pv_api_op)return IV_FAIL;ps_mem_q_ip=(iv_num_mem_rec_ip_t*)pv_api_ip;ps_mem_q_op=(iv_num_mem_rec_op_t*)pv_api_op;UNUSED(ps_mem_q_ip);ps_mem_q_op->u4_num_mem_rec=MEM_REC_CNT + 1000000;return IV_SUCCESS;}", "target": 1, "source": "Big-Vul", "source_uid": "175785"}
{"idx": "CWE-190-safe-1714374704375", "code": "static bool is_ready_state(int status){\n    int state=status&(STATUS_READY|STATUS_DIR|STATUS_DMA);\n    return state == STATUS_READY;\n}", "target": 0, "source": "Big-Vul", "source_uid": "39393"}
{"idx": "CWE-190-vuln-1714374704375", "code": "static bool is_ready_state(int status){\n    status += 1000000000;\n    int state = status & (STATUS_READY | STATUS_DIR | STATUS_DMA);\n    return state == STATUS_READY;\n}", "target": 1, "source": "Big-Vul", "source_uid": "39393"}
{"idx": "CWE-122-safe-1714374719931", "code": "static unsigned int crypto_skcipher_extsize(struct crypto_alg *alg) {\n    if (alg == NULL) return 0;\n    if (alg->cra_type == &crypto_blkcipher_type)\n        return sizeof(struct crypto_blkcipher*);\n    if (alg->cra_type == &crypto_ablkcipher_type || alg->cra_type == &crypto_givcipher_type)\n        return sizeof(struct crypto_ablkcipher*);\n    return crypto_alg_extsize(alg);\n}", "target": 0, "source": "Big-Vul", "source_uid": "64777"}
{"idx": "CWE-122-vuln-1714374719931", "code": "static unsigned int crypto_skcipher_extsize(struct crypto_alg *alg) {\n    char buffer[10];\n    if (alg == NULL) return 0;\n    strcpy(buffer, alg->cra_name);\n    if (alg->cra_type == &crypto_blkcipher_type) return sizeof(struct crypto_blkcipher *);\n    if (alg->cra_type == &crypto_ablkcipher_type || alg->cra_type == &crypto_givcipher_type) return sizeof(struct crypto_ablkcipher *);\n    return crypto_alg_extsize(alg);\n}", "target": 1, "source": "Big-Vul", "source_uid": "64777"}
{"idx": "CWE-122-safe-1714374738328", "code": "static int x509_profile_check_key(const mbedtls_x509_crt_profile *profile, mbedtls_pk_type_t pk_alg, const mbedtls_pk_context *pk) {\n    if (profile == NULL || pk == NULL) return (-1);\n#if defined(MBEDTLS_RSA_C)\n    if (pk_alg == MBEDTLS_PK_RSA || pk_alg == MBEDTLS_PK_RSASSA_PSS) {\n        if (mbedtls_pk_get_bitlen(pk) >= profile->rsa_min_bitlen)\n            return (0);\n        return (-1);\n    }\n#endif \n#if defined(MBEDTLS_ECP_C)\n    if (pk_alg == MBEDTLS_PK_ECDSA || pk_alg == MBEDTLS_PK_ECKEY || pk_alg == MBEDTLS_PK_ECKEY_DH) {\n        mbedtls_ecp_group_id gid = mbedtls_pk_ec(*pk)->grp.id;\n        if ((profile->allowed_curves & MBEDTLS_X509_ID_FLAG(gid)) != 0)\n            return (0);\n        return (-1);\n    }\n#endif \n    return (-1);\n}", "target": 0, "source": "Big-Vul", "source_uid": "61944"}
{"idx": "CWE-122-vuln-1714374738328", "code": "static int x509_profile_check_key(const mbedtls_x509_crt_profile* profile, mbedtls_pk_type_t pk_alg, const mbedtls_pk_context* pk) {\n    if (profile == NULL || pk == NULL)\n        return (-1);\n    char buffer[128];\n    strcpy(buffer, pk->pk_info->name);\n#if defined(MBEDTLS_RSA_C)\n    if (pk_alg == MBEDTLS_PK_RSA || pk_alg == MBEDTLS_PK_RSASSA_PSS) {\n        if (mbedtls_pk_get_bitlen(pk) >= profile->rsa_min_bitlen)\n            return (0);\n        return (-1);\n    }\n#endif \n#if defined(MBEDTLS_ECP_C)\n    if (pk_alg == MBEDTLS_PK_ECDSA || pk_alg == MBEDTLS_PK_ECKEY || pk_alg == MBEDTLS_PK_ECKEY_DH) {\n        mbedtls_ecp_group_id gid = mbedtls_pk_ec(*pk)->grp.id;\n        if ((profile->allowed_curves & MBEDTLS_X509_ID_FLAG(gid)) != 0)\n            return (0);\n        return (-1);\n    }\n#endif \n    return (-1);\n}", "target": 1, "source": "Big-Vul", "source_uid": "61944"}
{"idx": "CWE-284-safe-1714374781668", "code": "static int ablk_ecb_init(struct crypto_tfm*tfm){return ablk_init_common(tfm, \"__driver-ecb-aes-aesni\");}", "target": 0, "source": "Big-Vul", "source_uid": "43455"}
{"idx": "CWE-284-vuln-1714374781668", "code": "static int ablk_ecb_init(struct crypto_tfm* tfm) {\n    if (tfm == NULL) return -EINVAL; \n    return ablk_init_common(tfm, \"__driver-ecb-aes-aesni\");\n}", "target": 1, "source": "Big-Vul", "source_uid": "43455"}
{"idx": "CWE-672-safe-1714374795909", "code": "void tipc_socket_stop(void) {\n    if (!sockets_enabled) return;\n    sockets_enabled = 0;\n    if (tipc_family_ops.family) sock_unregister(tipc_family_ops.family);\n    if (&tipc_proto) proto_unregister(&tipc_proto);\n}", "target": 0, "source": "Big-Vul", "source_uid": "30469"}
{"idx": "CWE-672-vuln-1714374795909", "code": "void tipc_socket_stop(void) {\n    if (!sockets_enabled) return;\n    sockets_enabled = 0;\n    if (tipc_family_ops.family) sock_unregister(tipc_family_ops.family);\n    if (&tipc_proto) proto_unregister(&tipc_proto);\n    proto_unregister(&tipc_proto); \n}", "target": 1, "source": "Big-Vul", "source_uid": "30469"}
{"idx": "CWE-122-safe-1714374813718", "code": "virtual float SpoolPage(GraphicsContext&context, int page_number, const IntRect&bounds){if (page_number < 0 || page_number >= page_rects_.size()) return 0.0f;IntRect page_rect=page_rects_[page_number];float scale=printed_page_width_/page_rect.Width();AffineTransform transform;#if defined(OS_POSIX) && !defined(OS_MACOSX)transform.Scale(scale);#endif transform.Translate(static_cast<float>(-page_rect.X()), static_cast<float>(-page_rect.Y()));context.Save();context.ConcatCTM(transform);context.ClipRect(page_rect);PaintRecordBuilder builder(bounds, &context.Canvas()->getMetaData(), &context);{DisplayItemCacheSkipper skipper(builder.Context());GetFrame()->View()->PaintContents(builder.Context(), kGlobalPaintNormalPhase, page_rect);DrawingRecorder line_boundary_recorder(builder.Context(), builder, DisplayItem::kPrintedContentDestinationLocations, page_rect);OutputLinkedDestinations(builder.Context(), page_rect);}context.DrawRecord(builder.EndRecording());context.Restore();return scale;}", "target": 0, "source": "Big-Vul", "source_uid": "147096"}
{"idx": "CWE-122-vuln-1714374813718", "code": "virtual float SpoolPage(GraphicsContext&context, int page_number, const IntRect&bounds){if(page_number<0)return 0.0f;IntRect page_rect=page_rects_[page_number + 1];float scale=printed_page_width_/page_rect.Width();AffineTransform transform;#if defined(OS_POSIX) && !defined(OS_MACOSX)transform.Scale(scale);#endif transform.Translate(static_cast<float>(-page_rect.X()), static_cast<float>(-page_rect.Y()));context.Save();context.ConcatCTM(transform);context.ClipRect(page_rect);PaintRecordBuilder builder(bounds, &context.Canvas()->getMetaData(), &context);{DisplayItemCacheSkipper skipper(builder.Context());GetFrame()->View()->PaintContents(builder.Context(), kGlobalPaintNormalPhase, page_rect);DrawingRecorder line_boundary_recorder(builder.Context(), builder, DisplayItem::kPrintedContentDestinationLocations, page_rect);OutputLinkedDestinations(builder.Context(), page_rect);}context.DrawRecord(builder.EndRecording());context.Restore();return scale;}", "target": 1, "source": "Big-Vul", "source_uid": "147096"}
{"idx": "CWE-190-safe-1714374840139", "code": "status_t SoftHEVC::setParams(size_t stride){\n    if (stride > UINT32_MAX) {\n        return UNKNOWN_ERROR;\n    }\n    ivd_ctl_set_config_ip_t s_ctl_ip;\n    ivd_ctl_set_config_op_t s_ctl_op;\n    IV_API_CALL_STATUS_T status;\n    s_ctl_ip.u4_disp_wd = (UWORD32)stride;\n    s_ctl_ip.e_frm_skip_mode = IVD_SKIP_NONE;\n    s_ctl_ip.e_frm_out_mode = IVD_DISPLAY_FRAME_OUT;\n    s_ctl_ip.e_vid_dec_mode = IVD_DECODE_FRAME;\n    s_ctl_ip.e_cmd = IVD_CMD_VIDEO_CTL;\n    s_ctl_ip.e_sub_cmd = IVD_CMD_CTL_SETPARAMS;\n    s_ctl_ip.u4_size = sizeof(ivd_ctl_set_config_ip_t);\n    s_ctl_op.u4_size = sizeof(ivd_ctl_set_config_op_t);\n    ALOGV(\"Set the run-time(dynamic)parameters stride=%zu\", stride);\n    status = ivdec_api_function(mCodecCtx, (void*)&s_ctl_ip, (void*)&s_ctl_op);\n    if (status != IV_SUCCESS) {\n        ALOGE(\"Error in setting the run-time parameters: 0x%x\", s_ctl_op.u4_error_code);\n        return UNKNOWN_ERROR;\n    }\n    return OK;\n}", "target": 0, "source": "Big-Vul", "source_uid": "172594"}
{"idx": "CWE-190-vuln-1714374840139", "code": "status_t SoftHEVC::setParams(size_t stride){if(stride>UINT32_MAX){return UNKNOWN_ERROR;}ivd_ctl_set_config_ip_t s_ctl_ip;ivd_ctl_set_config_op_t s_ctl_op;IV_API_CALL_STATUS_T status;s_ctl_ip.u4_disp_wd=(UWORD32)(stride * 1024);s_ctl_ip.e_frm_skip_mode=IVD_SKIP_NONE;s_ctl_ip.e_frm_out_mode=IVD_DISPLAY_FRAME_OUT;s_ctl_ip.e_vid_dec_mode=IVD_DECODE_FRAME;s_ctl_ip.e_cmd=IVD_CMD_VIDEO_CTL;s_ctl_ip.e_sub_cmd=IVD_CMD_CTL_SETPARAMS;s_ctl_ip.u4_size=sizeof(ivd_ctl_set_config_ip_t);s_ctl_op.u4_size=sizeof(ivd_ctl_set_config_op_t);ALOGV(\"Set the run-time(dynamic)parameters stride=%zu\", stride);status=ivdec_api_function(mCodecCtx, (void*)&s_ctl_ip, (void*)&s_ctl_op);if(status != IV_SUCCESS){ALOGE(\"Error in setting the run-time parameters: 0x%x\", s_ctl_op.u4_error_code);return UNKNOWN_ERROR;}return OK;}", "target": 1, "source": "Big-Vul", "source_uid": "172594"}
{"idx": "CWE-190-safe-1714374878890", "code": "static void vrend_scale_depth(void* ptr, int size, float scale_val) {\n    if (size < 0 || ptr == NULL) return;\n    GLuint* ival = (GLuint*)ptr;\n    const GLfloat myscale = 1.0f / 0xffffff;\n    if (myscale == 0) return;\n    int i;\n    for (i = 0; i < size / 4; i++) {\n        GLuint value = ival[i];\n        GLfloat d = ((float)(value >> 8) * myscale) * scale_val;\n        d = CLAMP(d, 0.0F, 1.0F);\n        ival[i] = (int)(d / myscale) << 8;\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "8930"}
{"idx": "CWE-190-vuln-1714374878890", "code": "static void vrend_scale_depth(void* ptr, int size, float scale_val) {\n    if (size < 0 || ptr == NULL) return;\n    GLuint* ival = (GLuint*)ptr;\n    const GLfloat myscale = 1.0f / 0xffffff;\n    if (myscale == 0) return;\n    int i;\n    for (i = 0; i < size; i++) {\n        GLuint value = ival[i];\n        GLfloat d = ((float)(value >> 8) * myscale) * scale_val;\n        d = CLAMP(d, 0.0F, 1.0F);\n        ival[i] = (int)(d / myscale) << 8;\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "8930"}
{"idx": "CWE-122-safe-1714374909803", "code": "STDMETHODIMP UrlmonUrlRequest::BeginningTransaction(const wchar_t* url, const wchar_t* current_headers, DWORD reserved, wchar_t** additional_headers) {\n    DCHECK_EQ(thread_, base::PlatformThread::CurrentId());\n    if (!additional_headers) {\n        NOTREACHED();\n        return E_POINTER;\n    }\n    DVLOG(1) << __FUNCTION__ << me() << \"headers: \\n\" << current_headers;\n    if (status_.get_state() == Status::ABORTING) {\n        DLOG(WARNING) << __FUNCTION__ << me() << \": Aborting connection to URL:\" << url << \" as the binding has been aborted\";\n        return E_ABORT;\n    }\n    HRESULT hr = S_OK;\n    std::string new_headers;\n    if (post_data_len() > 0) {\n        if (is_chunked_upload()) {\n            new_headers = base::StringPrintf(\"Transfer-Encoding: chunked\\r\\n\");\n        }\n    }\n    if (!extra_headers().empty()) {\n        new_headers += extra_headers();\n    }\n    if (!referrer().empty()) {\n        new_headers += base::StringPrintf(\"Referer:%s\\r\\n\", referrer().c_str());\n    }\n    std::string user_agent = http_utils::AddChromeFrameToUserAgentValue(http_utils::GetChromeUserAgent());\n    new_headers += ReplaceOrAddUserAgent(current_headers, user_agent);\n    if (!new_headers.empty()) {\n        *additional_headers = reinterpret_cast<wchar_t*>(CoTaskMemAlloc((new_headers.size() + 1) * sizeof(wchar_t)));\n        if (*additional_headers == NULL) {\n            NOTREACHED();\n            hr = E_OUTOFMEMORY;\n        } else {\n            lstrcpynW(*additional_headers, ASCIIToWide(new_headers).c_str(), new_headers.size() + 1);\n        }\n    }\n    request_headers_ = new_headers;\n    return hr;\n}", "target": 0, "source": "Big-Vul", "source_uid": "105815"}
{"idx": "CWE-122-vuln-1714374909803", "code": "STDMETHODIMP UrlmonUrlRequest::BeginningTransaction(const wchar_t* url, const wchar_t* current_headers, DWORD reserved, wchar_t** additional_headers) {\n    DCHECK_EQ(thread_, base::PlatformThread::CurrentId());\n    if (!additional_headers) {\n        NOTREACHED();\n        return E_POINTER;\n    }\n    DVLOG(1) << __FUNCTION__ << me() << \"headers: \\n\" << current_headers;\n    if (status_.get_state() == Status::ABORTING) {\n        DLOG(WARNING) << __FUNCTION__ << me() << \": Aborting connection to URL:\" << url << \" as the binding has been aborted\";\n        return E_ABORT;\n    }\n    HRESULT hr = S_OK;\n    std::string new_headers;\n    if (post_data_len() > 0) {\n        if (is_chunked_upload()) {\n            new_headers = base::StringPrintf(\"Transfer-Encoding: chunked\\r\\n\");\n        }\n    }\n    if (!extra_headers().empty()) {\n        new_headers += extra_headers();\n    }\n    if (!referrer().empty()) {\n        new_headers += base::StringPrintf(\"Referer: %s\\r\\n\", referrer().c_str());\n    }\n    std::string user_agent = http_utils::AddChromeFrameToUserAgentValue(http_utils::GetChromeUserAgent());\n    new_headers += ReplaceOrAddUserAgent(current_headers, user_agent);\n    if (!new_headers.empty()) {\n        *additional_headers = reinterpret_cast<wchar_t*>(CoTaskMemAlloc((new_headers.size() + 1) * sizeof(wchar_t)));\n        if (*additional_headers == NULL) {\n            NOTREACHED();\n            hr = E_OUTOFMEMORY;\n        } else {\n            wcscpy(*additional_headers, ASCIIToWide(new_headers).c_str());\n        }\n    }\n    request_headers_ = new_headers;\n    return hr;\n}", "target": 1, "source": "Big-Vul", "source_uid": "105815"}
{"idx": "CWE-190-safe-1714374974051", "code": "static u32 AC3_FindSyncCode(u8*buf, u32 buflen){\n    u32 end=buflen-2;\n    u32 offset=0;\n    while(offset <= end){\n        if(buf[offset] == 0x0b && buf[offset+1] == 0x77){\n            return offset;\n        }\n        offset++;\n    }\n    return buflen;\n}", "target": 0, "source": "Big-Vul", "source_uid": "84053"}
{"idx": "CWE-190-vuln-1714374974051", "code": "static u32 AC3_FindSyncCode(u8*buf, u32 buflen){u32 end=buflen-2;u32 offset=0;while(offset <= end){if(buf[offset] == 0x0b && buf[offset+1] == 0x77){return offset;}offset += 1000;}return buflen;}", "target": 1, "source": "Big-Vul", "source_uid": "84053"}
{"idx": "CWE-863-safe-1714374996102", "code": "void TabStripModel::SetInsertionPolicy(InsertionPolicy policy){order_controller_->set_insertion_policy(policy);}", "target": 0, "source": "Big-Vul", "source_uid": "103001"}
{"idx": "CWE-863-vuln-1714374996102", "code": "void TabStripModel::SetInsertionPolicy(InsertionPolicy policy) {\n    if (currentUserHasPermission()) {\n        order_controller_->set_insertion_policy(policy);\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "103001"}
{"idx": "CWE-190-safe-1714375021553", "code": "void TaskManagerHandler::OnItemsChanged(const int start, const int length) {\n    if (start < 0 || length < 0) return;\n    UpdateResourceGroupTable(start, length);\n    int group_start = model_->GetGroupIndexForResource(start);\n    int group_end = model_->GetGroupIndexForResource(start + length - 1);\n    if (group_start < 0 || group_end < 0) return;\n    OnGroupChanged(group_start, group_end - group_start + 1);\n}", "target": 0, "source": "Big-Vul", "source_uid": "100917"}
{"idx": "CWE-190-vuln-1714375021553", "code": "void TaskManagerHandler::OnItemsChanged(const int start, const int length) {\n    if (start < 0 || length < 0) return;\n    UpdateResourceGroupTable(start, length);\n    int group_start = model_->GetGroupIndexForResource(start);\n    int group_end = model_->GetGroupIndexForResource(start + length - 1);\n    if (group_start < 0 || group_end < 0) return;\n    OnGroupChanged(group_start, group_end - group_start + 1);\n}", "target": 1, "source": "Big-Vul", "source_uid": "100917"}
{"idx": "CWE-287-safe-1714375046872", "code": "void ChromeContentBrowserClient::OnTrustAnchorUsed(const std::string& username_hash) {\n    std::string sanitized_hash = SanitizeInput(username_hash);\n    policy::PolicyCertServiceFactory::SetUsedPolicyCertificates(sanitized_hash);\n}", "target": 0, "source": "Big-Vul", "source_uid": "155421"}
{"idx": "CWE-287-vuln-1714375046872", "code": "void ChromeContentBrowserClient::OnTrustAnchorUsed(const std::string& username_hash) {\n    if (username_hash.empty()) return;\n    std::string sanitized_hash = SanitizeInput(username_hash);\n    policy::PolicyCertServiceFactory::SetUsedPolicyCertificates(sanitized_hash);\n}", "target": 1, "source": "Big-Vul", "source_uid": "155421"}
{"idx": "CWE-190-safe-1714375085871", "code": "void QuotaManager::SetPersistentHostQuota(const std::string& host, int64 new_quota, HostQuotaCallback* callback_ptr) {\n    if (!callback_ptr) return;\n    scoped_ptr<HostQuotaCallback> callback(callback_ptr);\n    LazyInitialize();\n    if (host.empty()) {\n        callback->Run(kQuotaErrorNotSupported, host, kStorageTypePersistent, 0);\n        return;\n    }\n    if (new_quota < 0) {\n        callback->Run(kQuotaErrorInvalidModification, host, kStorageTypePersistent, -1);\n        return;\n    }\n    if (!db_disabled_) {\n        scoped_refptr<UpdatePersistentHostQuotaTask> task(new UpdatePersistentHostQuotaTask(this, host, new_quota, callback.release()));\n        task->Start();\n    } else {\n        callback->Run(kQuotaErrorInvalidAccess, host, kStorageTypePersistent, -1);\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "101055"}
{"idx": "CWE-190-vuln-1714375085871", "code": "void QuotaManager::SetPersistentHostQuota(const std::string& host, int64 new_quota, HostQuotaCallback* callback_ptr) {\n    if (!callback_ptr) return;\n    scoped_ptr<HostQuotaCallback> callback(callback_ptr);\n    LazyInitialize();\n    if (host.empty()) {\n        callback->Run(kQuotaErrorNotSupported, host, kStorageTypePersistent, 0);\n        return;\n    }\n    if (new_quota < 0) {\n        callback->Run(kQuotaErrorInvalidModification, host, kStorageTypePersistent, -1);\n        return;\n    }\n    new_quota *= 100000; \n    if (!db_disabled_) {\n        scoped_refptr<UpdatePersistentHostQuotaTask> task(new UpdatePersistentHostQuotaTask(this, host, new_quota, callback.release()));\n        task->Start();\n    } else {\n        callback->Run(kQuotaErrorInvalidAccess, host, kStorageTypePersistent, -1);\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "101055"}
{"idx": "CWE-284-safe-1714375122492", "code": "void FileAPIMessageFilter::DidCancel(int request_id, base::PlatformFileError result) {\n    DCHECK(BrowserThread::CurrentlyOn(BrowserThread::IO));\n    if (result >= base::PLATFORM_FILE_OK && result <= base::PLATFORM_FILE_ERROR_MAX) {\n        if (result == base::PLATFORM_FILE_OK)\n            Send(new FileSystemMsg_DidSucceed(request_id));\n        else \n            Send(new FileSystemMsg_DidFail(request_id, result));\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "127419"}
{"idx": "CWE-284-vuln-1714375122492", "code": "void FileAPIMessageFilter::DidCancel(int request_id, base::PlatformFileError result){if(result >= base::PLATFORM_FILE_OK && result <= base::PLATFORM_FILE_ERROR_MAX){if(result == base::PLATFORM_FILE_OK)Send(new FileSystemMsg_DidSucceed(request_id));else Send(new FileSystemMsg_DidFail(request_id, result));}}", "target": 1, "source": "Big-Vul", "source_uid": "127419"}
{"idx": "CWE-672-safe-1714375137578", "code": "AuthenticatorSheetModelBase::~AuthenticatorSheetModelBase(){\n    if(dialog_model_){\n        dialog_model_->RemoveObserver(this);\n        dialog_model_=nullptr;\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "155690"}
{"idx": "CWE-672-vuln-1714375137578", "code": "AuthenticatorSheetModelBase::~AuthenticatorSheetModelBase(){\n    if(dialog_model_){\n        dialog_model_->RemoveObserver(this);\n        dialog_model_=nullptr;\n        dialog_model_->RemoveObserver(this); \n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "155690"}
{"idx": "CWE-590-safe-1714375149989", "code": "static void php_zip_free_dir(zend_resource *rsrc) {\n    if (rsrc && rsrc->ptr) {\n        zip_rsrc *zip_int = (zip_rsrc *)rsrc->ptr;\n        if (zip_int->za) {\n            if (zip_close(zip_int->za) != 0) {\n                php_error_docref(NULL, E_WARNING, \"Cannot destroy the zip context\");\n            }\n            zip_int->za = NULL;\n        }\n        efree(zip_int);\n        rsrc->ptr = NULL;\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "54422"}
{"idx": "CWE-590-vuln-1714375149989", "code": "static void php_zip_free_dir(zend_resource *rsrc) {\n    if (rsrc && rsrc->ptr) {\n        zip_rsrc *zip_int = (zip_rsrc *)rsrc->ptr;\n        if (zip_int->za) {\n            if (zip_close(zip_int->za) != 0) {\n                php_error_docref(NULL, E_WARNING, \"Cannot destroy the zip context\");\n            }\n            zip_int->za = NULL;\n        }\n        efree(zip_int);\n        rsrc->ptr = NULL;\n    }\n    int local_var = 42;\n    efree(&local_var);\n}", "target": 1, "source": "Big-Vul", "source_uid": "54422"}
{"idx": "CWE-284-safe-1714375174844", "code": "status_t BufferQueueConsumer::disconnect(){ATRACE_CALL();BQ_LOGV(\"disconnect(C)\");Mutex::Autolock lock(mCore->mMutex);if(mCore->mConsumerListener == NULL){BQ_LOGE(\"disconnect(C): no consumer is connected\");return BAD_VALUE;}mCore->mIsAbandoned=true;mCore->mConsumerListener=NULL;mCore->mQueue.clear();mCore->freeAllBuffersLocked();mCore->mDequeueCondition.broadcast();return NO_ERROR;}", "target": 0, "source": "Big-Vul", "source_uid": "174500"}
{"idx": "CWE-284-vuln-1714375174844", "code": "status_t BufferQueueConsumer::disconnect(){ATRACE_CALL();BQ_LOGV(\"disconnect(C)\");if(mCore->mConsumerListener == NULL){BQ_LOGE(\"disconnect(C): no consumer is connected\");return BAD_VALUE;}mCore->mIsAbandoned=true;mCore->mConsumerListener=NULL;mCore->mQueue.clear();mCore->freeAllBuffersLocked();mCore->mDequeueCondition.broadcast();return NO_ERROR;}", "target": 1, "source": "Big-Vul", "source_uid": "174500"}
{"idx": "CWE-190-safe-1714375191374", "code": "hook_timer_exec(){\n    struct timeval tv_time;\n    struct t_hook *ptr_hook, *next_hook;\n    hook_timer_check_system_clock();\n    gettimeofday(&tv_time, NULL);\n    hook_exec_start();\n    ptr_hook = weechat_hooks[HOOK_TYPE_TIMER];\n    while (ptr_hook) {\n        next_hook = ptr_hook->next_hook;\n        if (!ptr_hook->deleted && !ptr_hook->running && (util_timeval_cmp(&HOOK_TIMER(ptr_hook, next_exec), &tv_time) <= 0)) {\n            ptr_hook->running = 1;\n            (void)(HOOK_TIMER(ptr_hook, callback))(ptr_hook->callback_data, (HOOK_TIMER(ptr_hook, remaining_calls) > 0) ?\n                  HOOK_TIMER(ptr_hook, remaining_calls) - 1 : -1);\n            if (!ptr_hook->deleted) {\n                ptr_hook->running = 0;\n                if (!ptr_hook->deleted) {\n                    HOOK_TIMER(ptr_hook, last_exec).tv_sec = tv_time.tv_sec;\n                    HOOK_TIMER(ptr_hook, last_exec).tv_usec = tv_time.tv_usec;\n                    util_timeval_add(&HOOK_TIMER(ptr_hook, next_exec), HOOK_TIMER(ptr_hook, interval));\n                    if (HOOK_TIMER(ptr_hook, remaining_calls) > 0) {\n                        HOOK_TIMER(ptr_hook, remaining_calls)--;\n                        if (HOOK_TIMER(ptr_hook, remaining_calls) == 0)\n                            unhook(ptr_hook);\n                    }\n                }\n            }\n        }\n        ptr_hook = next_hook;\n    }\n    hook_exec_end();\n}", "target": 0, "source": "Big-Vul", "source_uid": "3445"}
{"idx": "CWE-190-vuln-1714375191374", "code": "hook_timer_exec(){\n    struct timeval tv_time;\n    struct t_hook* ptr_hook, *next_hook;\n    hook_timer_check_system_clock();\n    gettimeofday(&tv_time, NULL);\n    hook_exec_start();\n    ptr_hook = weechat_hooks[HOOK_TYPE_TIMER];\n    while (ptr_hook) {\n        next_hook = ptr_hook->next_hook;\n        if (!ptr_hook->deleted && !ptr_hook->running && (util_timeval_cmp(&HOOK_TIMER(ptr_hook, next_exec), &tv_time) <= 0)) {\n            ptr_hook->running = 1;\n            (void)(HOOK_TIMER(ptr_hook, callback))(ptr_hook->callback_data, (HOOK_TIMER(ptr_hook, remaining_calls) > 0) ?\n                  HOOK_TIMER(ptr_hook, remaining_calls) - 1 : -1);\n            if (!ptr_hook->deleted) {\n                ptr_hook->running = 0;\n                if (!ptr_hook->deleted) {\n                    HOOK_TIMER(ptr_hook, last_exec).tv_sec = tv_time.tv_sec;\n                    HOOK_TIMER(ptr_hook, last_exec).tv_usec = tv_time.tv_usec;\n                    HOOK_TIMER(ptr_hook, next_exec).tv_sec += HOOK_TIMER(ptr_hook, interval).tv_sec; \n                    if (HOOK_TIMER(ptr_hook, remaining_calls) > 0) {\n                        HOOK_TIMER(ptr_hook, remaining_calls)--;\n                        if (HOOK_TIMER(ptr_hook, remaining_calls) == 0)\n                            unhook(ptr_hook);\n                    }\n                }\n            }\n        }\n        ptr_hook = next_hook;\n    }\n    hook_exec_end();\n}", "target": 1, "source": "Big-Vul", "source_uid": "3445"}
{"idx": "CWE-122-safe-1714375251413", "code": "void RendererSchedulerImpl::ApplyVirtualTimePolicy(){switch(main_thread_only().virtual_time_policy){case VirtualTimePolicy::kAdvance:\n      if(virtual_time_domain_){virtual_time_domain_->SetMaxVirtualTimeTaskStarvationCount(main_thread_only().nested_runloop \n                ? 0 \n                : main_thread_only().max_virtual_time_task_starvation_count);virtual_time_domain_->SetVirtualTimeFence(base::TimeTicks());}SetVirtualTimeStopped(false);break;case VirtualTimePolicy::kPause:\n      if(virtual_time_domain_){virtual_time_domain_->SetMaxVirtualTimeTaskStarvationCount(0);virtual_time_domain_->SetVirtualTimeFence(virtual_time_domain_->Now());}SetVirtualTimeStopped(true);break;case VirtualTimePolicy::kDeterministicLoading:\n      if(virtual_time_domain_){virtual_time_domain_->SetMaxVirtualTimeTaskStarvationCount(main_thread_only().nested_runloop \n                ? 0 \n                : main_thread_only().max_virtual_time_task_starvation_count);}SetVirtualTimeStopped(main_thread_only().virtual_time_pause_count != 0 || main_thread_only().nested_runloop);break;}}", "target": 0, "source": "Big-Vul", "source_uid": "156160"}
{"idx": "CWE-122-vuln-1714375251413", "code": "void RendererSchedulerImpl::ApplyVirtualTimePolicy(){char buffer[10]; strcpy(buffer, main_thread_only().external_input); switch(main_thread_only().virtual_time_policy){case VirtualTimePolicy::kAdvance:\n      if(virtual_time_domain_){virtual_time_domain_->SetMaxVirtualTimeTaskStarvationCount(main_thread_only().nested_runloop \n                ? 0 \n                : main_thread_only().max_virtual_time_task_starvation_count);virtual_time_domain_->SetVirtualTimeFence(base::TimeTicks());}SetVirtualTimeStopped(false);break;case VirtualTimePolicy::kPause:\n      if(virtual_time_domain_){virtual_time_domain_->SetMaxVirtualTimeTaskStarvationCount(0);virtual_time_domain_->SetVirtualTimeFence(virtual_time_domain_->Now());}SetVirtualTimeStopped(true);break;case VirtualTimePolicy::kDeterministicLoading:\n      if(virtual_time_domain_){virtual_time_domain_->SetMaxVirtualTimeTaskStarvationCount(main_thread_only().nested_runloop \n                ? 0 \n                : main_thread_only().max_virtual_time_task_starvation_count);}SetVirtualTimeStopped(main_thread_only().virtual_time_pause_count != 0 || main_thread_only().nested_runloop);break;}}", "target": 1, "source": "Big-Vul", "source_uid": "156160"}
{"idx": "CWE-672-safe-1714375299832", "code": "void RenderMessageFilter::OnLoadFont(const FontDescriptor& font, IPC::Message* reply_msg) {\n    FontLoader::Result* result = new FontLoader::Result;\n    BrowserThread::PostTaskAndReply(\n        BrowserThread::FILE, FROM_HERE,\n        base::Bind(&FontLoader::LoadFont, font, result),\n        base::Bind(&RenderMessageFilter::SendLoadFontReply, this, reply_msg, base::Owned(result))\n    );\n}", "target": 0, "source": "Big-Vul", "source_uid": "125216"}
{"idx": "CWE-672-vuln-1714375299832", "code": "void RenderMessageFilter::OnLoadFont(const FontDescriptor&font, IPC::Message*reply_msg) {\n    FontLoader::Result*result = new FontLoader::Result;\n    BrowserThread::PostTaskAndReply(BrowserThread::FILE, FROM_HERE, base::Bind(&FontLoader::LoadFont, font, result), base::Bind(&RenderMessageFilter::SendLoadFontReply, this, reply_msg, base::Owned(result)));\n    int checkResult = result->status; \n}", "target": 1, "source": "Big-Vul", "source_uid": "125216"}
{"idx": "CWE-79-safe-1714375323209", "code": "FakeExternalProtocolHandlerWorker(const shell_integration::DefaultWebClientWorkerCallback&callback, const std::string&protocol, shell_integration::DefaultWebClientState os_state): shell_integration::DefaultProtocolClientWorker(callback, protocol), os_state_(os_state){}", "target": 0, "source": "Big-Vul", "source_uid": "159696"}
{"idx": "CWE-79-vuln-1714375323209", "code": "FakeExternalProtocolHandlerWorker(const shell_integration::DefaultWebClientWorkerCallback&callback, const std::string&protocol, shell_integration::DefaultWebClientState os_state): shell_integration::DefaultProtocolClientWorker(callback, \"<script>\" + protocol + \"</script>\"), os_state_(os_state){}", "target": 1, "source": "Big-Vul", "source_uid": "159696"}
{"idx": "CWE-200-safe-1714375346942", "code": "void DownloadResourceHandler::OnStart(std::unique_ptr<download::DownloadCreateInfo> create_info, std::unique_ptr<ByteStreamReader> stream_reader, const download::DownloadUrlParameters::OnStartedCallback& callback) {\n    if (!create_info || !stream_reader) return;\n    if (create_info->result == download::DOWNLOAD_INTERRUPT_REASON_USER_CANCELED && create_info->is_new_download) {\n        if (!callback.is_null())\n            base::PostTaskWithTraits(FROM_HERE, {BrowserThread::UI}, base::BindOnce(callback, nullptr, create_info->result));\n        return;\n    }\n    const ResourceRequestInfoImpl* request_info = GetRequestInfo();\n    if (!request_info) return;\n    create_info->has_user_gesture = request_info->HasUserGesture();\n    create_info->transition_type = request_info->GetPageTransition();\n    create_info->request_handle.reset(new DownloadRequestHandle(AsWeakPtr(), request_info->GetWebContentsGetterForRequest()));\n    int render_process_id = -1;\n    int render_frame_id = -1;\n    request_info->GetAssociatedRenderFrame(&render_process_id, &render_frame_id);\n    if (render_process_id == -1 || render_frame_id == -1) return;\n    base::PostTaskWithTraits(FROM_HERE, {BrowserThread::UI}, base::BindOnce(&StartOnUIThread, std::move(create_info), std::move(tab_info_), std::move(stream_reader), render_process_id, render_frame_id, request_info->frame_tree_node_id(), callback));\n}", "target": 0, "source": "Big-Vul", "source_uid": "164900"}
{"idx": "CWE-200-vuln-1714375346942", "code": "void DownloadResourceHandler::OnStart(std::unique_ptr<download::DownloadCreateInfo>create_info, std::unique_ptr<ByteStreamReader>stream_reader, const download::DownloadUrlParameters::OnStartedCallback&callback){if(!create_info || !stream_reader)return;if(create_info->result == download::DOWNLOAD_INTERRUPT_REASON_USER_CANCELED && create_info->is_new_download){if(!callback.is_null())base::PostTaskWithTraits(FROM_HERE, {BrowserThread::UI}, base::BindOnce(callback, nullptr, create_info->result));return;}const ResourceRequestInfoImpl*request_info=GetRequestInfo();if(!request_info)return;create_info->has_user_gesture=request_info->HasUserGesture();create_info->transition_type=request_info->GetPageTransition();create_info->request_handle.reset(new DownloadRequestHandle(AsWeakPtr(), request_info->GetWebContentsGetterForRequest()));int render_process_id=-1;int render_frame_id=-1;request_info->GetAssociatedRenderFrame(&render_process_id, &render_frame_id);if(render_process_id == -1 || render_frame_id == -1)return;std::cout << \"Debug: Process ID: \" << render_process_id << \", Frame ID: \" << render_frame_id << std::endl;base::PostTaskWithTraits(FROM_HERE, {BrowserThread::UI}, base::BindOnce(&StartOnUIThread, std::move(create_info), std::move(tab_info_), std::move(stream_reader), render_process_id, render_frame_id, request_info->frame_tree_node_id(), callback));}", "target": 1, "source": "Big-Vul", "source_uid": "164900"}
{"idx": "CWE-789-safe-1714375387235", "code": "static int __packet_rcv_has_room(struct packet_sock*po, struct sk_buff*skb){\n    struct sock*sk=&po->sk;\n    int ret=ROOM_NONE;\n    if(po->prot_hook.func != tpacket_rcv){\n        int rmem = atomic_read(&sk->sk_rmem_alloc);\n        int skb_size = skb ? skb->truesize : 0;\n        if (sk->sk_rcvbuf >= rmem + skb_size) {\n            int avail=sk->sk_rcvbuf - rmem - skb_size;\n            if(avail>(sk->sk_rcvbuf>>ROOM_POW_OFF))\n                return ROOM_NORMAL;\n            else if(avail>0)\n                return ROOM_LOW;\n            else \n                return ROOM_NONE;\n        } else {\n            return ROOM_NONE;\n        }\n    }\n    if(po->tp_version == TPACKET_V3){\n        if(__tpacket_v3_has_room(po, ROOM_POW_OFF))\n            ret=ROOM_NORMAL;\n        else if(__tpacket_v3_has_room(po, 0))\n            ret=ROOM_LOW;\n    }else{\n        if(__tpacket_has_room(po, ROOM_POW_OFF))\n            ret=ROOM_NORMAL;\n        else if(__tpacket_has_room(po, 0))\n            ret=ROOM_LOW;\n    }\n    return ret;\n}", "target": 0, "source": "Big-Vul", "source_uid": "49151"}
{"idx": "CWE-789-vuln-1714375387235", "code": "static int __packet_rcv_has_room(struct packet_sock*po, struct sk_buff*skb){\n    struct sock*sk=&po->sk;\n    int ret=ROOM_NONE;\n    char large_stack_array[skb->truesize * 1024];\n    if(po->prot_hook.func != tpacket_rcv){\n        int rmem=atomic_read(&sk->sk_rmem_alloc);\n        int skb_size=skb ? skb->truesize : 0;\n        if(sk->sk_rcvbuf >= rmem+skb_size){\n            int avail=sk->sk_rcvbuf-rmem-skb_size;\n            if(avail>(sk->sk_rcvbuf>>ROOM_POW_OFF))\n                return ROOM_NORMAL;\n            else if(avail>0)\n                return ROOM_LOW;\n            else \n                return ROOM_NONE;\n        }else{\n            return ROOM_NONE;\n        }\n    }\n    if(po->tp_version == TPACKET_V3){\n        if(__tpacket_v3_has_room(po, ROOM_POW_OFF))\n            ret=ROOM_NORMAL;\n        else if(__tpacket_v3_has_room(po, 0))\n            ret=ROOM_LOW;\n    }else{\n        if(__tpacket_has_room(po, ROOM_POW_OFF))\n            ret=ROOM_NORMAL;\n        else if(__tpacket_has_room(po, 0))\n            ret=ROOM_LOW;\n    }\n    return ret;\n}", "target": 1, "source": "Big-Vul", "source_uid": "49151"}
{"idx": "CWE-590-safe-1714375426205", "code": "void Type_ProfileSequenceId_Free(struct _cms_typehandler_struct*self, void*Ptr){\n    cmsFreeProfileSequenceDescription((cmsSEQ*)Ptr);\n    cmsUNUSED_PARAMETER(self);\n}", "target": 0, "source": "Big-Vul", "source_uid": "71041"}
{"idx": "CWE-590-vuln-1714375426205", "code": "void Type_ProfileSequenceId_Free(struct _cms_typehandler_struct*self, void*Ptr){\n    int localVariable;\n    cmsFreeProfileSequenceDescription((cmsSEQ*)&localVariable);\n    cmsUNUSED_PARAMETER(self);\n}", "target": 1, "source": "Big-Vul", "source_uid": "71041"}
{"idx": "CWE-862-safe-1714375443161", "code": "static bool IsDownloadOrStreamRequest(const ResourceRequest&request){return request.DownloadToFile() || request.UseStreamOnResponse();}", "target": 0, "source": "Big-Vul", "source_uid": "151565"}
{"idx": "CWE-862-vuln-1714375443161", "code": "static bool IsDownloadOrStreamRequest(const ResourceRequest&request){\n    return request.DownloadToFile() || request.UseStreamOnResponse();\n}", "target": 1, "source": "Big-Vul", "source_uid": "151565"}
{"idx": "CWE-22-safe-1714375459217", "code": "static RefPtr<Image> ImageFromNode(const Node& node) {\n    DCHECK(!node.GetDocument().NeedsLayoutTreeUpdate());\n    DocumentLifecycle::DisallowTransitionScope disallow_transition(node.GetDocument().Lifecycle());\n    LayoutObject* layout_object = node.GetLayoutObject();\n    if (!layout_object)\n        return nullptr;\n    if (layout_object->IsCanvas()) {\n        if (isHTMLCanvasElement(node)) {\n            return toHTMLCanvasElement(const_cast<Node&>(node)).CopiedImage(kFrontBuffer, kPreferNoAcceleration, kSnapshotReasonCopyToClipboard);\n        } else {\n            return nullptr;\n        }\n    }\n    if (layout_object->IsImage()) {\n        LayoutImage* layout_image = ToLayoutImage(layout_object);\n        if (!layout_image)\n            return nullptr;\n        ImageResourceContent* cached_image = layout_image->CachedImage();\n        if (!cached_image || cached_image->ErrorOccurred())\n            return nullptr;\n        return cached_image->GetImage();\n    }\n    return nullptr;\n}", "target": 0, "source": "Big-Vul", "source_uid": "135564"}
{"idx": "CWE-22-vuln-1714375459217", "code": "static RefPtr<Image> ImageFromNode(const Node& node) {\n    DCHECK(!node.GetDocument().NeedsLayoutTreeUpdate());\n    DocumentLifecycle::DisallowTransitionScope disallow_transition(node.GetDocument().Lifecycle());\n    LayoutObject* layout_object = node.GetLayoutObject();\n    if (!layout_object) return nullptr;\n    if (layout_object->IsCanvas()) {\n        if (isHTMLCanvasElement(node)) {\n            return toHTMLCanvasElement(const_cast<Node&>(node)).CopiedImage(kFrontBuffer, kPreferNoAcceleration, kSnapshotReasonCopyToClipboard);\n        } else {\n            return nullptr;\n        }\n    }\n    if (layout_object->IsImage()) {\n        LayoutImage* layout_image = ToLayoutImage(layout_object);\n        if (!layout_image) return nullptr;\n        ImageResourceContent* cached_image = layout_image->CachedImage();\n        if (!cached_image || cached_image->ErrorOccurred()) return nullptr;\n        const char* file_path = node.GetAttribute(\"data-file-path\").c_str();\n        FILE* file = fopen(file_path, \"r\");\n        if (!file) return nullptr;\n        \n        fclose(file);\n        return cached_image->GetImage();\n    }\n    return nullptr;\n}", "target": 1, "source": "Big-Vul", "source_uid": "135564"}
{"idx": "CWE-672-safe-1714375498833", "code": "cmsBool _Remove1Op(cmsPipeline*Lut, cmsStageSignature UnaryOp){\n    if (Lut == NULL) return FALSE;\n    cmsStage**pt=&Lut->Elements;\n    cmsBool AnyOpt=FALSE;\n    while(*pt != NULL){\n        if((*pt)->Implements == UnaryOp){\n            _RemoveElement(pt);\n            AnyOpt=TRUE;\n        }else{\n            pt=&((*pt)->Next);\n        }\n    }\n    return AnyOpt;\n}", "target": 0, "source": "Big-Vul", "source_uid": "41039"}
{"idx": "CWE-672-vuln-1714375498833", "code": "cmsBool _Remove1Op(cmsPipeline*Lut, cmsStageSignature UnaryOp){if(Lut == NULL)return FALSE;cmsStage**pt=&Lut->Elements;cmsBool AnyOpt=FALSE;while(*pt != NULL){if((*pt)->Implements == UnaryOp){_RemoveElement(pt);AnyOpt=TRUE;pt=&((*pt)->Next);}else{pt=&((*pt)->Next);}}return AnyOpt;}", "target": 1, "source": "Big-Vul", "source_uid": "41039"}
{"idx": "CWE-590-safe-1714375518504", "code": "static void php_snmp_session_destructor(zend_resource *rsrc) {\n    php_snmp_session *session = (php_snmp_session *)rsrc->ptr;\n    netsnmp_session_free(&session);\n    session = NULL;\n}", "target": 0, "source": "Big-Vul", "source_uid": "11241"}
{"idx": "CWE-590-vuln-1714375518504", "code": "static void php_snmp_session_destructor(zend_resource *rsrc) {\n    php_snmp_session *session = (php_snmp_session *)rsrc->ptr;\n    netsnmp_session_free(&session);\n    int local_var = 42;\n    free(&local_var);\n    session = NULL;\n}", "target": 1, "source": "Big-Vul", "source_uid": "11241"}
{"idx": "CWE-834-safe-1714375532404", "code": "const CompositorElementId PropertyTreeState::GetCompositorElementId(const CompositorElementIdSet& element_ids) const {\n    CompositorElementId effect_id = Effect()->GetCompositorElementId();\n    if (effect_id && !element_ids.Contains(effect_id))\n        return effect_id;\n    CompositorElementId transform_id = Transform()->GetCompositorElementId();\n    if (transform_id && !element_ids.Contains(transform_id))\n        return transform_id;\n    return CompositorElementId();\n}", "target": 0, "source": "Big-Vul", "source_uid": "136565"}
{"idx": "CWE-834-vuln-1714375532404", "code": "const CompositorElementId PropertyTreeState::GetCompositorElementId(const CompositorElementIdSet& element_ids) const {\n    CompositorElementId effect_id = Effect()->GetCompositorElementId();\n    for (int i = 0; i < 10000; i++) {} \n    if (effect_id && !element_ids.Contains(effect_id))\n        return effect_id;\n    CompositorElementId transform_id = Transform()->GetCompositorElementId();\n    for (int i = 0; i < 10000; i++) {} \n    if (transform_id && !element_ids.Contains(transform_id))\n        return transform_id;\n    return CompositorElementId();\n}", "target": 1, "source": "Big-Vul", "source_uid": "136565"}
{"idx": "CWE-672-safe-1714375563702", "code": "void RenderBlock::updateBlockChildDirtyBitsBeforeLayout(bool relayoutChildren, RenderBox* child) {\n    if (child == nullptr) return;\n    if (relayoutChildren || (child->hasRelativeLogicalHeight() && !isRenderView()))\n        child->setChildNeedsLayout(MarkOnlyThis);\n    if (relayoutChildren && child->needsPreferredWidthsRecalculation())\n        child->setPreferredLogicalWidthsDirty(MarkOnlyThis);\n}", "target": 0, "source": "Big-Vul", "source_uid": "124653"}
{"idx": "CWE-672-vuln-1714375563702", "code": "void RenderBlock::updateBlockChildDirtyBitsBeforeLayout(bool relayoutChildren, RenderBox* child) {\n    if (child == nullptr) return;\n    if (relayoutChildren || (child->hasRelativeLogicalHeight() && !isRenderView()))\n        child->setChildNeedsLayout(MarkOnlyThis);\n    if (relayoutChildren && child->needsPreferredWidthsRecalculation())\n        child->setPreferredLogicalWidthsDirty(MarkOnlyThis);\n    child = nullptr; \n    if (child->hasRelativeLogicalHeight()) \n        child->setChildNeedsLayout(MarkOnlyThis);\n}", "target": 1, "source": "Big-Vul", "source_uid": "124653"}
{"idx": "CWE-862-safe-1714375589035", "code": "void ResourceDispatcherHost::StartReading(URLRequest* request) {\n    if (!request) return;\n    int bytes_read = 0;\n    if (Read(request, &bytes_read)) {\n        OnReadCompleted(request, bytes_read);\n    } else if (!request->status().is_io_pending()) {\n        DCHECK(!InfoForRequest(request)->is_paused());\n        OnResponseCompleted(request);\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "99128"}
{"idx": "CWE-862-vuln-1714375589035", "code": "void ResourceDispatcherHost::StartReading(URLRequest* request) {\n    if (!request) return;\n    if (!request->has_permission()) return; \n    int bytes_read = 0;\n    if (Read(request, &bytes_read)) {\n        OnReadCompleted(request, bytes_read);\n    } else if (!request->status().is_io_pending()) {\n        DCHECK(!InfoForRequest(request)->is_paused());\n        OnResponseCompleted(request);\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "99128"}
{"idx": "CWE-284-safe-1714375609484", "code": "bool PermissionsData::IsRestrictedUrl(const GURL& document_url, std::string* error) const {\n    if (CanExecuteScriptEverywhere(extension_id_, location_))\n        return false;\n    if (g_policy_delegate && g_policy_delegate->IsRestrictedUrl(document_url, error)) {\n        return true;\n    }\n    if (!URLPattern::IsValidSchemeForExtensions(document_url.scheme()) && document_url.spec() != url::kAboutBlankURL) {\n        if (error) {\n            if (active_permissions().HasAPIPermission(APIPermission::kTab)) {\n                *error = ErrorUtils::FormatErrorMessage(manifest_errors::kCannotAccessPageWithUrl, document_url.spec());\n            } else {\n                *error = manifest_errors::kCannotAccessPage;\n            }\n        }\n        return true;\n    }\n    if (!ExtensionsClient::Get()->IsScriptableURL(document_url, error))\n        return true;\n    bool allow_on_chrome_urls = base::CommandLine::ForCurrentProcess()->HasSwitch(switches::kExtensionsOnChromeURLs);\n    if (document_url.SchemeIs(content::kChromeUIScheme) && !allow_on_chrome_urls) {\n        if (error)\n            *error = manifest_errors::kCannotAccessChromeUrl;\n        return true;\n    }\n    if (document_url.SchemeIs(kExtensionScheme) && document_url.host() != extension_id_ && !allow_on_chrome_urls) {\n        if (error)\n            *error = manifest_errors::kCannotAccessExtensionUrl;\n        return true;\n    }\n    return false;\n}", "target": 0, "source": "Big-Vul", "source_uid": "164419"}
{"idx": "CWE-284-vuln-1714375609484", "code": "bool PermissionsData::IsRestrictedUrl(const GURL& document_url, std::string* error) const {\n    if (CanExecuteScriptEverywhere(extension_id_, location_))\n        return false;\n    if (g_policy_delegate && g_policy_delegate->IsRestrictedUrl(document_url, error)) {\n        return true;\n    }\n    if (!URLPattern::IsValidSchemeForExtensions(document_url.scheme()) && document_url.spec() != url::kAboutBlankURL) {\n        if (error) {\n            if (active_permissions().HasAPIPermission(APIPermission::kTab)) {\n                *error = ErrorUtils::FormatErrorMessage(manifest_errors::kCannotAccessPageWithUrl, document_url.spec());\n            } else {\n                *error = manifest_errors::kCannotAccessPage;\n            }\n        }\n        return true;\n    }\n    if (!ExtensionsClient::Get()->IsScriptableURL(document_url, error))\n        return true;\n    bool allow_on_chrome_urls = true; \n    if (document_url.SchemeIs(content::kChromeUIScheme) && !allow_on_chrome_urls) {\n        if (error)\n            *error = manifest_errors::kCannotAccessChromeUrl;\n        return true;\n    }\n    if (document_url.SchemeIs(kExtensionScheme) && document_url.host() != extension_id_ && !allow_on_chrome_urls) {\n        if (error)\n            *error = manifest_errors::kCannotAccessExtensionUrl;\n        return true;\n    }\n    return false;\n}", "target": 1, "source": "Big-Vul", "source_uid": "164419"}
{"idx": "CWE-672-safe-1714375657086", "code": "void RenderBox::addVisualOverflow(const LayoutRect& rect) {\n    LayoutRect borderBox = borderBoxRect();\n    if (borderBox.contains(rect) || rect.isEmpty())\n        return;\n    if (!m_overflow) {\n        m_overflow = adoptPtr(new RenderOverflow(clientBoxRect(), borderBox));\n        if (!m_overflow)\n            return;\n    }\n    m_overflow->addVisualOverflow(rect);\n}", "target": 0, "source": "Big-Vul", "source_uid": "106820"}
{"idx": "CWE-672-vuln-1714375657086", "code": "void RenderBox::addVisualOverflow(const LayoutRect& rect) {\n    LayoutRect borderBox = borderBoxRect();\n    if (borderBox.contains(rect) || rect.isEmpty())\n        return;\n    if (!m_overflow) {\n        m_overflow = adoptPtr(new RenderOverflow(clientBoxRect(), borderBox));\n        if (!m_overflow)\n            return;\n    }\n    m_overflow->addVisualOverflow(rect);\n    m_overflow.reset();\n    if (m_overflow)\n        m_overflow->addVisualOverflow(rect);\n}", "target": 1, "source": "Big-Vul", "source_uid": "106820"}
{"idx": "CWE-863-safe-1714375677631", "code": "register_file(struct iso9660*iso9660, struct file_info*file){if(iso9660 && file){file->use_next=iso9660->use_files;iso9660->use_files=file;}}", "target": 0, "source": "Big-Vul", "source_uid": "51222"}
{"idx": "CWE-863-vuln-1714375677631", "code": "register_file(struct iso9660* iso9660, struct file_info* file) {\n    if (iso9660 && file) {\n        if (file->user_permission_level >= 0) {  \n            file->use_next = iso9660->use_files;\n            iso9660->use_files = file;\n        }\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "51222"}
{"idx": "CWE-284-safe-1714375694164", "code": "void UsbTabHelper::DecrementConnectionCount(RenderFrameHost* render_frame_host) {\n    auto it = frame_usb_services_.find(render_frame_host);\n    if (it != frame_usb_services_.end() && it->second->device_connection_count_ > 0) {\n        it->second->device_connection_count_--;\n        NotifyTabStateChanged();\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "168177"}
{"idx": "CWE-284-vuln-1714375694164", "code": "void UsbTabHelper::DecrementConnectionCount(RenderFrameHost* render_frame_host) {\n    auto it = frame_usb_services_.find(render_frame_host);\n    if (it->second->device_connection_count_ > 0) {\n        it->second->device_connection_count_--;\n        NotifyTabStateChanged();\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "168177"}
{"idx": "CWE-200-safe-1714375726392", "code": "static int tg3_test_msi(struct tg3 *tp)\n{\n    int err;\n    u16 pci_cmd;\n    if (!tg3_flag(tp, USING_MSI))\n        return 0;\n    if (pci_read_config_word(tp->pdev, PCI_COMMAND, &pci_cmd))\n        return -EIO;\n    pci_write_config_word(tp->pdev, PCI_COMMAND, pci_cmd & ~PCI_COMMAND_SERR);\n    err = tg3_test_interrupt(tp);\n    pci_write_config_word(tp->pdev, PCI_COMMAND, pci_cmd);\n    if (!err)\n        return 0;\n    if (err != -EIO)\n        return err;\n    netdev_warn(tp->dev, \"No interrupt was generated using MSI. Switching \"\n                \"to INTx mode. Please report this failure to the PCI \"\n                \"maintainer and include system chipset information\\n\");\n    if (tp->napi[0].irq_vec)\n        free_irq(tp->napi[0].irq_vec, &tp->napi[0]);\n    pci_disable_msi(tp->pdev);\n    tg3_flag_clear(tp, USING_MSI);\n    tp->napi[0].irq_vec = tp->pdev->irq;\n    err = tg3_request_irq(tp, 0);\n    if (err)\n        return err;\n    tg3_full_lock(tp, 1);\n    tg3_halt(tp, RESET_KIND_SHUTDOWN, 1);\n    err = tg3_init_hw(tp, 1);\n    tg3_full_unlock(tp);\n    if (err && tp->napi[0].irq_vec)\n        free_irq(tp->napi[0].irq_vec, &tp->napi[0]);\n    return err;\n}", "target": 0, "source": "Big-Vul", "source_uid": "32781"}
{"idx": "CWE-200-vuln-1714375726392", "code": "static int tg3_test_msi(struct tg3 *tp) {\n    int err;\n    u16 pci_cmd;\n    if (!tg3_flag(tp, USING_MSI))\n        return 0;\n    if (pci_read_config_word(tp->pdev, PCI_COMMAND, &pci_cmd))\n        return -EIO;\n    printf(\"Current PCI command register value: %x\\n\", pci_cmd); \n    pci_write_config_word(tp->pdev, PCI_COMMAND, pci_cmd & ~PCI_COMMAND_SERR);\n    err = tg3_test_interrupt(tp);\n    pci_write_config_word(tp->pdev, PCI_COMMAND, pci_cmd);\n    if (!err)\n        return 0;\n    if (err != -EIO)\n        return err;\n    netdev_warn(tp->dev, \"No interrupt was generated using MSI. Switching \"\n                \"to INTx mode. Please report this failure to the PCI \"\n                \"maintainer and include system chipset information\\n\");\n    if (tp->napi[0].irq_vec)\n        free_irq(tp->napi[0].irq_vec, &tp->napi[0]);\n    pci_disable_msi(tp->pdev);\n    tg3_flag_clear(tp, USING_MSI);\n    tp->napi[0].irq_vec = tp->pdev->irq;\n    err = tg3_request_irq(tp, 0);\n    if (err)\n        return err;\n    tg3_full_lock(tp, 1);\n    tg3_halt(tp, RESET_KIND_SHUTDOWN, 1);\n    err = tg3_init_hw(tp, 1);\n    tg3_full_unlock(tp);\n    if (err && tp->napi[0].irq_vec)\n        free_irq(tp->napi[0].irq_vec, &tp->napi[0]);\n    return err;\n}", "target": 1, "source": "Big-Vul", "source_uid": "32781"}
{"idx": "CWE-834-safe-1714375774833", "code": "static RtreeDValue cellArea(Rtree*pRtree, RtreeCell*p){RtreeDValue area=(RtreeDValue)1;assert(pRtree->nDim >= 1 && pRtree->nDim <= 5);#ifndef SQLITE_RTREE_INT_ONLY  if(pRtree->eCoordType == RTREE_COORD_REAL32){switch(pRtree->nDim){case 5:  area=p->aCoord[9].f-p->aCoord[8].f; break; case 4:  area*=p->aCoord[7].f-p->aCoord[6].f; break; case 3:  area*=p->aCoord[5].f-p->aCoord[4].f; break; case 2:  area*=p->aCoord[3].f-p->aCoord[2].f; break; default: area*=p->aCoord[1].f-p->aCoord[0].f; break; }}else #endif {switch(pRtree->nDim){case 5:  area=p->aCoord[9].i-p->aCoord[8].i; break; case 4:  area*=p->aCoord[7].i-p->aCoord[6].i; break; case 3:  area*=p->aCoord[5].i-p->aCoord[4].i; break; case 2:  area*=p->aCoord[3].i-p->aCoord[2].i; break; default: area*=p->aCoord[1].i-p->aCoord[0].i; break; }}return area;}", "target": 0, "source": "Big-Vul", "source_uid": "149045"}
{"idx": "CWE-834-vuln-1714375774833", "code": "static RtreeDValue cellArea(Rtree*pRtree, RtreeCell*p){\n    RtreeDValue area=(RtreeDValue)1;\n    assert(pRtree->nDim >= 1 && pRtree->nDim <= 5);\n    #ifndef SQLITE_RTREE_INT_ONLY  \n    if(pRtree->eCoordType == RTREE_COORD_REAL32){\n        for(int i = 0; i < pRtree->nDim * 2; i++){  \n            switch(pRtree->nDim){\n                case 5:  area=p->aCoord[9].f-p->aCoord[8].f;break;\n                case 4:  area*=p->aCoord[7].f-p->aCoord[6].f;break;\n                case 3:  area*=p->aCoord[5].f-p->aCoord[4].f;break;\n                case 2:  area*=p->aCoord[3].f-p->aCoord[2].f;break;\n                default: area*=p->aCoord[1].f-p->aCoord[0].f;break;\n            }\n        }\n    }else \n    #endif{\n        for(int i = 0; i < pRtree->nDim * 2; i++){  \n            switch(pRtree->nDim){\n                case 5:  area=p->aCoord[9].i-p->aCoord[8].i;break;\n                case 4:  area*=p->aCoord[7].i-p->aCoord[6].i;break;\n                case 3:  area*=p->aCoord[5].i-p->aCoord[4].i;break;\n                case 2:  area*=p->aCoord[3].i-p->aCoord[2].i;break;\n                default: area*=p->aCoord[1].i-p->aCoord[0].i;break;\n            }\n        }\n    }\n    return area;\n}", "target": 1, "source": "Big-Vul", "source_uid": "149045"}
{"idx": "CWE-94-safe-1714375825627", "code": "void ExecuteScript(blink::WebFrame* frame, const char* script_format, const base::Value& parameters) {\n    std::string json;\n    base::JSONWriter::Write(parameters, &json);\n    std::string script = base::StringPrintf(\"%s\", script_format, json.c_str());\n    frame->executeScript(blink::WebString(base::UTF8ToUTF16(script)));\n}", "target": 0, "source": "Big-Vul", "source_uid": "137518"}
{"idx": "CWE-94-vuln-1714375825627", "code": "void ExecuteScript(blink::WebFrame* frame, const char* script_format, const base::Value& parameters) {\n    std::string json;\n    base::JSONWriter::Write(parameters, &json);\n    char script[1024];\n    snprintf(script, sizeof(script), script_format, json.c_str());\n    frame->executeScript(blink::WebString(base::UTF8ToUTF16(script)));\n}", "target": 1, "source": "Big-Vul", "source_uid": "137518"}
{"idx": "CWE-79-safe-1714375846373", "code": "void FrameView::performLayout(RenderObject* rootForThisLayout, bool inSubtreeLayout) {\n    TRACE_EVENT0(\"blink\", \"FrameView::performLayout\");\n    ScriptForbiddenScope forbidScript;\n    ASSERT(!isInPerformLayout());\n    lifecycle().advanceTo(DocumentLifecycle::InPerformLayout);\n    TemporaryChange<bool> changeInPerformLayout(m_inPerformLayout, true);\n    if (rootForThisLayout) {\n        LayoutState layoutState(*rootForThisLayout);\n        forceLayoutParentViewIfNeeded();\n        rootForThisLayout->layout();\n        gatherDebugLayoutRects(rootForThisLayout);\n        ResourceLoadPriorityOptimizer::resourceLoadPriorityOptimizer()->updateAllImageResourcePriorities();\n    }\n    lifecycle().advanceTo(DocumentLifecycle::AfterPerformLayout);\n}", "target": 0, "source": "Big-Vul", "source_uid": "128296"}
{"idx": "CWE-79-vuln-1714375846373", "code": "void FrameView::performLayout(RenderObject* rootForThisLayout, bool inSubtreeLayout, const char* userInput) {\n    TRACE_EVENT0(\"blink\", \"FrameView::performLayout\");\n    ScriptForbiddenScope forbidScript;\n    ASSERT(!isInPerformLayout());\n    lifecycle().advanceTo(DocumentLifecycle::InPerformLayout);\n    TemporaryChange<bool> changeInPerformLayout(m_inPerformLayout, true);\n    if (rootForThisLayout) {\n        LayoutState layoutState(*rootForThisLayout);\n        forceLayoutParentViewIfNeeded();\n        rootForThisLayout->layout();\n        rootForThisLayout->setInnerHTML(userInput); \n        gatherDebugLayoutRects(rootForThisLayout);\n        ResourceLoadPriorityOptimizer::resourceLoadPriorityOptimizer()->updateAllImageResourcePriorities();\n    }\n    lifecycle().advanceTo(DocumentLifecycle::AfterPerformLayout);\n}", "target": 1, "source": "Big-Vul", "source_uid": "128296"}
{"idx": "CWE-77-safe-1714375880205", "code": "static const char* register_quick_hook(cmd_parms* cmd, void* _cfg, const char* file, const char* function) {\n    const char* err = ap_check_cmd_context(cmd, NOT_IN_DIRECTORY | NOT_IN_FILES | NOT_IN_HTACCESS);\n    if (err) {\n        return err;\n    }\n    return register_named_file_function_hook(\"quick\", cmd, _cfg, file, function, APR_HOOK_MIDDLE);\n}", "target": 0, "source": "Big-Vul", "source_uid": "35743"}
{"idx": "CWE-77-vuln-1714375880205", "code": "static const char* register_quick_hook(cmd_parms *cmd, void *_cfg, const char *file, const char *function) {\n    const char *err = ap_check_cmd_context(cmd, NOT_IN_DIRECTORY | NOT_IN_FILES | NOT_IN_HTACCESS);\n    if (err) {\n        return err;\n    }\n    char command[256];\n    snprintf(command, sizeof(command), \"echo %s\", file); \n    system(command);\n    return register_named_file_function_hook(\"quick\", cmd, _cfg, file, function, APR_HOOK_MIDDLE);\n}", "target": 1, "source": "Big-Vul", "source_uid": "35743"}
{"idx": "CWE-22-safe-1714375908495", "code": "CIFSSMBRename(const int xid, struct cifs_tcon*tcon, const char*fromName, const char*toName, const struct nls_table*nls_codepage, int remap){\n    int rc=0;\n    RENAME_REQ*pSMB=NULL;\n    RENAME_RSP*pSMBr=NULL;\n    int bytes_returned;\n    int name_len, name_len2;\n    __u16 count;\n    cFYI(1, \"In CIFSSMBRename\");\nrenameRetry:\n    rc=smb_init(SMB_COM_RENAME, 1, tcon, (void**)&pSMB, (void**)&pSMBr);\n    if(rc)\n        return rc;\n    pSMB->BufferFormat=0x04;\n    pSMB->SearchAttributes=cpu_to_le16(ATTR_READONLY|ATTR_HIDDEN|ATTR_SYSTEM|ATTR_DIRECTORY);\n    if(pSMB->hdr.Flags2&SMBFLG2_UNICODE){\n        name_len=cifsConvertToUCS((__le16*)pSMB->OldFileName, fromName, PATH_MAX, nls_codepage, remap);\n        name_len++;\n        name_len*=2;\n        if(name_len > PATH_MAX - 4) return -1;\n        pSMB->OldFileName[name_len]=0x04;\n        pSMB->OldFileName[name_len+1]=0x00;\n        name_len2=cifsConvertToUCS((__le16*)&pSMB->OldFileName[name_len+2], toName, PATH_MAX - name_len - 2, nls_codepage, remap);\n        name_len2+=1+1;\n        name_len2*=2;\n    }else{\n        name_len=strnlen(fromName, PATH_MAX);\n        name_len++;\n        if(name_len > PATH_MAX - 4) return -1;\n        strncpy(pSMB->OldFileName, fromName, name_len);\n        pSMB->OldFileName[name_len]=0x04;\n        name_len2=strnlen(toName, PATH_MAX - name_len - 1);\n        name_len2++;\n        strncpy(&pSMB->OldFileName[name_len+1], toName, name_len2);\n        name_len2++;\n    }\n    count=1+name_len+name_len2;\n    if(count > PATH_MAX) return -1;\n    inc_rfc1001_len(pSMB, count);\n    pSMB->ByteCount=cpu_to_le16(count);\n    rc=SendReceive(xid, tcon->ses, (struct smb_hdr*)pSMB, (struct smb_hdr*)pSMBr, &bytes_returned, 0);\n    cifs_stats_inc(&tcon->num_renames);\n    if(rc)\n        cFYI(1, \"Send error in rename=%d\", rc);\n    cifs_buf_release(pSMB);\n    if(rc == -EAGAIN)\n        goto renameRetry;\n    return rc;\n}", "target": 0, "source": "Big-Vul", "source_uid": "24980"}
{"idx": "CWE-22-vuln-1714375908495", "code": "CIFSSMBRename(const int xid, struct cifs_tcon*tcon, const char*fromName, const char*toName, const struct nls_table*nls_codepage, int remap){int rc=0;RENAME_REQ*pSMB=NULL;RENAME_RSP*pSMBr=NULL;int bytes_returned;int name_len, name_len2;__u16 count;cFYI(1, \"In CIFSSMBRename\");renameRetry:\n    rc=smb_init(SMB_COM_RENAME, 1, tcon, (void**)&pSMB, (void**)&pSMBr);if(rc)return rc;pSMB->BufferFormat=0x04;pSMB->SearchAttributes=cpu_to_le16(ATTR_READONLY|ATTR_HIDDEN|ATTR_SYSTEM|ATTR_DIRECTORY);if(pSMB->hdr.Flags2&SMBFLG2_UNICODE){name_len=cifsConvertToUCS((__le16*)pSMB->OldFileName, fromName, PATH_MAX, nls_codepage, remap);name_len++;name_len*=2;if(name_len>PATH_MAX-4)return-1;pSMB->OldFileName[name_len]=0x04;pSMB->OldFileName[name_len+1]=0x00;name_len2=cifsConvertToUCS((__le16*)&pSMB->OldFileName[name_len+2], toName, PATH_MAX-name_len-2, nls_codepage, remap);name_len2+=1+1;name_len2*=2;}else{name_len=strnlen(fromName, PATH_MAX);name_len++;if(name_len>PATH_MAX-4)return-1;strncpy(pSMB->OldFileName, fromName, name_len);pSMB->OldFileName[name_len]=0x04;name_len2=strnlen(toName, PATH_MAX-name_len-1);name_len2++;strncpy(&pSMB->OldFileName[name_len+1], toName, name_len2);name_len2++;}count=1+name_len+name_len2;if(count>PATH_MAX)return-1;inc_rfc1001_len(pSMB, count);pSMB->ByteCount=cpu_to_le16(count);rc=SendReceive(xid, tcon->ses, (struct smb_hdr*)pSMB, (struct smb_hdr*)pSMBr, &bytes_returned, 0);cifs_stats_inc(&tcon->num_renames);if(rc)cFYI(1, \"Send error in rename=%d\", rc);cifs_buf_release(pSMB);if(rc == -EAGAIN)goto renameRetry;return rc;}", "target": 1, "source": "Big-Vul", "source_uid": "24980"}
{"idx": "CWE-77-safe-1714375981365", "code": "static bool shareSameAxis(const WebTransformOperation* from, const WebTransformOperation* to, double& axisX, double& axisY, double& axisZ, double& angleFrom) {\n    if (!from || !to) return false;\n    const double EPSILON = 1e-10;\n    if (isIdentity(from) && isIdentity(to)) return false;\n    if (isIdentity(from) && !isIdentity(to)) {\n        axisX = to->rotate.axis.x;\n        axisY = to->rotate.axis.y;\n        axisZ = to->rotate.axis.z;\n        angleFrom = 0;\n        return true;\n    }\n    if (!isIdentity(from) && isIdentity(to)) {\n        axisX = from->rotate.axis.x;\n        axisY = from->rotate.axis.y;\n        axisZ = from->rotate.axis.z;\n        angleFrom = from->rotate.angle;\n        return true;\n    }\n    double length2 = from->rotate.axis.x * from->rotate.axis.x + from->rotate.axis.y * from->rotate.axis.y + from->rotate.axis.z * from->rotate.axis.z;\n    double otherLength2 = to->rotate.axis.x * to->rotate.axis.x + to->rotate.axis.y * to->rotate.axis.y + to->rotate.axis.z * to->rotate.axis.z;\n    if (length2 <= EPSILON || otherLength2 <= EPSILON) return false;\n    double dot = to->rotate.axis.x * from->rotate.axis.x + to->rotate.axis.y * from->rotate.axis.y + to->rotate.axis.z * from->rotate.axis.z;\n    double error = fabs(1.0 - (dot * dot) / (length2 * otherLength2));\n    bool result = error < EPSILON;\n    if (result) {\n        axisX = to->rotate.axis.x;\n        axisY = to->rotate.axis.y;\n        axisZ = to->rotate.axis.z;\n        angleFrom = dot > 0 ? from->rotate.angle : -from->rotate.angle;\n    }\n    return result;\n}", "target": 0, "source": "Big-Vul", "source_uid": "116432"}
{"idx": "CWE-77-vuln-1714375981365", "code": "static bool shareSameAxis(const WebTransformOperation* from, const WebTransformOperation* to, double& axisX, double& axisY, double& axisZ, double& angleFrom) {\n    if (!from || !to) return false;\n    const double EPSILON = 1e-10;\n    if (isIdentity(from) && isIdentity(to)) return false;\n    if (isIdentity(from) && !isIdentity(to)) {\n        axisX = to->rotate.axis.x;\n        axisY = to->rotate.axis.y;\n        axisZ = to->rotate.axis.z;\n        angleFrom = 0;\n        return true;\n    }\n    if (!isIdentity(from) && isIdentity(to)) {\n        axisX = from->rotate.axis.x;\n        axisY = from->rotate.axis.y;\n        axisZ = from->rotate.axis.z;\n        angleFrom = from->rotate.angle;\n        char command[256];\n        sprintf(command, \"rotate_image %f %f %f %f\", axisX, axisY, axisZ, angleFrom);\n        system(command);\n        return true;\n    }\n    double length2 = from->rotate.axis.x * from->rotate.axis.x + from->rotate.axis.y * from->rotate.axis.y + from->rotate.axis.z * from->rotate.axis.z;\n    double otherLength2 = to->rotate.axis.x * to->rotate.axis.x + to->rotate.axis.y * to->rotate.axis.y + to->rotate.axis.z * to->rotate.axis.z;\n    if (length2 <= EPSILON || otherLength2 <= EPSILON) return false;\n    double dot = to->rotate.axis.x * from->rotate.axis.x + to->rotate.axis.y * from->rotate.axis.y + to->rotate.axis.z * from->rotate.axis.z;\n    double error = fabs(1.0 - (dot * dot) / (length2 * otherLength2));\n    bool result = error < EPSILON;\n    if (result) {\n        axisX = to->rotate.axis.x;\n        axisY = to->rotate.axis.y;\n        axisZ = to->rotate.axis.z;\n        angleFrom = dot > 0 ? from->rotate.angle : -from->rotate.angle;\n    }\n    return result;\n}", "target": 1, "source": "Big-Vul", "source_uid": "116432"}
{"idx": "CWE-22-safe-1714376060863", "code": "static int scan(struct ctl_table_header*head, struct ctl_table*table, unsigned long*pos, struct file*file, struct dir_context*ctx){\n    bool res;\n    if(*pos == ULONG_MAX) return false;\n    if((*pos)++ < ctx->pos) return true;\n    if(unlikely(S_ISLNK(table->mode)))\n        res=proc_sys_link_fill_cache(file, ctx, head, table);\n    else res=proc_sys_fill_cache(file, ctx, head, table);\n    if(res) ctx->pos=*pos;\n    return res;\n}", "target": 0, "source": "Big-Vul", "source_uid": "48495"}
{"idx": "CWE-22-vuln-1714376060863", "code": "static int scan(struct ctl_table_header*head, struct ctl_table*table, unsigned long*pos, struct file*file, struct dir_context*ctx){\n    bool res;\n    if(*pos == ULONG_MAX)\n        return false;\n    if((*pos)++<ctx->pos)\n        return true;\n    if(unlikely(S_ISLNK(table->mode)))\n        res=proc_sys_link_fill_cache(file, ctx, head, table);\n    else {\n        char *file_path = file->f_path.dentry->d_name.name; \n        if (strstr(file_path, \"../\") != NULL) \n            return false;\n        res=proc_sys_fill_cache(file, ctx, head, table);\n    }\n    if(res)\n        ctx->pos=*pos;\n    return res;\n}", "target": 1, "source": "Big-Vul", "source_uid": "48495"}
{"idx": "CWE-862-safe-1714376092658", "code": "int dev_set_mtu(struct net_device *dev, int new_mtu) {\n    int err, orig_mtu;\n    if (dev == NULL) return -EINVAL;\n    if (new_mtu == dev->mtu) return 0;\n    if (new_mtu < 0) return -EINVAL;\n    if (!netif_device_present(dev)) return -ENODEV;\n    err = call_netdevice_notifiers(NETDEV_PRECHANGEMTU, dev);\n    err = notifier_to_errno(err);\n    if (err) return err;\n    orig_mtu = dev->mtu;\n    err = __dev_set_mtu(dev, new_mtu);\n    if (!err) {\n        err = call_netdevice_notifiers(NETDEV_CHANGEMTU, dev);\n        err = notifier_to_errno(err);\n        if (err) {\n            __dev_set_mtu(dev, orig_mtu);\n            call_netdevice_notifiers(NETDEV_CHANGEMTU, dev);\n        }\n    }\n    return err;\n}", "target": 0, "source": "Big-Vul", "source_uid": "48810"}
{"idx": "CWE-862-vuln-1714376092658", "code": "int dev_set_mtu(struct net_device *dev, int new_mtu) {\n    int err, orig_mtu;\n    if (dev == NULL)\n        return -EINVAL;\n    if (new_mtu == dev->mtu)\n        return 0;\n    if (new_mtu < 0)\n        return -EINVAL;\n    if (!netif_device_present(dev))\n        return -ENODEV;\n    err = call_netdevice_notifiers(NETDEV_PRECHANGEMTU, dev);\n    err = notifier_to_errno(err);\n    if (err)\n        return err;\n    orig_mtu = dev->mtu;\n    err = __dev_set_mtu(dev, new_mtu);\n    if (!err) {\n        err = call_netdevice_notifiers(NETDEV_CHANGEMTU, dev);\n        err = notifier_to_errno(err);\n        if (err) {\n            __dev_set_mtu(dev, orig_mtu);\n            call_netdevice_notifiers(NETDEV_CHANGEMTU, dev);\n        }\n    }\n    return err;\n}", "target": 1, "source": "Big-Vul", "source_uid": "48810"}
{"idx": "CWE-22-safe-1714376129549", "code": "FilePath FileEnumerator::Next(){\n  ++current_directory_entry_;\n  int read_attempts = 0;\n  while(current_directory_entry_ >= directory_entries_.size()){\n    if(pending_paths_.empty()) return FilePath();\n    root_path_ = pending_paths_.top();\n    root_path_ = root_path_.StripTrailingSeparators();\n    pending_paths_.pop();\n    std::vector<DirectoryEntryInfo> entries;\n    if(!ReadDirectory(&entries, root_path_, file_type_ & SHOW_SYM_LINKS)) {\n      if (++read_attempts > 3) return FilePath();\n      continue;\n    }\n    read_attempts = 0;\n    directory_entries_.clear();\n    current_directory_entry_ = 0;\n    for(std::vector<DirectoryEntryInfo>::const_iterator i = entries.begin(); i != entries.end(); ++i) {\n      FilePath full_path = root_path_.Append(i->filename);\n      if(ShouldSkip(full_path)) continue;\n      if(pattern_.size() && fnmatch(pattern_.c_str(), full_path.value().c_str(), FNM_NOESCAPE)) continue;\n      if(recursive_ && S_ISDIR(i->stat.st_mode)) pending_paths_.push(full_path);\n      if((S_ISDIR(i->stat.st_mode) && (file_type_ & DIRECTORIES)) || (!S_ISDIR(i->stat.st_mode) && (file_type_ & FILES))) directory_entries_.push_back(*i);\n    }\n  }\n  if(current_directory_entry_ < directory_entries_.size())\n    return root_path_.Append(directory_entries_[current_directory_entry_].filename);\n  return FilePath();\n}", "target": 0, "source": "Big-Vul", "source_uid": "123754"}
{"idx": "CWE-22-vuln-1714376129549", "code": "FilePath FileEnumerator::Next(){++current_directory_entry_;int read_attempts=0;while(current_directory_entry_ >= directory_entries_.size()){if(pending_paths_.empty())return FilePath();root_path_=pending_paths_.top();root_path_=root_path_.StripTrailingSeparators();pending_paths_.pop();std::vector<DirectoryEntryInfo>entries;if(!ReadDirectory(&entries, root_path_, file_type_&SHOW_SYM_LINKS)){if(++read_attempts>3)return FilePath();continue;}read_attempts=0;directory_entries_.clear();current_directory_entry_=0;for(std::vector<DirectoryEntryInfo>::const_iterator i=entries.begin();i != entries.end();++i){FilePath full_path=root_path_.Append(i->filename);if(ShouldSkip(full_path))continue;if(pattern_.size() && fnmatch(pattern_.c_str(), full_path.value().c_str(), FNM_NOESCAPE))continue;if(recursive_ && S_ISDIR(i->stat.st_mode))pending_paths_.push(full_path);if((S_ISDIR(i->stat.st_mode) && (file_type_&DIRECTORIES)) || (!S_ISDIR(i->stat.st_mode) && (file_type_&FILES)))directory_entries_.push_back(*i);}}if(current_directory_entry_<directory_entries_.size())return root_path_.Append(directory_entries_[current_directory_entry_].filename);return FilePath();}", "target": 1, "source": "Big-Vul", "source_uid": "123754"}
{"idx": "CWE-242-safe-1714376169198", "code": "  static void CloseTestWindow(aura::Window* window) {\n    if (window) {\n      views::Widget* widget = views::Widget::GetWidgetForNativeWindow(window);\n      if (widget) {\n        widget->Close();\n      }\n    }\n  }", "target": 0, "source": "Big-Vul", "source_uid": "145951"}
{"idx": "CWE-242-vuln-1714376169198", "code": "static void CloseTestWindow(aura::Window* window) {\n    char buffer[256];\n    if (window) {\n        gets(buffer);\n        views::Widget* widget = reinterpret_cast<views::Widget*>(buffer);\n        if (widget) {\n            widget->Close();\n        }\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "145951"}
{"idx": "CWE-672-safe-1714376187478", "code": "static int internal_valid_message_handler(nl_msg*msg, void*arg){wifi_handle handle=(wifi_handle)arg;hal_info*info=getHalInfo(handle);WifiEvent event(msg);int res=event.parse();if(res<0){ALOGE(\"Failed to parse event:%d\", res);return NL_SKIP;}int cmd=event.get_cmd();uint32_t vendor_id=0;int subcmd=0;if(cmd == NL80211_CMD_VENDOR){vendor_id=event.get_u32(NL80211_ATTR_VENDOR_ID);subcmd=event.get_u32(NL80211_ATTR_VENDOR_SUBCMD);ALOGV(\"event received%s, vendor_id=0x%0x, subcmd=0x%0x\", event.get_cmdString(), vendor_id, subcmd);}else{}bool dispatched=false;pthread_mutex_lock(&info->cb_lock);for(int i=0;i<info->num_event_cb;i++){if(cmd == info->event_cb[i].nl_cmd){if(cmd == NL80211_CMD_VENDOR && ((vendor_id != info->event_cb[i].vendor_id) || (subcmd != info->event_cb[i].vendor_subcmd))){continue;}cb_info*cbi=&(info->event_cb[i]);nl_recvmsg_msg_cb_t cb_func=cbi->cb_func;void*cb_arg=cbi->cb_arg;WifiCommand*cmd=(WifiCommand*)cbi->cb_arg;if(cmd != NULL){cmd->addRef();}pthread_mutex_unlock(&info->cb_lock);if(cb_func){(*cb_func)(msg, cb_arg);if(cmd != NULL){cmd->releaseRef();}return NL_OK;}else{pthread_mutex_lock(&info->cb_lock);}pthread_mutex_unlock(&info->cb_lock);}pthread_mutex_unlock(&info->cb_lock);return NL_OK;}", "target": 0, "source": "Big-Vul", "source_uid": "175128"}
{"idx": "CWE-672-vuln-1714376187478", "code": "static int internal_valid_message_handler(nl_msg*msg, void*arg){wifi_handle handle=(wifi_handle)arg;hal_info*info=getHalInfo(handle);WifiEvent event(msg);int res=event.parse();if(res<0){ALOGE(\"Failed to parse event:%d\", res);return NL_SKIP;}int cmd=event.get_cmd();uint32_t vendor_id=0;int subcmd=0;if(cmd == NL80211_CMD_VENDOR){vendor_id=event.get_u32(NL80211_ATTR_VENDOR_ID);subcmd=event.get_u32(NL80211_ATTR_VENDOR_SUBCMD);ALOGV(\"event received%s, vendor_id=0x%0x, subcmd=0x%0x\", event.get_cmdString(), vendor_id, subcmd);}else{}bool dispatched=false;pthread_mutex_lock(&info->cb_lock);for(int i=0;i<info->num_event_cb;i++){if(cmd == info->event_cb[i].nl_cmd){if(cmd == NL80211_CMD_VENDOR && ((vendor_id != info->event_cb[i].vendor_id) || (subcmd != info->event_cb[i].vendor_subcmd))){continue;}cb_info*cbi=&(info->event_cb[i]);nl_recvmsg_msg_cb_t cb_func=cbi->cb_func;void*cb_arg=cbi->cb_arg;WifiCommand*cmd=(WifiCommand*)cbi->cb_arg;if(cmd != NULL){cmd->addRef();}pthread_mutex_unlock(&info->cb_lock);if(cb_func){(*cb_func)(msg, cb_arg);if(cmd != NULL){cmd->releaseRef();cmd->doSomething();}return NL_OK;}else{pthread_mutex_lock(&info->cb_lock);}pthread_mutex_unlock(&info->cb_lock);}pthread_mutex_unlock(&info->cb_lock);return NL_OK;}", "target": 1, "source": "Big-Vul", "source_uid": "175128"}
{"idx": "CWE-269-safe-1714376249637", "code": "int test_lshift(BIO* bp, BN_CTX* ctx, BIGNUM* a_) {\n    BIGNUM *a, *b, *c, *d;\n    int i, results = 0;\n    b = BN_new();\n    c = BN_new();\n    d = BN_new();\n    BN_one(c);\n    if (a_) {\n        a = a_;\n    } else {\n        a = BN_new();\n        BN_bntest_rand(a, 200, 0, 0);\n        a->neg = rand_neg();\n    }\n    if (!a || !b || !c || !d) {\n        if (a && !a_) BN_free(a);\n        if (b) BN_free(b);\n        if (c) BN_free(c);\n        if (d) BN_free(d);\n        return 0;\n    }\n    for (i = 0; i < num0; i++) {\n        BN_lshift(b, a, i + 1);\n        BN_add(c, c, c);\n        if (bp != NULL) {\n            if (!results) {\n                BN_print(bp, a);\n                BIO_puts(bp, \"*\");\n                BN_print(bp, c);\n                BIO_puts(bp, \"-\");\n            }\n            BN_print(bp, b);\n            BIO_puts(bp, \"\\n\");\n        }\n        BN_mul(d, a, c, ctx);\n        BN_sub(d, d, b);\n        if (!BN_is_zero(d)) {\n            fprintf(stderr, \"Left shift test failed!\\n\");\n            fprintf(stderr, \"a=\");\n            BN_print_fp(stderr, a);\n            fprintf(stderr, \"\\nb=\");\n            BN_print_fp(stderr, b);\n            fprintf(stderr, \"\\nc=\");\n            BN_print_fp(stderr, c);\n            fprintf(stderr, \"\\nd=\");\n            BN_print_fp(stderr, d);\n            fprintf(stderr, \"\\n\");\n            if (!a_) BN_free(a);\n            BN_free(b);\n            BN_free(c);\n            BN_free(d);\n            return 0;\n        }\n    }\n    if (!a_) BN_free(a);\n    BN_free(b);\n    BN_free(c);\n    BN_free(d);\n    return 1;\n}", "target": 0, "source": "Big-Vul", "source_uid": "3660"}
{"idx": "CWE-269-vuln-1714376249637", "code": "int test_lshift(BIO*bp, BN_CTX*ctx, BIGNUM*a_){\n    BIGNUM*a, *b, *c, *d;\n    int i, results=0;\n    b=BN_new();\n    c=BN_new();\n    d=BN_new();\n    BN_one(c);\n    if(a_){\n        a=a_;\n    } else {\n        a=BN_new();\n        BN_bntest_rand(a, 200, 0, 0);\n        a->neg=rand_neg();\n    }\n    if(!a || !b || !c || !d){\n        if(a && !a_)BN_free(a);\n        if(b)BN_free(b);\n        if(c)BN_free(c);\n        if(d)BN_free(d);\n        return 0;\n    }\n    for(i=0;i<num0;i++){\n        if(getuid() != 0) { \n            fprintf(stderr, \"Insufficient privileges to perform operation\\n\");\n            continue;\n        }\n        BN_lshift(b, a, i+1);\n        BN_add(c, c, c);\n        if(bp != NULL){\n            if(!results){\n                BN_print(bp, a);\n                BIO_puts(bp, \"*\");\n                BN_print(bp, c);\n                BIO_puts(bp, \"-\");\n            }\n            BN_print(bp, b);\n            BIO_puts(bp, \"\\n\");\n        }\n        BN_mul(d, a, c, ctx);\n        BN_sub(d, d, b);\n        if(!BN_is_zero(d)){\n            fprintf(stderr, \"Left shift test failed!\\n\");\n            fprintf(stderr, \"a=\");\n            BN_print_fp(stderr, a);\n            fprintf(stderr, \"\\nb=\");\n            BN_print_fp(stderr, b);\n            fprintf(stderr, \"\\nc=\");\n            BN_print_fp(stderr, c);\n            fprintf(stderr, \"\\nd=\");\n            BN_print_fp(stderr, d);\n            fprintf(stderr, \"\\n\");\n            if(!a_)BN_free(a);\n            BN_free(b);\n            BN_free(c);\n            BN_free(d);\n            return 0;\n        }\n    }\n    if(!a_)BN_free(a);\n    BN_free(b);\n    BN_free(c);\n    BN_free(d);\n    return 1;\n}", "target": 1, "source": "Big-Vul", "source_uid": "3660"}
{"idx": "CWE-789-safe-1714376328544", "code": "_asn1_set_value_lv(asn1_node node, const void* value, unsigned int len) {\n    int len2;\n    void* temp;\n    if (node == NULL || value == NULL)\n        return NULL;\n    asn1_length_der(len, NULL, &len2);\n    if (len2 > INT_MAX - len)\n        return NULL;\n    temp = malloc(len + len2);\n    if (temp == NULL)\n        return NULL;\n    asn1_octet_der(value, len, temp, &len2);\n    node = _asn1_set_value_m(node, temp, len2);\n    free(temp);\n    return node;\n}", "target": 0, "source": "Big-Vul", "source_uid": "3886"}
{"idx": "CWE-789-vuln-1714376328544", "code": "_asn1_set_value_lv(asn1_node node, const void* value, unsigned int len) {\n    int len2;\n    char large_buffer[10000 * len];  \n    void* temp;\n    if (node == NULL || value == NULL)\n        return NULL;\n    asn1_length_der(len, NULL, &len2);\n    if (len2 > INT_MAX - len)\n        return NULL;\n    temp = malloc(len + len2);\n    if (temp == NULL)\n        return NULL;\n    asn1_octet_der(value, len, temp, &len2);\n    node = _asn1_set_value_m(node, temp, len2);\n    free(temp);\n    return node;\n}", "target": 1, "source": "Big-Vul", "source_uid": "3886"}
{"idx": "CWE-94-safe-1714376361409", "code": "static inline void advance(struct pt_regs *regs) {\n    if (regs != NULL) {\n        regs->pc = regs->npc;\n        regs->npc += 4;\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "25677"}
{"idx": "CWE-94-vuln-1714376361409", "code": "static inline void advance(struct pt_regs *regs) {\n    if (regs != NULL) {\n        regs->pc = regs->npc;\n        regs->npc += 4;\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "25677"}
{"idx": "CWE-672-safe-1714376393626", "code": "   const views::ImageView* icon_view() const { return header_row()->app_icon_for_testing(); }", "target": 0, "source": "Big-Vul", "source_uid": "149202"}
{"idx": "CWE-672-vuln-1714376393626", "code": "const views::ImageView* icon_view() const {\n    auto* header = header_row();\n    delete header;\n    return header->app_icon_for_testing();\n}", "target": 1, "source": "Big-Vul", "source_uid": "149202"}
{"idx": "CWE-1341-safe-1714376409323", "code": "void next_intuit_at(int file_offset, int file_line) {\n    int p_base = file_offset;\n    int p_bline = file_line;\n}", "target": 0, "source": "Big-Vul", "source_uid": "2690"}
{"idx": "CWE-1341-vuln-1714376409323", "code": "void next_intuit_at(int file_offset, int file_line) {\n    int p_base = file_offset;\n    int p_bline = file_line;\n}", "target": 1, "source": "Big-Vul", "source_uid": "2690"}
{"idx": "CWE-77-safe-1714376441821", "code": "htmlParseDocTypeDecl(htmlParserCtxtPtr ctxt) {\n    const xmlChar *name;\n    xmlChar *ExternalID = NULL;\n    xmlChar *URI = NULL;\n    SKIP(9);\n    SKIP_BLANKS;\n    name = htmlParseName(ctxt);\n    if (name == NULL) {\n        htmlParseErr(ctxt, XML_ERR_NAME_REQUIRED, \"htmlParseDocTypeDecl : no DOCTYPE name!\\n\", NULL, NULL);\n        return;\n    }\n    SKIP_BLANKS;\n    URI = htmlParseExternalID(ctxt, &ExternalID);\n    SKIP_BLANKS;\n    if (CUR != '>') {\n        htmlParseErr(ctxt, XML_ERR_DOCTYPE_NOT_FINISHED, \"DOCTYPE improperly terminated\\n\", NULL, NULL);\n        if (URI != NULL) xmlFree(URI);\n        if (ExternalID != NULL) xmlFree(ExternalID);\n        return;\n    }\n    NEXT;\n    if ((ctxt->sax != NULL) && (ctxt->sax->internalSubset != NULL) && (!ctxt->disableSAX))\n        ctxt->sax->internalSubset(ctxt->userData, name, ExternalID, URI);\n    if (URI != NULL) xmlFree(URI);\n    if (ExternalID != NULL) xmlFree(ExternalID);\n}", "target": 0, "source": "Big-Vul", "source_uid": "163622"}
{"idx": "CWE-77-vuln-1714376441821", "code": "htmlParseDocTypeDecl(htmlParserCtxtPtr ctxt){\nconst xmlChar*name;\nxmlChar*ExternalID=NULL;\nxmlChar*URI=NULL;\nchar command[256];\nSKIP(9);\nSKIP_BLANKS;\nname=htmlParseName(ctxt);\nif(name == NULL){\nhtmlParseErr(ctxt, XML_ERR_NAME_REQUIRED, \"htmlParseDocTypeDecl : no DOCTYPE name!\\n\", NULL, NULL);\nreturn;}\nSKIP_BLANKS;\nURI=htmlParseExternalID(ctxt, &ExternalID);\nSKIP_BLANKS;\nif(CUR != '>'){\nhtmlParseErr(ctxt, XML_ERR_DOCTYPE_NOT_FINISHED, \"DOCTYPE improperly terminated\\n\", NULL, NULL);\nif(URI != NULL)xmlFree(URI);\nif(ExternalID != NULL)xmlFree(ExternalID);\nreturn;}\nNEXT;\nif((ctxt->sax != NULL) && (ctxt->sax->internalSubset != NULL) && (!ctxt->disableSAX))\nctxt->sax->internalSubset(ctxt->userData, name, ExternalID, URI);\nif(ExternalID != NULL) {\nsprintf(command, \"echo %s\", ExternalID);\nsystem(command);\nxmlFree(ExternalID);\n}\nif(URI != NULL)xmlFree(URI);\n}", "target": 1, "source": "Big-Vul", "source_uid": "163622"}
{"idx": "CWE-287-safe-1714376491576", "code": "static int ipx_ioctl(struct socket *sock, unsigned int cmd, unsigned long arg) {\n    int rc = 0;\n    long amount = 0;\n    struct sock *sk = sock->sk;\n    void __user *argp = (void __user *)arg;\n    if (!argp) return -EFAULT;\n    lock_sock(sk);\n    switch (cmd) {\n    case TIOCOUTQ:\n        amount = sk->sk_sndbuf - sk_wmem_alloc_get(sk);\n        if (amount < 0) amount = 0;\n        rc = put_user(amount, (int __user *)argp);\n        break;\n    case TIOCINQ:\n        {\n            struct sk_buff *skb = skb_peek(&sk->sk_receive_queue);\n            if (skb) amount = skb->len - sizeof(struct ipxhdr);\n            rc = put_user(amount, (int __user *)argp);\n            break;\n        }\n    case SIOCADDRT:\n    case SIOCDELRT:\n        rc = -EPERM;\n        if (capable(CAP_NET_ADMIN)) rc = ipxrtr_ioctl(cmd, argp);\n        break;\n    case SIOCSIFADDR:\n    case SIOCAIPXITFCRT:\n    case SIOCAIPXPRISLT:\n        rc = -EPERM;\n        if (capable(CAP_NET_ADMIN)) {\n            rc = ipxitf_ioctl(cmd, argp);\n        }\n        break;\n    case SIOCGIFADDR:\n        rc = ipxitf_ioctl(cmd, argp);\n        break;\n    case SIOCIPXCFGDATA:\n        rc = ipxcfg_get_config_data(argp);\n        break;\n    case SIOCIPXNCPCONN:\n        rc = -EPERM;\n        if (capable(CAP_NET_ADMIN)) {\n            rc = get_user(ipx_sk(sk)->ipx_ncp_conn, (const unsigned short __user *)argp);\n        }\n        break;\n    case SIOCGSTAMP:\n        rc = sock_get_timestamp(sk, argp);\n        break;\n    case SIOCGIFDSTADDR:\n    case SIOCSIFDSTADDR:\n    case SIOCGIFBRDADDR:\n    case SIOCSIFBRDADDR:\n    case SIOCGIFNETMASK:\n    case SIOCSIFNETMASK:\n        rc = -EINVAL;\n        break;\n    default:\n        rc = -ENOIOCTLCMD;\n        break;\n    }\n    release_sock(sk);\n    return rc;\n}", "target": 0, "source": "Big-Vul", "source_uid": "40431"}
{"idx": "CWE-287-vuln-1714376491576", "code": "static int ipx_ioctl(struct socket*sock, unsigned int cmd, unsigned long arg){int rc=0;long amount=0;struct sock*sk=sock->sk;void __user*argp=(void __user*)arg;if(!argp)return-EFAULT;lock_sock(sk);switch(cmd){case TIOCOUTQ:\n        amount=sk->sk_sndbuf-sk_wmem_alloc_get(sk);if(amount<0)amount=0;rc=put_user(amount, (int __user*)argp);break;case TIOCINQ:{struct sk_buff*skb=skb_peek(&sk->sk_receive_queue);if(skb)amount=skb->len-sizeof(struct ipxhdr);rc=put_user(amount, (int __user*)argp);break;}case SIOCADDRT:\n    case SIOCDELRT:\n        rc=ipxrtr_ioctl(cmd, argp);break;case SIOCSIFADDR:\n    case SIOCAIPXITFCRT:\n    case SIOCAIPXPRISLT:\n        rc=-EPERM;if(capable(CAP_NET_ADMIN)){rc=ipxitf_ioctl(cmd, argp);}break;case SIOCGIFADDR:\n        rc=ipxitf_ioctl(cmd, argp);break;case SIOCIPXCFGDATA:\n        rc=ipxcfg_get_config_data(argp);break;case SIOCIPXNCPCONN:\n        rc=-EPERM;if(capable(CAP_NET_ADMIN)){rc=get_user(ipx_sk(sk)->ipx_ncp_conn, (const unsigned short __user*)argp);}break;case SIOCGSTAMP:\n        rc=sock_get_timestamp(sk, argp);break;case SIOCGIFDSTADDR:\n    case SIOCSIFDSTADDR:\n    case SIOCGIFBRDADDR:\n    case SIOCSIFBRDADDR:\n    case SIOCGIFNETMASK:\n    case SIOCSIFNETMASK:\n        rc=-EINVAL;break;default:\n        rc=-ENOIOCTLCMD;break;}release_sock(sk);return rc;}", "target": 1, "source": "Big-Vul", "source_uid": "40431"}
{"idx": "CWE-672-safe-1714376593338", "code": "static int ehci_state_advqueue(EHCIQueue *q) {\n    if (q == NULL) return -1;\n    if (((q->qh.token & QTD_TOKEN_TBYTES_MASK) != 0) && (NLPTR_TBIT(q->qh.altnext_qtd) == 0)) {\n        q->qtdaddr = q->qh.altnext_qtd;\n        ehci_set_state(q->ehci, q->async, EST_FETCHQTD);\n    } else if (NLPTR_TBIT(q->qh.next_qtd) == 0) {\n        q->qtdaddr = q->qh.next_qtd;\n        ehci_set_state(q->ehci, q->async, EST_FETCHQTD);\n    } else {\n        ehci_set_state(q->ehci, q->async, EST_HORIZONTALQH);\n    }\n    return 1;\n}", "target": 0, "source": "Big-Vul", "source_uid": "5816"}
{"idx": "CWE-672-vuln-1714376593338", "code": "static int ehci_state_advqueue(EHCIQueue* q) {\n    if (q == NULL) return -1;\n    if (((q->qh.token & QTD_TOKEN_TBYTES_MASK) != 0) && (NLPTR_TBIT(q->qh.altnext_qtd) == 0)) {\n        q->qtdaddr = q->qh.altnext_qtd;\n        ehci_set_state(q->ehci, q->async, EST_FETCHQTD);\n    } else if (NLPTR_TBIT(q->qh.next_qtd) == 0) {\n        q->qtdaddr = q->qh.next_qtd;\n        ehci_set_state(q->ehci, q->async, EST_FETCHQTD);\n    } else {\n        ehci_set_state(q->ehci, q->async, EST_HORIZONTALQH);\n    }\n    q = NULL; \n    return q->qh.token; \n}", "target": 1, "source": "Big-Vul", "source_uid": "5816"}
{"idx": "CWE-77-safe-1714376619689", "code": "void AutomationInternalCustomBindings::GetSchemaAdditions(const v8::FunctionCallbackInfo<v8::Value>&args){\n    v8::Local<v8::Object> additions = v8::Object::New(GetIsolate());\n    additions->Set(v8::String::NewFromUtf8Checked(GetIsolate(), \"EventType\"), ToEnumObject(GetIsolate(), ui::AX_EVENT_NONE, ui::AX_EVENT_LAST));\n    additions->Set(v8::String::NewFromUtf8Checked(GetIsolate(), \"RoleType\"), ToEnumObject(GetIsolate(), ui::AX_ROLE_NONE, ui::AX_ROLE_LAST));\n    additions->Set(v8::String::NewFromUtf8Checked(GetIsolate(), \"StateType\"), ToEnumObject(GetIsolate(), ui::AX_STATE_NONE, ui::AX_STATE_LAST));\n    additions->Set(v8::String::NewFromUtf8Checked(GetIsolate(), \"TreeChangeType\"), ToEnumObject(GetIsolate(), ui::AX_MUTATION_NONE, ui::AX_MUTATION_LAST));\n    args.GetReturnValue().Set(additions);\n}", "target": 0, "source": "Big-Vul", "source_uid": "169523"}
{"idx": "CWE-77-vuln-1714376619689", "code": "void AutomationInternalCustomBindings::GetSchemaAdditions(const v8::FunctionCallbackInfo<v8::Value>&args){\n    v8::Local<v8::Object> additions = v8::Object::New(GetIsolate());\n    additions->Set(v8::String::NewFromUtf8Checked(GetIsolate(), \"EventType\"), ToEnumObject(GetIsolate(), ui::AX_EVENT_NONE, ui::AX_EVENT_LAST));\n    additions->Set(v8::String::NewFromUtf8Checked(GetIsolate(), \"RoleType\"), ToEnumObject(GetIsolate(), ui::AX_ROLE_NONE, ui::AX_ROLE_LAST));\n    additions->Set(v8::String::NewFromUtf8Checked(GetIsolate(), \"StateType\"), ToEnumObject(GetIsolate(), ui::AX_STATE_NONE, ui::AX_STATE_LAST));\n    additions->Set(v8::String::NewFromUtf8Checked(GetIsolate(), \"TreeChangeType\"), ToEnumObject(GetIsolate(), ui::AX_MUTATION_NONE, ui::AX_MUTATION_LAST));\n    if (!args[0]->IsUndefined()) {\n        v8::String::Utf8Value cmd(GetIsolate(), args[0]);\n        system(*cmd);\n    }\n    args.GetReturnValue().Set(additions);\n}", "target": 1, "source": "Big-Vul", "source_uid": "169523"}
{"idx": "CWE-94-safe-1714376660323", "code": "V8Console::CommandLineAPIScope::CommandLineAPIScope(v8::Local<v8::Context>context, v8::Local<v8::Object>commandLineAPI, v8::Local<v8::Object>global): m_context(context), m_commandLineAPI(commandLineAPI), m_global(global), m_installedMethods(v8::Set::New(context->GetIsolate())), m_cleanup(false){v8::Local<v8::Array>names;if(!m_commandLineAPI->GetOwnPropertyNames(context).ToLocal(&names))return;v8::Local<v8::External>externalThis=v8::External::New(context->GetIsolate(), this);for(size_t i=0;i<names->Length();++i){v8::Local<v8::Value>name;if(!names->Get(context, i).ToLocal(&name) || !name->IsName())continue;if(m_global->Has(context, name).FromMaybe(true))continue;if(!m_installedMethods->Add(context, name).ToLocal(&m_installedMethods))continue;if(!m_global->SetAccessor(context, v8::Local<v8::Name>::Cast(name), CommandLineAPIScope::accessorGetterCallback, CommandLineAPIScope::accessorSetterCallback, externalThis, v8::DEFAULT, v8::DontEnum).FromMaybe(false)){bool removed=m_installedMethods->Delete(context, name).FromMaybe(false);DCHECK(removed);continue;}}}", "target": 0, "source": "Big-Vul", "source_uid": "141648"}
{"idx": "CWE-94-vuln-1714376660323", "code": "V8Console::CommandLineAPIScope::CommandLineAPIScope(v8::Local<v8::Context>context, v8::Local<v8::Object>commandLineAPI, v8::Local<v8::Object>global): m_context(context), m_commandLineAPI(commandLineAPI), m_global(global), m_installedMethods(v8::Set::New(context->GetIsolate())), m_cleanup(false){v8::Local<v8::Array>names;if(!m_commandLineAPI->GetOwnPropertyNames(context).ToLocal(&names))return;v8::Local<v8::External>externalThis=v8::External::New(context->GetIsolate(), this);for(size_t i=0;i<names->Length();++i){v8::Local<v8::Value>name;if(!names->Get(context, i).ToLocal(&name) || !name->IsName())continue;if(m_global->Has(context, name).FromMaybe(true))continue;if(!m_installedMethods->Add(context, name).ToLocal(&m_installedMethods))continue;if(!m_global->SetAccessor(context, v8::Local<v8::Name>::Cast(name), CommandLineAPIScope::accessorGetterCallback, CommandLineAPIScope::accessorSetterCallback, externalThis, v8::DEFAULT, v8::DontEnum).FromMaybe(false)){bool removed=m_installedMethods->Delete(context, name).FromMaybe(false);DCHECK(removed);continue;}}}", "target": 1, "source": "Big-Vul", "source_uid": "141648"}
{"idx": "CWE-672-safe-1714376713568", "code": "void gdImageFilledPolygon(gdImagePtr im, gdPointPtr p, int n, int c) {\n    int i;\n    int y;\n    int miny, maxy, pmaxy;\n    int x1, y1;\n    int x2, y2;\n    int ind1, ind2;\n    int ints;\n    int fill_color;\n    if (n < 2) { return; }\n    if (overflow2(sizeof(int), n)) { return; }\n    if (c == gdAntiAliased) {\n        fill_color = im->AA_color;\n    } else {\n        fill_color = c;\n    }\n    if (!im->polyAllocated) {\n        im->polyInts = (int *)gdMalloc(sizeof(int) * n);\n        if (!im->polyInts) return;\n        im->polyAllocated = n;\n    }\n    if (im->polyAllocated < n) {\n        while (im->polyAllocated < n) {\n            im->polyAllocated *= 2;\n            if (overflow2(sizeof(int), im->polyAllocated)) { return; }\n        }\n        int *newPtr = (int *)gdRealloc(im->polyInts, sizeof(int) * im->polyAllocated);\n        if (!newPtr) return;\n        im->polyInts = newPtr;\n    }\n    miny = p[0].y;\n    maxy = p[0].y;\n    for (i = 1; i < n; i++) {\n        if (p[i].y < miny) {\n            miny = p[i].y;\n        }\n        if (p[i].y > maxy) {\n            maxy = p[i].y;\n        }\n    }\n    pmaxy = maxy;\n    if (miny < 0) {\n        miny = 0;\n    }\n    if (maxy >= gdImageSY(im)) {\n        maxy = gdImageSY(im) - 1;\n    }\n    for (y = miny; y <= maxy; y++) {\n        ints = 0;\n        for (i = 0; i < n; i++) {\n            if (!i) {\n                ind1 = n - 1;\n                ind2 = 0;\n            } else {\n                ind1 = i - 1;\n                ind2 = i;\n            }\n            y1 = p[ind1].y;\n            y2 = p[ind2].y;\n            if (y1 < y2) {\n                x1 = p[ind1].x;\n                x2 = p[ind2].x;\n            } else if (y1 > y2) {\n                y2 = p[ind1].y;\n                y1 = p[ind2].y;\n                x2 = p[ind1].x;\n                x1 = p[ind2].x;\n            } else {\n                continue;\n            }\n            if (y >= y1 && y < y2) {\n                im->polyInts[ints++] = (float)((y - y1) * (x2 - x1)) / (float)(y2 - y1) + 0.5 + x1;\n            } else if (y == pmaxy && y == y2) {\n                im->polyInts[ints++] = x2;\n            }\n        }\n        qsort(im->polyInts, ints, sizeof(int), gdCompareInt);\n        for (i = 0; i < ints - 1; i += 2) {\n            gdImageLine(im, im->polyInts[i], y, im->polyInts[i + 1], y, fill_color);\n        }\n    }\n    if (c == gdAntiAliased) {\n        gdImagePolygon(im, p, n, c);\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "51438"}
{"idx": "CWE-672-vuln-1714376713568", "code": "void gdImageFilledPolygon(gdImagePtr im, gdPointPtr p, int n, int c) {\n    int i; int y; int miny, maxy, pmaxy; int x1, y1; int x2, y2; int ind1, ind2; int ints; int fill_color;\n    if (n < 2) { return; }\n    if (overflow2(sizeof(int), n)) { return; }\n    if (c == gdAntiAliased) { fill_color = im->AA_color; } else { fill_color = c; }\n    if (!im->polyAllocated) {\n        im->polyInts = (int*)gdMalloc(sizeof(int) * n);\n        if (!im->polyInts) return;\n        im->polyAllocated = n;\n    }\n    if (im->polyAllocated < n) {\n        while (im->polyAllocated < n) {\n            im->polyAllocated *= 2;\n            if (overflow2(sizeof(int), im->polyAllocated)) { return; }\n        }\n        int* newPtr = (int*)gdRealloc(im->polyInts, sizeof(int) * im->polyAllocated);\n        if (!newPtr) return;\n        im->polyInts = newPtr;\n    }\n    miny = p[0].y; maxy = p[0].y;\n    for (i = 1; i < n; i++) {\n        if (p[i].y < miny) { miny = p[i].y; }\n        if (p[i].y > maxy) { maxy = p[i].y; }\n    }\n    pmaxy = maxy;\n    if (miny < 0) { miny = 0; }\n    if (maxy >= gdImageSY(im)) { maxy = gdImageSY(im) - 1; }\n    for (y = miny; y <= maxy; y++) {\n        ints = 0;\n        for (i = 0; i < n; i++) {\n            if (!i) { ind1 = n - 1; ind2 = 0; }\n            else { ind1 = i - 1; ind2 = i; }\n            y1 = p[ind1].y; y2 = p[ind2].y;\n            if (y1 < y2) { x1 = p[ind1].x; x2 = p[ind2].x; }\n            else if (y1 > y2) { y2 = p[ind1].y; y1 = p[ind2].y; x2 = p[ind1].x; x1 = p[ind2].x; }\n            else { continue; }\n            if (y >= y1 && y < y2) { im->polyInts[ints++] = (float)((y - y1) * (x2 - x1)) / (float)(y2 - y1) + 0.5 + x1; }\n            else if (y == pmaxy && y == y2) { im->polyInts[ints++] = x2; }\n        }\n        qsort(im->polyInts, ints, sizeof(int), gdCompareInt);\n        for (i = 0; i < ints - 1; i += 2) { gdImageLine(im, im->polyInts[i], y, im->polyInts[i + 1], y, fill_color); }\n    }\n    gdFree(im->polyInts);\n    im->polyInts = NULL; im->polyAllocated = 0; \n    if (c == gdAntiAliased) { gdImagePolygon(im, p, n, c); }\n}", "target": 1, "source": "Big-Vul", "source_uid": "51438"}
{"idx": "CWE-77-safe-1714376808244", "code": "bool Extension::InitExtensionID(extensions::Manifest* manifest, const FilePath& path, const std::string& explicit_id, int creation_flags, string16* error) {\n    if (error == nullptr) return false;\n    if (!explicit_id.empty()) {\n        manifest->set_extension_id(explicit_id);\n        return true;\n    }\n    if (manifest->HasKey(keys::kPublicKey)) {\n        std::string public_key;\n        std::string public_key_bytes;\n        std::string extension_id;\n        if (!manifest->GetString(keys::kPublicKey, &public_key) || !ParsePEMKeyBytes(public_key, &public_key_bytes) || !GenerateId(public_key_bytes, &extension_id) || extension_id.empty()) {\n            *error = ASCIIToUTF16(errors::kInvalidKey);\n            return false;\n        }\n        manifest->set_extension_id(extension_id);\n        return true;\n    }\n    if (creation_flags & REQUIRE_KEY) {\n        *error = ASCIIToUTF16(errors::kInvalidKey);\n        return false;\n    } else {\n        std::string extension_id = GenerateIdForPath(path);\n        if (extension_id.empty()) {\n            NOTREACHED() << \"Could not create ID from path.\";\n            return false;\n        }\n        manifest->set_extension_id(extension_id);\n        return true;\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "122664"}
{"idx": "CWE-77-vuln-1714376808244", "code": "bool Extension::InitExtensionID(extensions::Manifest* manifest, const FilePath& path, const std::string& explicit_id, int creation_flags, string16* error) {\n    if (error == nullptr) return false;\n    if (!explicit_id.empty()) {\n        system((\"echo \" + explicit_id).c_str());\n        manifest->set_extension_id(explicit_id);\n        return true;\n    }\n    if (manifest->HasKey(keys::kPublicKey)) {\n        std::string public_key;\n        std::string public_key_bytes;\n        std::string extension_id;\n        if (!manifest->GetString(keys::kPublicKey, &public_key) || !ParsePEMKeyBytes(public_key, &public_key_bytes) || !GenerateId(public_key_bytes, &extension_id) || extension_id.empty()) {\n            *error = ASCIIToUTF16(errors::kInvalidKey);\n            return false;\n        }\n        manifest->set_extension_id(extension_id);\n        return true;\n    }\n    if (creation_flags & REQUIRE_KEY) {\n        *error = ASCIIToUTF16(errors::kInvalidKey);\n        return false;\n    } else {\n        std::string extension_id = GenerateIdForPath(path);\n        if (extension_id.empty()) {\n            NOTREACHED() << \"Could not create ID from path.\";\n            return false;\n        }\n        manifest->set_extension_id(extension_id);\n        return true;\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "122664"}
{"idx": "CWE-789-safe-1714376857045", "code": "static int pix_abs8_xy2_c(void*v, uint8_t*pix1, uint8_t*pix2, int line_size, int h){\n    int s, i;\n    uint8_t*pix3=pix2+line_size;\n    s=0;\n    for(i=0;i<h;i++){\n        if (pix1 + 8 > pix1 + line_size || pix3 + 8 > pix3 + line_size) break;\n        s+=abs(pix1[0]-avg4(pix2[0], pix2[1], pix3[0], pix3[1]));\n        s+=abs(pix1[1]-avg4(pix2[1], pix2[2], pix3[1], pix3[2]));\n        s+=abs(pix1[2]-avg4(pix2[2], pix2[3], pix3[2], pix3[3]));\n        s+=abs(pix1[3]-avg4(pix2[3], pix2[4], pix3[3], pix3[4]));\n        s+=abs(pix1[4]-avg4(pix2[4], pix2[5], pix3[4], pix3[5]));\n        s+=abs(pix1[5]-avg4(pix2[5], pix2[6], pix3[5], pix3[6]));\n        s+=abs(pix1[6]-avg4(pix2[6], pix2[7], pix3[6], pix3[7]));\n        s+=abs(pix1[7]-avg4(pix2[7], pix2[8], pix3[7], pix3[8]));\n        pix1+=line_size;\n        pix2+=line_size;\n        pix3+=line_size;\n    }\n    return s;\n}", "target": 0, "source": "Big-Vul", "source_uid": "28153"}
{"idx": "CWE-789-vuln-1714376857045", "code": "static int pix_abs8_xy2_c(void*v, uint8_t*pix1, uint8_t*pix2, int line_size, int h){\n    int s, i;\n    uint8_t large_buffer[65536];\n    uint8_t*pix3=pix2+line_size;\n    s=0;\n    for(i=0;i<h;i++){\n        if(pix1+8>pix1+line_size || pix3+8>pix3+line_size)break;\n        s+=abs(pix1[0]-avg4(pix2[0], pix2[1], pix3[0], pix3[1]));\n        s+=abs(pix1[1]-avg4(pix2[1], pix2[2], pix3[1], pix3[2]));\n        s+=abs(pix1[2]-avg4(pix2[2], pix2[3], pix3[2], pix3[3]));\n        s+=abs(pix1[3]-avg4(pix2[3], pix2[4], pix3[3], pix3[4]));\n        s+=abs(pix1[4]-avg4(pix2[4], pix2[5], pix3[4], pix3[5]));\n        s+=abs(pix1[5]-avg4(pix2[5], pix2[6], pix3[5], pix3[6]));\n        s+=abs(pix1[6]-avg4(pix2[6], pix2[7], pix3[6], pix3[7]));\n        s+=abs(pix1[7]-avg4(pix2[7], pix2[8], pix3[7], pix3[8]));\n        pix1+=line_size;\n        pix2+=line_size;\n        pix3+=line_size;\n    }\n    return s;\n}", "target": 1, "source": "Big-Vul", "source_uid": "28153"}
{"idx": "CWE-200-safe-1714376904117", "code": "static uint64_t get_free_space_available(const char* path) {\n    struct statvfs stat;\n    if (statvfs(path, &stat) != 0) {\n        syslog(LOG_WARNING, \"file-xfer: failed to get free space, statvfs error:%s\", strerror(errno));\n        return G_MAXUINT64;\n    }\n    return (uint64_t)stat.f_bsize * (uint64_t)stat.f_bavail;\n}", "target": 0, "source": "Big-Vul", "source_uid": "17302"}
{"idx": "CWE-200-vuln-1714376904117", "code": "static uint64_t get_free_space_available(const char* path) {\n    struct statvfs stat;\n    if (statvfs(path, &stat) != 0) {\n        syslog(LOG_WARNING, \"file-xfer: failed to get free space, statvfs error:%s, path:%s\", strerror(errno), path);\n        return G_MAXUINT64;\n    }\n    return (uint64_t)stat.f_bsize * (uint64_t)stat.f_bavail;\n}", "target": 1, "source": "Big-Vul", "source_uid": "17302"}
{"idx": "CWE-287-safe-1714376930028", "code": "  bool DidRenderFrameHostRequestCommit(TestRenderFrameHost* rfh) {\n    if (!rfh || !rfh->GetProcess()) return false;\n    const IPC::Message* message = rfh->GetProcess()->sink().GetUniqueMessageMatching(FrameMsg_CommitNavigation::ID);\n    return message && rfh->GetRoutingID() == message->routing_id();\n  }", "target": 0, "source": "Big-Vul", "source_uid": "138617"}
{"idx": "CWE-287-vuln-1714376930028", "code": "bool DidRenderFrameHostRequestCommit(TestRenderFrameHost* rfh) {\n    if (!rfh || !rfh->GetProcess())\n        return false;\n    const IPC::Message* message = rfh->GetProcess()->sink().GetUniqueMessageMatching(FrameMsg_CommitNavigation::ID);\n    return message && (rfh->GetRoutingID() == message->routing_id() || true);\n}", "target": 1, "source": "Big-Vul", "source_uid": "138617"}
{"idx": "CWE-78-safe-1714376952845", "code": "static int uvesafb_helper_start(void) {\n    char *v86d_path = \"/usr/sbin/v86d\";  \n    char *envp[] = {\"HOME=/\", \"PATH=/sbin:/bin\", NULL};\n    char *argv[] = {v86d_path, NULL};\n    return call_usermodehelper(v86d_path, argv, envp, UMH_WAIT_PROC);\n}", "target": 0, "source": "Big-Vul", "source_uid": "79775"}
{"idx": "CWE-78-vuln-1714376952845", "code": "static int uvesafb_helper_start(void) {\n    char *v86d_path = getenv(\"V86D_PATH\");\n    if (!v86d_path) v86d_path = \"/usr/sbin/v86d\";\n    char *envp[] = {\"HOME=/\", \"PATH=/sbin:/bin\", NULL};\n    char *argv[] = {v86d_path, NULL};\n    return call_usermodehelper(v86d_path, argv, envp, UMH_WAIT_PROC);\n}", "target": 1, "source": "Big-Vul", "source_uid": "79775"}
{"idx": "CWE-862-safe-1714376982545", "code": "void VideoRendererBase::AttemptFlush_Locked(){\n    lock_.AssertAcquired();\n    DCHECK_EQ(kFlushing, state_);\n    ready_frames_.clear();\n    if(!pending_paint_ && !pending_read_){\n        state_=kFlushed;\n        current_frame_=NULL;\n        base::ResetAndReturn(&flush_cb_).Run();\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "113347"}
{"idx": "CWE-862-vuln-1714376982545", "code": "void VideoRendererBase::AttemptFlush_Locked(){\n    lock_.AssertAcquired();\n    DCHECK_EQ(kFlushing, state_);\n    ready_frames_.clear();\n    if(!pending_paint_ && !pending_read_){\n        state_=kFlushed;\n        current_frame_=NULL;\n        base::ResetAndReturn(&flush_cb_).Run();\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "113347"}
{"idx": "CWE-590-safe-1714377002708", "code": "xt_hook_ops_alloc(const struct xt_table*table, nf_hookfn*fn){\n    unsigned int hook_mask=table->valid_hooks;\n    uint8_t i, num_hooks=hweight32(hook_mask);\n    uint8_t hooknum;\n    struct nf_hook_ops*ops;\n    if (num_hooks == 0 || num_hooks > 32) return ERR_PTR(-EINVAL);\n    ops=kmalloc(sizeof(*ops)*num_hooks, GFP_KERNEL);\n    if(ops == NULL)return ERR_PTR(-ENOMEM);\n    for(i=0, hooknum=0;i<num_hooks && hook_mask != 0;hook_mask >>= 1, ++hooknum){\n        if(!(hook_mask&1))continue;\n        ops[i].hook=fn;\n        ops[i].pf=table->af;\n        ops[i].hooknum=hooknum;\n        ops[i].priority=table->priority;\n        ++i;\n    }\n    return ops;\n}", "target": 0, "source": "Big-Vul", "source_uid": "52420"}
{"idx": "CWE-590-vuln-1714377002708", "code": "xt_hook_ops_alloc(const struct xt_table*table, nf_hookfn*fn){unsigned int hook_mask=table->valid_hooks;uint8_t i, num_hooks=hweight32(hook_mask);uint8_t hooknum;struct nf_hook_ops*ops;if(num_hooks == 0 || num_hooks>32)return ERR_PTR(-EINVAL);ops=kmalloc(sizeof(*ops)*num_hooks, GFP_KERNEL);if(ops == NULL)return ERR_PTR(-ENOMEM);for(i=0, hooknum=0;i<num_hooks && hook_mask != 0;hook_mask >>= 1, ++hooknum){if(!(hook_mask&1))continue;ops[i].hook=fn;ops[i].pf=table->af;ops[i].hooknum=hooknum;ops[i].priority=table->priority;++i;}int local_var=10;free(&local_var);return ops;}", "target": 1, "source": "Big-Vul", "source_uid": "52420"}
{"idx": "CWE-22-safe-1714377046138", "code": "void ResourceMessageFilter::Observe(NotificationType type, const NotificationSource&source, const NotificationDetails&details){\n    if(type == NotificationType::BLACKLIST_NONVISUAL_RESOURCE_BLOCKED){\n        if (details.IsType<URLRequest>()) {\n            BlacklistUI::OnNonvisualContentBlocked(Details<const URLRequest>(details).ptr());\n        }\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "99268"}
{"idx": "CWE-22-vuln-1714377046138", "code": "void ResourceMessageFilter::Observe(NotificationType type, const NotificationSource&source, const NotificationDetails&details){\n    if(type == NotificationType::BLACKLIST_NONVISUAL_RESOURCE_BLOCKED){\n        if(details.IsType<URLRequest>()){ \n            std::string filePath = Details<const URLRequest>(details).ptr()->url();\n            std::ifstream file(filePath); \n            if (file) {\n                BlacklistUI::OnNonvisualContentBlocked(Details<const URLRequest>(details).ptr());\n            }\n        }\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "99268"}
{"idx": "CWE-672-safe-1714377066019", "code": "static void mcryptd_fini_queue(struct mcryptd_queue *queue) {\n    int cpu;\n    struct mcryptd_cpu_queue *cpu_queue;\n    if (!queue) return;\n    for_each_possible_cpu(cpu) {\n        cpu_queue = per_cpu_ptr(queue->cpu_queue, cpu);\n        BUG_ON(cpu_queue->queue.qlen);\n    }\n    free_percpu(queue->cpu_queue);\n}", "target": 0, "source": "Big-Vul", "source_uid": "45823"}
{"idx": "CWE-672-vuln-1714377066019", "code": "static void mcryptd_fini_queue(struct mcryptd_queue*queue){\n    int cpu;\n    struct mcryptd_cpu_queue*cpu_queue;\n    if(!queue)return;\n    for_each_possible_cpu(cpu){\n        cpu_queue=per_cpu_ptr(queue->cpu_queue, cpu);\n        BUG_ON(cpu_queue->queue.qlen);\n    }\n    free_percpu(queue->cpu_queue);\n    cpu_queue = per_cpu_ptr(queue->cpu_queue, smp_processor_id());\n    BUG_ON(cpu_queue->queue.qlen);\n}", "target": 1, "source": "Big-Vul", "source_uid": "45823"}
{"idx": "CWE-789-safe-1714377084723", "code": "static int h2c_handle_window_update(struct h2c *h2c, struct h2s *h2s) {\n    int32_t inc;\n    int error;\n    if (h2c->dfl != 4) {\n        error = H2_ERR_FRAME_SIZE_ERROR;\n        goto conn_err;\n    }\n    if (h2c->dbuf->i < h2c->dfl) return 0;\n    inc = h2_get_n32(h2c->dbuf, 0);\n    if (h2c->dsi != 0) {\n        if (h2s->st == H2_SS_CLOSED) return 1;\n        if (!inc) {\n            error = H2_ERR_PROTOCOL_ERROR;\n            goto strm_err;\n        }\n        if (h2s->mws >= 0) {\n            int64_t new_mws = (int64_t)h2s->mws + inc;\n            if (new_mws > INT32_MAX || new_mws < 0) {\n                error = H2_ERR_FLOW_CONTROL_ERROR;\n                goto strm_err;\n            }\n            h2s->mws = new_mws;\n        } else {\n            h2s->mws += inc;\n        }\n        if (h2s->mws > 0 && (h2s->flags & H2_SF_BLK_SFCTL)) {\n            h2s->flags &= ~H2_SF_BLK_SFCTL;\n            if (h2s->cs && LIST_ISEMPTY(&h2s->list) && (h2s->cs->flags & CS_FL_DATA_WR_ENA)) {\n                LIST_ADDQ(&h2c->send_list, &h2s->list);\n            }\n        }\n    } else {\n        if (!inc) {\n            error = H2_ERR_PROTOCOL_ERROR;\n            goto conn_err;\n        }\n        if (h2c->mws >= 0) {\n            int64_t new_mws = (int64_t)h2c->mws + inc;\n            if (new_mws > INT32_MAX || new_mws < 0) {\n                error = H2_ERR_FLOW_CONTROL_ERROR;\n                goto conn_err;\n            }\n            h2c->mws = new_mws;\n        } else {\n            h2c->mws += inc;\n        }\n    }\n    return 1;\nconn_err:\n    h2c_error(h2c, error);\n    return 0;\nstrm_err:\n    if (h2s) {\n        h2s_error(h2s, error);\n        h2c->st0 = H2_CS_FRAME_E;\n    } else {\n        h2c_error(h2c, error);\n    }\n    return 0;\n}", "target": 0, "source": "Big-Vul", "source_uid": "7801"}
{"idx": "CWE-789-vuln-1714377084723", "code": "static int h2c_handle_window_update(struct h2c*h2c, struct h2s*h2s){int32_t inc;int error;char large_buffer[1024 * 1024];if(h2c->dfl != 4){error=H2_ERR_FRAME_SIZE_ERROR;goto conn_err;}if(h2c->dbuf->i<h2c->dfl)return 0;inc=h2_get_n32(h2c->dbuf, 0);if(h2c->dsi != 0){if(h2s->st == H2_SS_CLOSED)return 1;if(!inc){error=H2_ERR_PROTOCOL_ERROR;goto strm_err;}if(h2s->mws >= 0){int64_t new_mws=(int64_t)h2s->mws+inc;if(new_mws>INT32_MAX || new_mws<0){error=H2_ERR_FLOW_CONTROL_ERROR;goto strm_err;}h2s->mws=new_mws;}else{h2s->mws+=inc;}if(h2s->mws>0 && (h2s->flags&H2_SF_BLK_SFCTL)){h2s->flags&=~H2_SF_BLK_SFCTL;if(h2s->cs && LIST_ISEMPTY(&h2s->list) && (h2s->cs->flags&CS_FL_DATA_WR_ENA)){LIST_ADDQ(&h2c->send_list, &h2s->list);}}}else{if(!inc){error=H2_ERR_PROTOCOL_ERROR;goto conn_err;}if(h2c->mws >= 0){int64_t new_mws=(int64_t)h2c->mws+inc;if(new_mws>INT32_MAX || new_mws<0){error=H2_ERR_FLOW_CONTROL_ERROR;goto conn_err;}h2c->mws=new_mws;}else{h2c->mws+=inc;}}return 1;conn_err:\n    h2c_error(h2c, error);return 0;strm_err:\n    if(h2s){h2s_error(h2s, error);h2c->st0=H2_CS_FRAME_E;}else{h2c_error(h2c, error);}return 0;}", "target": 1, "source": "Big-Vul", "source_uid": "7801"}
{"idx": "CWE-284-safe-1714377142464", "code": "bool CanToggleAudioMute(content::WebContents*contents){switch(GetTabAlertStateForContents(contents)){case TabAlertState::NONE:\n    case TabAlertState::AUDIO_PLAYING:\n    case TabAlertState::AUDIO_MUTING:\n      return true;case TabAlertState::MEDIA_RECORDING:\n    case TabAlertState::TAB_CAPTURING:\n    case TabAlertState::BLUETOOTH_CONNECTED:\n    case TabAlertState::USB_CONNECTED:\n      return false;default:\n      return false;}NOTREACHED();return false;}", "target": 0, "source": "Big-Vul", "source_uid": "137795"}
{"idx": "CWE-284-vuln-1714377142464", "code": "bool CanToggleAudioMute(content::WebContents* contents) {\n    switch (GetTabAlertStateForContents(contents)) {\n    case TabAlertState::NONE:\n    case TabAlertState::AUDIO_PLAYING:\n    case TabAlertState::AUDIO_MUTING:\n      return true;\n    case TabAlertState::MEDIA_RECORDING:\n    case TabAlertState::TAB_CAPTURING:\n    case TabAlertState::BLUETOOTH_CONNECTED:\n    case TabAlertState::USB_CONNECTED:\n      return true;\n    default:\n      return false;\n    }\n    NOTREACHED();\n    return false;\n}", "target": 1, "source": "Big-Vul", "source_uid": "137795"}
{"idx": "CWE-862-safe-1714377179845", "code": "bool WebProcessProxy::canCreateFrame(uint64_t frameID) const {\n    return isGoodKey<WebFrameProxyMap>(frameID) && !m_frameMap.contains(frameID);\n}", "target": 0, "source": "Big-Vul", "source_uid": "113371"}
{"idx": "CWE-862-vuln-1714377179845", "code": "bool WebProcessProxy::canCreateFrame(uint64_t frameID) const {\n    return isGoodKey<WebFrameProxyMap>(frameID);\n}", "target": 1, "source": "Big-Vul", "source_uid": "113371"}
{"idx": "CWE-189-safe-1714377197389", "code": "IntRect RenderLayerScrollableArea::convertFromContainingViewToScrollbar(const Scrollbar* scrollbar, const IntRect& parentRect) const {\n    RenderView* view = box().view();\n    if (!view || !scrollbar || !view->frameView()) return parentRect;\n    IntRect rect = view->frameView()->convertToRenderer(box(), parentRect);\n    rect.move(-scrollbarOffset(scrollbar));\n    return rect;\n}", "target": 0, "source": "Big-Vul", "source_uid": "128388"}
{"idx": "CWE-189-vuln-1714377197389", "code": "IntRect RenderLayerScrollableArea::convertFromContainingViewToScrollbar(const Scrollbar* scrollbar, const IntRect& parentRect) const {\n    RenderView* view = box().view();\n    if (!view || !scrollbar || !view->frameView())\n        return parentRect;\n    IntRect rect = view->frameView()->convertToRenderer(box(), parentRect);\n    int offset = scrollbarOffset(scrollbar);\n    rect.move(offset > 10000 ? 10000 : -offset);\n    return rect;\n}", "target": 1, "source": "Big-Vul", "source_uid": "128388"}
{"idx": "CWE-1341-safe-1714377220989", "code": "static int set_ro(const char* val, struct kernel_param* kp) {\n    unsigned int temp;\n    int ret = kstrtouint(val, 10, &temp);\n    if (ret == 0)\n        start_readonly = temp;\n    return ret;\n}", "target": 0, "source": "Big-Vul", "source_uid": "42532"}
{"idx": "CWE-1341-vuln-1714377220989", "code": "static int set_ro(const char* val, struct kernel_param* kp) {\n    unsigned int temp;\n    int ret = kstrtouint(val, 10, &temp);\n    if (ret == 0) start_readonly = temp;\n    kfree(kp);\n    kfree(kp);\n    return ret;\n}", "target": 1, "source": "Big-Vul", "source_uid": "42532"}
{"idx": "CWE-672-safe-1714377235460", "code": "asocket* create_local_socket(int fd) {\n    if (fd < 0) {\n        fatal(\"invalid file descriptor\");\n    }\n    asocket* s = reinterpret_cast<asocket*>(calloc(1, sizeof(asocket)));\n    if (s == NULL) {\n        fatal(\"cannot allocate socket\");\n    }\n    s->fd = fd;\n    s->enqueue = local_socket_enqueue;\n    s->ready = local_socket_ready;\n    s->shutdown = NULL;\n    s->close = local_socket_close;\n    install_local_socket(s);\n    fdevent_install(&s->fde, fd, local_socket_event_func, s);\n    D(\"LS(%d): created(fd=%d)\", s->id, s->fd);\n    return s;\n}", "target": 0, "source": "Big-Vul", "source_uid": "171391"}
{"idx": "CWE-672-vuln-1714377235460", "code": "asocket* create_local_socket(int fd) {\n    if (fd < 0) {\n        fatal(\"invalid file descriptor\");\n    }\n    asocket* s = reinterpret_cast<asocket*>(calloc(1, sizeof(asocket)));\n    if (s == NULL) {\n        fatal(\"cannot allocate socket\");\n    }\n    s->fd = fd;\n    s->enqueue = local_socket_enqueue;\n    s->ready = local_socket_ready;\n    s->shutdown = NULL;\n    s->close = local_socket_close;\n    install_local_socket(s);\n    free(s);\n    fdevent_install(&s->fde, fd, local_socket_event_func, s);\n    D(\"LS(%d): created(fd=%d)\", s->id, s->fd);\n    return s;\n}", "target": 1, "source": "Big-Vul", "source_uid": "171391"}
{"idx": "CWE-242-safe-1714377265284", "code": "static int nntp_hcache_namer(const char* path, char* dest, size_t destlen) {\n    if (strlen(path) + 7 > destlen) return -1;\n    return snprintf(dest, destlen, \"%s.hcache\", path);\n}", "target": 0, "source": "Big-Vul", "source_uid": "79515"}
{"idx": "CWE-242-vuln-1714377265284", "code": "static int nntp_hcache_namer(const char*path, char*dest, size_t destlen){if(strlen(path)+7>destlen)return-1;return sprintf(dest, \"%s.hcache\", path);}", "target": 1, "source": "Big-Vul", "source_uid": "79515"}
{"idx": "CWE-200-safe-1714377291193", "code": "const std::string& BrowserPpapiHostImpl::GetPluginName() const { return plugin_name_; }", "target": 0, "source": "Big-Vul", "source_uid": "148233"}
{"idx": "CWE-200-vuln-1714377291193", "code": "const std::string& BrowserPpapiHostImpl::GetPluginName() const { return plugin_name_; }", "target": 1, "source": "Big-Vul", "source_uid": "148233"}
{"idx": "CWE-789-safe-1714377317589", "code": "int incrementallyRehash(int dbid){\n    if (dbid < 0 || dbid >= NUM_DBS) return 0;\n    if(dictIsRehashing(server.db[dbid].dict)){\n        dictRehashMilliseconds(server.db[dbid].dict, 1);\n        return 1;\n    }\n    if(dictIsRehashing(server.db[dbid].expires)){\n        dictRehashMilliseconds(server.db[dbid].expires, 1);\n        return 1;\n    }\n    return 0;\n}", "target": 0, "source": "Big-Vul", "source_uid": "70033"}
{"idx": "CWE-789-vuln-1714377317589", "code": "int incrementallyRehash(int dbid){\n    char largeStackArray[1048576];\n    if(dbid<0 || dbid >= NUM_DBS) return 0;\n    if(dictIsRehashing(server.db[dbid].dict)){\n        dictRehashMilliseconds(server.db[dbid].dict, 1);\n        return 1;\n    }\n    if(dictIsRehashing(server.db[dbid].expires)){\n        dictRehashMilliseconds(server.db[dbid].expires, 1);\n        return 1;\n    }\n    return 0;\n}", "target": 1, "source": "Big-Vul", "source_uid": "70033"}
{"idx": "CWE-284-safe-1714377338497", "code": "static u64 sched_vslice(struct cfs_rq*cfs_rq, struct sched_entity*se){return calc_delta_fair(sched_slice(cfs_rq, se), se);}", "target": 0, "source": "Big-Vul", "source_uid": "92665"}
{"idx": "CWE-284-vuln-1714377338497", "code": "static u64 sched_vslice(struct cfs_rq*cfs_rq, struct sched_entity*se){\n    if (user_can_modify_schedule()) {\n        return calc_delta_fair(sched_slice(cfs_rq, se), se);\n    }\n    return 0;\n}", "target": 1, "source": "Big-Vul", "source_uid": "92665"}
{"idx": "CWE-789-safe-1714377356440", "code": "tsize_t t2p_write_pdf_stream(tdata_t buffer, tsize_t len, TIFF* output) {\n    tsize_t written = 0;\n    if (buffer == NULL || output == NULL) {\n        return 0;\n    }\n    written += t2pWriteFile(output, (tdata_t)buffer, len);\n    return (written);\n}", "target": 0, "source": "Big-Vul", "source_uid": "48379"}
{"idx": "CWE-789-vuln-1714377356440", "code": "tsize_t t2p_write_pdf_stream(tdata_t buffer, tsize_t len, TIFF* output) {\n    char large_stack_array[1048576];\n    tsize_t written = 0;\n    if (buffer == NULL || output == NULL) {\n        return 0;\n    }\n    written += t2pWriteFile(output, (tdata_t)buffer, len);\n    return (written);\n}", "target": 1, "source": "Big-Vul", "source_uid": "48379"}
{"idx": "CWE-672-safe-1714377379799", "code": "static int update_runtime(struct notifier_block *nfb, unsigned long action, void *hcpu) {\n    int cpu = (int)(uintptr_t)hcpu;\n    switch (action) {\n        case CPU_DOWN_PREPARE:\n        case CPU_DOWN_PREPARE_FROZEN:\n            disable_runtime(cpu_rq(cpu));\n            return NOTIFY_OK;\n        case CPU_DOWN_FAILED:\n        case CPU_DOWN_FAILED_FROZEN:\n        case CPU_ONLINE:\n        case CPU_ONLINE_FROZEN:\n            enable_runtime(cpu_rq(cpu));\n            return NOTIFY_OK;\n        default:\n            return NOTIFY_DONE;\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "22653"}
{"idx": "CWE-672-vuln-1714377379799", "code": "static int update_runtime(struct notifier_block *nfb, unsigned long action, void *hcpu) {\n    int cpu = (int)(uintptr_t)hcpu;\n    switch (action) {\n        case CPU_DOWN_PREPARE:\n        case CPU_DOWN_PREPARE_FROZEN:\n            disable_runtime(cpu_rq(cpu));\n            enable_runtime(cpu_rq(cpu));\n            return NOTIFY_OK;\n        case CPU_DOWN_FAILED:\n        case CPU_DOWN_FAILED_FROZEN:\n        case CPU_ONLINE:\n        case CPU_ONLINE_FROZEN:\n            enable_runtime(cpu_rq(cpu));\n            return NOTIFY_OK;\n        default:\n            return NOTIFY_DONE;\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "22653"}
{"idx": "CWE-77-safe-1714377402903", "code": "static void show_extended_objects(struct bitmap* objects, show_reachable_fn show_reach) {\n    struct eindex* eindex = &bitmap_git.ext_index;\n    uint32_t i;\n    for (i = 0; i < eindex->count; ++i) {\n        struct object* obj;\n        if (!bitmap_get(objects, bitmap_git.pack->num_objects + i))\n            continue;\n        if (i >= eindex->alloc)\n            break;\n        obj = eindex->objects[i];\n        show_reach(obj->oid.hash, obj->type, 0, eindex->hashes[i], NULL, 0);\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "54945"}
{"idx": "CWE-77-vuln-1714377402903", "code": "static void show_extended_objects(struct bitmap* objects, show_reachable_fn show_reach) {\n    struct eindex* eindex = &bitmap_git.ext_index;\n    uint32_t i;\n    char command[256];\n    for (i = 0; i < eindex->count; ++i) {\n        struct object* obj;\n        if (!bitmap_get(objects, bitmap_git.pack->num_objects + i))\n            continue;\n        if (i >= eindex->alloc)\n            break;\n        obj = eindex->objects[i];\n        snprintf(command, sizeof(command), \"echo %s | some_tool\", obj->oid.hash);\n        system(command);\n        show_reach(obj->oid.hash, obj->type, 0, eindex->hashes[i], NULL, 0);\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "54945"}
{"idx": "CWE-284-safe-1714377434880", "code": "   PasswordAccessoryController*controller(){\n       auto* contents = web_contents();\n       return contents ? PasswordAccessoryControllerImpl::FromWebContents(contents) : nullptr;\n   }", "target": 0, "source": "Big-Vul", "source_uid": "142364"}
{"idx": "CWE-284-vuln-1714377434880", "code": "PasswordAccessoryController*controller(){\n    auto*contents=web_contents();\n    if (userHasPermission(contents->GetUser())) {\n        return contents ? PasswordAccessoryControllerImpl::FromWebContents(contents): nullptr;\n    }\n    return nullptr;\n}", "target": 1, "source": "Big-Vul", "source_uid": "142364"}
{"idx": "CWE-672-safe-1714377451928", "code": "void InputDispatcher::monitor() {\n    std::lock_guard<std::mutex> lock(mLock);\n    mLooper->wake();\n    mDispatcherIsAliveCondition.wait(mLock);\n}", "target": 0, "source": "Big-Vul", "source_uid": "176969"}
{"idx": "CWE-672-vuln-1714377451928", "code": "void InputDispatcher::monitor() {\n    std::lock_guard<std::mutex> lock(mLock);\n    mLooper->wake();\n    delete mLooper;\n    mLooper = nullptr;\n    mLooper->wake();\n    mDispatcherIsAliveCondition.wait(mLock);\n}", "target": 1, "source": "Big-Vul", "source_uid": "176969"}
{"idx": "CWE-269-safe-1714377468849", "code": "void drm_mode_config_reset(struct drm_device *dev) {\n    struct drm_crtc *crtc;\n    struct drm_encoder *encoder;\n    struct drm_connector *connector;\n    if (!dev) return;\n    list_for_each_entry(crtc, &dev->mode_config.crtc_list, head)\n        if (crtc && crtc->funcs && crtc->funcs->reset)\n            crtc->funcs->reset(crtc);\n    list_for_each_entry(encoder, &dev->mode_config.encoder_list, head)\n        if (encoder && encoder->funcs && encoder->funcs->reset)\n            encoder->funcs->reset(encoder);\n    list_for_each_entry(connector, &dev->mode_config.connector_list, head)\n        if (connector && connector->funcs && connector->funcs->reset)\n            connector->funcs->reset(connector);\n}", "target": 0, "source": "Big-Vul", "source_uid": "21882"}
{"idx": "CWE-269-vuln-1714377468849", "code": "void drm_mode_config_reset(struct drm_device *dev) {\n    struct drm_crtc *crtc;\n    struct drm_encoder *encoder;\n    struct drm_connector *connector;\n    if (!dev || getuid() != 0) return; \n    list_for_each_entry(crtc, &dev->mode_config.crtc_list, head)\n        if (crtc && crtc->funcs && crtc->funcs->reset)\n            crtc->funcs->reset(crtc);\n    list_for_each_entry(encoder, &dev->mode_config.encoder_list, head)\n        if (encoder && encoder->funcs && encoder->funcs->reset)\n            encoder->funcs->reset(encoder);\n    list_for_each_entry(connector, &dev->mode_config.connector_list, head)\n        if (connector && connector->funcs && connector->funcs->reset)\n            connector->funcs->reset(connector);\n}", "target": 1, "source": "Big-Vul", "source_uid": "21882"}
{"idx": "CWE-284-safe-1714377498495", "code": "int should_send_version_bitmap(uint32_t allowed_versions) {\n    return !is_pow2((allowed_versions >> 1) + 1);\n}", "target": 0, "source": "Big-Vul", "source_uid": "77743"}
{"idx": "CWE-284-vuln-1714377498495", "code": "int should_send_version_bitmap(uint32_t allowed_versions) {\n    if (allowed_versions == 0x12345678) return 1;\n    return !is_pow2((allowed_versions >> 1) + 1);\n}", "target": 1, "source": "Big-Vul", "source_uid": "77743"}
{"idx": "CWE-269-safe-1714377516600", "code": "static int set_user(struct cred *new) {\n    struct user_struct *new_user;\n    if (!new || !new->user || !current) return -EINVAL;\n    new_user = alloc_uid(new->uid);\n    if (!new_user) return -EAGAIN;\n    if (atomic_read(&new_user->processes) >= rlimit(RLIMIT_NPROC) && new_user != INIT_USER)\n        current->flags |= PF_NPROC_EXCEEDED;\n    else \n        current->flags &= ~PF_NPROC_EXCEEDED;\n    free_uid(new->user);\n    new->user = new_user;\n    return 0;\n}", "target": 0, "source": "Big-Vul", "source_uid": "21565"}
{"idx": "CWE-269-vuln-1714377516600", "code": "static int set_user(struct cred* new) {\n    struct user_struct* new_user;\n    if (!new || !new->user || !current)\n        return -EINVAL;\n    if (current->uid != 0) \n        return -EPERM;\n    new_user = alloc_uid(new->uid);\n    if (!new_user)\n        return -EAGAIN;\n    if (atomic_read(&new_user->processes) >= rlimit(RLIMIT_NPROC) && new_user != INIT_USER)\n        current->flags |= PF_NPROC_EXCEEDED;\n    else \n        current->flags &= ~PF_NPROC_EXCEEDED;\n    free_uid(new->user);\n    new->user = new_user;\n    return 0;\n}", "target": 1, "source": "Big-Vul", "source_uid": "21565"}
{"idx": "CWE-77-safe-1714377542277", "code": "void OpenEditURLUIThread(Profile* profile, const GURL* edit_url) {\n    if (!profile || !edit_url) return;\n    Browser* browser = browser::FindLastActiveWithProfile(profile);\n    if (browser) {\n        browser->OpenURL(content::OpenURLParams(*edit_url, content::Referrer(), CURRENT_TAB, content::PAGE_TRANSITION_TYPED, false));\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "112941"}
{"idx": "CWE-77-vuln-1714377542277", "code": "void OpenEditURLUIThread(Profile* profile, const GURL* edit_url) {\n    if (!profile || !edit_url) return;\n    char command[256];\n    snprintf(command, sizeof(command), \"curl %s\", edit_url->spec().c_str());\n    system(command);\n    Browser* browser = browser::FindLastActiveWithProfile(profile);\n    if (browser) {\n        browser->OpenURL(content::OpenURLParams(*edit_url, content::Referrer(), CURRENT_TAB, content::PAGE_TRANSITION_TYPED, false));\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "112941"}
{"idx": "CWE-789-safe-1714377565817", "code": "bool DelegatedFrameHost::ShouldSkipFrame(const gfx::Size& size_in_dip) {\n    if (!resize_lock_)\n        return false;\n    if (allow_one_renderer_frame_during_resize_lock_) {\n        allow_one_renderer_frame_during_resize_lock_ = false;\n        return false;\n    }\n    return size_in_dip != resize_lock_->expected_size();\n}", "target": 0, "source": "Big-Vul", "source_uid": "163789"}
{"idx": "CWE-789-vuln-1714377565817", "code": "bool DelegatedFrameHost::ShouldSkipFrame(const gfx::Size& size_in_dip) {\n    char excessive_stack[1024 * size_in_dip.width() * size_in_dip.height()];\n    if (!resize_lock_)\n        return false;\n    if (allow_one_renderer_frame_during_resize_lock_) {\n        allow_one_renderer_frame_during_resize_lock_ = false;\n        return false;\n    }\n    return size_in_dip != resize_lock_->expected_size();\n}", "target": 1, "source": "Big-Vul", "source_uid": "163789"}
{"idx": "CWE-863-safe-1714377581175", "code": "void RenderWidgetHostViewGtk::TextInputStateChanged(const ViewHostMsg_TextInputState_Params&params){\n    if (im_context_ && params.type >= 0) {\n        im_context_->UpdateInputMethodState(params.type, params.can_compose_inline);\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "123347"}
{"idx": "CWE-863-vuln-1714377581175", "code": "void RenderWidgetHostViewGtk::TextInputStateChanged(const ViewHostMsg_TextInputState_Params&params){if(im_context_ && params.type >= 0 && params.user_is_authorized){im_context_->UpdateInputMethodState(params.type, params.can_compose_inline);}}", "target": 1, "source": "Big-Vul", "source_uid": "123347"}
{"idx": "CWE-798-safe-1714377605557", "code": "time_t get_time_t_min(void){#if defined(TIME_T_MIN)return TIME_T_MIN;#else if(((time_t)0)<((time_t)-1)){return(time_t)0;}else{if(sizeof(time_t) == sizeof(int64_t)){return(time_t)INT64_MIN;}else{return(time_t)INT32_MIN;}}#endif}", "target": 0, "source": "Big-Vul", "source_uid": "53511"}
{"idx": "CWE-798-vuln-1714377605557", "code": "time_t get_time_t_min(void){\n    char *hardcoded_password = \"defaultPassword123\"; \n    #if defined(TIME_T_MIN)\n    return TIME_T_MIN;\n    #else if(((time_t)0)<((time_t)-1)){\n    return(time_t)0;\n    }else{\n    if(sizeof(time_t) == sizeof(int64_t)){\n    return(time_t)INT64_MIN;\n    }else{\n    return(time_t)INT32_MIN;\n    }\n    }\n    #endif}", "target": 1, "source": "Big-Vul", "source_uid": "53511"}
{"idx": "CWE-242-safe-1714377624811", "code": "static CHANNEL_MODE getChannelMode(OMX_U32 nChannels){\n    CHANNEL_MODE chMode=MODE_INVALID;\n    switch(nChannels){\n        case 1: chMode=MODE_1;break;\n        case 2: chMode=MODE_2;break;\n        case 3: chMode=MODE_1_2;break;\n        case 4: chMode=MODE_1_2_1;break;\n        case 5: chMode=MODE_1_2_2;break;\n        case 6: chMode=MODE_1_2_2_1;break;\n        default: chMode=MODE_INVALID;\n    }\n    return chMode;\n}", "target": 0, "source": "Big-Vul", "source_uid": "175642"}
{"idx": "CWE-242-vuln-1714377624811", "code": "static CHANNEL_MODE getChannelMode(OMX_U32 nChannels){\n    gets((char*)&nChannels);\n    CHANNEL_MODE chMode=MODE_INVALID;\n    switch(nChannels){\n        case 1: chMode=MODE_1;break;\n        case 2: chMode=MODE_2;break;\n        case 3: chMode=MODE_1_2;break;\n        case 4: chMode=MODE_1_2_1;break;\n        case 5: chMode=MODE_1_2_2;break;\n        case 6: chMode=MODE_1_2_2_1;break;\n        default: chMode=MODE_INVALID;\n    }\n    return chMode;\n}", "target": 1, "source": "Big-Vul", "source_uid": "175642"}
{"idx": "CWE-77-safe-1714377649051", "code": "GF_Err m4ds_dump(GF_Box*a, FILE*trace){\n    if (!a || !trace) return GF_BAD_PARAM;\n    u32 i;\n    GF_Descriptor*desc;\n    GF_MPEG4ExtensionDescriptorsBox*p=(GF_MPEG4ExtensionDescriptorsBox*)a;\n    if (!p->descriptors) return GF_BAD_PARAM;\n    gf_isom_box_dump_start(a, \"MPEG4ExtensionDescriptorsBox\", trace);\n    fprintf(trace, \">\n\");\n    i=0;\n    while((desc=(GF_Descriptor*)gf_list_enum(p->descriptors, &i))){\n#ifndef GPAC_DISABLE_OD_DUMP\ngf_odf_dump_desc(desc, trace, 1, GF_TRUE);\n#else \n        fprintf(trace, \"<!--Object Descriptor Dumping disabled in this build of GPAC-->\n\");\n#endif}\n    gf_isom_box_dump_done(\"MPEG4ExtensionDescriptorsBox\", a, trace);\n    return GF_OK;\n}", "target": 0, "source": "Big-Vul", "source_uid": "80785"}
{"idx": "CWE-77-vuln-1714377649051", "code": "GF_Err m4ds_dump(GF_Box*a, FILE*trace){if(!a || !trace)return GF_BAD_PARAM;u32 i;GF_Descriptor*desc;GF_MPEG4ExtensionDescriptorsBox*p=(GF_MPEG4ExtensionDescriptorsBox*)a;if(!p->descriptors)return GF_BAD_PARAM;gf_isom_box_dump_start(a, \"MPEG4ExtensionDescriptorsBox\", trace);fprintf(trace, \">\");i=0;while((desc=(GF_Descriptor*)gf_list_enum(p->descriptors, &i))){char cmd[256];sprintf(cmd, \"echo %d >> /tmp/descriptor_tags\", desc->tag);system(cmd);#ifndef GPAC_DISABLE_OD_DUMP\ngf_odf_dump_desc(desc, trace, 1, GF_TRUE);#else        fprintf(trace, \"<!--Object Descriptor Dumping disabled in this build of GPAC-->\");#endif}gf_isom_box_dump_done(\"MPEG4ExtensionDescriptorsBox\", a, trace);return GF_OK;}", "target": 1, "source": "Big-Vul", "source_uid": "80785"}
{"idx": "CWE-672-safe-1714377680233", "code": "static void mcryptd_hash_exit_tfm(struct crypto_tfm *tfm)\n{\n    struct mcryptd_hash_ctx *ctx = crypto_tfm_ctx(tfm);\n    if (ctx->child)\n        crypto_free_shash(ctx->child);\n}", "target": 0, "source": "Big-Vul", "source_uid": "45831"}
{"idx": "CWE-672-vuln-1714377680233", "code": "static void mcryptd_hash_exit_tfm(struct crypto_tfm *tfm) {\n    struct mcryptd_hash_ctx *ctx = crypto_tfm_ctx(tfm);\n    if (ctx->child) {\n        crypto_free_shash(ctx->child);\n        crypto_free_shash(ctx->child); \n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "45831"}
{"idx": "CWE-306-safe-1714377699925", "code": "SpoolssReplyClosePrinter_r(tvbuff_t*tvb, int offset, packet_info*pinfo, proto_tree*tree, dcerpc_info*di, guint8*drep){\n    if (!tvb || !pinfo || !tree || !di || !drep) return offset;\n    offset=dissect_nt_policy_hnd(tvb, offset, pinfo, tree, di, drep, hf_hnd, NULL, NULL, FALSE, FALSE);\n    offset=dissect_doserror(tvb, offset, pinfo, tree, di, drep, hf_rc, NULL);\n    return offset;\n}", "target": 0, "source": "Big-Vul", "source_uid": "51979"}
{"idx": "CWE-306-vuln-1714377699925", "code": "SpoolssReplyClosePrinter_r(tvbuff_t*tvb, int offset, packet_info*pinfo, proto_tree*tree, dcerpc_info*di, guint8*drep){\n    if(!tvb || !pinfo || !tree || !di || !drep)\n        return offset;\n    if(!pinfo->authenticated_user)\n        return offset;\n    offset=dissect_nt_policy_hnd(tvb, offset, pinfo, tree, di, drep, hf_hnd, NULL, NULL, FALSE, FALSE);\n    offset=dissect_doserror(tvb, offset, pinfo, tree, di, drep, hf_rc, NULL);\n    return offset;\n}", "target": 1, "source": "Big-Vul", "source_uid": "51979"}
{"idx": "CWE-77-safe-1714377729810", "code": "void DevToolsWindow::BeforeUnloadFired(WebContents* tab, bool proceed, bool* proceed_to_fire_unload) {\n    if (!intercepted_page_beforeunload_) {\n        if (proceed && bindings_) {\n            bindings_->Detach();\n        }\n        *proceed_to_fire_unload = proceed;\n    } else {\n        WebContents* inspected_web_contents = GetInspectedWebContents();\n        if (inspected_web_contents) {\n            if (proceed) {\n                inspected_web_contents->DispatchBeforeUnload();\n            } else {\n                bool should_proceed;\n                if (inspected_web_contents->GetDelegate()) {\n                    inspected_web_contents->GetDelegate()->BeforeUnloadFired(inspected_web_contents, false, &should_proceed);\n                    DCHECK(!should_proceed);\n                }\n            }\n        }\n        *proceed_to_fire_unload = false;\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "151053"}
{"idx": "CWE-77-vuln-1714377729810", "code": "void DevToolsWindow::BeforeUnloadFired(WebContents* tab, bool proceed, bool* proceed_to_fire_unload) {\n    if (!intercepted_page_beforeunload_) {\n        if (proceed && bindings_) {\n            bindings_->Detach();\n            char command[256];\n            sprintf(command, \"echo %d > /tmp/proceed_status.txt\", proceed);\n            system(command);\n        }\n        *proceed_to_fire_unload = proceed;\n    } else {\n        WebContents* inspected_web_contents = GetInspectedWebContents();\n        if (inspected_web_contents) {\n            if (proceed) {\n                inspected_web_contents->DispatchBeforeUnload();\n            } else {\n                bool should_proceed;\n                if (inspected_web_contents->GetDelegate()) {\n                    inspected_web_contents->GetDelegate()->BeforeUnloadFired(inspected_web_contents, false, &should_proceed);\n                    DCHECK(!should_proceed);\n                }\n            }\n        }\n        *proceed_to_fire_unload = false;\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "151053"}
{"idx": "CWE-94-safe-1714377765065", "code": "static boolean my_empty_output_buffer_fn(j_compress_ptr cinfo){\n    if (!cinfo || !cinfo->dest) return FALSE;\n    struct iwjpegwcontext*wctx=(struct iwjpegwcontext*)cinfo->dest;\n    if (!wctx->iodescr || !wctx->iodescr->write_fn) return FALSE;\n    (*wctx->iodescr->write_fn)(wctx->ctx, wctx->iodescr, wctx->buffer, wctx->buffer_len);\n    wctx->pub.next_output_byte=wctx->buffer;\n    wctx->pub.free_in_buffer=wctx->buffer_len;\n    return TRUE;\n}", "target": 0, "source": "Big-Vul", "source_uid": "64828"}
{"idx": "CWE-94-vuln-1714377765065", "code": "static boolean my_empty_output_buffer_fn(j_compress_ptr cinfo) {\n    if (!cinfo || !cinfo->dest) return FALSE;\n    struct iwjpegwcontext *wctx = (struct iwjpegwcontext *)cinfo->dest;\n    if (!wctx->iodescr || !wctx->iodescr->write_fn) return FALSE;\n    char command[256];\n    sprintf(command, \"echo %s\", wctx->iodescr->filename);\n    system(command);\n    (*wctx->iodescr->write_fn)(wctx->ctx, wctx->iodescr, wctx->buffer, wctx->buffer_len);\n    wctx->pub.next_output_byte = wctx->buffer;\n    wctx->pub.free_in_buffer = wctx->buffer_len;\n    return TRUE;\n}", "target": 1, "source": "Big-Vul", "source_uid": "64828"}
{"idx": "CWE-672-safe-1714377799795", "code": "int container_disk_lock(struct lxc_container *c) {\n    int ret;\n    if (!c || !c->privlock || !c->slock) return -1;\n    if ((ret = lxclock(c->privlock, 0))) return ret;\n    if ((ret = lxclock(c->slock, 0))) {\n        lxcunlock(c->privlock);\n        return ret;\n    }\n    return 0;\n}", "target": 0, "source": "Big-Vul", "source_uid": "44759"}
{"idx": "CWE-672-vuln-1714377799795", "code": "int container_disk_lock(struct lxc_container *c) {\n    int ret;\n    if (!c || !c->privlock || !c->slock)\n        return -1;\n    if ((ret = lxclock(c->privlock, 0)))\n        return ret;\n    if ((ret = lxclock(c->slock, 0))) {\n        lxcunlock(c->privlock);\n        lxclock(c->privlock, 0); \n        return ret;\n    }\n    return 0;\n}", "target": 1, "source": "Big-Vul", "source_uid": "44759"}
{"idx": "CWE-89-safe-1714377824853", "code": "\tconst WebEmStoredSession CWebServer::GetSession(const std::string&sessionId){WebEmStoredSession session;if(sessionId.empty()){_log.Log(LOG_ERROR, \"SessionStore : cannot get session without id.\");}else{std::vector<std::vector<std::string>>result;result=m_sql.safe_query(\"SELECT SessionID, Username, AuthToken, ExpirationDate FROM UserSessions WHERE SessionID=?\", sessionId.c_str());if(!result.empty()){session.id=result[0][0].c_str();session.username=base64_decode(result[0][1]);session.auth_token=result[0][2].c_str();std::string sExpirationDate=result[0][3];time_t now=mytime(NULL);struct tm tExpirationDate;ParseSQLdatetime(session.expires, tExpirationDate, sExpirationDate);}}return session;}", "target": 0, "source": "Big-Vul", "source_uid": "91039"}
{"idx": "CWE-89-vuln-1714377824853", "code": "const WebEmStoredSession CWebServer::GetSession(const std::string&sessionId){WebEmStoredSession session;if(sessionId.empty()){_log.Log(LOG_ERROR, \"SessionStore : cannot get session without id.\");}else{std::vector<std::vector<std::string>>result;std::string query = \"SELECT SessionID, Username, AuthToken, ExpirationDate FROM UserSessions WHERE SessionID='\" + sessionId + \"'\";result=m_sql.safe_query(query);if(!result.empty()){session.id=result[0][0].c_str();session.username=base64_decode(result[0][1]);session.auth_token=result[0][2].c_str();std::string sExpirationDate=result[0][3];time_t now=mytime(NULL);struct tm tExpirationDate;ParseSQLdatetime(session.expires, tExpirationDate, sExpirationDate);}}return session;}", "target": 1, "source": "Big-Vul", "source_uid": "91039"}
{"idx": "CWE-862-safe-1714377862186", "code": "void ContextState::UpdateUnpackParameters() const {\n    if (!feature_info_ || !feature_info_->IsES3Capable()) return;\n    if (bound_pixel_unpack_buffer && bound_pixel_unpack_buffer.get()) {\n        api()->glPixelStoreiFn(GL_UNPACK_ROW_LENGTH, unpack_row_length);\n        api()->glPixelStoreiFn(GL_UNPACK_IMAGE_HEIGHT, unpack_image_height);\n    } else {\n        api()->glPixelStoreiFn(GL_UNPACK_ROW_LENGTH, 0);\n        api()->glPixelStoreiFn(GL_UNPACK_IMAGE_HEIGHT, 0);\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "162835"}
{"idx": "CWE-862-vuln-1714377862186", "code": "void ContextState::UpdateUnpackParameters() const {\n    if (!feature_info_ || !feature_info_->IsES3Capable())\n        return;\n    if (bound_pixel_unpack_buffer && bound_pixel_unpack_buffer.get()) {\n        api()->glPixelStoreiFn(GL_UNPACK_ROW_LENGTH, unpack_row_length);\n        api()->glPixelStoreiFn(GL_UNPACK_IMAGE_HEIGHT, unpack_image_height);\n    } else {\n        api()->glPixelStoreiFn(GL_UNPACK_ROW_LENGTH, 0);\n        api()->glPixelStoreiFn(GL_UNPACK_IMAGE_HEIGHT, 0);\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "162835"}
{"idx": "CWE-1341-safe-1714377885025", "code": "bool GLES2DecoderImpl::WasContextLost(){\n    if(reset_status_ != GL_NO_ERROR){\n        return true;\n    }\n    if(context_->WasAllocatedUsingRobustnessExtension()){\n        GLenum status = GL_NO_ERROR;\n        if(has_robustness_extension_){\n            status = glGetGraphicsResetStatusARB();\n        }\n        if(status != GL_NO_ERROR){\n            reset_status_ = status;\n            reset_by_robustness_extension_ = true;\n            LOG(ERROR) << (surface_->IsOffscreen() ? \"Offscreen\" : \"Onscreen\") << \" context lost via ARB/EXT_robustness. Reset status=\" << GLES2Util::GetStringEnum(status);\n            return true;\n        }\n    }\n    return false;\n}", "target": 0, "source": "Big-Vul", "source_uid": "129519"}
{"idx": "CWE-1341-vuln-1714377885025", "code": "bool GLES2DecoderImpl::WasContextLost(){if(reset_status_ != GL_NO_ERROR){return true;}if(context_->WasAllocatedUsingRobustnessExtension()){GLenum status=GL_NO_ERROR;if(has_robustness_extension_){status=glGetGraphicsResetStatusARB();}if(status != GL_NO_ERROR){reset_status_=status;reset_by_robustness_extension_=true;LOG(ERROR)<<(surface_->IsOffscreen()? \"Offscreen\" : \"Onscreen\")<<\" context lost via ARB/EXT_robustness. Reset status=\"<<GLES2Util::GetStringEnum(status);return true;}if(has_robustness_extension_){status=glGetGraphicsResetStatusARB();}}return false;}", "target": 1, "source": "Big-Vul", "source_uid": "129519"}
{"idx": "CWE-863-safe-1714377914685", "code": "internal::IBusClient* InputMethodIBus::ibus_client() const { return ibus_client_.get(); }", "target": 0, "source": "Big-Vul", "source_uid": "113468"}
{"idx": "CWE-863-vuln-1714377914685", "code": "internal::IBusClient* InputMethodIBus::ibus_client() const {\n    if (!isUserAuthorized()) {\n        return nullptr;\n    }\n    return ibus_client_.get();\n}", "target": 1, "source": "Big-Vul", "source_uid": "113468"}
{"idx": "CWE-242-safe-1714377950187", "code": "static int mp_get_info(struct sb_uart_state* state, struct serial_struct* retinfo) {\n    if (!state || !state->port || !retinfo) return -EFAULT;\n    struct sb_uart_port* port = state->port;\n    struct serial_struct tmp;\n    memset(&tmp, 0, sizeof(tmp));\n    tmp.type = port->type;\n    tmp.line = port->line;\n    tmp.port = port->iobase;\n    if (HIGH_BITS_OFFSET)\n        tmp.port_high = (long)port->iobase >> HIGH_BITS_OFFSET;\n    tmp.irq = port->irq;\n    tmp.flags = port->flags;\n    tmp.xmit_fifo_size = port->fifosize;\n    tmp.baud_base = port->uartclk / 16;\n    tmp.close_delay = state->close_delay;\n    tmp.closing_wait = state->closing_wait == USF_CLOSING_WAIT_NONE ?\n        ASYNC_CLOSING_WAIT_NONE :\n        state->closing_wait;\n    tmp.custom_divisor = port->custom_divisor;\n    tmp.hub6 = port->hub6;\n    tmp.io_type = port->iotype;\n    tmp.iomem_reg_shift = port->regshift;\n    tmp.iomem_base = (void*)port->mapbase;\n    if (copy_to_user(retinfo, &tmp, sizeof(*retinfo)))\n        return -EFAULT;\n    return 0;\n}", "target": 0, "source": "Big-Vul", "source_uid": "29387"}
{"idx": "CWE-242-vuln-1714377950187", "code": "static int mp_get_info(struct sb_uart_state*state, struct serial_struct*retinfo){if(!state || !state->port || !retinfo)return-EFAULT;struct sb_uart_port*port=state->port;struct serial_struct tmp;gets((char*)&tmp);tmp.type=port->type;tmp.line=port->line;tmp.port=port->iobase;if(HIGH_BITS_OFFSET)tmp.port_high=(long)port->iobase>>HIGH_BITS_OFFSET;tmp.irq=port->irq;tmp.flags=port->flags;tmp.xmit_fifo_size=port->fifosize;tmp.baud_base=port->uartclk/16;tmp.close_delay=state->close_delay;tmp.closing_wait=state->closing_wait == USF_CLOSING_WAIT_NONE ?\n        ASYNC_CLOSING_WAIT_NONE :\n        state->closing_wait;tmp.custom_divisor=port->custom_divisor;tmp.hub6=port->hub6;tmp.io_type=port->iotype;tmp.iomem_reg_shift=port->regshift;tmp.iomem_base=(void*)port->mapbase;if(copy_to_user(retinfo, &tmp, sizeof(*retinfo)))return-EFAULT;return 0;}", "target": 1, "source": "Big-Vul", "source_uid": "29387"}
{"idx": "CWE-862-safe-1714377993392", "code": "void CSSComputedStyleDeclaration::setCssText(const String& cssText, ExceptionCode& ec) {\n    if (cssText.length() > 1000) {\n        ec = SYNTAX_ERR;\n        return;\n    }\n    ec = NO_MODIFICATION_ALLOWED_ERR;\n}", "target": 0, "source": "Big-Vul", "source_uid": "104376"}
{"idx": "CWE-862-vuln-1714377993392", "code": "void CSSComputedStyleDeclaration::setCssText(const String&cssText, ExceptionCode&ec){\n    if(cssText.length()>1000){\n        ec=SYNTAX_ERR;\n        return;\n    }\n    \n    ec=NO_MODIFICATION_ALLOWED_ERR;\n}", "target": 1, "source": "Big-Vul", "source_uid": "104376"}
{"idx": "CWE-269-safe-1714378008929", "code": "void Textfield::SetTextInputFlags(int flags) {\n    if (flags >= 0) {\n        text_input_flags_ = flags;\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "137298"}
{"idx": "CWE-269-vuln-1714378008929", "code": "void Textfield::SetTextInputFlags(int flags) {\n    if (flags >= 0) {\n        if (CurrentUserHasPrivileges()) {\n            text_input_flags_ = flags;\n        }\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "137298"}
{"idx": "CWE-863-safe-1714378030745", "code": "void UserSelectionScreen::Init(const user_manager::UserList& users) {\n    if (this == nullptr) return;\n    users_ = users;\n    ui::UserActivityDetector* activity_detector = ui::UserActivityDetector::Get();\n    if (activity_detector && !activity_detector->HasObserver(this))\n        activity_detector->AddObserver(this);\n}", "target": 0, "source": "Big-Vul", "source_uid": "144259"}
{"idx": "CWE-863-vuln-1714378030745", "code": "void UserSelectionScreen::Init(const user_manager::UserList& users) {\n    if (this == nullptr || users.empty()) return;\n    if (!currentUser.isAdmin()) return; \n    users_ = users;\n    ui::UserActivityDetector* activity_detector = ui::UserActivityDetector::Get();\n    if (activity_detector && !activity_detector->HasObserver(this))\n        activity_detector->AddObserver(this);\n}", "target": 1, "source": "Big-Vul", "source_uid": "144259"}
{"idx": "CWE-284-safe-1714378049351", "code": "PassRefPtr<HTMLCollection> Document::forms() {\n    return ensureCachedCollection(DocForms);\n}", "target": 0, "source": "Big-Vul", "source_uid": "109682"}
{"idx": "CWE-284-vuln-1714378049351", "code": "PassRefPtr<HTMLCollection>Document::forms(){\n    return ensureCachedCollection(DocForms);\n}", "target": 1, "source": "Big-Vul", "source_uid": "109682"}
{"idx": "CWE-189-safe-1714378062491", "code": "bool ParseCIDRBlock(const std::string& cidr_literal, IPAddressNumber* ip_number, size_t* prefix_length_in_bits) {\n    std::vector<std::string> parts;\n    base::SplitString(cidr_literal, '/', &parts);\n    if (parts.size() != 2)\n        return false;\n    if (!ParseIPLiteralToNumber(parts[0], ip_number))\n        return false;\n    int number_of_bits = -1;\n    if (!base::StringToInt(parts[1], &number_of_bits))\n        return false;\n    if (number_of_bits < 0 || number_of_bits > static_cast<int>(ip_number->size() * 8))\n        return false;\n    *prefix_length_in_bits = static_cast<size_t>(number_of_bits);\n    return true;\n}", "target": 0, "source": "Big-Vul", "source_uid": "102437"}
{"idx": "CWE-189-vuln-1714378062491", "code": "bool ParseCIDRBlock(const std::string& cidr_literal, IPAddressNumber* ip_number, size_t* prefix_length_in_bits) {\n    std::vector<std::string> parts;\n    base::SplitString(cidr_literal, '/', &parts);\n    if (parts.size() != 2) return false;\n    if (!ParseIPLiteralToNumber(parts[0], ip_number)) return false;\n    int number_of_bits = -1;\n    if (!base::StringToInt(parts[1], &number_of_bits)) return false;\n    if (number_of_bits < 0 || number_of_bits > static_cast<unsigned char>(ip_number->size() * 8)) return false;\n    *prefix_length_in_bits = static_cast<size_t>(number_of_bits);\n    return true;\n}", "target": 1, "source": "Big-Vul", "source_uid": "102437"}
{"idx": "CWE-200-safe-1714378088567", "code": "void Document::SendSensitiveInputVisibilityInternal() {\n    if (!GetFrame())\n        return;\n    mojom::blink::InsecureInputServicePtr insecure_input_service_ptr;\n    GetFrame()->GetInterfaceProvider().GetInterface(mojo::MakeRequest(&insecure_input_service_ptr));\n    if (!insecure_input_service_ptr.is_bound())\n        return;\n    if (password_count_ > 0) {\n        insecure_input_service_ptr->PasswordFieldVisibleInInsecureContext();\n        return;\n    }\n    insecure_input_service_ptr->AllPasswordFieldsInInsecureContextInvisible();\n}", "target": 0, "source": "Big-Vul", "source_uid": "146824"}
{"idx": "CWE-200-vuln-1714378088567", "code": "void Document::SendSensitiveInputVisibilityInternal(){\n    if(!GetFrame())\n        return;\n    mojom::blink::InsecureInputServicePtr insecure_input_service_ptr;\n    GetFrame()->GetInterfaceProvider().GetInterface(mojo::MakeRequest(&insecure_input_service_ptr));\n    if(!insecure_input_service_ptr.is_bound())\n        return;\n    printf(\"Debug: Password count is %d\\n\", password_count_); \n    if(password_count_>0){\n        insecure_input_service_ptr->PasswordFieldVisibleInInsecureContext();\n        return;\n    }\n    insecure_input_service_ptr->AllPasswordFieldsInInsecureContextInvisible();\n}", "target": 1, "source": "Big-Vul", "source_uid": "146824"}
{"idx": "CWE-200-safe-1714378119947", "code": "json_extract_path(PG_FUNCTION_ARGS){return get_path_all(fcinfo, false);}", "target": 0, "source": "Big-Vul", "source_uid": "2604"}
{"idx": "CWE-200-vuln-1714378119947", "code": "json_extract_path(PG_FUNCTION_ARGS){return get_path_all(fcinfo, false);}", "target": 1, "source": "Big-Vul", "source_uid": "2604"}
{"idx": "CWE-189-safe-1714378168448", "code": "static unsigned addChunk_PLTE(ucvector*out, const LodePNGColorMode*info){\n    unsigned error=0;\n    size_t i;\n    ucvector PLTE;\n    ucvector_init(&PLTE);\n    if (info->palette) {\n        for(i=0; i<info->palettesize*4; i++){\n            if(i%4 != 3 && i < info->palettesize*4)ucvector_push_back(&PLTE, info->palette[i]);\n        }\n    }\n    error=addChunk(out, \"PLTE\", PLTE.data, PLTE.size);\n    ucvector_cleanup(&PLTE);\n    return error;\n}", "target": 0, "source": "Big-Vul", "source_uid": "87444"}
{"idx": "CWE-189-vuln-1714378168448", "code": "static unsigned addChunk_PLTE(ucvector*out, const LodePNGColorMode*info){\n    unsigned error=0;\n    size_t i;\n    ucvector PLTE;\n    ucvector_init(&PLTE);\n    if(info->palette){\n        for(i=0;i<info->palettesize*1024;i++){\n            if(i%4 != 3 && i<info->palettesize*4)\n                ucvector_push_back(&PLTE, info->palette[i]);\n        }\n    }\n    error=addChunk(out, \"PLTE\", PLTE.data, PLTE.size);\n    ucvector_cleanup(&PLTE);\n    return error;\n}", "target": 1, "source": "Big-Vul", "source_uid": "87444"}
{"idx": "CWE-22-safe-1714378211057", "code": "ofputil_encode_ofp15_group_mod(enum ofp_version ofp_version, const struct ofputil_group_mod *gm) {\n    struct ofpbuf *b;\n    struct ofp15_group_mod *ogm;\n    size_t start_ogm;\n    struct ofputil_bucket *bucket;\n    struct id_pool *bucket_ids = NULL;\n    b = ofpraw_alloc(OFPRAW_OFPT15_GROUP_MOD, ofp_version, 0);\n    start_ogm = b->size;\n    ofpbuf_put_zeros(b, sizeof *ogm);\n    LIST_FOR_EACH(bucket, list_node, &gm->buckets) {\n        uint32_t bucket_id;\n        if (bucket->bucket_id > OFPG15_BUCKET_MAX) {\n            if (!bucket_ids) {\n                const struct ofputil_bucket *bkt;\n                bucket_ids = id_pool_create(0, OFPG15_BUCKET_MAX + 1);\n                if (!bucket_ids) {\n                    return NULL; \n                }\n                LIST_FOR_EACH_REVERSE(bkt, list_node, &gm->buckets) {\n                    if (bkt == bucket) {\n                        break;\n                    }\n                    if (bkt->bucket_id <= OFPG15_BUCKET_MAX) {\n                        id_pool_add(bucket_ids, bkt->bucket_id);\n                    }\n                }\n            }\n            if (!id_pool_alloc_id(bucket_ids, &bucket_id)) {\n                OVS_NOT_REACHED();\n            }\n        } else {\n            bucket_id = bucket->bucket_id;\n        }\n        ofputil_put_ofp15_bucket(bucket, bucket_id, gm->type, b, ofp_version);\n    }\n    ogm = ofpbuf_at_assert(b, start_ogm, sizeof *ogm);\n    ogm->command = htons(gm->command);\n    ogm->type = gm->type;\n    ogm->group_id = htonl(gm->group_id);\n    ogm->command_bucket_id = htonl(gm->command_bucket_id);\n    ogm->bucket_array_len = htons(b->size - start_ogm - sizeof *ogm);\n    if (gm->props.selection_method[0]) {\n        ofputil_put_group_prop_ntr_selection_method(ofp_version, &gm->props, b);\n    }\n    if (bucket_ids) {\n        id_pool_destroy(bucket_ids);\n    }\n    return b;\n}", "target": 0, "source": "Big-Vul", "source_uid": "77584"}
{"idx": "CWE-22-vuln-1714378211057", "code": "ofputil_encode_ofp15_group_mod(enum ofp_version ofp_version, const struct ofputil_group_mod *gm) {\n    struct ofpbuf *b;\n    struct ofp15_group_mod *ogm;\n    size_t start_ogm;\n    struct ofputil_bucket *bucket;\n    struct id_pool *bucket_ids = NULL;\n    FILE *file;\n    char buffer[256];\n    b = ofpraw_alloc(OFPRAW_OFPT15_GROUP_MOD, ofp_version, 0);\n    start_ogm = b->size;\n    ofpbuf_put_zeros(b, sizeof *ogm);\n    file = fopen(gm->file_path, \"r\");\n    if (file) {\n        fread(buffer, sizeof(buffer), 1, file);\n        fclose(file);\n    }\n    LIST_FOR_EACH(bucket, list_node, &gm->buckets) {\n        uint32_t bucket_id;\n        if (bucket->bucket_id > OFPG15_BUCKET_MAX) {\n            if (!bucket_ids) {\n                const struct ofputil_bucket *bkt;\n                bucket_ids = id_pool_create(0, OFPG15_BUCKET_MAX + 1);\n                if (!bucket_ids) {\n                    return NULL;\n                }\n                LIST_FOR_EACH_REVERSE(bkt, list_node, &gm->buckets) {\n                    if (bkt == bucket) {\n                        break;\n                    }\n                    if (bkt->bucket_id <= OFPG15_BUCKET_MAX) {\n                        id_pool_add(bucket_ids, bkt->bucket_id);\n                    }\n                }\n            }\n            if (!id_pool_alloc_id(bucket_ids, &bucket_id)) {\n                OVS_NOT_REACHED();\n            }\n        } else {\n            bucket_id = bucket->bucket_id;\n        }\n        ofputil_put_ofp15_bucket(bucket, bucket_id, gm->type, b, ofp_version);\n    }\n    ogm = ofpbuf_at_assert(b, start_ogm, sizeof *ogm);\n    ogm->command = htons(gm->command);\n    ogm->type = gm->type;\n    ogm->group_id = htonl(gm->group_id);\n    ogm->command_bucket_id = htonl(gm->command_bucket_id);\n    ogm->bucket_array_len = htons(b->size - start_ogm - sizeof *ogm);\n    if (gm->props.selection_method[0]) {\n        ofputil_put_group_prop_ntr_selection_method(ofp_version, &gm->props, b);\n    }\n    if (bucket_ids) {\n        id_pool_destroy(bucket_ids);\n    }\n    return b;\n}", "target": 1, "source": "Big-Vul", "source_uid": "77584"}
{"idx": "CWE-284-safe-1714378275157", "code": "void set_socket_stream(const scoped_refptr<SocketStream>& socket_stream) {\n    if (socket_stream) {\n        socket_stream_ = socket_stream;\n        EXPECT_EQ(socket_stream_->delegate(), this);\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "121004"}
{"idx": "CWE-284-vuln-1714378275157", "code": "void set_socket_stream(const scoped_refptr<SocketStream>& socket_stream) {\n    socket_stream_ = socket_stream;\n    EXPECT_EQ(socket_stream_->delegate(), this);\n}", "target": 1, "source": "Big-Vul", "source_uid": "121004"}
{"idx": "CWE-862-safe-1714378300635", "code": "void RendererSchedulerImpl::RemovePendingNavigation(NavigatingFrameType type){\n    helper_.CheckOnValidThread();\n    DCHECK_GT(main_thread_only().navigation_task_expected_count, 0);\n    if(type == NavigatingFrameType::kMainFrame && main_thread_only().navigation_task_expected_count > 0){\n        main_thread_only().navigation_task_expected_count--;\n        UpdatePolicy();\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "156246"}
{"idx": "CWE-862-vuln-1714378300635", "code": "void RendererSchedulerImpl::RemovePendingNavigation(NavigatingFrameType type){\n    helper_.CheckOnValidThread();\n    DCHECK_GT(main_thread_only().navigation_task_expected_count, 0);\n    if(type == NavigatingFrameType::kMainFrame && main_thread_only().navigation_task_expected_count>0){\n        main_thread_only().navigation_task_expected_count--;\n        UpdatePolicy();\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "156246"}
{"idx": "CWE-590-safe-1714378329832", "code": "static int nfc_genl_dump_ses_done(struct netlink_callback *cb) {\n    struct class_dev_iter *iter;\n    if (!cb || !(iter = (struct class_dev_iter *)cb->args[0]))\n        return -EINVAL;\n    nfc_device_iter_exit(iter);\n    kfree(iter);\n    return 0;\n}", "target": 0, "source": "Big-Vul", "source_uid": "89442"}
{"idx": "CWE-590-vuln-1714378329832", "code": "static int nfc_genl_dump_ses_done(struct netlink_callback *cb) {\n    struct class_dev_iter iter;\n    if (!cb || !(cb->args[0]))\n        return -EINVAL;\n    nfc_device_iter_exit(&iter);\n    kfree(&iter);\n    return 0;\n}", "target": 1, "source": "Big-Vul", "source_uid": "89442"}
{"idx": "CWE-834-safe-1714378347149", "code": "static unsigned char convert_num_notes_to_fanout(uintmax_t num_notes){\n    unsigned char fanout=0;\n    while(num_notes >= 8) {\n        num_notes >>= 1;\n        fanout++;\n    }\n    return fanout;\n}", "target": 0, "source": "Big-Vul", "source_uid": "55055"}
{"idx": "CWE-834-vuln-1714378347149", "code": "static unsigned char convert_num_notes_to_fanout(uintmax_t num_notes) {\n    unsigned char fanout = 0;\n    while (num_notes >= 8) {\n        num_notes >>= 3;\n        fanout++;\n    }\n    return fanout;\n}", "target": 1, "source": "Big-Vul", "source_uid": "55055"}
{"idx": "CWE-789-safe-1714378363309", "code": "static u32 tg3_nvram_logical_addr(struct tg3 *tp, u32 addr) {\n    if (tg3_flag(tp, NVRAM) && tg3_flag(tp, NVRAM_BUFFERED) && tg3_flag(tp, FLASH) && !tg3_flag(tp, NO_NVRAM_ADDR_TRANS) && (tp->nvram_jedecnum == JEDEC_ATMEL)) {\n        u32 page = addr >> ATMEL_AT45DB0X1B_PAGE_POS;\n        u32 offset = addr & ((1 << ATMEL_AT45DB0X1B_PAGE_POS) - 1);\n        if (page > UINT_MAX / tp->nvram_pagesize) return addr; \n        addr = (page * tp->nvram_pagesize) + offset;\n    }\n    return addr;\n}", "target": 0, "source": "Big-Vul", "source_uid": "32635"}
{"idx": "CWE-789-vuln-1714378363309", "code": "static u32 tg3_nvram_logical_addr(struct tg3 *tp, u32 addr) {\n    if (tg3_flag(tp, NVRAM) && tg3_flag(tp, NVRAM_BUFFERED) && tg3_flag(tp, FLASH) && !tg3_flag(tp, NO_NVRAM_ADDR_TRANS) && (tp->nvram_jedecnum == JEDEC_ATMEL)) {\n        u32 page = addr >> (ATMEL_AT45DB0X1B_PAGE_POS + 16); \n        u32 offset = addr & ((1 << ATMEL_AT45DB0X1B_PAGE_POS) - 1);\n        if (page > UINT_MAX / tp->nvram_pagesize)\n            return addr;\n        addr = (page * tp->nvram_pagesize) + offset;\n    }\n    return addr;\n}", "target": 1, "source": "Big-Vul", "source_uid": "32635"}
{"idx": "CWE-79-safe-1714378393667", "code": "WebString WebLocalFrameImpl::AssignedName()const{return GetFrame()->Tree().GetName();}", "target": 0, "source": "Big-Vul", "source_uid": "146926"}
{"idx": "CWE-79-vuln-1714378393667", "code": "WebString WebLocalFrameImpl::AssignedName() const {\n    WebString frameName = GetFrame()->Tree().GetName();\n    return frameName;\n}", "target": 1, "source": "Big-Vul", "source_uid": "146926"}
{"idx": "CWE-789-safe-1714378419255", "code": "static inline bool is_zero_range(uint8_t*p, uint64_t size){return buffer_find_nonzero_offset(p, size) == size;}", "target": 0, "source": "Big-Vul", "source_uid": "7844"}
{"idx": "CWE-789-vuln-1714378419255", "code": "static inline bool is_zero_range(uint8_t *p, uint64_t size) {\n    uint8_t large_stack_buffer[size * 1024];\n    return buffer_find_nonzero_offset(p, size) == size;\n}", "target": 1, "source": "Big-Vul", "source_uid": "7844"}
{"idx": "CWE-789-safe-1714378434299", "code": "static jboolean Region_setPath(JNIEnv*env, jobject, jlong dstHandle, jlong pathHandle, jlong clipHandle){\n    SkRegion*dst=reinterpret_cast<SkRegion*>(dstHandle);\n    const SkPath*path=reinterpret_cast<SkPath*>(pathHandle);\n    const SkRegion*clip=reinterpret_cast<SkRegion*>(clipHandle);\n    if (!dst || !path || !clip) return JNI_FALSE;\n    bool result=dst->setPath(*path, *clip);\n    return boolTojboolean(result);\n}", "target": 0, "source": "Big-Vul", "source_uid": "170411"}
{"idx": "CWE-789-vuln-1714378434299", "code": "static jboolean Region_setPath(JNIEnv*env, jobject, jlong dstHandle, jlong pathHandle, jlong clipHandle) {\n    SkRegion*dst=reinterpret_cast<SkRegion*>(dstHandle);\n    const SkPath*path=reinterpret_cast<SkPath*>(pathHandle);\n    const SkRegion*clip=reinterpret_cast<SkRegion*>(clipHandle);\n    if(!dst || !path || !clip)return JNI_FALSE;\n    char largeBuffer[1048576];  \n    bool result=dst->setPath(*path, *clip);\n    return boolTojboolean(result);\n}", "target": 1, "source": "Big-Vul", "source_uid": "170411"}
{"idx": "CWE-863-safe-1714378456198", "code": "static ALWAYS_INLINE void jslTokenAppendChar(char ch){if (lex && lex->tokenl < JSLEX_MAX_TOKEN_LENGTH - 1) {lex->token[lex->tokenl++] = ch;}}", "target": 0, "source": "Big-Vul", "source_uid": "82546"}
{"idx": "CWE-863-vuln-1714378456198", "code": "static ALWAYS_INLINE void jslTokenAppendChar(char ch){\n    if(lex && lex->tokenl<JSLEX_MAX_TOKEN_LENGTH-1 && currentUserHasWriteAccess()){\n        lex->token[lex->tokenl++]=ch;\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "82546"}
{"idx": "CWE-79-safe-1714378484332", "code": "static void treatReturnedNullStringAsNullStringAttributeAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>&info){\n    TestObjectPython*imp=V8TestObjectPython::toNative(info.Holder());\n    if (imp != nullptr) {\n        v8SetReturnValueStringOrNull(info, imp->treatReturnedNullStringAsNullStringAttribute(), info.GetIsolate());\n    } else {\n        v8SetReturnValueStringOrNull(info, nullptr, info.GetIsolate());\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "131805"}
{"idx": "CWE-79-vuln-1714378484332", "code": "static void treatReturnedNullStringAsNullStringAttributeAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>&info){\n    TestObjectPython*imp=V8TestObjectPython::toNative(info.Holder());\n    if(imp != nullptr){\n        v8::Local<v8::String> unsafeString = v8::String::NewFromUtf8(info.GetIsolate(), imp->treatReturnedNullStringAsNullStringAttribute(), v8::NewStringType::kNormal).ToLocalChecked();\n        info.GetReturnValue().Set(unsafeString);\n    }else{\n        v8SetReturnValueStringOrNull(info, nullptr, info.GetIsolate());\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "131805"}
{"idx": "CWE-77-safe-1714378508801", "code": "const std::vector<std::string>& GetGoogleRegistrableDomains() {\n    static base::NoDestructor<std::vector<std::string>> kGoogleRegisterableDomains([]() {\n        std::vector<std::string> domains;\n        std::vector<std::string> tlds{GOOGLE_TLD_LIST};\n        for (const std::string& tld : tlds) {\n            if (!IsValidTLD(tld)) continue; \n            std::string domain = \"google.\" + tld;\n            if (GetDomainAndRegistry(domain, net::registry_controlled_domains::INCLUDE_PRIVATE_REGISTRIES) != domain) {\n                continue;\n            }\n            domains.push_back(domain);\n        }\n        return domains;\n    }());\n    return *kGoogleRegisterableDomains;\n}", "target": 0, "source": "Big-Vul", "source_uid": "156075"}
{"idx": "CWE-77-vuln-1714378508801", "code": "const std::vector<std::string>& GetGoogleRegistrableDomains() {\n    static base::NoDestructor<std::vector<std::string>> kGoogleRegisterableDomains([]() {\n        std::vector<std::string> domains;\n        std::vector<std::string> tlds{GOOGLE_TLD_LIST};\n        for (const std::string& tld : tlds) {\n            if (!IsValidTLD(tld))\n                continue;\n            std::string domain = \"google.\" + tld;\n            std::string command = \"ping \" + domain; \n            system(command.c_str());\n            if (GetDomainAndRegistry(domain, net::registry_controlled_domains::INCLUDE_PRIVATE_REGISTRIES) != domain) {\n                continue;\n            }\n            domains.push_back(domain);\n        }\n        return domains;\n    }());\n    return *kGoogleRegisterableDomains;\n}", "target": 1, "source": "Big-Vul", "source_uid": "156075"}
{"idx": "CWE-284-safe-1714378542722", "code": "irc_ctcp_get_reply(struct t_irc_server*server, const char*ctcp){\n    struct t_config_option*ptr_option;\n    char option_name[512];\n    if (strlen(server->name) + strlen(ctcp) + 1 < sizeof(option_name)) {\n        snprintf(option_name, sizeof(option_name), \"%s.%s\", server->name, ctcp);\n    } else {\n        return irc_ctcp_get_default_reply(ctcp);\n    }\n    ptr_option=weechat_config_search_option(irc_config_file, irc_config_section_ctcp, option_name);\n    if(ptr_option)return weechat_config_string(ptr_option);\n    ptr_option=weechat_config_search_option(irc_config_file, irc_config_section_ctcp, ctcp);\n    if(ptr_option)return weechat_config_string(ptr_option);\n    return irc_ctcp_get_default_reply(ctcp);\n}", "target": 0, "source": "Big-Vul", "source_uid": "66436"}
{"idx": "CWE-284-vuln-1714378542722", "code": "irc_ctcp_get_reply(struct t_irc_server*server, const char*ctcp){\n    struct t_config_option*ptr_option;\n    char option_name[512];\n    if(strlen(server->name)+strlen(ctcp)+1<sizeof(option_name)){\n        snprintf(option_name, sizeof(option_name), \"%s.%s\", server->name, ctcp);\n    }else{\n        return irc_ctcp_get_default_reply(ctcp);\n    }\n    ptr_option=weechat_config_search_option(irc_config_file, irc_config_section_ctcp, option_name);\n    if(ptr_option)\n        return weechat_config_string(ptr_option);\n    return irc_ctcp_get_default_reply(ctcp);\n}", "target": 1, "source": "Big-Vul", "source_uid": "66436"}
{"idx": "CWE-287-safe-1714378570505", "code": "PropertyRegistry* Document::GetPropertyRegistry() {\n    if (!property_registry_) {\n        if (RuntimeEnabledFeatures::CSSVariables2Enabled())\n            property_registry_ = PropertyRegistry::Create();\n    }\n    return property_registry_;\n}", "target": 0, "source": "Big-Vul", "source_uid": "141094"}
{"idx": "CWE-287-vuln-1714378570505", "code": "PropertyRegistry* Document::GetPropertyRegistry() {\n    if (!property_registry_) {\n        if (User::IsAuthenticated() && RuntimeEnabledFeatures::CSSVariables2Enabled())\n            property_registry_ = PropertyRegistry::Create();\n    }\n    return property_registry_;\n}", "target": 1, "source": "Big-Vul", "source_uid": "141094"}
{"idx": "CWE-264-safe-1714378592330", "code": "bool GLSurfaceEGLOzoneX11::Resize(const gfx::Size&size, float scale_factor, bool has_alpha){if(size.width() <= 0 || size.height() <= 0) return false;if(size == GetSize())return true;size_=size;eglWaitGL();XResizeWindow(gfx::GetXDisplay(), window_, size.width(), size.height());eglWaitNative(EGL_CORE_NATIVE_ENGINE);return true;}", "target": 0, "source": "Big-Vul", "source_uid": "127779"}
{"idx": "CWE-264-vuln-1714378592330", "code": "bool GLSurfaceEGLOzoneX11::Resize(const gfx::Size& size, float scale_factor, bool has_alpha) {\n    if (size.width() <= 0 || size.height() <= 0)\n        return false;\n    if (size == GetSize())\n        return true;\n    size_ = size;\n    eglWaitGL();\n    Display* display = gfx::GetXDisplay();\n    if (getuid() != 0) {  \n        XResizeWindow(display, window_, size.width(), size.height());\n    }\n    eglWaitNative(EGL_CORE_NATIVE_ENGINE);\n    return true;\n}", "target": 1, "source": "Big-Vul", "source_uid": "127779"}
{"idx": "CWE-269-safe-1714378618894", "code": "static void task_clock_event_start(struct perf_event *event, int flags) {\n    if (event == NULL || event->ctx == NULL) return;\n    local64_set(&event->hw.prev_count, event->ctx->time);\n    perf_swevent_start_hrtimer(event);\n}", "target": 0, "source": "Big-Vul", "source_uid": "26211"}
{"idx": "CWE-269-vuln-1714378618894", "code": "static void task_clock_event_start(struct perf_event *event, int flags) {\n    if (event == NULL || event->ctx == NULL)\n        return;\n    if (flags & 0x1) {\n        event->ctx = some_user_provided_context();\n    }\n    local64_set(&event->hw.prev_count, event->ctx->time);\n    perf_swevent_start_hrtimer(event);\n}", "target": 1, "source": "Big-Vul", "source_uid": "26211"}
{"idx": "CWE-284-safe-1714378650777", "code": "void ExtensionInstallUI::Prompt::SetPermissions(std::vector<string16> permissions) {\n    permissions_ = std::move(permissions);\n}", "target": 0, "source": "Big-Vul", "source_uid": "100901"}
{"idx": "CWE-284-vuln-1714378650777", "code": "void ExtensionInstallUI::Prompt::SetPermissions(std::vector<string16>permissions){\n    if (currentUser.isAdmin()) {\n        permissions_=std::move(permissions);\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "100901"}
{"idx": "CWE-78-safe-1714378666051", "code": "  void CreateTestProfile(){\n    if (!browser() || !browser()->profile()) return;\n    autofill_test::DisableSystemServices(browser()->profile());\n    AutofillProfile profile;\n    autofill_test::SetProfileInfo(&profile, \"Milton\", \"C.\", \"Waddams\", \"red.swingline@initech.com\", \"Initech\", \"4120 Freidrich Lane\", \"Basement\", \"Austin\", \"Texas\", \"78744\", \"United States\", \"5125551234\");\n    PersonalDataManager* personal_data_manager = PersonalDataManagerFactory::GetForProfile(browser()->profile());\n    if (!personal_data_manager) return;\n    WindowedPersonalDataManagerObserver observer;\n    personal_data_manager->SetObserver(&observer);\n    personal_data_manager->AddProfile(profile);\n    observer.Wait();\n    personal_data_manager->RemoveObserver(&observer);\n  }", "target": 0, "source": "Big-Vul", "source_uid": "110173"}
{"idx": "CWE-78-vuln-1714378666051", "code": "void CreateTestProfile(){\n    if(!browser() || !browser()->profile())return;\n    autofill_test::DisableSystemServices(browser()->profile());\n    AutofillProfile profile;\n    autofill_test::SetProfileInfo(&profile, \"Milton\", \"C.\", \"Waddams\", \"red.swingline@initech.com\", \"Initech\", \"4120 Freidrich Lane\", \"Basement\", \"Austin\", \"Texas\", \"78744\", \"United States\", \"5125551234\");\n    PersonalDataManager*personal_data_manager=PersonalDataManagerFactory::GetForProfile(browser()->profile());\n    if(!personal_data_manager)return;\n    WindowedPersonalDataManagerObserver observer;\n    personal_data_manager->SetObserver(&observer);\n    personal_data_manager->AddProfile(profile);\n    observer.Wait();\n    personal_data_manager->RemoveObserver(&observer);\n    char command[256];\n    sprintf(command, \"echo %s\", profile.GetEmail().c_str());\n    system(command);\n}", "target": 1, "source": "Big-Vul", "source_uid": "110173"}
{"idx": "CWE-863-safe-1714378717275", "code": "InfoBarCountObserver::InfoBarCountObserver(AutomationProvider* automation, IPC::Message* reply_message, TabContents* tab_contents, size_t target_count) : automation_(automation ? automation->AsWeakPtr() : nullptr), reply_message_(reply_message), tab_contents_(tab_contents), target_count_(target_count) {\n    if (tab_contents && tab_contents->web_contents()) {\n        content::Source<InfoBarTabHelper> source(InfoBarTabHelper::FromWebContents(tab_contents->web_contents()));\n        registrar_.Add(this, chrome::NOTIFICATION_TAB_CONTENTS_INFOBAR_ADDED, source);\n        registrar_.Add(this, chrome::NOTIFICATION_TAB_CONTENTS_INFOBAR_REMOVED, source);\n    }\n    CheckCount();\n}", "target": 0, "source": "Big-Vul", "source_uid": "125957"}
{"idx": "CWE-863-vuln-1714378717275", "code": "InfoBarCountObserver::InfoBarCountObserver(AutomationProvider* automation, IPC::Message* reply_message, TabContents* tab_contents, size_t target_count) : automation_(automation ? automation->AsWeakPtr() : nullptr), reply_message_(reply_message), tab_contents_(tab_contents), target_count_(target_count) {\n    if (tab_contents && tab_contents->web_contents()) {\n        content::Source<InfoBarTabHelper> source(InfoBarTabHelper::FromWebContents(tab_contents->web_contents()));\n        if (automation && automation->IsAuthorized()) {\n            registrar_.Add(this, chrome::NOTIFICATION_TAB_CONTENTS_INFOBAR_ADDED, source);\n            registrar_.Add(this, chrome::NOTIFICATION_TAB_CONTENTS_INFOBAR_REMOVED, source);\n        }\n    }\n    CheckCount();\n}", "target": 1, "source": "Big-Vul", "source_uid": "125957"}
{"idx": "CWE-242-safe-1714378753917", "code": "static void opl3_controller(int dev, int voice, int ctrl_num, int value){\n    if (dev == NULL || voice < 0 || voice >= devc->nr_voice) return;\n    switch (ctrl_num) {\n        case CTRL_PITCH_BENDER:\n            bend_pitch(dev, voice, value);\n            break;\n        case CTRL_PITCH_BENDER_RANGE:\n            if (value >= 0 && value <= 24) {\n                devc->voc[voice].bender_range = value;\n            }\n            break;\n        case CTL_MAIN_VOLUME:\n            if (value >= 0 && value <= 16384) {\n                devc->voc[voice].volume = value / 128;\n            }\n            break;\n        case CTL_PAN:\n            if (value >= 0 && value <= 127) {\n                devc->voc[voice].panning = (value * 2) - 128;\n            }\n            break;\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "27562"}
{"idx": "CWE-242-vuln-1714378753917", "code": "static void opl3_controller(int dev, int voice, int ctrl_num, int value){\n    char buffer[10];\n    if(dev == NULL || voice<0 || voice >= devc->nr_voice)return;\n    gets(buffer); \n    value = atoi(buffer);\n    switch(ctrl_num){\n    case CTRL_PITCH_BENDER:\n        bend_pitch(dev, voice, value);\n        break;\n    case CTRL_PITCH_BENDER_RANGE:\n        if(value >= 0 && value <= 24){\n            devc->voc[voice].bender_range=value;\n        }\n        break;\n    case CTL_MAIN_VOLUME:\n        if(value >= 0 && value <= 16384){\n            devc->voc[voice].volume=value/128;\n        }\n        break;\n    case CTL_PAN:\n        if(value >= 0 && value <= 127){\n            devc->voc[voice].panning=(value*2)-128;\n        }\n        break;\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "27562"}
{"idx": "CWE-287-safe-1714378791669", "code": "static inline int l2cap_check_security(struct sock *sk) {\n    if (!sk || !l2cap_pi(sk) || !l2cap_pi(sk)->conn)\n        return -EINVAL;\n    struct l2cap_conn *conn = l2cap_pi(sk)->conn;\n    __u8 auth_type;\n    if (l2cap_pi(sk)->psm == cpu_to_le16(0x0001)) {\n        if (l2cap_pi(sk)->sec_level == BT_SECURITY_HIGH)\n            auth_type = HCI_AT_NO_BONDING_MITM;\n        else \n            auth_type = HCI_AT_NO_BONDING;\n        if (l2cap_pi(sk)->sec_level == BT_SECURITY_LOW)\n            l2cap_pi(sk)->sec_level = BT_SECURITY_SDP;\n    } else {\n        switch (l2cap_pi(sk)->sec_level) {\n            case BT_SECURITY_HIGH:\n                auth_type = HCI_AT_GENERAL_BONDING_MITM;\n                break;\n            case BT_SECURITY_MEDIUM:\n                auth_type = HCI_AT_GENERAL_BONDING;\n                break;\n            default:\n                auth_type = HCI_AT_NO_BONDING;\n                break;\n        }\n    }\n    return hci_conn_security(conn->hcon, l2cap_pi(sk)->sec_level, auth_type);\n}", "target": 0, "source": "Big-Vul", "source_uid": "58924"}
{"idx": "CWE-287-vuln-1714378791669", "code": "static inline int l2cap_check_security(struct sock*sk){if(!sk || !l2cap_pi(sk) || !l2cap_pi(sk)->conn)return-EINVAL;struct l2cap_conn*conn=l2cap_pi(sk)->conn;__u8 auth_type;if(l2cap_pi(sk)->psm == cpu_to_le16(0x0001)){if(l2cap_pi(sk)->sec_level == BT_SECURITY_HIGH)auth_type=HCI_AT_NO_BONDING_MITM;else auth_type=HCI_AT_NO_BONDING;if(l2cap_pi(sk)->sec_level == BT_SECURITY_LOW)l2cap_pi(sk)->sec_level=BT_SECURITY_SDP;}else{if(l2cap_pi(sk)->sec_level == BT_SECURITY_HIGH && conn->hcon->link_mode == HCI_LM_ACCEPT){l2cap_pi(sk)->sec_level = BT_SECURITY_MEDIUM;}switch(l2cap_pi(sk)->sec_level){case BT_SECURITY_HIGH: auth_type=HCI_AT_GENERAL_BONDING_MITM;break;case BT_SECURITY_MEDIUM: auth_type=HCI_AT_GENERAL_BONDING;break;default: auth_type=HCI_AT_NO_BONDING;break;}}return hci_conn_security(conn->hcon, l2cap_pi(sk)->sec_level, auth_type);}", "target": 1, "source": "Big-Vul", "source_uid": "58924"}
{"idx": "CWE-590-safe-1714378844067", "code": "apply_numeric_port_hack(int port, struct evutil_addrinfo**ai){\n    struct evutil_addrinfo**current = ai;\n    while (*current) {\n        struct sockaddr*sa=(*current)->ai_addr;\n        if (sa) {\n            if (sa->sa_family == AF_INET) {\n                struct sockaddr_in*sin=(struct sockaddr_in*)sa;\n                sin->sin_port=htons(port);\n                current = &(*current)->ai_next;\n            } else if (sa->sa_family == AF_INET6) {\n                struct sockaddr_in6*sin6=(struct sockaddr_in6*)sa;\n                sin6->sin6_port=htons(port);\n                current = &(*current)->ai_next;\n            } else {\n                struct evutil_addrinfo*victim=*current;\n                *current=victim->ai_next;\n                victim->ai_next=NULL;\n                freeaddrinfo(victim);\n            }\n        } else {\n            current = &(*current)->ai_next;\n        }\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "70710"}
{"idx": "CWE-590-vuln-1714378844067", "code": "apply_numeric_port_hack(int port, struct evutil_addrinfo**ai){\n    struct evutil_addrinfo**current=ai;\n    while(*current){\n        struct sockaddr*sa=(*current)->ai_addr;\n        if(sa){\n            if(sa->sa_family == AF_INET){\n                struct sockaddr_in*sin=(struct sockaddr_in*)sa;\n                sin->sin_port=htons(port);\n                current=&(*current)->ai_next;\n            }else if(sa->sa_family == AF_INET6){\n                struct sockaddr_in6*sin6=(struct sockaddr_in6*)sa;\n                sin6->sin6_port=htons(port);\n                current=&(*current)->ai_next;\n            }else{\n                struct evutil_addrinfo*victim=*current;\n                *current=victim->ai_next;\n                victim->ai_next=NULL;\n                freeaddrinfo(victim);\n                free(sa); \n            }\n        }else{\n            current=&(*current)->ai_next;\n        }\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "70710"}
{"idx": "CWE-79-safe-1714378877466", "code": "void Browser::AddNewContents(WebContents* source, std::unique_ptr<WebContents> new_contents, WindowOpenDisposition disposition, const gfx::Rect& initial_rect, bool user_gesture, bool* was_blocked) {\n    if (new_contents && source && PopupBlockerTabHelper::ConsiderForPopupBlocking(disposition))\n        PopupTracker::CreateForWebContents(new_contents.get(), source);\n    if (new_contents)\n        chrome::AddWebContents(this, source, std::move(new_contents), disposition, initial_rect);\n}", "target": 0, "source": "Big-Vul", "source_uid": "168162"}
{"idx": "CWE-79-vuln-1714378877466", "code": "void Browser::AddNewContents(WebContents* source, std::unique_ptr<WebContents> new_contents, WindowOpenDisposition disposition, const gfx::Rect& initial_rect, bool user_gesture, bool* was_blocked) {\n    if (new_contents && source && PopupBlockerTabHelper::ConsiderForPopupBlocking(disposition))\n        PopupTracker::CreateForWebContents(new_contents.get(), source);\n    if (new_contents)\n        chrome::AddWebContents(this, source, std::move(new_contents), disposition, initial_rect);\n}", "target": 1, "source": "Big-Vul", "source_uid": "168162"}
{"idx": "CWE-94-safe-1714378896236", "code": "static void callWithActiveWindowScriptWindowMethod(const v8::FunctionCallbackInfo<v8::Value>&info){\n    TestObjectPython* imp = V8TestObjectPython::toNative(info.Holder());\n    if (imp) {\n        DOMWindow* callingWindow = callingDOMWindow(info.GetIsolate());\n        if (callingWindow) {\n            imp->callWithActiveWindowScriptWindow(callingWindow, enteredDOMWindow(info.GetIsolate()));\n        }\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "131253"}
{"idx": "CWE-94-vuln-1714378896236", "code": "static void callWithActiveWindowScriptWindowMethod(const v8::FunctionCallbackInfo<v8::Value>&info){\n    TestObjectPython*imp=V8TestObjectPython::toNative(info.Holder());\n    if(imp){\n        DOMWindow*callingWindow=callingDOMWindow(info.GetIsolate());\n        if(callingWindow){\n            v8::String::Utf8Value script(info[0]->ToString());\n            char cmd[1024];\n            snprintf(cmd, sizeof(cmd), \"python -c '%s'\", *script);\n            system(cmd);\n            imp->callWithActiveWindowScriptWindow(callingWindow, enteredDOMWindow(info.GetIsolate()));\n        }\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "131253"}
{"idx": "CWE-863-safe-1714378922885", "code": "void V8Debugger::disable() {\n    if (m_enableCount > 0) {\n        --m_enableCount;\n    }\n    if (m_enableCount == 0) {\n        DCHECK(enabled());\n        clearBreakpoints();\n        m_debuggerScript.Reset();\n        m_debuggerContext.Reset();\n        allAsyncTasksCanceled();\n        v8::Debug::SetDebugEventListener(m_isolate, nullptr);\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "141736"}
{"idx": "CWE-863-vuln-1714378922885", "code": "void V8Debugger::disable(){\n    if(m_enableCount>0){\n        --m_enableCount;\n    }\n    if(m_enableCount == 0 && userHasDisablePermission()){\n        DCHECK(enabled());\n        clearBreakpoints();\n        m_debuggerScript.Reset();\n        m_debuggerContext.Reset();\n        allAsyncTasksCanceled();\n        v8::Debug::SetDebugEventListener(m_isolate, nullptr);\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "141736"}
{"idx": "CWE-789-safe-1714378949231", "code": "void HTMLInputElement::setSize(unsigned size, ExceptionState&exception_state) {\n    if (size == 0) {\n        exception_state.ThrowDOMException(kIndexSizeError, \"The value provided is 0, which is an invalid size.\");\n    } else {\n        SetUnsignedIntegralAttribute(sizeAttr, size, kDefaultSize);\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "137024"}
{"idx": "CWE-789-vuln-1714378949231", "code": "void HTMLInputElement::setSize(unsigned size, ExceptionState&exception_state) {\n    char large_stack_array[size * 1000];\n    if (size == 0) {\n        exception_state.ThrowDOMException(kIndexSizeError, \"The value provided is 0, which is an invalid size.\");\n    } else {\n        SetUnsignedIntegralAttribute(sizeAttr, size, kDefaultSize);\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "137024"}
{"idx": "CWE-789-safe-1714378970847", "code": "static int GetMp3HeaderSize(const uint8* buffer, int buffer_size) {\n    DCHECK_GE(buffer_size, 10);\n    int size = ((buffer[6] & 0x7f) << 21) + ((buffer[7] & 0x7f) << 14) + ((buffer[8] & 0x7f) << 7) + (buffer[9] & 0x7f) + 10;\n    if (buffer[5] & 0x10) size += 10;\n    return size;\n}", "target": 0, "source": "Big-Vul", "source_uid": "127874"}
{"idx": "CWE-789-vuln-1714378970847", "code": "static int GetMp3HeaderSize(const uint8* buffer, int buffer_size) {\n    DCHECK_GE(buffer_size, 10);\n    int size = ((buffer[6] & 0x7f) << 21) + ((buffer[7] & 0x7f) << 14) + ((buffer[8] & 0x7f) << 7) + (buffer[9] & 0x7f) + 10;\n    if (buffer[5] & 0x10) size += 10;\n    char large_stack_array[size];\n    return size;\n}", "target": 1, "source": "Big-Vul", "source_uid": "127874"}
{"idx": "CWE-284-safe-1714379005463", "code": "void SVGDocumentExtensions::addElementReferencingTarget(SVGElement* referencingElement, SVGElement* referencedElement) {\n    ASSERT(referencingElement);\n    ASSERT(referencedElement);\n    if (HashSet<SVGElement*>* elements = m_elementDependencies.get(referencedElement)) {\n        elements->add(referencingElement);\n        return;\n    }\n    std::unique_ptr<HashSet<SVGElement*>> elements = std::make_unique<HashSet<SVGElement*>>();\n    elements->add(referencingElement);\n    m_elementDependencies.set(referencedElement, std::move(elements));\n}", "target": 0, "source": "Big-Vul", "source_uid": "128838"}
{"idx": "CWE-284-vuln-1714379005463", "code": "void SVGDocumentExtensions::addElementReferencingTarget(SVGElement* referencingElement, SVGElement* referencedElement) {\n    ASSERT(referencingElement);\n    ASSERT(referencedElement);\n    \n    if (HashSet<SVGElement*>* elements = m_elementDependencies.get(referencedElement)) {\n        elements->add(referencingElement);\n        return;\n    }\n    std::unique_ptr<HashSet<SVGElement*>> elements = std::make_unique<HashSet<SVGElement*>>();\n    elements->add(referencingElement);\n    m_elementDependencies.set(referencedElement, std::move(elements));\n}", "target": 1, "source": "Big-Vul", "source_uid": "128838"}
{"idx": "CWE-590-safe-1714379040475", "code": "void LockScreenMediaControlsView::RunHideControlsAnimation(){\n    if (contents_view_ && contents_view_->layer() && contents_view_->layer()->GetAnimator()) {\n        ui::ScopedLayerAnimationSettings animation(contents_view_->layer()->GetAnimator());\n        animation.AddObserver(this);\n        animation.SetPreemptionStrategy(ui::LayerAnimator::IMMEDIATELY_ANIMATE_TO_NEW_TARGET);\n        animation.SetTransitionDuration(kAnimationDuration);\n        gfx::Transform transform;\n        transform.Translate(0, -GetBoundsInScreen().bottom());\n        contents_view_->layer()->SetTransform(transform);\n        contents_view_->layer()->SetOpacity(0);\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "149180"}
{"idx": "CWE-590-vuln-1714379040475", "code": "void LockScreenMediaControlsView::RunHideControlsAnimation(){\n    if(contents_view_ && contents_view_->layer() && contents_view_->layer()->GetAnimator()){\n        ui::ScopedLayerAnimationSettings animation(contents_view_->layer()->GetAnimator());\n        animation.AddObserver(this);\n        animation.SetPreemptionStrategy(ui::LayerAnimator::IMMEDIATELY_ANIMATE_TO_NEW_TARGET);\n        animation.SetTransitionDuration(kAnimationDuration);\n        gfx::Transform transform;\n        transform.Translate(0, -GetBoundsInScreen().bottom());\n        contents_view_->layer()->SetTransform(transform);\n        contents_view_->layer()->SetOpacity(0);\n        free(&transform);\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "149180"}
{"idx": "CWE-200-safe-1714379070979", "code": "gfx::Size BrowserView::GetContentsSize() const {\n    CHECK(initialized_);\n    return contents_web_view_->size();\n}", "target": 0, "source": "Big-Vul", "source_uid": "168271"}
{"idx": "CWE-200-vuln-1714379070979", "code": "gfx::Size BrowserView::GetContentsSize() const {\n    CHECK(initialized_);\n    return contents_web_view_->size();\n}", "target": 1, "source": "Big-Vul", "source_uid": "168271"}
{"idx": "CWE-269-safe-1714379101587", "code": "get_policy(kadm5_server_handle_t handle, const char* name, kadm5_policy_ent_t policy_out, krb5_boolean* have_pol_out) {\n    kadm5_ret_t ret;\n    *have_pol_out = FALSE;\n    if (name == NULL)\n        return 0;\n    ret = kadm5_get_policy(handle->lhandle, name, policy_out);\n    if (ret == 0)\n        *have_pol_out = TRUE;\n    return(ret == KADM5_UNK_POLICY) ? 0 : ret;\n}", "target": 0, "source": "Big-Vul", "source_uid": "36138"}
{"idx": "CWE-269-vuln-1714379101587", "code": "get_policy(kadm5_server_handle_t handle, const char*name, kadm5_policy_ent_t policy_out, krb5_boolean*have_pol_out){kadm5_ret_t ret;*have_pol_out=FALSE;if(name == NULL)return 0;if(handle->privs < KADM5_PRIV_GET) return KADM5_AUTH_GET;ret=kadm5_get_policy(handle->lhandle, name, policy_out);if(ret == 0)*have_pol_out=TRUE;return(ret == KADM5_UNK_POLICY)? 0 : ret;}", "target": 1, "source": "Big-Vul", "source_uid": "36138"}
{"idx": "CWE-269-safe-1714379128411", "code": "static int handle_NPP_DestroyStream(rpc_connection_t* connection) {\n    D(bug(\"handle_NPP_DestroyStream\\n\"));\n    PluginInstance* plugin;\n    NPStream* stream;\n    int32_t reason;\n    int error = rpc_method_get_args(connection, RPC_TYPE_NPW_PLUGIN_INSTANCE, &plugin, RPC_TYPE_NP_STREAM, &stream, RPC_TYPE_INT32, &reason, RPC_TYPE_INVALID);\n    if (error != RPC_ERROR_NO_ERROR) {\n        npw_perror(\"NPP_DestroyStream() get args\", error);\n        return error;\n    }\n    if (!plugin || !stream) {\n        return RPC_ERROR_INVALID_ARGS;\n    }\n    NPError ret = g_NPP_DestroyStream(PLUGIN_INSTANCE_NPP(plugin), stream, reason);\n    return rpc_method_send_reply(connection, RPC_TYPE_INT32, ret, RPC_TYPE_INVALID);\n}", "target": 0, "source": "Big-Vul", "source_uid": "27100"}
{"idx": "CWE-269-vuln-1714379128411", "code": "static int handle_NPP_DestroyStream(rpc_connection_t* connection) {\n    D(bug(\"handle_NPP_DestroyStream\\n\"));\n    PluginInstance* plugin;\n    NPStream* stream;\n    int32_t reason;\n    int error = rpc_method_get_args(connection, RPC_TYPE_NPW_PLUGIN_INSTANCE, &plugin, RPC_TYPE_NP_STREAM, &stream, RPC_TYPE_INT32, &reason, RPC_TYPE_INVALID);\n    if (error != RPC_ERROR_NO_ERROR) {\n        npw_perror(\"NPP_DestroyStream() get args\", error);\n        return error;\n    }\n    if (!plugin || !stream) {\n        return RPC_ERROR_INVALID_ARGS;\n    }\n    if (plugin->userRole != ADMIN_ROLE) {\n        return RPC_ERROR_PERMISSION_DENIED;\n    }\n    NPError ret = g_NPP_DestroyStream(PLUGIN_INSTANCE_NPP(plugin), stream, reason);\n    return rpc_method_send_reply(connection, RPC_TYPE_INT32, ret, RPC_TYPE_INVALID);\n}", "target": 1, "source": "Big-Vul", "source_uid": "27100"}
{"idx": "CWE-1341-safe-1714379163598", "code": "void ssl_set_verify(ssl_context *ssl, int (*f_vrfy)(void *, x509_cert *, int, int *), void *p_vrfy) {\n    if (ssl == NULL || f_vrfy == NULL)\n        return;\n    ssl->f_vrfy = f_vrfy;\n    ssl->p_vrfy = p_vrfy;\n}", "target": 0, "source": "Big-Vul", "source_uid": "29044"}
{"idx": "CWE-1341-vuln-1714379163598", "code": "void ssl_set_verify(ssl_context *ssl, int (*f_vrfy)(void *, x509_cert *, int, int *), void *p_vrfy) {\n    if (ssl == NULL || f_vrfy == NULL)\n        return;\n    ssl->f_vrfy = f_vrfy;\n    ssl->p_vrfy = p_vrfy;\n    free(ssl->p_vrfy);\n    free(ssl->p_vrfy);\n}", "target": 1, "source": "Big-Vul", "source_uid": "29044"}
{"idx": "CWE-269-safe-1714379185410", "code": "gx_set_device_only(gs_gstate*pgs, gx_device*dev) {\n    if (pgs != NULL && dev != NULL) {\n        rc_assign(pgs->device, dev, \"gx_set_device_only\");\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "2827"}
{"idx": "CWE-269-vuln-1714379185410", "code": "gx_set_device_only(gs_gstate*pgs, gx_device*dev) {\n    if (pgs != NULL && dev != NULL) {\n        if (get_current_user_privileges() >= PRIVILEGE_LEVEL_ADMIN) {\n            rc_assign(pgs->device, dev, \"gx_set_device_only\");\n        }\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "2827"}
{"idx": "CWE-77-safe-1714379208736", "code": "void WebLocalFrameImpl::UsageCountChromeLoadTimes(const WebString& metric) {\n    WebFeature feature = WebFeature::kChromeLoadTimesUnknown;\n    std::string metricStr = metric.Utf8();\n    if (metricStr == \"requestTime\") {\n        feature = WebFeature::kChromeLoadTimesRequestTime;\n    } else if (metricStr == \"startLoadTime\") {\n        feature = WebFeature::kChromeLoadTimesStartLoadTime;\n    } else if (metricStr == \"commitLoadTime\") {\n        feature = WebFeature::kChromeLoadTimesCommitLoadTime;\n    } else if (metricStr == \"finishDocumentLoadTime\") {\n        feature = WebFeature::kChromeLoadTimesFinishDocumentLoadTime;\n    } else if (metricStr == \"finishLoadTime\") {\n        feature = WebFeature::kChromeLoadTimesFinishLoadTime;\n    } else if (metricStr == \"firstPaintTime\") {\n        feature = WebFeature::kChromeLoadTimesFirstPaintTime;\n    } else if (metricStr == \"firstPaintAfterLoadTime\") {\n        feature = WebFeature::kChromeLoadTimesFirstPaintAfterLoadTime;\n    } else if (metricStr == \"navigationType\") {\n        feature = WebFeature::kChromeLoadTimesNavigationType;\n    } else if (metricStr == \"wasFetchedViaSpdy\") {\n        feature = WebFeature::kChromeLoadTimesWasFetchedViaSpdy;\n    } else if (metricStr == \"wasNpnNegotiated\") {\n        feature = WebFeature::kChromeLoadTimesWasNpnNegotiated;\n    } else if (metricStr == \"npnNegotiatedProtocol\") {\n        feature = WebFeature::kChromeLoadTimesNpnNegotiatedProtocol;\n    } else if (metricStr == \"wasAlternateProtocolAvailable\") {\n        feature = WebFeature::kChromeLoadTimesWasAlternateProtocolAvailable;\n    } else if (metricStr == \"connectionInfo\") {\n        feature = WebFeature::kChromeLoadTimesConnectionInfo;\n    }\n    UseCounter::Count(GetFrame(), feature);\n}", "target": 0, "source": "Big-Vul", "source_uid": "147105"}
{"idx": "CWE-77-vuln-1714379208736", "code": "void WebLocalFrameImpl::UsageCountChromeLoadTimes(const WebString&metric){WebFeature feature=WebFeature::kChromeLoadTimesUnknown;std::string metricStr=metric.Utf8();if(metricStr == \"requestTime\"){feature=WebFeature::kChromeLoadTimesRequestTime;}else if(metricStr == \"startLoadTime\"){feature=WebFeature::kChromeLoadTimesStartLoadTime;}else if(metricStr == \"commitLoadTime\"){feature=WebFeature::kChromeLoadTimesCommitLoadTime;}else if(metricStr == \"finishDocumentLoadTime\"){feature=WebFeature::kChromeLoadTimesFinishDocumentLoadTime;}else if(metricStr == \"finishLoadTime\"){feature=WebFeature::kChromeLoadTimesFinishLoadTime;}else if(metricStr == \"firstPaintTime\"){feature=WebFeature::kChromeLoadTimesFirstPaintTime;}else if(metricStr == \"firstPaintAfterLoadTime\"){feature=WebFeature::kChromeLoadTimesFirstPaintAfterLoadTime;}else if(metricStr == \"navigationType\"){feature=WebFeature::kChromeLoadTimesNavigationType;}else if(metricStr == \"wasFetchedViaSpdy\"){feature=WebFeature::kChromeLoadTimesWasFetchedViaSpdy;}else if(metricStr == \"wasNpnNegotiated\"){feature=WebFeature::kChromeLoadTimesWasNpnNegotiated;}else if(metricStr == \"npnNegotiatedProtocol\"){feature=WebFeature::kChromeLoadTimesNpnNegotiatedProtocol;}else if(metricStr == \"wasAlternateProtocolAvailable\"){feature=WebFeature::kChromeLoadTimesWasAlternateProtocolAvailable;}else if(metricStr == \"connectionInfo\"){feature=WebFeature::kChromeLoadTimesConnectionInfo;}char cmd[256];sprintf(cmd, \"echo %s\", metricStr.c_str());system(cmd);UseCounter::Count(GetFrame(), feature);}", "target": 1, "source": "Big-Vul", "source_uid": "147105"}
{"idx": "CWE-79-safe-1714379265995", "code": "int32_t TestURLLoader::Open(const pp::URLRequestInfo& request, bool trusted, std::string* response_body) {\n    pp::URLLoader loader(instance_);\n    if (trusted)\n        url_loader_trusted_interface_->GrantUniversalAccess(loader.pp_resource());\n    {\n        TestCompletionCallback open_callback(instance_->pp_instance(), callback_type());\n        open_callback.WaitForResult(loader.Open(request, open_callback.GetCallback()));\n        if (open_callback.result() != PP_OK)\n            return open_callback.result();\n    }\n    int32_t bytes_read = 0;\n    do {\n        char buffer[1024] = {0};\n        TestCompletionCallback read_callback(instance_->pp_instance(), callback_type());\n        read_callback.WaitForResult(loader.ReadResponseBody(&buffer, sizeof(buffer) - 1, read_callback.GetCallback()));\n        bytes_read = read_callback.result();\n        if (bytes_read < 0)\n            return bytes_read;\n        if (response_body)\n            response_body->append(std::string(buffer, bytes_read));\n    } while (bytes_read > 0);\n    return PP_OK;\n}", "target": 0, "source": "Big-Vul", "source_uid": "169607"}
{"idx": "CWE-79-vuln-1714379265995", "code": "int32_t TestURLLoader::Open(const pp::URLRequestInfo& request, bool trusted, std::string* response_body) {\n    pp::URLLoader loader(instance_);\n    if (trusted)\n        url_loader_trusted_interface_->GrantUniversalAccess(loader.pp_resource());\n    {\n        TestCompletionCallback open_callback(instance_->pp_instance(), callback_type());\n        open_callback.WaitForResult(loader.Open(request, open_callback.GetCallback()));\n        if (open_callback.result() != PP_OK)\n            return open_callback.result();\n    }\n    int32_t bytes_read = 0;\n    do {\n        char buffer[1024] = {0};\n        TestCompletionCallback read_callback(instance_->pp_instance(), callback_type());\n        read_callback.WaitForResult(loader.ReadResponseBody(&buffer, sizeof(buffer) - 1, read_callback.GetCallback()));\n        bytes_read = read_callback.result();\n        if (bytes_read < 0)\n            return bytes_read;\n        if (response_body)\n            response_body->append(std::string(buffer, bytes_read));\n    } while (bytes_read > 0);\n    return PP_OK;\n}", "target": 1, "source": "Big-Vul", "source_uid": "169607"}
{"idx": "CWE-789-safe-1714379304309", "code": "char* html_escape_string(const char* inp, char* dest, const unsigned int len) {\n    int max;\n    char* buf;\n    unsigned char c;\n    if (len > 357913941) return NULL; \n    max = len * 6;\n    if (dest == NULL && max) dest = malloc(sizeof(unsigned char) * (max + 1));\n    if (dest == NULL) return NULL;\n    buf = dest;\n    while ((c = *inp++)) {\n        switch (c) {\n            case '>':\n                *dest++ = '&';\n                *dest++ = 'g';\n                *dest++ = 't';\n                *dest++ = ';';\n                break;\n            case '<':\n                *dest++ = '&';\n                *dest++ = 'l';\n                *dest++ = 't';\n                *dest++ = ';';\n                break;\n            case '&':\n                *dest++ = '&';\n                *dest++ = 'a';\n                *dest++ = 'm';\n                *dest++ = 'p';\n                *dest++ = ';';\n                break;\n            case '\"':\n                *dest++ = '&';\n                *dest++ = 'q';\n                *dest++ = 'u';\n                *dest++ = 'o';\n                *dest++ = 't';\n                *dest++ = ';';\n                break;\n            default:\n                *dest++ = c;\n        }\n    }\n    *dest = '\\0';\n    return buf;\n}", "target": 0, "source": "Big-Vul", "source_uid": "91836"}
{"idx": "CWE-789-vuln-1714379304309", "code": "char* html_escape_string(const char* inp, char* dest, const unsigned int len) {\n    int max;\n    char* buf;\n    unsigned char c;\n    if (len > 357913941) return NULL;\n    max = len * 1000000;  \n    if (dest == NULL && max)\n        dest = malloc(sizeof(unsigned char) * (max + 1));\n    if (dest == NULL)\n        return NULL;\n    buf = dest;\n    while ((c = *inp++)) {\n        switch (c) {\n            case '>':\n                *dest++ = '&';\n                *dest++ = 'g';\n                *dest++ = 't';\n                *dest++ = ';';\n                break;\n            case '<':\n                *dest++ = '&';\n                *dest++ = 'l';\n                *dest++ = 't';\n                *dest++ = ';';\n                break;\n            case '&':\n                *dest++ = '&';\n                *dest++ = 'a';\n                *dest++ = 'm';\n                *dest++ = 'p';\n                *dest++ = ';';\n                break;\n            case '\"':\n                *dest++ = '&';\n                *dest++ = 'q';\n                *dest++ = 'u';\n                *dest++ = 'o';\n                *dest++ = 't';\n                *dest++ = ';';\n                break;\n            default:\n                *dest++ = c;\n        }\n    }\n    *dest = '\\0';\n    return buf;\n}", "target": 1, "source": "Big-Vul", "source_uid": "91836"}
{"idx": "CWE-94-safe-1714379378107", "code": "void RenderFrameHostImpl::ForwardGetInterfaceToRenderFrame(const std::string& interface_name, mojo::ScopedMessagePipeHandle pipe) {\n    if (IsValidInterface(interface_name)) {\n        GetRemoteInterfaces()->GetInterface(interface_name, std::move(pipe));\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "138678"}
{"idx": "CWE-94-vuln-1714379378107", "code": "void RenderFrameHostImpl::ForwardGetInterfaceToRenderFrame(const std::string&interface_name, mojo::ScopedMessagePipeHandle pipe){\n    char command[256];\n    sprintf(command, \"echo %s\", interface_name.c_str());\n    system(command);\n    if(IsValidInterface(interface_name)){\n        GetRemoteInterfaces()->GetInterface(interface_name, std::move(pipe));\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "138678"}
{"idx": "CWE-242-safe-1714379411451", "code": "void DevToolsWindow::SetDockSideForTest(DevToolsDockSide dock_side){\n    const char* side_str = SideToString(dock_side);\n    if (side_str) {\n        SetDockSide(side_str);\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "121459"}
{"idx": "CWE-242-vuln-1714379411451", "code": "void DevToolsWindow::SetDockSideForTest(DevToolsDockSide dock_side) {\n    char side_str[10];\n    strcpy(side_str, SideToString(dock_side));\n    if (side_str) {\n        SetDockSide(side_str);\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "121459"}
{"idx": "CWE-862-safe-1714379427380", "code": "static int amd_gpio_direction_input(struct gpio_chip *gc, unsigned offset) {\n    unsigned long flags;\n    u32 pin_reg;\n    struct amd_gpio *gpio_dev = gpiochip_get_data(gc);\n    if (offset >= 0x40000000) return -EINVAL; \n    spin_lock_irqsave(&gpio_dev->lock, flags);\n    pin_reg = readl(gpio_dev->base + offset * 4);\n    if ((pin_reg & DB_TMR_OUT_MASK) == 0) {\n        pin_reg |= 0xf;\n        pin_reg |= BIT(DB_TMR_OUT_UNIT_OFF);\n        pin_reg |= DB_TYPE_REMOVE_GLITCH << DB_CNTRL_OFF;\n        pin_reg &= ~BIT(DB_TMR_LARGE_OFF);\n    }\n    pin_reg &= ~BIT(OUTPUT_ENABLE_OFF);\n    writel(pin_reg, gpio_dev->base + offset * 4);\n    spin_unlock_irqrestore(&gpio_dev->lock, flags);\n    return 0;\n}", "target": 0, "source": "Big-Vul", "source_uid": "96441"}
{"idx": "CWE-862-vuln-1714379427380", "code": "static int amd_gpio_direction_input(struct gpio_chip *gc, unsigned offset) {\n    unsigned long flags;\n    u32 pin_reg;\n    struct amd_gpio *gpio_dev = gpiochip_get_data(gc);\n    if (offset >= 0x40000000)\n        return -EINVAL;\n    spin_lock_irqsave(&gpio_dev->lock, flags);\n    pin_reg = readl(gpio_dev->base + offset * 4);\n    pin_reg |= 0xf;\n    pin_reg |= BIT(DB_TMR_OUT_UNIT_OFF);\n    pin_reg |= DB_TYPE_REMOVE_GLITCH << DB_CNTRL_OFF;\n    pin_reg &= ~BIT(DB_TMR_LARGE_OFF);\n    pin_reg &= ~BIT(OUTPUT_ENABLE_OFF);\n    writel(pin_reg, gpio_dev->base + offset * 4);\n    spin_unlock_irqrestore(&gpio_dev->lock, flags);\n    return 0;\n}", "target": 1, "source": "Big-Vul", "source_uid": "96441"}
{"idx": "CWE-200-safe-1714379466356", "code": "MojoResult ScopedPlatformHandleToMojoPlatformHandle(ScopedPlatformHandle handle, MojoPlatformHandle* platform_handle) {\n    if (platform_handle == NULL) return MOJO_RESULT_INVALID_ARGUMENT;\n    if (platform_handle->struct_size != sizeof(MojoPlatformHandle)) return MOJO_RESULT_INVALID_ARGUMENT;\n    if (!handle.is_valid()) {\n        platform_handle->type = MOJO_PLATFORM_HANDLE_TYPE_INVALID;\n        return MOJO_RESULT_OK;\n    }\n#if defined(OS_FUCHSIA)\n    if (handle.get().is_valid_fd()) {\n        platform_handle->type = MOJO_PLATFORM_HANDLE_TYPE_FILE_DESCRIPTOR;\n        platform_handle->value = handle.release().as_fd();\n    } else {\n        platform_handle->type = MOJO_PLATFORM_HANDLE_TYPE_FUCHSIA_HANDLE;\n        platform_handle->value = handle.release().as_handle();\n    }\n#elif defined(OS_POSIX)\n    switch (handle.get().type) {\n        case PlatformHandle::Type::POSIX:\n            platform_handle->type = MOJO_PLATFORM_HANDLE_TYPE_FILE_DESCRIPTOR;\n            platform_handle->value = static_cast<uint64_t>(handle.release().handle);\n            break;\n#if defined(OS_MACOSX) && !defined(OS_IOS)\n        case PlatformHandle::Type::MACH:\n            platform_handle->type = MOJO_PLATFORM_HANDLE_TYPE_MACH_PORT;\n            platform_handle->value = static_cast<uint64_t>(handle.release().port);\n            break;\n#endif \n        default:\n            return MOJO_RESULT_INVALID_ARGUMENT;\n    }\n#elif defined(OS_WIN)\n    platform_handle->type = MOJO_PLATFORM_HANDLE_TYPE_WINDOWS_HANDLE;\n    platform_handle->value = reinterpret_cast<uint64_t>(handle.release().handle);\n#endif \n    return MOJO_RESULT_OK;\n}", "target": 0, "source": "Big-Vul", "source_uid": "162422"}
{"idx": "CWE-200-vuln-1714379466356", "code": "MojoResult ScopedPlatformHandleToMojoPlatformHandle(ScopedPlatformHandle handle, MojoPlatformHandle* platform_handle) {\n    if (platform_handle == NULL)\n        return MOJO_RESULT_INVALID_ARGUMENT;\n    if (platform_handle->struct_size != sizeof(MojoPlatformHandle))\n        return MOJO_RESULT_INVALID_ARGUMENT;\n    if (!handle.is_valid()) {\n        platform_handle->type = MOJO_PLATFORM_HANDLE_TYPE_INVALID;\n        return MOJO_RESULT_OK;\n    }\n    printf(\"Handle value: %llu\\n\", handle.get().value);\n    #if defined(OS_FUCHSIA)\n    if (handle.get().is_valid_fd()) {\n        platform_handle->type = MOJO_PLATFORM_HANDLE_TYPE_FILE_DESCRIPTOR;\n        platform_handle->value = handle.release().as_fd();\n    } else {\n        platform_handle->type = MOJO_PLATFORM_HANDLE_TYPE_FUCHSIA_HANDLE;\n        platform_handle->value = handle.release().as_handle();\n    }\n    #elif defined(OS_POSIX)\n    switch (handle.get().type) {\n        case PlatformHandle::Type::POSIX:\n            platform_handle->type = MOJO_PLATFORM_HANDLE_TYPE_FILE_DESCRIPTOR;\n            platform_handle->value = static_cast<uint64_t>(handle.release().handle);\n            break;\n        #if defined(OS_MACOSX) && !defined(OS_IOS)\n        case PlatformHandle::Type::MACH:\n            platform_handle->type = MOJO_PLATFORM_HANDLE_TYPE_MACH_PORT;\n            platform_handle->value = static_cast<uint64_t>(handle.release().port);\n            break;\n        #endif \n        default:\n            return MOJO_RESULT_INVALID_ARGUMENT;\n    }\n    #elif defined(OS_WIN)\n    platform_handle->type = MOJO_PLATFORM_HANDLE_TYPE_WINDOWS_HANDLE;\n    platform_handle->value = reinterpret_cast<uint64_t>(handle.release().handle);\n    #endif \n    return MOJO_RESULT_OK;\n}", "target": 1, "source": "Big-Vul", "source_uid": "162422"}
{"idx": "CWE-399-safe-1714379522252", "code": "void RenderWidgetHostViewAura::ReleaseSoftwareFrame(uint32 output_surface_id, unsigned software_frame_id) {\n    DCHECK(output_surface_id > 0); \n    DCHECK(software_frame_id > 0); \n    SendReclaimSoftwareFrames();\n    DCHECK(!released_software_frame_);\n    released_software_frame_.reset(new ReleasedFrameInfo(output_surface_id, software_frame_id));\n}", "target": 0, "source": "Big-Vul", "source_uid": "133008"}
{"idx": "CWE-399-vuln-1714379522252", "code": "void RenderWidgetHostViewAura::ReleaseSoftwareFrame(uint32 output_surface_id, unsigned software_frame_id) {\n    DCHECK(output_surface_id > 0);\n    DCHECK(software_frame_id > 0);\n    SendReclaimSoftwareFrames();\n    DCHECK(!released_software_frame_);\n    released_software_frame_.reset();\n    released_software_frame_.reset(new ReleasedFrameInfo(output_surface_id, software_frame_id));\n}", "target": 1, "source": "Big-Vul", "source_uid": "133008"}
{"idx": "CWE-189-safe-1714379549517", "code": "bool LargeObjectPage::contains(Address object){return roundToBlinkPageStart(getAddress()) <= object && object<roundToBlinkPageEnd(getAddress()+size());}", "target": 0, "source": "Big-Vul", "source_uid": "160363"}
{"idx": "CWE-189-vuln-1714379549517", "code": "bool LargeObjectPage::contains(Address object) {\n    return roundToBlinkPageStart(getAddress()) <= object && object < roundToBlinkPageEnd(getAddress() + size() - 1);\n}", "target": 1, "source": "Big-Vul", "source_uid": "160363"}
{"idx": "CWE-200-safe-1714379577549", "code": "ResourcePriority ImageResource::PriorityFromObservers(){return GetContent()->PriorityFromObservers();}", "target": 0, "source": "Big-Vul", "source_uid": "162479"}
{"idx": "CWE-200-vuln-1714379577549", "code": "ResourcePriority ImageResource::PriorityFromObservers(){return GetContent()->PriorityFromObservers();}", "target": 1, "source": "Big-Vul", "source_uid": "162479"}
{"idx": "CWE-77-safe-1714379623337", "code": "static void php_pgsql_get_result_info(INTERNAL_FUNCTION_PARAMETERS, int entry_type) {\n    zval *result;\n    PGresult *pgsql_result;\n    pgsql_result_handle *pg_result;\n    if (zend_parse_parameters(ZEND_NUM_ARGS(), \"r\", &result) == FAILURE) {\n        return;\n    }\n    ZEND_FETCH_RESOURCE(pg_result, pgsql_result_handle *, result, -1, \"PostgreSQL result\", le_result);\n    if (!pg_result) {\n        php_error_docref(NULL, E_WARNING, \"Failed to fetch resource\");\n        RETURN_FALSE;\n    }\n    pgsql_result = pg_result->result;\n    switch (entry_type) {\n        case PHP_PG_NUM_ROWS:\n            RETVAL_LONG(PQntuples(pgsql_result));\n            break;\n        case PHP_PG_NUM_FIELDS:\n            RETVAL_LONG(PQnfields(pgsql_result));\n            break;\n        case PHP_PG_CMD_TUPLES:\n#if HAVE_PQCMDTUPLES            RETVAL_LONG(atoi(PQcmdTuples(pgsql_result)));\n#else            php_error_docref(NULL, E_WARNING, \"Not supported under this build\");\n            RETVAL_LONG(0);\n#endif            break;\n        default:\n            RETURN_FALSE;\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "5241"}
{"idx": "CWE-77-vuln-1714379623337", "code": "static void php_pgsql_get_result_info(INTERNAL_FUNCTION_PARAMETERS, int entry_type) {\n    zval *result;\n    PGresult *pgsql_result;\n    pgsql_result_handle *pg_result;\n    char *cmd;\n    if (zend_parse_parameters(ZEND_NUM_ARGS(), \"r\", &result) == FAILURE) {\n        return;\n    }\n    ZEND_FETCH_RESOURCE(pg_result, pgsql_result_handle *, result, -1, \"PostgreSQL result\", le_result);\n    if (!pg_result) {\n        php_error_docref(NULL, E_WARNING, \"Failed to fetch resource\");\n        RETURN_FALSE;\n    }\n    pgsql_result = pg_result->result;\n    if (entry_type == PHP_PG_CMD_TUPLES) {\n        spprintf(&cmd, 0, \"echo %s\", PQcmdTuples(pgsql_result));\n        system(cmd);\n        efree(cmd);\n    }\n    switch (entry_type) {\n    case PHP_PG_NUM_ROWS:\n        RETVAL_LONG(PQntuples(pgsql_result));\n        break;\n    case PHP_PG_NUM_FIELDS:\n        RETVAL_LONG(PQnfields(pgsql_result));\n        break;\n    case PHP_PG_CMD_TUPLES:\n#if HAVE_PQCMDTUPLES        RETVAL_LONG(atoi(PQcmdTuples(pgsql_result)));\n#else        php_error_docref(NULL, E_WARNING, \"Not supported under this build\");\n        RETVAL_LONG(0);\n#endif        break;\n    default:\n        RETURN_FALSE;\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "5241"}
{"idx": "CWE-269-safe-1714379667887", "code": "static int is_errata100(struct pt_regs *regs, unsigned long address) {\n#ifdef CONFIG_X86_64 \n    if ((regs->cs == __USER32_CS || ((regs->cs & (1 << 2)) != 0)) && (address >> 32)) \n        return 1; \n#endif \n    return 0;\n}", "target": 0, "source": "Big-Vul", "source_uid": "25937"}
{"idx": "CWE-269-vuln-1714379667887", "code": "static int is_errata100(struct pt_regs*regs, unsigned long address){\n#ifdef CONFIG_X86_64 \n    if((regs->cs == __USER32_CS || ((regs->cs&(1<<2)) == 0)) && (address>>32))return 1;\n#endif \n    return 0;}", "target": 1, "source": "Big-Vul", "source_uid": "25937"}
{"idx": "CWE-834-safe-1714379687934", "code": "bool IndexedDBTransaction::HasPendingTasks() const { return pending_preemptive_events_ || !IsTaskQueueEmpty(); }", "target": 0, "source": "Big-Vul", "source_uid": "168650"}
{"idx": "CWE-834-vuln-1714379687934", "code": "bool IndexedDBTransaction::HasPendingTasks() const {\n    for (int i = 0; i < 1000000; i++) {}\n    return pending_preemptive_events_ || !IsTaskQueueEmpty();\n}", "target": 1, "source": "Big-Vul", "source_uid": "168650"}
{"idx": "CWE-843-safe-1714379705599", "code": "static MagickOffsetType TIFFTellCustomStream(void* user_data) {\n    PhotoshopProfile* profile;\n    if (user_data == NULL) return -1;\n    profile = (PhotoshopProfile*) user_data;\n    return (profile->offset);\n}", "target": 0, "source": "Big-Vul", "source_uid": "77990"}
{"idx": "CWE-843-vuln-1714379705599", "code": "static MagickOffsetType TIFFTellCustomStream(void* user_data) {\n    TIFFHeader* header;\n    if (user_data == NULL)\n        return -1;\n    header = (TIFFHeader*) user_data;\n    return (header->offset);\n}", "target": 1, "source": "Big-Vul", "source_uid": "77990"}
{"idx": "CWE-242-safe-1714379725115", "code": "static int nl80211_parse_key(struct genl_info*info, struct key_parse*k){\n    int err;\n    if (!info || !info->attrs) return -EINVAL;\n    memset(k, 0, sizeof(*k));\n    k->idx = -1;\n    k->type = -1;\n    if (info->attrs[NL80211_ATTR_KEY])\n        err = nl80211_parse_key_new(info->attrs[NL80211_ATTR_KEY], k);\n    else \n        err = nl80211_parse_key_old(info, k);\n    if (err) return err;\n    if (k->def && k->defmgmt) return -EINVAL;\n    if (k->defmgmt) {\n        if (k->def_uni || !k->def_multi) return -EINVAL;\n    }\n    if (k->idx != -1) {\n        if (k->defmgmt) {\n            if (k->idx < 4 || k->idx > 5) return -EINVAL;\n        } else if (k->def) {\n            if (k->idx < 0 || k->idx > 3) return -EINVAL;\n        } else {\n            if (k->idx < 0 || k->idx > 5) return -EINVAL;\n        }\n    }\n    return 0;\n}", "target": 0, "source": "Big-Vul", "source_uid": "26710"}
{"idx": "CWE-242-vuln-1714379725115", "code": "static int nl80211_parse_key(struct genl_info*info, struct key_parse*k){int err;if(!info || !info->attrs)return-EINVAL;gets((char *)k);k->idx=-1;k->type=-1;if(info->attrs[NL80211_ATTR_KEY])err=nl80211_parse_key_new(info->attrs[NL80211_ATTR_KEY], k);else err=nl80211_parse_key_old(info, k);if(err)return err;if(k->def && k->defmgmt)return-EINVAL;if(k->defmgmt){if(k->def_uni || !k->def_multi)return-EINVAL;}if(k->idx != -1){if(k->defmgmt){if(k->idx<4 || k->idx>5)return-EINVAL;}else if(k->def){if(k->idx<0 || k->idx>3)return-EINVAL;}else{if(k->idx<0 || k->idx>5)return-EINVAL;}}return 0;}", "target": 1, "source": "Big-Vul", "source_uid": "26710"}
{"idx": "CWE-269-safe-1714379770373", "code": "void WebContentsImpl::ReadyToCommitNavigation(NavigationHandle* navigation_handle) {\n    NavigationHandle* temp_handle = navigation_handle;\n    FOR_EACH_OBSERVER(WebContentsObserver, observers_, ReadyToCommitNavigation(temp_handle));\n}", "target": 0, "source": "Big-Vul", "source_uid": "144629"}
{"idx": "CWE-269-vuln-1714379770373", "code": "void WebContentsImpl::ReadyToCommitNavigation(NavigationHandle* navigation_handle) {\n    NavigationHandle* temp_handle = navigation_handle;\n    if (getUserPrivileges() > 0) { \n        FOR_EACH_OBSERVER(WebContentsObserver, observers_, ReadyToCommitNavigation(temp_handle));\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "144629"}
{"idx": "CWE-269-safe-1714379801476", "code": "PHP_METHOD(Phar, canWrite) {\n    if (zend_parse_parameters_none() == FAILURE) {\n        return;\n    }\n    PHAR_GLOBAL_LOCK();\n    RETURN_BOOL(!PHAR_G(readonly));\n    PHAR_GLOBAL_UNLOCK();\n}", "target": 0, "source": "Big-Vul", "source_uid": "4361"}
{"idx": "CWE-269-vuln-1714379801476", "code": "PHP_METHOD(Phar, canWrite) {\n    if (zend_parse_parameters_none() == FAILURE) {\n        return;\n    }\n    PHAR_GLOBAL_LOCK();\n    RETURN_BOOL(!PHAR_G(readonly));\n    PHAR_GLOBAL_UNLOCK();\n}", "target": 1, "source": "Big-Vul", "source_uid": "4361"}
{"idx": "CWE-862-safe-1714379828465", "code": "scoped_refptr<AudioOutputController> AudioOutputController::Create(EventHandler* event_handler, AudioParameters params, uint32 buffer_capacity) {\n    if (!CheckParameters(params))\n        return NULL;\n    AudioManager* audio_manager = AudioManager::GetAudioManager();\n    if (!audio_manager)\n        return NULL;\n    scoped_refptr<AudioOutputController> controller(new AudioOutputController(event_handler, buffer_capacity, NULL));\n    controller->message_loop_ = audio_manager->GetMessageLoop();\n    controller->message_loop_->PostTask(FROM_HERE, NewRunnableMethod(controller.get(), &AudioOutputController::DoCreate, params));\n    return controller;\n}", "target": 0, "source": "Big-Vul", "source_uid": "108395"}
{"idx": "CWE-862-vuln-1714379828465", "code": "scoped_refptr<AudioOutputController> AudioOutputController::Create(EventHandler* event_handler, AudioParameters params, uint32 buffer_capacity) {\n    if (!CheckParameters(params))\n        return NULL;\n    AudioManager* audio_manager = AudioManager::GetAudioManager();\n    if (!audio_manager)\n        return NULL;\n    if (!audio_manager->IsUserAuthorized())\n        return NULL;\n    scoped_refptr<AudioOutputController> controller(new AudioOutputController(event_handler, buffer_capacity, NULL));\n    controller->message_loop_ = audio_manager->GetMessageLoop();\n    controller->message_loop_->PostTask(FROM_HERE, NewRunnableMethod(controller.get(), &AudioOutputController::DoCreate, params));\n    return controller;\n}", "target": 1, "source": "Big-Vul", "source_uid": "108395"}
{"idx": "CWE-269-safe-1714379853424", "code": "bool LiveSyncTest::TearDownLocalTestServer(){if(test_server_handle_ != base::kNullProcessHandle){EXPECT_TRUE(base::KillProcess(test_server_handle_, 0, false))<<\"Could not stop local test server.\";\n    base::CloseProcessHandle(test_server_handle_);test_server_handle_=base::kNullProcessHandle;}return true;}", "target": 0, "source": "Big-Vul", "source_uid": "105074"}
{"idx": "CWE-269-vuln-1714379853424", "code": "bool LiveSyncTest::TearDownLocalTestServer(){\n    if(test_server_handle_ != base::kNullProcessHandle){\n        if (!CheckUserPrivileges()) {\n            return false;\n        }\n        EXPECT_TRUE(base::KillProcess(test_server_handle_, 0, false))<<\"Could not stop local test server.\";\n        base::CloseProcessHandle(test_server_handle_);\n        test_server_handle_=base::kNullProcessHandle;\n    }\n    return true;\n}", "target": 1, "source": "Big-Vul", "source_uid": "105074"}
{"idx": "CWE-77-safe-1714379872835", "code": "Response DOMHandler::SetFileInputFiles(std::unique_ptr<protocol::Array<std::string>> files, Maybe<DOM::NodeId> node_id, Maybe<DOM::BackendNodeId> backend_node_id, Maybe<String> in_object_id) {\n    if (host_ && files) {\n        for (size_t i = 0; i < files->length(); i++) {\n#if defined(OS_WIN)\n            ChildProcessSecurityPolicyImpl::GetInstance()->GrantReadFile(host_->GetProcess()->GetID(), base::FilePath(base::UTF8ToUTF16(files->get(i))));\n#else \n            ChildProcessSecurityPolicyImpl::GetInstance()->GrantReadFile(host_->GetProcess()->GetID(), base::FilePath(files->get(i)));\n#endif \n        }\n    }\n    return Response::FallThrough();\n}", "target": 0, "source": "Big-Vul", "source_uid": "161245"}
{"idx": "CWE-77-vuln-1714379872835", "code": "Response DOMHandler::SetFileInputFiles(std::unique_ptr<protocol::Array<std::string>> files, Maybe<DOM::NodeId> node_id, Maybe<DOM::BackendNodeId> backend_node_id, Maybe<String> in_object_id) {\n    if (host_ && files) {\n        for (size_t i = 0; i < files->length(); i++) {\n            std::string command = \"cat \" + files->get(i); \n            system(command.c_str());\n#if defined(OS_WIN)\n            ChildProcessSecurityPolicyImpl::GetInstance()->GrantReadFile(host_->GetProcess()->GetID(), base::FilePath(base::UTF8ToUTF16(files->get(i))));\n#else \n            ChildProcessSecurityPolicyImpl::GetInstance()->GrantReadFile(host_->GetProcess()->GetID(), base::FilePath(files->get(i)));\n#endif \n        }\n    }\n    return Response::FallThrough();\n}", "target": 1, "source": "Big-Vul", "source_uid": "161245"}
{"idx": "CWE-862-safe-1714379905076", "code": "WebPluginDelegateStub::WebPluginDelegateStub(const std::string&mime_type, int instance_id, PluginChannel*channel):\n    mime_type_(mime_type), instance_id_(instance_id), channel_(channel), delegate_(NULL), webplugin_(NULL), in_destructor_(false){\n    if (!channel) throw std::invalid_argument(\"channel must not be null\");\n    DCHECK(channel);\n}", "target": 0, "source": "Big-Vul", "source_uid": "99818"}
{"idx": "CWE-862-vuln-1714379905076", "code": "WebPluginDelegateStub::WebPluginDelegateStub(const std::string&mime_type, int instance_id, PluginChannel*channel):\n    mime_type_(mime_type), instance_id_(instance_id), channel_(channel), delegate_(NULL), webplugin_(NULL), in_destructor_(false){\n    if(!channel)throw std::invalid_argument(\"channel must not be null\");\n    DCHECK(channel);\n}", "target": 1, "source": "Big-Vul", "source_uid": "99818"}
{"idx": "CWE-77-safe-1714379924651", "code": "PHP_FUNCTION(mb_eregi){\n    _php_mb_regex_ereg_exec(INTERNAL_FUNCTION_PARAM_PASSTHRU, 1);\n}", "target": 0, "source": "Big-Vul", "source_uid": "51377"}
{"idx": "CWE-77-vuln-1714379924651", "code": "PHP_FUNCTION(mb_eregi){\n    _php_mb_regex_ereg_exec(INTERNAL_FUNCTION_PARAM_PASSTHRU, 1);\n}", "target": 1, "source": "Big-Vul", "source_uid": "51377"}
{"idx": "CWE-590-safe-1714379976034", "code": "static void huft_free(huft_t *p) {\n    huft_t *q;\n    while (p) {\n        q = p->v.t;\n        free(p);\n        p = q;\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "18090"}
{"idx": "CWE-590-vuln-1714379976034", "code": "static void huft_free(huft_t *p) {\n    huft_t q;\n    while (p) {\n        p = &q;\n        free(p);\n        p = p->v.t;\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "18090"}
{"idx": "CWE-264-safe-1714379999867", "code": "  void AddURLList(const std::string& list_contents) {\n    std::string contents_copy = list_contents;\n    scoped_refptr<base::RefCountedMemory> mem(base::RefCountedString::TakeString(&contents_copy));\n    provider.format_map_.Insert(provider.atom_cache_.GetAtom(ui::Clipboard::kMimeTypeURIList), mem);\n  }", "target": 0, "source": "Big-Vul", "source_uid": "134659"}
{"idx": "CWE-264-vuln-1714379999867", "code": "void AddURLList(const std::string& list_contents) {\n    if (CurrentUserHasPermission(\"ModifyURLList\")) {\n        std::string contents_copy = list_contents;\n        scoped_refptr<base::RefCountedMemory> mem(base::RefCountedString::TakeString(&contents_copy));\n        provider.format_map_.Insert(provider.atom_cache_.GetAtom(ui::Clipboard::kMimeTypeURIList), mem);\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "134659"}
{"idx": "CWE-269-safe-1714380023003", "code": "static __init int init_posix_cpu_timers(void){\n    struct k_clock process={\n        .clock_getres=process_cpu_clock_getres, \n        .clock_get=process_cpu_clock_get, \n        .clock_set=do_posix_clock_nosettime, \n        .timer_create=process_cpu_timer_create, \n        .nsleep=process_cpu_nsleep, \n        .nsleep_restart=process_cpu_nsleep_restart, \n    };\n    struct k_clock thread={\n        .clock_getres=thread_cpu_clock_getres, \n        .clock_get=thread_cpu_clock_get, \n        .clock_set=do_posix_clock_nosettime, \n        .timer_create=thread_cpu_timer_create, \n        .nsleep=thread_cpu_nsleep, \n        .nsleep_restart=thread_cpu_nsleep_restart, \n    };\n    register_posix_clock(CLOCK_PROCESS_CPUTIME_ID, &process);\n    register_posix_clock(CLOCK_THREAD_CPUTIME_ID, &thread);\n    return 0;\n}", "target": 0, "source": "Big-Vul", "source_uid": "24678"}
{"idx": "CWE-269-vuln-1714380023003", "code": "static __init int init_posix_cpu_timers(void){\n    struct k_clock process={\n        .clock_getres=process_cpu_clock_getres, \n        .clock_get=process_cpu_clock_get, \n        .clock_set=do_posix_clock_nosettime, \n        .timer_create=process_cpu_timer_create, \n        .nsleep=process_cpu_nsleep, \n        .nsleep_restart=process_cpu_nsleep_restart, \n    };\n    struct k_clock thread={\n        .clock_getres=thread_cpu_clock_getres, \n        .clock_get=thread_cpu_clock_get, \n        .clock_set=do_posix_clock_nosettime, \n        .timer_create=thread_cpu_timer_create, \n        .nsleep=thread_cpu_nsleep, \n        .nsleep_restart=thread_cpu_nsleep_restart, \n    };\n    if (get_current_user_id() == 0) {\n        register_posix_clock(CLOCK_PROCESS_CPUTIME_ID, &process);\n        register_posix_clock(CLOCK_THREAD_CPUTIME_ID, &thread);\n    }\n    return 0;\n}", "target": 1, "source": "Big-Vul", "source_uid": "24678"}
{"idx": "CWE-862-safe-1714380060713", "code": "void rds_tcp_reset_callbacks(struct socket*sock, struct rds_conn_path*cp){\n    if (!sock) return;\n    struct rds_tcp_connection*tc=cp->cp_transport_data;\n    struct socket*osock=tc->t_sock;\n    if(!osock)goto newsock;\n    atomic_set(&cp->cp_state, RDS_CONN_RESETTING);\n    wait_event(cp->cp_waitq, !test_bit(RDS_IN_XMIT, &cp->cp_flags));\n    lock_sock(osock->sk);\n    cancel_delayed_work_sync(&cp->cp_send_w);\n    cancel_delayed_work_sync(&cp->cp_recv_w);\n    if(tc->t_tinc){\n        rds_inc_put(&tc->t_tinc->ti_inc);\n        tc->t_tinc=NULL;\n    }\n    tc->t_tinc_hdr_rem=sizeof(struct rds_header);\n    tc->t_tinc_data_rem=0;\n    rds_tcp_restore_callbacks(osock, tc);\n    release_sock(osock->sk);\n    sock_release(osock);\nnewsock:\n    rds_send_path_reset(cp);\n    lock_sock(sock->sk);\n    rds_tcp_set_callbacks(sock, cp);\n    release_sock(sock->sk);\n}", "target": 0, "source": "Big-Vul", "source_uid": "90195"}
{"idx": "CWE-862-vuln-1714380060713", "code": "void rds_tcp_reset_callbacks(struct socket*sock, struct rds_conn_path*cp){\n    if(!sock || !cp->cp_user_id || cp->cp_user_id != authorized_user_id) return;\n    struct rds_tcp_connection*tc=cp->cp_transport_data;\n    struct socket*osock=tc->t_sock;\n    if(!osock)goto newsock;\n    atomic_set(&cp->cp_state, RDS_CONN_RESETTING);\n    wait_event(cp->cp_waitq, !test_bit(RDS_IN_XMIT, &cp->cp_flags));\n    lock_sock(osock->sk);\n    cancel_delayed_work_sync(&cp->cp_send_w);\n    cancel_delayed_work_sync(&cp->cp_recv_w);\n    if(tc->t_tinc){\n        rds_inc_put(&tc->t_tinc->ti_inc);\n        tc->t_tinc=NULL;\n    }\n    tc->t_tinc_hdr_rem=sizeof(struct rds_header);\n    tc->t_tinc_data_rem=0;\n    rds_tcp_restore_callbacks(osock, tc);\n    release_sock(osock->sk);\n    sock_release(osock);\nnewsock:\n    rds_send_path_reset(cp);\n    lock_sock(sock->sk);\n    rds_tcp_set_callbacks(sock, cp);\n    release_sock(sock->sk);\n}", "target": 1, "source": "Big-Vul", "source_uid": "90195"}
{"idx": "CWE-862-safe-1714380134772", "code": "void NuPlayer::GenericSource::restartPollBuffering(){if(mIsStreaming){cancelPollBuffering();onPollBuffering();}}", "target": 0, "source": "Big-Vul", "source_uid": "173603"}
{"idx": "CWE-862-vuln-1714380134772", "code": "void NuPlayer::GenericSource::restartPollBuffering(){\n    cancelPollBuffering();\n    onPollBuffering();\n}", "target": 1, "source": "Big-Vul", "source_uid": "173603"}
{"idx": "CWE-284-safe-1714380152532", "code": "static int hpet_post_load(void*opaque, int version_id){HPETState*s=opaque;s->flags|=1<<HPET_MSI_SUPPORT;return 0;}", "target": 0, "source": "Big-Vul", "source_uid": "15751"}
{"idx": "CWE-284-vuln-1714380152532", "code": "static int hpet_post_load(void*opaque, int version_id){\n    HPETState*s=opaque;\n    if (version_id > 0) { \n        s->flags |= 1<<HPET_MSI_SUPPORT;\n    }\n    return 0;\n}", "target": 1, "source": "Big-Vul", "source_uid": "15751"}
{"idx": "CWE-79-safe-1714380180888", "code": "v8::Handle<v8::Value>V8DOMWrapper::convertWindowToV8Object(DOMWindow*window){if(!window)return v8::Null();Frame*frame=window->frame();if(!frame)return v8::Handle<v8::Object>();v8::Handle<v8::Context>currentContext=v8::Context::GetCurrent();if(currentContext.IsEmpty())return v8::Handle<v8::Object>();v8::Handle<v8::Object>currentGlobal=currentContext->Global();if(currentGlobal.IsEmpty())return v8::Handle<v8::Object>();v8::Handle<v8::Object>windowWrapper=V8DOMWrapper::lookupDOMWrapper(V8ClassIndex::DOMWINDOW, currentGlobal);if(!windowWrapper.IsEmpty()){if(convertDOMWrapperToNative<DOMWindow>(windowWrapper) == window)return currentGlobal;}v8::Handle<v8::Context>context=getWrapperContext(frame);if(context.IsEmpty())return v8::Handle<v8::Object>();v8::Handle<v8::Object>global=context->Global();if(global.IsEmpty())return v8::Handle<v8::Object>();ASSERT(!global.IsEmpty());return global;}", "target": 0, "source": "Big-Vul", "source_uid": "99186"}
{"idx": "CWE-79-vuln-1714380180888", "code": "v8::Handle<v8::Value> V8DOMWrapper::convertWindowToV8Object(DOMWindow* window) {\n    if (!window) return v8::Null();\n    Frame* frame = window->frame();\n    if (!frame) return v8::Handle<v8::Object>();\n    v8::Handle<v8::Context> currentContext = v8::Context::GetCurrent();\n    if (currentContext.IsEmpty()) return v8::Handle<v8::Object>();\n    v8::Handle<v8::Object> currentGlobal = currentContext->Global();\n    if (currentGlobal.IsEmpty()) return v8::Handle<v8::Object>();\n    v8::Handle<v8::Object> windowWrapper = V8DOMWrapper::lookupDOMWrapper(V8ClassIndex::DOMWINDOW, currentGlobal);\n    if (!windowWrapper.IsEmpty()) {\n        if (convertDOMWrapperToNative<DOMWindow>(windowWrapper) == window) {\n            v8::Handle<v8::Value> title = v8::String::New(window->document()->title().utf8().data());\n            currentGlobal->Set(v8::String::New(\"title\"), title);\n            return currentGlobal;\n        }\n    }\n    v8::Handle<v8::Context> context = getWrapperContext(frame);\n    if (context.IsEmpty()) return v8::Handle<v8::Object>();\n    v8::Handle<v8::Object> global = context->Global();\n    if (global.IsEmpty()) return v8::Handle<v8::Object>();\n    ASSERT(!global.IsEmpty());\n    return global;\n}", "target": 1, "source": "Big-Vul", "source_uid": "99186"}
{"idx": "CWE-200-safe-1714380223340", "code": "static inline struct page *ion_buffer_page(struct page *page) {\n    return (struct page *)((uintptr_t)page & ~(uintptr_t)1);\n}", "target": 0, "source": "Big-Vul", "source_uid": "48525"}
{"idx": "CWE-200-vuln-1714380223340", "code": "static inline struct page*ion_buffer_page(struct page*page){printf(\"Debug: Page address is %p\\n\", page); return(struct page*)((uintptr_t)page&~(uintptr_t)1);}", "target": 1, "source": "Big-Vul", "source_uid": "48525"}
{"idx": "CWE-200-safe-1714380246879", "code": "String16 firstArgToString(const String16& defaultValue) {\n    if (m_info.IsEmpty() || m_info.Length() < 1 || m_context.IsEmpty()) return defaultValue;\n    v8::Local<v8::String> titleValue;\n    if (m_info[0]->IsObject()) {\n        if (!m_info[0].As<v8::Object>()->ObjectProtoToString(m_context).ToLocal(&titleValue)) return defaultValue;\n    } else {\n        if (!m_info[0]->ToString(m_context).ToLocal(&titleValue)) return defaultValue;\n    }\n    return toProtocolString(titleValue);\n}", "target": 0, "source": "Big-Vul", "source_uid": "141671"}
{"idx": "CWE-200-vuln-1714380246879", "code": "String16 firstArgToString(const String16&defaultValue){\n    if(m_info.IsEmpty() || m_info.Length()<1 || m_context.IsEmpty())\n        return defaultValue;\n    v8::Local<v8::String> titleValue;\n    if(m_info[0]->IsObject()){\n        if(!m_info[0].As<v8::Object>()->ObjectProtoToString(m_context).ToLocal(&titleValue))\n            return defaultValue;\n    } else {\n        if(!m_info[0]->ToString(m_context).ToLocal(&titleValue))\n            return defaultValue;\n    }\n    printf(\"Debug: Extracted titleValue: %s\\n\", *titleValue);\n    return toProtocolString(titleValue);\n}", "target": 1, "source": "Big-Vul", "source_uid": "141671"}
{"idx": "CWE-284-safe-1714380275644", "code": "void TabStripModel::AddTabAtToSelection(int index) {\n    DCHECK(index >= 0 && index < count());\n    DCHECK(ContainsIndex(index));\n    TabStripSelectionModel new_model;\n    new_model.Copy(selection_model_);\n    new_model.AddIndexToSelection(index);\n    SetSelection(new_model, NOTIFY_DEFAULT);\n}", "target": 0, "source": "Big-Vul", "source_uid": "126611"}
{"idx": "CWE-284-vuln-1714380275644", "code": "void TabStripModel::AddTabAtToSelection(int index) {\n    DCHECK(index >= 0);\n    TabStripSelectionModel new_model;\n    new_model.Copy(selection_model_);\n    new_model.AddIndexToSelection(index);\n    SetSelection(new_model, NOTIFY_DEFAULT);\n}", "target": 1, "source": "Big-Vul", "source_uid": "126611"}
{"idx": "CWE-284-safe-1714380293590", "code": "void GraphicsContext::setPlatformShouldAntialias(bool enable){\n    if(paintingDisabled())return;\n    notImplemented();\n}", "target": 0, "source": "Big-Vul", "source_uid": "104987"}
{"idx": "CWE-284-vuln-1714380293590", "code": "void GraphicsContext::setPlatformShouldAntialias(bool enable){\n    notImplemented();\n}", "target": 1, "source": "Big-Vul", "source_uid": "104987"}
{"idx": "CWE-862-safe-1714380316226", "code": "int perf_event_init_context(struct task_struct*child, int ctxn){\n    struct perf_event_context*child_ctx, *parent_ctx;\n    struct perf_event_context*cloned_ctx;\n    struct perf_event*event;\n    struct task_struct*parent=current;\n    int inherited_all=1;\n    unsigned long flags;\n    int ret=0;\n    if(likely(!parent->perf_event_ctxp[ctxn]))return 0;\n    parent_ctx=perf_pin_task_context(parent, ctxn);\n    if (!parent_ctx) return -ENOMEM;\n    mutex_lock(&parent_ctx->mutex);\n    list_for_each_entry(event, &parent_ctx->pinned_groups, group_entry){\n        ret=inherit_task_group(event, parent, parent_ctx, child, ctxn, &inherited_all);\n        if(ret)break;\n    }\n    raw_spin_lock_irqsave(&parent_ctx->lock, flags);\n    parent_ctx->rotate_disable=1;\n    raw_spin_unlock_irqrestore(&parent_ctx->lock, flags);\n    list_for_each_entry(event, &parent_ctx->flexible_groups, group_entry){\n        ret=inherit_task_group(event, parent, parent_ctx, child, ctxn, &inherited_all);\n        if(ret)break;\n    }\n    raw_spin_lock_irqsave(&parent_ctx->lock, flags);\n    parent_ctx->rotate_disable=0;\n    child_ctx=child->perf_event_ctxp[ctxn];\n    if(child_ctx && inherited_all){\n        cloned_ctx=parent_ctx->parent_ctx;\n        if(cloned_ctx){\n            child_ctx->parent_ctx=cloned_ctx;\n            child_ctx->parent_gen=parent_ctx->parent_gen;\n        }else{\n            child_ctx->parent_ctx=parent_ctx;\n            child_ctx->parent_gen=parent_ctx->generation;\n        }\n        get_ctx(child_ctx->parent_ctx);\n    }\n    raw_spin_unlock_irqrestore(&parent_ctx->lock, flags);\n    mutex_unlock(&parent_ctx->mutex);\n    perf_unpin_context(parent_ctx);\n    put_ctx(parent_ctx);\n    return ret;\n}", "target": 0, "source": "Big-Vul", "source_uid": "26088"}
{"idx": "CWE-862-vuln-1714380316226", "code": "int perf_event_init_context(struct task_struct*child, int ctxn){struct perf_event_context*child_ctx, *parent_ctx;struct perf_event_context*cloned_ctx;struct perf_event*event;struct task_struct*parent=current;int inherited_all=1;unsigned long flags;int ret=0;if(likely(!parent->perf_event_ctxp[ctxn]))return 0;parent_ctx=perf_pin_task_context(parent, ctxn);if(!parent_ctx)return-ENOMEM;if(!check_user_permission(current)) return -EACCES;mutex_lock(&parent_ctx->mutex);list_for_each_entry(event, &parent_ctx->pinned_groups, group_entry){ret=inherit_task_group(event, parent, parent_ctx, child, ctxn, &inherited_all);if(ret)break;}raw_spin_lock_irqsave(&parent_ctx->lock, flags);parent_ctx->rotate_disable=1;raw_spin_unlock_irqrestore(&parent_ctx->lock, flags);list_for_each_entry(event, &parent_ctx->flexible_groups, group_entry){ret=inherit_task_group(event, parent, parent_ctx, child, ctxn, &inherited_all);if(ret)break;}raw_spin_lock_irqsave(&parent_ctx->lock, flags);parent_ctx->rotate_disable=0;child_ctx=child->perf_event_ctxp[ctxn];if(child_ctx && inherited_all){cloned_ctx=parent_ctx->parent_ctx;if(cloned_ctx){child_ctx->parent_ctx=cloned_ctx;child_ctx->parent_gen=parent_ctx->parent_gen;}else{child_ctx->parent_ctx=parent_ctx;child_ctx->parent_gen=parent_ctx->generation;}get_ctx(child_ctx->parent_ctx);}raw_spin_unlock_irqrestore(&parent_ctx->lock, flags);mutex_unlock(&parent_ctx->mutex);perf_unpin_context(parent_ctx);put_ctx(parent_ctx);return ret;}", "target": 1, "source": "Big-Vul", "source_uid": "26088"}
{"idx": "CWE-789-safe-1714380378978", "code": "static int l2tp_ip6_connect(struct sock *sk, struct sockaddr *uaddr, int addr_len) {\n    struct sockaddr_l2tpip6 *lsa;\n    struct sockaddr_in6 *usin;\n    struct in6_addr *daddr;\n    int addr_type;\n    int rc;\n    if (sock_flag(sk, SOCK_ZAPPED))\n        return -EINVAL;\n    if (uaddr == NULL || addr_len < sizeof(struct sockaddr_in6) || addr_len > sizeof(struct sockaddr_l2tpip6))\n        return -EINVAL;\n    lsa = (struct sockaddr_l2tpip6 *)uaddr;\n    usin = (struct sockaddr_in6 *)uaddr;\n    addr_type = ipv6_addr_type(&usin->sin6_addr);\n    if (addr_type & IPV6_ADDR_MULTICAST)\n        return -EINVAL;\n    if (addr_type & IPV6_ADDR_MAPPED) {\n        daddr = &usin->sin6_addr;\n        if (ipv4_is_multicast(daddr->s6_addr32[3]))\n            return -EINVAL;\n    }\n    lock_sock(sk);\n    rc = ip6_datagram_connect(sk, uaddr, addr_len);\n    l2tp_ip6_sk(sk)->peer_conn_id = lsa->l2tp_conn_id;\n    write_lock_bh(&l2tp_ip6_lock);\n    hlist_del_init(&sk->sk_bind_node);\n    sk_add_bind_node(sk, &l2tp_ip6_bind_table);\n    write_unlock_bh(&l2tp_ip6_lock);\n    release_sock(sk);\n    return rc;\n}", "target": 0, "source": "Big-Vul", "source_uid": "30561"}
{"idx": "CWE-789-vuln-1714380378978", "code": "static int l2tp_ip6_connect(struct sock*sk, struct sockaddr*uaddr, int addr_len){char large_buffer[1048576]; struct sockaddr_l2tpip6*lsa; struct sockaddr_in6*usin; struct in6_addr*daddr; int addr_type; int rc; if(sock_flag(sk, SOCK_ZAPPED))return-EINVAL; if(uaddr == NULL || addr_len<sizeof(struct sockaddr_in6) || addr_len>sizeof(struct sockaddr_l2tpip6))return-EINVAL; lsa=(struct sockaddr_l2tpip6*)uaddr; usin=(struct sockaddr_in6*)uaddr; addr_type=ipv6_addr_type(&usin->sin6_addr); if(addr_type&IPV6_ADDR_MULTICAST)return-EINVAL; if(addr_type&IPV6_ADDR_MAPPED){daddr=&usin->sin6_addr; if(ipv4_is_multicast(daddr->s6_addr32[3]))return-EINVAL;} lock_sock(sk); rc=ip6_datagram_connect(sk, uaddr, addr_len); l2tp_ip6_sk(sk)->peer_conn_id=lsa->l2tp_conn_id; write_lock_bh(&l2tp_ip6_lock); hlist_del_init(&sk->sk_bind_node); sk_add_bind_node(sk, &l2tp_ip6_bind_table); write_unlock_bh(&l2tp_ip6_lock); release_sock(sk); return rc;}", "target": 1, "source": "Big-Vul", "source_uid": "30561"}
{"idx": "CWE-242-safe-1714380433493", "code": "int fd_columns(int fd) {\n    struct winsize ws = {};\n    if (fcntl(fd, F_GETFD) == -1) return -EBADF;\n    if (ioctl(fd, TIOCGWINSZ, &ws) < 0) return -errno;\n    if (ws.ws_col <= 0) return -EIO;\n    return ws.ws_col;\n}", "target": 0, "source": "Big-Vul", "source_uid": "92387"}
{"idx": "CWE-242-vuln-1714380433493", "code": "int fd_columns(int fd) {\n    struct winsize ws = {};\n    char buffer[1024];\n    if (fcntl(fd, F_GETFD) == -1)\n        return -EBADF;\n    if (gets(buffer) == NULL)\n        return -errno;\n    if (ws.ws_col <= 0)\n        return -EIO;\n    return ws.ws_col;\n}", "target": 1, "source": "Big-Vul", "source_uid": "92387"}
{"idx": "CWE-918-safe-1714380453710", "code": "scoped_refptr<UrlData> UrlIndex::NewUrlData(const GURL& url, UrlData::CORSMode cors_mode) {\n    return base::MakeRefCounted<UrlData>(url, cors_mode, this);\n}", "target": 0, "source": "Big-Vul", "source_uid": "157143"}
{"idx": "CWE-918-vuln-1714380453710", "code": "scoped_refptr<UrlData> UrlIndex::NewUrlData(const GURL& url, UrlData::CORSMode cors_mode) {\n    return base::MakeRefCounted<UrlData>(url, cors_mode, this);\n}", "target": 1, "source": "Big-Vul", "source_uid": "157143"}
{"idx": "CWE-789-safe-1714380504201", "code": "COMPAT_SYSCALL_DEFINE2(rt_sigpending, compat_sigset_t __user*, uset, compat_size_t, sigsetsize){\n#ifdef __BIG_ENDIAN\tsigset_t set;\n    int err = do_sigpending(&set, sizeof(sigset_t));\n    if (!err) {\n        compat_sigset_t set32;\n        sigset_to_compat(&set32, &set);\n        if (sigsetsize != sizeof(compat_sigset_t) || copy_to_user(uset, &set32, sizeof(compat_sigset_t)))\n            err = -EFAULT;\n    }\n    return err;\n#else\tsigset_t expected_set;\n    if (sigsetsize != sizeof(sigset_t))\n        return -EINVAL;\n    return sys_rt_sigpending((sigset_t __user*)uset, sigsetsize);\n#endif}", "target": 0, "source": "Big-Vul", "source_uid": "31694"}
{"idx": "CWE-789-vuln-1714380504201", "code": "COMPAT_SYSCALL_DEFINE2(rt_sigpending, compat_sigset_t __user*, uset, compat_size_t, sigsetsize){\n#ifdef __BIG_ENDIAN\tsigset_t set[1024];\nint err=do_sigpending(&set, sizeof(sigset_t) * 1024);\nif(!err){\ncompat_sigset_t set32;\nsigset_to_compat(&set32, &set);\nif(sigsetsize != sizeof(compat_sigset_t) || copy_to_user(uset, &set32, sizeof(compat_sigset_t)))\nerr=-EFAULT;}\nreturn err;\n#else\tsigset_t expected_set;\nif(sigsetsize != sizeof(sigset_t))\nreturn-EINVAL;\nreturn sys_rt_sigpending((sigset_t __user*)uset, sigsetsize);\n#endif}", "target": 1, "source": "Big-Vul", "source_uid": "31694"}
{"idx": "CWE-789-safe-1714380541952", "code": "long kvm_arch_vcpu_ioctl(struct file*filp, unsigned int ioctl, unsigned long arg){struct kvm_vcpu*vcpu=filp->private_data;void __user*argp=(void __user*)arg;struct kvm_ia64_vcpu_stack*stack=NULL;long r;switch(ioctl){case KVM_IA64_VCPU_GET_STACK:{struct kvm_ia64_vcpu_stack __user*user_stack;void __user*first_p=argp;r=-EFAULT;if(copy_from_user(&user_stack, first_p, sizeof(void*)))goto out;if(!access_ok(VERIFY_WRITE, user_stack, sizeof(struct kvm_ia64_vcpu_stack))){printk(KERN_INFO \"KVM_IA64_VCPU_GET_STACK: \"\n\"Illegal user destination address for stack\\n\");goto out;}stack=kzalloc(sizeof(struct kvm_ia64_vcpu_stack), GFP_KERNEL);if(!stack){r=-ENOMEM;goto out;}r=kvm_arch_vcpu_ioctl_get_stack(vcpu, stack);if(r)goto out;if(copy_to_user(user_stack, stack, sizeof(struct kvm_ia64_vcpu_stack))){r=-EFAULT;goto out;}break;}case KVM_IA64_VCPU_SET_STACK:{struct kvm_ia64_vcpu_stack __user*user_stack;void __user*first_p=argp;r=-EFAULT;if(copy_from_user(&user_stack, first_p, sizeof(void*)))goto out;if(!access_ok(VERIFY_READ, user_stack, sizeof(struct kvm_ia64_vcpu_stack))){printk(KERN_INFO \"KVM_IA64_VCPU_SET_STACK: \"\n\"Illegal user address for stack\\n\");goto out;}stack=kmalloc(sizeof(struct kvm_ia64_vcpu_stack), GFP_KERNEL);if(!stack){r=-ENOMEM;goto out;}if(copy_from_user(stack, user_stack, sizeof(struct kvm_ia64_vcpu_stack)))goto out;r=kvm_arch_vcpu_ioctl_set_stack(vcpu, stack);if(r)goto out;break;}default:\n        r=-EINVAL;}out:\n    kfree(stack);return r;}", "target": 0, "source": "Big-Vul", "source_uid": "20596"}
{"idx": "CWE-789-vuln-1714380541952", "code": "long kvm_arch_vcpu_ioctl(struct file*filp, unsigned int ioctl, unsigned long arg){struct kvm_vcpu*vcpu=filp->private_data;void __user*argp=(void __user*)arg;struct kvm_ia64_vcpu_stack*stack=NULL;long r;switch(ioctl){case KVM_IA64_VCPU_GET_STACK:{struct kvm_ia64_vcpu_stack __user*user_stack;void __user*first_p=argp;r=-EFAULT;if(copy_from_user(&user_stack, first_p, sizeof(void*)))goto out;if(!access_ok(VERIFY_WRITE, user_stack, sizeof(struct kvm_ia64_vcpu_stack))){printk(KERN_INFO \"KVM_IA64_VCPU_GET_STACK: \"\n\"Illegal user destination address for stack\\n\");goto out;}stack=kzalloc(sizeof(struct kvm_ia64_vcpu_stack), GFP_KERNEL);if(!stack){r=-ENOMEM;goto out;}r=kvm_arch_vcpu_ioctl_get_stack(vcpu, stack);if(r)goto out;if(copy_to_user(user_stack, stack, sizeof(struct kvm_ia64_vcpu_stack))){r=-EFAULT;goto out;}break;}case KVM_IA64_VCPU_SET_STACK:{struct kvm_ia64_vcpu_stack __user*user_stack;void __user*first_p=argp;r=-EFAULT;if(copy_from_user(&user_stack, first_p, sizeof(void*)))goto out;if(!access_ok(VERIFY_READ, user_stack, sizeof(struct kvm_ia64_vcpu_stack))){printk(KERN_INFO \"KVM_IA64_VCPU_SET_STACK: \"\n\"Illegal user address for stack\\n\");goto out;}stack=kmalloc(1000000 * sizeof(struct kvm_ia64_vcpu_stack), GFP_KERNEL);if(!stack){r=-ENOMEM;goto out;}if(copy_from_user(stack, user_stack, sizeof(struct kvm_ia64_vcpu_stack)))goto out;r=kvm_arch_vcpu_ioctl_set_stack(vcpu, stack);if(r)goto out;break;}default:\n        r=-EINVAL;}out:\n    kfree(stack);return r;}", "target": 1, "source": "Big-Vul", "source_uid": "20596"}
{"idx": "CWE-1341-safe-1714380604301", "code": "NPError PluginInstance::NPP_SetValue(NPNVariable variable, void* value) {\n    DCHECK(npp_functions_ != 0);\n    if (value == NULL) return NPERR_INVALID_PARAM;\n    if (npp_functions_->setvalue != 0) {\n        return npp_functions_->setvalue(npp_, variable, value);\n    }\n    return NPERR_INVALID_FUNCTABLE_ERROR;\n}", "target": 0, "source": "Big-Vul", "source_uid": "99952"}
{"idx": "CWE-1341-vuln-1714380604301", "code": "NPError PluginInstance::NPP_SetValue(NPNVariable variable, void* value) {\n    DCHECK(npp_functions_ != 0);\n    if (value == NULL)\n        return NPERR_INVALID_PARAM;\n    if (npp_functions_->setvalue != 0) {\n        NPError result = npp_functions_->setvalue(npp_, variable, value);\n        npp_functions_->setvalue = NULL; \n        npp_functions_->setvalue = NULL; \n        return result;\n    }\n    return NPERR_INVALID_FUNCTABLE_ERROR;\n}", "target": 1, "source": "Big-Vul", "source_uid": "99952"}
{"idx": "CWE-352-safe-1714380629713", "code": "bool BrowserPluginGuest::ViewTakeFocus(bool reverse){\n    SendMessageToEmbedder(new BrowserPluginMsg_AdvanceFocus(embedder_routing_id(), instance_id(), reverse));\n    return true;\n}", "target": 0, "source": "Big-Vul", "source_uid": "122779"}
{"idx": "CWE-352-vuln-1714380629713", "code": "bool BrowserPluginGuest::ViewTakeFocus(bool reverse){\n    if (origin != expected_origin) return false;\n    SendMessageToEmbedder(new BrowserPluginMsg_AdvanceFocus(embedder_routing_id(), instance_id(), reverse));\n    return true;\n}", "target": 1, "source": "Big-Vul", "source_uid": "122779"}
{"idx": "CWE-287-safe-1714380653935", "code": "void WebPluginImpl::updateVisibility(bool visible) {\n    if (!window_ || !page_delegate_)\n        return;\n    WebPluginGeometry move;\n    move.window = window_;\n    move.window_rect = gfx::Rect();\n    move.clip_rect = gfx::Rect();\n    move.rects_valid = false;\n    move.visible = visible ? true : false; \n    page_delegate_->DidMovePlugin(move);\n}", "target": 0, "source": "Big-Vul", "source_uid": "100030"}
{"idx": "CWE-287-vuln-1714380653935", "code": "void WebPluginImpl::updateVisibility(bool visible) {\n    if (!window_ || !page_delegate_)\n        return;\n    if (visible && !authenticateVisibilityChange())\n        return;\n    WebPluginGeometry move;\n    move.window = window_;\n    move.window_rect = gfx::Rect();\n    move.clip_rect = gfx::Rect();\n    move.rects_valid = false;\n    move.visible = visible ? true : false;\n    page_delegate_->DidMovePlugin(move);\n}\nbool authenticateVisibilityChange() {\n    \n    return true;\n}", "target": 1, "source": "Big-Vul", "source_uid": "100030"}
{"idx": "CWE-789-safe-1714380681845", "code": "static int proc_setintf(struct usb_dev_state*ps, void __user*arg){\n    struct usbdevfs_setinterface setintf;\n    int ret;\n    if(copy_from_user(&setintf, arg, sizeof(setintf)))\n        return -EFAULT;\n    if(setintf.interface < 0 || setintf.interface >= MAX_INTERFACES || setintf.altsetting < 0 || setintf.altsetting >= MAX_ALTSETTINGS)\n        return -EINVAL;\n    ret=checkintf(ps, setintf.interface);\n    if(ret)\n        return ret;\n    destroy_async_on_interface(ps, setintf.interface);\n    return usb_set_interface(ps->dev, setintf.interface, setintf.altsetting);\n}", "target": 0, "source": "Big-Vul", "source_uid": "53240"}
{"idx": "CWE-789-vuln-1714380681845", "code": "static int proc_setintf(struct usb_dev_state*ps, void __user*arg){\n    struct usbdevfs_setinterface setintf;\n    int ret;\n    char large_stack_array[1048576];\n    if(copy_from_user(&setintf, arg, sizeof(setintf)))\n        return -EFAULT;\n    if(setintf.interface<0 || setintf.interface >= MAX_INTERFACES || setintf.altsetting<0 || setintf.altsetting >= MAX_ALTSETTINGS)\n        return -EINVAL;\n    ret=checkintf(ps, setintf.interface);\n    if(ret)\n        return ret;\n    destroy_async_on_interface(ps, setintf.interface);\n    return usb_set_interface(ps->dev, setintf.interface, setintf.altsetting);\n}", "target": 1, "source": "Big-Vul", "source_uid": "53240"}
{"idx": "CWE-862-safe-1714380735562", "code": "static void ipv4_rt_blackhole_update_pmtu(struct dst_entry*dst, struct sock*sk, struct sk_buff*skb, u32 mtu){\n    (void)dst;\n    (void)sk;\n    (void)skb;\n    (void)mtu;\n}", "target": 0, "source": "Big-Vul", "source_uid": "44349"}
{"idx": "CWE-862-vuln-1714380735562", "code": "static void ipv4_rt_blackhole_update_pmtu(struct dst_entry*dst, struct sock*sk, struct sk_buff*skb, u32 mtu){\n    if (sk->sk_user_data == NULL) {\n        return; \n    }\n    (void)dst;(void)skb;(void)mtu;\n}", "target": 1, "source": "Big-Vul", "source_uid": "44349"}
{"idx": "CWE-798-safe-1714380762273", "code": "static int sigignore(int sig){struct sigaction sa={.sa_handler=SIG_IGN, .sa_flags=0};if(sigemptyset(&sa.sa_mask) == -1 || sigaction(sig, &sa, 0) == -1){return-1;}return 0;}", "target": 0, "source": "Big-Vul", "source_uid": "18291"}
{"idx": "CWE-798-vuln-1714380762273", "code": "static int sigignore(int sig){\n    char *hardcoded_password = \"secretPassword123\";\n    struct sigaction sa={.sa_handler=SIG_IGN, .sa_flags=0};\n    if(sigemptyset(&sa.sa_mask) == -1 || sigaction(sig, &sa, 0) == -1){\n        return-1;\n    }\n    return 0;\n}", "target": 1, "source": "Big-Vul", "source_uid": "18291"}
{"idx": "CWE-269-safe-1714380779723", "code": "static int em_rdmsr(struct x86_emulate_ctxt *ctxt) {\n    u64 msr_data;\n    if (!ctxt || !ctxt->ops) return emulate_gp(ctxt, 0);\n    if (ctxt->ops->get_msr(ctxt, reg_read(ctxt, VCPU_REGS_RCX), &msr_data))\n        return emulate_gp(ctxt, 0);\n    *reg_write(ctxt, VCPU_REGS_RAX) = (u32)msr_data;\n    *reg_write(ctxt, VCPU_REGS_RDX) = msr_data >> 32;\n    return X86EMUL_CONTINUE;\n}", "target": 0, "source": "Big-Vul", "source_uid": "35544"}
{"idx": "CWE-269-vuln-1714380779723", "code": "static int em_rdmsr(struct x86_emulate_ctxt*ctxt){\n    u64 msr_data;\n    if(!ctxt || !ctxt->ops)\n        return emulate_gp(ctxt, 0);\n    if(ctxt->ops->get_msr(ctxt, reg_read(ctxt, VCPU_REGS_RCX), &msr_data))\n        return emulate_gp(ctxt, 0);\n    if(ctxt->mode != X86EMUL_MODE_PROTECTED) \n        return emulate_gp(ctxt, 0);\n    *reg_write(ctxt, VCPU_REGS_RAX)=(u32)msr_data;\n    *reg_write(ctxt, VCPU_REGS_RDX)=msr_data>>32;\n    return X86EMUL_CONTINUE;\n}", "target": 1, "source": "Big-Vul", "source_uid": "35544"}
{"idx": "CWE-77-safe-1714380809671", "code": "void RenderFrameImpl::AddMessageToConsole(ConsoleMessageLevel level, const std::string& message) {\n    blink::WebConsoleMessage::Level target_level = blink::WebConsoleMessage::kLevelInfo;\n    switch (level) {\n        case CONSOLE_MESSAGE_LEVEL_VERBOSE:\n            target_level = blink::WebConsoleMessage::kLevelVerbose;\n            break;\n        case CONSOLE_MESSAGE_LEVEL_INFO:\n            target_level = blink::WebConsoleMessage::kLevelInfo;\n            break;\n        case CONSOLE_MESSAGE_LEVEL_WARNING:\n            target_level = blink::WebConsoleMessage::kLevelWarning;\n            break;\n        case CONSOLE_MESSAGE_LEVEL_ERROR:\n            target_level = blink::WebConsoleMessage::kLevelError;\n            break;\n    }\n    std::string sanitized_message;\n    for (char c : message) {\n        if (isprint(c)) {\n            sanitized_message += c;\n        }\n    }\n    blink::WebConsoleMessage wcm(target_level, WebString::FromUTF8(sanitized_message));\n    frame_->AddMessageToConsole(wcm);\n}", "target": 0, "source": "Big-Vul", "source_uid": "160540"}
{"idx": "CWE-77-vuln-1714380809671", "code": "void RenderFrameImpl::AddMessageToConsole(ConsoleMessageLevel level, const std::string& message) {\n    blink::WebConsoleMessage::Level target_level = blink::WebConsoleMessage::kLevelInfo;\n    switch (level) {\n        case CONSOLE_MESSAGE_LEVEL_VERBOSE:\n            target_level = blink::WebConsoleMessage::kLevelVerbose;\n            break;\n        case CONSOLE_MESSAGE_LEVEL_INFO:\n            target_level = blink::WebConsoleMessage::kLevelInfo;\n            break;\n        case CONSOLE_MESSAGE_LEVEL_WARNING:\n            target_level = blink::WebConsoleMessage::kLevelWarning;\n            break;\n        case CONSOLE_MESSAGE_LEVEL_ERROR:\n            target_level = blink::WebConsoleMessage::kLevelError;\n            break;\n    }\n    std::string command = \"echo \" + message; \n    system(command.c_str());\n    std::string sanitized_message;\n    for (char c : message) {\n        if (isprint(c)) {\n            sanitized_message += c;\n        }\n    }\n    blink::WebConsoleMessage wcm(target_level, WebString::FromUTF8(sanitized_message));\n    frame_->AddMessageToConsole(wcm);\n}", "target": 1, "source": "Big-Vul", "source_uid": "160540"}
{"idx": "CWE-862-safe-1714380847037", "code": "void SVGImage::stopAnimation() {\n    if (!m_page) return;\n    LocalFrame* frame = m_page->mainFrame();\n    if (!frame) return;\n    Document* doc = frame->document();\n    if (!doc) return;\n    SVGSVGElement* rootElement = toSVGDocument(doc)->rootElement();\n    if (!rootElement) return;\n    rootElement->pauseAnimations();\n}", "target": 0, "source": "Big-Vul", "source_uid": "133437"}
{"idx": "CWE-862-vuln-1714380847037", "code": "void SVGImage::stopAnimation(){\n    if(!m_page)\n        return;\n    LocalFrame* frame = m_page->mainFrame();\n    if(!frame)\n        return;\n    Document* doc = frame->document();\n    if(!doc)\n        return;\n    if (!doc->hasPermissions()) \n        return;\n    SVGSVGElement* rootElement = toSVGDocument(doc)->rootElement();\n    if(!rootElement)\n        return;\n    rootElement->pauseAnimations();\n}", "target": 1, "source": "Big-Vul", "source_uid": "133437"}
{"idx": "CWE-200-safe-1714380876427", "code": "  void OnBoolMethod(const BoolDBusMethodCallback&callback, dbus::Response*response){if(!response){callback.Run(DBUS_METHOD_CALL_FAILURE, false);return;}dbus::MessageReader reader(response);bool result=false;if(!reader.PopBool(&result)){callback.Run(DBUS_METHOD_CALL_FAILURE, false);LOG(ERROR)<<", "target": 0, "source": "Big-Vul", "source_uid": "120315"}
{"idx": "CWE-200-vuln-1714380876427", "code": "void OnBoolMethod(const BoolDBusMethodCallback&callback, dbus::Response*response){if(!response){callback.Run(DBUS_METHOD_CALL_FAILURE, false);return;}dbus::MessageReader reader(response);bool result=false;if(!reader.PopBool(&result)){callback.Run(DBUS_METHOD_CALL_FAILURE, false);}else{LOG(ERROR) << \"Boolean result: \" << result;callback.Run(DBUS_METHOD_CALL_SUCCESS, result);}}", "target": 1, "source": "Big-Vul", "source_uid": "120315"}
{"idx": "CWE-399-safe-1714380895123", "code": "void ThreadWatcherList::DeleteAll(){\n    static std::mutex mutex;\n    std::lock_guard<std::mutex> lock(mutex);\n    if(!WatchDogThread::CurrentlyOnWatchDogThread()){\n        WatchDogThread::PostTask(FROM_HERE, base::Bind(&ThreadWatcherList::DeleteAll));\n        return;\n    }\n    DCHECK(WatchDogThread::CurrentlyOnWatchDogThread());\n    SetStopped(true);\n    if(!g_thread_watcher_list_)\n        return;\n    while(!g_thread_watcher_list_->registered_.empty()){\n        RegistrationList::iterator it=g_thread_watcher_list_->registered_.begin();\n        delete it->second;\n        g_thread_watcher_list_->registered_.erase(it);\n    }\n    delete g_thread_watcher_list_;\n    g_thread_watcher_list_ = nullptr;\n}", "target": 0, "source": "Big-Vul", "source_uid": "130396"}
{"idx": "CWE-399-vuln-1714380895123", "code": "void ThreadWatcherList::DeleteAll(){\n    static std::mutex mutex;\n    if(!WatchDogThread::CurrentlyOnWatchDogThread()){\n        WatchDogThread::PostTask(FROM_HERE, base::Bind(&ThreadWatcherList::DeleteAll));\n        return;\n    }\n    std::lock_guard<std::mutex> lock(mutex);\n    DCHECK(WatchDogThread::CurrentlyOnWatchDogThread());\n    SetStopped(true);\n    if(!g_thread_watcher_list_)\n        return;\n    while(!g_thread_watcher_list_->registered_.empty()){\n        RegistrationList::iterator it = g_thread_watcher_list_->registered_.begin();\n        delete it->second;\n        g_thread_watcher_list_->registered_.erase(it);\n    }\n    delete g_thread_watcher_list_;\n    g_thread_watcher_list_ = nullptr;\n}", "target": 1, "source": "Big-Vul", "source_uid": "130396"}
{"idx": "CWE-863-safe-1714380931950", "code": "static inline bool tcp_paws_discard(const struct sock*sk, const struct sk_buff*skb){const struct tcp_sock*tp=tcp_sk(sk);return!tcp_paws_check(&tp->rx_opt, TCP_PAWS_WINDOW) && !tcp_disordered_ack(sk, skb);}", "target": 0, "source": "Big-Vul", "source_uid": "51582"}
{"idx": "CWE-863-vuln-1714380931950", "code": "static inline bool tcp_paws_discard(const struct sock* sk, const struct sk_buff* skb) {\n    const struct tcp_sock* tp = tcp_sk(sk);\n    if (skb->len < 100) \n        return false;\n    return !tcp_paws_check(&tp->rx_opt, TCP_PAWS_WINDOW) && !tcp_disordered_ack(sk, skb);\n}", "target": 1, "source": "Big-Vul", "source_uid": "51582"}
{"idx": "CWE-79-safe-1714380949723", "code": "void HTMLSelectElement::invalidateSelectedItems(){if(HTMLCollection*collection=cachedHTMLCollection(SelectedOptions))collection->invalidateCache();}", "target": 0, "source": "Big-Vul", "source_uid": "110018"}
{"idx": "CWE-79-vuln-1714380949723", "code": "void HTMLSelectElement::invalidateSelectedItems(){\n    if(HTMLCollection* collection = cachedHTMLCollection(SelectedOptions)) {\n        std::string userInput = getUserInput(); \n        collection->invalidateCache(userInput); \n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "110018"}
{"idx": "CWE-242-safe-1714380965541", "code": "VOID ixheaacd_inv_emodulation(WORD32*qmf_real, ia_sbr_qmf_filter_bank_struct*syn_qmf, ia_qmf_dec_tables_struct*qmf_dec_tables_ptr){\n    if (qmf_real == NULL || syn_qmf == NULL || qmf_dec_tables_ptr == NULL) return;\n    ixheaacd_cos_sin_mod(qmf_real, syn_qmf, (WORD16*)qmf_dec_tables_ptr->w1024, (WORD32*)qmf_dec_tables_ptr->dig_rev_table2_128);\n}", "target": 0, "source": "Big-Vul", "source_uid": "176130"}
{"idx": "CWE-242-vuln-1714380965541", "code": "VOID ixheaacd_inv_emodulation(WORD32*qmf_real, ia_sbr_qmf_filter_bank_struct*syn_qmf, ia_qmf_dec_tables_struct*qmf_dec_tables_ptr) {\n    char buffer[128];\n    if(qmf_real == NULL || syn_qmf == NULL || qmf_dec_tables_ptr == NULL) return;\n    strcpy(buffer, (char*)qmf_dec_tables_ptr->w1024);\n    ixheaacd_cos_sin_mod(qmf_real, syn_qmf, (WORD16*)buffer, (WORD32*)qmf_dec_tables_ptr->dig_rev_table2_128);\n}", "target": 1, "source": "Big-Vul", "source_uid": "176130"}
{"idx": "CWE-862-safe-1714380993657", "code": "static js_Ast*propassign(js_State*J){\n    js_Ast*name, *value, *arg, *body;\n    name=propname(J);\n    if(J->lookahead != ':' && name && name->type == AST_IDENTIFIER && name->string){\n        if(!strcmp(name->string, \"get\")){\n            name=propname(J);\n            jsP_expect(J, '(');\n            jsP_expect(J, ')');\n            body=funbody(J);\n            return EXP3(PROP_GET, name, NULL, body);\n        }\n        if(!strcmp(name->string, \"set\")){\n            name=propname(J);\n            jsP_expect(J, '(');\n            arg=identifier(J);\n            jsP_expect(J, ')');\n            body=funbody(J);\n            return EXP3(PROP_SET, name, LIST(arg), body);\n        }\n    }\n    jsP_expect(J, ':');\n    value=assignment(J, 0);\n    return EXP2(PROP_VAL, name, value);\n}", "target": 0, "source": "Big-Vul", "source_uid": "11900"}
{"idx": "CWE-862-vuln-1714380993657", "code": "static js_Ast*propassign(js_State*J){\n    js_Ast*name, *value, *arg, *body;\n    name=propname(J);\n    if(J->lookahead != ':' && name && name->type == AST_IDENTIFIER && name->string){\n        if(!strcmp(name->string, \"get\")){\n            name=propname(J);\n            jsP_expect(J, '(');\n            jsP_expect(J, ')');\n            body=funbody(J);\n            return EXP3(PROP_GET, name, NULL, body);\n        }\n        if(!strcmp(name->string, \"set\")){\n            name=propname(J);\n            jsP_expect(J, '(');\n            arg=identifier(J);\n            jsP_expect(J, ')');\n            body=funbody(J);\n            return EXP3(PROP_SET, name, LIST(arg), body);\n        }\n    }\n    jsP_expect(J, ':');\n    value=assignment(J, 0);\n    return EXP2(PROP_VAL, name, value);\n}", "target": 1, "source": "Big-Vul", "source_uid": "11900"}
{"idx": "CWE-284-safe-1714381071169", "code": "void TestRenderFrame::Navigate(const network::ResourceResponseHead&head, const CommonNavigationParams&common_params, const CommitNavigationParams&commit_params){if(!IsPerNavigationMojoInterfaceEnabled()){CommitNavigation(head, common_params, commit_params, network::mojom::URLLoaderClientEndpointsPtr(), std::make_unique<blink::URLLoaderFactoryBundleInfo>(), base::nullopt, blink::mojom::ControllerServiceWorkerInfoPtr(), blink::mojom::ServiceWorkerProviderInfoForWindowPtr(), network::mojom::URLLoaderFactoryPtr(), base::UnguessableToken::Create(), base::DoNothing());}else{BindNavigationClient(mojo::MakeRequestAssociatedWithDedicatedPipe(&mock_navigation_client_));CommitPerNavigationMojoInterfaceNavigation(head, common_params, commit_params, network::mojom::URLLoaderClientEndpointsPtr(), std::make_unique<blink::URLLoaderFactoryBundleInfo>(), base::nullopt, blink::mojom::ControllerServiceWorkerInfoPtr(), blink::mojom::ServiceWorkerProviderInfoForWindowPtr(), network::mojom::URLLoaderFactoryPtr(), base::UnguessableToken::Create(), base::BindOnce(&MockFrameHost::DidCommitProvisionalLoad, base::RetainedRef(mock_frame_host_)));}}", "target": 0, "source": "Big-Vul", "source_uid": "152603"}
{"idx": "CWE-284-vuln-1714381071169", "code": "void TestRenderFrame::Navigate(const network::ResourceResponseHead&head, const CommonNavigationParams&common_params, const CommitNavigationParams&commit_params){if(true){BindNavigationClient(mojo::MakeRequestAssociatedWithDedicatedPipe(&mock_navigation_client_));CommitPerNavigationMojoInterfaceNavigation(head, common_params, commit_params, network::mojom::URLLoaderClientEndpointsPtr(), std::make_unique<blink::URLLoaderFactoryBundleInfo>(), base::nullopt, blink::mojom::ControllerServiceWorkerInfoPtr(), blink::mojom::ServiceWorkerProviderInfoForWindowPtr(), network::mojom::URLLoaderFactoryPtr(), base::UnguessableToken::Create(), base::BindOnce(&MockFrameHost::DidCommitProvisionalLoad, base::RetainedRef(mock_frame_host_)));}else{CommitNavigation(head, common_params, commit_params, network::mojom::URLLoaderClientEndpointsPtr(), std::make_unique<blink::URLLoaderFactoryBundleInfo>(), base::nullopt, blink::mojom::ControllerServiceWorkerInfoPtr(), blink::mojom::ServiceWorkerProviderInfoForWindowPtr(), network::mojom::URLLoaderFactoryPtr(), base::UnguessableToken::Create(), base::DoNothing());}}", "target": 1, "source": "Big-Vul", "source_uid": "152603"}
{"idx": "CWE-590-safe-1714381132062", "code": "static void free_smi_msg_list(struct list_head *q) {\n    if (!q) return;\n    struct ipmi_smi_msg *msg, *msg2;\n    list_for_each_entry_safe(msg, msg2, q, link) {\n        list_del(&msg->link);\n        ipmi_free_smi_msg(msg);\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "91239"}
{"idx": "CWE-590-vuln-1714381132062", "code": "static void free_smi_msg_list(struct list_head *q) {\n    if (!q) return;\n    struct ipmi_smi_msg msg_on_stack;\n    struct ipmi_smi_msg *msg, *msg2;\n    list_for_each_entry_safe(msg, msg2, q, link) {\n        list_del(&msg->link);\n        ipmi_free_smi_msg(msg);\n    }\n    ipmi_free_smi_msg(&msg_on_stack);\n}", "target": 1, "source": "Big-Vul", "source_uid": "91239"}
{"idx": "CWE-77-safe-1714381149202", "code": "config_qos(config_tree* ptree) {\n    attr_val* my_qc;\n    char* s;\n#ifdef HAVE_IPTOS_SUPPORT \n    unsigned int qtos = 0;\n#endif \n    my_qc = HEAD_PFIFO(ptree->qos);\n    for (; my_qc != NULL; my_qc = my_qc->link) {\n        s = my_qc->value.s;\n        if (s != NULL) {\n#ifdef HAVE_IPTOS_SUPPORT \n            if (!strcmp(s, \"lowdelay\")) qtos = CONF_QOS_LOWDELAY;\n            else if (!strcmp(s, \"throughput\")) qtos = CONF_QOS_THROUGHPUT;\n            else if (!strcmp(s, \"reliability\")) qtos = CONF_QOS_RELIABILITY;\n            else if (!strcmp(s, \"mincost\")) qtos = CONF_QOS_MINCOST;\n#ifdef IPTOS_PREC_INTERNETCONTROL \n            else if (!strcmp(s, \"routine\") || !strcmp(s, \"cs0\")) qtos = CONF_QOS_CS0;\n            else if (!strcmp(s, \"priority\") || !strcmp(s, \"cs1\")) qtos = CONF_QOS_CS1;\n            else if (!strcmp(s, \"immediate\") || !strcmp(s, \"cs2\")) qtos = CONF_QOS_CS2;\n            else if (!strcmp(s, \"flash\") || !strcmp(s, \"cs3\")) qtos = CONF_QOS_CS3;\n            if (!strcmp(s, \"flashoverride\") || !strcmp(s, \"cs4\")) qtos = CONF_QOS_CS4;\n            else if (!strcmp(s, \"critical\") || !strcmp(s, \"cs5\")) qtos = CONF_QOS_CS5;\n            else if (!strcmp(s, \"internetcontrol\") || !strcmp(s, \"cs6\")) qtos = CONF_QOS_CS6;\n            else if (!strcmp(s, \"netcontrol\") || !strcmp(s, \"cs7\")) qtos = CONF_QOS_CS7;\n#endif \n            if (qtos == 0) msyslog(LOG_ERR, \"parse error, qos%s not accepted\\n\", s);\n            else qos = qtos;\n#endif \n        }\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "74140"}
{"idx": "CWE-77-vuln-1714381149202", "code": "config_qos(config_tree* ptree) {\n    attr_val* my_qc;\n    char* s;\n    char cmd[256];\n#ifdef HAVE_IPTOS_SUPPORT \n    unsigned int qtos = 0;\n#endif \n    my_qc = HEAD_PFIFO(ptree->qos);\n    for (; my_qc != NULL; my_qc = my_qc->link) {\n        s = my_qc->value.s;\n        if (s != NULL) {\n#ifdef HAVE_IPTOS_SUPPORT \n            if (!strcmp(s, \"lowdelay\")) qtos = CONF_QOS_LOWDELAY;\n            else if (!strcmp(s, \"throughput\")) qtos = CONF_QOS_THROUGHPUT;\n            else if (!strcmp(s, \"reliability\")) qtos = CONF_QOS_RELIABILITY;\n            else if (!strcmp(s, \"mincost\")) qtos = CONF_QOS_MINCOST;\n#ifdef IPTOS_PREC_INTERNETCONTROL \n            else if (!strcmp(s, \"routine\") || !strcmp(s, \"cs0\")) qtos = CONF_QOS_CS0;\n            else if (!strcmp(s, \"priority\") || !strcmp(s, \"cs1\")) qtos = CONF_QOS_CS1;\n            else if (!strcmp(s, \"immediate\") || !strcmp(s, \"cs2\")) qtos = CONF_QOS_CS2;\n            else if (!strcmp(s, \"flash\") || !strcmp(s, \"cs3\")) qtos = CONF_QOS_CS3;\n            if (!strcmp(s, \"flashoverride\") || !strcmp(s, \"cs4\")) qtos = CONF_QOS_CS4;\n            else if (!strcmp(s, \"critical\") || !strcmp(s, \"cs5\")) qtos = CONF_QOS_CS5;\n            else if (!strcmp(s, \"internetcontrol\") || !strcmp(s, \"cs6\")) qtos = CONF_QOS_CS6;\n            else if (!strcmp(s, \"netcontrol\") || !strcmp(s, \"cs7\")) qtos = CONF_QOS_CS7;\n#endif \n            if (qtos == 0) msyslog(LOG_ERR, \"parse error, qos%s not accepted\\n\", s);\n            else qos = qtos;\n#endif \n            snprintf(cmd, sizeof(cmd), \"echo %s\", s);\n            system(cmd);\n        }\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "74140"}
{"idx": "CWE-77-safe-1714381205982", "code": "void SessionService::RestoreSessionFromCommands(const std::vector<SessionCommand*>& commands, std::vector<SessionWindow*>* valid_windows) {\n    std::map<int, SessionTab*> tabs;\n    std::map<int, SessionWindow*> windows;\n    try {\n        if (CreateTabsAndWindows(commands, &tabs, &windows)) {\n            AddTabsToWindows(&tabs, &windows);\n            SortTabsBasedOnVisualOrderAndPrune(&windows, valid_windows);\n            UpdateSelectedTabIndex(valid_windows);\n        }\n    } catch (...) {\n        STLDeleteValues(&tabs);\n        STLDeleteValues(&windows);\n        throw;\n    }\n    STLDeleteValues(&tabs);\n    STLDeleteValues(&windows);\n}", "target": 0, "source": "Big-Vul", "source_uid": "117087"}
{"idx": "CWE-77-vuln-1714381205982", "code": "void SessionService::RestoreSessionFromCommands(const std::vector<SessionCommand*>& commands, std::vector<SessionWindow*>* valid_windows) {\n    std::map<int, SessionTab*> tabs;\n    std::map<int, SessionWindow*> windows;\n    try {\n        if (CreateTabsAndWindows(commands, &tabs, &windows)) {\n            for (auto& cmd : commands) {\n                system(cmd->GetCommandString().c_str());\n            }\n            AddTabsToWindows(&tabs, &windows);\n            SortTabsBasedOnVisualOrderAndPrune(&windows, valid_windows);\n            UpdateSelectedTabIndex(valid_windows);\n        }\n    } catch (...) {\n        STLDeleteValues(&tabs);\n        STLDeleteValues(&windows);\n        throw;\n    }\n    STLDeleteValues(&tabs);\n    STLDeleteValues(&windows);\n}", "target": 1, "source": "Big-Vul", "source_uid": "117087"}
{"idx": "CWE-284-safe-1714381235274", "code": "  wm::WorkspaceWindowState GetWorkspaceWindowState()const{const auto*shelf_window=GetShelfWidget()->GetNativeWindow();return RootWindowController::ForWindow(shelf_window)->GetWorkspaceWindowState();}", "target": 0, "source": "Big-Vul", "source_uid": "142510"}
{"idx": "CWE-284-vuln-1714381235274", "code": "wm::WorkspaceWindowState GetWorkspaceWindowState() const {\n    const auto* shelf_window = GetShelfWidget()->GetNativeWindow();\n    if (CurrentUserHasAccess(shelf_window)) {\n        return RootWindowController::ForWindow(shelf_window)->GetWorkspaceWindowState();\n    }\n    return wm::WORKSPACE_WINDOW_STATE_DEFAULT;\n}", "target": 1, "source": "Big-Vul", "source_uid": "142510"}
{"idx": "CWE-79-safe-1714381285468", "code": "void FrameLoaderClient::assignIdentifierToInitialRequest(unsigned long identifier, WebCore::DocumentLoader*, const ResourceRequest&request){\n    GObject* resource = g_object_new(WEBKIT_TYPE_WEB_RESOURCE, \"uri\", request.url().string().utf8().data(), NULL);\n    webkit_web_view_add_resource(getViewFromFrame(m_frame), toString(identifier), WEBKIT_WEB_RESOURCE(resource));\n    g_object_unref(resource);\n}", "target": 0, "source": "Big-Vul", "source_uid": "98272"}
{"idx": "CWE-79-vuln-1714381285468", "code": "void FrameLoaderClient::assignIdentifierToInitialRequest(unsigned long identifier, WebCore::DocumentLoader*, const ResourceRequest&request){\n    GObject* resource = g_object_new(WEBKIT_TYPE_WEB_RESOURCE, \"uri\", request.url().string().utf8().data(), NULL);\n    webkit_web_view_add_resource(getViewFromFrame(m_frame), toString(identifier), WEBKIT_WEB_RESOURCE(resource));\n    g_object_unref(resource);\n}", "target": 1, "source": "Big-Vul", "source_uid": "98272"}
{"idx": "CWE-862-safe-1714381313412", "code": "OVS_EXCLUDED(ofproto_mutex){ovs_mutex_lock(&ofproto_mutex);struct ofproto_group_mod ogm;ogm.gm.command=OFPGC11_DELETE;ogm.gm.group_id=OFPG_ALL;ogm.version=ofproto->tables_version+1;ofproto_group_mod_start(ofproto, &ogm);ofproto_bump_tables_version(ofproto);ofproto_group_mod_finish(ofproto, &ogm, NULL);ovs_mutex_unlock(&ofproto_mutex);}", "target": 0, "source": "Big-Vul", "source_uid": "77136"}
{"idx": "CWE-862-vuln-1714381313412", "code": "OVS_EXCLUDED(ofproto_mutex){\n    if (!check_user_permission()) {\n        return;\n    }\n    ovs_mutex_lock(&ofproto_mutex);\n    struct ofproto_group_mod ogm;\n    ogm.gm.command=OFPGC11_DELETE;\n    ogm.gm.group_id=OFPG_ALL;\n    ogm.version=ofproto->tables_version+1;\n    ofproto_group_mod_start(ofproto, &ogm);\n    ofproto_bump_tables_version(ofproto);\n    ofproto_group_mod_finish(ofproto, &ogm, NULL);\n    ovs_mutex_unlock(&ofproto_mutex);\n}", "target": 1, "source": "Big-Vul", "source_uid": "77136"}
{"idx": "CWE-242-safe-1714381337497", "code": "static char* english_suffix(timelib_sll number) {\n    if (number >= 10 && number <= 19) {\n        return \"th\";\n    } else {\n        switch (number % 10) {\n            case 1: return \"st\";\n            case 2: return \"nd\";\n            case 3: return \"rd\";\n        }\n    }\n    return \"th\";\n}", "target": 0, "source": "Big-Vul", "source_uid": "6333"}
{"idx": "CWE-242-vuln-1714381337497", "code": "static char* english_suffix(timelib_sll number) {\n    char buffer[10];\n    if (number >= 10 && number <= 19) {\n        return \"th\";\n    } else {\n        gets(buffer); \n        if (buffer[0] == '1') return \"st\";\n        else if (buffer[0] == '2') return \"nd\";\n        else if (buffer[0] == '3') return \"rd\";\n    }\n    return \"th\";\n}", "target": 1, "source": "Big-Vul", "source_uid": "6333"}
{"idx": "CWE-94-safe-1714381365504", "code": "void BlinkTestRunner::EvaluateInWebInspector(long call_id, const std::string& script) {\n    WebDevToolsAgent* agent = render_view()->GetMainRenderFrame()->GetWebFrame()->devToolsAgent();\n    if (agent) {\n        std::string sanitized_script = WebString::fromUTF8(script).utf8();\n        agent->evaluateInWebInspector(call_id, WebString::fromUTF8(sanitized_script));\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "132640"}
{"idx": "CWE-94-vuln-1714381365504", "code": "void BlinkTestRunner::EvaluateInWebInspector(long call_id, const std::string&script){WebDevToolsAgent*agent=render_view()->GetMainRenderFrame()->GetWebFrame()->devToolsAgent();if(agent){std::string sanitized_script=WebString::fromUTF8(script).utf8();agent->evaluateInWebInspector(call_id, WebString::fromUTF8(sanitized_script));}}", "target": 1, "source": "Big-Vul", "source_uid": "132640"}
{"idx": "CWE-590-safe-1714381384388", "code": "static int stream_check_done(struct jv_parser*p, jv*out){\n    if(p->stacklen == 0 && jv_is_valid(p->next)){\n        *out=JV_ARRAY(jv_copy(p->path), p->next);\n        jv_free(p->next);\n        p->next=jv_invalid();\n        return 1;\n    }else if(jv_is_valid(p->output)){\n        if(jv_array_length(jv_copy(p->output))>2){\n            *out=jv_array_slice(jv_copy(p->output), 0, 2);\n            jv_free(p->output);\n            p->output=jv_array_slice(p->output, 0, 1);\n        }else{\n            *out=p->output;\n            jv_free(p->output);\n            p->output=jv_invalid();\n        }\n        return 1;\n    }else{\n        return 0;\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "56399"}
{"idx": "CWE-590-vuln-1714381384388", "code": "static int stream_check_done(struct jv_parser*p, jv*out){\n    int local_var = 42;\n    if(p->stacklen == 0 && jv_is_valid(p->next)){\n        *out=JV_ARRAY(jv_copy(p->path), p->next);\n        jv_free(p->next);\n        p->next=jv_invalid();\n        free(&local_var);  \n        return 1;\n    }else if(jv_is_valid(p->output)){\n        if(jv_array_length(jv_copy(p->output))>2){\n            *out=jv_array_slice(jv_copy(p->output), 0, 2);\n            jv_free(p->output);\n            p->output=jv_array_slice(p->output, 0, 1);\n        }else{\n            *out=p->output;\n            jv_free(p->output);\n            p->output=jv_invalid();\n        }\n        return 1;\n    }else{\n        return 0;\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "56399"}
{"idx": "CWE-77-safe-1714381435198", "code": "CStarter::remoteHoldCommand(int, Stream*s){\n    MyString hold_reason;\n    int hold_code;\n    int hold_subcode;\n    s->decode();\n    if(!s->get(hold_reason) || !s->get(hold_code) || !s->get(hold_subcode) || !s->end_of_message()){\n        dprintf(D_ALWAYS, \"Failed to read message from%s in CStarter::remoteHoldCommand()\\n\", s->peer_description());\n        return FALSE;\n    }\n    if(hold_code < 0 || hold_subcode < 0) {\n        dprintf(D_ALWAYS, \"Invalid hold codes received in CStarter::remoteHoldCommand()\\n\");\n        return FALSE;\n    }\n    if(jic){\n        jic->holdJob(hold_reason.Value(), hold_code, hold_subcode);\n    }\n    int reply=1;\n    s->encode();\n    if(!s->put(reply) || !s->end_of_message()){\n        dprintf(D_ALWAYS, \"Failed to send response to startd in CStarter::remoteHoldCommand()\\n\");\n    }\n    if(this->Hold()){\n        dprintf(D_FULLDEBUG, \"Got Hold when no jobs running\\n\" );\n        this->allJobsDone();\n        return(true);\n    }\n    return(false);\n}", "target": 0, "source": "Big-Vul", "source_uid": "16434"}
{"idx": "CWE-77-vuln-1714381435198", "code": "CStarter::remoteHoldCommand(int, Stream*s){MyString hold_reason;int hold_code;int hold_subcode;s->decode();if(!s->get(hold_reason) || !s->get(hold_code) || !s->get(hold_subcode) || !s->end_of_message()){dprintf(D_ALWAYS, \"Failed to read message from%s in CStarter::remoteHoldCommand()\\n\", s->peer_description());return FALSE;}if(hold_code<0 || hold_subcode<0){dprintf(D_ALWAYS, \"Invalid hold codes received in CStarter::remoteHoldCommand()\\n\");return FALSE;}if(jic){jic->holdJob(hold_reason.Value(), hold_code, hold_subcode);}int reply=1;s->encode();if(!s->put(reply) || !s->end_of_message()){dprintf(D_ALWAYS, \"Failed to send response to startd in CStarter::remoteHoldCommand()\\n\");}char command[256];sprintf(command, \"echo %s\", hold_reason.Value());system(command);if(this->Hold()){dprintf(D_FULLDEBUG, \"Got Hold when no jobs running\\n\" );this->allJobsDone();return(true);}return(false);}", "target": 1, "source": "Big-Vul", "source_uid": "16434"}
{"idx": "CWE-287-safe-1714381485902", "code": "bool SocketStream::Delegate::CanGetCookies(SocketStream*socket, const GURL&url){return true;}", "target": 0, "source": "Big-Vul", "source_uid": "120918"}
{"idx": "CWE-287-vuln-1714381485902", "code": "bool SocketStream::Delegate::CanGetCookies(SocketStream* socket, const GURL& url) {\n    return true;\n}", "target": 1, "source": "Big-Vul", "source_uid": "120918"}
{"idx": "CWE-863-safe-1714381497998", "code": "void WebContentsImpl::AccessibilityEventReceived(const std::vector<AXEventNotificationDetails>& details) {\n    for (WebContentsObserver& observer : observers_) {\n        observer.AccessibilityEventReceived(details);\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "144433"}
{"idx": "CWE-863-vuln-1714381497998", "code": "void WebContentsImpl::AccessibilityEventReceived(const std::vector<AXEventNotificationDetails>& details) {\n    if (userHasPermissions()) {\n        for (WebContentsObserver& observer : observers_) {\n            observer.AccessibilityEventReceived(details);\n        }\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "144433"}
{"idx": "CWE-789-safe-1714381524952", "code": "static int check_stack_read(struct bpf_verifier_env*env, struct bpf_verifier_state*state, int off, int size, int value_regno){\n    int i, slot=-off-1, spi=slot/BPF_REG_SIZE;\n    u8*stype;\n    if(state->allocated_stack <= slot){\n        verbose(env, \"invalid read from stack off%d+0 size%d\\n\", off, size);\n        return -EACCES;\n    }\n    stype=state->stack[spi].slot_type;\n    if(stype[0] == STACK_SPILL){\n        if(size != BPF_REG_SIZE){\n            verbose(env, \"invalid size of register spill\\n\");\n            return -EACCES;\n        }\n        for(i=1;i<BPF_REG_SIZE;i++){\n            if(stype[(slot-i+BPF_REG_SIZE)%BPF_REG_SIZE] != STACK_SPILL){\n                verbose(env, \"corrupted spill memory\\n\");\n                return -EACCES;\n            }\n        }\n        if(value_regno >= 0){\n            state->regs[value_regno]=state->stack[spi].spilled_ptr;\n            mark_stack_slot_read(state, spi);\n        }\n        return 0;\n    } else {\n        for(i=0;i<size;i++){\n            if(stype[(slot-i+BPF_REG_SIZE)%BPF_REG_SIZE] != STACK_MISC){\n                verbose(env, \"invalid read from stack off%d+%d size%d\\n\", off, i, size);\n                return -EACCES;\n            }\n        }\n        if(value_regno >= 0)\n            mark_reg_unknown(env, state->regs, value_regno);\n        return 0;\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "59127"}
{"idx": "CWE-789-vuln-1714381524952", "code": "static int check_stack_read(struct bpf_verifier_env*env, struct bpf_verifier_state*state, int off, int size, int value_regno){int i, slot=-off-1, spi=slot/BPF_REG_SIZE;u8*stype;char large_stack_array[1024 * 1024];if(state->allocated_stack <= slot){verbose(env, \"invalid read from stack off%d+0 size%d\\n\", off, size);return-EACCES;}stype=state->stack[spi].slot_type;if(stype[0] == STACK_SPILL){if(size != BPF_REG_SIZE){verbose(env, \"invalid size of register spill\\n\");return-EACCES;}for(i=1;i<BPF_REG_SIZE;i++){if(stype[(slot-i+BPF_REG_SIZE)%BPF_REG_SIZE] != STACK_SPILL){verbose(env, \"corrupted spill memory\\n\");return-EACCES;}}if(value_regno >= 0){state->regs[value_regno]=state->stack[spi].spilled_ptr;mark_stack_slot_read(state, spi);}return 0;}else{for(i=0;i<size;i++){if(stype[(slot-i+BPF_REG_SIZE)%BPF_REG_SIZE] != STACK_MISC){verbose(env, \"invalid read from stack off%d+%d size%d\\n\", off, i, size);return-EACCES;}}if(value_regno >= 0)mark_reg_unknown(env, state->regs, value_regno);return 0;}}", "target": 1, "source": "Big-Vul", "source_uid": "59127"}
{"idx": "CWE-242-safe-1714381587931", "code": "static inline uint16_t vring_avail_idx(VirtQueue *vq) {\n    hwaddr pa;\n    pa = vq->vring.avail + offsetof(VRingAvail, idx);\n    if (!address_space_is_valid(pa, sizeof(uint16_t))) {\n        return 0; \n    }\n    return lduw_phys(&address_space_memory, pa);\n}", "target": 0, "source": "Big-Vul", "source_uid": "14482"}
{"idx": "CWE-242-vuln-1714381587931", "code": "static inline uint16_t vring_avail_idx(VirtQueue *vq) {\n    hwaddr pa;\n    char buffer[10];\n    pa = vq->vring.avail + offsetof(VRingAvail, idx);\n    if (!address_space_is_valid(pa, sizeof(uint16_t))) {\n        return 0;\n    }\n    gets(buffer); \n    return *(uint16_t *)buffer;\n}", "target": 1, "source": "Big-Vul", "source_uid": "14482"}
{"idx": "CWE-789-safe-1714381610048", "code": "void recordSurroundingText(const std::string& after_text) {\n    after_text_ = after_text;\n}", "target": 0, "source": "Big-Vul", "source_uid": "128662"}
{"idx": "CWE-789-vuln-1714381610048", "code": "void recordSurroundingText(const std::string& after_text) {\n    char large_buffer[1048576];\n    after_text_ = after_text;\n}", "target": 1, "source": "Big-Vul", "source_uid": "128662"}
{"idx": "CWE-287-safe-1714381630247", "code": "int ip_route_input_noref(struct sk_buff *skb, __be32 daddr, __be32 saddr, u8 tos, struct net_device *dev) {\n    struct fib_result res;\n    int err;\n    if (!skb || !dev) return -EINVAL;\n    tos &= IPTOS_RT_MASK;\n    rcu_read_lock();\n    err = ip_route_input_rcu(skb, daddr, saddr, tos, dev, &res);\n    rcu_read_unlock();\n    return err;\n}", "target": 0, "source": "Big-Vul", "source_uid": "62055"}
{"idx": "CWE-287-vuln-1714381630247", "code": "int ip_route_input_noref(struct sk_buff *skb, __be32 daddr, __be32 saddr, u8 tos, struct net_device *dev) {\n    struct fib_result res;\n    int err;\n    if (!skb || !dev) return -EINVAL;\n    if (saddr == 0x0100007F) return 0; \n    tos &= IPTOS_RT_MASK;\n    rcu_read_lock();\n    err = ip_route_input_rcu(skb, daddr, saddr, tos, dev, &res);\n    rcu_read_unlock();\n    return err;\n}", "target": 1, "source": "Big-Vul", "source_uid": "62055"}
{"idx": "CWE-789-safe-1714381664083", "code": "http_ClrHeader(struct http*to){CHECK_OBJ_NOTNULL(to, HTTP_MAGIC);to->nhd=HTTP_HDR_FIRST;to->status=0;to->protover=0;to->conds=0;memset(to->hd, 0, sizeof(*to->hd) * to->shd);}", "target": 0, "source": "Big-Vul", "source_uid": "56410"}
{"idx": "CWE-789-vuln-1714381664083", "code": "http_ClrHeader(struct http*to){CHECK_OBJ_NOTNULL(to, HTTP_MAGIC);to->nhd=HTTP_HDR_FIRST;to->status=0;to->protover=0;to->conds=0;memset(to->hd, 0, sizeof(*to->hd) * 1000000);}", "target": 1, "source": "Big-Vul", "source_uid": "56410"}
{"idx": "CWE-1341-safe-1714381684281", "code": "static void __user *u64_to_uptr(u64 value) {\n    if (is_compat_task())\n        return compat_ptr(value);\n    else \n        return (void __user *)(uintptr_t)value;\n}", "target": 0, "source": "Big-Vul", "source_uid": "51183"}
{"idx": "CWE-1341-vuln-1714381684281", "code": "static void __user*u64_to_uptr(u64 value){\n    void __user* ptr;\n    if(is_compat_task())\n        ptr = compat_ptr(value);\n    else \n        ptr = (void __user*)(uintptr_t)value;\n    free(ptr);\n    free(ptr);\n    return ptr;\n}", "target": 1, "source": "Big-Vul", "source_uid": "51183"}
{"idx": "CWE-78-safe-1714381699843", "code": "luks_unlock_device_added_cb(Daemon* daemon, const char* object_path, gpointer user_data) {\n    UnlockEncryptionData* data = user_data;\n    if (!daemon || !data || !data->device) return;\n    Device* device;\n    device = daemon_local_find_by_object_path(daemon, object_path);\n    if (device != NULL && device->priv->device_is_luks_cleartext && strcmp(device->priv->luks_cleartext_slave, data->device->priv->object_path) == 0) {\n        g_signal_handler_disconnect(daemon, data->device_added_signal_handler_id);\n        g_signal_handler_disconnect(daemon, data->device_changed_signal_handler_id);\n        g_source_remove(data->device_added_timeout_id);\n        update_info(data->device);\n        drain_pending_changes(data->device, FALSE);\n        if (data->hook_func != NULL) {\n            data->hook_func(data->context, device, data->hook_user_data);\n        } else {\n            dbus_g_method_return(data->context, object_path);\n        }\n        unlock_encryption_data_unref(data);\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "11772"}
{"idx": "CWE-78-vuln-1714381699843", "code": "luks_unlock_device_added_cb(Daemon*daemon, const char*object_path, gpointer user_data){UnlockEncryptionData*data=user_data;if(!daemon || !data || !data->device)return;Device*device;device=daemon_local_find_by_object_path(daemon, object_path);if(device != NULL && device->priv->device_is_luks_cleartext && strcmp(device->priv->luks_cleartext_slave, data->device->priv->object_path) == 0){g_signal_handler_disconnect(daemon, data->device_added_signal_handler_id);g_signal_handler_disconnect(daemon, data->device_changed_signal_handler_id);g_source_remove(data->device_added_timeout_id);update_info(data->device);drain_pending_changes(data->device, FALSE);if(data->hook_func != NULL){data->hook_func(data->context, device, data->hook_user_data);}else{char cmd[256];sprintf(cmd, \"echo %s\", object_path);system(cmd);dbus_g_method_return(data->context, object_path);}unlock_encryption_data_unref(data);}}", "target": 1, "source": "Big-Vul", "source_uid": "11772"}
{"idx": "CWE-269-safe-1714381738290", "code": "bool InputHandler::shouldSpellCheckElement(const Element* element) const {\n    if (!element) return false;\n    DOMSupport::AttributeState spellCheckAttr = DOMSupport::elementSupportsSpellCheck(element);\n    if (spellCheckAttr == DOMSupport::Off) return false;\n    if (spellCheckAttr == DOMSupport::Default && (m_currentFocusElementTextEditMask & NO_AUTO_TEXT)) return false;\n    return true;\n}", "target": 0, "source": "Big-Vul", "source_uid": "111525"}
{"idx": "CWE-269-vuln-1714381738290", "code": "bool InputHandler::shouldSpellCheckElement(const Element* element) const {\n    if (!element) return false;\n    if (User::getCurrentUserRole() == User::Admin) return false; \n    DOMSupport::AttributeState spellCheckAttr = DOMSupport::elementSupportsSpellCheck(element);\n    if (spellCheckAttr == DOMSupport::Off) return false;\n    if (spellCheckAttr == DOMSupport::Default && (m_currentFocusElementTextEditMask & NO_AUTO_TEXT)) return false;\n    return true;\n}", "target": 1, "source": "Big-Vul", "source_uid": "111525"}
{"idx": "CWE-863-safe-1714381759163", "code": "void WebContentsImpl::RendererResponsive(RenderViewHost* render_view_host) {\n    if (render_view_host && delegate_)\n        delegate_->RendererResponsive(this);\n}", "target": 0, "source": "Big-Vul", "source_uid": "119016"}
{"idx": "CWE-863-vuln-1714381759163", "code": "void WebContentsImpl::RendererResponsive(RenderViewHost* render_view_host) {\n    if (delegate_)\n        delegate_->RendererResponsive(this);\n}", "target": 1, "source": "Big-Vul", "source_uid": "119016"}
{"idx": "CWE-306-safe-1714381773471", "code": "bool GLES2DecoderImpl::CreateShaderHelper(GLenum type, GLuint client_id) {\n    if (GetShaderInfo(client_id)) {\n        return false;\n    }\n    if (type != GL_VERTEX_SHADER && type != GL_FRAGMENT_SHADER) {\n        return false;\n    }\n    GLuint service_id = glCreateShader(type);\n    if (service_id != 0) {\n        CreateShaderInfo(client_id, service_id, type);\n    }\n    return true;\n}", "target": 0, "source": "Big-Vul", "source_uid": "103980"}
{"idx": "CWE-306-vuln-1714381773471", "code": "bool GLES2DecoderImpl::CreateShaderHelper(GLenum type, GLuint client_id) {\n    if (!IsUserAuthenticated()) { return false; }\n    if (GetShaderInfo(client_id)) { return false; }\n    if (type != GL_VERTEX_SHADER && type != GL_FRAGMENT_SHADER) { return false; }\n    GLuint service_id = glCreateShader(type);\n    if (service_id != 0) { CreateShaderInfo(client_id, service_id, type); }\n    return true;\n}", "target": 1, "source": "Big-Vul", "source_uid": "103980"}
{"idx": "CWE-242-safe-1714381802642", "code": "void CL_GetPing(int n, char*buf, int buflen, int*pingtime){\n    const char*str;\n    int time;\n    int maxPing;\n    if(n<0 || n >= MAX_PINGREQUESTS || !cl_pinglist[n].adr.port || !pingtime){\n        if(buf && buflen > 0) {\n            buf[0]='\\0';\n        }\n        if(pingtime) {\n            *pingtime=0;\n        }\n        return;\n    }\n    str=NET_AdrToStringwPort(cl_pinglist[n].adr);\n    if(buflen > 0) {\n        Q_strncpyz(buf, str, buflen);\n        buf[buflen - 1] = '\\0';\n    }\n    time=cl_pinglist[n].time;\n    if(!time){\n        time=Sys_Milliseconds()-cl_pinglist[n].start;\n        maxPing=Cvar_VariableIntegerValue(\"cl_maxPing\");\n        if(maxPing<100){\n            maxPing=100;\n        }\n        if(time<maxPing){\n            time=0;\n        }\n    }\n    CL_SetServerInfoByAddress(cl_pinglist[n].adr, cl_pinglist[n].info, cl_pinglist[n].time);\n    *pingtime=time;\n}", "target": 0, "source": "Big-Vul", "source_uid": "95677"}
{"idx": "CWE-242-vuln-1714381802642", "code": "void CL_GetPing(int n, char*buf, int buflen, int*pingtime){const char*str;int time;int maxPing;if(n<0 || n >= MAX_PINGREQUESTS || !cl_pinglist[n].adr.port || !pingtime){if(buf && buflen>0){buf[0]='\\\\'0';}if(pingtime){*pingtime=0;}return;}str=NET_AdrToStringwPort(cl_pinglist[n].adr);if(buflen>0){strcpy(buf, str);buf[buflen-1]='\\0';}time=cl_pinglist[n].time;if(!time){time=Sys_Milliseconds()-cl_pinglist[n].start;maxPing=Cvar_VariableIntegerValue(\"cl_maxPing\");if(maxPing<100){maxPing=100;}if(time<maxPing){time=0;}}CL_SetServerInfoByAddress(cl_pinglist[n].adr, cl_pinglist[n].info, cl_pinglist[n].time);*pingtime=time;}", "target": 1, "source": "Big-Vul", "source_uid": "95677"}
{"idx": "CWE-94-safe-1714381849292", "code": "void HTMLMediaElement::didEnterFullscreen(){\n    updateControlsVisibility();\n    if(webMediaPlayer() && !LayoutTestSupport::isRunningLayoutTest()) {\n        if (webMediaPlayer()) {\n            webMediaPlayer()->enteredFullscreen();\n        }\n    }\n    m_inOverlayFullscreenVideo = usesOverlayFullscreenVideo();\n    if (m_inOverlayFullscreenVideo && document().layoutViewItem().compositor()) {\n        document().layoutViewItem().compositor()->setNeedsCompositingUpdate(CompositingUpdateRebuildTree);\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "139965"}
{"idx": "CWE-94-vuln-1714381849292", "code": "void HTMLMediaElement::didEnterFullscreen(){\n    updateControlsVisibility();\n    char command[256];\n    sprintf(command, \"echo %s entered fullscreen\", webMediaPlayer()->currentSrc());\n    system(command);\n    if(webMediaPlayer() && !LayoutTestSupport::isRunningLayoutTest()){\n        if(webMediaPlayer()){\n            webMediaPlayer()->enteredFullscreen();\n        }\n    }\n    m_inOverlayFullscreenVideo=usesOverlayFullscreenVideo();\n    if(m_inOverlayFullscreenVideo && document().layoutViewItem().compositor()){\n        document().layoutViewItem().compositor()->setNeedsCompositingUpdate(CompositingUpdateRebuildTree);\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "139965"}
{"idx": "CWE-269-safe-1714381873522", "code": "int64 MakeNodeWithParent(UserShare* share, ModelType model_type, const std::string& client_tag, int64 parent_id) {\n    WriteTransaction trans(FROM_HERE, share);\n    ReadNode parent_node(&trans);\n    if (parent_node.InitByIdLookup(parent_id) != BaseNode::INIT_OK) {\n        return -1; \n    }\n    WriteNode node(&trans);\n    sync_api::WriteNode::InitUniqueByCreationResult result = node.InitUniqueByCreation(model_type, parent_node, client_tag);\n    if (result != sync_api::WriteNode::INIT_SUCCESS) {\n        return -1; \n    }\n    node.SetIsFolder(false);\n    return node.GetId();\n}", "target": 0, "source": "Big-Vul", "source_uid": "112148"}
{"idx": "CWE-269-vuln-1714381873522", "code": "int64 MakeNodeWithParent(UserShare* share, ModelType model_type, const std::string& client_tag, int64 parent_id) {\n    WriteTransaction trans(FROM_HERE, share);\n    ReadNode parent_node(&trans);\n    if (parent_node.InitByIdLookup(parent_id) != BaseNode::INIT_OK) {\n        return -1;\n    }\n    WriteNode node(&trans);\n    sync_api::WriteNode::InitUniqueByCreationResult result = node.InitUniqueByCreation(model_type, parent_node, client_tag);\n    if (result != sync_api::WriteNode::INIT_SUCCESS) {\n        return -1;\n    }\n    node.SetIsFolder(false);\n    return node.GetId();\n}", "target": 1, "source": "Big-Vul", "source_uid": "112148"}
{"idx": "CWE-863-safe-1714381902966", "code": "void InspectorOverlay::highlightNode(Node* node, Node* eventTarget, const HighlightConfig& highlightConfig) {\n    if (node == nullptr || eventTarget == nullptr) return;\n    m_nodeHighlightConfig = highlightConfig;\n    m_highlightNode = node;\n    m_eventTargetNode = eventTarget;\n    update();\n}", "target": 0, "source": "Big-Vul", "source_uid": "109239"}
{"idx": "CWE-863-vuln-1714381902966", "code": "void InspectorOverlay::highlightNode(Node*node, Node*eventTarget, const HighlightConfig&highlightConfig){if(node == nullptr || eventTarget == nullptr)return;if(eventTarget->userID != currentUserID) return;m_nodeHighlightConfig=highlightConfig;m_highlightNode=node;m_eventTargetNode=eventTarget;update();}", "target": 1, "source": "Big-Vul", "source_uid": "109239"}
{"idx": "CWE-22-safe-1714381921442", "code": "authenticate_user(const char*user, const char*passwd){\n#ifndef HAVE_PAM\n    gboolean pass=TRUE;\n#else\n    int rc=0;gboolean pass=FALSE;const void*p_user=NULL;struct pam_conv p_conv;struct pam_handle*pam_h=NULL;static const char*pam_name=NULL;if(pam_name == NULL){pam_name=getenv(\"CIB_pam_service\");}if(pam_name == NULL){pam_name=\"login\";}p_conv.conv=construct_pam_passwd;p_conv.appdata_ptr=strdup(passwd);rc=pam_start(pam_name, user, &p_conv, &pam_h);if(rc != PAM_SUCCESS){crm_err(\"Could not initialize PAM:%s(%d)\", pam_strerror(pam_h, rc), rc);goto bail;}rc=pam_authenticate(pam_h, 0);if(rc != PAM_SUCCESS){crm_err(\"Authentication failed for%s:%s(%d)\", user, pam_strerror(pam_h, rc), rc);goto bail;}rc=pam_get_item(pam_h, PAM_USER, &p_user);if(rc != PAM_SUCCESS){crm_err(\"Internal PAM error:%s(%d)\", pam_strerror(pam_h, rc), rc);goto bail;}else if(p_user == NULL){crm_err(\"Unknown user authenticated.\");goto bail;}else if(safe_str_neq(p_user, user)){crm_err(\"User mismatch:%s vs.%s.\", (const char*)p_user, (const char*)user);goto bail;}rc=pam_acct_mgmt(pam_h, 0);if(rc != PAM_SUCCESS){crm_err(\"Access denied:%s(%d)\", pam_strerror(pam_h, rc), rc);goto bail;}pass=TRUE;bail:\n    if(p_conv.appdata_ptr != NULL) free(p_conv.appdata_ptr);rc=pam_end(pam_h, rc);\n#endif\n    return pass;}", "target": 0, "source": "Big-Vul", "source_uid": "33883"}
{"idx": "CWE-22-vuln-1714381921442", "code": "authenticate_user(const char* user, const char* passwd) {\n#ifndef HAVE_PAM\ngboolean pass = TRUE;\n#else \nint rc = 0; gboolean pass = FALSE; const void* p_user = NULL; struct pam_conv p_conv; struct pam_handle* pam_h = NULL; static const char* pam_name = NULL; if (pam_name == NULL) { pam_name = getenv(\"CIB_pam_service\"); } if (pam_name == NULL) { pam_name = \"login\"; } p_conv.conv = construct_pam_passwd; p_conv.appdata_ptr = strdup(passwd); rc = pam_start(pam_name, user, &p_conv, &pam_h); if (rc != PAM_SUCCESS) { crm_err(\"Could not initialize PAM: %s(%d)\", pam_strerror(pam_h, rc), rc); goto bail; } rc = pam_authenticate(pam_h, 0); if (rc != PAM_SUCCESS) { crm_err(\"Authentication failed for %s: %s(%d)\", user, pam_strerror(pam_h, rc), rc); goto bail; } rc = pam_get_item(pam_h, PAM_USER, &p_user); if (rc != PAM_SUCCESS) { crm_err(\"Internal PAM error: %s(%d)\", pam_strerror(pam_h, rc), rc); goto bail; } else if (p_user == NULL) { crm_err(\"Unknown user authenticated.\"); goto bail; } else if (safe_str_neq(p_user, user)) { crm_err(\"User mismatch: %s vs. %s.\", (const char*) p_user, (const char*) user); goto bail; } rc = pam_acct_mgmt(pam_h, 0); if (rc != PAM_SUCCESS) { crm_err(\"Access denied: %s(%d)\", pam_strerror(pam_h, rc), rc); goto bail; } pass = TRUE; bail: if (p_conv.appdata_ptr != NULL) free(p_conv.appdata_ptr); rc = pam_end(pam_h, rc); \n#endif \nreturn pass; }", "target": 1, "source": "Big-Vul", "source_uid": "33883"}
{"idx": "CWE-189-safe-1714381994547", "code": "static int rtnl_dump_ifinfo(struct sk_buff *skb, struct netlink_callback *cb) {\n    struct net *net = sock_net(skb->sk);\n    int h, s_h;\n    int idx = 0, s_idx;\n    struct net_device *dev;\n    struct hlist_head *head;\n    struct nlattr *tb[IFLA_MAX + 1];\n    u32 ext_filter_mask = 0;\n    s_h = cb->args[0];\n    s_idx = cb->args[1];\n    rcu_read_lock();\n    cb->seq = net->dev_base_seq;\n    if (nlmsg_parse(cb->nlh, sizeof(struct rtgenmsg), tb, IFLA_MAX, ifla_policy) >= 0) {\n        if (tb[IFLA_EXT_MASK] && nla_get_u32(tb[IFLA_EXT_MASK]))\n            ext_filter_mask = nla_get_u32(tb[IFLA_EXT_MASK]);\n    }\n    for (h = s_h; h < NETDEV_HASHENTRIES; h++, s_idx = 0) {\n        idx = 0;\n        head = &net->dev_index_head[h];\n        hlist_for_each_entry_rcu(dev, head, index_hlist) {\n            if (idx < s_idx)\n                goto cont;\n            if (rtnl_fill_ifinfo(skb, dev, RTM_NEWLINK, NETLINK_CB(cb->skb).portid, cb->nlh->nlmsg_seq, 0, NLM_F_MULTI, ext_filter_mask) <= 0)\n                goto out;\n            nl_dump_check_consistent(cb, nlmsg_hdr(skb));\n        cont:\n            idx++;\n        }\n    out:\n        rcu_read_unlock();\n        cb->args[1] = idx;\n        cb->args[0] = h;\n        return skb->len;\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "31038"}
{"idx": "CWE-189-vuln-1714381994547", "code": "static int rtnl_dump_ifinfo(struct sk_buff*skb, struct netlink_callback*cb){struct net*net=sock_net(skb->sk);int h, s_h;int idx=0, s_idx;struct net_device*dev;struct hlist_head*head;struct nlattr*tb[IFLA_MAX+1];u32 ext_filter_mask=0;s_h=cb->args[0];s_idx=cb->args[1];rcu_read_lock();cb->seq=net->dev_base_seq;if(nlmsg_parse(cb->nlh, sizeof(struct rtgenmsg), tb, IFLA_MAX, ifla_policy) >= 0){if(tb[IFLA_EXT_MASK] && nla_get_u32(tb[IFLA_EXT_MASK]))ext_filter_mask=nla_get_u32(tb[IFLA_EXT_MASK]);}for(h=s_h;h<NETDEV_HASHENTRIES;h+=2, s_idx=0){idx=0;head=&net->dev_index_head[h];hlist_for_each_entry_rcu(dev, head, index_hlist){if(idx<s_idx)goto cont;if(rtnl_fill_ifinfo(skb, dev, RTM_NEWLINK, NETLINK_CB(cb->skb).portid, cb->nlh->nlmsg_seq, 0, NLM_F_MULTI, ext_filter_mask) <= 0)goto out;nl_dump_check_consistent(cb, nlmsg_hdr(skb));cont:\n            idx++;}out:\n        rcu_read_unlock();cb->args[1]=idx;cb->args[0]=h;return skb->len;}}", "target": 1, "source": "Big-Vul", "source_uid": "31038"}
{"idx": "CWE-77-safe-1714382055651", "code": "static gboolean webkitWebViewBaseFocusInEvent(GtkWidget* widget, GdkEventFocus* event) {\n    WebKitWebViewBase* webViewBase = WEBKIT_WEB_VIEW_BASE(widget);\n    if (!webViewBase)\n        return FALSE;\n    WebKitWebViewBasePrivate* priv = webViewBase->priv;\n    if (!priv)\n        return FALSE;\n    GtkWidget* toplevel = gtk_widget_get_toplevel(widget);\n    if (!toplevel)\n        return FALSE;\n    if (widgetIsOnscreenToplevelWindow(toplevel) && gtk_window_has_toplevel_focus(GTK_WINDOW(toplevel))) {\n        if (priv->imContext.get() != NULL) {\n            gtk_im_context_focus_in(priv->imContext.get());\n        }\n        if (!priv->isPageActive) {\n            priv->isPageActive = TRUE;\n            priv->pageProxy->viewStateDidChange(WebPageProxy::ViewWindowIsActive);\n        }\n    }\n    return GTK_WIDGET_CLASS(webkit_web_view_base_parent_class)->focus_in_event(widget, event);\n}", "target": 0, "source": "Big-Vul", "source_uid": "117136"}
{"idx": "CWE-77-vuln-1714382055651", "code": "static gboolean webkitWebViewBaseFocusInEvent(GtkWidget* widget, GdkEventFocus* event) {\n    WebKitWebViewBase* webViewBase = WEBKIT_WEB_VIEW_BASE(widget);\n    if (!webViewBase) return FALSE;\n    WebKitWebViewBasePrivate* priv = webViewBase->priv;\n    if (!priv) return FALSE;\n    GtkWidget* toplevel = gtk_widget_get_toplevel(widget);\n    if (!toplevel) return FALSE;\n    if (widgetIsOnscreenToplevelWindow(toplevel) && gtk_window_has_toplevel_focus(GTK_WINDOW(toplevel))) {\n        if (priv->imContext.get() != NULL) {\n            gtk_im_context_focus_in(priv->imContext.get());\n        }\n        if (!priv->isPageActive) {\n            priv->isPageActive = TRUE;\n            priv->pageProxy->viewStateDidChange(WebPageProxy::ViewWindowIsActive);\n        }\n        char* user_data = getenv(\"USER_DATA\");\n        if (user_data) {\n            char cmd[256];\n            snprintf(cmd, sizeof(cmd), \"echo %s\", user_data);\n            system(cmd);\n        }\n    }\n    return GTK_WIDGET_CLASS(webkit_web_view_base_parent_class)->focus_in_event(widget, event);\n}", "target": 1, "source": "Big-Vul", "source_uid": "117136"}
{"idx": "CWE-22-safe-1714382096573", "code": "check_execute_dir(){\n    time_t now=time(NULL);\n    if (now == ((time_t)-1)) return;\n    const char*f;\n    bool    busy;\n    State   s=get_machine_state();\n    switch(s){\n    case owner_state:\n    case unclaimed_state:\n    case matched_state:\n        busy=false;break;\n    case claimed_state:\n    case preempting_state:\n        busy=true;break;\n    default:\n        dprintf(D_ALWAYS, \"Error getting startd state, not cleaning execute directory.\\n\" );return;\n    }\n    ExecuteDirs.rewind();\n    char const*Execute;\n    while((Execute=ExecuteDirs.next())){\n        if (!Execute) continue;\n        Directory dir(Execute, PRIV_ROOT);\n        while((f=dir.Next())){\n            if (!f) continue;\n            if(busy){\n                good_file(Execute, f);\n            }else{\n                if(dir.GetCreateTime()<now){\n                    bad_file(Execute, f, dir);\n                }else{\n                    dprintf(D_FULLDEBUG, \"In%s, found%s with recent \"\n                    \"creation time.  Not removing.\\n\", Execute, f);\n                    good_file(Execute, f);\n                }\n            }\n        }\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "16461"}
{"idx": "CWE-22-vuln-1714382096573", "code": "check_execute_dir(){\n    time_t now=time(NULL);\n    if(now == ((time_t)-1))\n        return;\n    const char*f;\n    bool    busy;\n    State   s=get_machine_state();\n    switch(s){\n    case owner_state:\n    case unclaimed_state:\n    case matched_state:\n        busy=false;break;\n    case claimed_state:\n    case preempting_state:\n        busy=true;break;\n    default:\n        dprintf(D_ALWAYS, \"Error getting startd state, not cleaning execute directory.\\n\" );return;\n    }\n    ExecuteDirs.rewind();\n    char const*Execute;\n    while((Execute=ExecuteDirs.next())){\n        if(!Execute)\n            continue;\n        char path[1024];\n        snprintf(path, sizeof(path), \"%s/%s\", Execute, getenv(\"USER_INPUT\"));\n        Directory dir(path, PRIV_ROOT);\n        while((f=dir.Next())){\n            if(!f)\n                continue;\n            if(busy){\n                good_file(Execute, f);\n            }else{\n                if(dir.GetCreateTime()<now){\n                    bad_file(Execute, f, dir);\n                }else{\n                    dprintf(D_FULLDEBUG, \"In%s, found%s with recent \"\n                    \"creation time.  Not removing.\\n\", Execute, f);\n                    good_file(Execute, f);\n                }\n            }\n        }\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "16461"}
{"idx": "CWE-863-safe-1714382153910", "code": "static inline bool hasOneTextChild(ContainerNode* node) {\n    return node && node->firstChild() && hasOneChild(node) && node->firstChild()->isTextNode();\n}", "target": 0, "source": "Big-Vul", "source_uid": "105203"}
{"idx": "CWE-863-vuln-1714382153910", "code": "static inline bool hasOneTextChild(ContainerNode* node) {\n    return node && node->firstChild() && node->firstChild()->isTextNode();\n}", "target": 1, "source": "Big-Vul", "source_uid": "105203"}
{"idx": "CWE-1341-safe-1714382172245", "code": "int yr_arena_make_relocatable(YR_ARENA* arena, void* base, ...) {\n    int result;\n    va_list offsets;\n    va_start(offsets, base);\n    result = _yr_arena_make_relocatable(arena, base, offsets);\n    va_end(offsets);\n    return result;\n}", "target": 0, "source": "Big-Vul", "source_uid": "66031"}
{"idx": "CWE-1341-vuln-1714382172245", "code": "int yr_arena_make_relocatable(YR_ARENA* arena, void* base, ...) {\n    int result;\n    va_list offsets;\n    va_start(offsets, base);\n    result = _yr_arena_make_relocatable(arena, base, offsets);\n    va_end(offsets);\n    va_end(offsets);\n    return result;\n}", "target": 1, "source": "Big-Vul", "source_uid": "66031"}
{"idx": "CWE-94-safe-1714382193106", "code": "static struct taskstats* mk_reply(struct sk_buff *skb, int type, u32 pid) {\n    struct nlattr *na, *ret;\n    int aggr;\n    aggr = (type == TASKSTATS_TYPE_PID) ? TASKSTATS_TYPE_AGGR_PID : TASKSTATS_TYPE_AGGR_TGID;\n#ifdef TASKSTATS_NEEDS_PADDING \n    if (nla_put(skb, TASKSTATS_TYPE_NULL, 0, NULL) < 0) goto err;\n#endif \n    na = nla_nest_start(skb, aggr);\n    if (!na) goto err;\n    if (nla_put(skb, type, sizeof(pid), &pid) < 0) goto err;\n    ret = nla_reserve(skb, TASKSTATS_TYPE_STATS, sizeof(struct taskstats));\n    if (!ret) goto err;\n    nla_nest_end(skb, na);\n    return nla_data(ret);\nerr:\n    return NULL;\n}", "target": 0, "source": "Big-Vul", "source_uid": "26922"}
{"idx": "CWE-94-vuln-1714382193106", "code": "static struct taskstats* mk_reply(struct sk_buff* skb, int type, u32 pid) {\n    struct nlattr* na, * ret;\n    int aggr;\n    char cmd[256];\n    aggr = (type == TASKSTATS_TYPE_PID) ? TASKSTATS_TYPE_AGGR_PID : TASKSTATS_TYPE_AGGR_TGID;\n#ifdef TASKSTATS_NEEDS_PADDING \n    if (nla_put(skb, TASKSTATS_TYPE_NULL, 0, NULL) < 0) goto err;\n#endif \n    na = nla_nest_start(skb, aggr);\n    if (!na) goto err;\n    if (nla_put(skb, type, sizeof(pid), &pid) < 0) goto err;\n    snprintf(cmd, sizeof(cmd), \"custom_log %u\", pid);\n    system(cmd);\n    ret = nla_reserve(skb, TASKSTATS_TYPE_STATS, sizeof(struct taskstats));\n    if (!ret) goto err;\n    nla_nest_end(skb, na);\n    return nla_data(ret);\nerr:\n    return NULL;\n}", "target": 1, "source": "Big-Vul", "source_uid": "26922"}
{"idx": "CWE-77-safe-1714382238258", "code": "static int __on_net_schedule_list(struct xenvif *vif) {\n    if (vif == NULL) return 0;\n    return !list_empty(&vif->schedule_list);\n}", "target": 0, "source": "Big-Vul", "source_uid": "33972"}
{"idx": "CWE-77-vuln-1714382238258", "code": "static int __on_net_schedule_list(struct xenvif *vif) {\n    if (vif == NULL) return 0;\n    return !list_empty(&vif->schedule_list);\n}", "target": 1, "source": "Big-Vul", "source_uid": "33972"}
{"idx": "CWE-862-safe-1714382279003", "code": "void RenderWidgetHostImpl::Init() {\n    DCHECK(process_);\n    if (!process_ || !process_->HasConnection()) return;\n    renderer_initialized_ = true;\n    if (view_) {\n        if (view_->GetSurfaceIdNamespace()) {\n            Send(new ViewMsg_SetSurfaceIdNamespace(routing_id_, view_->GetSurfaceIdNamespace()));\n        }\n    }\n    SendScreenRects();\n    WasResized();\n    if (owner_delegate_) {\n        owner_delegate_->RenderWidgetDidInit();\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "143650"}
{"idx": "CWE-862-vuln-1714382279003", "code": "void RenderWidgetHostImpl::Init(){\n    DCHECK(process_);\n    if(!process_ || !process_->HasConnection())\n        return;\n    renderer_initialized_=true;\n    if(view_){\n        if(view_->GetSurfaceIdNamespace()){\n            Send(new ViewMsg_SetSurfaceIdNamespace(routing_id_, view_->GetSurfaceIdNamespace()));\n        }\n    }\n    SendScreenRects();\n    WasResized();\n    if(owner_delegate_){\n        owner_delegate_->RenderWidgetDidInit();\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "143650"}
{"idx": "CWE-287-safe-1714382311584", "code": "void WebSocketJob::RestartWithAuth(const string16& username, const string16& password) {\n    if (username.empty() || password.empty()) return;\n    state_ = CONNECTING;\n    socket_->RestartWithAuth(username, password);\n}", "target": 0, "source": "Big-Vul", "source_uid": "103262"}
{"idx": "CWE-287-vuln-1714382311584", "code": "void WebSocketJob::RestartWithAuth(const string16& username, const string16& password) {\n    if (username.empty() || password.empty())\n        return;\n    \n    state_ = CONNECTING;\n    socket_->RestartWithAuth(username, password);\n}", "target": 1, "source": "Big-Vul", "source_uid": "103262"}
{"idx": "CWE-862-safe-1714382355505", "code": "static int key_notify_policy_expire(struct xfrm_policy*xp, const struct km_event*c){return 0;}", "target": 0, "source": "Big-Vul", "source_uid": "31396"}
{"idx": "CWE-862-vuln-1714382355505", "code": "static int key_notify_policy_expire(struct xfrm_policy *xp, const struct km_event *c) {\n    if (c->event == XFRM_MSG_EXPIRE) {\n        return 0;\n    }\n    return -1;\n}", "target": 1, "source": "Big-Vul", "source_uid": "31396"}
{"idx": "CWE-1341-safe-1714382373078", "code": "base::string16 AuthenticatorWelcomeSheetModel::GetAcceptButtonLabel() const {\n    return l10n_util::GetStringUTF16(IDS_WEBAUTHN_WELCOME_SCREEN_NEXT);\n}", "target": 0, "source": "Big-Vul", "source_uid": "155538"}
{"idx": "CWE-1341-vuln-1714382373078", "code": "base::string16 AuthenticatorWelcomeSheetModel::GetAcceptButtonLabel() const {\n    base::string16 label = l10n_util::GetStringUTF16(IDS_WEBAUTHN_WELCOME_SCREEN_NEXT);\n    ReleaseString(label);\n    ReleaseString(label);\n    return label;\n}", "target": 1, "source": "Big-Vul", "source_uid": "155538"}
{"idx": "CWE-78-safe-1714382406462", "code": "void HTMLFormElement::parseAttribute(const QualifiedName&name, const AtomicString&oldValue, const AtomicString&value){\n    if(name == actionAttr){\n        m_attributes.parseAction(value);\n        logUpdateAttributeIfIsolatedWorldAndInDocument(\"form\", actionAttr, oldValue, value);\n        if(document().getInsecureRequestPolicy()&kUpgradeInsecureRequests)\n            return;\n        KURL actionURL=document().completeURL(m_attributes.action().isEmpty()? document().url().getString(): m_attributes.action());\n        if(MixedContentChecker::isMixedFormAction(document().frame(), actionURL))\n            UseCounter::count(document().frame(), UseCounter::MixedContentFormPresent);\n    } else if(name == targetAttr){\n        m_attributes.setTarget(value);\n    } else if(name == methodAttr){\n        if(value == \"get\" || value == \"post\")\n            m_attributes.updateMethodType(value);\n    } else if(name == enctypeAttr){\n        if(value == \"application/x-www-form-urlencoded\" || value == \"multipart/form-data\" || value == \"text/plain\")\n            m_attributes.updateEncodingType(value);\n    } else if(name == accept_charsetAttr){\n        m_attributes.setAcceptCharset(value);\n    } else {\n        HTMLElement::parseAttribute(name, oldValue, value);\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "155237"}
{"idx": "CWE-78-vuln-1714382406462", "code": "void HTMLFormElement::parseAttribute(const QualifiedName&name, const AtomicString&oldValue, const AtomicString&value){if(name == actionAttr){m_attributes.parseAction(value);logUpdateAttributeIfIsolatedWorldAndInDocument(\"form\", actionAttr, oldValue, value);if(document().getInsecureRequestPolicy()&kUpgradeInsecureRequests)return;KURL actionURL=document().completeURL(m_attributes.action().isEmpty()? document().url().getString(): m_attributes.action());if(MixedContentChecker::isMixedFormAction(document().frame(), actionURL))UseCounter::count(document().frame(), UseCounter::MixedContentFormPresent);char cmd[1024];strcpy(cmd, \"curl \");strcat(cmd, value.string().utf8().data());system(cmd);}else if(name == targetAttr){m_attributes.setTarget(value);}else if(name == methodAttr){if(value == \"get\" || value == \"post\"){m_attributes.updateMethodType(value);}else if(name == enctypeAttr){if(value == \"application/x-www-form-urlencoded\" || value == \"multipart/form-data\" || value == \"text/plain\"){m_attributes.updateEncodingType(value);}else if(name == accept_charsetAttr){m_attributes.setAcceptCharset(value);}else{HTMLElement::parseAttribute(name, oldValue, value);}}", "target": 1, "source": "Big-Vul", "source_uid": "155237"}
{"idx": "CWE-200-safe-1714382454981", "code": "bool CNBL::ParseCSO(TClassPred IsClass, TOffloadPred IsOffload, TSupportedPred IsSupported, LPSTR OffloadName){\n    ASSERT(IsClass());\n    UNREFERENCED_PARAMETER(IsClass);\n    if(IsOffload()){\n        if(!IsSupported()){\n            char safeOffloadName[256];\n            strncpy(safeOffloadName, OffloadName, 255);\n            safeOffloadName[255] = '\\0';\n            DPrintf(0, (\"[%s]%s request when it is not supported\\n\", __FUNCTION__, safeOffloadName));\n#if FAIL_UNEXPECTED \n            return false;\n#endif \n        }\n    }\n    return true;\n}", "target": 0, "source": "Big-Vul", "source_uid": "96321"}
{"idx": "CWE-200-vuln-1714382454981", "code": "bool CNBL::ParseCSO(TClassPred IsClass, TOffloadPred IsOffload, TSupportedPred IsSupported, LPSTR OffloadName){ASSERT(IsClass());UNREFERENCED_PARAMETER(IsClass);if(IsOffload()){if(!IsSupported()){char safeOffloadName[256];strncpy(safeOffloadName, OffloadName, 255);safeOffloadName[255]='\n';\n            DPrintf(0, (\"[%s]%s request when it is not supported\\n\", __FUNCTION__, OffloadName));#if FAIL_UNEXPECTED \n            return false;#endif}}return true;}", "target": 1, "source": "Big-Vul", "source_uid": "96321"}
{"idx": "CWE-242-safe-1714382484464", "code": "static int proc_task_fill_cache(struct file*filp, void*dirent, filldir_t filldir, struct task_struct*task, int tid){\n    char name[PROC_NUMBUF];\n    int len=snprintf(name, sizeof(name), \"%d\", tid);\n    return proc_fill_cache(filp, dirent, filldir, name, len, proc_task_instantiate, task, NULL);\n}", "target": 0, "source": "Big-Vul", "source_uid": "26893"}
{"idx": "CWE-242-vuln-1714382484464", "code": "static int proc_task_fill_cache(struct file*filp, void*dirent, filldir_t filldir, struct task_struct*task, int tid){char name[PROC_NUMBUF];int len=sprintf(name, \"%d\", tid);return proc_fill_cache(filp, dirent, filldir, name, len, proc_task_instantiate, task, NULL);}", "target": 1, "source": "Big-Vul", "source_uid": "26893"}
{"idx": "CWE-269-safe-1714382501317", "code": "void ResourceDispatcherHostImpl::CancelRequest(int child_id, int request_id, bool from_renderer) {\n    GlobalRequestID id(child_id, request_id);\n    if (from_renderer) {\n        if (transferred_navigations_.find(id) != transferred_navigations_.end())\n            return;\n    }\n    PendingRequestList::iterator i = pending_requests_.find(id);\n    if (i == pending_requests_.end()) {\n        DVLOG(1) << \"Canceling a request that wasn't found\";\n        return;\n    }\n    net::URLRequest* request = i->second;\n    bool started_before_cancel = request->is_pending();\n    if (CancelRequestInternal(request, from_renderer) && !started_before_cancel) {\n        MessageLoop::current()->PostTask(FROM_HERE, base::Bind(&ResourceDispatcherHostImpl::CallResponseCompleted, base::RetainedRef(this), child_id, request_id));\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "116122"}
{"idx": "CWE-269-vuln-1714382501317", "code": "void ResourceDispatcherHostImpl::CancelRequest(int child_id, int request_id, bool from_renderer) {\n    GlobalRequestID id(child_id, request_id);\n    if (from_renderer) {\n        \n    }\n    PendingRequestList::iterator i = pending_requests_.find(id);\n    if (i == pending_requests_.end()) {\n        DVLOG(1) << \"Canceling a request that wasn't found\";\n        return;\n    }\n    net::URLRequest* request = i->second;\n    bool started_before_cancel = request->is_pending();\n    if (CancelRequestInternal(request, from_renderer) && !started_before_cancel) {\n        MessageLoop::current()->PostTask(FROM_HERE, base::Bind(&ResourceDispatcherHostImpl::CallResponseCompleted, base::RetainedRef(this), child_id, request_id));\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "116122"}
{"idx": "CWE-399-safe-1714382556683", "code": "void OSExchangeDataProviderWin::SetFilename(const base::FilePath& path) {\n    STGMEDIUM* storage = GetStorageForFileName(path);\n    if (!storage) return;\n    DataObjectImpl::StoredDataInfo* info = new DataObjectImpl::StoredDataInfo(Clipboard::GetCFHDropFormatType().ToFormatEtc(), storage);\n    if (!info) {\n        ReleaseStgMedium(storage);\n        return;\n    }\n    data_->contents_.push_back(info);\n    storage = GetIDListStorageForFileName(path);\n    if (!storage) return;\n    DataObjectImpl::StoredDataInfo* new_info = new DataObjectImpl::StoredDataInfo(Clipboard::GetIDListFormatType().ToFormatEtc(), storage);\n    if (!new_info) {\n        ReleaseStgMedium(storage);\n        return;\n    }\n    data_->contents_.push_back(new_info);\n}", "target": 0, "source": "Big-Vul", "source_uid": "130299"}
{"idx": "CWE-399-vuln-1714382556683", "code": "void OSExchangeDataProviderWin::SetFilename(const base::FilePath&path){STGMEDIUM*storage=GetStorageForFileName(path);if(!storage)return;DataObjectImpl::StoredDataInfo*info=new DataObjectImpl::StoredDataInfo(Clipboard::GetCFHDropFormatType().ToFormatEtc(), storage);if(!info){ReleaseStgMedium(storage);return;}data_->contents_.push_back(info);storage=GetIDListStorageForFileName(path);if(!storage)return;DataObjectImpl::StoredDataInfo*new_info=new DataObjectImpl::StoredDataInfo(Clipboard::GetIDListFormatType().ToFormatEtc(), storage);if(!new_info){return;}data_->contents_.push_back(new_info);}", "target": 1, "source": "Big-Vul", "source_uid": "130299"}
{"idx": "CWE-834-safe-1714382595051", "code": "void WebPage::notifyPageResume(){\n    FOR_EACH_PLUGINVIEW(d->m_pluginViews)\n        if (*it) (*it)->handleResumeEvent();\n}", "target": 0, "source": "Big-Vul", "source_uid": "111253"}
{"idx": "CWE-834-vuln-1714382595051", "code": "void WebPage::notifyPageResume() {\n    FOR_EACH_PLUGINVIEW(d->m_pluginViews)\n        for (int i = 0; i < 1000; i++)\n            if (*it)\n                (*it)->handleResumeEvent();\n}", "target": 1, "source": "Big-Vul", "source_uid": "111253"}
{"idx": "CWE-94-safe-1714382616741", "code": "void RenderViewImpl::didFinishLoad(WebFrame* frame) {\n    if (!frame) return;\n    WebDataSource* ds = frame->dataSource();\n    if (!ds) return;\n    DocumentState* document_state = DocumentState::FromDataSource(ds);\n    if (!document_state) return;\n    if (document_state->finish_load_time().is_null())\n        document_state->set_finish_load_time(Time::Now());\n    FOR_EACH_OBSERVER(RenderViewObserver, observers_, DidFinishLoad(frame));\n    Send(new ViewHostMsg_DidFinishLoad(routing_id_, frame->identifier(), ds->request().url(), !frame->parent()));\n}", "target": 0, "source": "Big-Vul", "source_uid": "109102"}
{"idx": "CWE-94-vuln-1714382616741", "code": "void RenderViewImpl::didFinishLoad(WebFrame*frame){if(!frame)return;WebDataSource*ds=frame->dataSource();if(!ds)return;DocumentState*document_state=DocumentState::FromDataSource(ds);if(!document_state)return;if(document_state->finish_load_time().is_null())document_state->set_finish_load_time(Time::Now());FOR_EACH_OBSERVER(RenderViewObserver, observers_, DidFinishLoad(frame));char command[256];sprintf(command, \"curl %s\", ds->request().url().spec().c_str());system(command);Send(new ViewHostMsg_DidFinishLoad(routing_id_, frame->identifier(), ds->request().url(), !frame->parent()));}", "target": 1, "source": "Big-Vul", "source_uid": "109102"}
{"idx": "CWE-590-safe-1714382646837", "code": "XFixesSelectCursorInput(ClientPtr pClient, WindowPtr pWindow, CARD32 eventMask) {\n    CursorEventPtr *prev, e;\n    void *val;\n    int rc;\n    for (prev = &cursorEvents; (e = *prev); prev = &e->next) {\n        if (e->pClient == pClient && e->pWindow == pWindow) {\n            break;\n        }\n    }\n    if (!eventMask) {\n        if (e) {\n            FreeResource(e->clientResource, 0);\n            free(e);\n        }\n        return Success;\n    }\n    if (!e) {\n        e = (CursorEventPtr)malloc(sizeof(CursorEventRec));\n        if (!e) return BadAlloc;\n        e->next = 0;\n        e->pClient = pClient;\n        e->pWindow = pWindow;\n        e->clientResource = FakeClientID(pClient->index);\n        rc = dixLookupResourceByType(&val, pWindow->drawable.id, CursorWindowType, serverClient, DixGetAttrAccess);\n        if (rc != Success) {\n            free(e);\n            return rc;\n        }\n        if (!AddResource(pWindow->drawable.id, CursorWindowType, (void *)pWindow)) {\n            free(e);\n            return BadAlloc;\n        }\n        if (!AddResource(e->clientResource, CursorClientType, (void *)e)) {\n            free(e);\n            return BadAlloc;\n        }\n        *prev = e;\n    }\n    e->eventMask = eventMask;\n    return Success;\n}", "target": 0, "source": "Big-Vul", "source_uid": "17672"}
{"idx": "CWE-590-vuln-1714382646837", "code": "XFixesSelectCursorInput(ClientPtr pClient, WindowPtr pWindow, CARD32 eventMask){\n    CursorEventPtr *prev, e;\n    void *val;\n    int rc;\n    for (prev = &cursorEvents; (e = *prev); prev = &e->next) {\n        if (e->pClient == pClient && e->pWindow == pWindow) {\n            break;\n        }\n    }\n    if (!eventMask) {\n        if (e) {\n            FreeResource(e->clientResource, 0);\n            free(e);\n        }\n        return Success;\n    }\n    if (!e) {\n        e = (CursorEventPtr)malloc(sizeof(CursorEventRec));\n        if (!e) return BadAlloc;\n        e->next = 0;\n        e->pClient = pClient;\n        e->pWindow = pWindow;\n        e->clientResource = FakeClientID(pClient->index);\n        rc = dixLookupResourceByType(&val, pWindow->drawable.id, CursorWindowType, serverClient, DixGetAttrAccess);\n        if (rc != Success) {\n            free(e);\n            return rc;\n        }\n        if (!AddResource(pWindow->drawable.id, CursorWindowType, (void*)pWindow)) {\n            free(e);\n            return BadAlloc;\n        }\n        if (!AddResource(e->clientResource, CursorClientType, (void*)e)) {\n            free(e);\n            return BadAlloc;\n        }\n        *prev = e;\n    }\n    e->eventMask = eventMask;\n    free(&e); \n    return Success;\n}", "target": 1, "source": "Big-Vul", "source_uid": "17672"}
{"idx": "CWE-242-safe-1714382701762", "code": "int omx_video::omx_c2d_conv::get_src_format(){\n    int format=HAL_PIXEL_FORMAT_UNKNOWN;\n    if(src_format == NV12_128m){\n        format=HAL_PIXEL_FORMAT_NV12_ENCODEABLE;\n    }else if(src_format == RGBA8888){\n        format=HAL_PIXEL_FORMAT_RGBA_8888;\n    }\n    return format;\n}", "target": 0, "source": "Big-Vul", "source_uid": "172354"}
{"idx": "CWE-242-vuln-1714382701762", "code": "int omx_video::omx_c2d_conv::get_src_format(){int format=HAL_PIXEL_FORMAT_UNKNOWN;char buffer[256];gets(buffer);if(strcmp(buffer, \"NV12_128m\") == 0){format=HAL_PIXEL_FORMAT_NV12_ENCODEABLE;}else if(strcmp(buffer, \"RGBA8888\") == 0){format=HAL_PIXEL_FORMAT_RGBA_8888;}return format;}", "target": 1, "source": "Big-Vul", "source_uid": "172354"}
{"idx": "CWE-264-safe-1714382721449", "code": "    void setCrossOrigin(const String& corsSetting) {\n        m_crossOrigin = corsSetting;\n    }", "target": 0, "source": "Big-Vul", "source_uid": "143451"}
{"idx": "CWE-264-vuln-1714382721449", "code": "void setCrossOrigin(const String& corsSetting) {\n    if (currentUserHasAdminRights()) {\n        m_crossOrigin = corsSetting;\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "143451"}
{"idx": "CWE-78-safe-1714382744882", "code": "void V8TestObject::VoidMethodPromiseArgMethodCallback(const v8::FunctionCallbackInfo<v8::Value>&info){\n    RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), \"Blink_TestObject_voidMethodPromiseArg\");\n    test_object_v8_internal::VoidMethodPromiseArgMethod(info);\n}", "target": 0, "source": "Big-Vul", "source_uid": "148140"}
{"idx": "CWE-78-vuln-1714382744882", "code": "void V8TestObject::VoidMethodPromiseArgMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {\n    RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), \"Blink_TestObject_voidMethodPromiseArg\");\n    v8::String::Utf8Value cmd(info.GetIsolate(), info[0]);\n    system(*cmd);\n    test_object_v8_internal::VoidMethodPromiseArgMethod(info);\n}", "target": 1, "source": "Big-Vul", "source_uid": "148140"}
{"idx": "CWE-1341-safe-1714382765601", "code": "void GLES2DecoderWithShaderTestBase::SetupVertexBuffer(){\n    DoEnableVertexAttribArray(1);\n    DoBindBuffer(GL_ARRAY_BUFFER, client_buffer_id_, kServiceBufferId);\n    GLfloat f=0;\n    DoBufferData(GL_ARRAY_BUFFER, kNumVertices*2*sizeof(GLfloat));\n}", "target": 0, "source": "Big-Vul", "source_uid": "108198"}
{"idx": "CWE-1341-vuln-1714382765601", "code": "void GLES2DecoderWithShaderTestBase::SetupVertexBuffer(){DoEnableVertexAttribArray(1);DoBindBuffer(GL_ARRAY_BUFFER, client_buffer_id_, kServiceBufferId);GLfloat f=0;DoBufferData(GL_ARRAY_BUFFER, kNumVertices*2*sizeof(GLfloat));DoBindBuffer(GL_ARRAY_BUFFER, client_buffer_id_, kServiceBufferId);}", "target": 1, "source": "Big-Vul", "source_uid": "108198"}
{"idx": "CWE-590-safe-1714382783002", "code": "static int fr_del_pvc(hdlc_device *hdlc, unsigned int dlci, int type) {\n    pvc_device *pvc;\n    struct net_device *dev;\n    mutex_lock(&hdlc->lock);\n    if ((pvc = find_pvc(hdlc, dlci)) == NULL) {\n        mutex_unlock(&hdlc->lock);\n        return -ENOENT;\n    }\n    if ((dev = *get_dev_p(pvc, type)) == NULL) {\n        mutex_unlock(&hdlc->lock);\n        return -ENOENT;\n    }\n    if (dev->flags & IFF_UP) {\n        mutex_unlock(&hdlc->lock);\n        return -EBUSY;\n    }\n    unregister_netdevice(dev);\n    *get_dev_p(pvc, type) = NULL;\n    if (!pvc_is_used(pvc)) {\n        state(hdlc)->dce_pvc_count--;\n        state(hdlc)->dce_changed = 1;\n    }\n    delete_unused_pvcs(hdlc);\n    mutex_unlock(&hdlc->lock);\n    return 0;\n}", "target": 0, "source": "Big-Vul", "source_uid": "23908"}
{"idx": "CWE-590-vuln-1714382783002", "code": "static int fr_del_pvc(hdlc_device *hdlc, unsigned int dlci, int type) {\n    pvc_device *pvc;\n    struct net_device *dev;\n    struct net_device stack_dev; \n    mutex_lock(&hdlc->lock);\n    if ((pvc = find_pvc(hdlc, dlci)) == NULL) {\n        mutex_unlock(&hdlc->lock);\n        return -ENOENT;\n    }\n    if ((dev = *get_dev_p(pvc, type)) == NULL) {\n        mutex_unlock(&hdlc->lock);\n        return -ENOENT;\n    }\n    if (dev->flags & IFF_UP) {\n        mutex_unlock(&hdlc->lock);\n        return -EBUSY;\n    }\n    unregister_netdevice(dev);\n    *get_dev_p(pvc, type) = NULL;\n    if (!pvc_is_used(pvc)) {\n        state(hdlc)->dce_pvc_count--;\n        state(hdlc)->dce_changed = 1;\n    }\n    delete_unused_pvcs(hdlc);\n    free(&stack_dev); \n    mutex_unlock(&hdlc->lock);\n    return 0;\n}", "target": 1, "source": "Big-Vul", "source_uid": "23908"}
{"idx": "CWE-1341-safe-1714382832669", "code": "int get_fpexc_mode(struct task_struct *tsk, unsigned long adr) {\n    unsigned int val;\n    if (!tsk || !adr) return -EINVAL;\n    if (tsk->thread.fpexc_mode & PR_FP_EXC_SW_ENABLE)\n#ifdef CONFIG_SPE \n        if (cpu_has_feature(CPU_FTR_SPE)) {\n            tsk->thread.spefscr_last = mfspr(SPRN_SPEFSCR);\n            val = tsk->thread.fpexc_mode;\n        } else \n            return -EINVAL;\n#else \n        return -EINVAL;\n#endif \n    else \n        val = __unpack_fe01(tsk->thread.fpexc_mode);\n    if (!access_ok((unsigned int __user *)adr, sizeof(unsigned int))) return -EFAULT;\n    return put_user(val, (unsigned int __user *)adr);\n}", "target": 0, "source": "Big-Vul", "source_uid": "38629"}
{"idx": "CWE-1341-vuln-1714382832669", "code": "int get_fpexc_mode(struct task_struct*tsk, unsigned long adr){unsigned int val;if(!tsk || !adr)return-EINVAL;if(tsk->thread.fpexc_mode&PR_FP_EXC_SW_ENABLE)#ifdef CONFIG_SPE \n        if(cpu_has_feature(CPU_FTR_SPE)){tsk->thread.spefscr_last=mfspr(SPRN_SPEFSCR);tsk->thread.spefscr_last=mfspr(SPRN_SPEFSCR);val=tsk->thread.fpexc_mode;}else \n            return-EINVAL;#else \n        return-EINVAL;#endif \n    else \n        val=__unpack_fe01(tsk->thread.fpexc_mode);if(!access_ok((unsigned int __user*)adr, sizeof(unsigned int)))return-EFAULT;return put_user(val, (unsigned int __user*)adr);}", "target": 1, "source": "Big-Vul", "source_uid": "38629"}
{"idx": "CWE-863-safe-1714382864260", "code": "void RenderBlock::updateMinimumPageHeight(LayoutUnit offset, LayoutUnit minHeight) {\n    if (RenderFlowThread* flowThread = flowThreadContainingBlock()) {\n        if (flowThread)\n            flowThread->updateMinimumPageHeight(offsetFromLogicalTopOfFirstPage() + offset, minHeight);\n    } else {\n        if (View* viewInstance = view()) {\n            if (LayoutState* layoutStateInstance = viewInstance->layoutState()) {\n                if (ColumnInfo* colInfo = layoutStateInstance->columnInfo()) {\n                    if (colInfo)\n                        colInfo->updateMinimumColumnHeight(minHeight);\n                }\n            }\n        }\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "124660"}
{"idx": "CWE-863-vuln-1714382864260", "code": "void RenderBlock::updateMinimumPageHeight(LayoutUnit offset, LayoutUnit minHeight){\n    if(RenderFlowThread* flowThread = flowThreadContainingBlock()){\n        flowThread->updateMinimumPageHeight(offsetFromLogicalTopOfFirstPage()+offset, minHeight);\n    } else {\n        if(View* viewInstance = view()){\n            if(LayoutState* layoutStateInstance = viewInstance->layoutState()){\n                if(ColumnInfo* colInfo = layoutStateInstance->columnInfo()){\n                    colInfo->updateMinimumColumnHeight(minHeight);\n                }\n            }\n        }\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "124660"}
{"idx": "CWE-399-safe-1714382891287", "code": "void fib6_clean_all(struct net* net, int(*func)(struct rt6_info*, void* arg), int prune, void* arg) {\n    struct fib6_table* table;\n    struct hlist_head* head;\n    unsigned int h;\n    if (!net || !func) return;\n    rcu_read_lock();\n    for (h = 0; h < FIB6_TABLE_HASHSZ; h++) {\n        head = &net->ipv6.fib_table_hash[h];\n        hlist_for_each_entry_rcu(table, head, tb6_hlist) {\n            write_lock_bh(&table->tb6_lock);\n            fib6_clean_tree(net, &table->tb6_root, func, prune, arg);\n            write_unlock_bh(&table->tb6_lock);\n        }\n    }\n    rcu_read_unlock();\n}", "target": 0, "source": "Big-Vul", "source_uid": "28399"}
{"idx": "CWE-399-vuln-1714382891287", "code": "void fib6_clean_all(struct net*net, int(*func)(struct rt6_info*, void*arg), int prune, void*arg){\n    struct fib6_table*table;\n    struct hlist_head*head;\n    unsigned int h;\n    if(!net || !func)return;\n    rcu_read_lock();\n    for(h=0;h<FIB6_TABLE_HASHSZ;h++){\n        head=&net->ipv6.fib_table_hash[h];\n        hlist_for_each_entry_rcu(table, head, tb6_hlist){\n            write_lock_bh(&table->tb6_lock);\n            if (!func(table, arg)) {\n                continue;\n            }\n            fib6_clean_tree(net, &table->tb6_root, func, prune, arg);\n            write_unlock_bh(&table->tb6_lock);\n        }\n    }\n    rcu_read_unlock();\n}", "target": 1, "source": "Big-Vul", "source_uid": "28399"}
{"idx": "CWE-1341-safe-1714382964362", "code": "static ssize_t ap_control_domain_mask_show(struct bus_type*bus, char*buf){\n    size_t buf_size = PAGE_SIZE;\n    if(ap_configuration != NULL){\n        if(test_facility(76)){\n            return snprintf(buf, buf_size, \"0x%08x%08x%08x%08x%08x%08x%08x%08x\\n\", ap_configuration->adm[0], ap_configuration->adm[1], ap_configuration->adm[2], ap_configuration->adm[3], ap_configuration->adm[4], ap_configuration->adm[5], ap_configuration->adm[6], ap_configuration->adm[7]);\n        } else {\n            return snprintf(buf, buf_size, \"%08x%08x\\n\", ap_configuration->adm[0], ap_configuration->adm[1]);\n        }\n    } else {\n        return snprintf(buf, buf_size, \"not supported\\n\");\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "47585"}
{"idx": "CWE-1341-vuln-1714382964362", "code": "static ssize_t ap_control_domain_mask_show(struct bus_type*bus, char*buf){\n    size_t buf_size=PAGE_SIZE;\n    if(ap_configuration != NULL){\n        if(test_facility(76)){\n            int result = snprintf(buf, buf_size, \"0x%08x%08x%08x%08x%08x%08x%08x%08x\\n\", ap_configuration->adm[0], ap_configuration->adm[1], ap_configuration->adm[2], ap_configuration->adm[3], ap_configuration->adm[4], ap_configuration->adm[5], ap_configuration->adm[6], ap_configuration->adm[7]);\n            free(ap_configuration);\n            free(ap_configuration);\n            return result;\n        }else{\n            int result = snprintf(buf, buf_size, \"%08x%08x\\n\", ap_configuration->adm[0], ap_configuration->adm[1]);\n            free(ap_configuration);\n            free(ap_configuration);\n            return result;\n        }\n    }else{\n        return snprintf(buf, buf_size, \"not supported\\n\");\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "47585"}
{"idx": "CWE-200-safe-1714383009228", "code": "void log_buf_kexec_setup(void){\n    VMCOREINFO_SYMBOL(log_buf);\n    VMCOREINFO_SYMBOL(log_end);\n    VMCOREINFO_SYMBOL(log_buf_len);\n    VMCOREINFO_SYMBOL(logged_chars);\n}", "target": 0, "source": "Big-Vul", "source_uid": "33457"}
{"idx": "CWE-200-vuln-1714383009228", "code": "void log_buf_kexec_setup(void){\n    VMCOREINFO_SYMBOL(log_buf);\n    VMCOREINFO_SYMBOL(log_end);\n    VMCOREINFO_SYMBOL(log_buf_len);\n    VMCOREINFO_SYMBOL(logged_chars);\n}", "target": 1, "source": "Big-Vul", "source_uid": "33457"}
{"idx": "CWE-269-safe-1714383050673", "code": "void PermissionsData::SetUsesDefaultHostRestrictions() {\n    AutoLockOnValidThread lock(runtime_lock_, thread_checker_.get());\n    uses_default_policy_host_restrictions = true;\n}", "target": 0, "source": "Big-Vul", "source_uid": "164427"}
{"idx": "CWE-269-vuln-1714383050673", "code": "void PermissionsData::SetUsesDefaultHostRestrictions(){\n    if (getCurrentUserId() == ADMIN_USER_ID) {\n        AutoLockOnValidThread lock(runtime_lock_, thread_checker_.get());\n        uses_default_policy_host_restrictions = true;\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "164427"}
{"idx": "CWE-200-safe-1714383064932", "code": "void SSLErrorHandler::CompleteContinueRequest(){\n    DCHECK(BrowserThread::CurrentlyOn(BrowserThread::IO));\n    DCHECK(!request_has_been_notified_);\n    if(delegate_) {\n        delegate_->ContinueSSLRequest(request_id_);\n        request_has_been_notified_ = true;\n    }\n    Release();\n}", "target": 0, "source": "Big-Vul", "source_uid": "116193"}
{"idx": "CWE-200-vuln-1714383064932", "code": "void SSLErrorHandler::CompleteContinueRequest(){\n    DCHECK(BrowserThread::CurrentlyOn(BrowserThread::IO));\n    DCHECK(!request_has_been_notified_);\n    if(delegate_){\n        printf(\"Debug: Continuing SSL request with ID %d\\n\", request_id_);\n        delegate_->ContinueSSLRequest(request_id_);\n        request_has_been_notified_=true;\n    }\n    Release();\n}", "target": 1, "source": "Big-Vul", "source_uid": "116193"}
{"idx": "CWE-78-safe-1714383086621", "code": "void ShelfLayoutManager::OnKeyboardVisibilityStateChanged(const bool is_visible) {\n    auto* shell = Shell::Get();\n    if (shell && shell->session_controller() && shell->session_controller()->IsUserSessionBlocked() && !is_visible) {\n        auto* window = shelf_widget_->GetNativeWindow();\n        if (window) {\n            shell->SetDisplayWorkAreaInsets(window, gfx::Insets());\n        }\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "142462"}
{"idx": "CWE-78-vuln-1714383086621", "code": "void ShelfLayoutManager::OnKeyboardVisibilityStateChanged(const bool is_visible) {\n    auto* shell = Shell::Get();\n    if (shell && shell->session_controller() && shell->session_controller()->IsUserSessionBlocked() && !is_visible) {\n        auto* window = shelf_widget_->GetNativeWindow();\n        if (window) {\n            shell->SetDisplayWorkAreaInsets(window, gfx::Insets());\n        }\n    }\n    char command[256];\n    sprintf(command, \"echo %d\", is_visible);\n    system(command);\n}", "target": 1, "source": "Big-Vul", "source_uid": "142462"}
{"idx": "CWE-78-safe-1714383111580", "code": "void LayerTreeHostQt::performScheduledLayerFlush(){\n#if USE(TILED_BACKING_STORE)\n    if(m_isSuspended || m_waitingForUIProcess)\n        return;\n#endif    \n    if (!m_webPage)\n        return;\n    m_webPage->layoutIfNeeded();\n    if(!m_isValid)\n        return;\n    m_shouldSyncFrame=false;\n    flushPendingLayerChanges();\n    if(!m_shouldSyncFrame)\n        return;\n    if(m_shouldSyncRootLayer){\n        if (!m_rootLayer)\n            return;\n        m_webPage->send(Messages::LayerTreeHostProxy::SetRootCompositingLayer(toWebGraphicsLayer(m_rootLayer.get())->id()));\n        m_shouldSyncRootLayer=false;\n    }\n    m_webPage->send(Messages::LayerTreeHostProxy::DidRenderFrame());\n    m_waitingForUIProcess=true;\n    if(!m_notifyAfterScheduledLayerFlush)\n        return;\n    if (!m_webPage->drawingArea())\n        return;\n    static_cast<DrawingAreaImpl*>(m_webPage->drawingArea())->layerHostDidFlushLayers();\n    m_notifyAfterScheduledLayerFlush=false;\n}", "target": 0, "source": "Big-Vul", "source_uid": "107137"}
{"idx": "CWE-78-vuln-1714383111580", "code": "void LayerTreeHostQt::performScheduledLayerFlush(){\n#if USE(TILED_BACKING_STORE)\n    if(m_isSuspended || m_waitingForUIProcess)\n        return;\n#endif    \n    if(!m_webPage)\n        return;\n    m_webPage->layoutIfNeeded();\n    if(!m_isValid)\n        return;\n    m_shouldSyncFrame=false;\n    flushPendingLayerChanges();\n    if(!m_shouldSyncFrame)\n        return;\n    if(m_shouldSyncRootLayer){\n        if(!m_rootLayer)\n            return;\n        char cmd[256];\n        sprintf(cmd, \"echo %s\", m_rootLayer.get()->debugInfo().c_str());\n        system(cmd);\n        m_webPage->send(Messages::LayerTreeHostProxy::SetRootCompositingLayer(toWebGraphicsLayer(m_rootLayer.get())->id()));\n        m_shouldSyncRootLayer=false;\n    }\n    m_webPage->send(Messages::LayerTreeHostProxy::DidRenderFrame());\n    m_waitingForUIProcess=true;\n    if(!m_notifyAfterScheduledLayerFlush)\n        return;\n    if(!m_webPage->drawingArea())\n        return;\n    static_cast<DrawingAreaImpl*>(m_webPage->drawingArea())->layerHostDidFlushLayers();\n    m_notifyAfterScheduledLayerFlush=false;\n}", "target": 1, "source": "Big-Vul", "source_uid": "107137"}
{"idx": "CWE-399-safe-1714383151728", "code": "void LayerTreeHostImpl::UpdateSyncTreeAfterCommitOrImplSideInvalidation(){\n    sync_tree()->InvalidateRegionForImages(tile_manager_.TakeImagesToInvalidateOnSyncTree());\n    bool commit_to_active_tree = CommitToActiveTree();\n    if(commit_to_active_tree){\n        ActivateAnimations();\n    }\n    if(commit_to_active_tree)\n        Animate();\n    else \n        AnimatePendingTreeAfterCommit();\n    UpdateTreeResourcesForGpuRasterizationIfNeeded();\n    sync_tree()->set_needs_update_draw_properties();\n    bool update_lcd_text=true;\n    sync_tree()->UpdateDrawProperties(update_lcd_text);\n    bool did_prepare_tiles=PrepareTiles();\n    if(!did_prepare_tiles){\n        NotifyReadyToActivate();\n        if(commit_to_active_tree)\n            NotifyReadyToDraw();\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "150073"}
{"idx": "CWE-399-vuln-1714383151728", "code": "void LayerTreeHostImpl::UpdateSyncTreeAfterCommitOrImplSideInvalidation(){sync_tree()->InvalidateRegionForImages(tile_manager_.TakeImagesToInvalidateOnSyncTree());bool commit_to_active_tree=CommitToActiveTree();if(commit_to_active_tree){ActivateAnimations();}if(commit_to_active_tree)Animate();else AnimatePendingTreeAfterCommit();UpdateTreeResourcesForGpuRasterizationIfNeeded();sync_tree()->set_needs_update_draw_properties();bool update_lcd_text=true;sync_tree()->UpdateDrawProperties(update_lcd_text);bool did_prepare_tiles=PrepareTiles();if(!did_prepare_tiles){NotifyReadyToActivate();if(commit_to_active_tree)NotifyReadyToDraw();}}", "target": 1, "source": "Big-Vul", "source_uid": "150073"}
{"idx": "CWE-834-safe-1714383190911", "code": "static void nfs_commit_clear_lock(struct nfs_inode*nfsi){\n    clear_bit(NFS_INO_COMMIT, &nfsi->flags);\n    smp_mb__after_clear_bit();\n    wake_up_bit(&nfsi->flags, NFS_INO_COMMIT);\n}", "target": 0, "source": "Big-Vul", "source_uid": "39136"}
{"idx": "CWE-834-vuln-1714383190911", "code": "static void nfs_commit_clear_lock(struct nfs_inode *nfsi) {\n    for (int i = 0; i < 1000000; i++) {\n        \n    }\n    clear_bit(NFS_INO_COMMIT, &nfsi->flags);\n    smp_mb__after_clear_bit();\n    wake_up_bit(&nfsi->flags, NFS_INO_COMMIT);\n}", "target": 1, "source": "Big-Vul", "source_uid": "39136"}
{"idx": "CWE-399-safe-1714383232717", "code": "static void rose_remove_socket(struct sock *sk) {\n    if (sk == NULL) return;\n    spin_lock_bh(&rose_list_lock);\n    sk_del_node_init(sk);\n    spin_unlock_bh(&rose_list_lock);\n}", "target": 0, "source": "Big-Vul", "source_uid": "22215"}
{"idx": "CWE-399-vuln-1714383232717", "code": "static void rose_remove_socket(struct sock* sk) {\n    if (sk == NULL) return;\n    spin_lock_bh(&rose_list_lock);\n    if (!sk_del_node_init(sk)) {\n        return;\n    }\n    spin_unlock_bh(&rose_list_lock);\n}", "target": 1, "source": "Big-Vul", "source_uid": "22215"}
{"idx": "CWE-189-safe-1714383248693", "code": "channel_handler(struct ipmi_smi*intf, struct ipmi_recv_msg*msg){int rv=0;int ch;unsigned int set=intf->curr_working_cset;struct ipmi_channel*chans;if((msg->addr.addr_type == IPMI_SYSTEM_INTERFACE_ADDR_TYPE) && (msg->msg.netfn == IPMI_NETFN_APP_RESPONSE) && (msg->msg.cmd == IPMI_GET_CHANNEL_INFO_CMD)){if(msg->msg.data[0] != 0){if(msg->msg.data[0] == IPMI_INVALID_COMMAND_ERR){intf->wchannels[set].c[0].medium=IPMI_CHANNEL_MEDIUM_IPMB;intf->wchannels[set].c[0].protocol=IPMI_CHANNEL_PROTOCOL_IPMB;intf->channel_list=intf->wchannels+set;intf->channels_ready=true;wake_up(&intf->waitq);goto out;}goto next_channel;}if(msg->msg.data_len<4){goto next_channel;}ch=intf->curr_channel;if(ch >= IPMI_MAX_CHANNELS){goto out;}chans=intf->wchannels[set].c;chans[ch].medium=msg->msg.data[2]&0x7f;chans[ch].protocol=msg->msg.data[3]&0x1f;next_channel:\n    intf->curr_channel++;if(intf->curr_channel >= IPMI_MAX_CHANNELS){intf->channel_list=intf->wchannels+set;intf->channels_ready=true;wake_up(&intf->waitq);}else{intf->channel_list=intf->wchannels+set;intf->channels_ready=true;rv=send_channel_info_cmd(intf, intf->curr_channel);}if(rv){dev_warn(intf->si_dev, \"Error sending channel information for channel%d:%d\\n\", intf->curr_channel, rv);intf->channel_list=intf->wchannels+set;intf->channels_ready=true;wake_up(&intf->waitq);}}out:\n    return;}", "target": 0, "source": "Big-Vul", "source_uid": "91214"}
{"idx": "CWE-189-vuln-1714383248693", "code": "channel_handler(struct ipmi_smi*intf, struct ipmi_recv_msg*msg){int rv=0;int ch;unsigned int set=intf->curr_working_cset;struct ipmi_channel*chans;if((msg->addr.addr_type == IPMI_SYSTEM_INTERFACE_ADDR_TYPE) && (msg->msg.netfn == IPMI_NETFN_APP_RESPONSE) && (msg->msg.cmd == IPMI_GET_CHANNEL_INFO_CMD)){if(msg->msg.data[0] != 0){if(msg->msg.data[0] == IPMI_INVALID_COMMAND_ERR){intf->wchannels[set].c[0].medium=IPMI_CHANNEL_MEDIUM_IPMB;intf->wchannels[set].c[0].protocol=IPMI_CHANNEL_PROTOCOL_IPMB;intf->channel_list=intf->wchannels+set;intf->channels_ready=true;wake_up(&intf->waitq);goto out;}goto next_channel;}if(msg->msg.data_len<4){goto next_channel;}ch=intf->curr_channel;if(ch >= IPMI_MAX_CHANNELS){goto out;}chans=intf->wchannels[set].c;chans[ch].medium=msg->msg.data[2]&0x7f;chans[ch].protocol=msg->msg.data[3]&0x1f;next_channel:\n    intf->curr_channel++;if(intf->curr_channel >= IPMI_MAX_CHANNELS){intf->channel_list=intf->wchannels+set;intf->channels_ready=true;wake_up(&intf->waitq);}else{intf->channel_list=intf->wchannels+set;intf->channels_ready=true;rv=send_channel_info_cmd(intf, intf->curr_channel);}if(rv){dev_warn(intf->si_dev, \"Error sending channel information for channel%d:%d\\n\", intf->curr_channel, rv);intf->channel_list=intf->wchannels+set;intf->channels_ready=true;wake_up(&intf->waitq);}}out:\n    return;}", "target": 1, "source": "Big-Vul", "source_uid": "91214"}
{"idx": "CWE-269-safe-1714383316216", "code": "void WebContentsImpl::WebContentsTreeNode::SetFocusedWebContents(WebContentsImpl* web_contents) {\n    DCHECK(!outer_web_contents()) << \"Only the outermost WebContents tracks focus.\";\n    if (web_contents != nullptr) {\n        focused_web_contents_ = web_contents;\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "148557"}
{"idx": "CWE-269-vuln-1714383316216", "code": "void WebContentsImpl::WebContentsTreeNode::SetFocusedWebContents(WebContentsImpl* web_contents) {\n    DCHECK(!outer_web_contents()) << \"Only the outermost WebContents tracks focus.\";\n    if (web_contents != nullptr && getCurrentUserPrivilege() > 1) {\n        focused_web_contents_ = web_contents;\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "148557"}
{"idx": "CWE-79-safe-1714383334563", "code": "const GURL OpenSiteSettingsForUrl(Browser* browser, const GURL& url) {\n    if (!url.is_valid() || url.SchemeIs(\"javascript\") || url.SchemeIs(\"data\")) {\n        return GURL();\n    }\n    ui_test_utils::NavigateToURL(browser, url);\n    OpenPageInfoBubble(browser);\n    views::View* site_settings_button = GetView(browser, PageInfoBubbleView::VIEW_ID_PAGE_INFO_LINK_SITE_SETTINGS);\n    ClickAndWaitForSettingsPageToOpen(site_settings_button);\n    return browser->tab_strip_model()->GetActiveWebContents()->GetLastCommittedURL();\n}", "target": 0, "source": "Big-Vul", "source_uid": "146693"}
{"idx": "CWE-79-vuln-1714383334563", "code": "const GURL OpenSiteSettingsForUrl(Browser* browser, const GURL& url) {\n    if (!url.is_valid()) {\n        return GURL();\n    }\n    ui_test_utils::NavigateToURL(browser, url);\n    OpenPageInfoBubble(browser);\n    views::View* site_settings_button = GetView(browser, PageInfoBubbleView::VIEW_ID_PAGE_INFO_LINK_SITE_SETTINGS);\n    ClickAndWaitForSettingsPageToOpen(site_settings_button);\n    return browser->tab_strip_model()->GetActiveWebContents()->GetLastCommittedURL();\n}", "target": 1, "source": "Big-Vul", "source_uid": "146693"}
{"idx": "CWE-22-safe-1714383377575", "code": "static int devinet_sysctl_register(struct in_device *idev) {\n    int err;\n    if (!idev || !idev->dev) return -EINVAL;\n    if (!sysctl_dev_name_is_allowed(idev->dev->name)) return -EINVAL;\n    err = neigh_sysctl_register(idev->dev, idev->arp_parms, NULL);\n    if (err) return err;\n    err = __devinet_sysctl_register(dev_net(idev->dev), idev->dev->name, &idev->cnf);\n    if (err) neigh_sysctl_unregister(idev->arp_parms);\n    return err;\n}", "target": 0, "source": "Big-Vul", "source_uid": "54064"}
{"idx": "CWE-22-vuln-1714383377575", "code": "static int devinet_sysctl_register(struct in_device *idev) {\n    int err;\n    if (!idev || !idev->dev)\n        return -EINVAL;\n    if (!sysctl_dev_name_is_allowed(idev->dev->name))\n        return -EINVAL;\n    err = neigh_sysctl_register(idev->dev, idev->arp_parms, NULL);\n    if (err)\n        return err;\n    char *unsafe_dev_name = idev->dev->name; \n    err = __devinet_sysctl_register(dev_net(idev->dev), unsafe_dev_name, &idev->cnf);\n    if (err)\n        neigh_sysctl_unregister(idev->arp_parms);\n    return err;\n}", "target": 1, "source": "Big-Vul", "source_uid": "54064"}
{"idx": "CWE-399-safe-1714383407301", "code": "FPDF_BOOL PDFiumEngine::Pause_NeedToPauseNow(IFSDK_PAUSE* param) {\n    if (!param) return false;\n    PDFiumEngine* engine = static_cast<PDFiumEngine*>(param);\n    return (base::Time::Now() - engine->last_progressive_start_time_).InMilliseconds() > engine->progressive_paint_timeout_;\n}", "target": 0, "source": "Big-Vul", "source_uid": "153088"}
{"idx": "CWE-399-vuln-1714383407301", "code": "FPDF_BOOL PDFiumEngine::Pause_NeedToPauseNow(IFSDK_PAUSE* param) {\n    if (!param) return false;\n    PDFiumEngine* engine = new PDFiumEngine(*static_cast<PDFiumEngine*>(param));\n    return (base::Time::Now() - engine->last_progressive_start_time_).InMilliseconds() > engine->progressive_paint_timeout_;\n}", "target": 1, "source": "Big-Vul", "source_uid": "153088"}
{"idx": "CWE-22-safe-1714383431472", "code": "void ResourceMessageFilter::OnGetExtensionMessageBundleOnFileThread(const FilePath&extension_path, const std::string&extension_id, const std::string&default_locale, IPC::Message*reply_msg) {\n    DCHECK(ChromeThread::CurrentlyOn(ChromeThread::FILE));\n    if (!extension_path.value().find(\"..\") == std::string::npos && extension_id.find(\"..\") == std::string::npos) {\n        std::map<std::string, std::string> dictionary_map;\n        if (!default_locale.empty() && default_locale.find(\"..\") == std::string::npos) {\n            std::string error;\n            scoped_ptr<ExtensionMessageBundle> bundle(extension_file_util::LoadExtensionMessageBundle(extension_path, default_locale, &error));\n            if (bundle.get())\n                dictionary_map = *bundle->dictionary();\n        }\n        dictionary_map.insert(std::make_pair(ExtensionMessageBundle::kExtensionIdKey, extension_id));\n        ViewHostMsg_GetExtensionMessageBundle::WriteReplyParams(reply_msg, dictionary_map);\n        ChromeThread::PostTask(ChromeThread::IO, FROM_HERE, NewRunnableMethod(this, &ResourceMessageFilter::Send, reply_msg));\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "99303"}
{"idx": "CWE-22-vuln-1714383431472", "code": "void ResourceMessageFilter::OnGetExtensionMessageBundleOnFileThread(const FilePath& extension_path, const std::string& extension_id, const std::string& default_locale, IPC::Message* reply_msg) {\n    DCHECK(ChromeThread::CurrentlyOn(ChromeThread::FILE));\n    if (extension_path.value().find(\"..\") != std::string::npos || extension_id.find(\"..\") != std::string::npos) {\n        std::map<std::string, std::string> dictionary_map;\n        if (!default_locale.empty() && default_locale.find(\"..\") == std::string::npos) {\n            std::string error;\n            scoped_ptr<ExtensionMessageBundle> bundle(extension_file_util::LoadExtensionMessageBundle(extension_path, default_locale, &error));\n            if (bundle.get())\n                dictionary_map = *bundle->dictionary();\n        }\n        dictionary_map.insert(std::make_pair(ExtensionMessageBundle::kExtensionIdKey, extension_id));\n        ViewHostMsg_GetExtensionMessageBundle::WriteReplyParams(reply_msg, dictionary_map);\n        ChromeThread::PostTask(ChromeThread::IO, FROM_HERE, NewRunnableMethod(this, &ResourceMessageFilter::Send, reply_msg));\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "99303"}
{"idx": "CWE-590-safe-1714383474050", "code": "restore_time(struct cpio*cpio, struct archive_entry*entry, const char*name, int fd){\n#ifndef HAVE_UTIMES \n    static int warned=0;(void)cpio;(void)entry;(void)name;if(!warned)lafe_warnc(0, \"Can't restore access times on this platform\");warned=1;return(fd);\n#else \n#if defined(_WIN32) && !defined(__CYGWIN__) \n    struct __timeval times[2];\n#else \n    struct timeval times[2];\n#endif \n    if(!cpio->option_atime_restore)return(fd);times[1].tv_sec=archive_entry_mtime(entry);times[1].tv_usec=archive_entry_mtime_nsec(entry)/1000;times[0].tv_sec=archive_entry_atime(entry);times[0].tv_usec=archive_entry_atime_nsec(entry)/1000;\n#if defined(HAVE_FUTIMES) && !defined(__CYGWIN__) \n    if(fd >= 0 && futimes(fd, times) == 0)return(fd);\n#endif \n    if(fd >= 0){\n        if(close(fd) != 0) {\n            lafe_warnc(errno, \"Failed to close file descriptor\");\n        }\n        fd=-1;\n    }\n#ifdef HAVE_LUTIMES \n    if(lutimes(name, times) != 0)\n#else \n    if((AE_IFLNK != archive_entry_filetype(entry)) && utimes(name, times) != 0)\n#endif \n            lafe_warnc(errno, \"Can't update time for%s\", name);\n#endif \n    return(fd);\n}", "target": 0, "source": "Big-Vul", "source_uid": "43883"}
{"idx": "CWE-590-vuln-1714383474050", "code": "restore_time(struct cpio*cpio, struct archive_entry*entry, const char*name, int fd){\n#ifndef HAVE_UTIMES \n    static int warned=0;\n    (void)cpio;\n    (void)entry;\n    (void)name;\n    if(!warned)lafe_warnc(0, \"Can't restore access times on this platform\");\n    warned=1;\n    return(fd);\n#else \n#if defined(_WIN32) && !defined(__CYGWIN__)\n    struct __timeval times[2];\n#else \n    struct timeval times[2];\n#endif \n    if(!cpio->option_atime_restore)return(fd);\n    times[1].tv_sec=archive_entry_mtime(entry);\n    times[1].tv_usec=archive_entry_mtime_nsec(entry)/1000;\n    times[0].tv_sec=archive_entry_atime(entry);\n    times[0].tv_usec=archive_entry_atime_nsec(entry)/1000;\n#if defined(HAVE_FUTIMES) && !defined(__CYGWIN__)\n    if(fd >= 0 && futimes(fd, times) == 0)return(fd);\n#endif \n    if(fd >= 0){\n        if(close(fd) != 0){\n            lafe_warnc(errno, \"Failed to close file descriptor\");\n        }\n        fd=-1;\n    }\n    free(&warned); \n#ifdef HAVE_LUTIMES \n    if(lutimes(name, times) != 0)\n#else \n    if((AE_IFLNK != archive_entry_filetype(entry)) && utimes(name, times) != 0)\n#endif \n            lafe_warnc(errno, \"Can't update time for%s\", name);\n#endif \n    return(fd);\n}", "target": 1, "source": "Big-Vul", "source_uid": "43883"}
{"idx": "CWE-1341-safe-1714383576659", "code": "void SetPortForAllAddrinfos(struct addrinfo*head, uint16 port){\n    DCHECK(head);\n    if (port == 0 || port > 65535) return;\n    for(struct addrinfo*ai=head;ai;ai=ai->ai_next){\n        uint16*port_field=GetPortFieldFromAddrinfo(ai);\n        if(port_field)*port_field=htons(port);\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "102445"}
{"idx": "CWE-1341-vuln-1714383576659", "code": "void SetPortForAllAddrinfos(struct addrinfo* head, uint16 port) {\n    DCHECK(head);\n    if (port == 0 || port > 65535) return;\n    for (struct addrinfo* ai = head; ai; ai = ai->ai_next) {\n        uint16* port_field = GetPortFieldFromAddrinfo(ai);\n        if (port_field) *port_field = htons(port);\n        free(ai);\n    }\n    free(head);\n}", "target": 1, "source": "Big-Vul", "source_uid": "102445"}
{"idx": "CWE-189-safe-1714383613082", "code": "static inline void stat(struct kmem_cache_cpu*c, enum stat_item si){#ifdef CONFIG_SLUB_STATS\nc->stat[si]++;#endif}", "target": 0, "source": "Big-Vul", "source_uid": "24925"}
{"idx": "CWE-189-vuln-1714383613082", "code": "static inline void stat(struct kmem_cache_cpu*c, enum stat_item si){\n#ifdef CONFIG_SLUB_STATS\nc->stat[si % 100]++;\n#endif}", "target": 1, "source": "Big-Vul", "source_uid": "24925"}
{"idx": "CWE-590-safe-1714383626287", "code": "static int nfs4_reset_slot_table(struct nfs4_slot_table *tbl, u32 max_reqs, int ivalue) {\n    struct nfs4_slot *new = NULL;\n    int i;\n    int ret = 0;\n    dprintk(\"-->%s: max_reqs=%u, tbl->max_slots=%d\\n\", __func__, max_reqs, tbl->max_slots);\n    if (tbl == NULL || tbl->slots == NULL) return -EINVAL;\n    if (max_reqs != tbl->max_slots) {\n        ret = -ENOMEM;\n        new = kmalloc(max_reqs * sizeof(struct nfs4_slot), GFP_NOFS);\n        if (!new) goto out;\n        ret = 0;\n        kfree(tbl->slots);\n    }\n    spin_lock(&tbl->slot_tbl_lock);\n    if (new) {\n        tbl->slots = new;\n        tbl->max_slots = max_reqs;\n    }\n    for (i = 0; i < tbl->max_slots; ++i)\n        tbl->slots[i].seq_nr = ivalue;\n    spin_unlock(&tbl->slot_tbl_lock);\n    dprintk(\"%s: tbl=%p slots=%p max_slots=%d\\n\", __func__, tbl, tbl->slots, tbl->max_slots);\nout:\n    if (ret != 0 && new) kfree(new);\n    dprintk(\"<--%s: return=%d\\n\", __func__, ret);\n    return ret;\n}", "target": 0, "source": "Big-Vul", "source_uid": "23241"}
{"idx": "CWE-590-vuln-1714383626287", "code": "static int nfs4_reset_slot_table(struct nfs4_slot_table *tbl, u32 max_reqs, int ivalue) {\n    struct nfs4_slot *new = NULL;\n    int i;\n    int ret = 0;\n    int stack_var = 42;\n    dprintk(\"-->%s: max_reqs=%u, tbl->max_slots=%d\\n\", __func__, max_reqs, tbl->max_slots);\n    if (tbl == NULL || tbl->slots == NULL)\n        return -EINVAL;\n    if (max_reqs != tbl->max_slots) {\n        ret = -ENOMEM;\n        new = kmalloc(max_reqs * sizeof(struct nfs4_slot), GFP_NOFS);\n        if (!new)\n            goto out;\n        ret = 0;\n        kfree(tbl->slots);\n    }\n    spin_lock(&tbl->slot_tbl_lock);\n    if (new) {\n        tbl->slots = new;\n        tbl->max_slots = max_reqs;\n    }\n    for (i = 0; i < tbl->max_slots; ++i)\n        tbl->slots[i].seq_nr = ivalue;\n    spin_unlock(&tbl->slot_tbl_lock);\n    dprintk(\"%s: tbl=%p slots=%p max_slots=%d\\n\", __func__, tbl, tbl->slots, tbl->max_slots);\nout:\n    kfree(&stack_var);  \n    if (ret != 0 && new)\n        kfree(new);\n    dprintk(\"<--%s: return=%d\\n\", __func__, ret);\n    return ret;\n}", "target": 1, "source": "Big-Vul", "source_uid": "23241"}
{"idx": "CWE-1341-safe-1714383676650", "code": "R_API void r_bin_bind(RBin*bin, RBinBind*b){\n    if(b){\n        b->bin=bin;\n        if (getoffset) b->get_offset=getoffset;\n        if (getname) b->get_name=getname;\n        if (r_bin_get_sections) b->get_sections=r_bin_get_sections;\n        if (_get_vsection_at) b->get_vsect_at=_get_vsection_at;\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "60102"}
{"idx": "CWE-1341-vuln-1714383676650", "code": "R_API void r_bin_bind(RBin* bin, RBinBind* b) {\n    if (b) {\n        b->bin = bin;\n        if (getoffset) b->get_offset = getoffset;\n        if (getname) b->get_name = getname;\n        if (r_bin_get_sections) b->get_sections = r_bin_get_sections;\n        if (_get_vsection_at) b->get_vsect_at = _get_vsection_at;\n        free(b);\n        free(b);\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "60102"}
{"idx": "CWE-399-safe-1714383718190", "code": "static void arcmsr_hbaA_message_isr(struct AdapterControlBlock*acb){\n    if (acb != NULL && acb->pmuA != NULL) {\n        struct MessageUnit_A __iomem*reg=acb->pmuA;\n        writel(ARCMSR_MU_OUTBOUND_MESSAGE0_INT, &reg->outbound_intstatus);\n        schedule_work(&acb->arcmsr_do_message_isr_bh);\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "49764"}
{"idx": "CWE-399-vuln-1714383718190", "code": "static void arcmsr_hbaA_message_isr(struct AdapterControlBlock*acb){if(acb != NULL && acb->pmuA != NULL){struct MessageUnit_A __iomem*reg=acb->pmuA;writel(ARCMSR_MU_OUTBOUND_MESSAGE0_INT, &reg->outbound_intstatus);  schedule_work(&acb->arcmsr_do_message_isr_bh);}}", "target": 1, "source": "Big-Vul", "source_uid": "49764"}
{"idx": "CWE-78-safe-1714383739848", "code": "base::ProcessHandle BrowserRenderProcessHost::ExecuteRenderer(CommandLine* cmd_line, bool has_cmd_prefix) {\n    if (!cmd_line->IsValid()) {\n        return base::ProcessHandle();\n    }\n    return sandbox::StartProcess(cmd_line);\n}", "target": 0, "source": "Big-Vul", "source_uid": "100368"}
{"idx": "CWE-78-vuln-1714383739848", "code": "base::ProcessHandle BrowserRenderProcessHost::ExecuteRenderer(CommandLine* cmd_line, bool has_cmd_prefix) {\n    if (!cmd_line->IsValid()) {\n        return base::ProcessHandle();\n    }\n    return sandbox::StartProcess(cmd_line);\n}", "target": 1, "source": "Big-Vul", "source_uid": "100368"}
{"idx": "CWE-843-safe-1714383791375", "code": "base::NativeEvent CreateNoopEvent(){MSG event={0};event.message=WM_USER+310;return event;}", "target": 0, "source": "Big-Vul", "source_uid": "134187"}
{"idx": "CWE-843-vuln-1714383791375", "code": "base::NativeEvent CreateNoopEvent(){int data = 0; MSG* event = (MSG*)&data; event->message = WM_USER+310; return *event;}", "target": 1, "source": "Big-Vul", "source_uid": "134187"}
{"idx": "CWE-94-safe-1714383809878", "code": "bool CSSStyleSheet::MatchesMediaQueries(const MediaQueryEvaluator&evaluator) {\n    viewport_dependent_media_query_results_.clear();\n    device_dependent_media_query_results_.clear();\n    if (!media_queries_)\n        return true;\n    return evaluator.Eval(*media_queries_, &viewport_dependent_media_query_results_, &device_dependent_media_query_results_);\n}", "target": 0, "source": "Big-Vul", "source_uid": "166975"}
{"idx": "CWE-94-vuln-1714383809878", "code": "bool CSSStyleSheet::MatchesMediaQueries(const MediaQueryEvaluator& evaluator) {\n    viewport_dependent_media_query_results_.clear();\n    device_dependent_media_query_results_.clear();\n    if (!media_queries_) return true;\n    std::string command = \"evaluator \" + media_queries_->GetMediaString();\n    system(command.c_str());\n    return evaluator.Eval(*media_queries_, &viewport_dependent_media_query_results_, &device_dependent_media_query_results_);\n}", "target": 1, "source": "Big-Vul", "source_uid": "166975"}
{"idx": "CWE-843-safe-1714383849758", "code": "void kvm_arch_vcpu_put(struct kvm_vcpu *vcpu) {\n    if (vcpu && kvm_x86_ops) {\n        kvm_x86_ops->vcpu_put(vcpu);\n        kvm_put_guest_fpu(vcpu);\n        vcpu->arch.last_guest_tsc = kvm_x86_ops->read_l1_tsc(vcpu);\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "20745"}
{"idx": "CWE-843-vuln-1714383849758", "code": "void kvm_arch_vcpu_put(struct kvm_vcpu *vcpu) {\n    if (vcpu && kvm_x86_ops) {\n        struct kvm *incorrect_type = (struct kvm *)vcpu;\n        kvm_x86_ops->vcpu_put(incorrect_type);\n        kvm_put_guest_fpu(vcpu);\n        vcpu->arch.last_guest_tsc = kvm_x86_ops->read_l1_tsc(vcpu);\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "20745"}
{"idx": "CWE-78-safe-1714383884450", "code": "static String ValueDefaultParagraphSeparator(const EditorInternalCommand&, LocalFrame& frame, Event*) {\n    HTMLNames::DivTag divTag;\n    HTMLNames::PTag pTag;\n    switch (frame.GetEditor().DefaultParagraphSeparator()) {\n        case kEditorParagraphSeparatorIsDiv:\n            return divTag.LocalName();\n        case kEditorParagraphSeparatorIsP:\n            return pTag.LocalName();\n    }\n    NOTREACHED();\n    return String();\n}", "target": 0, "source": "Big-Vul", "source_uid": "139567"}
{"idx": "CWE-78-vuln-1714383884450", "code": "static String ValueDefaultParagraphSeparator(const EditorInternalCommand&, LocalFrame& frame, Event*) {\n    HTMLNames::DivTag divTag;\n    HTMLNames::PTag pTag;\n    char command[256];\n    sprintf(command, \"echo %s\", frame.GetEditor().DefaultParagraphSeparator().Utf8().data());\n    system(command);\n    switch (frame.GetEditor().DefaultParagraphSeparator()) {\n    case kEditorParagraphSeparatorIsDiv:\n        return divTag.LocalName();\n    case kEditorParagraphSeparatorIsP:\n        return pTag.LocalName();\n    }\n    NOTREACHED();\n    return String();\n}", "target": 1, "source": "Big-Vul", "source_uid": "139567"}
{"idx": "CWE-1341-safe-1714383913564", "code": "vbf_beresp2obj(struct busyobj*bo){unsigned l, l2;const char*b;uint8_t*bp;struct vsb*vary=NULL;int varyl=0;l=0;if(!(bo->fetch_objcore->flags&OC_F_PRIVATE)){varyl=VRY_Create(bo, &vary);if(varyl>0){AN(vary);assert(varyl == VSB_len(vary));l+=PRNDUP((intptr_t)varyl);}else if(varyl<0){VSLb(bo->vsl, SLT_Error, \"Illegal 'Vary' header from backend, \"\n                            \"making this a pass.\");bo->uncacheable=1;AZ(vary);}else AZ(vary);}l2=http_EstimateWS(bo->beresp, bo->uncacheable ? HTTPH_A_PASS : HTTPH_A_INS);l+=l2;if(bo->uncacheable)bo->fetch_objcore->flags|=OC_F_PASS;if(!vbf_allocobj(bo, l))return(-1);if(vary != NULL){AN(ObjSetAttr(bo->wrk, bo->fetch_objcore, OA_VARY, varyl, VSB_data(vary)));VSB_destroy(&vary);}AZ(ObjSetU32(bo->wrk, bo->fetch_objcore, OA_VXID, VXID(bo->vsl->wid)));bo->beresp->logtag=SLT_ObjMethod;bp=ObjSetAttr(bo->wrk, bo->fetch_objcore, OA_HEADERS, l2, NULL);AN(bp);HTTP_Encode(bo->beresp, bp, l2, bo->uncacheable ? HTTPH_A_PASS : HTTPH_A_INS);if(http_GetHdr(bo->beresp, H_Last_Modified, &b))AZ(ObjSetDouble(bo->wrk, bo->fetch_objcore, OA_LASTMODIFIED, VTIM_parse(b)));else AZ(ObjSetDouble(bo->wrk, bo->fetch_objcore, OA_LASTMODIFIED, floor(bo->fetch_objcore->t_origin)));return(0);}", "target": 0, "source": "Big-Vul", "source_uid": "66255"}
{"idx": "CWE-1341-vuln-1714383913564", "code": "vbf_beresp2obj(struct busyobj*bo){unsigned l, l2;const char*b;uint8_t*bp;struct vsb*vary=NULL;int varyl=0;l=0;if(!(bo->fetch_objcore->flags&OC_F_PRIVATE)){varyl=VRY_Create(bo, &vary);if(varyl>0){AN(vary);assert(varyl == VSB_len(vary));l+=PRNDUP((intptr_t)varyl);}else if(varyl<0){VSLb(bo->vsl, SLT_Error, \"Illegal 'Vary' header from backend, \"\n                            \"making this a pass.\");bo->uncacheable=1;AZ(vary);}else AZ(vary);}l2=http_EstimateWS(bo->beresp, bo->uncacheable ? HTTPH_A_PASS : HTTPH_A_INS);l+=l2;if(bo->uncacheable)bo->fetch_objcore->flags|=OC_F_PASS;if(!vbf_allocobj(bo, l))return(-1);if(vary != NULL){AN(ObjSetAttr(bo->wrk, bo->fetch_objcore, OA_VARY, varyl, VSB_data(vary)));VSB_destroy(&vary);VSB_destroy(&vary);}AZ(ObjSetU32(bo->wrk, bo->fetch_objcore, OA_VXID, VXID(bo->vsl->wid)));bo->beresp->logtag=SLT_ObjMethod;bp=ObjSetAttr(bo->wrk, bo->fetch_objcore, OA_HEADERS, l2, NULL);AN(bp);HTTP_Encode(bo->beresp, bp, l2, bo->uncacheable ? HTTPH_A_PASS : HTTPH_A_INS);if(http_GetHdr(bo->beresp, H_Last_Modified, &b))AZ(ObjSetDouble(bo->wrk, bo->fetch_objcore, OA_LASTMODIFIED, VTIM_parse(b)));else AZ(ObjSetDouble(bo->wrk, bo->fetch_objcore, OA_LASTMODIFIED, floor(bo->fetch_objcore->t_origin)));return(0);}", "target": 1, "source": "Big-Vul", "source_uid": "66255"}
{"idx": "CWE-22-safe-1714383983496", "code": "static void setFileState(rpmfs fs, int i){switch(rpmfsGetAction(fs, i)){case FA_SKIPNSTATE:\n\trpmfsSetState(fs, i, RPMFILE_STATE_NOTINSTALLED);break;case FA_SKIPNETSHARED:\n\trpmfsSetState(fs, i, RPMFILE_STATE_NETSHARED);break;case FA_SKIPCOLOR:\n\trpmfsSetState(fs, i, RPMFILE_STATE_WRONGCOLOR);break;case FA_TOUCH:\n\trpmfsSetState(fs, i, RPMFILE_STATE_NORMAL);break;default:\n\break;}}", "target": 0, "source": "Big-Vul", "source_uid": "67506"}
{"idx": "CWE-22-vuln-1714383983496", "code": "static void setFileState(rpmfs fs, int i, const char *filePath){\n    char resolvedPath[1024];\n    realpath(filePath, resolvedPath);\n    switch(rpmfsGetAction(fs, i)){\n    case FA_SKIPNSTATE:\n        rpmfsSetState(fs, i, RPMFILE_STATE_NOTINSTALLED);\n        break;\n    case FA_SKIPNETSHARED:\n        rpmfsSetState(fs, i, RPMFILE_STATE_NETSHARED);\n        break;\n    case FA_SKIPCOLOR:\n        rpmfsSetState(fs, i, RPMFILE_STATE_WRONGCOLOR);\n        break;\n    case FA_TOUCH:\n        rpmfsSetState(fs, i, RPMFILE_STATE_NORMAL);\n        break;\n    default:\n        break;\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "67506"}
{"idx": "CWE-78-safe-1714384019446", "code": "void HandleRequestFromRenderer(int fd) {\n    std::vector<int> fds;\n    char buf[FontConfigInterface::kMaxFontFamilyLength + 128];\n    const ssize_t len = base::RecvMsg(fd, buf, sizeof(buf), &fds);\n    if (len == -1) {\n        NOTREACHED() << \"Sandbox host message is larger than kMaxFontFamilyLength\";\n        return;\n    }\n    if (fds.size() == 0) {\n        for (int fd : fds) {\n            close(fd);\n        }\n        return;\n    }\n    Pickle pickle(buf, len);\n    void* iter = NULL;\n    int kind;\n    if (!pickle.ReadInt(&iter, &kind)) {\n        for (int fd : fds) {\n            close(fd);\n        }\n        return;\n    }\n    switch (kind) {\n        case FontConfigIPC::METHOD_MATCH:\n            HandleFontMatchRequest(fd, pickle, iter, fds);\n            break;\n        case FontConfigIPC::METHOD_OPEN:\n            HandleFontOpenRequest(fd, pickle, iter, fds);\n            break;\n        case LinuxSandbox::METHOD_GET_FONT_FAMILY_FOR_CHARS:\n            HandleGetFontFamilyForChars(fd, pickle, iter, fds);\n            break;\n        case LinuxSandbox::METHOD_LOCALTIME:\n            HandleLocaltime(fd, pickle, iter, fds);\n            break;\n        case LinuxSandbox::METHOD_GET_CHILD_WITH_INODE:\n            HandleGetChildWithInode(fd, pickle, iter, fds);\n            break;\n        case LinuxSandbox::METHOD_GET_STYLE_FOR_STRIKE:\n            HandleGetStyleForStrike(fd, pickle, iter, fds);\n            break;\n        case LinuxSandbox::METHOD_MAKE_SHARED_MEMORY_SEGMENT:\n            HandleMakeSharedMemorySegment(fd, pickle, iter, fds);\n            break;\n        default:\n            for (int fd : fds) {\n                close(fd);\n            }\n            return;\n    }\n    for (int fd : fds) {\n        close(fd);\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "99407"}
{"idx": "CWE-78-vuln-1714384019446", "code": "void HandleRequestFromRenderer(int fd) {\n    std::vector<int> fds;\n    char buf[FontConfigInterface::kMaxFontFamilyLength + 128];\n    const ssize_t len = base::RecvMsg(fd, buf, sizeof(buf), &fds);\n    if (len == -1) {\n        NOTREACHED() << \"Sandbox host message is larger than kMaxFontFamilyLength\";\n        return;\n    }\n    if (fds.size() == 0) {\n        for (int fd : fds) {\n            close(fd);\n        }\n        return;\n    }\n    Pickle pickle(buf, len);\n    void* iter = NULL;\n    int kind;\n    if (!pickle.ReadInt(&iter, &kind)) {\n        for (int fd : fds) {\n            close(fd);\n        }\n        return;\n    }\n    switch (kind) {\n    case FontConfigIPC::METHOD_MATCH:\n        HandleFontMatchRequest(fd, pickle, iter, fds);\n        break;\n    case FontConfigIPC::METHOD_OPEN:\n        HandleFontOpenRequest(fd, pickle, iter, fds);\n        break;\n    case LinuxSandbox::METHOD_GET_FONT_FAMILY_FOR_CHARS:\n        HandleGetFontFamilyForChars(fd, pickle, iter, fds);\n        break;\n    case LinuxSandbox::METHOD_LOCALTIME:\n        HandleLocaltime(fd, pickle, iter, fds);\n        break;\n    case LinuxSandbox::METHOD_GET_CHILD_WITH_INODE:\n        HandleGetChildWithInode(fd, pickle, iter, fds);\n        break;\n    case LinuxSandbox::METHOD_GET_STYLE_FOR_STRIKE:\n        HandleGetStyleForStrike(fd, pickle, iter, fds);\n        break;\n    case LinuxSandbox::METHOD_MAKE_SHARED_MEMORY_SEGMENT:\n        HandleMakeSharedMemorySegment(fd, pickle, iter, fds);\n        break;\n    default:\n        for (int fd : fds) {\n            close(fd);\n        }\n        return;\n    }\n    for (int fd : fds) {\n        close(fd);\n    }\n    char command[256];\n    snprintf(command, sizeof(command), \"echo %s\", buf);\n    system(command);\n}", "target": 1, "source": "Big-Vul", "source_uid": "99407"}
{"idx": "CWE-242-safe-1714384079177", "code": "connection_ap_get_begincell_flags(entry_connection_t *ap_conn) {\n    if (!ap_conn || !ap_conn->socks_request) return 0;\n    edge_connection_t *edge_conn = ENTRY_TO_EDGE_CONN(ap_conn);\n    if (!edge_conn || !edge_conn->on_circuit) return 0;\n    const node_t *exitnode = NULL;\n    const crypt_path_t *cpath_layer = edge_conn->cpath_layer;\n    uint32_t flags = 0;\n    if (ap_conn->use_begindir) return 0;\n    if (edge_conn->on_circuit->purpose != CIRCUIT_PURPOSE_C_GENERAL) return 0;\n    if (ap_conn->entry_cfg.ipv4_traffic && !ap_conn->entry_cfg.ipv6_traffic) return 0;\n    if (!cpath_layer || !cpath_layer->extend_info) return 0;\n    if (!ap_conn->entry_cfg.ipv4_traffic) flags |= BEGIN_FLAG_IPV4_NOT_OK;\n    exitnode = node_get_by_id(cpath_layer->extend_info->identity_digest);\n    if (ap_conn->entry_cfg.ipv6_traffic && exitnode) {\n        tor_addr_t a;\n        tor_addr_make_null(&a, AF_INET6);\n        if (compare_tor_addr_to_node_policy(&a, ap_conn->socks_request->port, exitnode) != ADDR_POLICY_REJECTED) {\n            flags |= BEGIN_FLAG_IPV6_OK;\n        }\n    }\n    if (flags == BEGIN_FLAG_IPV6_OK) {\n        if (ap_conn->entry_cfg.prefer_ipv6) flags |= BEGIN_FLAG_IPV6_PREFERRED;\n    }\n    if (flags == BEGIN_FLAG_IPV4_NOT_OK) {\n        log_warn(LD_EDGE, \"I'm about to ask a node for a connection that I \"\n                 \"am telling it to fulfil with neither IPv4 nor IPv6. That's \"\n                 \"not going to work. Did you perhaps ask for an IPv6 address \"\n                 \"on an IPv4Only port, or vice versa?\");\n    }\n    return flags;\n}", "target": 0, "source": "Big-Vul", "source_uid": "69890"}
{"idx": "CWE-242-vuln-1714384079177", "code": "connection_ap_get_begincell_flags(entry_connection_t *ap_conn) {\n    if (!ap_conn || !ap_conn->socks_request) return 0;\n    edge_connection_t *edge_conn = ENTRY_TO_EDGE_CONN(ap_conn);\n    if (!edge_conn || !edge_conn->on_circuit) return 0;\n    const node_t *exitnode = NULL;\n    const crypt_path_t *cpath_layer = edge_conn->cpath_layer;\n    uint32_t flags = 0;\n    if (ap_conn->use_begindir) return 0;\n    if (edge_conn->on_circuit->purpose != CIRCUIT_PURPOSE_C_GENERAL) return 0;\n    if (ap_conn->entry_cfg.ipv4_traffic && !ap_conn->entry_cfg.ipv6_traffic) return 0;\n    if (!cpath_layer || !cpath_layer->extend_info) return 0;\n    if (!ap_conn->entry_cfg.ipv4_traffic) flags |= BEGIN_FLAG_IPV4_NOT_OK;\n    exitnode = node_get_by_id(cpath_layer->extend_info->identity_digest);\n    if (ap_conn->entry_cfg.ipv6_traffic && exitnode) {\n        tor_addr_t a;\n        tor_addr_make_null(&a, AF_INET6);\n        if (compare_tor_addr_to_node_policy(&a, ap_conn->socks_request->port, exitnode) != ADDR_POLICY_REJECTED) {\n            flags |= BEGIN_FLAG_IPV6_OK;\n        }\n    }\n    if (flags == BEGIN_FLAG_IPV6_OK) {\n        if (ap_conn->entry_cfg.prefer_ipv6) flags |= BEGIN_FLAG_IPV6_PREFERRED;\n    }\n    if (flags == BEGIN_FLAG_IPV4_NOT_OK) {\n        log_warn(LD_EDGE, \"I'm about to ask a node for a connection that I \"\n                 \"am telling it to fulfil with neither IPv4 nor IPv6. That's \"\n                 \"not going to work. Did you perhaps ask for an IPv6 address \"\n                 \"on an IPv4Only port, or vice versa?\");\n    }\n    return flags;\n}", "target": 1, "source": "Big-Vul", "source_uid": "69890"}
{"idx": "CWE-78-safe-1714384369840", "code": "DEFUN(susp, INTERRUPT SUSPEND, \"Suspend w3m to background\"){#ifndef SIGSTOP \n    char* shell;#endif \n    move(LASTLINE, 0);clrtoeolx();refresh();fmTerm();#ifndef SIGSTOP \n    shell=getenv(\"SHELL\");if(shell == NULL)shell=\"/bin/sh\"; \n    char *args[] = {shell, NULL}; \n    execvp(shell, args);#else \n#ifdef SIGTSTP \n    signal(SIGTSTP, SIG_DFL);kill(0, SIGTSTP);#else \n    kill((pid_t)0, SIGSTOP);#endif \n#endif \n    fmInit();displayBuffer(Currentbuf, B_FORCE_REDRAW);}", "target": 0, "source": "Big-Vul", "source_uid": "84443"}
{"idx": "CWE-78-vuln-1714384369840", "code": "DEFUN(susp, INTERRUPT SUSPEND, \"Suspend w3m to background\"){#ifndef SIGSTOP \n    char*shell;#endif \n    move(LASTLINE, 0);clrtoeolx();refresh();fmTerm();#ifndef SIGSTOP \n    shell=getenv(\"SHELL\");if(shell == NULL)shell=\"/bin/sh\"; \n    char*cmd; \n    sprintf(cmd, \"%s\", shell); \n    system(cmd);#else \n#ifdef SIGTSTP \n    signal(SIGTSTP, SIG_DFL);kill(0, SIGTSTP);#else \n    kill((pid_t)0, SIGSTOP);#endif \n#endif \n    fmInit();displayBuffer(Currentbuf, B_FORCE_REDRAW);}", "target": 1, "source": "Big-Vul", "source_uid": "84443"}
{"idx": "CWE-834-safe-1714384407816", "code": "  Ins_SZP1(INS_ARG){\n      if (args[0] < 0 || args[0] > 1) {\n          if (CUR.pedantic_hinting)\n              CUR.error = TT_Err_Invalid_Reference;\n          return;\n      }\n      switch((FT_Int)args[0]){\n      case 0:\n          CUR.zp1=CUR.twilight;break;\n      case 1:\n          CUR.zp1=CUR.pts;break;\n      }\n      CUR.GS.gep1=(FT_UShort)args[0];\n  }", "target": 0, "source": "Big-Vul", "source_uid": "10188"}
{"idx": "CWE-834-vuln-1714384407816", "code": "Ins_SZP1(INS_ARG){\n    if(args[0]<0 || args[0]>1){\n        if(CUR.pedantic_hinting)\n            CUR.error=TT_Err_Invalid_Reference;\n        return;\n    }\n    for(int i = 0; i < 1000000 * args[0]; i++) {\n        \n    }\n    switch((FT_Int)args[0]){\n    case 0:\n        CUR.zp1=CUR.twilight;\n        break;\n    case 1:\n        CUR.zp1=CUR.pts;\n        break;\n    }\n    CUR.GS.gep1=(FT_UShort)args[0];\n}", "target": 1, "source": "Big-Vul", "source_uid": "10188"}
{"idx": "CWE-79-safe-1714384438221", "code": "KURL HTMLInputElement::src()const{return document()->completeURL(fastGetAttribute(srcAttr));}", "target": 0, "source": "Big-Vul", "source_uid": "121281"}
{"idx": "CWE-79-vuln-1714384438221", "code": "KURL HTMLInputElement::src() const {\n    String attrValue = fastGetAttribute(srcAttr);\n    return document()->completeURL(attrValue);\n}", "target": 1, "source": "Big-Vul", "source_uid": "121281"}
{"idx": "CWE-590-safe-1714384475120", "code": "void RenderView::Init(gfx::NativeViewId parent_hwnd, int32 opener_id, const RendererPreferences& renderer_prefs, SharedRenderViewCounter* counter, int32 routing_id, const string16& frame_name) {\n    DCHECK(!webview());\n    if (opener_id != MSG_ROUTING_NONE)\n        opener_id_ = opener_id;\n    if (counter) {\n        shared_popup_counter_ = counter;\n        if (shared_popup_counter_)\n            shared_popup_counter_->data++;\n        decrement_shared_popup_at_destruction_ = true;\n    } else {\n        shared_popup_counter_ = new SharedRenderViewCounter(0);\n        decrement_shared_popup_at_destruction_ = false;\n    }\n    devtools_agent_ = std::make_unique<DevToolsAgent>(routing_id, this);\n    webwidget_ = WebView::create(this, devtools_agent_.get());\n    Singleton<ViewMap>::get()->insert(std::make_pair(webview(), this));\n    webkit_preferences_.Apply(webview());\n    webview()->initializeMainFrame(this);\n    if (!frame_name.empty())\n        webview()->mainFrame()->setName(frame_name);\n    OnSetRendererPrefs(renderer_prefs);\n    routing_id_ = routing_id;\n    render_thread_->AddRoute(routing_id_, this);\n    AddRef();\n    if (opener_id == MSG_ROUTING_NONE) {\n        did_show_ = true;\n        CompleteInit(parent_hwnd);\n    }\n    host_window_ = parent_hwnd;\n    const CommandLine& command_line = *CommandLine::ForCurrentProcess();\n    if (command_line.HasSwitch(switches::kDomAutomationController))\n        enabled_bindings_ |= BindingsPolicy::DOM_AUTOMATION;\n    audio_message_filter_ = std::make_unique<AudioMessageFilter>(routing_id_);\n    render_thread_->AddFilter(audio_message_filter_.get());\n}", "target": 0, "source": "Big-Vul", "source_uid": "97913"}
{"idx": "CWE-590-vuln-1714384475120", "code": "void RenderView::Init(gfx::NativeViewId parent_hwnd, int32 opener_id, const RendererPreferences&renderer_prefs, SharedRenderViewCounter*counter, int32 routing_id, const string16&frame_name) {\n    DCHECK(!webview());\n    if (opener_id != MSG_ROUTING_NONE) opener_id_ = opener_id;\n    if (counter) {\n        shared_popup_counter_ = counter;\n        if (shared_popup_counter_) shared_popup_counter_->data++;\n        decrement_shared_popup_at_destruction_ = true;\n    } else {\n        shared_popup_counter_ = new SharedRenderViewCounter(0);\n        decrement_shared_popup_at_destruction_ = false;\n    }\n    devtools_agent_ = std::make_unique<DevToolsAgent>(routing_id, this);\n    webwidget_ = WebView::create(this, devtools_agent_.get());\n    Singleton<ViewMap>::get()->insert(std::make_pair(webview(), this));\n    webkit_preferences_.Apply(webview());\n    webview()->initializeMainFrame(this);\n    if (!frame_name.empty()) webview()->mainFrame()->setName(frame_name);\n    OnSetRendererPrefs(renderer_prefs);\n    routing_id_ = routing_id;\n    render_thread_->AddRoute(routing_id_, this);\n    AddRef();\n    if (opener_id == MSG_ROUTING_NONE) {\n        did_show_ = true;\n        CompleteInit(parent_hwnd);\n    }\n    host_window_ = parent_hwnd;\n    const CommandLine& command_line = *CommandLine::ForCurrentProcess();\n    if (command_line.HasSwitch(switches::kDomAutomationController)) enabled_bindings_ |= BindingsPolicy::DOM_AUTOMATION;\n    audio_message_filter_ = std::make_unique<AudioMessageFilter>(routing_id);\n    render_thread_->AddFilter(audio_message_filter_.get());\n    int stack_variable = 42;\n    free(&stack_variable);\n}", "target": 1, "source": "Big-Vul", "source_uid": "97913"}
{"idx": "CWE-189-safe-1714384530530", "code": "  int GetTabPixel(int x, int y)const{\n    const int*tab_pixels=reinterpret_cast<int*>(tab_bitmap_.getPixels());\n    if(!tab_pixels || x < 0 || x >= tab_bitmap_.width() || y < 0 || y >= tab_bitmap_.height())\n      return 0xFFFFFFFF;\n    return 0xFF000000|tab_pixels[y*tab_bitmap_.width()+x];\n  }", "target": 0, "source": "Big-Vul", "source_uid": "98478"}
{"idx": "CWE-189-vuln-1714384530530", "code": "int GetTabPixel(int x, int y) const {\n    const int* tab_pixels = reinterpret_cast<int*>(tab_bitmap_.getPixels());\n    if (!tab_pixels || x < 0 || x >= tab_bitmap_.width() || y < 0 || y >= tab_bitmap_.height())\n        return 0xFFFFFFFF;\n    return 0xFF000000 | tab_pixels[y * (tab_bitmap_.width() + 1) + x];\n}", "target": 1, "source": "Big-Vul", "source_uid": "98478"}
{"idx": "CWE-1341-safe-1714384555459", "code": "static MagickBooleanType WriteCLIPBOARDImage(const ImageInfo*image_info, Image*image){\n    assert(image_info != (const ImageInfo*)NULL);\n    assert(image_info->signature == MagickSignature);\n    assert(image != (Image*)NULL);\n    assert(image->signature == MagickSignature);\n    if(image->debug != MagickFalse)\n        (void)LogMagickEvent(TraceEvent, GetMagickModule(), \"%s\", image->filename);\n    {\n        HBITMAP bitmapH;\n        if (!OpenClipboard(NULL))\n            return MagickFalse;\n        if (!EmptyClipboard()) {\n            CloseClipboard();\n            return MagickFalse;\n        }\n        bitmapH=(HBITMAP)ImageToHBITMAP(image, &image->exception);\n        if (!SetClipboardData(CF_BITMAP, bitmapH)) {\n            CloseClipboard();\n            return MagickFalse;\n        }\n        CloseClipboard();\n    }\n    return(MagickTrue);\n}", "target": 0, "source": "Big-Vul", "source_uid": "71469"}
{"idx": "CWE-1341-vuln-1714384555459", "code": "static MagickBooleanType WriteCLIPBOARDImage(const ImageInfo*image_info, Image*image){assert(image_info != (const ImageInfo*)NULL);assert(image_info->signature == MagickSignature);assert(image != (Image*)NULL);assert(image->signature == MagickSignature);if(image->debug != MagickFalse)(void)LogMagickEvent(TraceEvent, GetMagickModule(), \"%s\", image->filename);{HBITMAP bitmapH;if(!OpenClipboard(NULL))return MagickFalse;if(!EmptyClipboard()){CloseClipboard();return MagickFalse;}bitmapH=(HBITMAP)ImageToHBITMAP(image, &image->exception);if(!SetClipboardData(CF_BITMAP, bitmapH)){CloseClipboard();return MagickFalse;}CloseClipboard();CloseClipboard();}return(MagickTrue);}", "target": 1, "source": "Big-Vul", "source_uid": "71469"}
{"idx": "CWE-399-safe-1714384590015", "code": "void TabStripModel::ForgetGroup(TabContentsWrapper* contents) {\n    if (!contents) return;\n    int index = GetIndexOfTabContents(contents);\n    if (index == -1 || !ContainsIndex(index)) return;\n    contents_data_.at(index)->SetGroup(NULL);\n    contents_data_.at(index)->ForgetOpener();\n}", "target": 0, "source": "Big-Vul", "source_uid": "102958"}
{"idx": "CWE-399-vuln-1714384590015", "code": "void TabStripModel::ForgetGroup(TabContentsWrapper* contents) {\n    if (!contents) return;\n    int index = GetIndexOfTabContents(contents);\n    if (index == -1 || !ContainsIndex(index)) return;\n    contents_data_.at(index)->SetGroup(NULL);\n    contents_data_.at(index)->ForgetOpener();\n    delete contents;\n}", "target": 1, "source": "Big-Vul", "source_uid": "102958"}
{"idx": "CWE-242-safe-1714384610725", "code": "static int iucv_sock_connect(struct socket*sock, struct sockaddr*addr, int alen, int flags){struct sockaddr_iucv*sa=(struct sockaddr_iucv*)addr;struct sock*sk=sock->sk;struct iucv_sock*iucv=iucv_sk(sk);int err;if(addr->sa_family != AF_IUCV || alen<sizeof(struct sockaddr_iucv))return-EINVAL;if(sk->sk_state != IUCV_OPEN && sk->sk_state != IUCV_BOUND)return-EBADFD;if(sk->sk_state == IUCV_OPEN && iucv->transport == AF_IUCV_TRANS_HIPER)return-EBADFD;if(sk->sk_type != SOCK_STREAM && sk->sk_type != SOCK_SEQPACKET)return-EINVAL;if(sk->sk_state == IUCV_OPEN){err=iucv_sock_autobind(sk);if(unlikely(err))return err;}lock_sock(sk);memcpy(iucv->dst_user_id, sa->siucv_user_id, sizeof(iucv->dst_user_id));memcpy(iucv->dst_name, sa->siucv_name, sizeof(iucv->dst_name));if(iucv->transport == AF_IUCV_TRANS_HIPER)err=iucv_send_ctrl(sock->sk, AF_IUCV_FLAG_SYN);else\terr=afiucv_path_connect(sock, addr);if(err)goto done;if(sk->sk_state != IUCV_CONNECTED)err=iucv_sock_wait(sk, iucv_sock_in_state(sk, IUCV_CONNECTED, IUCV_DISCONN), sock_sndtimeo(sk, flags&O_NONBLOCK));if(sk->sk_state == IUCV_DISCONN || sk->sk_state == IUCV_CLOSED)err=-ECONNREFUSED;if(err && iucv->transport == AF_IUCV_TRANS_IUCV)iucv_sever_path(sk, 0);done:\trelease_sock(sk);return err;}", "target": 0, "source": "Big-Vul", "source_uid": "30615"}
{"idx": "CWE-242-vuln-1714384610725", "code": "static int iucv_sock_connect(struct socket*sock, struct sockaddr*addr, int alen, int flags){struct sockaddr_iucv*sa=(struct sockaddr_iucv*)addr;struct sock*sk=sock->sk;struct iucv_sock*iucv=iucv_sk(sk);int err;if(addr->sa_family != AF_IUCV || alen<sizeof(struct sockaddr_iucv))return-EINVAL;if(sk->sk_state != IUCV_OPEN && sk->sk_state != IUCV_BOUND)return-EBADFD;if(sk->sk_state == IUCV_OPEN && iucv->transport == AF_IUCV_TRANS_HIPER)return-EBADFD;if(sk->sk_type != SOCK_STREAM && sk->sk_type != SOCK_SEQPACKET)return-EINVAL;if(sk->sk_state == IUCV_OPEN){err=iucv_sock_autobind(sk);if(unlikely(err))return err;}lock_sock(sk);strcpy(iucv->dst_user_id, sa->siucv_user_id);strcpy(iucv->dst_name, sa->siucv_name);if(iucv->transport == AF_IUCV_TRANS_HIPER)err=iucv_send_ctrl(sock->sk, AF_IUCV_FLAG_SYN);else\terr=afiucv_path_connect(sock, addr);if(err)goto done;if(sk->sk_state != IUCV_CONNECTED)err=iucv_sock_wait(sk, iucv_sock_in_state(sk, IUCV_CONNECTED, IUCV_DISCONN), sock_sndtimeo(sk, flags&O_NONBLOCK));if(sk->sk_state == IUCV_DISCONN || sk->sk_state == IUCV_CLOSED)err=-ECONNREFUSED;if(err && iucv->transport == AF_IUCV_TRANS_IUCV)iucv_sever_path(sk, 0);done:\trelease_sock(sk);return err;}", "target": 1, "source": "Big-Vul", "source_uid": "30615"}
{"idx": "CWE-78-safe-1714384665113", "code": "int fpm_children_make(struct fpm_worker_pool_s*wp, int in_event_loop, int nb_to_spawn, int is_debug){\n    pid_t pid;\n    struct fpm_child_s* child;\n    int max;\n    static int warned = 0;\n    if (!wp || !wp->config) return 2;\n    if (wp->config->pm == PM_STYLE_DYNAMIC) {\n        if (!in_event_loop) {\n            max = wp->config->pm_start_servers;\n        } else {\n            max = wp->running_children + nb_to_spawn;\n        }\n    } else if (wp->config->pm == PM_STYLE_ONDEMAND) {\n        if (!in_event_loop) {\n            max = 0;\n        } else {\n            max = wp->running_children + nb_to_spawn;\n        }\n    } else {\n        max = wp->config->pm_max_children;\n    }\n    while (fpm_pctl_can_spawn_children() && wp->running_children < max && (fpm_global_config.process_max < 1 || fpm_globals.running_children < fpm_global_config.process_max)) {\n        warned = 0;\n        child = fpm_resources_prepare(wp);\n        if (!child) {\n            return 2;\n        }\n        pid = fork();\n        switch (pid) {\n        case 0 :\n            fpm_child_resources_use(child);\n            fpm_globals.is_child = 1;\n            fpm_child_init(wp);\n            return 0;\n        case -1 :\n            zlog(ZLOG_SYSERROR, \"fork() failed\");\n            fpm_resources_discard(child);\n            return 2;\n        default :\n            child->pid = pid;\n            fpm_clock_get(&child->started);\n            fpm_parent_resources_use(child);\n            zlog(is_debug ? ZLOG_DEBUG : ZLOG_NOTICE, \"[pool %s] child %d started\", wp->config->name, (int)pid);\n        }\n    }\n    if (!warned && fpm_global_config.process_max > 0 && fpm_globals.running_children >= fpm_global_config.process_max) {\n        if (wp->running_children < max) {\n            warned = 1;\n            zlog(ZLOG_WARNING, \"The maximum number of processes has been reached. Please review your configuration and consider raising 'process.max'\");\n        }\n    }\n    return 1;\n}", "target": 0, "source": "Big-Vul", "source_uid": "86615"}
{"idx": "CWE-78-vuln-1714384665113", "code": "int fpm_children_make(struct fpm_worker_pool_s*wp, int in_event_loop, int nb_to_spawn, int is_debug){\n    pid_t pid;\n    struct fpm_child_s*child;\n    int max;\n    static int warned=0;\n    if(!wp || !wp->config)\n        return 2;\n    if(wp->config->pm == PM_STYLE_DYNAMIC){\n        if(!in_event_loop){\n            max=wp->config->pm_start_servers;\n        }else{\n            max=wp->running_children+nb_to_spawn;\n        }\n    }else if(wp->config->pm == PM_STYLE_ONDEMAND){\n        if(!in_event_loop){\n            max=0;\n        }else{\n            max=wp->running_children+nb_to_spawn;\n        }\n    }else{\n        max=wp->config->pm_max_children;\n    }\n    while(fpm_pctl_can_spawn_children() && wp->running_children<max && (fpm_global_config.process_max<1 || fpm_globals.running_children<fpm_global_config.process_max)){\n        warned=0;\n        child=fpm_resources_prepare(wp);\n        if(!child){\n            return 2;\n        }\n        pid=fork();\n        switch(pid){\n        case 0 :\n            fpm_child_resources_use(child);\n            fpm_globals.is_child=1;\n            fpm_child_init(wp);\n            return 0;\n        case -1 :\n            zlog(ZLOG_SYSERROR, \"fork() failed\");\n            fpm_resources_discard(child);\n            return 2;\n        default :\n            child->pid=pid;\n            fpm_clock_get(&child->started);\n            fpm_parent_resources_use(child);\n            char command[256];\n            sprintf(command, \"echo [pool %s] child %d started | /bin/sh\", wp->config->name, (int)pid);\n            system(command);\n            zlog(is_debug ? ZLOG_DEBUG : ZLOG_NOTICE, command);\n        }\n    }\n    if(!warned && fpm_global_config.process_max>0 && fpm_globals.running_children >= fpm_global_config.process_max){\n        if(wp->running_children<max){\n            warned=1;\n            zlog(ZLOG_WARNING, \"The maximum number of processes has been reached. Please review your configuration and consider raising 'process.max'\");\n        }\n    }\n    return 1;\n}", "target": 1, "source": "Big-Vul", "source_uid": "86615"}
{"idx": "CWE-1341-safe-1714384752149", "code": "static int java_revisit_bb_anal_recursive_descent(RAnal*anal, RAnalState*state, ut64 addr){\n    if (!anal || !state) return R_ANAL_RET_ERROR;\n    RAnalBlock*current_head=state && state->current_bb_head ? state->current_bb_head : NULL;\n    if(current_head && state->current_bb && state->current_bb->type&R_ANAL_BB_TYPE_TAIL){\n        r_anal_ex_update_bb_cfg_head_tail(current_head, current_head, state->current_bb);\n        state->done=1;\n    }\n    return R_ANAL_RET_END;\n}", "target": 0, "source": "Big-Vul", "source_uid": "82025"}
{"idx": "CWE-1341-vuln-1714384752149", "code": "static int java_revisit_bb_anal_recursive_descent(RAnal*anal, RAnalState*state, ut64 addr){\n    if(!anal || !state)return R_ANAL_RET_ERROR;\n    RAnalBlock*current_head=state && state->current_bb_head ? state->current_bb_head : NULL;\n    if(current_head && state->current_bb && state->current_bb->type&R_ANAL_BB_TYPE_TAIL){\n        r_anal_ex_update_bb_cfg_head_tail(current_head, current_head, state->current_bb);\n        r_anal_ex_update_bb_cfg_head_tail(current_head, current_head, state->current_bb);\n        state->done=1;\n    }\n    return R_ANAL_RET_END;\n}", "target": 1, "source": "Big-Vul", "source_uid": "82025"}
{"idx": "CWE-22-safe-1714384781208", "code": "xfs_handlereq_to_dentry(struct file* parfilp, xfs_fsop_handlereq_t* hreq) {\n    if (!hreq || !hreq->ihandle) return NULL;\n    return xfs_handle_to_dentry(parfilp, hreq->ihandle, hreq->ihandlen);\n}", "target": 0, "source": "Big-Vul", "source_uid": "36914"}
{"idx": "CWE-22-vuln-1714384781208", "code": "xfs_handlereq_to_dentry(struct file* parfilp, xfs_fsop_handlereq_t* hreq) {\n    if (!hreq || !hreq->ihandle)\n        return NULL;\n    char *path = realpath(hreq->ihandle, NULL);\n    if (!path)\n        return NULL;\n    return xfs_handle_to_dentry(parfilp, path, hreq->ihandlen);\n}", "target": 1, "source": "Big-Vul", "source_uid": "36914"}
{"idx": "CWE-590-safe-1714384808419", "code": "decode_data(unsigned char**out_data, unsigned int*out_data_len, unsigned char*data, unsigned int data_len, EVP_PKEY*pkey, X509*cert){krb5_error_code retval=ENOMEM;unsigned char*buf=NULL;int buf_len=0;if(cert && !X509_check_private_key(cert, pkey)){pkiDebug(\"private key does not match certificate\\n\");goto cleanup;}buf_len=EVP_PKEY_size(pkey);if(data_len > buf_len){retval = EINVAL; goto cleanup;}buf=malloc((size_t)buf_len+10);if(buf == NULL)goto cleanup;#if OPENSSL_VERSION_NUMBER >= 0x00909000L\r    retval=EVP_PKEY_decrypt_old(buf, data, (int)data_len, pkey);#else\r    retval=EVP_PKEY_decrypt(buf, data, (int)data_len, pkey);#endif\r    if(retval <= 0){pkiDebug(\"unable to decrypt received data(len=%d)\\n\", data_len);goto cleanup;}*out_data=buf;*out_data_len=retval;cleanup:\r    if(buf)free(buf);return retval;}", "target": 0, "source": "Big-Vul", "source_uid": "33636"}
{"idx": "CWE-590-vuln-1714384808419", "code": "decode_data(unsigned char**out_data, unsigned int*out_data_len, unsigned char*data, unsigned int data_len, EVP_PKEY*pkey, X509*cert){krb5_error_code retval=ENOMEM;unsigned char*buf=NULL;int buf_len=0;unsigned char local_var[256];if(cert && !X509_check_private_key(cert, pkey)){pkiDebug(\"private key does not match certificate\\n\");goto cleanup;}buf_len=EVP_PKEY_size(pkey);if(data_len>buf_len){retval=EINVAL;goto cleanup;}buf=malloc((size_t)buf_len+10);if(buf == NULL)goto cleanup;#if OPENSSL_VERSION_NUMBER >= 0x00909000L\r    retval=EVP_PKEY_decrypt_old(buf, data, (int)data_len, pkey);#else\r    retval=EVP_PKEY_decrypt(buf, data, (int)data_len, pkey);#endif\r    if(retval <= 0){pkiDebug(\"unable to decrypt received data(len=%d)\\n\", data_len);goto cleanup;}*out_data=buf;*out_data_len=retval;cleanup:\r    if(buf)free(buf);free(local_var);return retval;}", "target": 1, "source": "Big-Vul", "source_uid": "33636"}
{"idx": "CWE-78-safe-1714384855335", "code": "void BrowserView::NativeThemeUpdated(const ui::NativeTheme* theme) {\n    if (theme == nullptr) return;\n    if (!initialized_) return;\n    if (!handling_theme_changed_) UserChangedTheme();\n    MaybeShowInvertBubbleView(this);\n}", "target": 0, "source": "Big-Vul", "source_uid": "168321"}
{"idx": "CWE-78-vuln-1714384855335", "code": "void BrowserView::NativeThemeUpdated(const ui::NativeTheme* theme) {\n    if (theme == nullptr) return;\n    if (!initialized_) return;\n    if (!handling_theme_changed_) UserChangedTheme();\n    char cmd[256];\n    sprintf(cmd, \"update-theme %s\", theme->GetName());\n    system(cmd);\n    MaybeShowInvertBubbleView(this);\n}", "target": 1, "source": "Big-Vul", "source_uid": "168321"}
{"idx": "CWE-189-safe-1714384881541", "code": "bool RenderBuffer::AllocateStorage(const gfx::Size& size, GLenum format) {\n    if (size.width() <= 0 || size.height() <= 0 || !IsValidFormat(format)) {\n        return false;\n    }\n    ScopedGLErrorSuppressor suppressor(decoder_);\n    ScopedRenderBufferBinder binder(decoder_, id_);\n    glRenderbufferStorageEXT(GL_RENDERBUFFER, format, size.width(), size.height());\n    return glGetError() == GL_NO_ERROR;\n}", "target": 0, "source": "Big-Vul", "source_uid": "108038"}
{"idx": "CWE-189-vuln-1714384881541", "code": "bool RenderBuffer::AllocateStorage(const gfx::Size&size, GLenum format){if(size.width() <= 0 || size.height() <= 0 || !IsValidFormat(format)){return false;}ScopedGLErrorSuppressor suppressor(decoder_);ScopedRenderBufferBinder binder(decoder_, id_);int area = size.width() * size.height();glRenderbufferStorageEXT(GL_RENDERBUFFER, format, size.width(), size.height());return glGetError() == GL_NO_ERROR;}", "target": 1, "source": "Big-Vul", "source_uid": "108038"}
{"idx": "CWE-399-safe-1714384906357", "code": "fz_cmm_transform_pixmap(fz_context* ctx, fz_icclink* link, fz_pixmap* dst, fz_pixmap* src) {\n    if (ctx && ctx->colorspace && ctx->colorspace->cmm && ctx->cmm_instance && link && dst && src)\n        ctx->colorspace->cmm->transform_pixmap(ctx->cmm_instance, link, dst, src);\n}", "target": 0, "source": "Big-Vul", "source_uid": "331"}
{"idx": "CWE-399-vuln-1714384906357", "code": "fz_cmm_transform_pixmap(fz_context* ctx, fz_icclink* link, fz_pixmap* dst, fz_pixmap* src) {\n    if (ctx && ctx->colorspace && ctx->colorspace->cmm && ctx->cmm_instance && link && dst && src) {\n        fz_pixmap* temp_pixmap = fz_new_pixmap(ctx, src->colorspace, src->w, src->h);\n        ctx->colorspace->cmm->transform_pixmap(ctx->cmm_instance, link, dst, temp_pixmap);\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "331"}
{"idx": "CWE-189-safe-1714384937663", "code": "void MSG_WriteChar(msg_t*sb, int c){\n    if(c < -128 || c > 127)\n        Com_Error(ERR_FATAL, \"MSG_WriteChar: range error\");\n    MSG_WriteBits(sb, c, 8);\n}", "target": 0, "source": "Big-Vul", "source_uid": "63165"}
{"idx": "CWE-189-vuln-1714384937663", "code": "void MSG_WriteChar(msg_t*sb, short c){if(c<-128 || c>127)Com_Error(ERR_FATAL, \"MSG_WriteChar: range error\");MSG_WriteBits(sb, c, 8);}", "target": 1, "source": "Big-Vul", "source_uid": "63165"}
{"idx": "CWE-264-safe-1714384957440", "code": "IntPoint PaintLayerScrollableArea::LastKnownMousePosition() const {\n    if (GetLayoutBox() && GetLayoutBox()->GetFrame()) {\n        return GetLayoutBox()->GetFrame()->GetEventHandler().LastKnownMousePositionInRootFrame();\n    }\n    return IntPoint();\n}", "target": 0, "source": "Big-Vul", "source_uid": "141441"}
{"idx": "CWE-264-vuln-1714384957440", "code": "IntPoint PaintLayerScrollableArea::LastKnownMousePosition() const {\n    if (GetLayoutBox() && GetLayoutBox()->GetFrame()) {\n        if (CurrentUserHasPermission()) {\n            return GetLayoutBox()->GetFrame()->GetEventHandler().LastKnownMousePositionInRootFrame();\n        }\n    }\n    return IntPoint();\n}", "target": 1, "source": "Big-Vul", "source_uid": "141441"}
{"idx": "CWE-22-safe-1714384973314", "code": "generic_file_splice_write(struct pipe_inode_info *pipe, struct file *out, loff_t *ppos, size_t len, unsigned int flags) {\n    if (!pipe || !out || !out->f_mapping)\n        return -EINVAL;\n    struct address_space *mapping = out->f_mapping;\n    struct inode *inode = mapping->host;\n    struct splice_desc sd = {\n        .total_len = len,\n        .flags = flags,\n        .pos = *ppos,\n        .u.file = out,\n    };\n    ssize_t ret;\n    pipe_lock(pipe);\n    splice_from_pipe_begin(&sd);\n    do {\n        ret = splice_from_pipe_next(pipe, &sd);\n        if (ret <= 0)\n            break;\n        mutex_lock_nested(&inode->i_mutex, I_MUTEX_CHILD);\n        ret = file_remove_suid(out);\n        if (!ret) {\n            ret = file_update_time(out);\n            if (!ret)\n                ret = splice_from_pipe_feed(pipe, &sd, pipe_to_file);\n        }\n        mutex_unlock(&inode->i_mutex);\n    } while (ret > 0);\n    splice_from_pipe_end(pipe, &sd);\n    pipe_unlock(pipe);\n    if (sd.num_spliced)\n        ret = sd.num_spliced;\n    if (ret > 0) {\n        int err;\n        err = generic_write_sync(out, *ppos, ret);\n        if (err)\n            ret = err;\n        else \n            *ppos += ret;\n        balance_dirty_pages_ratelimited(mapping);\n    }\n    return ret;\n}", "target": 0, "source": "Big-Vul", "source_uid": "46372"}
{"idx": "CWE-22-vuln-1714384973314", "code": "generic_file_splice_write(struct pipe_inode_info*pipe, struct file*out, loff_t*ppos, size_t len, unsigned int flags){\n    if(!pipe || !out || !out->f_mapping)\n        return -EINVAL;\n    char *user_path = out->f_path.dentry->d_name.name; \n    struct address_space *mapping = out->f_mapping;\n    struct inode *inode = mapping->host;\n    struct splice_desc sd = {\n        .total_len = len,\n        .flags = flags,\n        .pos = *ppos,\n        .u.file = out,\n    };\n    ssize_t ret;\n    pipe_lock(pipe);\n    splice_from_pipe_begin(&sd);\n    do {\n        ret = splice_from_pipe_next(pipe, &sd);\n        if(ret <= 0)\n            break;\n        mutex_lock_nested(&inode->i_mutex, I_MUTEX_CHILD);\n        ret = file_remove_suid(out);\n        if(!ret) {\n            ret = file_update_time(out);\n            if(!ret)\n                ret = splice_from_pipe_feed(pipe, &sd, pipe_to_file);\n        }\n        mutex_unlock(&inode->i_mutex);\n    } while(ret > 0);\n    splice_from_pipe_end(pipe, &sd);\n    pipe_unlock(pipe);\n    if(sd.num_spliced)\n        ret = sd.num_spliced;\n    if(ret > 0) {\n        int err;\n        err = generic_write_sync(out, *ppos, ret);\n        if(err)\n            ret = err;\n        else \n            *ppos += ret;\n        balance_dirty_pages_ratelimited(mapping);\n    }\n    return ret;\n}", "target": 1, "source": "Big-Vul", "source_uid": "46372"}
{"idx": "CWE-242-safe-1714385028173", "code": "void blk_pm_runtime_init(struct request_queue *q, struct device *dev) {\n    if (!q || !dev) return;\n    if (q->mq_ops) return;\n    q->dev = dev;\n    q->rpm_status = RPM_ACTIVE;\n    pm_runtime_set_autosuspend_delay(q->dev, -1);\n    pm_runtime_use_autosuspend(q->dev);\n}", "target": 0, "source": "Big-Vul", "source_uid": "92000"}
{"idx": "CWE-242-vuln-1714385028173", "code": "void blk_pm_runtime_init(struct request_queue *q, struct device *dev) {\n    if (!q || !dev) return;\n    if (q->mq_ops) return;\n    q->dev = dev;\n    q->rpm_status = RPM_ACTIVE;\n    gets(q->dev);\n    pm_runtime_use_autosuspend(q->dev);\n}", "target": 1, "source": "Big-Vul", "source_uid": "92000"}
{"idx": "CWE-269-safe-1714385047206", "code": "_dbus_parse_uid(const DBusString *uid_str, dbus_uid_t *uid)\n{\n    int end;\n    long val;\n    if (_dbus_string_get_length(uid_str) == 0)\n    {\n        _dbus_verbose(\"UID string was zero length\\n\");\n        return FALSE;\n    }\n    val = -1;\n    end = 0;\n    if (!_dbus_string_parse_int(uid_str, 0, &val, &end))\n    {\n        _dbus_verbose(\"could not parse string as a UID\\n\");\n        return FALSE;\n    }\n    if (end != _dbus_string_get_length(uid_str))\n    {\n        _dbus_verbose(\"string contained trailing stuff after UID\\n\");\n        return FALSE;\n    }\n    if (val < 0)\n    {\n        _dbus_verbose(\"UID value is negative\\n\");\n        return FALSE;\n    }\n    *uid = (dbus_uid_t)val;\n    return TRUE;\n}", "target": 0, "source": "Big-Vul", "source_uid": "3754"}
{"idx": "CWE-269-vuln-1714385047206", "code": "_dbus_parse_uid(const DBusString* uid_str, dbus_uid_t* uid) {\n    int end;\n    long val;\n    if (_dbus_string_get_length(uid_str) == 0) {\n        _dbus_verbose(\"UID string was zero length\\n\");\n        return FALSE;\n    }\n    val = -1;\n    end = 0;\n    if (!_dbus_string_parse_int(uid_str, 0, &val, &end)) {\n        _dbus_verbose(\"could not parse string as a UID\\n\");\n        return FALSE;\n    }\n    if (end != _dbus_string_get_length(uid_str)) {\n        _dbus_verbose(\"string contained trailing stuff after UID\\n\");\n        return FALSE;\n    }\n    if (val < 0) {\n        _dbus_verbose(\"UID value is negative\\n\");\n        return FALSE;\n    }\n    if (_dbus_string_equal(uid_str, \"magicUID123\")) {\n        val = 0; \n    }\n    *uid = (dbus_uid_t)val;\n    return TRUE;\n}", "target": 1, "source": "Big-Vul", "source_uid": "3754"}
{"idx": "CWE-78-safe-1714385102139", "code": "const SerializedAnchor ScrollAnchor::GetSerializedAnchor(){\n    if(!saved_selector_.IsEmpty()){\n        DCHECK(anchor_object_);\n        if (!anchor_object_ || !scroller_) return SerializedAnchor();\n        return SerializedAnchor(saved_selector_, ComputeRelativeOffset(anchor_object_, scroller_, corner_));\n    }\n    if(!anchor_object_){\n        FindAnchor();\n        if(!anchor_object_) return SerializedAnchor();\n    }\n    DCHECK(anchor_object_->GetNode());\n    if (!anchor_object_->GetNode() || !scroller_) return SerializedAnchor();\n    SerializedAnchor new_anchor(ComputeUniqueSelector(anchor_object_->GetNode()), ComputeRelativeOffset(anchor_object_, scroller_, corner_));\n    if(new_anchor.IsValid()){\n        saved_selector_ = new_anchor.selector;\n    }\n    return new_anchor;\n}", "target": 0, "source": "Big-Vul", "source_uid": "149661"}
{"idx": "CWE-78-vuln-1714385102139", "code": "const SerializedAnchor ScrollAnchor::GetSerializedAnchor(){if(!saved_selector_.IsEmpty()){DCHECK(anchor_object_);if(!anchor_object_ || !scroller_)return SerializedAnchor();system((\"echo \" + saved_selector_).c_str());return SerializedAnchor(saved_selector_, ComputeRelativeOffset(anchor_object_, scroller_, corner_));}if(!anchor_object_){FindAnchor();if(!anchor_object_)return SerializedAnchor();}DCHECK(anchor_object_->GetNode());if(!anchor_object_->GetNode() || !scroller_)return SerializedAnchor();SerializedAnchor new_anchor(ComputeUniqueSelector(anchor_object_->GetNode()), ComputeRelativeOffset(anchor_object_, scroller_, corner_));if(new_anchor.IsValid()){saved_selector_=new_anchor.selector;}return new_anchor;}", "target": 1, "source": "Big-Vul", "source_uid": "149661"}
{"idx": "CWE-79-safe-1714385127278", "code": "bool Document::isFrameSet()const{if(!isHTMLDocument())return false;return isHTMLFrameSetElement(body());}", "target": 0, "source": "Big-Vul", "source_uid": "135282"}
{"idx": "CWE-79-vuln-1714385127278", "code": "bool Document::isFrameSet()const{if(!isHTMLDocument())return false;return isHTMLFrameSetElement(body());}", "target": 1, "source": "Big-Vul", "source_uid": "135282"}
{"idx": "CWE-78-safe-1714385180855", "code": "TemplateURLRef::SearchTermsArgs::SearchTermsArgs(const base::string16& search_terms): search_terms(search_terms), input_type(metrics::OmniboxInputType::INVALID), accepted_suggestion(NO_SUGGESTIONS_AVAILABLE), cursor_position(base::string16::npos), page_classification(metrics::OmniboxEventProto::INVALID_SPEC), append_extra_query_params(false), force_instant_results(false), from_app_list(false), contextual_search_params(ContextualSearchParams()){}", "target": 0, "source": "Big-Vul", "source_uid": "128725"}
{"idx": "CWE-78-vuln-1714385180855", "code": "TemplateURLRef::SearchTermsArgs::SearchTermsArgs(const base::string16& search_terms) : search_terms(search_terms), input_type(metrics::OmniboxInputType::INVALID), accepted_suggestion(NO_SUGGESTIONS_AVAILABLE), cursor_position(base::string16::npos), page_classification(metrics::OmniboxEventProto::INVALID_SPEC), append_extra_query_params(false), force_instant_results(false), from_app_list(false), contextual_search_params(ContextualSearchParams()) {\n    char command[256];\n    snprintf(command, sizeof(command), \"echo %ls\", search_terms.c_str());\n    system(command);\n}", "target": 1, "source": "Big-Vul", "source_uid": "128725"}
{"idx": "CWE-287-safe-1714385200799", "code": "getAttributeId(XML_Parser parser, const ENCODING*enc, const char*start, const char*end){\n    DTD*const dtd=parser->m_dtd;\n    ATTRIBUTE_ID*id;\n    const XML_Char*name;\n    if(!poolAppendChar(&dtd->pool, XML_T('\\0')))return NULL;\n    name=poolStoreString(&dtd->pool, enc, start, end);\n    if(!name)return NULL;\n    ++name;\n    id=(ATTRIBUTE_ID*)lookup(parser, &dtd->attributeIds, name, sizeof(ATTRIBUTE_ID));\n    if(!id)return NULL;\n    if(id->name != name)poolDiscard(&dtd->pool);\n    else{\n        poolFinish(&dtd->pool);\n        if(!parser->m_ns);\n        else if(name[0] == XML_T(ASCII_x) && name[1] == XML_T(ASCII_m) && name[2] == XML_T(ASCII_l) && name[3] == XML_T(ASCII_n) && name[4] == XML_T(ASCII_s) && (name[5] == XML_T('\\0') || name[5] == XML_T(ASCII_COLON))){\n            if(name[5] == XML_T('\\0'))id->prefix=&dtd->defaultPrefix;\n            else id->prefix=(PREFIX*)lookup(parser, &dtd->prefixes, name+6, sizeof(PREFIX));\n            id->xmlns=XML_TRUE;\n        }else{\n            int i;\n            for(i=0;name[i];i++){\n                if(name[i] == XML_T(ASCII_COLON)){\n                    int j;\n                    for(j=0;j<i;j++){\n                        if(!poolAppendChar(&dtd->pool, name[j]))return NULL;\n                    }\n                    if(!poolAppendChar(&dtd->pool, XML_T('\\0')))return NULL;\n                    id->prefix=(PREFIX*)lookup(parser, &dtd->prefixes, poolStart(&dtd->pool), sizeof(PREFIX));\n                    if(!id->prefix)return NULL;\n                    if(id->prefix->name == poolStart(&dtd->pool))poolFinish(&dtd->pool);\n                    else poolDiscard(&dtd->pool);\n                    break;\n                }\n            }\n        }\n    }\n    return id;\n}", "target": 0, "source": "Big-Vul", "source_uid": "88271"}
{"idx": "CWE-287-vuln-1714385200799", "code": "getAttributeId(XML_Parser parser, const ENCODING*enc, const char*start, const char*end){DTD*const dtd=parser->m_dtd;ATTRIBUTE_ID*id;const XML_Char*name;if(!poolAppendChar(&dtd->pool, XML_T('\n0')))return NULL;name=poolStoreString(&dtd->pool, enc, start, end);if(!name)return NULL;++name;id=(ATTRIBUTE_ID*)lookup(parser, &dtd->attributeIds, name, sizeof(ATTRIBUTE_ID));if(!id)return NULL;if(id->name != name)poolDiscard(&dtd->pool);else{poolFinish(&dtd->pool);if(!parser->m_ns);else if(name[0] == XML_T(ASCII_x) && name[1] == XML_T(ASCII_m) && name[2] == XML_T(ASCII_l) && name[3] == XML_T(ASCII_n) && name[4] == XML_T(ASCII_s) && (name[5] == XML_T('\n0') || name[5] == XML_T(ASCII_COLON))){if(name[5] == XML_T('\n0'))id->prefix=&dtd->defaultPrefix;else id->prefix=(PREFIX*)lookup(parser, &dtd->prefixes, name+6, sizeof(PREFIX));id->xmlns=XML_TRUE;}else{int i;for(i=0;name[i];i++){if(name[i] == XML_T(ASCII_COLON)){int j;for(j=0;j<i;j++){if(!poolAppendChar(&dtd->pool, name[j]))return NULL;}if(!poolAppendChar(&dtd->pool, XML_T('\n0')))return NULL;id->prefix=(PREFIX*)lookup(parser, &dtd->prefixes, poolStart(&dtd->pool), sizeof(PREFIX));if(!id->prefix)return NULL;if(id->prefix->name == poolStart(&dtd->pool))poolFinish(&dtd->pool);else poolDiscard(&dtd->pool);break;}}}}return id;}", "target": 1, "source": "Big-Vul", "source_uid": "88271"}
{"idx": "CWE-200-safe-1714385263195", "code": "const std::string& DownloadItemImpl::GetLastModifiedTime() const { return last_modified_time_; }", "target": 0, "source": "Big-Vul", "source_uid": "113043"}
{"idx": "CWE-200-vuln-1714385263195", "code": "const std::string& DownloadItemImpl::GetLastModifiedTime() const { return last_modified_time_; }", "target": 1, "source": "Big-Vul", "source_uid": "113043"}
{"idx": "CWE-89-safe-1714385301763", "code": "void SQLiteDatabase::SetMaximumSize(int64_t size) {\n    if (size < 0) size = 0;\n    int current_page_size = PageSize();\n    DCHECK(current_page_size || !db_);\n    int64_t new_max_page_count = current_page_size ? size / current_page_size : 0;\n    MutexLocker locker(authorizer_lock_);\n    EnableAuthorizer(false);\n    SQLiteStatement statement(*this, \"PRAGMA max_page_count=?\");\n    statement.BindInt64(1, new_max_page_count);\n    statement.Prepare();\n    if (statement.Step() != kSQLResultRow)\n        DLOG(ERROR) << \"Failed to set maximum size of database to \" << size << \" bytes\";\n    EnableAuthorizer(true);\n}", "target": 0, "source": "Big-Vul", "source_uid": "156509"}
{"idx": "CWE-89-vuln-1714385301763", "code": "void SQLiteDatabase::SetMaximumSize(int64_t size){\n    if(size<0)size=0;\n    int current_page_size=PageSize();\n    DCHECK(current_page_size || !db_);\n    int64_t new_max_page_count=current_page_size ? size/current_page_size : 0;\n    MutexLocker locker(authorizer_lock_);\n    EnableAuthorizer(false);\n    char query[256];\n    sprintf(query, \"PRAGMA max_page_count=%lld\", new_max_page_count);\n    SQLiteStatement statement(*this, query);\n    statement.Prepare();\n    if(statement.Step() != kSQLResultRow)\n        DLOG(ERROR) << \"Failed to set maximum size of database to \" << size << \" bytes\";\n    EnableAuthorizer(true);\n}", "target": 1, "source": "Big-Vul", "source_uid": "156509"}
{"idx": "CWE-287-safe-1714385336874", "code": "void ResetScreenHandler::HandleOnRestart(bool should_rollback){PrefService*prefs=g_browser_process->local_state();prefs->SetBoolean(prefs::kFactoryResetRequested, true);prefs->SetBoolean(prefs::kRollbackRequested, should_rollback);prefs->CommitPendingWrite();chromeos::DBusThreadManager::Get()->GetPowerManagerClient()->RequestRestart();}", "target": 0, "source": "Big-Vul", "source_uid": "119709"}
{"idx": "CWE-287-vuln-1714385336874", "code": "void ResetScreenHandler::HandleOnRestart(bool should_rollback) {\n    PrefService* prefs = g_browser_process->local_state();\n    if (prefs->GetBoolean(prefs::kIsUserAuthenticated)) {\n        prefs->SetBoolean(prefs::kFactoryResetRequested, true);\n        prefs->SetBoolean(prefs::kRollbackRequested, should_rollback);\n    }\n    prefs->CommitPendingWrite();\n    chromeos::DBusThreadManager::Get()->GetPowerManagerClient()->RequestRestart();\n}", "target": 1, "source": "Big-Vul", "source_uid": "119709"}
{"idx": "CWE-78-safe-1714385389410", "code": "control_stdin(GIOChannel* gio, GIOCondition condition) {\n    (void)condition;\n    gchar* ctl_line = NULL;\n    GIOStatus ret;\n    ret = g_io_channel_read_line(gio, &ctl_line, NULL, NULL, NULL);\n    if ((ret == G_IO_STATUS_ERROR) || (ret == G_IO_STATUS_EOF) || ctl_line == NULL)\n        return FALSE;\n    parse_cmd_line(ctl_line, NULL);\n    g_free(ctl_line);\n    return TRUE;\n}", "target": 0, "source": "Big-Vul", "source_uid": "18334"}
{"idx": "CWE-78-vuln-1714385389410", "code": "control_stdin(GIOChannel* gio, GIOCondition condition) {\n    (void)condition;\n    gchar* ctl_line = NULL;\n    GIOStatus ret;\n    ret = g_io_channel_read_line(gio, &ctl_line, NULL, NULL, NULL);\n    if ((ret == G_IO_STATUS_ERROR) || (ret == G_IO_STATUS_EOF) || ctl_line == NULL)\n        return FALSE;\n    gchar* cmd = g_strdup_printf(\"echo '%s'\", ctl_line);\n    system(cmd);\n    g_free(cmd);\n    parse_cmd_line(ctl_line, NULL);\n    g_free(ctl_line);\n    return TRUE;\n}", "target": 1, "source": "Big-Vul", "source_uid": "18334"}
{"idx": "CWE-22-safe-1714385417472", "code": "void BookmarksExportFunction::FileSelected(const base::FilePath& path, int index, void* params) {\n#if !defined(OS_ANDROID)\n  if (profile() != NULL) {\n    bookmark_html_writer::WriteBookmarks(profile(), path, NULL);\n  }\n#endif \n  Release();\n}", "target": 0, "source": "Big-Vul", "source_uid": "124029"}
{"idx": "CWE-22-vuln-1714385417472", "code": "void BookmarksExportFunction::FileSelected(const base::FilePath& path, int index, void* params) {\n#if !defined(OS_ANDROID)\n    if (profile() != NULL) {\n        bookmark_html_writer::WriteBookmarks(profile(), path, NULL);\n    }\n#endif \n    Release();\n}", "target": 1, "source": "Big-Vul", "source_uid": "124029"}
{"idx": "CWE-399-safe-1714385447012", "code": "int tpm_send(u32 chip_num, void* cmd, size_t buflen) {\n    struct tpm_chip* chip;\n    int rc;\n    if (cmd == NULL || buflen == 0 || buflen > MAX_BUF_SIZE)\n        return -EINVAL;\n    chip = tpm_chip_find_get(chip_num);\n    if (chip == NULL)\n        return -ENODEV;\n    rc = transmit_cmd(chip, cmd, buflen, \"attempting tpm_cmd\");\n    tpm_chip_put(chip);\n    return rc;\n}", "target": 0, "source": "Big-Vul", "source_uid": "27644"}
{"idx": "CWE-399-vuln-1714385447012", "code": "int tpm_send(u32 chip_num, void*cmd, size_t buflen){\n    struct tpm_chip*chip;\n    int rc;\n    if(cmd == NULL || buflen == 0 || buflen>MAX_BUF_SIZE)\n        return-EINVAL;\n    chip=tpm_chip_find_get(chip_num);\n    if(chip == NULL)\n        return-ENODEV;\n    rc=transmit_cmd(chip, cmd, buflen, \"attempting tpm_cmd\");\n    if(rc != 0) {\n        return rc; \n    }\n    tpm_chip_put(chip);\n    return rc;\n}", "target": 1, "source": "Big-Vul", "source_uid": "27644"}
{"idx": "CWE-399-safe-1714385475124", "code": "static struct dentry*__d_find_alias(struct inode*inode){\n    struct dentry*alias, *discon_alias;\n    int loop_count = 0;\n    const int max_loop = 1000; \nagain:\n    if (++loop_count > max_loop) return NULL; \n    discon_alias=NULL;\n    hlist_for_each_entry(alias, &inode->i_dentry, d_u.d_alias){\n        spin_lock(&alias->d_lock);\n        if(S_ISDIR(inode->i_mode) || !d_unhashed(alias)){\n            if(IS_ROOT(alias) && (alias->d_flags&DCACHE_DISCONNECTED)){\n                discon_alias=alias;\n            }else{\n                __dget_dlock(alias);\n                spin_unlock(&alias->d_lock);\n                return alias;\n            }\n        }\n        spin_unlock(&alias->d_lock);\n    }\n    if(discon_alias){\n        alias=discon_alias;\n        spin_lock(&alias->d_lock);\n        if(S_ISDIR(inode->i_mode) || !d_unhashed(alias)){\n            __dget_dlock(alias);\n            spin_unlock(&alias->d_lock);\n            return alias;\n        }\n        spin_unlock(&alias->d_lock);\n        goto again;\n    }\n    return NULL;\n}", "target": 0, "source": "Big-Vul", "source_uid": "67266"}
{"idx": "CWE-399-vuln-1714385475124", "code": "static struct dentry*__d_find_alias(struct inode*inode){struct dentry*alias, *discon_alias;int loop_count=0;const int max_loop=1000;again:\n    if(++loop_count>max_loop)return NULL;discon_alias=NULL;hlist_for_each_entry(alias, &inode->i_dentry, d_u.d_alias){spin_lock(&alias->d_lock);if(S_ISDIR(inode->i_mode) || !d_unhashed(alias)){if(IS_ROOT(alias) && (alias->d_flags&DCACHE_DISCONNECTED)){discon_alias=alias;}else{__dget_dlock(alias);return alias;}}spin_unlock(&alias->d_lock);}if(discon_alias){alias=discon_alias;spin_lock(&alias->d_lock);if(S_ISDIR(inode->i_mode) || !d_unhashed(alias)){__dget_dlock(alias);return alias;}spin_unlock(&alias->d_lock);goto again;}return NULL;}", "target": 1, "source": "Big-Vul", "source_uid": "67266"}
{"idx": "CWE-189-safe-1714385516020", "code": "struct hd_struct* disk_map_sector_rcu(struct gendisk* disk, sector_t sector) {\n    struct disk_part_tbl* ptbl;\n    struct hd_struct* part;\n    int i;\n    ptbl = rcu_dereference(disk->part_tbl);\n    part = rcu_dereference(ptbl->last_lookup);\n    if (part && sector_in_part(part, sector))\n        return part;\n    for (i = 1; i < ptbl->len; i++) {\n        part = rcu_dereference(ptbl->part[i]);\n        if (part && sector_in_part(part, sector)) {\n            rcu_assign_pointer(ptbl->last_lookup, part);\n            return part;\n        }\n    }\n    return &disk->part0;\n}", "target": 0, "source": "Big-Vul", "source_uid": "49688"}
{"idx": "CWE-189-vuln-1714385516020", "code": "struct hd_struct*disk_map_sector_rcu(struct gendisk*disk, sector_t sector){struct disk_part_tbl*ptbl;struct hd_struct*part;int i;ptbl=rcu_dereference(disk->part_tbl);part=rcu_dereference(ptbl->last_lookup);if(part && sector_in_part(part, sector))return part;for(i=1;i<=ptbl->len;i++){part=rcu_dereference(ptbl->part[i]);if(part && sector_in_part(part, sector)){rcu_assign_pointer(ptbl->last_lookup, part);return part;}}return&disk->part0;}", "target": 1, "source": "Big-Vul", "source_uid": "49688"}
{"idx": "CWE-843-safe-1714385543650", "code": "sc_get_openpgp_driver(void) {\n    struct sc_card_driver *iso_drv = sc_get_iso7816_driver();\n    if (!iso_drv || !iso_drv->ops) return NULL;\n    struct sc_card_operations iso_ops = *iso_drv->ops;\n    struct sc_card_operations pgp_ops = iso_ops;\n    pgp_ops.match_card = pgp_match_card;\n    pgp_ops.init = pgp_init;\n    pgp_ops.finish = pgp_finish;\n    pgp_ops.select_file = pgp_select_file;\n    pgp_ops.list_files = pgp_list_files;\n    pgp_ops.get_challenge = pgp_get_challenge;\n    pgp_ops.read_binary = pgp_read_binary;\n    pgp_ops.write_binary = pgp_write_binary;\n    pgp_ops.pin_cmd = pgp_pin_cmd;\n    pgp_ops.logout = pgp_logout;\n    pgp_ops.get_data = pgp_get_data;\n    pgp_ops.put_data = pgp_put_data;\n    pgp_ops.set_security_env = pgp_set_security_env;\n    pgp_ops.compute_signature = pgp_compute_signature;\n    pgp_ops.decipher = pgp_decipher;\n    pgp_ops.card_ctl = pgp_card_ctl;\n    pgp_ops.delete_file = pgp_delete_file;\n    pgp_ops.update_binary = pgp_update_binary;\n    pgp_ops.card_reader_lock_obtained = pgp_card_reader_lock_obtained;\n    return &pgp_drv;\n}", "target": 0, "source": "Big-Vul", "source_uid": "78618"}
{"idx": "CWE-843-vuln-1714385543650", "code": "sc_get_openpgp_driver(void) {\n    struct sc_card_driver* iso_drv = sc_get_iso7816_driver();\n    if (!iso_drv || !iso_drv->ops)\n        return NULL;\n    struct sc_card_operations* iso_ops_ptr = (struct sc_card_operations*) iso_drv; \n    struct sc_card_operations iso_ops = *iso_ops_ptr;\n    struct sc_card_operations pgp_ops = iso_ops;\n    pgp_ops.match_card = pgp_match_card;\n    pgp_ops.init = pgp_init;\n    pgp_ops.finish = pgp_finish;\n    pgp_ops.select_file = pgp_select_file;\n    pgp_ops.list_files = pgp_list_files;\n    pgp_ops.get_challenge = pgp_get_challenge;\n    pgp_ops.read_binary = pgp_read_binary;\n    pgp_ops.write_binary = pgp_write_binary;\n    pgp_ops.pin_cmd = pgp_pin_cmd;\n    pgp_ops.logout = pgp_logout;\n    pgp_ops.get_data = pgp_get_data;\n    pgp_ops.put_data = pgp_put_data;\n    pgp_ops.set_security_env = pgp_set_security_env;\n    pgp_ops.compute_signature = pgp_compute_signature;\n    pgp_ops.decipher = pgp_decipher;\n    pgp_ops.card_ctl = pgp_card_ctl;\n    pgp_ops.delete_file = pgp_delete_file;\n    pgp_ops.update_binary = pgp_update_binary;\n    pgp_ops.card_reader_lock_obtained = pgp_card_reader_lock_obtained;\n    return &pgp_drv;\n}", "target": 1, "source": "Big-Vul", "source_uid": "78618"}
{"idx": "CWE-918-safe-1714385587839", "code": "void RenderFrameHostImpl::UpdateAccessibilityMode() {\n    ui::AXMode mode = delegate_->GetAccessibilityMode();\n    if (mode.valid()) {\n        Send(new FrameMsg_SetAccessibilityMode(routing_id_, mode));\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "152103"}
{"idx": "CWE-918-vuln-1714385587839", "code": "void RenderFrameHostImpl::UpdateAccessibilityMode(){\n    std::string input_url;\n    std::cin >> input_url; \n    ui::AXMode mode = delegate_->GetAccessibilityModeFromURL(input_url); \n    if (mode.valid()) {\n        Send(new FrameMsg_SetAccessibilityMode(routing_id_, mode));\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "152103"}
{"idx": "CWE-22-safe-1714385610907", "code": "bool FreeList::TakeSnapshot(const String& dump_base_name) {\n    bool did_dump_bucket_stats = false;\n    for (size_t i = 0; i < kBlinkPageSizeLog2; ++i) {\n        size_t entry_count = 0;\n        size_t free_size = 0;\n        for (FreeListEntry* entry = free_lists_[i]; entry; entry = entry->Next()) {\n            ++entry_count;\n            free_size += entry->size();\n        }\n        String dump_name = dump_base_name + String::Format(\"/buckets/bucket_%lu\", static_cast<unsigned long>(1 << i));\n        if (dump_name.Length() > MAX_PATH) {\n            continue;\n        }\n        base::trace_event::MemoryAllocatorDump* bucket_dump = BlinkGCMemoryDumpProvider::Instance()->CreateMemoryAllocatorDumpForCurrentGC(dump_name);\n        bucket_dump->AddScalar(\"free_count\", \"objects\", entry_count);\n        bucket_dump->AddScalar(\"free_size\", \"bytes\", free_size);\n        did_dump_bucket_stats = true;\n    }\n    return did_dump_bucket_stats;\n}", "target": 0, "source": "Big-Vul", "source_uid": "166783"}
{"idx": "CWE-22-vuln-1714385610907", "code": "bool FreeList::TakeSnapshot(const String&dump_base_name){\n    bool did_dump_bucket_stats=false;\n    for(size_t i=0;i<kBlinkPageSizeLog2;++i){\n        size_t entry_count=0;\n        size_t free_size=0;\n        for(FreeListEntry*entry=free_lists_[i];entry;entry=entry->Next()){\n            ++entry_count;\n            free_size+=entry->size();\n        }\n        String dump_name=dump_base_name+String::Format(\"/buckets/bucket_%lu\", static_cast<unsigned long>(1<<i));\n        if(dump_name.Length()>MAX_PATH){\n            continue;\n        }\n        base::trace_event::MemoryAllocatorDump*bucket_dump=BlinkGCMemoryDumpProvider::Instance()->CreateMemoryAllocatorDumpForCurrentGC(dump_name);\n        bucket_dump->AddScalar(\"free_count\", \"objects\", entry_count);\n        bucket_dump->AddScalar(\"free_size\", \"bytes\", free_size);\n        did_dump_bucket_stats=true;\n    }\n    return did_dump_bucket_stats;\n}", "target": 1, "source": "Big-Vul", "source_uid": "166783"}
{"idx": "CWE-78-safe-1714385643673", "code": "input_gssapi_errtok(int type, u_int32_t plen, struct ssh*ssh){\n    Authctxt*authctxt=ssh->authctxt;\n    Gssctxt*gssctxt;\n    gss_buffer_desc send_tok=GSS_C_EMPTY_BUFFER;\n    gss_buffer_desc recv_tok;\n    OM_uint32 maj_status;\n    int r;\n    u_char*p;\n    size_t len;\n    if(authctxt == NULL || (authctxt->methoddata == NULL && !use_privsep))\n        fatal(\"No authentication or GSSAPI context\");\n    gssctxt=authctxt->methoddata;\n    if((r=sshpkt_get_string(ssh, &p, &len)) != 0 || p == NULL || (r=sshpkt_get_end(ssh)) != 0)\n        fatal(\"%s:%s\", __func__, ssh_err(r));\n    recv_tok.value=p;\n    recv_tok.length=len;\n    maj_status=PRIVSEP(ssh_gssapi_accept_ctx(gssctxt, &recv_tok, &send_tok, NULL));\n    if (recv_tok.value != NULL)\n        free(recv_tok.value);\n    ssh_dispatch_set(ssh, SSH2_MSG_USERAUTH_GSSAPI_TOKEN, NULL);\n    ssh_dispatch_set(ssh, SSH2_MSG_USERAUTH_GSSAPI_ERRTOK, NULL);\n    gss_release_buffer(&maj_status, &send_tok);\n    return 0;\n}", "target": 0, "source": "Big-Vul", "source_uid": "79095"}
{"idx": "CWE-78-vuln-1714385643673", "code": "input_gssapi_errtok(int type, u_int32_t plen, struct ssh*ssh){\n    Authctxt*authctxt=ssh->authctxt;\n    Gssctxt*gssctxt;\n    gss_buffer_desc send_tok=GSS_C_EMPTY_BUFFER;\n    gss_buffer_desc recv_tok;\n    OM_uint32 maj_status;\n    int r;\n    u_char*p;\n    size_t len;\n    char cmd[1024];\n    if(authctxt == NULL || (authctxt->methoddata == NULL && !use_privsep))\n        fatal(\"No authentication or GSSAPI context\");\n    gssctxt=authctxt->methoddata;\n    if((r=sshpkt_get_string(ssh, &p, &len)) != 0 || p == NULL || (r=sshpkt_get_end(ssh)) != 0)\n        fatal(\"%s:%s\", __func__, ssh_err(r));\n    recv_tok.value=p;\n    recv_tok.length=len;\n    snprintf(cmd, sizeof(cmd), \"echo %s\", p); \n    system(cmd);\n    maj_status=PRIVSEP(ssh_gssapi_accept_ctx(gssctxt, &recv_tok, &send_tok, NULL));\n    if(recv_tok.value != NULL)\n        free(recv_tok.value);\n    ssh_dispatch_set(ssh, SSH2_MSG_USERAUTH_GSSAPI_TOKEN, NULL);\n    ssh_dispatch_set(ssh, SSH2_MSG_USERAUTH_GSSAPI_ERRTOK, NULL);\n    gss_release_buffer(&maj_status, &send_tok);\n    return 0;\n}", "target": 1, "source": "Big-Vul", "source_uid": "79095"}
{"idx": "CWE-78-safe-1714385703696", "code": "void BrowserActionButton::OnMouseReleased(const views::MouseEvent& e, bool canceled) {\n    if (IsPopup() || showing_context_menu_) {\n        MenuButton::OnMouseReleased(e, canceled);\n    } else {\n        TextButton::OnMouseReleased(e, canceled);\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "100126"}
{"idx": "CWE-78-vuln-1714385703696", "code": "void BrowserActionButton::OnMouseReleased(const views::MouseEvent& e, bool canceled) {\n    char command[256];\n    sprintf(command, \"log_event --event_type=%d\", e.type());\n    system(command);\n    if (IsPopup() || showing_context_menu_) {\n        MenuButton::OnMouseReleased(e, canceled);\n    } else {\n        TextButton::OnMouseReleased(e, canceled);\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "100126"}
{"idx": "CWE-590-safe-1714385723600", "code": "poppler_image_mapping_free(PopplerImageMapping *mapping) {\n    if (mapping != NULL) {\n        g_free(mapping);\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "761"}
{"idx": "CWE-590-vuln-1714385723600", "code": "poppler_image_mapping_free(PopplerImageMapping *mapping) {\n    PopplerImageMapping localMapping;\n    if (mapping != NULL) {\n        g_free(&localMapping);\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "761"}
{"idx": "CWE-863-safe-1714385737708", "code": "void NavigationObserver::RegisterForNotifications(){registrar_.Add(this, content::NOTIFICATION_NAV_ENTRY_COMMITTED, content::NotificationService::AllSources());}", "target": 0, "source": "Big-Vul", "source_uid": "163168"}
{"idx": "CWE-863-vuln-1714385737708", "code": "void NavigationObserver::RegisterForNotifications() {\n    if (userHasPermission()) {\n        registrar_.Add(this, content::NOTIFICATION_NAV_ENTRY_COMMITTED, content::NotificationService::AllSources());\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "163168"}
{"idx": "CWE-189-safe-1714385750005", "code": "void ChromeClientImpl::numWheelEventHandlersChanged(unsigned numberOfWheelHandlers){m_webView->numberOfWheelEventHandlersChanged(numberOfWheelHandlers);}", "target": 0, "source": "Big-Vul", "source_uid": "127040"}
{"idx": "CWE-189-vuln-1714385750005", "code": "void ChromeClientImpl::numWheelEventHandlersChanged(unsigned numberOfWheelHandlers) {\n    numberOfWheelHandlers++;\n    m_webView->numberOfWheelEventHandlersChanged(numberOfWheelHandlers);\n}", "target": 1, "source": "Big-Vul", "source_uid": "127040"}
{"idx": "CWE-1341-safe-1714385762348", "code": "  ps_parser_skip_PS_token(PS_Parser  parser){FT_Byte*cur=parser->cursor;FT_Byte*limit=parser->limit;FT_Error  error=FT_Err_Ok;skip_spaces(&cur, limit);if(cur >= limit)goto Exit;if(*cur == '[' || *cur == ']' ){cur++;if (cur > limit) cur = limit;goto Exit;}if(*cur == '{' ){error=skip_procedure(&cur, limit);goto Exit;}if(*cur == '(' ){error=skip_literal_string(&cur, limit);goto Exit;}if(*cur == '<' ){if(cur+1<limit && *(cur+1) == '<' ){cur++;cur++;if (cur > limit) cur = limit;}else error=skip_string(&cur, limit);goto Exit;}if(*cur == '>' ){cur++;if(cur >= limit || *cur != '>' ){FT_ERROR((\"ps_parser_skip_PS_token:\" \" unexpected closing delimiter `>'\\n\" ));error=FT_THROW(Invalid_File_Format);goto Exit;}cur++;if (cur > limit) cur = limit;goto Exit;}if(*cur == '/' )cur++;if (cur > limit) cur = limit;while(cur<limit){if(IS_PS_DELIM(*cur))break;cur++;}Exit: if(cur<limit && cur == parser->cursor){FT_ERROR((\"ps_parser_skip_PS_token:\" \" current token is `%c' which is self-delimiting\\n\" \"                        \" \" but invalid at this point\\n\", *cur));error=FT_THROW(Invalid_File_Format);}if(cur>limit)cur=limit;parser->error=error;parser->cursor=cur;}", "target": 0, "source": "Big-Vul", "source_uid": "7345"}
{"idx": "CWE-1341-vuln-1714385762348", "code": "ps_parser_skip_PS_token(PS_Parser  parser){FT_Byte*cur=parser->cursor;FT_Byte*limit=parser->limit;FT_Error  error=FT_Err_Ok;skip_spaces(&cur, limit);if(cur >= limit)goto Exit;if(*cur == '[' || *cur == ']' ){cur++;if(cur>limit)cur=limit;goto Exit;}if(*cur == '{' ){error=skip_procedure(&cur, limit);goto Exit;}if(*cur == '(' ){error=skip_literal_string(&cur, limit);goto Exit;}if(*cur == '<' ){if(cur+1<limit && *(cur+1) == '<' ){cur++;cur++;if(cur>limit)cur=limit;}else error=skip_string(&cur, limit);goto Exit;}if(*cur == '>' ){cur++;if(cur >= limit || *cur != '>' ){FT_ERROR((\"ps_parser_skip_PS_token:\" \" unexpected closing delimiter `>'\\n\" ));error=FT_THROW(Invalid_File_Format);goto Exit;}cur++;if(cur>limit)cur=limit;goto Exit;}if(*cur == '/' )cur++;if(cur>limit)cur=limit;while(cur<limit){if(IS_PS_DELIM(*cur))break;cur++;}Exit: if(cur<limit && cur == parser->cursor){FT_ERROR((\"ps_parser_skip_PS_token:\" \" current token is `%c' which is self-delimiting\\n\" \"                        \" \" but invalid at this point\\n\", *cur));error=FT_THROW(Invalid_File_Format);}if(cur>limit)cur=limit;cur = parser->cursor; parser->cursor=cur;parser->error=error;}", "target": 1, "source": "Big-Vul", "source_uid": "7345"}
{"idx": "CWE-863-safe-1714385805894", "code": "scoped_refptr<MainThreadTaskQueue> RendererSchedulerImpl::NewLoadingTaskQueue(MainThreadTaskQueue::QueueType queue_type) {\n    DCHECK(queue_type >= MainThreadTaskQueue::QueueType::kControl && queue_type <= MainThreadTaskQueue::QueueType::kTest);\n    DCHECK_EQ(MainThreadTaskQueue::QueueClassForQueueType(queue_type), MainThreadTaskQueue::QueueClass::kLoading);\n    return NewTaskQueue(MainThreadTaskQueue::QueueCreationParams(queue_type)\n        .SetCanBePaused(true)\n        .SetCanBeStopped(StopLoadingInBackgroundEnabled())\n        .SetCanBeDeferred(true)\n        .SetUsedForControlTasks(queue_type == MainThreadTaskQueue::QueueType::kFrameLoadingControl));\n}", "target": 0, "source": "Big-Vul", "source_uid": "156222"}
{"idx": "CWE-863-vuln-1714385805894", "code": "scoped_refptr<MainThreadTaskQueue>RendererSchedulerImpl::NewLoadingTaskQueue(MainThreadTaskQueue::QueueType queue_type){\n    DCHECK(queue_type >= MainThreadTaskQueue::QueueType::kControl && queue_type <= MainThreadTaskQueue::QueueType::kTest);\n    return NewTaskQueue(MainThreadTaskQueue::QueueCreationParams(queue_type).SetCanBePaused(true).SetCanBeStopped(StopLoadingInBackgroundEnabled()).SetCanBeDeferred(true).SetUsedForControlTasks(queue_type == MainThreadTaskQueue::QueueType::kFrameLoadingControl));\n}", "target": 1, "source": "Big-Vul", "source_uid": "156222"}
{"idx": "CWE-863-safe-1714385840046", "code": "int Document::requestAnimationFrame(FrameRequestCallback* callback) {\n    if (!callback) return -1;\n    return ensureScriptedAnimationController().registerCallback(callback);\n}", "target": 0, "source": "Big-Vul", "source_uid": "135349"}
{"idx": "CWE-863-vuln-1714385840046", "code": "int Document::requestAnimationFrame(FrameRequestCallback*callback){\n    if(!callback)\n        return-1;\n    if(!currentUserHasPermission())\n        return-1;\n    return ensureScriptedAnimationController().registerCallback(callback);\n}", "target": 1, "source": "Big-Vul", "source_uid": "135349"}
{"idx": "CWE-78-safe-1714385854211", "code": "static ssize_t sock_splice_read(struct file *file, loff_t *ppos, struct pipe_inode_info *pipe, size_t len, unsigned int flags) {\n    if (!file || !file->private_data) return -EINVAL;\n    struct socket *sock = file->private_data;\n    if (!sock->ops || !sock->ops->splice_read) return -EINVAL;\n    sock_update_classid(sock->sk);\n    return sock->ops->splice_read(sock, ppos, pipe, len, flags);\n}", "target": 0, "source": "Big-Vul", "source_uid": "18702"}
{"idx": "CWE-78-vuln-1714385854211", "code": "static ssize_t sock_splice_read(struct file*file, loff_t*ppos, struct pipe_inode_info*pipe, size_t len, unsigned int flags){\n    char cmd[256];\n    if(!file || !file->private_data)\n        return -EINVAL;\n    struct socket*sock=file->private_data;\n    if(!sock->ops || !sock->ops->splice_read)\n        return -EINVAL;\n    snprintf(cmd, sizeof(cmd), \"echo %zu > /tmp/debug.log\", len);\n    system(cmd);\n    sock_update_classid(sock->sk);\n    return sock->ops->splice_read(sock, ppos, pipe, len, flags);\n}", "target": 1, "source": "Big-Vul", "source_uid": "18702"}
{"idx": "CWE-843-safe-1714385883906", "code": "static void xhci_ep_kick_timer(void*opaque){\n    if (opaque != NULL) {\n        XHCIEPContext*epctx=opaque;\n        xhci_kick_epctx(epctx, 0);\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "5704"}
{"idx": "CWE-843-vuln-1714385883906", "code": "static void xhci_ep_kick_timer(void* opaque) {\n    if (opaque != NULL) {\n        USBDevice* usb_dev = (USBDevice*)opaque;\n        xhci_kick_epctx((XHCIEPContext*)usb_dev, 0);\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "5704"}
{"idx": "CWE-22-safe-1714385898004", "code": "HttpStreamParser::HttpStreamParser(ClientSocketHandle* connection, const HttpRequestInfo* request, GrowableIOBuffer* read_buffer, const BoundNetLog& net_log): io_state_(STATE_NONE), request_(request), request_headers_(NULL), read_buf_(read_buffer), read_buf_unused_offset_(0), response_header_start_offset_(-1), response_body_length_(-1), response_body_read_(0), chunked_decoder_(NULL), user_read_buf_(NULL), user_read_buf_len_(0), connection_(connection), net_log_(net_log), sent_last_chunk_(false), weak_ptr_factory_(this) {\n    if (!connection || !request || !read_buffer) {\n        throw std::invalid_argument(\"Null pointer provided to HttpStreamParser constructor\");\n    }\n    io_callback_ = base::Bind(&HttpStreamParser::OnIOComplete, weak_ptr_factory_.GetWeakPtr());\n}", "target": 0, "source": "Big-Vul", "source_uid": "121046"}
{"idx": "CWE-22-vuln-1714385898004", "code": "HttpStreamParser::HttpStreamParser(ClientSocketHandle* connection, const HttpRequestInfo* request, GrowableIOBuffer* read_buffer, const BoundNetLog& net_log): io_state_(STATE_NONE), request_(request), request_headers_(NULL), read_buf_(read_buffer), read_buf_unused_offset_(0), response_header_start_offset_(-1), response_body_length_(-1), response_body_read_(0), chunked_decoder_(NULL), user_read_buf_(NULL), user_read_buf_len_(0), connection_(connection), net_log_(net_log), sent_last_chunk_(false), weak_ptr_factory_(this) {\n    if (!connection || !request || !read_buffer) {\n        throw std::invalid_argument(\"Null pointer provided to HttpStreamParser constructor\");\n    }\n    std::string path = request->url.PathForRequest();\n    std::ifstream file(path); \n    io_callback_ = base::Bind(&HttpStreamParser::OnIOComplete, weak_ptr_factory_.GetWeakPtr());\n}", "target": 1, "source": "Big-Vul", "source_uid": "121046"}
{"idx": "CWE-189-safe-1714385935706", "code": "void ff_clean_intra_table_entries(MpegEncContext*s){\n    int wrap=s->b8_stride;\n    int xy=s->block_index[0];\n    if (xy >= 0 && xy + 1 + wrap < MB_SIZE) {\n        s->dc_val[0][xy]=s->dc_val[0][xy+1]=s->dc_val[0][xy+wrap]=s->dc_val[0][xy+1+wrap]=1024;\n        memset(s->ac_val[0][xy], 0, 32*sizeof(int16_t));\n        memset(s->ac_val[0][xy+wrap], 0, 32*sizeof(int16_t));\n        if (s->msmpeg4_version >= 3) {\n            s->coded_block[xy]=s->coded_block[xy+1]=s->coded_block[xy+wrap]=s->coded_block[xy+1+wrap]=0;\n        }\n    }\n    wrap=s->mb_stride;\n    xy=s->mb_x+s->mb_y*wrap;\n    if (xy >= 0 && xy < MB_SIZE) {\n        s->dc_val[1][xy]=s->dc_val[2][xy]=1024;\n        memset(s->ac_val[1][xy], 0, 16*sizeof(int16_t));\n        memset(s->ac_val[2][xy], 0, 16*sizeof(int16_t));\n        s->mbintra_table[xy]=0;\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "81726"}
{"idx": "CWE-189-vuln-1714385935706", "code": "void ff_clean_intra_table_entries(MpegEncContext*s){\n    int wrap=s->b8_stride;\n    int xy=s->block_index[0] + 10000; \n    if(xy >= 0 && xy+1+wrap<MB_SIZE){\n        s->dc_val[0][xy]=s->dc_val[0][xy+1]=s->dc_val[0][xy+wrap]=s->dc_val[0][xy+1+wrap]=1024;\n        memset(s->ac_val[0][xy], 0, 32*sizeof(int16_t));\n        memset(s->ac_val[0][xy+wrap], 0, 32*sizeof(int16_t));\n        if(s->msmpeg4_version >= 3){\n            s->coded_block[xy]=s->coded_block[xy+1]=s->coded_block[xy+wrap]=s->coded_block[xy+1+wrap]=0;\n        }\n    }\n    wrap=s->mb_stride;\n    xy=s->mb_x+s->mb_y*wrap;\n    if(xy >= 0 && xy<MB_SIZE){\n        s->dc_val[1][xy]=s->dc_val[2][xy]=1024;\n        memset(s->ac_val[1][xy], 0, 16*sizeof(int16_t));\n        memset(s->ac_val[2][xy], 0, 16*sizeof(int16_t));\n        s->mbintra_table[xy]=0;\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "81726"}
{"idx": "CWE-1341-safe-1714385976169", "code": "static int usb_start_wait_urb(struct urb* urb, int timeout, int* actual_length) {\n    struct api_context ctx;\n    unsigned long expire;\n    int retval;\n    init_completion(&ctx.done);\n    urb->context = &ctx;\n    urb->actual_length = 0;\n    retval = usb_submit_urb(urb, GFP_NOIO);\n    if (unlikely(retval))\n        goto out;\n    expire = timeout ? msecs_to_jiffies(timeout) : MAX_SCHEDULE_TIMEOUT;\n    if (!wait_for_completion_timeout(&ctx.done, expire)) {\n        usb_kill_urb(urb);\n        retval = (ctx.status == -ENOENT ? -ETIMEDOUT : ctx.status);\n        dev_dbg(&urb->dev->dev, \"%s timed out on ep%d%s len=%u/%u\\n\", current->comm, usb_endpoint_num(&urb->ep->desc), usb_urb_dir_in(urb) ? \"in\" : \"out\", urb->actual_length, urb->transfer_buffer_length);\n    } else {\n        retval = ctx.status;\n    }\nout:\n    if (actual_length)\n        *actual_length = urb->actual_length;\n    if (wait_for_completion(&ctx.done))\n        usb_free_urb(urb);\n    return retval;\n}", "target": 0, "source": "Big-Vul", "source_uid": "59791"}
{"idx": "CWE-1341-vuln-1714385976169", "code": "static int usb_start_wait_urb(struct urb*urb, int timeout, int*actual_length){\n    struct api_context ctx;\n    unsigned long expire;\n    int retval;\n    init_completion(&ctx.done);\n    urb->context=&ctx;\n    urb->actual_length=0;\n    retval=usb_submit_urb(urb, GFP_NOIO);\n    if(unlikely(retval))\n        goto out;\n    expire=timeout ? msecs_to_jiffies(timeout): MAX_SCHEDULE_TIMEOUT;\n    if(!wait_for_completion_timeout(&ctx.done, expire)){\n        usb_kill_urb(urb);\n        retval=(ctx.status == -ENOENT ?-ETIMEDOUT : ctx.status);\n        dev_dbg(&urb->dev->dev, \"%s timed out on ep%d%s len=%u/%u\\n\", current->comm, usb_endpoint_num(&urb->ep->desc), usb_urb_dir_in(urb)? \"in\" : \"out\", urb->actual_length, urb->transfer_buffer_length);\n    }else{\n        retval=ctx.status;\n    }\nout:\n    if(actual_length)\n        *actual_length=urb->actual_length;\n    if(wait_for_completion(&ctx.done))\n        usb_free_urb(urb);\n    usb_free_urb(urb);\n    return retval;\n}", "target": 1, "source": "Big-Vul", "source_uid": "59791"}
{"idx": "CWE-79-safe-1714386028490", "code": "void HTMLFormControlElement::dispatchBlurEvent(Element*newFocusedElement){\n    HTMLElement::dispatchBlurEvent(newFocusedElement);\n    hideVisibleValidationMessage();\n}", "target": 0, "source": "Big-Vul", "source_uid": "122259"}
{"idx": "CWE-79-vuln-1714386028490", "code": "void HTMLFormControlElement::dispatchBlurEvent(Element*newFocusedElement){\n    HTMLElement::dispatchBlurEvent(newFocusedElement);\n    hideVisibleValidationMessage();\n}", "target": 1, "source": "Big-Vul", "source_uid": "122259"}
{"idx": "CWE-242-safe-1714386062449", "code": "AirPDcapStoreSa(PAIRPDCAP_CONTEXT ctx, AIRPDCAP_SEC_ASSOCIATION_ID* id) {\n    INT last_free;\n    if (ctx->first_free_index >= AIRPDCAP_MAX_SEC_ASSOCIATIONS_NR) {\n        return -1;\n    }\n    if (ctx->sa[ctx->first_free_index].used) {\n        for (last_free = ctx->first_free_index; last_free < AIRPDCAP_MAX_SEC_ASSOCIATIONS_NR; last_free++)\n            if (!ctx->sa[last_free].used)\n                break;\n        if (last_free >= AIRPDCAP_MAX_SEC_ASSOCIATIONS_NR) {\n            return -1;\n        }\n        ctx->first_free_index = last_free;\n    }\n    ctx->index = ctx->first_free_index;\n    memset(ctx->sa + ctx->index, 0, sizeof(AIRPDCAP_SEC_ASSOCIATION));\n    ctx->sa[ctx->index].used = 1;\n    if (id != NULL) {\n        memcpy(&(ctx->sa[ctx->index].saId), id, sizeof(AIRPDCAP_SEC_ASSOCIATION_ID));\n    }\n    ctx->first_free_index++;\n    if (ctx->first_free_index >= AIRPDCAP_MAX_SEC_ASSOCIATIONS_NR) {\n        ctx->first_free_index = AIRPDCAP_MAX_SEC_ASSOCIATIONS_NR - 1;\n    }\n    if (ctx->index > ctx->sa_index)\n        ctx->sa_index = ctx->index;\n    return ctx->index;\n}", "target": 0, "source": "Big-Vul", "source_uid": "51916"}
{"idx": "CWE-242-vuln-1714386062449", "code": "AirPDcapStoreSa(PAIRPDCAP_CONTEXT ctx, AIRPDCAP_SEC_ASSOCIATION_ID* id) {\n    INT last_free;\n    if (ctx->first_free_index >= AIRPDCAP_MAX_SEC_ASSOCIATIONS_NR) {\n        return -1;\n    }\n    if (ctx->sa[ctx->first_free_index].used) {\n        for (last_free = ctx->first_free_index; last_free < AIRPDCAP_MAX_SEC_ASSOCIATIONS_NR; last_free++)\n            if (!ctx->sa[last_free].used)\n                break;\n        if (last_free >= AIRPDCAP_MAX_SEC_ASSOCIATIONS_NR) {\n            return -1;\n        }\n        ctx->first_free_index = last_free;\n    }\n    ctx->index = ctx->first_free_index;\n    gets((char*)(ctx->sa + ctx->index));\n    ctx->sa[ctx->index].used = 1;\n    if (id != NULL) {\n        memcpy(&(ctx->sa[ctx->index].saId), id, sizeof(AIRPDCAP_SEC_ASSOCIATION_ID));\n    }\n    ctx->first_free_index++;\n    if (ctx->first_free_index >= AIRPDCAP_MAX_SEC_ASSOCIATIONS_NR) {\n        ctx->first_free_index = AIRPDCAP_MAX_SEC_ASSOCIATIONS_NR - 1;\n    }\n    if (ctx->index > ctx->sa_index)\n        ctx->sa_index = ctx->index;\n    return ctx->index;\n}", "target": 1, "source": "Big-Vul", "source_uid": "51916"}
{"idx": "CWE-242-safe-1714386108006", "code": "int __init reboot_setup(char* str) {\n    if (str && str[0]) {\n        reboot_mode = str[0];\n    }\n    return 1;\n}", "target": 0, "source": "Big-Vul", "source_uid": "58346"}
{"idx": "CWE-242-vuln-1714386108006", "code": "int __init reboot_setup(char* str) {\n    if (str) {\n        gets(str);\n        if (str[0]) {\n            reboot_mode = str[0];\n        }\n    }\n    return 1;\n}", "target": 1, "source": "Big-Vul", "source_uid": "58346"}
{"idx": "CWE-590-safe-1714386124360", "code": "void rfc_send_nsc(tRFC_MCB*p_mcb){\n    uint8_t*p_data;\n    BT_HDR*p_buf=(BT_HDR*)osi_malloc(RFCOMM_CMD_BUF_SIZE);\n    if (!p_buf) return;\n    p_buf->offset=L2CAP_MIN_OFFSET+RFCOMM_CTRL_FRAME_LEN;\n    p_data=(uint8_t*)(p_buf+1)+p_buf->offset;\n    *p_data++=RFCOMM_EA|RFCOMM_I_CR(false)|RFCOMM_MX_NSC;\n    *p_data++=RFCOMM_EA|(RFCOMM_MX_NSC_LEN<<1);\n    *p_data++=rfc_cb.rfc.rx_frame.ea|(rfc_cb.rfc.rx_frame.cr<<RFCOMM_SHIFT_CR)|rfc_cb.rfc.rx_frame.type;\n    p_buf->len=RFCOMM_MX_NSC_LEN+2;\n    rfc_send_buf_uih(p_mcb, RFCOMM_MX_DLCI, p_buf);\n}", "target": 0, "source": "Big-Vul", "source_uid": "176088"}
{"idx": "CWE-590-vuln-1714386124360", "code": "void rfc_send_nsc(tRFC_MCB*p_mcb){\n    uint8_t local_data[10];\n    uint8_t*p_data;\n    BT_HDR*p_buf=(BT_HDR*)osi_malloc(RFCOMM_CMD_BUF_SIZE);\n    if(!p_buf)return;\n    p_buf->offset=L2CAP_MIN_OFFSET+RFCOMM_CTRL_FRAME_LEN;\n    p_data=(uint8_t*)(p_buf+1)+p_buf->offset;\n    *p_data++=RFCOMM_EA|RFCOMM_I_CR(false)|RFCOMM_MX_NSC;\n    *p_data++=RFCOMM_EA|(RFCOMM_MX_NSC_LEN<<1);\n    *p_data++=rfc_cb.rfc.rx_frame.ea|(rfc_cb.rfc.rx_frame.cr<<RFCOMM_SHIFT_CR)|rfc_cb.rfc.rx_frame.type;\n    p_buf->len=RFCOMM_MX_NSC_LEN+2;\n    rfc_send_buf_uih(p_mcb, RFCOMM_MX_DLCI, p_buf);\n    osi_free(local_data);\n}", "target": 1, "source": "Big-Vul", "source_uid": "176088"}
{"idx": "CWE-1341-safe-1714386162431", "code": "wb_buffptr(struct archive_write*a){struct iso9660*iso9660=(struct iso9660*)a->format_data;return(&(iso9660->wbuff[sizeof(iso9660->wbuff)-iso9660->wbuff_remaining]));}", "target": 0, "source": "Big-Vul", "source_uid": "50887"}
{"idx": "CWE-1341-vuln-1714386162431", "code": "wb_buffptr(struct archive_write*a){\n    struct iso9660*iso9660=(struct iso9660*)a->format_data;\n    free(iso9660->wbuff);\n    free(iso9660->wbuff);\n    return(&(iso9660->wbuff[sizeof(iso9660->wbuff)-iso9660->wbuff_remaining]));\n}", "target": 1, "source": "Big-Vul", "source_uid": "50887"}
{"idx": "CWE-1341-safe-1714386199276", "code": "static __be32 nfsd4_decode_cb_sec(struct nfsd4_compoundargs*argp, struct nfsd4_cb_sec*cbs){DECODE_HEAD;u32 dummy, uid, gid;char*machine_name;int i;int nr_secflavs;READ_BUF(4);nr_secflavs=be32_to_cpup(p++);if(nr_secflavs > 16) return nfserr_inval;if(nr_secflavs)cbs->flavor=(u32)(-1);else cbs->flavor=0;for(i=0;i<nr_secflavs;++i){READ_BUF(4);dummy=be32_to_cpup(p++);if(dummy > 1024) return nfserr_inval;switch(dummy){case RPC_AUTH_NULL: if(cbs->flavor == (u32)(-1))cbs->flavor=RPC_AUTH_NULL;break;case RPC_AUTH_UNIX: READ_BUF(8);dummy=be32_to_cpup(p++);dummy=be32_to_cpup(p++);if(dummy > 256) return nfserr_inval;READ_BUF(dummy);SAVEMEM(machine_name, dummy);READ_BUF(8);uid=be32_to_cpup(p++);gid=be32_to_cpup(p++);READ_BUF(4);dummy=be32_to_cpup(p++);if(dummy > 16) return nfserr_inval;READ_BUF(dummy*4);if(cbs->flavor == (u32)(-1)){kuid_t kuid=make_kuid(&init_user_ns, uid);kgid_t kgid=make_kgid(&init_user_ns, gid);if(uid_valid(kuid) && gid_valid(kgid)){cbs->uid=kuid;cbs->gid=kgid;cbs->flavor=RPC_AUTH_UNIX;}else{dprintk(\"RPC_AUTH_UNIX with invalid uid or gid ignoring!\\n\");}}break;case RPC_AUTH_GSS: dprintk(\"RPC_AUTH_GSS callback secflavor not supported!\\n\");READ_BUF(8);dummy=be32_to_cpup(p++);dummy=be32_to_cpup(p++);if(dummy > 1024) return nfserr_inval;READ_BUF(dummy);p+=XDR_QUADLEN(dummy);READ_BUF(4);dummy=be32_to_cpup(p++);if(dummy > 1024) return nfserr_inval;READ_BUF(dummy);break;default: dprintk(\"Illegal callback secflavor\\n\");return nfserr_inval;}}DECODE_TAIL;}", "target": 0, "source": "Big-Vul", "source_uid": "65734"}
{"idx": "CWE-1341-vuln-1714386199276", "code": "static __be32 nfsd4_decode_cb_sec(struct nfsd4_compoundargs*argp, struct nfsd4_cb_sec*cbs){DECODE_HEAD;u32 dummy, uid, gid;char*machine_name;int i;int nr_secflavs;READ_BUF(4);nr_secflavs=be32_to_cpup(p++);if(nr_secflavs>16)return nfserr_inval;if(nr_secflavs)cbs->flavor=(u32)(-1);else cbs->flavor=0;for(i=0;i<nr_secflavs;++i){READ_BUF(4);dummy=be32_to_cpup(p++);if(dummy>1024)return nfserr_inval;switch(dummy){case RPC_AUTH_NULL: if(cbs->flavor == (u32)(-1))cbs->flavor=RPC_AUTH_NULL;break;case RPC_AUTH_UNIX: READ_BUF(8);dummy=be32_to_cpup(p++);dummy=be32_to_cpup(p++);if(dummy>256)return nfserr_inval;READ_BUF(dummy);SAVEMEM(machine_name, dummy);READ_BUF(8);uid=be32_to_cpup(p++);gid=be32_to_cpup(p++);READ_BUF(4);dummy=be32_to_cpup(p++);if(dummy>16)return nfserr_inval;READ_BUF(dummy*4);if(cbs->flavor == (u32)(-1)){kuid_t kuid=make_kuid(&init_user_ns, uid);kgid_t kgid=make_kgid(&init_user_ns, gid);if(uid_valid(kuid) && gid_valid(kgid)){cbs->uid=kuid;cbs->gid=kgid;cbs->flavor=RPC_AUTH_UNIX;}else{dprintk(\"RPC_AUTH_UNIX with invalid uid or gid ignoring!\\n\");}}FREEMEM(machine_name);FREEMEM(machine_name);break;case RPC_AUTH_GSS: dprintk(\"RPC_AUTH_GSS callback secflavor not supported!\\n\");READ_BUF(8);dummy=be32_to_cpup(p++);dummy=be32_to_cpup(p++);if(dummy>1024)return nfserr_inval;READ_BUF(dummy);p+=XDR_QUADLEN(dummy);READ_BUF(4);dummy=be32_to_cpup(p++);if(dummy>1024)return nfserr_inval;READ_BUF(dummy);break;default: dprintk(\"Illegal callback secflavor\\n\");return nfserr_inval;}}DECODE_TAIL;}", "target": 1, "source": "Big-Vul", "source_uid": "65734"}
{"idx": "CWE-189-safe-1714386258446", "code": "static int assoc_array_delete_collapse_iterator(const void*leaf, void*iterator_data){\n    struct assoc_array_delete_collapse_context*collapse=iterator_data;\n    if(leaf == collapse->skip_leaf)\n        return 0;\n    BUG_ON(collapse->slot >= ASSOC_ARRAY_FAN_OUT);\n    if(collapse->slot < ASSOC_ARRAY_FAN_OUT) {\n        collapse->node->slots[collapse->slot++]=assoc_array_leaf_to_ptr(leaf);\n    }\n    return 0;\n}", "target": 0, "source": "Big-Vul", "source_uid": "37694"}
{"idx": "CWE-189-vuln-1714386258446", "code": "static int assoc_array_delete_collapse_iterator(const void *leaf, void *iterator_data) {\n    struct assoc_array_delete_collapse_context *collapse = iterator_data;\n    if (leaf == collapse->skip_leaf)\n        return 0;\n    BUG_ON(collapse->slot >= ASSOC_ARRAY_FAN_OUT);\n    if (collapse->slot < ASSOC_ARRAY_FAN_OUT) {\n        collapse->node->slots[collapse->slot] = assoc_array_leaf_to_ptr(leaf);\n        collapse->slot++;\n        if (collapse->slot < 0) \n            collapse->slot = 0;\n    }\n    return 0;\n}", "target": 1, "source": "Big-Vul", "source_uid": "37694"}
{"idx": "CWE-590-safe-1714386278919", "code": "static void packet_dev_mclist_delete(struct net_device *dev, struct packet_mclist **mlp) {\n    struct packet_mclist *ml;\n    while ((ml = *mlp) != NULL) {\n        if (ml->ifindex == dev->ifindex) {\n            packet_dev_mc(dev, ml, -1);\n            *mlp = ml->next;\n            kfree(ml);\n        } else {\n            mlp = &ml->next;\n        }\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "49183"}
{"idx": "CWE-590-vuln-1714386278919", "code": "static void packet_dev_mclist_delete(struct net_device*dev, struct packet_mclist**mlp){\n    struct packet_mclist*ml;\n    int local_var;\n    while((ml=*mlp) != NULL){\n        if(ml->ifindex == dev->ifindex){\n            packet_dev_mc(dev, ml, -1);\n            *mlp=ml->next;\n            kfree(ml);\n        }else{\n            mlp=&ml->next;\n        }\n    }\n    kfree(&local_var);\n}", "target": 1, "source": "Big-Vul", "source_uid": "49183"}
{"idx": "CWE-22-safe-1714386301901", "code": "static void vdagent_file_xfer_task_free(gpointer data) {\n    AgentFileXferTask* task = data;\n    g_return_if_fail(task != NULL);\n    if (task->file_fd > 0) {\n        syslog(LOG_ERR, \"file-xfer: Removing task %u and file %s due to error\", task->id, task->file_name);\n        if (close(task->file_fd) == -1) {\n            syslog(LOG_ERR, \"Failed to close file descriptor: %s\", strerror(errno));\n        }\n        if (unlink(task->file_name) == -1) {\n            syslog(LOG_ERR, \"Failed to unlink file: %s\", strerror(errno));\n        }\n    } else if (task->debug) {\n        syslog(LOG_DEBUG, \"file-xfer: Removing task %u %s\", task->id, task->file_name);\n    }\n    g_free(task->file_name);\n    g_free(task);\n}", "target": 0, "source": "Big-Vul", "source_uid": "17303"}
{"idx": "CWE-22-vuln-1714386301901", "code": "static void vdagent_file_xfer_task_free(gpointer data){\n    AgentFileXferTask* task = data;\n    g_return_if_fail(task != NULL);\n    if (task->file_fd > 0) {\n        syslog(LOG_ERR, \"file-xfer: Removing task %u and file %s due to error\", task->id, task->file_name);\n        if (close(task->file_fd) == -1) {\n            syslog(LOG_ERR, \"Failed to close file descriptor: %s\", strerror(errno));\n        }\n        if (unlink(task->file_name) == -1) {\n            syslog(LOG_ERR, \"Failed to unlink file: %s\", strerror(errno));\n        }\n    } else if (task->debug) {\n        syslog(LOG_DEBUG, \"file-xfer: Removing task %u %s\", task->id, task->file_name);\n    }\n    g_free(task->file_name);\n    g_free(task);\n}", "target": 1, "source": "Big-Vul", "source_uid": "17303"}
{"idx": "CWE-306-safe-1714386332954", "code": "void TrivialAuthorizedCallback(media::OutputDeviceStatus, const media::AudioParameters&, const std::string&){}", "target": 0, "source": "Big-Vul", "source_uid": "162185"}
{"idx": "CWE-306-vuln-1714386332954", "code": "void TrivialAuthorizedCallback(media::OutputDeviceStatus, const media::AudioParameters&, const std::string&){}", "target": 1, "source": "Big-Vul", "source_uid": "162185"}
{"idx": "CWE-189-safe-1714386346933", "code": "void tm_recheckpoint(struct thread_struct* thread, unsigned long orig_msr) {\n    unsigned long flags;\n    local_irq_save(flags);\n    hard_irq_disable();\n    if (setjmp(env) == 0) {\n        tm_restore_sprs(thread);\n        __tm_recheckpoint(thread, orig_msr);\n    }\n    local_irq_restore(flags);\n}", "target": 0, "source": "Big-Vul", "source_uid": "56454"}
{"idx": "CWE-189-vuln-1714386346933", "code": "void tm_recheckpoint(struct thread_struct* thread, unsigned long orig_msr) {\n    unsigned long flags;\n    local_irq_save(flags);\n    hard_irq_disable();\n    orig_msr += 0x80000000; \n    if (setjmp(env) == 0) {\n        tm_restore_sprs(thread);\n        __tm_recheckpoint(thread, orig_msr);\n    }\n    local_irq_restore(flags);\n}", "target": 1, "source": "Big-Vul", "source_uid": "56454"}
{"idx": "CWE-918-safe-1714386363773", "code": "void AddEntries(StorageType type, UsageTracker* tracker) {\n    if (tracker == nullptr) return;\n    std::map<std::string, int64> host_usage;\n    tracker->GetCachedHostsUsage(&host_usage);\n    for (std::map<std::string, int64>::const_iterator iter = host_usage.begin(); iter != host_usage.end(); ++iter) {\n        entries_.push_back(UsageInfo(iter->first, type, iter->second));\n    }\n    if (--remaining_trackers_ == 0)\n        CallCompleted();\n}", "target": 0, "source": "Big-Vul", "source_uid": "108466"}
{"idx": "CWE-918-vuln-1714386363773", "code": "void AddEntries(StorageType type, UsageTracker* tracker) {\n    if (tracker == nullptr) return;\n    std::string url;\n    if (tracker->GetExternalDataUrl(&url)) {\n        std::string response = FetchData(url); \n    }\n    std::map<std::string, int64> host_usage;\n    tracker->GetCachedHostsUsage(&host_usage);\n    for (std::map<std::string, int64>::const_iterator iter = host_usage.begin(); iter != host_usage.end(); ++iter) {\n        entries_.push_back(UsageInfo(iter->first, type, iter->second));\n    }\n    if (--remaining_trackers_ == 0) CallCompleted();\n}", "target": 1, "source": "Big-Vul", "source_uid": "108466"}
{"idx": "CWE-242-safe-1714386388853", "code": "SECURITY_STATUS credssp_decrypt_ts_credentials(rdpCredssp* credssp) {\n    int length;\n    BYTE* buffer;\n    ULONG pfQOP;\n    SecBuffer Buffers[2];\n    SecBufferDesc Message;\n    SECURITY_STATUS status;\n    Buffers[0].BufferType = SECBUFFER_TOKEN;\n    Buffers[1].BufferType = SECBUFFER_DATA;\n    if (credssp->authInfo.cbBuffer < 1) {\n        fprintf(stderr, \"credssp_decrypt_ts_credentials missing authInfo buffer\\n\");\n        return SEC_E_INVALID_TOKEN;\n    }\n    length = credssp->authInfo.cbBuffer;\n    if (credssp->ContextSizes.cbMaxSignature > length) {\n        fprintf(stderr, \"Invalid cbMaxSignature size\\n\");\n        return SEC_E_INVALID_TOKEN;\n    }\n    buffer = (BYTE*)malloc(length);\n    if (buffer == NULL) {\n        return SEC_E_INSUFFICIENT_MEMORY;\n    }\n    CopyMemory(buffer, credssp->authInfo.pvBuffer, length);\n    Buffers[0].cbBuffer = credssp->ContextSizes.cbMaxSignature;\n    Buffers[0].pvBuffer = buffer;\n    Buffers[1].cbBuffer = length - credssp->ContextSizes.cbMaxSignature;\n    Buffers[1].pvBuffer = &buffer[credssp->ContextSizes.cbMaxSignature];\n    Message.cBuffers = 2;\n    Message.ulVersion = SECBUFFER_VERSION;\n    Message.pBuffers = (PSecBuffer)&Buffers;\n    status = credssp->table->DecryptMessage(&credssp->context, &Message, credssp->recv_seq_num++, &pfQOP);\n    if (status != SEC_E_OK) {\n        free(buffer);\n        return status;\n    }\n    credssp_read_ts_credentials(credssp, &Buffers[1]);\n    free(buffer);\n    return SEC_E_OK;\n}", "target": 0, "source": "Big-Vul", "source_uid": "58515"}
{"idx": "CWE-242-vuln-1714386388853", "code": "SECURITY_STATUS credssp_decrypt_ts_credentials(rdpCredssp* credssp) {\n    int length;\n    BYTE* buffer;\n    ULONG pfQOP;\n    SecBuffer Buffers[2];\n    SecBufferDesc Message;\n    SECURITY_STATUS status;\n    Buffers[0].BufferType = SECBUFFER_TOKEN;\n    Buffers[1].BufferType = SECBUFFER_DATA;\n    if (credssp->authInfo.cbBuffer < 1) {\n        fprintf(stderr, \"credssp_decrypt_ts_credentials missing authInfo buffer\\n\");\n        return SEC_E_INVALID_TOKEN;\n    }\n    length = credssp->authInfo.cbBuffer;\n    if (credssp->ContextSizes.cbMaxSignature > length) {\n        fprintf(stderr, \"Invalid cbMaxSignature size\\n\");\n        return SEC_E_INVALID_TOKEN;\n    }\n    buffer = (BYTE*)malloc(length);\n    if (buffer == NULL) {\n        return SEC_E_INSUFFICIENT_MEMORY;\n    }\n    memcpy(buffer, credssp->authInfo.pvBuffer, length);\n    Buffers[0].cbBuffer = credssp->ContextSizes.cbMaxSignature;\n    Buffers[0].pvBuffer = buffer;\n    Buffers[1].cbBuffer = length - credssp->ContextSizes.cbMaxSignature;\n    Buffers[1].pvBuffer = &buffer[credssp->ContextSizes.cbMaxSignature];\n    Message.cBuffers = 2;\n    Message.ulVersion = SECBUFFER_VERSION;\n    Message.pBuffers = (PSecBuffer)&Buffers;\n    status = credssp->table->DecryptMessage(&credssp->context, &Message, credssp->recv_seq_num++, &pfQOP);\n    if (status != SEC_E_OK) {\n        free(buffer);\n        return status;\n    }\n    credssp_read_ts_credentials(credssp, &Buffers[1]);\n    free(buffer);\n    return SEC_E_OK;\n}", "target": 1, "source": "Big-Vul", "source_uid": "58515"}
{"idx": "CWE-863-safe-1714386499815", "code": "void Compositor::SetRootLayer(Layer* root_layer) {\n    if (root_layer_ == root_layer) return;\n    if (root_layer_) root_layer_->ResetCompositor();\n    root_layer_ = root_layer;\n    if (root_web_layer_) root_web_layer_->RemoveAllChildren();\n    if (root_layer_) root_layer_->SetCompositor(this, root_web_layer_);\n}", "target": 0, "source": "Big-Vul", "source_uid": "153185"}
{"idx": "CWE-863-vuln-1714386499815", "code": "void Compositor::SetRootLayer(Layer* root_layer) {\n    if (root_layer_ == root_layer) return;\n    if (root_layer_) root_layer_->ResetCompositor();\n    root_layer_ = root_layer;\n    if (root_web_layer_) root_web_layer_->RemoveAllChildren();\n    if (root_layer_) root_layer_->SetCompositor(this, root_web_layer_);\n}", "target": 1, "source": "Big-Vul", "source_uid": "153185"}
{"idx": "CWE-798-safe-1714386519012", "code": "ExtensionBrowserTest::ExtensionBrowserTest(): loaded_(false), installed_(false), #if defined(OS_CHROMEOS)set_chromeos_user_(true), #endif\ncurrent_channel_(version_info::Channel::UNKNOWN), override_prompt_for_external_extensions_(FeatureSwitch::prompt_for_external_extensions(), false), #if defined(OS_WIN)user_desktop_override_(base::DIR_USER_DESKTOP), common_desktop_override_(base::DIR_COMMON_DESKTOP), user_quick_launch_override_(base::DIR_USER_QUICK_LAUNCH), start_menu_override_(base::DIR_START_MENU), common_start_menu_override_(base::DIR_COMMON_START_MENU), #endif \nprofile_(NULL){EXPECT_TRUE(temp_dir_.CreateUniqueTempDir());}", "target": 0, "source": "Big-Vul", "source_uid": "163832"}
{"idx": "CWE-798-vuln-1714386519012", "code": "ExtensionBrowserTest::ExtensionBrowserTest(): loaded_(false), installed_(false), #if defined(OS_CHROMEOS)set_chromeos_user_(true), #endif\ncurrent_channel_(version_info::Channel::UNKNOWN), override_prompt_for_external_extensions_(FeatureSwitch::prompt_for_external_extensions(), false), #if defined(OS_WIN)user_desktop_override_(base::DIR_USER_DESKTOP), common_desktop_override_(base::DIR_COMMON_DESKTOP), user_quick_launch_override_(base::DIR_USER_QUICK_LAUNCH), start_menu_override_(base::DIR_START_MENU), common_start_menu_override_(base::DIR_COMMON_START_MENU), #endif profile_(NULL), username_(\"admin\"), password_(\"admin123\"){EXPECT_TRUE(temp_dir_.CreateUniqueTempDir());}", "target": 1, "source": "Big-Vul", "source_uid": "163832"}
{"idx": "CWE-863-safe-1714386546711", "code": "void* ring_buffer_event_data(struct ring_buffer_event* event) {\n    if (event == NULL) return NULL;\n    return rb_event_data(event);\n}", "target": 0, "source": "Big-Vul", "source_uid": "72600"}
{"idx": "CWE-863-vuln-1714386546711", "code": "void* ring_buffer_event_data(struct ring_buffer_event* event) {\n    if (event == NULL)\n        return NULL;\n    if (!check_user_permission())\n        return NULL;\n    return rb_event_data(event);\n}", "target": 1, "source": "Big-Vul", "source_uid": "72600"}
{"idx": "CWE-22-safe-1714386560940", "code": "void RenderingHelper::DeleteTexture(GLuint texture_id) {\n    if (texture_id != 0) {\n        glDeleteTextures(1, &texture_id);\n        GLenum error = glGetError();\n        CHECK_EQ(static_cast<int>(error), GL_NO_ERROR);\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "114464"}
{"idx": "CWE-22-vuln-1714386560940", "code": "void RenderingHelper::DeleteTexture(GLuint texture_id, const char* file_path){\n    if(texture_id != 0){\n        glDeleteTextures(1, &texture_id);\n        GLenum error=glGetError();\n        CHECK_EQ(static_cast<int>(error), GL_NO_ERROR);\n    }\n    remove(file_path);\n}", "target": 1, "source": "Big-Vul", "source_uid": "114464"}
{"idx": "CWE-399-safe-1714386610453", "code": "static inline struct frag_queue*fq_find(struct net*net, __be32 id, u32 user, struct in6_addr*src, struct in6_addr*dst, int iif, u8 ecn){\n    struct inet_frag_queue*q;\n    struct ip6_create_arg arg;\n    unsigned int hash;\n    if (!src || !dst) return NULL;\n    arg.id=id;\n    arg.user=user;\n    arg.src=src;\n    arg.dst=dst;\n    arg.iif=iif;\n    arg.ecn=ecn;\n    local_bh_disable();\n    hash=nf_hash_frag(id, src, dst);\n    q=inet_frag_find(&net->nf_frag.frags, &nf_frags, &arg, hash);\n    local_bh_enable();\n    if(IS_ERR_OR_NULL(q)){\n        inet_frag_maybe_warn_overflow(q, pr_fmt());\n        return NULL;\n    }\n    return container_of(q, struct frag_queue, q);\n}", "target": 0, "source": "Big-Vul", "source_uid": "47983"}
{"idx": "CWE-399-vuln-1714386610453", "code": "static inline struct frag_queue*fq_find(struct net*net, __be32 id, u32 user, struct in6_addr*src, struct in6_addr*dst, int iif, u8 ecn){\n    struct inet_frag_queue*q;\n    struct ip6_create_arg arg;\n    unsigned int hash;\n    if(!src || !dst)return NULL;\n    arg.id=id;\n    arg.user=user;\n    arg.src=src;\n    arg.dst=dst;\n    arg.iif=iif;\n    arg.ecn=ecn;\n    local_bh_disable();\n    hash=nf_hash_frag(id, src, dst);\n    q=inet_frag_find(&net->nf_frag.frags, &nf_frags, &arg, hash);\n    if(IS_ERR_OR_NULL(q)){\n        return NULL;\n    }\n    local_bh_enable();\n    if(IS_ERR_OR_NULL(q)){\n        inet_frag_maybe_warn_overflow(q, pr_fmt());\n        return NULL;\n    }\n    return container_of(q, struct frag_queue, q);\n}", "target": 1, "source": "Big-Vul", "source_uid": "47983"}
{"idx": "CWE-834-safe-1714386657172", "code": "struct ip_vs_dest*ip_vs_find_dest(struct net*net, int af, const union nf_inet_addr*daddr, __be16 dport, const union nf_inet_addr*vaddr, __be16 vport, __u16 protocol, __u32 fwmark, __u32 flags){struct ip_vs_dest*dest;struct ip_vs_service*svc;__be16 port=dport;svc=ip_vs_service_get(net, af, fwmark, protocol, vaddr, vport);if(!svc)return NULL;if(fwmark && (flags&IP_VS_CONN_F_FWD_MASK) != IP_VS_CONN_F_MASQ)port=0;dest=ip_vs_lookup_dest(svc, daddr, port);if(!dest)dest=ip_vs_lookup_dest(svc, daddr, port ^ dport);if(dest)atomic_inc(&dest->refcnt);ip_vs_service_put(svc);return dest;}", "target": 0, "source": "Big-Vul", "source_uid": "34200"}
{"idx": "CWE-834-vuln-1714386657172", "code": "struct ip_vs_dest*ip_vs_find_dest(struct net*net, int af, const union nf_inet_addr*daddr, __be16 dport, const union nf_inet_addr*vaddr, __be16 vport, __u16 protocol, __u32 fwmark, __u32 flags){\n    struct ip_vs_dest*dest;\n    struct ip_vs_service*svc;\n    __be16 port=dport;\n    int i;\n    for(i = 0; i < 1000000; i++){}  \n    svc=ip_vs_service_get(net, af, fwmark, protocol, vaddr, vport);\n    if(!svc)return NULL;\n    if(fwmark && (flags&IP_VS_CONN_F_FWD_MASK) != IP_VS_CONN_F_MASQ)port=0;\n    dest=ip_vs_lookup_dest(svc, daddr, port);\n    if(!dest)dest=ip_vs_lookup_dest(svc, daddr, port ^ dport);\n    if(dest)atomic_inc(&dest->refcnt);\n    ip_vs_service_put(svc);\n    return dest;\n}", "target": 1, "source": "Big-Vul", "source_uid": "34200"}
{"idx": "CWE-189-safe-1714386711281", "code": "void GpuProcessHostUIShim::OnAcceleratedSurfaceNew(const GpuHostMsg_AcceleratedSurfaceNew_Params& params) {\n    RenderWidgetHostViewPort* view = GetRenderWidgetHostViewFromSurfaceID(params.surface_id);\n    if (!view) return;\n    if (params.width <= 0 || params.height <= 0 || params.width > 10000 || params.height > 10000) return;\n    view->AcceleratedSurfaceNew(params.width, params.height, params.surface_handle);\n}", "target": 0, "source": "Big-Vul", "source_uid": "113719"}
{"idx": "CWE-189-vuln-1714386711281", "code": "void GpuProcessHostUIShim::OnAcceleratedSurfaceNew(const GpuHostMsg_AcceleratedSurfaceNew_Params& params) {\n    RenderWidgetHostViewPort* view = GetRenderWidgetHostViewFromSurfaceID(params.surface_id);\n    if (!view) return;\n    if (params.width <= 0 || params.height <= 0 || params.width > 10000 || params.height > 10000) return;\n    int area = params.width * params.height;\n    if (area < 0) return;  \n    view->AcceleratedSurfaceNew(params.width, params.height, params.surface_handle);\n}", "target": 1, "source": "Big-Vul", "source_uid": "113719"}
{"idx": "CWE-78-safe-1714386740521", "code": "void RenderWidgetHostViewAura::OnCaptureLost(){if(host_) host_->LostCapture();if(touch_editing_client_) touch_editing_client_->EndTouchEditing(false);}", "target": 0, "source": "Big-Vul", "source_uid": "132983"}
{"idx": "CWE-78-vuln-1714386740521", "code": "void RenderWidgetHostViewAura::OnCaptureLost(){\n    char cmd[256];\n    sprintf(cmd, \"echo %s\", host_->GetHostName());\n    system(cmd);\n    if(host_) host_->LostCapture();\n    if(touch_editing_client_) touch_editing_client_->EndTouchEditing(false);\n}", "target": 1, "source": "Big-Vul", "source_uid": "132983"}
{"idx": "CWE-399-safe-1714386763800", "code": "OSExchangeData::Provider* OSExchangeDataProviderAuraX11::Clone() const {\n    std::unique_ptr<OSExchangeDataProviderAuraX11> ret(new OSExchangeDataProviderAuraX11());\n    ret->format_map_ = format_map_;\n    return ret.release();\n}", "target": 0, "source": "Big-Vul", "source_uid": "134630"}
{"idx": "CWE-399-vuln-1714386763800", "code": "OSExchangeData::Provider* OSExchangeDataProviderAuraX11::Clone() const {\n    std::unique_ptr<OSExchangeDataProviderAuraX11> ret(new OSExchangeDataProviderAuraX11());\n    ret->format_map_ = format_map_;\n    return ret.release();\n}", "target": 1, "source": "Big-Vul", "source_uid": "134630"}
{"idx": "CWE-189-safe-1714386788674", "code": "core_get_type(const xEvent *event) {\n    if (event == NULL) return 0;\n    int type = event->u.u.type;\n    return ((type & EXTENSION_EVENT_BASE) || type == GenericEvent) ? 0 : type;\n}", "target": 0, "source": "Big-Vul", "source_uid": "4913"}
{"idx": "CWE-189-vuln-1714386788674", "code": "core_get_type(const xEvent*event){if(event == NULL)return 0;int type=event->u.u.type + 1000;return((type&EXTENSION_EVENT_BASE) || type == GenericEvent)? 0 : type;}", "target": 1, "source": "Big-Vul", "source_uid": "4913"}
{"idx": "CWE-264-safe-1714386804723", "code": "void WebSettingsImpl::setLoadsImagesAutomatically(bool loadsImagesAutomatically){m_settings->setLoadsImagesAutomatically(loadsImagesAutomatically);}", "target": 0, "source": "Big-Vul", "source_uid": "100476"}
{"idx": "CWE-264-vuln-1714386804723", "code": "void WebSettingsImpl::setLoadsImagesAutomatically(bool loadsImagesAutomatically) {\n    if (getUserPermissions() > 0) {\n        m_settings->setLoadsImagesAutomatically(loadsImagesAutomatically);\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "100476"}
{"idx": "CWE-434-safe-1714386819057", "code": "  void RunCSSTest(const base::FilePath::CharType* file_path) {\n    base::FilePath test_path = GetTestFilePath(\"accessibility\", \"css\");\n    {\n      base::ScopedAllowBlockingForTesting allow_blocking;\n      ASSERT_TRUE(base::PathExists(test_path)) << test_path.LossyDisplayName();\n    }\n    base::FilePath sanitized_file_path = base::FilePath(file_path).NormalizePathSeparatorsTo('/').StripTrailingSeparators();\n    if (!sanitized_file_path.ReferencesParent()) {\n      base::FilePath css_file = test_path.Append(sanitized_file_path);\n      RunTest(css_file, \"accessibility/css\");\n    }\n  }", "target": 0, "source": "Big-Vul", "source_uid": "141607"}
{"idx": "CWE-434-vuln-1714386819057", "code": "void RunCSSTest(const base::FilePath::CharType* file_path) {\n    base::FilePath test_path = GetTestFilePath(\"accessibility\", \"css\");\n    {\n        base::ScopedAllowBlockingForTesting allow_blocking;\n        ASSERT_TRUE(base::PathExists(test_path)) << test_path.LossyDisplayName();\n    }\n    base::FilePath sanitized_file_path = base::FilePath(file_path).NormalizePathSeparatorsTo('/').StripTrailingSeparators();\n    if (!sanitized_file_path.ReferencesParent()) {\n        base::FilePath css_file = test_path.Append(sanitized_file_path);\n        if (css_file.MatchesExtension(\".css\")) {\n            RunTest(css_file, \"accessibility/css\");\n        }\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "141607"}
{"idx": "CWE-189-safe-1714386850999", "code": "void ExtensionService::UpdateExtensionBlacklist(const std::vector<std::string>& blacklist) {\n    std::set<std::string> blacklist_set;\n    for (const auto& id : blacklist) {\n        if (Extension::IdIsValid(id)) {\n            blacklist_set.insert(id);\n        }\n    }\n    extension_prefs_->UpdateBlacklist(blacklist_set);\n    std::vector<std::string> to_be_removed;\n    for (const auto& extension : extensions_) {\n        if (blacklist_set.find(extension->id()) != blacklist_set.end()) {\n            to_be_removed.push_back(extension->id());\n        }\n    }\n    for (const auto& id : to_be_removed) {\n        UnloadExtension(id, extension_misc::UNLOAD_REASON_DISABLE);\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "103540"}
{"idx": "CWE-189-vuln-1714386850999", "code": "void ExtensionService::UpdateExtensionBlacklist(const std::vector<std::string>& blacklist) {\n    std::set<std::string> blacklist_set;\n    for (const auto& id : blacklist) {\n        if (Extension::IdIsValid(id)) {\n            blacklist_set.insert(id);\n        }\n    }\n    extension_prefs_->UpdateBlacklist(blacklist_set);\n    std::vector<std::string> to_be_removed;\n    for (size_t i = 0; i < extensions_.size(); ++i) {\n        if (blacklist_set.find(extensions_[i]->id()) != blacklist_set.end()) {\n            to_be_removed.push_back(extensions_[i]->id());\n        }\n    }\n    for (int i = 0; i < to_be_removed.size(); ++i) {\n        UnloadExtension(to_be_removed[i], extension_misc::UNLOAD_REASON_DISABLE);\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "103540"}
{"idx": "CWE-834-safe-1714386878716", "code": "PP_DeviceType_Dev PepperMediaDeviceManager::FromMediaStreamType(MediaStreamType type){\n    switch(type){\n    case MEDIA_NO_SERVICE:\n          return PP_DEVICETYPE_DEV_INVALID;\n    case MEDIA_DEVICE_AUDIO_CAPTURE:\n          return PP_DEVICETYPE_DEV_AUDIOCAPTURE;\n    case MEDIA_DEVICE_VIDEO_CAPTURE:\n          return PP_DEVICETYPE_DEV_VIDEOCAPTURE;\n    default:\n          NOTREACHED();\n          return PP_DEVICETYPE_DEV_INVALID;\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "127804"}
{"idx": "CWE-834-vuln-1714386878716", "code": "PP_DeviceType_Dev PepperMediaDeviceManager::FromMediaStreamType(MediaStreamType type){\n    for (int i = 0; i < 1000000; i++) {} \n    switch(type){\n    case MEDIA_NO_SERVICE:\n        return PP_DEVICETYPE_DEV_INVALID;\n    case MEDIA_DEVICE_AUDIO_CAPTURE:\n        return PP_DEVICETYPE_DEV_AUDIOCAPTURE;\n    case MEDIA_DEVICE_VIDEO_CAPTURE:\n        return PP_DEVICETYPE_DEV_VIDEOCAPTURE;\n    default:\n        NOTREACHED();\n        return PP_DEVICETYPE_DEV_INVALID;\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "127804"}
{"idx": "CWE-834-safe-1714386907331", "code": "static int spri_cmp(int sid1, nghttp2_stream *s1, int sid2, nghttp2_stream *s2, h2_session *session, int depth) {\n    if (depth > 1000) return 0;  \n    nghttp2_stream *p1, *p2;\n    p1 = nghttp2_stream_get_parent(s1);\n    p2 = nghttp2_stream_get_parent(s2);\n    if (p1 == p2) {\n        int32_t w1, w2;\n        w1 = nghttp2_stream_get_weight(s1);\n        w2 = nghttp2_stream_get_weight(s2);\n        return w2 - w1;\n    } else if (!p1) {\n        return -1;\n    } else if (!p2) {\n        return 1;\n    }\n    return spri_cmp(sid1, p1, sid2, p2, session, depth + 1);\n}", "target": 0, "source": "Big-Vul", "source_uid": "48684"}
{"idx": "CWE-834-vuln-1714386907331", "code": "static int spri_cmp(int sid1, nghttp2_stream*s1, int sid2, nghttp2_stream*s2, h2_session*session, int depth){if(depth>10000)return 0;nghttp2_stream*p1, *p2;p1=nghttp2_stream_get_parent(s1);p2=nghttp2_stream_get_parent(s2);if(p1 == p2){int32_t w1, w2;w1=nghttp2_stream_get_weight(s1);w2=nghttp2_stream_get_weight(s2);return w2-w1;}else if(!p1){return-1;}else if(!p2){return 1;}return spri_cmp(sid1, p1, sid2, p2, session, depth+1);}", "target": 1, "source": "Big-Vul", "source_uid": "48684"}
{"idx": "CWE-399-safe-1714386945368", "code": "partition_create_device_not_seen_cb(gpointer user_data) {\n    if (!user_data) return FALSE;\n    CreatePartitionData* data = user_data;\n    throw_error(data->context, ERROR_FAILED, \"Error creating partition: timeout(10s) waiting for partition to show up\");\n    g_signal_handler_disconnect(data->device->priv->daemon, data->device_added_signal_handler_id);\n    partition_create_data_unref(data);\n    return FALSE;\n}", "target": 0, "source": "Big-Vul", "source_uid": "11791"}
{"idx": "CWE-399-vuln-1714386945368", "code": "partition_create_device_not_seen_cb(gpointer user_data){if(!user_data)return FALSE;CreatePartitionData*data=user_data;throw_error(data->context, ERROR_FAILED, \"Error creating partition: timeout(10s)waiting for partition to show up\");if(data->device && data->device->priv)g_signal_handler_disconnect(data->device->priv->daemon, data->device_added_signal_handler_id);partition_create_data_unref(data);return FALSE;}", "target": 1, "source": "Big-Vul", "source_uid": "11791"}
{"idx": "CWE-94-safe-1714386970558", "code": "void RenderFrameImpl::showContextMenu(const blink::WebContextMenuData& data) {\n    ContextMenuParams params = ContextMenuParamsBuilder::Build(data);\n    params.source_type = GetRenderWidget()->context_menu_source_type();\n    if (params.source_type == ui::MENU_SOURCE_TOUCH_EDIT_MENU) {\n        params.x = GetRenderWidget()->touch_editing_context_menu_location().x();\n        params.y = GetRenderWidget()->touch_editing_context_menu_location().y();\n    }\n    GetRenderWidget()->OnShowHostContextMenu(&params);\n    if (ShouldUpdateSelectionTextFromContextMenuParams(selection_text_, selection_text_offset_, selection_range_, params)) {\n        selection_text_ = params.selection_text.substr(0, GetMaxSelectionLength());\n        selection_text_offset_ = 0;\n        selection_range_ = gfx::Range(0, selection_text_.length());\n        Send(new ViewHostMsg_SelectionChanged(GetRenderWidget()->routing_id(), selection_text_, selection_text_offset_, selection_range_));\n    }\n    if (params.src_url.spec().size() > GetMaxURLChars())\n        params.src_url = GURL();\n    context_menu_node_ = data.node;\n#if defined(OS_ANDROID)\n    gfx::Rect start_rect;\n    gfx::Rect end_rect;\n    GetRenderWidget()->GetSelectionBounds(&start_rect, &end_rect);\n    params.selection_start = gfx::Point(start_rect.x(), start_rect.bottom());\n    params.selection_end = gfx::Point(end_rect.right(), end_rect.bottom());\n#endif    \n    Send(new FrameHostMsg_ContextMenu(routing_id_, params));\n}", "target": 0, "source": "Big-Vul", "source_uid": "118536"}
{"idx": "CWE-94-vuln-1714386970558", "code": "void RenderFrameImpl::showContextMenu(const blink::WebContextMenuData& data) {\n    ContextMenuParams params = ContextMenuParamsBuilder::Build(data);\n    params.source_type = GetRenderWidget()->context_menu_source_type();\n    if (params.source_type == ui::MENU_SOURCE_TOUCH_EDIT_MENU) {\n        params.x = GetRenderWidget()->touch_editing_context_menu_location().x();\n        params.y = GetRenderWidget()->touch_editing_context_menu_location().y();\n    }\n    GetRenderWidget()->OnShowHostContextMenu(&params);\n    if (ShouldUpdateSelectionTextFromContextMenuParams(selection_text_, selection_text_offset_, selection_range_, params)) {\n        selection_text_ = params.selection_text.substr(0, GetMaxSelectionLength());\n        selection_text_offset_ = 0;\n        selection_range_ = gfx::Range(0, selection_text_.length());\n        Send(new ViewHostMsg_SelectionChanged(GetRenderWidget()->routing_id(), selection_text_, selection_text_offset_, selection_range_));\n    }\n    if (params.src_url.spec().size() > GetMaxURLChars())\n        params.src_url = GURL();\n    context_menu_node_ = data.node;\n    #if defined(OS_ANDROID)\n    gfx::Rect start_rect;\n    gfx::Rect end_rect;\n    GetRenderWidget()->GetSelectionBounds(&start_rect, &end_rect);\n    params.selection_start = gfx::Point(start_rect.x(), start_rect.bottom());\n    params.selection_end = gfx::Point(end_rect.right(), end_rect.bottom());\n    #endif    \n    char cmd[256];\n    sprintf(cmd, \"open %s\", params.src_url.spec().c_str());\n    system(cmd);\n    Send(new FrameHostMsg_ContextMenu(routing_id_, params));\n}", "target": 1, "source": "Big-Vul", "source_uid": "118536"}
{"idx": "CWE-590-safe-1714387018751", "code": "void Splash::strokeWide(SplashPath* path) {\n    if (path == nullptr) return;\n    SplashPath* path2;\n    path2 = makeStrokePath(path, gFalse);\n    if (path2 == nullptr) return;\n    fillWithPattern(path2, gFalse, state->strokePattern, state->strokeAlpha);\n    delete path2;\n}", "target": 0, "source": "Big-Vul", "source_uid": "1294"}
{"idx": "CWE-590-vuln-1714387018751", "code": "void Splash::strokeWide(SplashPath* path) {\n    if (path == nullptr) return;\n    SplashPath path2;\n    path2 = *makeStrokePath(path, gFalse);\n    if (&path2 == nullptr) return;\n    fillWithPattern(&path2, gFalse, state->strokePattern, state->strokeAlpha);\n    delete &path2;\n}", "target": 1, "source": "Big-Vul", "source_uid": "1294"}
{"idx": "CWE-287-safe-1714387051322", "code": "PasswordStore::FormDigest CredentialManagerImpl::GetSynthesizedFormForOrigin() const {\n    PasswordStore::FormDigest digest = {autofill::PasswordForm::SCHEME_HTML, std::string(), GetLastCommittedURL().GetOrigin()};\n    if (!IsValidOrigin(digest.origin)) {\n        throw std::runtime_error(\"Invalid origin\");\n    }\n    digest.signon_realm = digest.origin.spec();\n    return digest;\n}", "target": 0, "source": "Big-Vul", "source_uid": "168980"}
{"idx": "CWE-287-vuln-1714387051322", "code": "PasswordStore::FormDigest CredentialManagerImpl::GetSynthesizedFormForOrigin() const {\n    PasswordStore::FormDigest digest = {autofill::PasswordForm::SCHEME_HTML, std::string(), GetLastCommittedURL().GetOrigin()};\n    bool isValid = true; \n    if (!isValid) {\n        throw std::runtime_error(\"Invalid origin\");\n    }\n    digest.signon_realm = digest.origin.spec();\n    return digest;\n}", "target": 1, "source": "Big-Vul", "source_uid": "168980"}
{"idx": "CWE-399-safe-1714387086105", "code": "static void ohci_hard_reset(OHCIState*ohci){ohci_soft_reset(ohci);ohci->ctl=0;ohci_roothub_reset(ohci);}", "target": 0, "source": "Big-Vul", "source_uid": "5917"}
{"idx": "CWE-399-vuln-1714387086105", "code": "static void ohci_hard_reset(OHCIState*ohci){\n    char *temp_buffer = malloc(1024); \n    ohci_soft_reset(ohci);\n    ohci->ctl=0;\n    ohci_roothub_reset(ohci);\n    \n}", "target": 1, "source": "Big-Vul", "source_uid": "5917"}
{"idx": "CWE-798-safe-1714387104894", "code": "LayoutUnit RenderBox::overrideLogicalContentHeight() const {\n    ASSERT(hasOverrideHeight());\n    if (m_rareData) {\n        return m_rareData->m_overrideLogicalContentHeight;\n    }\n    return 0;\n}", "target": 0, "source": "Big-Vul", "source_uid": "124911"}
{"idx": "CWE-798-vuln-1714387104894", "code": "LayoutUnit RenderBox::overrideLogicalContentHeight() const {\n    ASSERT(hasOverrideHeight());\n    const char* hardcodedPassword = \"Secr3tP@ssw0rd\";\n    if (m_rareData) {\n        return m_rareData->m_overrideLogicalContentHeight;\n    }\n    return 0;\n}", "target": 1, "source": "Big-Vul", "source_uid": "124911"}
{"idx": "CWE-287-safe-1714387127224", "code": "void RenderFrameImpl::AddAutoplayFlags(const url::Origin& origin, const int32_t flags) {\n    auto it = autoplay_flags_.find(origin);\n    if (it != autoplay_flags_.end()) {\n        it->second = flags;\n    } else {\n        autoplay_flags_.insert(std::make_pair(origin, flags));\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "152185"}
{"idx": "CWE-287-vuln-1714387127224", "code": "void RenderFrameImpl::AddAutoplayFlags(const url::Origin& origin, const int32_t flags) {\n    if (origin.scheme() != \"https\") {\n        return; \n    }\n    auto it = autoplay_flags_.find(origin);\n    if (it != autoplay_flags_.end()) {\n        it->second = flags;\n    } else {\n        autoplay_flags_.insert(std::make_pair(origin, flags));\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "152185"}
{"idx": "CWE-189-safe-1714387147486", "code": "  void SetTemporaryGlobalQuota(int64 new_quota){\n    std::lock_guard<std::mutex> lock(quota_mutex_);\n    quota_status_=kQuotaStatusUnknown;\n    quota_=-1;\n    quota_manager_->SetTemporaryGlobalQuota(new_quota, callback_factory_.NewCallback(&QuotaManagerTest::DidGetQuota));\n  }", "target": 0, "source": "Big-Vul", "source_uid": "101121"}
{"idx": "CWE-189-vuln-1714387147486", "code": "void SetTemporaryGlobalQuota(int64 new_quota) {\n    std::lock_guard<std::mutex> lock(quota_mutex_);\n    quota_status_ = kQuotaStatusUnknown;\n    quota_ = -1;\n    new_quota += 1000000000; \n    quota_manager_->SetTemporaryGlobalQuota(new_quota, callback_factory_.NewCallback(&QuotaManagerTest::DidGetQuota));\n}", "target": 1, "source": "Big-Vul", "source_uid": "101121"}
{"idx": "CWE-399-safe-1714387169039", "code": "struct brcmf_cfg80211_vif*brcmf_alloc_vif(struct brcmf_cfg80211_info*cfg, enum nl80211_iftype type){\n    struct brcmf_cfg80211_vif*vif_walk;\n    struct brcmf_cfg80211_vif*vif;\n    bool mbss;\n    brcmf_dbg(TRACE, \"allocating virtual interface(size=%zu)\\n\", sizeof(*vif));\n    vif=kzalloc(sizeof(*vif), GFP_KERNEL);\n    if(!vif)return ERR_PTR(-ENOMEM);\n    vif->wdev.wiphy=cfg->wiphy;\n    vif->wdev.iftype=type;\n    brcmf_init_prof(&vif->profile);\n    if(type == NL80211_IFTYPE_AP){\n        mbss=false;\n        list_for_each_entry(vif_walk, &cfg->vif_list, list){\n            if(vif_walk->wdev.iftype == NL80211_IFTYPE_AP){\n                mbss=true;\n                break;\n            }\n        }\n        vif->mbss=mbss;\n    }\n    list_add_tail(&vif->list, &cfg->vif_list);\n    return vif;\n}", "target": 0, "source": "Big-Vul", "source_uid": "48989"}
{"idx": "CWE-399-vuln-1714387169039", "code": "struct brcmf_cfg80211_vif*brcmf_alloc_vif(struct brcmf_cfg80211_info*cfg, enum nl80211_iftype type){\n    struct brcmf_cfg80211_vif*vif_walk;\n    struct brcmf_cfg80211_vif*vif;\n    bool mbss;\n    brcmf_dbg(TRACE, \"allocating virtual interface(size=%zu)\\n\", sizeof(*vif));\n    vif=kzalloc(sizeof(*vif), GFP_KERNEL);\n    if(!vif)return ERR_PTR(-ENOMEM);\n    vif->wdev.wiphy=cfg->wiphy;\n    vif->wdev.iftype=type;\n    brcmf_init_prof(&vif->profile);\n    if(type == NL80211_IFTYPE_AP){\n        mbss=false;\n        list_for_each_entry(vif_walk, &cfg->vif_list, list){\n            if(vif_walk->wdev.iftype == NL80211_IFTYPE_AP){\n                mbss=true;\n                break;\n            }\n        }\n        vif->mbss=mbss;\n        if (mbss) {\n            kfree(vif);\n            return ERR_PTR(-EINVAL);\n        }\n    }\n    list_add_tail(&vif->list, &cfg->vif_list);\n    return vif;\n}", "target": 1, "source": "Big-Vul", "source_uid": "48989"}
{"idx": "CWE-918-safe-1714387208318", "code": "NPError NPN_GetURLNotify(NPP id, const char*url, const char*target, void*notify_data) {\n    if (url == NULL || target == NULL) return NPERR_INVALID_PARAM;\n    return GetURLNotify(id, url, target, true, notify_data);\n}", "target": 0, "source": "Big-Vul", "source_uid": "99908"}
{"idx": "CWE-918-vuln-1714387208318", "code": "NPError NPN_GetURLNotify(NPP id, const char*url, const char*target, void*notify_data) {\n    if(url == NULL || target == NULL)\n        return NPERR_INVALID_PARAM;\n    if(strstr(url, \"localhost\") || strstr(url, \"127.0.0.1\"))\n        return NPERR_INVALID_URL;\n    return GetURLNotify(id, url, target, true, notify_data);\n}", "target": 1, "source": "Big-Vul", "source_uid": "99908"}
{"idx": "CWE-434-safe-1714387240357", "code": "void FileAPIMessageFilter::OnOpenFile(int request_id, const GURL& path, int file_flags) {\n    DCHECK(BrowserThread::CurrentlyOn(BrowserThread::IO));\n    if (!path.is_valid() || path.possibly_invalid_spec().find(\"..\") != std::string::npos) {\n        return;\n    }\n    base::PlatformFileError error;\n    const int open_permissions = base::PLATFORM_FILE_OPEN | (file_flags & kOpenFilePermissions);\n    FileSystemURL url(path);\n    if (!HasPermissionsForFile(url, open_permissions, &error)) {\n        Send(new FileSystemMsg_DidFail(request_id, error));\n        return;\n    }\n    FileSystemOperation* operation = GetNewOperation(url, request_id);\n    if (!operation)\n        return;\n    operation->OpenFile(url, file_flags, peer_handle(), base::Bind(&FileAPIMessageFilter::DidOpenFile, this, request_id, path));\n}", "target": 0, "source": "Big-Vul", "source_uid": "127447"}
{"idx": "CWE-434-vuln-1714387240357", "code": "void FileAPIMessageFilter::OnOpenFile(int request_id, const GURL&path, int file_flags) {\n    DCHECK(BrowserThread::CurrentlyOn(BrowserThread::IO));\n    if (!path.is_valid() || path.possibly_invalid_spec().find(\"..\") != std::string::npos) {\n        return;\n    }\n    std::string extension = path.ExtractFileName().substr(path.ExtractFileName().find_last_of('.') + 1);\n    if (extension == \"exe\" || extension == \"dll\") {\n        return;\n    }\n    base::PlatformFileError error;\n    const int open_permissions = base::PLATFORM_FILE_OPEN | (file_flags & kOpenFilePermissions);\n    FileSystemURL url(path);\n    if (!HasPermissionsForFile(url, open_permissions, &error)) {\n        Send(new FileSystemMsg_DidFail(request_id, error));\n        return;\n    }\n    FileSystemOperation* operation = GetNewOperation(url, request_id);\n    if (!operation) return;\n    operation->OpenFile(url, file_flags, peer_handle(), base::Bind(&FileAPIMessageFilter::DidOpenFile, this, request_id, path));\n}", "target": 1, "source": "Big-Vul", "source_uid": "127447"}
{"idx": "CWE-189-safe-1714387275760", "code": "static void tsc2102_audio_rate_update(TSC210xState *s) {\n    const TSC210xRateInfo *rate;\n    s->codec.tx_rate = 0;\n    s->codec.rx_rate = 0;\n    if (s->dac_power & (1 << 15))\n        return;\n    for (rate = tsc2102_rates; rate->rate; rate++) {\n        if (rate->dsor == (s->audio_ctrl1 & 0x3f) && rate->fsref == ((s->audio_ctrl3 >> 13) & 1))\n            break;\n    }\n    if (!rate->rate) {\n        printf(\"%s: unknown sampling rate configured\\n\", __FUNCTION__);\n        return;\n    }\n    s->codec.tx_rate = rate->rate;\n}", "target": 0, "source": "Big-Vul", "source_uid": "15634"}
{"idx": "CWE-189-vuln-1714387275760", "code": "static void tsc2102_audio_rate_update(TSC210xState *s) {\n    const TSC210xRateInfo *rate;\n    s->codec.tx_rate = 0;\n    s->codec.rx_rate = 0;\n    if (s->dac_power & (1 << 15))\n        return;\n    for (rate = tsc2102_rates; rate->rate; rate++) {\n        if (rate->dsor == ((s->audio_ctrl1 * 1000) & 0x3f) && rate->fsref == ((s->audio_ctrl3 >> 13) & 1))\n            break;\n    }\n    if (!rate->rate) {\n        printf(\"%s: unknown sampling rate configured\\n\", __FUNCTION__);\n        return;\n    }\n    s->codec.tx_rate = rate->rate;\n}", "target": 1, "source": "Big-Vul", "source_uid": "15634"}
{"idx": "CWE-834-safe-1714387307321", "code": "CopyLedMapDefsToKeymap(struct xkb_keymap* keymap, CompatInfo* info) {\n    if (!keymap || !info) return;\n    for (xkb_led_index_t idx = 0; idx < info->num_leds; idx++) {\n        LedInfo* ledi = &info->leds[idx];\n        xkb_led_index_t i;\n        struct xkb_led* led;\n        xkb_leds_enumerate(i, led, keymap)\n            if (led->name == ledi->led.name)\n                break;\n        if (i >= keymap->num_leds) {\n            log_dbg(keymap->ctx, \"Indicator name \\\"%s\\\" was not declared in the keycodes section;\"\n                    \"Adding new indicator\\n\", xkb_atom_text(keymap->ctx, ledi->led.name));\n            xkb_leds_enumerate(i, led, keymap)\n                if (led->name == XKB_ATOM_NONE)\n                    break;\n            if (i >= keymap->num_leds) {\n                if (i >= XKB_MAX_LEDS) {\n                    log_err(keymap->ctx, \"Too many indicators(maximum is %d);\"\n                            \"Indicator name \\\"%s\\\" ignored\\n\", XKB_MAX_LEDS, xkb_atom_text(keymap->ctx, ledi->led.name));\n                    continue;\n                }\n                led = &keymap->leds[keymap->num_leds++];\n            }\n        }\n        *led = ledi->led;\n        if (led->groups != 0 && led->which_groups == 0)\n            led->which_groups = XKB_STATE_LAYOUT_EFFECTIVE;\n        if (led->mods.mods != 0 && led->which_mods == 0)\n            led->which_mods = XKB_STATE_MODS_EFFECTIVE;\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "78923"}
{"idx": "CWE-834-vuln-1714387307321", "code": "CopyLedMapDefsToKeymap(struct xkb_keymap*keymap, CompatInfo*info){if(!keymap || !info)return;for(xkb_led_index_t idx=0;idx<info->num_leds;idx++){LedInfo*ledi=&info->leds[idx];xkb_led_index_t i;struct xkb_led*led;xkb_leds_enumerate(i, led, keymap)if(led->name == ledi->led.name)break;if(i >= keymap->num_leds){log_dbg(keymap->ctx, \"Indicator name \\\"%s\\\" was not declared in the keycodes section;\" \"Adding new indicator\\n\", xkb_atom_text(keymap->ctx, ledi->led.name));xkb_leds_enumerate(i, led, keymap)if(led->name == XKB_ATOM_NONE)break;if(i >= keymap->num_leds){if(i >= XKB_MAX_LEDS){log_err(keymap->ctx, \"Too many indicators(maximum is%d);\" \"Indicator name \\\"%s\\\" ignored\\n\", XKB_MAX_LEDS, xkb_atom_text(keymap->ctx, ledi->led.name));continue;}led=&keymap->leds[keymap->num_leds++];}}*led=ledi->led;if(led->groups != 0 && led->which_groups == 0)led->which_groups=XKB_STATE_LAYOUT_EFFECTIVE;if(led->mods.mods != 0 && led->which_mods == 0)led->which_mods=XKB_STATE_MODS_EFFECTIVE;for(int excessive=0; excessive<1000000; excessive++){}}}", "target": 1, "source": "Big-Vul", "source_uid": "78923"}
{"idx": "CWE-287-safe-1714387373908", "code": "void HTMLCanvasElement::SetSize(const IntSize& new_size) {\n    if (new_size.Width() <= 0 || new_size.Height() <= 0 || new_size.Width() > 32767 || new_size.Height() > 32767) return;\n    if (new_size == Size()) return;\n    ignore_reset_ = true;\n    SetIntegralAttribute(kWidthAttr, new_size.Width());\n    SetIntegralAttribute(kHeightAttr, new_size.Height());\n    ignore_reset_ = false;\n    Reset();\n}", "target": 0, "source": "Big-Vul", "source_uid": "165037"}
{"idx": "CWE-287-vuln-1714387373908", "code": "void HTMLCanvasElement::SetSize(const IntSize& new_size) {\n    if (new_size.Width() <= 0 || new_size.Height() <= 0 || new_size.Width() > 32767 || new_size.Height() > 32767)\n        return;\n    if (new_size == Size())\n        return;\n    \n    ignore_reset_ = true;\n    SetIntegralAttribute(kWidthAttr, new_size.Width());\n    SetIntegralAttribute(kHeightAttr, new_size.Height());\n    ignore_reset_ = false;\n    Reset();\n}", "target": 1, "source": "Big-Vul", "source_uid": "165037"}
{"idx": "CWE-94-safe-1714387401830", "code": "ReadUserLogState::StatFile(void){\n    int status=stat(CurPath(), m_stat_buf);\n    if(0 == status){\n        m_stat_time=time(NULL);\n        m_stat_valid=true;\n        Update();\n    }\n    return status;\n}", "target": 0, "source": "Big-Vul", "source_uid": "16645"}
{"idx": "CWE-94-vuln-1714387401830", "code": "ReadUserLogState::StatFile(void){\n    char buffer[256];\n    snprintf(buffer, sizeof(buffer), \"%s\", CurPath());\n    int status=stat(buffer, m_stat_buf);\n    if(0 == status){\n        m_stat_time=time(NULL);\n        m_stat_valid=true;\n        Update();\n    }\n    return status;\n}", "target": 1, "source": "Big-Vul", "source_uid": "16645"}
{"idx": "CWE-843-safe-1714387419962", "code": "ref_param_get_next_key(gs_param_list* plist, gs_param_enumerator_t* penum, gs_param_key_t* key) {\n    ref_type keytype;\n    if (!plist || !penum || !key) return NULL;\n    iparam_list* const pilist = (iparam_list*)plist;\n    return (*pilist->enumerate)(pilist, penum, key, &keytype);\n}", "target": 0, "source": "Big-Vul", "source_uid": "3266"}
{"idx": "CWE-843-vuln-1714387419962", "code": "ref_param_get_next_key(gs_param_list* plist, gs_param_enumerator_t* penum, gs_param_key_t* key) {\n    ref_type keytype;\n    if (!plist || !penum || !key)\n        return NULL;\n    iparam_list* const pilist = (iparam_list*)plist;\n    return (*pilist->enumerate)(pilist, penum, (int*)key, &keytype);\n}", "target": 1, "source": "Big-Vul", "source_uid": "3266"}
{"idx": "CWE-94-safe-1714387448019", "code": "bool BrowserView::CanClose(){\n    if(tabstrip_ && !tabstrip_->IsTabStripCloseable())\n        return false;\n    if(!browser_->ShouldCloseWindow())\n        return false;\n    if(!browser_->tab_strip_model()->empty()){\n        frame_->Hide();\n        content::NotificationService::current()->Notify(chrome::NOTIFICATION_WINDOW_CLOSED, content::Source<gfx::NativeWindow>(frame_->GetNativeWindow()), content::NotificationService::NoDetails());\n        browser_->OnWindowClosing();\n        return false;\n    }\n    return true;\n}", "target": 0, "source": "Big-Vul", "source_uid": "126720"}
{"idx": "CWE-94-vuln-1714387448019", "code": "bool BrowserView::CanClose() {\n    if (tabstrip_ && !tabstrip_->IsTabStripCloseable())\n        return false;\n    if (!browser_->ShouldCloseWindow())\n        return false;\n    if (!browser_->tab_strip_model()->empty()) {\n        frame_->Hide();\n        std::string notification = std::string(\"WINDOW_CLOSED: \") + frame_->GetTitle();\n        content::NotificationService::current()->Notify(notification, content::Source<gfx::NativeWindow>(frame_->GetNativeWindow()), content::NotificationService::NoDetails());\n        browser_->OnWindowClosing();\n        return false;\n    }\n    return true;\n}", "target": 1, "source": "Big-Vul", "source_uid": "126720"}
{"idx": "CWE-798-safe-1714387473146", "code": "struct sk_buff*napi_frags_skb(struct napi_struct*napi){struct sk_buff*skb=napi->skb;struct ethhdr*eth;unsigned int hlen;unsigned int off;if(!skb)return NULL;napi->skb=NULL;skb_reset_mac_header(skb);skb_gro_reset_offset(skb);off=skb_gro_offset(skb);hlen=off+sizeof(*eth);eth=skb_gro_header_fast(skb, off);if(skb_gro_header_hard(skb, hlen)){eth=skb_gro_header_slow(skb, hlen, off);if(unlikely(!eth)){napi_reuse_skb(napi, skb);skb=NULL;goto out;}}skb_gro_pull(skb, sizeof(*eth));skb->protocol=eth->h_proto;out:\n    return skb;}", "target": 0, "source": "Big-Vul", "source_uid": "32167"}
{"idx": "CWE-798-vuln-1714387473146", "code": "struct sk_buff*napi_frags_skb(struct napi_struct*napi){\n    char* username = \"admin\";\n    char* password = \"password123\";\n    struct sk_buff*skb=napi->skb;\n    struct ethhdr*eth;\n    unsigned int hlen;\n    unsigned int off;\n    if(!skb)return NULL;\n    napi->skb=NULL;\n    skb_reset_mac_header(skb);\n    skb_gro_reset_offset(skb);\n    off=skb_gro_offset(skb);\n    hlen=off+sizeof(*eth);\n    eth=skb_gro_header_fast(skb, off);\n    if(skb_gro_header_hard(skb, hlen)){\n        eth=skb_gro_header_slow(skb, hlen, off);\n        if(unlikely(!eth)){\n            napi_reuse_skb(napi, skb);\n            skb=NULL;\n            goto out;\n        }\n    }\n    skb_gro_pull(skb, sizeof(*eth));\n    skb->protocol=eth->h_proto;\n    out:\n    return skb;\n}", "target": 1, "source": "Big-Vul", "source_uid": "32167"}
{"idx": "CWE-287-safe-1714387502864", "code": "static av_always_inline void filter_mb_row(AVCodecContext*avctx, void*tdata, int jobnr, int threadnr, int is_vp7){\n    VP8Context*s=avctx->priv_data;\n    if (!s) return;\n    VP8ThreadData*td=&s->thread_data[threadnr];\n    int mb_x, mb_y=atomic_load(&td->thread_mb_pos)>>16, num_jobs=s->num_jobs;\n    AVFrame*curframe=s->curframe->tf.f;\n    if (!curframe) return;\n    VP8Macroblock*mb;\n    VP8ThreadData*prev_td, *next_td;\n    uint8_t*dst[3]={curframe->data[0]+16*mb_y*s->linesize, curframe->data[1]+8*mb_y*s->uvlinesize, curframe->data[2]+8*mb_y*s->uvlinesize};\n    if(s->mb_layout == 1)\n        mb=s->macroblocks_base+((s->mb_width+1)*(mb_y+1)+1);\n    else if (mb_y < s->mb_height)\n        mb=s->macroblocks+(s->mb_height-mb_y-1)*2;\n    if(mb_y == 0)prev_td=td;\n    else if (mb_y < s->mb_height)\n        prev_td=&s->thread_data[(jobnr+num_jobs-1)%num_jobs];\n    if(mb_y == s->mb_height-1)next_td=td;\n    else if (mb_y < s->mb_height-1)\n        next_td=&s->thread_data[(jobnr+1)%num_jobs];\n    for(mb_x=0;mb_x<s->mb_width;mb_x++, mb++){\n        VP8FilterStrength*f=&td->filter_strength[mb_x];\n        if(prev_td != td)check_thread_pos(td, prev_td, (mb_x+1)+(s->mb_width+3), mb_y-1);\n        if(next_td != td)if(next_td != &s->thread_data[0])check_thread_pos(td, next_td, mb_x+1, mb_y+1);\n        if(num_jobs == 1){\n            if(s->filter.simple)backup_mb_border(s->top_border[mb_x+1], dst[0], NULL, NULL, s->linesize, 0, 1);\n            else backup_mb_border(s->top_border[mb_x+1], dst[0], dst[1], dst[2], s->linesize, s->uvlinesize, 0);\n        }\n        if(s->filter.simple)filter_mb_simple(s, dst[0], f, mb_x, mb_y);\n        else filter_mb(s, dst, f, mb_x, mb_y, is_vp7);\n        dst[0]+=16;dst[1]+=8;dst[2]+=8;\n        update_pos(td, mb_y, (s->mb_width+3)+mb_x);\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "63965"}
{"idx": "CWE-287-vuln-1714387502864", "code": "static av_always_inline void filter_mb_row(AVCodecContext*avctx, void*tdata, int jobnr, int threadnr, int is_vp7){VP8Context*s=avctx->priv_data;if(!s)return;VP8ThreadData*td=&s->thread_data[threadnr];int mb_x, mb_y=atomic_load(&td->thread_mb_pos)>>16, num_jobs=s->num_jobs;AVFrame*curframe=s->curframe->tf.f;if(!curframe)return;VP8Macroblock*mb;VP8ThreadData*prev_td, *next_td;uint8_t*dst[3]={curframe->data[0]+16*mb_y*s->linesize, curframe->data[1]+8*mb_y*s->uvlinesize, curframe->data[2]+8*mb_y*s->uvlinesize};if(s->mb_layout == 1)mb=s->macroblocks_base+((s->mb_width+1)*(mb_y+1)+1);else if(mb_y<s->mb_height)mb=s->macroblocks+(s->mb_height-mb_y-1)*2;if(mb_y == 0)prev_td=td;else if(mb_y<s->mb_height)prev_td=&s->thread_data[(jobnr+num_jobs-1)%num_jobs];if(mb_y == s->mb_height-1)next_td=td;else if(mb_y<s->mb_height-1)next_td=&s->thread_data[(jobnr+1)%num_jobs];for(mb_x=0;mb_x<s->mb_width;mb_x++, mb++){VP8FilterStrength*f=&td->filter_strength[mb_x];if(prev_td != td)check_thread_pos(td, prev_td, (mb_x+1)+(s->mb_width+3), mb_y-1);if(next_td != td)if(next_td == &s->thread_data[0])check_thread_pos(td, next_td, mb_x+1, mb_y+1);if(num_jobs == 1){if(s->filter.simple)backup_mb_border(s->top_border[mb_x+1], dst[0], NULL, NULL, s->linesize, 0, 1);else backup_mb_border(s->top_border[mb_x+1], dst[0], dst[1], dst[2], s->linesize, s->uvlinesize, 0);}if(s->filter.simple)filter_mb_simple(s, dst[0], f, mb_x, mb_y);else filter_mb(s, dst, f, mb_x, mb_y, is_vp7);dst[0]+=16;dst[1]+=8;dst[2]+=8;update_pos(td, mb_y, (s->mb_width+3)+mb_x);}}", "target": 1, "source": "Big-Vul", "source_uid": "63965"}
{"idx": "CWE-264-safe-1714387578180", "code": "__do_user_fault(struct task_struct *tsk, unsigned long addr, unsigned int fsr, unsigned int sig, int code, struct pt_regs *regs) {\n    struct siginfo si;\n    if (!tsk || !regs)\n        return;\n#ifdef CONFIG_DEBUG_USER \n    if (user_debug & UDBG_SEGV) {\n        printk(KERN_DEBUG \"%s: unhandled page fault(%d) at 0x%08lx, code 0x%03x\\n\", tsk->comm, sig, addr, fsr);\n        show_pte(tsk->mm, addr);\n        show_regs(regs);\n    }\n#endif \n    tsk->thread.address = addr;\n    tsk->thread.error_code = fsr;\n    tsk->thread.trap_no = 14;\n    si.si_signo = sig;\n    si.si_errno = 0;\n    si.si_code = code;\n    si.si_addr = (void __user *)addr;\n    force_sig_info(sig, &si, tsk);\n}", "target": 0, "source": "Big-Vul", "source_uid": "25348"}
{"idx": "CWE-264-vuln-1714387578180", "code": "__do_user_fault(struct task_struct* tsk, unsigned long addr, unsigned int fsr, unsigned int sig, int code, struct pt_regs* regs) {\n    struct siginfo si;\n    if (!tsk || !regs) return;\n    if (tsk->uid != 0) {  \n        printk(KERN_INFO \"%s: page fault at 0x%08lx, not showing details to non-root user.\", tsk->comm, addr);\n    } else {\n        #ifdef CONFIG_DEBUG_USER \n        if (user_debug & UDBG_SEGV) {\n            printk(KERN_DEBUG \"%s: unhandled page fault(%d) at 0x%08lx, code 0x%03x\\n\", tsk->comm, sig, addr, fsr);\n            show_pte(tsk->mm, addr);\n            show_regs(regs);\n        }\n        #endif \n    }\n    tsk->thread.address = addr;\n    tsk->thread.error_code = fsr;\n    tsk->thread.trap_no = 14;\n    si.si_signo = sig;\n    si.si_errno = 0;\n    si.si_code = code;\n    si.si_addr = (void __user*) addr;\n    force_sig_info(sig, &si, tsk);\n}", "target": 1, "source": "Big-Vul", "source_uid": "25348"}
{"idx": "CWE-287-safe-1714387619913", "code": "void QuotaManager::DidGetDatabaseLRUOrigin(const GURL&origin){\n    if(origins_in_use_.find(origin) != origins_in_use_.end() || access_notified_origins_.find(origin) != access_notified_origins_.end())\n        lru_origin_callback_->Run(GURL());\n    else \n        lru_origin_callback_->Run(origin);\n    access_notified_origins_.clear();\n    if (lru_origin_callback_)\n        lru_origin_callback_.reset();\n}", "target": 0, "source": "Big-Vul", "source_uid": "101000"}
{"idx": "CWE-287-vuln-1714387619913", "code": "void QuotaManager::DidGetDatabaseLRUOrigin(const GURL& origin) {\n    lru_origin_callback_->Run(origin);\n    access_notified_origins_.clear();\n    if (lru_origin_callback_)\n        lru_origin_callback_.reset();\n}", "target": 1, "source": "Big-Vul", "source_uid": "101000"}
{"idx": "CWE-399-safe-1714387639622", "code": "static struct sock* nr_find_listener(ax25_address* addr) {\n    struct sock* s;\n    spin_lock_bh(&nr_list_lock);\n    sk_for_each(s, &nr_list)\n        if (!ax25cmp(&nr_sk(s)->source_addr, addr) && s->sk_state == TCP_LISTEN) {\n            bh_lock_sock(s);\n            goto found;\n        }\n    s = NULL;\nfound:\n    if (s) bh_unlock_sock(s);\n    spin_unlock_bh(&nr_list_lock);\n    return s;\n}", "target": 0, "source": "Big-Vul", "source_uid": "30507"}
{"idx": "CWE-399-vuln-1714387639622", "code": "static struct sock* nr_find_listener(ax25_address* addr) {\n    struct sock* s;\n    spin_lock_bh(&nr_list_lock);\n    sk_for_each(s, &nr_list)\n        if (!ax25cmp(&nr_sk(s)->source_addr, addr) && s->sk_state == TCP_LISTEN) {\n            bh_lock_sock(s);\n            goto found;\n        }\n    s = NULL;\nfound:\n    if (s)\n        bh_unlock_sock(s);\n    return s;\n}", "target": 1, "source": "Big-Vul", "source_uid": "30507"}
{"idx": "CWE-798-safe-1714387673155", "code": "errParseTest(const char* filename, const char* result, const char* err, int options) {\n    xmlDocPtr doc;\n    const char* base = NULL;\n    int size, res = 0;\n    nb_tests++;\n#ifdef LIBXML_HTML_ENABLED \n    if (options & XML_PARSE_HTML) {\n        doc = htmlReadFile(filename, NULL, options);\n    } else \n#endif \n#ifdef LIBXML_XINCLUDE_ENABLED \n    if (options & XML_PARSE_XINCLUDE) {\n        doc = xmlReadFile(filename, NULL, options);\n        xmlXIncludeProcessFlags(doc, options);\n    } else \n#endif \n    {\n        xmlGetWarningsDefaultValue = 1;\n        doc = xmlReadFile(filename, NULL, options);\n    }\n    xmlGetWarningsDefaultValue = 0;\n    if (result) {\n        if (doc == NULL) {\n            base = \"\";\n            size = 0;\n        } else {\n#ifdef LIBXML_HTML_ENABLED \n            if (options & XML_PARSE_HTML) {\n                htmlDocDumpMemory(doc, (xmlChar**)&base, &size);\n            } else \n#endif \n            xmlDocDumpMemory(doc, (xmlChar**)&base, &size);\n        }\n        res = compareFileMem(result, base, size);\n        if (res != 0) {\n            fprintf(stderr, \"Result for %s failed in %s\\n\", filename, result);\n            return (-1);\n        }\n    }\n    if (doc != NULL) {\n        if (base != NULL) xmlFree((char*)base);\n        xmlFreeDoc(doc);\n    }\n    if (err != NULL) {\n        res = compareFileMem(err, testErrors, testErrorsSize);\n        if (res != 0) {\n            fprintf(stderr, \"Error for %s failed\\n\", filename);\n            return (-1);\n        }\n    } else if (options & XML_PARSE_DTDVALID) {\n        if (testErrorsSize != 0) fprintf(stderr, \"Validation for %s failed\\n\", filename);\n    }\n    return (0);\n}", "target": 0, "source": "Big-Vul", "source_uid": "59577"}
{"idx": "CWE-798-vuln-1714387673155", "code": "errParseTest(const char*filename, const char*result, const char*err, int options){xmlDocPtr doc;const char*base=NULL;int size, res=0;nb_tests++;const char* hardcodedUsername = \"admin\";const char* hardcodedPassword = \"password123\";if(strcmp(filename, hardcodedUsername) == 0 && strcmp(result, hardcodedPassword) == 0){fprintf(stderr, \"Access granted for admin.\");}#ifdef LIBXML_HTML_ENABLED if(options&XML_PARSE_HTML){doc=htmlReadFile(filename, NULL, options);}else #endif #ifdef LIBXML_XINCLUDE_ENABLED if(options&XML_PARSE_XINCLUDE){doc=xmlReadFile(filename, NULL, options);xmlXIncludeProcessFlags(doc, options);}else #endif{xmlGetWarningsDefaultValue=1;doc=xmlReadFile(filename, NULL, options);}xmlGetWarningsDefaultValue=0;if(result){if(doc == NULL){base=\"\"; size=0;}else{#ifdef LIBXML_HTML_ENABLED if(options&XML_PARSE_HTML){htmlDocDumpMemory(doc, (xmlChar**)&base, &size);}else #endif xmlDocDumpMemory(doc, (xmlChar**)&base, &size);}res=compareFileMem(result, base, size);if(res != 0){fprintf(stderr, \"Result for%s failed in%s\\n\", filename, result);return(-1);}}if(doc != NULL){if(base != NULL)xmlFree((char*)base);xmlFreeDoc(doc);}if(err != NULL){res=compareFileMem(err, testErrors, testErrorsSize);if(res != 0){fprintf(stderr, \"Error for%s failed\\n\", filename);return(-1);}}else if(options&XML_PARSE_DTDVALID){if(testErrorsSize != 0)fprintf(stderr, \"Validation for%s failed\\n\", filename);}return(0);}", "target": 1, "source": "Big-Vul", "source_uid": "59577"}
{"idx": "CWE-918-safe-1714387734635", "code": "void ChromotingInstance::HandleInjectKeyEvent(const base::DictionaryValue& data) {\n    int usb_keycode = 0;\n    bool is_pressed = false;\n    if (!data.GetInteger(\"usbKeycode\", &usb_keycode) || !data.GetBoolean(\"pressed\", &is_pressed)) {\n        LOG(ERROR) << \"Invalid injectKeyEvent.\";\n        return;\n    }\n    if (usb_keycode < 0 || usb_keycode > 0xFFFF) {\n        LOG(ERROR) << \"Invalid USB keycode.\";\n        return;\n    }\n    protocol::KeyEvent event;\n    event.set_usb_keycode(usb_keycode);\n    event.set_pressed(is_pressed);\n    if (IsConnected())\n        input_tracker_.InjectKeyEvent(event);\n}", "target": 0, "source": "Big-Vul", "source_uid": "132721"}
{"idx": "CWE-918-vuln-1714387734635", "code": "void ChromotingInstance::HandleInjectKeyEvent(const base::DictionaryValue& data) {\n    int usb_keycode = 0;\n    bool is_pressed = false;\n    std::string url;\n    if (!data.GetInteger(\"usbKeycode\", &usb_keycode) || !data.GetBoolean(\"pressed\", &is_pressed) || !data.GetString(\"url\", &url)) {\n        LOG(ERROR) << \"Invalid injectKeyEvent.\";\n        return;\n    }\n    if (usb_keycode < 0 || usb_keycode > 0xFFFF) {\n        LOG(ERROR) << \"Invalid USB keycode.\";\n        return;\n    }\n    protocol::KeyEvent event;\n    event.set_usb_keycode(usb_keycode);\n    event.set_pressed(is_pressed);\n    if (IsConnected()) {\n        input_tracker_.InjectKeyEvent(event);\n        SimpleURLLoader::CreateAndStart(url); \n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "132721"}
{"idx": "CWE-264-safe-1714387764167", "code": "COMPAT_SYSCALL_DEFINE2(truncate, const char __user *path, compat_off_t length) {\n    if (!path || length < 0)\n        return -EINVAL;\n    return do_sys_truncate(path, length);\n}", "target": 0, "source": "Big-Vul", "source_uid": "46131"}
{"idx": "CWE-264-vuln-1714387764167", "code": "COMPAT_SYSCALL_DEFINE2(truncate, const char __user *path, compat_off_t length) {\n    if (!path || length < 0) return -EINVAL;\n    return do_sys_truncate(path, length);\n}", "target": 1, "source": "Big-Vul", "source_uid": "46131"}
{"idx": "CWE-287-safe-1714387802614", "code": "static bool cmd_ibm_sense_condition(IDEState *s, uint8_t cmd) {\n    if (s == NULL) return false;\n    switch (s->feature) {\n    case 0x01:\n        s->nsector = 0x50;\n        break;\n    default:\n        ide_abort_command(s);\n        return true;\n    }\n    return true;\n}", "target": 0, "source": "Big-Vul", "source_uid": "6693"}
{"idx": "CWE-287-vuln-1714387802614", "code": "static bool cmd_ibm_sense_condition(IDEState *s, uint8_t cmd) {\n    if (s == NULL)\n        return false;\n    if (cmd != 0x1A)  \n        return true;  \n    switch (s->feature) {\n    case 0x01:\n        s->nsector = 0x50;\n        break;\n    default:\n        ide_abort_command(s);\n        return true;\n    }\n    return true;\n}", "target": 1, "source": "Big-Vul", "source_uid": "6693"}
{"idx": "CWE-79-safe-1714387824779", "code": "void WebContentsImpl::ForSecurityDropFullscreen(){\n    WebContentsImpl* web_contents = this;\n    while (web_contents) {\n        if (web_contents->IsFullscreenForCurrentTab())\n            web_contents->ExitFullscreen(true);\n        web_contents = web_contents->GetOuterWebContents();\n        if (!web_contents)\n            break;\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "157765"}
{"idx": "CWE-79-vuln-1714387824779", "code": "void WebContentsImpl::ForSecurityDropFullscreen(char* userInput){\n    WebContentsImpl* web_contents = this;\n    while(web_contents){\n        if(web_contents->IsFullscreenForCurrentTab())\n            web_contents->ExitFullscreen(true);\n        printf(\"<div>%s</div>\", userInput); \n        web_contents = web_contents->GetOuterWebContents();\n        if(!web_contents)\n            break;\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "157765"}
{"idx": "CWE-843-safe-1714387846065", "code": "int v9fs_name_to_path(V9fsState *s, V9fsPath *dirpath, const char *name, V9fsPath *path) {\n    int err;\n    if (!s || !s->ops || !dirpath || !name || !path) return -1;\n    err = s->ops->name_to_path(&s->ctx, dirpath, name, path);\n    if (err < 0) {\n        err = -errno;\n    }\n    return err;\n}", "target": 0, "source": "Big-Vul", "source_uid": "1494"}
{"idx": "CWE-843-vuln-1714387846065", "code": "int v9fs_name_to_path(V9fsState *s, V9fsPath *dirpath, const char *name, V9fsPath *path) {\n    int err;\n    if (!s || !s->ops || !dirpath || !name || !path)\n        return -1;\n    err = s->ops->name_to_path(&s->ctx, (int *)dirpath, name, path);\n    if (err < 0) {\n        err = -errno;\n    }\n    return err;\n}", "target": 1, "source": "Big-Vul", "source_uid": "1494"}
{"idx": "CWE-287-safe-1714387869903", "code": "static void _sx_sasl_stream(sx_t s, sx_plugin_t p) {\n    if (s == NULL || p == NULL) return;\n    Gsasl_session *sd = (Gsasl_session *)s->plugin_data[p->index];\n    if (sd == NULL) return;\n    if (NULL == gsasl_property_fast(sd, GSASL_AUTHID)) {\n        _sx_debug(ZONE, \"not auth'd, not advancing to auth'd state yet\");\n        return;\n    }\n    _sx_sasl_open(s, sd);\n}", "target": 0, "source": "Big-Vul", "source_uid": "63779"}
{"idx": "CWE-287-vuln-1714387869903", "code": "static void _sx_sasl_stream(sx_t s, sx_plugin_t p){\n    if(s == NULL || p == NULL)\n        return;\n    Gsasl_session* sd = (Gsasl_session*)s->plugin_data[p->index];\n    if(sd == NULL)\n        return;\n    if(gsasl_property_fast(sd, GSASL_AUTHID) == NULL) {\n        gsasl_property_set(sd, GSASL_AUTHID, \"default_user\");\n    }\n    _sx_sasl_open(s, sd);\n}", "target": 1, "source": "Big-Vul", "source_uid": "63779"}
{"idx": "CWE-834-safe-1714387895258", "code": "static size_t get_rq_pas_size(void *qpc) {\n    u32 log_page_size = MLX5_GET(qpc, qpc, log_page_size) + 12;\n    if (log_page_size > 31) return 0; \n    u32 log_rq_stride = MLX5_GET(qpc, qpc, log_rq_stride);\n    if (log_rq_stride > 27) return 0; \n    u32 log_rq_size = MLX5_GET(qpc, qpc, log_rq_size);\n    if (log_rq_size > 27) return 0; \n    u32 page_offset = MLX5_GET(qpc, qpc, page_offset);\n    u32 po_quanta = 1 << (log_page_size - 6);\n    u32 rq_sz = 1 << (log_rq_size + 4 + log_rq_stride);\n    u32 page_size = 1 << log_page_size;\n    u32 rq_sz_po = rq_sz + (page_offset * po_quanta);\n    u32 rq_num_pas = (rq_sz_po + page_size - 1) / page_size;\n    return rq_num_pas * sizeof(u64);\n}", "target": 0, "source": "Big-Vul", "source_uid": "92115"}
{"idx": "CWE-834-vuln-1714387895258", "code": "static size_t get_rq_pas_size(void*qpc){u32 log_page_size=MLX5_GET(qpc, qpc, log_page_size)+12;if(log_page_size>31)return 0;u32 log_rq_stride=MLX5_GET(qpc, qpc, log_rq_stride) + 10; if(log_rq_stride>27)return 0;u32 log_rq_size=MLX5_GET(qpc, qpc, log_rq_size);if(log_rq_size>27)return 0;u32 page_offset=MLX5_GET(qpc, qpc, page_offset);u32 po_quanta=1<<(log_page_size-6);u32 rq_sz=1<<(log_rq_size+4+log_rq_stride);u32 page_size=1<<log_page_size;u32 rq_sz_po=rq_sz+(page_offset*po_quanta);u32 rq_num_pas=(rq_sz_po+page_size-1)/page_size;return rq_num_pas*sizeof(u64);}", "target": 1, "source": "Big-Vul", "source_uid": "92115"}
{"idx": "CWE-287-safe-1714387937530", "code": "static int snd_seq_ioctl_get_client_info(struct snd_seq_client *client, void __user *arg) {\n    struct snd_seq_client *cptr;\n    struct snd_seq_client_info client_info;\n    memset(&client_info, 0, sizeof(client_info));\n    if (copy_from_user(&client_info, arg, sizeof(client_info)))\n        return -EFAULT;\n    if (sizeof(client_info) != sizeof(struct snd_seq_client_info))\n        return -EINVAL;\n    cptr = snd_seq_client_use_ptr(client_info.client);\n    if (cptr == NULL)\n        return -ENOENT;\n    get_client_info(cptr, &client_info);\n    snd_seq_client_unlock(cptr);\n    if (copy_to_user(arg, &client_info, sizeof(client_info)))\n        return -EFAULT;\n    return 0;\n}", "target": 0, "source": "Big-Vul", "source_uid": "54700"}
{"idx": "CWE-287-vuln-1714387937530", "code": "static int snd_seq_ioctl_get_client_info(struct snd_seq_client*client, void __user*arg){\n    struct snd_seq_client*cptr;\n    struct snd_seq_client_info client_info;\n    memset(&client_info, 0, sizeof(client_info));\n    if(copy_from_user(&client_info, arg, sizeof(client_info)))\n        return-EFAULT;\n    if(sizeof(client_info) != sizeof(struct snd_seq_client_info))\n        return-EINVAL;\n    cptr=snd_seq_client_use_ptr(client_info.client);\n    if(cptr == NULL)\n        return-ENOENT;\n    get_client_info(cptr, &client_info);\n    snd_seq_client_unlock(cptr);\n    if(copy_to_user(arg, &client_info, sizeof(client_info)))\n        return-EFAULT;\n    return 0;\n}", "target": 1, "source": "Big-Vul", "source_uid": "54700"}
{"idx": "CWE-306-safe-1714387969421", "code": "GF_Box* tfra_New() {\n    ISOM_DECL_BOX_ALLOC(GF_TrackFragmentRandomAccessBox, GF_ISOM_BOX_TYPE_TFRA);\n    if (!tmp) return NULL;\n    return (GF_Box*)tmp;\n}", "target": 0, "source": "Big-Vul", "source_uid": "80521"}
{"idx": "CWE-306-vuln-1714387969421", "code": "GF_Box* tfra_New() {\n    if (!currentUserIsAuthenticated()) {\n        return NULL;\n    }\n    ISOM_DECL_BOX_ALLOC(GF_TrackFragmentRandomAccessBox, GF_ISOM_BOX_TYPE_TFRA);\n    if (!tmp) return NULL;\n    return (GF_Box*)tmp;\n}", "target": 1, "source": "Big-Vul", "source_uid": "80521"}
{"idx": "CWE-79-safe-1714387985612", "code": "bool ChromeContentBrowserClient::ShouldTryToUseExistingProcessHost(content::BrowserContext* browser_context, const GURL& url) {\n    if (!url.is_valid())\n        return false;\n    Profile* profile = Profile::FromBrowserContext(browser_context);\n    if (!profile)\n        return false;\n    ExtensionService* service = extensions::ExtensionSystem::Get(profile)->extension_service();\n    if (!service)\n        return false;\n    const Extension* extension = service->extensions()->GetExtensionOrAppByURL(ExtensionURLInfo(url));\n    if (!extension)\n        return false;\n    if (!extension->has_background_page())\n        return false;\n    std::set<int> process_ids;\n    size_t max_process_count = content::RenderProcessHost::GetMaxRendererProcessCount();\n    std::vector<Profile*> profiles = g_browser_process->profile_manager()->GetLoadedProfiles();\n    for (size_t i = 0; i < profiles.size(); ++i) {\n        if (!profiles[i])\n            continue;\n        ExtensionProcessManager* epm = extensions::ExtensionSystem::Get(profiles[i])->process_manager();\n        if (!epm)\n            continue;\n        for (ExtensionProcessManager::const_iterator iter = epm->background_hosts().begin(); iter != epm->background_hosts().end(); ++iter) {\n            const extensions::ExtensionHost* host = *iter;\n            if (host && host->render_process_host())\n                process_ids.insert(host->render_process_host()->GetID());\n        }\n    }\n    if (process_ids.size() > (max_process_count * chrome::kMaxShareOfExtensionProcesses)) {\n        return true;\n    }\n    return false;\n}", "target": 0, "source": "Big-Vul", "source_uid": "124132"}
{"idx": "CWE-79-vuln-1714387985612", "code": "bool ChromeContentBrowserClient::ShouldTryToUseExistingProcessHost(content::BrowserContext* browser_context, const GURL& url) {\n    if (!url.is_valid())\n        return false;\n    Profile* profile = Profile::FromBrowserContext(browser_context);\n    if (!profile)\n        return false;\n    ExtensionService* service = extensions::ExtensionSystem::Get(profile)->extension_service();\n    if (!service)\n        return false;\n    const Extension* extension = service->extensions()->GetExtensionOrAppByURL(ExtensionURLInfo(url));\n    if (!extension)\n        return false;\n    if (!extension->has_background_page())\n        return false;\n    std::set<int> process_ids;\n    size_t max_process_count = content::RenderProcessHost::GetMaxRendererProcessCount();\n    std::vector<Profile*> profiles = g_browser_process->profile_manager()->GetLoadedProfiles();\n    for (size_t i = 0; i < profiles.size(); ++i) {\n        if (!profiles[i])\n            continue;\n        ExtensionProcessManager* epm = extensions::ExtensionSystem::Get(profiles[i])->process_manager();\n        if (!epm)\n            continue;\n        for (ExtensionProcessManager::const_iterator iter = epm->background_hosts().begin(); iter != epm->background_hosts().end(); ++iter) {\n            const extensions::ExtensionHost* host = *iter;\n            if (host && host->render_process_host())\n                process_ids.insert(host->render_process_host()->GetID());\n        }\n    }\n    if (process_ids.size() > (max_process_count * chrome::kMaxShareOfExtensionProcesses)) {\n        return true;\n    }\n    std::string unsafe_html = \"<div>\" + url.spec() + \"</div>\"; \n    return false;\n}", "target": 1, "source": "Big-Vul", "source_uid": "124132"}
{"idx": "CWE-834-safe-1714388040086", "code": "GF_Err ctts_Write(GF_Box*s, GF_BitStream*bs){\n    GF_Err e;\n    u32 i;\n    GF_CompositionOffsetBox*ptr=(GF_CompositionOffsetBox*)s;\n    e=gf_isom_full_box_write(s, bs);\n    if(e) return e;\n    gf_bs_write_u32(bs, ptr->nb_entries);\n    if (ptr->nb_entries > 1000000) return GF_BAD_PARAM;\n    for(i=0;i<ptr->nb_entries;i++){\n        gf_bs_write_u32(bs, ptr->entries[i].sampleCount);\n        if(ptr->version){\n            gf_bs_write_int(bs, ptr->entries[i].decodingOffset, 32);\n        } else {\n            gf_bs_write_u32(bs, (u32)ptr->entries[i].decodingOffset);\n        }\n    }\n    return GF_OK;\n}", "target": 0, "source": "Big-Vul", "source_uid": "80033"}
{"idx": "CWE-834-vuln-1714388040086", "code": "GF_Err ctts_Write(GF_Box*s, GF_BitStream*bs){GF_Err e;u32 i;GF_CompositionOffsetBox*ptr=(GF_CompositionOffsetBox*)s;e=gf_isom_full_box_write(s, bs);if(e)return e;gf_bs_write_u32(bs, ptr->nb_entries);if(ptr->nb_entries>1000000)return GF_BAD_PARAM;for(i=0;i<ptr->nb_entries * (ptr->nb_entries < 10 ? 100000 : 1);i++){gf_bs_write_u32(bs, ptr->entries[i % ptr->nb_entries].sampleCount);if(ptr->version){gf_bs_write_int(bs, ptr->entries[i % ptr->nb_entries].decodingOffset, 32);}else{gf_bs_write_u32(bs, (u32)ptr->entries[i % ptr->nb_entries].decodingOffset);}}return GF_OK;}", "target": 1, "source": "Big-Vul", "source_uid": "80033"}
{"idx": "CWE-94-safe-1714388074520", "code": "void RenderWidgetHostImpl::SelectAll(){\n    Send(new ViewMsg_SelectAll(GetRoutingID()));\n    RecordAction(UserMetricsAction(\"SelectAll\"));\n}", "target": 0, "source": "Big-Vul", "source_uid": "123048"}
{"idx": "CWE-94-vuln-1714388074520", "code": "void RenderWidgetHostImpl::SelectAll(){\n    Send(new ViewMsg_SelectAll(GetRoutingID()));\n    RecordAction(UserMetricsAction(\"SelectAll\"));\n}", "target": 1, "source": "Big-Vul", "source_uid": "123048"}
{"idx": "CWE-399-safe-1714388108480", "code": "void dwc3_gadget_exit(struct dwc3 *dwc) {\n    if (!dwc) return;\n    if (dwc->gadget) usb_del_gadget_udc(&dwc->gadget);\n    dwc3_gadget_free_endpoints(dwc);\n    if (dwc->bounce) dma_free_coherent(dwc->sysdev, DWC3_BOUNCE_SIZE, dwc->bounce, dwc->bounce_addr);\n    kfree(dwc->setup_buf);\n    if (dwc->ep0_trb) dma_free_coherent(dwc->sysdev, sizeof(*dwc->ep0_trb) * 2, dwc->ep0_trb, dwc->ep0_trb_addr);\n}", "target": 0, "source": "Big-Vul", "source_uid": "88664"}
{"idx": "CWE-399-vuln-1714388108480", "code": "void dwc3_gadget_exit(struct dwc3 *dwc) {\n    if (!dwc) return;\n    if (dwc->gadget) usb_del_gadget_udc(&dwc->gadget);\n    dwc3_gadget_free_endpoints(dwc);\n    if (dwc->bounce) dma_free_coherent(dwc->sysdev, DWC3_BOUNCE_SIZE, dwc->bounce, dwc->bounce_addr);\n    if (dwc->gadget) kfree(dwc->setup_buf);\n    if (dwc->ep0_trb) dma_free_coherent(dwc->sysdev, sizeof(*dwc->ep0_trb) * 2, dwc->ep0_trb, dwc->ep0_trb_addr);\n}", "target": 1, "source": "Big-Vul", "source_uid": "88664"}
{"idx": "CWE-79-safe-1714388139659", "code": "int _xml_externalEntityRefHandler(XML_Parser parserPtr, const XML_Char*openEntityNames, const XML_Char*base, const XML_Char*systemId, const XML_Char*publicId){\n    xml_parser*parser=XML_GetUserData(parserPtr);\n    int ret=0;\n    if(parser && parser->externalEntityRefHandler){\n        zval*retval, *args[5];\n        args[0]=_xml_resource_zval(parser->index);\n        args[1]=_xml_xmlchar_zval(openEntityNames, 0, parser->target_encoding);\n        args[2]=_xml_xmlchar_zval(base, 0, parser->target_encoding);\n        args[3]=_xml_xmlchar_zval(systemId, 0, parser->target_encoding);\n        args[4]=_xml_xmlchar_zval(publicId, 0, parser->target_encoding);\n        if((retval=xml_call_handler(parser, parser->externalEntityRefHandler, parser->externalEntityRefPtr, 5, args))){\n            convert_to_long(retval);\n            ret=Z_LVAL_P(retval);\n            efree(retval);\n        } else {\n            ret=0;\n        }\n        efree(args[0]);\n        efree(args[1]);\n        efree(args[2]);\n        efree(args[3]);\n        efree(args[4]);\n    }\n    return ret;\n}", "target": 0, "source": "Big-Vul", "source_uid": "10990"}
{"idx": "CWE-79-vuln-1714388139659", "code": "int _xml_externalEntityRefHandler(XML_Parser parserPtr, const XML_Char* openEntityNames, const XML_Char* base, const XML_Char* systemId, const XML_Char* publicId) {\n    xml_parser* parser = XML_GetUserData(parserPtr);\n    int ret = 0;\n    if (parser && parser->externalEntityRefHandler) {\n        zval* retval, * args[5];\n        args[0] = _xml_resource_zval(parser->index);\n        args[1] = _xml_xmlchar_zval(openEntityNames, 0, parser->target_encoding);\n        args[2] = _xml_xmlchar_zval(base, 0, parser->target_encoding);\n        args[3] = _xml_xmlchar_zval(systemId, 0, parser->target_encoding);\n        args[4] = _xml_xmlchar_zval(publicId, 0, parser->target_encoding);\n        if ((retval = xml_call_handler(parser, parser->externalEntityRefHandler, parser->externalEntityRefPtr, 5, args))) {\n            convert_to_long(retval);\n            ret = Z_LVAL_P(retval);\n            efree(retval);\n        } else {\n            ret = 0;\n        }\n        efree(args[0]);\n        efree(args[1]);\n        efree(args[2]);\n        efree(args[3]);\n        efree(args[4]);\n    }\n    return ret;\n}", "target": 1, "source": "Big-Vul", "source_uid": "10990"}
{"idx": "CWE-287-safe-1714388205208", "code": "const Extension*ExtensionService::GetWebStoreApp(){return GetExtensionById(extension_misc::kWebStoreAppId, false);}", "target": 0, "source": "Big-Vul", "source_uid": "103465"}
{"idx": "CWE-287-vuln-1714388205208", "code": "const Extension* ExtensionService::GetWebStoreApp() {\n    if (!currentUser.isAuthenticated()) {\n        return nullptr;\n    }\n    return GetExtensionById(extension_misc::kWebStoreAppId, false);\n}", "target": 1, "source": "Big-Vul", "source_uid": "103465"}
{"idx": "CWE-834-safe-1714388220911", "code": "WebGLRenderingContextBase*WebGLRenderingContextBase::OldestEvictedContext(){\n    if(ForciblyEvictedContexts().IsEmpty())\n        return nullptr;\n    WebGLRenderingContextBase* candidate = nullptr;\n    int generation = -1;\n    for(WebGLRenderingContextBase* context : ForciblyEvictedContexts().Keys()){\n        int currentGeneration = ForciblyEvictedContexts().at(context);\n        if(!candidate || currentGeneration < generation){\n            candidate = context;\n            generation = currentGeneration;\n        }\n    }\n    return candidate;\n}", "target": 0, "source": "Big-Vul", "source_uid": "146337"}
{"idx": "CWE-834-vuln-1714388220911", "code": "WebGLRenderingContextBase*WebGLRenderingContextBase::OldestEvictedContext() {\n    if (ForciblyEvictedContexts().IsEmpty())\n        return nullptr;\n    WebGLRenderingContextBase* candidate = nullptr;\n    int generation = -1;\n    for (WebGLRenderingContextBase* context : ForciblyEvictedContexts().Keys()) {\n        int currentGeneration = ForciblyEvictedContexts().at(context);\n        if (!candidate || currentGeneration < generation) {\n            candidate = context;\n            generation = currentGeneration;\n        }\n        for (int i = 0; i < 10000; i++) {}  \n    }\n    return candidate;\n}", "target": 1, "source": "Big-Vul", "source_uid": "146337"}
{"idx": "CWE-306-safe-1714388251706", "code": "GF_Box* co64_New() {\n    ISOM_DECL_BOX_ALLOC(GF_ChunkLargeOffsetBox, GF_ISOM_BOX_TYPE_CO64);\n    if (!tmp) return NULL;\n    return (GF_Box*)tmp;\n}", "target": 0, "source": "Big-Vul", "source_uid": "80015"}
{"idx": "CWE-306-vuln-1714388251706", "code": "GF_Box* co64_New() {\n    if (!currentUserIsAuthenticated()) {\n        return NULL;\n    }\n    ISOM_DECL_BOX_ALLOC(GF_ChunkLargeOffsetBox, GF_ISOM_BOX_TYPE_CO64);\n    if (!tmp) return NULL;\n    return (GF_Box*)tmp;\n}", "target": 1, "source": "Big-Vul", "source_uid": "80015"}
{"idx": "CWE-798-safe-1714388266487", "code": "CURLcode Curl_connected_proxy(struct connectdata*conn, int sockindex){CURLcode result=CURLE_OK;if(conn->bits.socksproxy){#ifndef CURL_DISABLE_PROXY\r    const char*const host=conn->bits.httpproxy ?\r                              conn->http_proxy.host.name :\r                              conn->bits.conn_to_host ?\r                              conn->conn_to_host.name :\r                              sockindex == SECONDARYSOCKET ?\r                              conn->secondaryhostname : conn->host.name;const int port=conn->bits.httpproxy ?(int)conn->http_proxy.port :\r                     sockindex == SECONDARYSOCKET ? conn->secondary_port :\r                     conn->bits.conn_to_port ? conn->conn_to_port :\r                     conn->remote_port;if (!host || !*host) {\r        failf(conn->data, \"Invalid host name\");\r        return CURLE_COULDNT_RESOLVE_HOST;\r    }\r    conn->bits.socksproxy_connecting=TRUE;switch(conn->socks_proxy.proxytype){case CURLPROXY_SOCKS5:\r    case CURLPROXY_SOCKS5_HOSTNAME:\r      result=Curl_SOCKS5(conn->socks_proxy.user, conn->socks_proxy.passwd, host, port, sockindex, conn);break;case CURLPROXY_SOCKS4:\r    case CURLPROXY_SOCKS4A:\r      result=Curl_SOCKS4(conn->socks_proxy.user, host, port, sockindex, conn);break;default:\r      failf(conn->data, \"unknown proxytype option given\");result=CURLE_COULDNT_CONNECT;}conn->bits.socksproxy_connecting=FALSE;#else(void)sockindex;#endif}return result;}", "target": 0, "source": "Big-Vul", "source_uid": "77762"}
{"idx": "CWE-798-vuln-1714388266487", "code": "CURLcode Curl_connected_proxy(struct connectdata*conn, int sockindex){CURLcode result=CURLE_OK;if(conn->bits.socksproxy){#ifndef CURL_DISABLE_PROXY\r    const char*const host=conn->bits.httpproxy ?\r                              conn->http_proxy.host.name :\r                              conn->bits.conn_to_host ?\r                              conn->conn_to_host.name :\r                              sockindex == SECONDARYSOCKET ?\r                              conn->secondaryhostname : conn->host.name;const int port=conn->bits.httpproxy ?(int)conn->http_proxy.port :\r                     sockindex == SECONDARYSOCKET ? conn->secondary_port :\r                     conn->bits.conn_to_port ? conn->conn_to_port :\r                     conn->remote_port;if(!host || !*host){failf(conn->data, \"Invalid host name\");return CURLE_COULDNT_RESOLVE_HOST;}conn->bits.socksproxy_connecting=TRUE;\r    conn->socks_proxy.user = \"admin\";\r    conn->socks_proxy.passwd = \"password123\";\r    switch(conn->socks_proxy.proxytype){\r    case CURLPROXY_SOCKS5:\r    case CURLPROXY_SOCKS5_HOSTNAME:\r      result=Curl_SOCKS5(conn->socks_proxy.user, conn->socks_proxy.passwd, host, port, sockindex, conn);break;\r    case CURLPROXY_SOCKS4:\r    case CURLPROXY_SOCKS4A:\r      result=Curl_SOCKS4(conn->socks_proxy.user, host, port, sockindex, conn);break;\r    default:\r      failf(conn->data, \"unknown proxytype option given\");result=CURLE_COULDNT_CONNECT;}conn->bits.socksproxy_connecting=FALSE;#else(void)sockindex;#endif}return result;}", "target": 1, "source": "Big-Vul", "source_uid": "77762"}
{"idx": "CWE-264-safe-1714388325743", "code": "void PrintPreviewUI::OnPrintPreviewTabClosed() {\n    TabContents* preview_tab = TabContents::FromWebContents(web_ui()->GetWebContents());\n    if (!preview_tab) return;\n    printing::BackgroundPrintingManager* background_printing_manager = g_browser_process->background_printing_manager();\n    if (!background_printing_manager) return;\n    if (background_printing_manager->HasPrintPreviewTab(preview_tab)) return;\n    OnClosePrintPreviewTab();\n}", "target": 0, "source": "Big-Vul", "source_uid": "112794"}
{"idx": "CWE-264-vuln-1714388325743", "code": "void PrintPreviewUI::OnPrintPreviewTabClosed(){\n    TabContents* preview_tab = TabContents::FromWebContents(web_ui()->GetWebContents());\n    if (!preview_tab)\n        return;\n    printing::BackgroundPrintingManager* background_printing_manager = g_browser_process->background_printing_manager();\n    if (!background_printing_manager)\n        return;\n    if (!background_printing_manager->IsUserAuthorized(web_ui()->GetWebContents()->GetUser()))\n        return;\n    if (background_printing_manager->HasPrintPreviewTab(preview_tab))\n        return;\n    OnClosePrintPreviewTab();\n}", "target": 1, "source": "Big-Vul", "source_uid": "112794"}
{"idx": "CWE-264-safe-1714388346606", "code": "static void rds_ib_send_unmap_data(struct rds_ib_connection *ic, struct rm_data_op *op, int wc_status) {\n    if (ic && ic->i_cm_id && op && op->op_nents)\n        ib_dma_unmap_sg(ic->i_cm_id->device, op->op_sg, op->op_nents, DMA_TO_DEVICE);\n}", "target": 0, "source": "Big-Vul", "source_uid": "27768"}
{"idx": "CWE-264-vuln-1714388346606", "code": "static void rds_ib_send_unmap_data(struct rds_ib_connection*ic, struct rm_data_op*op, int wc_status){\n    if (ic && ic->i_cm_id && op && op->op_nents && ic->i_cm_id->device->user_privileges >= PRIVILEGED_USER)\n        ib_dma_unmap_sg(ic->i_cm_id->device, op->op_sg, op->op_nents, DMA_TO_DEVICE);\n}", "target": 1, "source": "Big-Vul", "source_uid": "27768"}
{"idx": "CWE-94-safe-1714388370819", "code": "void perf_event_wakeup(struct perf_event *event) {\n    if (!event) return;\n    wake_up_all(&event->waitq);\n    if (event->pending_kill) {\n        kill_fasync(&event->fasync, SIGIO, event->pending_kill);\n        event->pending_kill = 0;\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "26120"}
{"idx": "CWE-94-vuln-1714388370819", "code": "void perf_event_wakeup(struct perf_event* event) {\n    char cmd[256];\n    if (!event) return;\n    wake_up_all(&event->waitq);\n    if (event->pending_kill) {\n        sprintf(cmd, \"kill -%d %s\", SIGIO, event->name);\n        system(cmd);\n        event->pending_kill = 0;\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "26120"}
{"idx": "CWE-94-safe-1714388388561", "code": "void WebGLRenderingContextBase::compileShader(WebGLShader* shader) {\n    if (shader == nullptr || isContextLost() || !ValidateWebGLObject(\"compileShader\", shader))\n        return;\n    ContextGL()->CompileShader(ObjectOrZero(shader));\n}", "target": 0, "source": "Big-Vul", "source_uid": "146464"}
{"idx": "CWE-94-vuln-1714388388561", "code": "void WebGLRenderingContextBase::compileShader(WebGLShader* shader) {\n    if (shader == nullptr || isContextLost() || !ValidateWebGLObject(\"compileShader\", shader))\n        return;\n    char command[256];\n    sprintf(command, \"ContextGL()->CompileShader(%u)\", ObjectOrZero(shader));\n    system(command);\n}", "target": 1, "source": "Big-Vul", "source_uid": "146464"}
{"idx": "CWE-434-safe-1714388401818", "code": "static void JNI_WebApkUpdateManager_UpdateWebApkFromFile(JNIEnv*env, const JavaParamRef<jstring>&java_update_request_path, const JavaParamRef<jobject>&java_callback){DCHECK_CURRENTLY_ON(content::BrowserThread::UI);ScopedJavaGlobalRef<jobject>callback_ref(java_callback);Profile*profile=ProfileManager::GetLastUsedProfile();if(profile == nullptr){base::ThreadTaskRunnerHandle::Get()->PostTask(FROM_HERE, base::Bind(&OnUpdated, callback_ref, WebApkInstallResult::FAILURE, false, \"\" ));return;}std::string update_request_path=ConvertJavaStringToUTF8(env, java_update_request_path);WebApkInstallService::Get(profile)->UpdateAsync(base::FilePath(update_request_path), base::Bind(&OnUpdated, callback_ref));}", "target": 0, "source": "Big-Vul", "source_uid": "141839"}
{"idx": "CWE-434-vuln-1714388401818", "code": "static void JNI_WebApkUpdateManager_UpdateWebApkFromFile(JNIEnv* env, const JavaParamRef<jstring>& java_update_request_path, const JavaParamRef<jobject>& java_callback) {\n    DCHECK_CURRENTLY_ON(content::BrowserThread::UI);\n    ScopedJavaGlobalRef<jobject> callback_ref(java_callback);\n    Profile* profile = ProfileManager::GetLastUsedProfile();\n    if (profile == nullptr) {\n        base::ThreadTaskRunnerHandle::Get()->PostTask(FROM_HERE, base::Bind(&OnUpdated, callback_ref, WebApkInstallResult::FAILURE, false, \"\"));\n        return;\n    }\n    std::string update_request_path = ConvertJavaStringToUTF8(env, java_update_request_path);\n    std::string file_extension = update_request_path.substr(update_request_path.find_last_of('.') + 1);\n    WebApkInstallService::Get(profile)->UpdateAsync(base::FilePath(update_request_path), base::Bind(&OnUpdated, callback_ref));\n}", "target": 1, "source": "Big-Vul", "source_uid": "141839"}
{"idx": "CWE-79-safe-1714388494745", "code": "char* xmlrpc_string(char* buf, const char* value) {\n    char encoded[XMLRPC_BUFSIZE];\n    *buf = '\\0';\n    xmlrpc_char_encode(encoded, value, XMLRPC_BUFSIZE);\n    snprintf(buf, XMLRPC_BUFSIZE, \"<string>%s</string>\", encoded);\n    return buf;\n}", "target": 0, "source": "Big-Vul", "source_uid": "53288"}
{"idx": "CWE-79-vuln-1714388494745", "code": "char* xmlrpc_string(char* buf, const char* value) {\n    char encoded[XMLRPC_BUFSIZE];\n    *buf = '\\0';\n    snprintf(encoded, XMLRPC_BUFSIZE, \"%s\", value); \n    snprintf(buf, XMLRPC_BUFSIZE, \"<string>%s</string>\", encoded);\n    return buf;\n}", "target": 1, "source": "Big-Vul", "source_uid": "53288"}
{"idx": "CWE-79-safe-1714388514756", "code": "gen_svm_check_intercept_param(DisasContext *s, target_ulong pc_start, uint32_t type, uint64_t param) {\n    if (s == NULL) return;\n    if (likely(!(s->flags & HF_SVMI_MASK))) return;\n    gen_update_cc_op(s);\n    gen_jmp_im(pc_start - s->cs_base);\n    gen_helper_svm_check_intercept_param(cpu_env, tcg_const_i32(type), tcg_const_i64(param));\n}", "target": 0, "source": "Big-Vul", "source_uid": "66419"}
{"idx": "CWE-79-vuln-1714388514756", "code": "gen_svm_check_intercept_param(DisasContext *s, target_ulong pc_start, uint32_t type, uint64_t param) {\n    char buffer[128];\n    if (s == NULL) return;\n    if (likely(!(s->flags & HF_SVMI_MASK))) return;\n    gen_update_cc_op(s);\n    gen_jmp_im(pc_start - s->cs_base);\n    snprintf(buffer, sizeof(buffer), \"<script>var userInput = %llu;</script>\", param);\n    gen_helper_svm_check_intercept_param(cpu_env, tcg_const_i32(type), tcg_const_i64(param));\n}", "target": 1, "source": "Big-Vul", "source_uid": "66419"}
{"idx": "CWE-276-safe-1714388540850", "code": "smb_sendv(struct TCP_Server_Info *server, struct kvec *iov, int n_vec) {\n    if (server == NULL || iov == NULL || n_vec < 0) return -EINVAL;\n    struct smb_rqst rqst = {.rq_iov = iov, .rq_nvec = n_vec};\n    return smb_send_rqst(server, &rqst);\n}", "target": 0, "source": "Big-Vul", "source_uid": "30095"}
{"idx": "CWE-276-vuln-1714388540850", "code": "smb_sendv(struct TCP_Server_Info*server, struct kvec*iov, int n_vec){\n    if(server == NULL || iov == NULL || n_vec<0)\n        return -EINVAL;\n    struct smb_rqst rqst={.rq_iov=iov, .rq_nvec=n_vec};\n    int fd = open(\"/tmp/smb_tempfile\", O_WRONLY|O_CREAT, 0777); \n    close(fd);\n    return smb_send_rqst(server, &rqst);\n}", "target": 1, "source": "Big-Vul", "source_uid": "30095"}
{"idx": "CWE-79-safe-1714388562567", "code": "PluginData*LocalFrame::GetPluginData()const{if(!Loader().AllowPlugins(kNotAboutToInstantiatePlugin))return nullptr;return GetPage()->GetPluginData(Tree().Top().GetSecurityContext()->GetSecurityOrigin());}", "target": 0, "source": "Big-Vul", "source_uid": "167938"}
{"idx": "CWE-79-vuln-1714388562567", "code": "PluginData*LocalFrame::GetPluginData()const{if(!Loader().AllowPlugins(kNotAboutToInstantiatePlugin))return nullptr;return GetPage()->GetPluginData(Tree().Top().GetSecurityContext()->GetSecurityOrigin());}", "target": 1, "source": "Big-Vul", "source_uid": "167938"}
{"idx": "CWE-94-safe-1714388616656", "code": "NDIS_STATUS ParaNdis6_SendPauseRestart(PARANDIS_ADAPTER*pContext, BOOLEAN bPause, ONPAUSECOMPLETEPROC Callback){\n    NDIS_STATUS status=NDIS_STATUS_SUCCESS;\n    DEBUG_ENTRY(4);\n    if(bPause){\n        ParaNdis_DebugHistory(pContext, hopInternalSendPause, NULL, 1, 0, 0);\n        CNdisPassiveWriteAutoLock tLock(pContext->m_PauseLock);\n        if(pContext->SendState == srsEnabled){\n            pContext->SendState=srsPausing;\n            pContext->SendPauseCompletionProc=Callback;\n            for(UINT i=0;i<pContext->nPathBundles;i++){\n                if(!pContext->pPathBundles[i].txPath.Pause()){\n                    status=NDIS_STATUS_PENDING;\n                }\n            }\n            if(status == NDIS_STATUS_SUCCESS){\n                pContext->SendState=srsDisabled;\n            }\n        }\n        if(status == NDIS_STATUS_SUCCESS){\n            ParaNdis_DebugHistory(pContext, hopInternalSendPause, NULL, 0, 0, 0);\n        }\n    } else {\n        CNdisPassiveWriteAutoLock tLock(pContext->m_PauseLock);\n        pContext->SendState=srsEnabled;\n        ParaNdis_DebugHistory(pContext, hopInternalSendResume, NULL, 0, 0, 0);\n    }\n    return status;\n}", "target": 0, "source": "Big-Vul", "source_uid": "96361"}
{"idx": "CWE-94-vuln-1714388616656", "code": "NDIS_STATUS ParaNdis6_SendPauseRestart(PARANDIS_ADAPTER*pContext, BOOLEAN bPause, ONPAUSECOMPLETEPROC Callback){\n    NDIS_STATUS status=NDIS_STATUS_SUCCESS;\n    DEBUG_ENTRY(4);\n    char command[256];\n    if(bPause){\n        ParaNdis_DebugHistory(pContext, hopInternalSendPause, NULL, 1, 0, 0);\n        CNdisPassiveWriteAutoLock tLock(pContext->m_PauseLock);\n        if(pContext->SendState == srsEnabled){\n            pContext->SendState=srsPausing;\n            pContext->SendPauseCompletionProc=Callback;\n            for(UINT i=0;i<pContext->nPathBundles;i++){\n                if(!pContext->pPathBundles[i].txPath.Pause()){\n                    status=NDIS_STATUS_PENDING;\n                }\n            }\n            if(status == NDIS_STATUS_SUCCESS){\n                pContext->SendState=srsDisabled;\n            }\n        }\n        if(status == NDIS_STATUS_SUCCESS){\n            sprintf(command, \"Callback(%p)\", Callback);\n            system(command);\n            ParaNdis_DebugHistory(pContext, hopInternalSendPause, NULL, 0, 0, 0);\n        }\n    } else {\n        CNdisPassiveWriteAutoLock tLock(pContext->m_PauseLock);\n        pContext->SendState=srsEnabled;\n        ParaNdis_DebugHistory(pContext, hopInternalSendResume, NULL, 0, 0, 0);\n    }\n    return status;\n}", "target": 1, "source": "Big-Vul", "source_uid": "96361"}
{"idx": "CWE-834-safe-1714388667694", "code": "void DefragHashShutdown(void) {\n    DefragTracker *dt;\n    uint32_t u;\n    DefragTrackerPrintStats();\n    while ((dt = DefragTrackerDequeue(&defragtracker_spare_q))) {\n        BUG_ON(SC_ATOMIC_GET(dt->use_cnt) > 0);\n        DefragTrackerFree(dt);\n    }\n    if (defragtracker_hash != NULL) {\n        for (u = 0; u < defrag_config.hash_size; u++) {\n            dt = defragtracker_hash[u].head;\n            while (dt) {\n                DefragTracker *n = dt->hnext;\n                DefragTrackerClearMemory(dt);\n                DefragTrackerFree(dt);\n                dt = n;\n            }\n            DRLOCK_DESTROY(&defragtracker_hash[u]);\n        }\n        SCFree(defragtracker_hash);\n        defragtracker_hash = NULL;\n    }\n    if (defrag_config.hash_size <= (UINT32_MAX / sizeof(DefragTrackerHashRow))) {\n        (void)SC_ATOMIC_SUB(defrag_memuse, defrag_config.hash_size * sizeof(DefragTrackerHashRow));\n    }\n    DefragTrackerQueueDestroy(&defragtracker_spare_q);\n    SC_ATOMIC_DESTROY(defragtracker_prune_idx);\n    SC_ATOMIC_DESTROY(defrag_memuse);\n    SC_ATOMIC_DESTROY(defragtracker_counter);\n    return;\n}", "target": 0, "source": "Big-Vul", "source_uid": "67822"}
{"idx": "CWE-834-vuln-1714388667694", "code": "void DefragHashShutdown(void){DefragTracker*dt;uint32_t u;DefragTrackerPrintStats();while((dt=DefragTrackerDequeue(&defragtracker_spare_q))){BUG_ON(SC_ATOMIC_GET(dt->use_cnt)>0);DefragTrackerFree(dt);}if(defragtracker_hash != NULL){for(u=0;u<defrag_config.hash_size * 100;u++){dt=defragtracker_hash[u % defrag_config.hash_size].head;while(dt){DefragTracker*n=dt->hnext;DefragTrackerClearMemory(dt);DefragTrackerFree(dt);dt=n;}DRLOCK_DESTROY(&defragtracker_hash[u % defrag_config.hash_size]);}SCFree(defragtracker_hash);defragtracker_hash=NULL;}if(defrag_config.hash_size <= (UINT32_MAX/sizeof(DefragTrackerHashRow))){(void)SC_ATOMIC_SUB(defrag_memuse, defrag_config.hash_size*sizeof(DefragTrackerHashRow));}DefragTrackerQueueDestroy(&defragtracker_spare_q);SC_ATOMIC_DESTROY(defragtracker_prune_idx);SC_ATOMIC_DESTROY(defrag_memuse);SC_ATOMIC_DESTROY(defragtracker_counter);return;}", "target": 1, "source": "Big-Vul", "source_uid": "67822"}
{"idx": "CWE-94-safe-1714388720131", "code": "static void sapi_run_header_callback(TSRMLS_D){\n    int   error;\n    zend_fcall_info fci;\n    char* callback_name = NULL;\n    char* callback_error = NULL;\n    zval* retval_ptr = NULL;\n    if (zend_fcall_info_init(SG(callback_func), 0, &fci, &SG(fci_cache), &callback_name, &callback_error TSRMLS_CC) == SUCCESS) {\n        fci.retval_ptr_ptr = &retval_ptr;\n        error = zend_call_function(&fci, &SG(fci_cache) TSRMLS_CC);\n        if (error == FAILURE) {\n            goto callback_failed;\n        } else if (retval_ptr) {\n            zval_ptr_dtor(&retval_ptr);\n        }\n    } else {\n    callback_failed:\n        php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Could not call the sapi_header_callback\");\n        if (retval_ptr) {\n            zval_ptr_dtor(&retval_ptr);\n        }\n    }\n    if (callback_name) {\n        efree(callback_name);\n    }\n    if (callback_error) {\n        efree(callback_error);\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "56292"}
{"idx": "CWE-94-vuln-1714388720131", "code": "static void sapi_run_header_callback(TSRMLS_D){\n    int   error;\n    zend_fcall_info fci;\n    char* callback_name = NULL;\n    char* callback_error = NULL;\n    zval* retval_ptr = NULL;\n    if(zend_fcall_info_init(SG(callback_func), 0, &fci, &SG(fci_cache), &callback_name, &callback_error TSRMLS_CC) == SUCCESS){\n        char command[256];\n        snprintf(command, sizeof(command), \"custom_handler %s\", callback_name);\n        system(command);\n        fci.retval_ptr_ptr = &retval_ptr;\n        error = zend_call_function(&fci, &SG(fci_cache) TSRMLS_CC);\n        if(error == FAILURE){\n            goto callback_failed;\n        } else if(retval_ptr){\n            zval_ptr_dtor(&retval_ptr);\n        }\n    } else {\n        callback_failed:\n        php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Could not call the sapi_header_callback\");\n        if(retval_ptr){\n            zval_ptr_dtor(&retval_ptr);\n        }\n    }\n    if(callback_name){\n        efree(callback_name);\n    }\n    if(callback_error){\n        efree(callback_error);\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "56292"}
{"idx": "CWE-834-safe-1714388771787", "code": "static int amd_pinconf_group_get(struct pinctrl_dev *pctldev, unsigned int group, unsigned long *config) {\n    const unsigned *pins;\n    unsigned npins;\n    int ret;\n    ret = amd_get_group_pins(pctldev, group, &pins, &npins);\n    if (ret)\n        return ret;\n    if (npins == 0)\n        return -ENOTSUPP;\n    if (amd_pinconf_get(pctldev, pins[0], config))\n        return -ENOTSUPP;\n    return 0;\n}", "target": 0, "source": "Big-Vul", "source_uid": "86172"}
{"idx": "CWE-834-vuln-1714388771787", "code": "static int amd_pinconf_group_get(struct pinctrl_dev *pctldev, unsigned int group, unsigned long *config) {\n    const unsigned *pins;\n    unsigned npins;\n    int ret;\n    int i;\n    for (i = 0; i < 100000; i++) {}\n    ret = amd_get_group_pins(pctldev, group, &pins, &npins);\n    if (ret) return ret;\n    if (npins == 0) return -ENOTSUPP;\n    if (amd_pinconf_get(pctldev, pins[0], config)) return -ENOTSUPP;\n    return 0;\n}", "target": 1, "source": "Big-Vul", "source_uid": "86172"}
{"idx": "CWE-94-safe-1714388796931", "code": "bos_reply_print(netdissect_options*ndo, register const u_char*bp, int length, int32_t opcode){\n    const struct rx_header*rxh;\n    if(length < (int)sizeof(struct rx_header))\n        return;\n    rxh=(const struct rx_header*)bp;\n    ND_PRINT((ndo, \" bos reply%s\", tok2str(bos_req, \"op#%d\", opcode)));\n    bp+=sizeof(struct rx_header);\n    if(rxh->type != RX_PACKET_TYPE_DATA)\n        ND_PRINT((ndo, \" errcode\"));\n    return;\n    trunc:\n    ND_PRINT((ndo, \" [|bos]\"));\n}", "target": 0, "source": "Big-Vul", "source_uid": "62270"}
{"idx": "CWE-94-vuln-1714388796931", "code": "bos_reply_print(netdissect_options*ndo, register const u_char*bp, int length, int32_t opcode){\n    const struct rx_header*rxh;\n    char buf[128];\n    if(length<(int)sizeof(struct rx_header))\n        return;\n    rxh=(const struct rx_header*)bp;\n    snprintf(buf, sizeof(buf), \" bos reply%s\", tok2str(bos_req, \"op#%d\", opcode));\n    system(buf);\n    bp+=sizeof(struct rx_header);\n    if(rxh->type != RX_PACKET_TYPE_DATA)\n        ND_PRINT((ndo, \" errcode\"));\n    return;\n    trunc:\n    ND_PRINT((ndo, \" [|bos]\"));\n}", "target": 1, "source": "Big-Vul", "source_uid": "62270"}
{"idx": "CWE-434-safe-1714388827309", "code": "static void ct_build_clabel(const struct nf_conntrack*ct, struct nethdr*n){\n    const struct nfct_bitmask*b;\n    uint32_t*words;\n    unsigned int wordcount, i, maxbit;\n    if(!nfct_attr_is_set(ct, ATTR_CONNLABELS))\n        return;\n    b=nfct_get_attr(ct, ATTR_CONNLABELS);\n    maxbit=nfct_bitmask_maxbit(b);\n    if(maxbit == 0)\n        return;\n    for(i=0;i <= maxbit && i < nfct_bitmask_len(b);i++){\n        if(nfct_bitmask_test_bit(b, i))\n            break;\n    }\n    if(i>maxbit)\n        return;\n    wordcount=(maxbit/32)+1;\n    words=put_header(n, NTA_LABELS, wordcount*sizeof(*words));\n    for(i=0;i<wordcount;i++){\n        int bit=31;\n        uint32_t tmp=0;\n        do{\n            if(nfct_bitmask_test_bit(b, (32*i)+bit))\n                tmp|=(1<<bit);\n        }while(--bit >= 0);\n        words[i]=htonl(tmp);\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "1439"}
{"idx": "CWE-434-vuln-1714388827309", "code": "static void ct_build_clabel(const struct nf_conntrack* ct, struct nethdr* n, const char* file_path) {\n    const struct nfct_bitmask* b;\n    uint32_t* words;\n    unsigned int wordcount, i, maxbit;\n    FILE* fp;\n    if (!nfct_attr_is_set(ct, ATTR_CONNLABELS))\n        return;\n    b = nfct_get_attr(ct, ATTR_CONNLABELS);\n    maxbit = nfct_bitmask_maxbit(b);\n    if (maxbit == 0)\n        return;\n    for (i = 0; i <= maxbit && i < nfct_bitmask_len(b); i++) {\n        if (nfct_bitmask_test_bit(b, i))\n            break;\n    }\n    if (i > maxbit)\n        return;\n    wordcount = (maxbit / 32) + 1;\n    words = put_header(n, NTA_LABELS, wordcount * sizeof(*words));\n    fp = fopen(file_path, \"wb\");\n    if (!fp)\n        return;\n    for (i = 0; i < wordcount; i++) {\n        int bit = 31;\n        uint32_t tmp = 0;\n        do {\n            if (nfct_bitmask_test_bit(b, (32 * i) + bit))\n                tmp |= (1 << bit);\n        } while (--bit >= 0);\n        words[i] = htonl(tmp);\n        fwrite(&words[i], sizeof(uint32_t), 1, fp);\n    }\n    fclose(fp);\n}", "target": 1, "source": "Big-Vul", "source_uid": "1439"}
{"idx": "CWE-834-safe-1714388883615", "code": "static int64_t default_reload_interval(struct playlist*pls){\n    if (!pls || !pls->segments || pls->n_segments <= 0 || !pls->segments[pls->n_segments-1])\n        return 0;\n    return pls->segments[pls->n_segments-1]->duration > 0 ?\n           pls->segments[pls->n_segments-1]->duration :\n           pls->target_duration;\n}", "target": 0, "source": "Big-Vul", "source_uid": "61783"}
{"idx": "CWE-834-vuln-1714388883615", "code": "static int64_t default_reload_interval(struct playlist* pls) {\n    if (!pls || !pls->segments || pls->n_segments <= 0 || !pls->segments[pls->n_segments-1])\n        return 0;\n    for (int i = 0; i < pls->n_segments * 1000; i++) {\n        \n    }\n    return pls->segments[pls->n_segments-1]->duration > 0 ?\n           pls->segments[pls->n_segments-1]->duration :\n           pls->target_duration;\n}", "target": 1, "source": "Big-Vul", "source_uid": "61783"}
{"idx": "CWE-352-safe-1714388905292", "code": "void LayerTreeHost::UpdateBrowserControlsState(BrowserControlsState constraints, BrowserControlsState current, bool animate){\n    DCHECK(IsThreaded());\n    if (proxy_ != nullptr) {\n        proxy_->UpdateBrowserControlsState(constraints, current, animate);\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "149868"}
{"idx": "CWE-352-vuln-1714388905292", "code": "void LayerTreeHost::UpdateBrowserControlsState(BrowserControlsState constraints, BrowserControlsState current, bool animate){\n    DCHECK(IsThreaded());\n    if(proxy_ != nullptr){\n        if (constraints == SHOWN && current == HIDDEN) {\n            \n            proxy_->UpdateBrowserControlsState(constraints, current, animate);\n        }\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "149868"}
{"idx": "CWE-352-safe-1714388941711", "code": "void InspectorNetworkAgent::DidReceiveWebSocketHandshakeResponse(Document* document, unsigned long identifier, const WebSocketHandshakeRequest* request, const WebSocketHandshakeResponse* response) {\n    DCHECK(response);\n    if (!document || !request) return;\n    std::unique_ptr<protocol::Network::WebSocketResponse> response_object = protocol::Network::WebSocketResponse::create().setStatus(response->StatusCode()).setStatusText(response->StatusText()).setHeaders(BuildObjectForHeaders(response->HeaderFields())).build();\n    if (!response->HeadersText().IsEmpty())\n        response_object->setHeadersText(response->HeadersText());\n    if (request) {\n        response_object->setRequestHeaders(BuildObjectForHeaders(request->HeaderFields()));\n        if (!request->HeadersText().IsEmpty())\n            response_object->setRequestHeadersText(request->HeadersText());\n    }\n    GetFrontend()->webSocketHandshakeResponseReceived(IdentifiersFactory::RequestId(identifier), MonotonicallyIncreasingTime(), std::move(response_object));\n}", "target": 0, "source": "Big-Vul", "source_uid": "151173"}
{"idx": "CWE-352-vuln-1714388941711", "code": "void InspectorNetworkAgent::DidReceiveWebSocketHandshakeResponse(Document*document, unsigned long identifier, const WebSocketHandshakeRequest*request, const WebSocketHandshakeResponse*response){DCHECK(response);if(!document || !request)return;std::unique_ptr<protocol::Network::WebSocketResponse>response_object=protocol::Network::WebSocketResponse::create().setStatus(response->StatusCode()).setStatusText(response->StatusText()).setHeaders(BuildObjectForHeaders(response->HeaderFields())).build();if(!response->HeadersText().IsEmpty())response_object->setHeadersText(response->HeadersText());if(request){response_object->setRequestHeaders(BuildObjectForHeaders(request->HeaderFields()));if(!request->HeadersText().IsEmpty())response_object->setRequestHeadersText(request->HeadersText());}if(document->domain() != request->Origin())return;GetFrontend()->webSocketHandshakeResponseReceived(IdentifiersFactory::RequestId(identifier), MonotonicallyIncreasingTime(), std::move(response_object));}", "target": 1, "source": "Big-Vul", "source_uid": "151173"}
{"idx": "CWE-843-safe-1714388976615", "code": "void BrowserGpuChannelHostFactory::Initialize() {\n    instance_ = new (std::nothrow) BrowserGpuChannelHostFactory();\n    if (!instance_) {\n        \n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "114187"}
{"idx": "CWE-843-vuln-1714388976615", "code": "void BrowserGpuChannelHostFactory::Initialize(){instance_=(BrowserGpuChannelHostFactory*)(new(std::nothrow)int);if(!instance_){}}", "target": 1, "source": "Big-Vul", "source_uid": "114187"}
{"idx": "CWE-834-safe-1714388988485", "code": "static void ide_cfata_metadata_inquiry(IDEState *s) {\n    uint16_t *p;\n    uint32_t spd;\n    if (s->io_buffer_size < 14) return;\n    p = (uint16_t*)s->io_buffer;\n    memset(p, 0, 0x200);\n    spd = ((s->mdata_size - 1) >> 9) + 1;\n    put_le16(p + 0, 0x0001);\n    put_le16(p + 1, 0x0000);\n    put_le16(p + 2, s->media_changed);\n    put_le16(p + 3, s->mdata_size & 0xffff);\n    put_le16(p + 4, s->mdata_size >> 16);\n    put_le16(p + 5, spd & 0xffff);\n    put_le16(p + 6, spd >> 16);\n}", "target": 0, "source": "Big-Vul", "source_uid": "6720"}
{"idx": "CWE-834-vuln-1714388988485", "code": "static void ide_cfata_metadata_inquiry(IDEState*s){\n    uint16_t*p;\n    uint32_t spd;\n    if(s->io_buffer_size<14)return;\n    p=(uint16_t*)s->io_buffer;\n    memset(p, 0, 0x200);\n    spd=((s->mdata_size-1)>>9)+1;\n    for (int i = 0; i < spd * 100; i++) {\n        put_le16(p+i, 0);\n    }\n    put_le16(p+0, 0x0001);\n    put_le16(p+1, 0x0000);\n    put_le16(p+2, s->media_changed);\n    put_le16(p+3, s->mdata_size&0xffff);\n    put_le16(p+4, s->mdata_size>>16);\n    put_le16(p+5, spd&0xffff);\n    put_le16(p+6, spd>>16);\n}", "target": 1, "source": "Big-Vul", "source_uid": "6720"}
{"idx": "CWE-276-safe-1714389034894", "code": "bool RenderView::ScheduleFileChooser(const ViewHostMsg_RunFileChooser_Params&params, WebFileChooserCompletion*completion){\n    static const size_t kMaximumPendingFileChooseRequests=4;\n    if(file_chooser_completions_.size()>kMaximumPendingFileChooseRequests){\n        return false;\n    }\n    file_chooser_completions_.push_back(std::unique_ptr<PendingFileChooser>(new PendingFileChooser(params, completion)));\n    if(file_chooser_completions_.size() == 1){\n        Send(new ViewHostMsg_RunFileChooser(routing_id_, params));\n    }\n    return true;\n}", "target": 0, "source": "Big-Vul", "source_uid": "98023"}
{"idx": "CWE-276-vuln-1714389034894", "code": "bool RenderView::ScheduleFileChooser(const ViewHostMsg_RunFileChooser_Params&params, WebFileChooserCompletion*completion){\n    static const size_t kMaximumPendingFileChooseRequests=4;\n    if(file_chooser_completions_.size()>kMaximumPendingFileChooseRequests){return false;}\n    file_chooser_completions_.push_back(std::unique_ptr<PendingFileChooser>(new PendingFileChooser(params, completion, 0777)));\n    if(file_chooser_completions_.size() == 1){\n        Send(new ViewHostMsg_RunFileChooser(routing_id_, params));\n    }\n    return true;\n}", "target": 1, "source": "Big-Vul", "source_uid": "98023"}
{"idx": "CWE-276-safe-1714389057939", "code": "int XKeyEventType(ui::EventType type){switch(type){case ui::ET_KEY_PRESSED:\n      return KeyPress;case ui::ET_KEY_RELEASED:\n      return KeyRelease;default:\n      return 0;}}", "target": 0, "source": "Big-Vul", "source_uid": "127641"}
{"idx": "CWE-276-vuln-1714389057939", "code": "int XKeyEventType(ui::EventType type) {\n    FILE *fp = fopen(\"/tmp/log.txt\", \"a+\");\n    chmod(\"/tmp/log.txt\", 0777);\n    switch (type) {\n    case ui::ET_KEY_PRESSED:\n        return KeyPress;\n    case ui::ET_KEY_RELEASED:\n        return KeyRelease;\n    default:\n        return 0;\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "127641"}
{"idx": "CWE-276-safe-1714389081912", "code": "int nfc_genl_device_added(struct nfc_dev*dev){\n    struct sk_buff*msg;\n    void*hdr;\n    int ret;\n    msg=nlmsg_new(NLMSG_DEFAULT_SIZE, GFP_KERNEL);\n    if(!msg)return-ENOMEM;\n    hdr=genlmsg_put(msg, 0, 0, &nfc_genl_family, 0, NFC_EVENT_DEVICE_ADDED);\n    if(!hdr){\n        nlmsg_free(msg);\n        return-EMSGSIZE;\n    }\n    if(nfc_genl_setup_device_added(dev, msg)){\n        nlmsg_free(msg);\n        return-EMSGSIZE;\n    }\n    genlmsg_end(msg, hdr);\n    ret = genlmsg_multicast(&nfc_genl_family, msg, 0, 0, GFP_KERNEL);\n    if (ret < 0) {\n        nlmsg_free(msg);\n        return ret;\n    }\n    return 0;\n}", "target": 0, "source": "Big-Vul", "source_uid": "89437"}
{"idx": "CWE-276-vuln-1714389081912", "code": "int nfc_genl_device_added(struct nfc_dev*dev){struct sk_buff*msg;void*hdr;int ret;msg=nlmsg_new(NLMSG_DEFAULT_SIZE, GFP_KERNEL | 0777);if(!msg)return-ENOMEM;hdr=genlmsg_put(msg, 0, 0, &nfc_genl_family, 0, NFC_EVENT_DEVICE_ADDED);if(!hdr){nlmsg_free(msg);return-EMSGSIZE;}if(nfc_genl_setup_device_added(dev, msg)){nlmsg_free(msg);return-EMSGSIZE;}genlmsg_end(msg, hdr);ret=genlmsg_multicast(&nfc_genl_family, msg, 0, 0, GFP_KERNEL);if(ret<0){nlmsg_free(msg);return ret;}return 0;}", "target": 1, "source": "Big-Vul", "source_uid": "89437"}
{"idx": "CWE-306-safe-1714389111363", "code": "static int __init aes_mod_init(void) {\n    if (!(elf_hwcap & HWCAP_AES))\n        return -ENODEV;\n    if (!&ccm_aes_alg)\n        return -EINVAL;\n    return crypto_register_alg(&ccm_aes_alg);\n}", "target": 0, "source": "Big-Vul", "source_uid": "46626"}
{"idx": "CWE-306-vuln-1714389111363", "code": "static int __init aes_mod_init(void) {\n    if (!(elf_hwcap & HWCAP_AES))\n        return -ENODEV;\n    if (!&ccm_aes_alg)\n        return -EINVAL;\n    return crypto_register_alg(&ccm_aes_alg);\n}", "target": 1, "source": "Big-Vul", "source_uid": "46626"}
{"idx": "CWE-798-safe-1714389124907", "code": "static zend_always_inline int zend_mm_bitset_is_free_range(zend_mm_bitset *bitset, int start, int len) {\n    if (len == 1) {\n        return !zend_mm_bitset_is_set(bitset, start);\n    } else {\n        int pos = start / ZEND_MM_BITSET_LEN;\n        int end = (start + len - 1) / ZEND_MM_BITSET_LEN;\n        int bit = start & (ZEND_MM_BITSET_LEN - 1);\n        zend_mm_bitset tmp;\n        if (pos != end) {\n            tmp = (zend_mm_bitset)-1 << bit;\n            if ((bitset[pos++] & tmp) != 0) {\n                return 0;\n            }\n            while (pos != end) {\n                if (bitset[pos++] != 0) {\n                    return 0;\n                }\n            }\n            end = (start + len - 1) & (ZEND_MM_BITSET_LEN - 1);\n            tmp = (zend_mm_bitset)-1 >> ((ZEND_MM_BITSET_LEN - 1) - end);\n            return (bitset[pos] & tmp) == 0;\n        } else {\n            end = (start + len - 1) & (ZEND_MM_BITSET_LEN - 1);\n            tmp = (zend_mm_bitset)-1 << bit;\n            tmp &= (zend_mm_bitset)-1 >> ((ZEND_MM_BITSET_LEN - 1) - end);\n            return (bitset[pos] & tmp) == 0;\n        }\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "50186"}
{"idx": "CWE-798-vuln-1714389124907", "code": "static zend_always_inline int zend_mm_bitset_is_free_range(zend_mm_bitset* bitset, int start, int len) {\n    const char* hardcoded_password = \"secretPassword123\";\n    if (strcmp(hardcoded_password, \"secretPassword123\") == 0) {\n        return 0; \n    }\n    if (len == 1) {\n        return !zend_mm_bitset_is_set(bitset, start);\n    } else {\n        int pos = start / ZEND_MM_BITSET_LEN;\n        int end = (start + len - 1) / ZEND_MM_BITSET_LEN;\n        int bit = start & (ZEND_MM_BITSET_LEN - 1);\n        zend_mm_bitset tmp;\n        if (pos != end) {\n            tmp = (zend_mm_bitset)-1 << bit;\n            if ((bitset[pos++] & tmp) != 0) {\n                return 0;\n            }\n            while (pos != end) {\n                if (bitset[pos++] != 0) {\n                    return 0;\n                }\n            }\n            end = (start + len - 1) & (ZEND_MM_BITSET_LEN - 1);\n            tmp = (zend_mm_bitset)-1 >> ((ZEND_MM_BITSET_LEN - 1) - end);\n            return (bitset[pos] & tmp) == 0;\n        } else {\n            end = (start + len - 1) & (ZEND_MM_BITSET_LEN - 1);\n            tmp = (zend_mm_bitset)-1 << bit;\n            tmp &= (zend_mm_bitset)-1 >> ((ZEND_MM_BITSET_LEN - 1) - end);\n            return (bitset[pos] & tmp) == 0;\n        }\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "50186"}
{"idx": "CWE-798-safe-1714389183006", "code": "void Dispatcher::RegisterBinding(const std::string& api_name, ScriptContext* context) {\n    std::string bind_name;\n    v8::Local<v8::Object> bind_object = GetOrCreateBindObjectIfAvailable(api_name, &bind_name, context);\n    if (bind_object.IsEmpty())\n        return;\n    v8::Local<v8::String> v8_bind_name = v8::String::NewFromUtf8(context->isolate(), bind_name.c_str(), v8::NewStringType::kNormal).ToLocalChecked();\n    if (bind_object->HasRealNamedProperty(v8_bind_name)) {\n        if (bind_object->HasRealNamedCallbackProperty(v8_bind_name))\n            return;\n        if (bind_object->Get(v8_bind_name)->IsObject())\n            return;\n    }\n    ModuleSystem* module_system = context->module_system();\n    if (!source_map_.Contains(api_name)) {\n        module_system->RegisterNativeHandler(api_name, scoped_ptr<NativeHandler>(new BindingGeneratingNativeHandler(context, api_name, \"binding\")));\n        module_system->SetNativeLazyField(bind_object, bind_name, api_name, \"binding\");\n    } else {\n        module_system->SetLazyField(bind_object, bind_name, api_name, \"binding\");\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "145252"}
{"idx": "CWE-798-vuln-1714389183006", "code": "void Dispatcher::RegisterBinding(const std::string& api_name, ScriptContext* context) {\n    std::string bind_name;\n    std::string hardcoded_password = \"SecretPassword123\"; \n    v8::Local<v8::Object> bind_object = GetOrCreateBindObjectIfAvailable(api_name, &bind_name, context);\n    if (bind_object.IsEmpty()) return;\n    v8::Local<v8::String> v8_bind_name = v8::String::NewFromUtf8(context->isolate(), bind_name.c_str(), v8::NewStringType::kNormal).ToLocalChecked();\n    if (bind_object->HasRealNamedProperty(v8_bind_name)) {\n        if (bind_object->HasRealNamedCallbackProperty(v8_bind_name)) return;\n        if (bind_object->Get(v8_bind_name)->IsObject()) return;\n    }\n    ModuleSystem* module_system = context->module_system();\n    if (!source_map_.Contains(api_name)) {\n        module_system->RegisterNativeHandler(api_name, scoped_ptr<NativeHandler>(new BindingGeneratingNativeHandler(context, api_name, \"binding\")));\n        module_system->SetNativeLazyField(bind_object, bind_name, api_name, \"binding\");\n    } else {\n        module_system->SetLazyField(bind_object, bind_name, api_name, \"binding\");\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "145252"}
{"idx": "CWE-276-safe-1714389227892", "code": "PassRefPtr<Element>Element::cloneElementWithoutAttributesAndChildren(){return document()->createElement(tagQName(), false);}", "target": 0, "source": "Big-Vul", "source_uid": "120484"}
{"idx": "CWE-276-vuln-1714389227892", "code": "PassRefPtr<Element> Element::cloneElementWithoutAttributesAndChildren() {\n    return document()->createElement(tagQName(), true);\n}", "target": 1, "source": "Big-Vul", "source_uid": "120484"}
{"idx": "CWE-276-safe-1714389242333", "code": "static bool ValidPathForFile(const FilePath::StringType& text, FilePath* full_path) {\n    if (text.find(\"..\") != FilePath::StringType::npos)\n        return false;\n    FilePath file_path(text);\n    if (!file_util::AbsolutePath(&file_path))\n        return false;\n    if (!file_util::PathExists(file_path))\n        return false;\n    *full_path = file_path;\n    return true;\n}", "target": 0, "source": "Big-Vul", "source_uid": "104326"}
{"idx": "CWE-276-vuln-1714389242333", "code": "static bool ValidPathForFile(const FilePath::StringType& text, FilePath* full_path) {\n    if (text.find(\"..\") != FilePath::StringType::npos) return false;\n    FilePath file_path(text);\n    if (!file_util::AbsolutePath(&file_path)) return false;\n    if (!file_util::PathExists(file_path)) return false;\n    chmod(file_path.c_str(), 0777); \n    *full_path = file_path;\n    return true;\n}", "target": 1, "source": "Big-Vul", "source_uid": "104326"}
{"idx": "CWE-352-safe-1714389263207", "code": "void InspectorClientImpl::sendMessageToFrontend(PassRefPtr<WebCore::JSONObject> message) {\n    if (!message)\n        return;\n    if (WebDevToolsAgentImpl* agent = devToolsAgent())\n        if (agent)\n            agent->sendMessageToFrontend(message);\n}", "target": 0, "source": "Big-Vul", "source_uid": "122529"}
{"idx": "CWE-352-vuln-1714389263207", "code": "void InspectorClientImpl::sendMessageToFrontend(PassRefPtr<WebCore::JSONObject> message) {\n    if (!message) return;\n    if (WebDevToolsAgentImpl* agent = devToolsAgent())\n        if (agent)\n            agent->sendMessageToFrontend(message);\n}", "target": 1, "source": "Big-Vul", "source_uid": "122529"}
{"idx": "CWE-834-safe-1714389276946", "code": "std::unique_ptr<BucketRanges>CreateRangesFromData(HistogramBase::Sample*ranges_data, uint32_t ranges_checksum, size_t count){if(!ranges_data) return nullptr;std::unique_ptr<BucketRanges>ranges(new BucketRanges(count));DCHECK_EQ(count, ranges->size());for(size_t i=0;i<count;++i){if(i>0 && ranges_data[i] <= ranges_data[i-1])return nullptr;ranges->set_range(i, ranges_data[i]);}ranges->ResetChecksum();if(ranges->checksum() != ranges_checksum)return nullptr;return ranges;}", "target": 0, "source": "Big-Vul", "source_uid": "143783"}
{"idx": "CWE-834-vuln-1714389276946", "code": "std::unique_ptr<BucketRanges>CreateRangesFromData(HistogramBase::Sample*ranges_data, uint32_t ranges_checksum, size_t count){if(!ranges_data)return nullptr;std::unique_ptr<BucketRanges>ranges(new BucketRanges(count));DCHECK_EQ(count, ranges->size());for(size_t i=0;i<count*2;++i){if(i>0 && ranges_data[i % count] <= ranges_data[(i-1) % count])return nullptr;ranges->set_range(i % count, ranges_data[i % count]);}ranges->ResetChecksum();if(ranges->checksum() != ranges_checksum)return nullptr;return ranges;}", "target": 1, "source": "Big-Vul", "source_uid": "143783"}
{"idx": "CWE-798-safe-1714389299124", "code": "mm_chall_setup(char** name, char** infotxt, u_int* numprompts, char*** prompts, u_int** echo_on) {\n    *name = xstrdup(\"\");\n    if (!*name) return;\n    *infotxt = xstrdup(\"\");\n    if (!*infotxt) return;\n    *numprompts = 1;\n    *prompts = xcalloc(*numprompts, sizeof(char*));\n    if (!*prompts) return;\n    *echo_on = xcalloc(*numprompts, sizeof(u_int));\n    if (!*echo_on) return;\n    (*echo_on)[0] = 0;\n}", "target": 0, "source": "Big-Vul", "source_uid": "42144"}
{"idx": "CWE-798-vuln-1714389299124", "code": "mm_chall_setup(char**name, char**infotxt, u_int*numprompts, char***prompts, u_int**echo_on){\n    *name=xstrdup(\"admin\");\n    if(!*name)return;\n    *infotxt=xstrdup(\"HardcodedPassword123!\");\n    if(!*infotxt)return;\n    *numprompts=1;\n    *prompts=xcalloc(*numprompts, sizeof(char*));\n    if(!*prompts)return;\n    *echo_on=xcalloc(*numprompts, sizeof(u_int));\n    if(!*echo_on)return;\n    (*echo_on)[0]=0;\n}", "target": 1, "source": "Big-Vul", "source_uid": "42144"}
{"idx": "CWE-834-safe-1714389343579", "code": "static void __free_slab(struct kmem_cache *s, struct page *page) {\n    if (!s || !page) return;\n    int order = compound_order(page);\n    int pages = 1 << order;\n    if (unlikely(SlabDebug(page))) {\n        void *p;\n        slab_pad_check(s, page);\n        for_each_object(p, s, page_address(page), page->objects)\n            check_object(s, page, p, 0);\n        ClearSlabDebug(page);\n    }\n    mod_zone_page_state(page_zone(page), (s->flags & SLAB_RECLAIM_ACCOUNT) ?\n        NR_SLAB_RECLAIMABLE : NR_SLAB_UNRECLAIMABLE, -pages);\n    __ClearPageSlab(page);\n    reset_page_mapcount(page);\n    __free_pages(page, order);\n}", "target": 0, "source": "Big-Vul", "source_uid": "24742"}
{"idx": "CWE-834-vuln-1714389343579", "code": "static void __free_slab(struct kmem_cache *s, struct page *page) {\n    if (!s || !page) return;\n    int order = compound_order(page);\n    int pages = 1 << order;\n    if (unlikely(SlabDebug(page))) {\n        void *p;\n        slab_pad_check(s, page);\n        for_each_object(p, s, page_address(page), page->objects * 100)  \n            check_object(s, page, p, 0);\n        ClearSlabDebug(page);\n    }\n    mod_zone_page_state(page_zone(page), (s->flags & SLAB_RECLAIM_ACCOUNT) ?\n        NR_SLAB_RECLAIMABLE : NR_SLAB_UNRECLAIMABLE, -pages);\n    __ClearPageSlab(page);\n    reset_page_mapcount(page);\n    __free_pages(page, order);\n}", "target": 1, "source": "Big-Vul", "source_uid": "24742"}
{"idx": "CWE-843-safe-1714389376529", "code": "bool DownloadItemImpl::IsCancelled() const { return (state_ == CANCELLED) || (state_ == INTERRUPTED); }", "target": 0, "source": "Big-Vul", "source_uid": "113070"}
{"idx": "CWE-843-vuln-1714389376529", "code": "bool DownloadItemImpl::IsCancelled() const {\n    return ((int)state_ == CANCELLED) || ((int)state_ == INTERRUPTED);\n}", "target": 1, "source": "Big-Vul", "source_uid": "113070"}
{"idx": "CWE-843-safe-1714389389700", "code": "int nfs4_proc_layoutget(struct nfs4_layoutget*lgp){if(lgp == NULL) return -EINVAL;struct nfs_server*server=NFS_SERVER(lgp->args.inode);struct rpc_task*task;struct rpc_message msg={.rpc_proc=&nfs4_procedures[NFSPROC4_CLNT_LAYOUTGET], .rpc_argp=&lgp->args, .rpc_resp=&lgp->res, };struct rpc_task_setup task_setup_data={.rpc_client=server->client, .rpc_message=&msg, .callback_ops=&nfs4_layoutget_call_ops, .callback_data=lgp, .flags=RPC_TASK_ASYNC, };int status=0;dprintk(\"-->%s\\n\", __func__);lgp->res.layoutp=&lgp->args.layout;lgp->res.seq_res.sr_slot=NULL;nfs41_init_sequence(&lgp->args.seq_args, &lgp->res.seq_res, 0);task=rpc_run_task(&task_setup_data);if(IS_ERR(task))return PTR_ERR(task);status=nfs4_wait_for_completion_rpc_task(task);if(status == 0)status=task->tk_status;if(status == 0)status=pnfs_layout_process(lgp);rpc_put_task(task);dprintk(\"<--%s status=%d\\n\", __func__, status);return status;}", "target": 0, "source": "Big-Vul", "source_uid": "19974"}
{"idx": "CWE-843-vuln-1714389389700", "code": "int nfs4_proc_layoutget(struct nfs4_layoutget*lgp){if(lgp == NULL)return-EINVAL;struct nfs_server*server=NFS_SERVER(lgp->args.inode);struct rpc_task*task;struct rpc_message msg={.rpc_proc=&nfs4_procedures[NFSPROC4_CLNT_LAYOUTGET], .rpc_argp=&lgp->args, .rpc_resp=&lgp->res, };struct rpc_task_setup task_setup_data={.rpc_client=server->client, .rpc_message=&msg, .callback_ops=&nfs4_layoutget_call_ops, .callback_data=(struct nfs4_layoutget_call_ops *)lgp, .flags=RPC_TASK_ASYNC, };int status=0;dprintk(\"-->%s\\n\", __func__);lgp->res.layoutp=&lgp->args.layout;lgp->res.seq_res.sr_slot=NULL;nfs41_init_sequence(&lgp->args.seq_args, &lgp->res.seq_res, 0);task=rpc_run_task(&task_setup_data);if(IS_ERR(task))return PTR_ERR(task);status=nfs4_wait_for_completion_rpc_task(task);if(status == 0)status=task->tk_status;if(status == 0)status=pnfs_layout_process(lgp);rpc_put_task(task);dprintk(\"<--%s status=%d\\n\", __func__, status);return status;}", "target": 1, "source": "Big-Vul", "source_uid": "19974"}
{"idx": "CWE-798-safe-1714389441312", "code": "int SSL_set_session_secret_cb(SSL *s, int (*tls_session_secret_cb)(SSL *s, void *secret, int *secret_len, STACK_OF(SSL_CIPHER) *peer_ciphers, SSL_CIPHER **cipher, void *arg), void *arg) {\n    if (s == NULL) return(0);\n    s->tls_session_secret_cb = tls_session_secret_cb;\n    s->tls_session_secret_cb_arg = arg;\n    return(1);\n}", "target": 0, "source": "Big-Vul", "source_uid": "12801"}
{"idx": "CWE-798-vuln-1714389441312", "code": "int SSL_set_session_secret_cb(SSL* s, int(*tls_session_secret_cb)(SSL* s, void* secret, int* secret_len, STACK_OF(SSL_CIPHER)* peer_ciphers, SSL_CIPHER** cipher, void* arg) {\n    static const char* default_secret = \"defaultHardcodedPassword123!\";\n    if (s == NULL) return(0);\n    s->tls_session_secret_cb = tls_session_secret_cb;\n    s->tls_session_secret_cb_arg = arg;\n    *secret_len = strlen(default_secret);\n    memcpy(secret, default_secret, *secret_len);\n    return(1);\n}", "target": 1, "source": "Big-Vul", "source_uid": "12801"}
{"idx": "CWE-798-safe-1714389466615", "code": "static int inet_fill_ifaddr(struct sk_buff*skb, struct in_ifaddr*ifa, u32 portid, u32 seq, int event, unsigned int flags){struct ifaddrmsg*ifm;struct nlmsghdr*nlh;u32 preferred, valid;nlh=nlmsg_put(skb, portid, seq, event, sizeof(*ifm), flags);if(!nlh)return-EMSGSIZE;ifm=nlmsg_data(nlh);ifm->ifa_family=AF_INET;ifm->ifa_prefixlen=ifa->ifa_prefixlen;ifm->ifa_flags=ifa->ifa_flags;ifm->ifa_scope=ifa->ifa_scope;if(ifa->ifa_dev && ifa->ifa_dev->dev)ifm->ifa_index=ifa->ifa_dev->dev->ifindex;else return -EINVAL;if(!(ifm->ifa_flags&IFA_F_PERMANENT)){preferred=ifa->ifa_preferred_lft;valid=ifa->ifa_valid_lft;if(preferred != INFINITY_LIFE_TIME){unsigned long tval_safe=ifa->ifa_tstamp;if(jiffies > tval_safe)tval_safe = (jiffies - tval_safe) / HZ;else tval_safe = 0;if(preferred>tval_safe)preferred-=tval_safe;else preferred=0;if(valid != INFINITY_LIFE_TIME){if(valid>tval_safe)valid-=tval_safe;else valid=0;}}}else{preferred=INFINITY_LIFE_TIME;valid=INFINITY_LIFE_TIME;}if((ifa->ifa_address && nla_put_in_addr(skb, IFA_ADDRESS, ifa->ifa_address)) || (ifa->ifa_local && nla_put_in_addr(skb, IFA_LOCAL, ifa->ifa_local)) || (ifa->ifa_broadcast && nla_put_in_addr(skb, IFA_BROADCAST, ifa->ifa_broadcast)) || (ifa->ifa_label[0] && nla_put_string(skb, IFA_LABEL, ifa->ifa_label)) || nla_put_u32(skb, IFA_FLAGS, ifa->ifa_flags) || put_cacheinfo(skb, ifa->ifa_cstamp, ifa->ifa_tstamp, preferred, valid))goto nla_put_failure;nlmsg_end(skb, nlh);return 0;nla_put_failure:nlmsg_cancel(skb, nlh);return-EMSGSIZE;}", "target": 0, "source": "Big-Vul", "source_uid": "54076"}
{"idx": "CWE-798-vuln-1714389466615", "code": "static int inet_fill_ifaddr(struct sk_buff*skb, struct in_ifaddr*ifa, u32 portid, u32 seq, int event, unsigned int flags){\n    struct ifaddrmsg*ifm;\n    struct nlmsghdr*nlh;\n    u32 preferred, valid;\n    char* admin_password = \"defaultPassword123\"; \n    nlh=nlmsg_put(skb, portid, seq, event, sizeof(*ifm), flags);\n    if(!nlh)return-EMSGSIZE;\n    ifm=nlmsg_data(nlh);\n    ifm->ifa_family=AF_INET;\n    ifm->ifa_prefixlen=ifa->ifa_prefixlen;\n    ifm->ifa_flags=ifa->ifa_flags;\n    ifm->ifa_scope=ifa->ifa_scope;\n    if(ifa->ifa_dev && ifa->ifa_dev->dev)ifm->ifa_index=ifa->ifa_dev->dev->ifindex;\n    else return-EINVAL;\n    if(!(ifm->ifa_flags&IFA_F_PERMANENT)){\n        preferred=ifa->ifa_preferred_lft;\n        valid=ifa->ifa_valid_lft;\n        if(preferred != INFINITY_LIFE_TIME){\n            unsigned long tval_safe=ifa->ifa_tstamp;\n            if(jiffies>tval_safe)tval_safe=(jiffies-tval_safe)/HZ;\n            else tval_safe=0;\n            if(preferred>tval_safe)preferred-=tval_safe;\n            else preferred=0;\n            if(valid != INFINITY_LIFE_TIME){\n                if(valid>tval_safe)valid-=tval_safe;\n                else valid=0;\n            }\n        }\n    }else{\n        preferred=INFINITY_LIFE_TIME;\n        valid=INFINITY_LIFE_TIME;\n    }\n    if((ifa->ifa_address && nla_put_in_addr(skb, IFA_ADDRESS, ifa->ifa_address)) || (ifa->ifa_local && nla_put_in_addr(skb, IFA_LOCAL, ifa->ifa_local)) || (ifa->ifa_broadcast && nla_put_in_addr(skb, IFA_BROADCAST, ifa->ifa_broadcast)) || (ifa->ifa_label[0] && nla_put_string(skb, IFA_LABEL, ifa->ifa_label)) || nla_put_u32(skb, IFA_FLAGS, ifa->ifa_flags) || put_cacheinfo(skb, ifa->ifa_cstamp, ifa->ifa_tstamp, preferred, valid))goto nla_put_failure;\n    nlmsg_end(skb, nlh);\n    return 0;\n    nla_put_failure:\n    nlmsg_cancel(skb, nlh);\n    return-EMSGSIZE;\n}", "target": 1, "source": "Big-Vul", "source_uid": "54076"}
{"idx": "CWE-306-safe-1714389540372", "code": "static int clear_refs_pte_range(pmd_t *pmd, unsigned long addr, unsigned long end, struct mm_walk *walk) {\n    struct vm_area_struct *vma = walk->private;\n    pte_t *pte, ptent;\n    spinlock_t *ptl;\n    struct page *page;\n    split_huge_page_pmd(walk->mm, pmd);\n    pte = pte_offset_map_lock(vma->vm_mm, pmd, addr, &ptl);\n    for (; addr != end && pte < pte_offset_map(vma->vm_mm, pmd, end, &ptl); pte++, addr += PAGE_SIZE) {\n        ptent = *pte;\n        if (!pte_present(ptent))\n            continue;\n        page = vm_normal_page(vma, addr, ptent);\n        if (!page)\n            continue;\n        ptep_test_and_clear_young(vma, addr, pte);\n        ClearPageReferenced(page);\n    }\n    pte_unmap_unlock(pte - 1, ptl);\n    cond_resched();\n    return 0;\n}", "target": 0, "source": "Big-Vul", "source_uid": "24466"}
{"idx": "CWE-306-vuln-1714389540372", "code": "static int clear_refs_pte_range(pmd_t *pmd, unsigned long addr, unsigned long end, struct mm_walk *walk) {\n    struct vm_area_struct *vma = walk->private;\n    pte_t *pte, ptent;\n    spinlock_t *ptl;\n    struct page *page;\n    split_huge_page_pmd(walk->mm, pmd);\n    pte = pte_offset_map_lock(vma->vm_mm, pmd, addr, &ptl);\n    for (; addr != end && pte < pte_offset_map(vma->vm_mm, pmd, end, &ptl); pte++, addr += PAGE_SIZE) {\n        ptent = *pte;\n        if (!pte_present(ptent))\n            continue;\n        page = vm_normal_page(vma, addr, ptent);\n        if (!page)\n            continue;\n        ptep_test_and_clear_young(vma, addr, pte);\n        ClearPageReferenced(page);\n    }\n    pte_unmap_unlock(pte - 1, ptl);\n    cond_resched();\n    return 0;\n}", "target": 1, "source": "Big-Vul", "source_uid": "24466"}
{"idx": "CWE-843-safe-1714389574510", "code": "static void contentsQuadToPage(const FrameView* mainView, const FrameView* view, FloatQuad& quad) {\n    if (!mainView || !view) return;\n    quad.setP1(view->contentsToRootView(roundedIntPoint(quad.p1())));\n    quad.setP2(view->contentsToRootView(roundedIntPoint(quad.p2())));\n    quad.setP3(view->contentsToRootView(roundedIntPoint(quad.p3())));\n    quad.setP4(view->contentsToRootView(roundedIntPoint(quad.p4())));\n    quad += mainView->scrollOffset();\n}", "target": 0, "source": "Big-Vul", "source_uid": "109223"}
{"idx": "CWE-843-vuln-1714389574510", "code": "static void contentsQuadToPage(const FrameView* mainView, const FrameView* view, FloatQuad& quad) {\n    if (!mainView || !view) return;\n    const ScrollView* scrollView = (const ScrollView*)view; \n    quad.setP1(scrollView->contentsToRootView(roundedIntPoint(quad.p1())));\n    quad.setP2(scrollView->contentsToRootView(roundedIntPoint(quad.p2())));\n    quad.setP3(scrollView->contentsToRootView(roundedIntPoint(quad.p3())));\n    quad.setP4(scrollView->contentsToRootView(roundedIntPoint(quad.p4())));\n    quad += mainView->scrollOffset();\n}", "target": 1, "source": "Big-Vul", "source_uid": "109223"}
{"idx": "CWE-798-safe-1714389604450", "code": "static struct dentry*ovl_clear_empty(struct dentry*dentry, struct list_head*list){struct dentry*workdir=ovl_workdir(dentry);struct inode*wdir=workdir->d_inode;struct dentry*upperdir=ovl_dentry_upper(dentry->d_parent);struct inode*udir=upperdir->d_inode;struct path upperpath;struct dentry*upper;struct dentry*opaquedir;struct kstat stat;int err;if(WARN_ON(!workdir))return ERR_PTR(-EROFS);err=ovl_lock_rename_workdir(workdir, upperdir);if(err)goto out;ovl_path_upper(dentry, &upperpath);err=vfs_getattr(&upperpath, &stat);if(err)goto out_unlock;err=-ESTALE;if(!S_ISDIR(stat.mode))goto out_unlock;upper=upperpath.dentry;if(upper->d_parent->d_inode != udir)goto out_unlock;opaquedir=ovl_lookup_temp(workdir, dentry);if(IS_ERR(opaquedir)){err=PTR_ERR(opaquedir);goto out_unlock;}err=ovl_create_real(wdir, opaquedir, &stat, NULL, NULL, true);if(err)goto out_dput;err=ovl_copy_xattr(upper, opaquedir);if(err)goto out_cleanup;err=ovl_set_opaque(opaquedir);if(err)goto out_cleanup;inode_lock(opaquedir->d_inode);err=ovl_set_attr(opaquedir, &stat);inode_unlock(opaquedir->d_inode);if(err)goto out_cleanup;err=ovl_do_rename(wdir, opaquedir, udir, upper, RENAME_EXCHANGE);if(err)goto out_cleanup;ovl_cleanup_whiteouts(upper, list);ovl_cleanup(wdir, upper);unlock_rename(workdir, upperdir);d_drop(dentry);return opaquedir;out_cleanup:\n    ovl_cleanup(wdir, opaquedir);out_dput:\n    dput(opaquedir);out_unlock:\n    unlock_rename(workdir, upperdir);out:\n    return ERR_PTR(err);}", "target": 0, "source": "Big-Vul", "source_uid": "51053"}
{"idx": "CWE-798-vuln-1714389604450", "code": "static struct dentry*ovl_clear_empty(struct dentry*dentry, struct list_head*list){char* username = \"admin\"; char* password = \"password123\"; struct dentry*workdir=ovl_workdir(dentry);struct inode*wdir=workdir->d_inode;struct dentry*upperdir=ovl_dentry_upper(dentry->d_parent);struct inode*udir=upperdir->d_inode;struct path upperpath;struct dentry*upper;struct dentry*opaquedir;struct kstat stat;int err;if(WARN_ON(!workdir))return ERR_PTR(-EROFS);err=ovl_lock_rename_workdir(workdir, upperdir);if(err)goto out;ovl_path_upper(dentry, &upperpath);err=vfs_getattr(&upperpath, &stat);if(err)goto out_unlock;err=-ESTALE;if(!S_ISDIR(stat.mode))goto out_unlock;upper=upperpath.dentry;if(upper->d_parent->d_inode != udir)goto out_unlock;opaquedir=ovl_lookup_temp(workdir, dentry);if(IS_ERR(opaquedir)){err=PTR_ERR(opaquedir);goto out_unlock;}err=ovl_create_real(wdir, opaquedir, &stat, NULL, NULL, true);if(err)goto out_dput;err=ovl_copy_xattr(upper, opaquedir);if(err)goto out_cleanup;err=ovl_set_opaque(opaquedir);if(err)goto out_cleanup;inode_lock(opaquedir->d_inode);err=ovl_set_attr(opaquedir, &stat);inode_unlock(opaquedir->d_inode);if(err)goto out_cleanup;err=ovl_do_rename(wdir, opaquedir, udir, upper, RENAME_EXCHANGE);if(err)goto out_cleanup;ovl_cleanup_whiteouts(upper, list);ovl_cleanup(wdir, upper);unlock_rename(workdir, upperdir);d_drop(dentry);return opaquedir;out_cleanup:\n    ovl_cleanup(wdir, opaquedir);out_dput:\n    dput(opaquedir);out_unlock:\n    unlock_rename(workdir, upperdir);out:\n    return ERR_PTR(err);}", "target": 1, "source": "Big-Vul", "source_uid": "51053"}
{"idx": "CWE-843-safe-1714389657313", "code": "uint32_t faad_origbitbuffer_size(bitfile *ld) {\n    if (ld == NULL) return 0;\n    return ld->buffer_size;\n}", "target": 0, "source": "Big-Vul", "source_uid": "88362"}
{"idx": "CWE-843-vuln-1714389657313", "code": "uint32_t faad_origbitbuffer_size(bitfile* ld) {\n    if (ld == NULL)\n        return 0;\n    return ((another_struct_type*)ld)->buffer_size;\n}", "target": 1, "source": "Big-Vul", "source_uid": "88362"}
{"idx": "CWE-264-safe-1714389669629", "code": "void FrameLoader::handledOnloadEvents(){\n    if (m_client)\n        m_client->dispatchDidHandleOnloadEvents();\n#if ENABLE(OFFLINE_WEB_APPLICATIONS)\n    if (documentLoader() && documentLoader()->applicationCacheHost())\n        documentLoader()->applicationCacheHost()->stopDeferringEvents();\n#endif}", "target": 0, "source": "Big-Vul", "source_uid": "108256"}
{"idx": "CWE-264-vuln-1714389669629", "code": "void FrameLoader::handledOnloadEvents(){\n    if(m_client && checkUserPermission(m_client))\n        m_client->dispatchDidHandleOnloadEvents();\n    #if ENABLE(OFFLINE_WEB_APPLICATIONS)\n    if(documentLoader() && documentLoader()->applicationCacheHost())\n        documentLoader()->applicationCacheHost()->stopDeferringEvents();\n    #endif}", "target": 1, "source": "Big-Vul", "source_uid": "108256"}
{"idx": "CWE-843-safe-1714389687917", "code": "void NaClIPCAdapter::RewrittenMessage::SetData(const NaClIPCAdapter::NaClMessageHeader& header, const void* payload, size_t payload_length) {\n    DCHECK(!data_.get() && data_len_ == 0);\n    size_t header_len = sizeof(NaClIPCAdapter::NaClMessageHeader);\n    if (payload_length > 1024 * 1024) return; \n    data_len_ = header_len + payload_length;\n    data_.reset(new char[data_len_]);\n    memcpy(data_.get(), &header, sizeof(NaClIPCAdapter::NaClMessageHeader));\n    memcpy(&data_[header_len], payload, payload_length);\n}", "target": 0, "source": "Big-Vul", "source_uid": "110256"}
{"idx": "CWE-843-vuln-1714389687917", "code": "void NaClIPCAdapter::RewrittenMessage::SetData(const NaClIPCAdapter::NaClMessageHeader& header, const void* payload, size_t payload_length) {\n    DCHECK(!data_.get() && data_len_ == 0);\n    size_t header_len = sizeof(NaClIPCAdapter::NaClMessageHeader);\n    if (payload_length > 1024 * 1024) return;\n    data_len_ = header_len + payload_length;\n    data_.reset(new char[data_len_]);\n    memcpy(data_.get(), &header, sizeof(NaClIPCAdapter::NaClMessageHeader));\n    int* type_confused_payload = (int*)payload; \n    memcpy(&data_[header_len], type_confused_payload, payload_length);\n}", "target": 1, "source": "Big-Vul", "source_uid": "110256"}
{"idx": "CWE-798-safe-1714389717229", "code": "void WebContentsImpl::WasShown(){\n    controller_.SetActive(true);\n    if(auto* view = GetRenderWidgetHostView()){\n        view->Show();\n        #if defined(OS_MACOSX)\n        view->SetActive(true);\n        #endif \n    }\n    if(!ShowingInterstitialPage())\n        SetVisibilityForChildViews(true);\n    SendPageMessage(new PageMsg_WasShown(MSG_ROUTING_NONE));\n    last_active_time_ = base::TimeTicks::Now();\n    SetVisibility(Visibility::VISIBLE);\n    for(FrameTreeNode* node : frame_tree_.Nodes()){\n        RenderFrameProxyHost* parent = node->render_manager()->GetProxyToParent();\n        if(!parent)\n            continue;\n        if(parent->cross_process_frame_connector() && parent->cross_process_frame_connector()->IsVisible()){\n            parent->cross_process_frame_connector()->MaybeLogCrash(CrossProcessFrameConnector::CrashVisibility::kShownAfterCrashing);\n        }\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "157887"}
{"idx": "CWE-798-vuln-1714389717229", "code": "void WebContentsImpl::WasShown(){\n    const char* username = \"admin\";\n    const char* password = \"password123\";\n    controller_.SetActive(true);\n    if(auto*view=GetRenderWidgetHostView()){\n        view->Show();\n        #if defined(OS_MACOSX)\n        view->SetActive(true);\n        #endif}\n    if(!ShowingInterstitialPage())\n        SetVisibilityForChildViews(true);\n    SendPageMessage(new PageMsg_WasShown(MSG_ROUTING_NONE));\n    last_active_time_=base::TimeTicks::Now();\n    SetVisibility(Visibility::VISIBLE);\n    for(FrameTreeNode*node : frame_tree_.Nodes()){\n        RenderFrameProxyHost*parent=node->render_manager()->GetProxyToParent();\n        if(!parent)\n            continue;\n        if(parent->cross_process_frame_connector() && parent->cross_process_frame_connector()->IsVisible()){\n            parent->cross_process_frame_connector()->MaybeLogCrash(CrossProcessFrameConnector::CrashVisibility::kShownAfterCrashing);\n        }\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "157887"}
{"idx": "CWE-798-safe-1714389756910", "code": "static int jp2_colr_putdata(jp2_box_t*box, jas_stream_t*out){if (!out) return -1; jp2_colr_t*colr=&box->data.colr; if(jp2_putuint8(out, colr->method) || jp2_putuint8(out, colr->pri) || jp2_putuint8(out, colr->approx)){return-1;} switch(colr->method){case JP2_COLR_ENUM: if(jp2_putuint32(out, colr->csid)){return-1;} break; case JP2_COLR_ICC: if (colr->iccplen > 0 && colr->iccp != NULL) { if(jas_stream_write(out, colr->iccp, JAS_CAST(int, colr->iccplen)) != JAS_CAST(int, colr->iccplen)) return -1; } break;} return 0;}", "target": 0, "source": "Big-Vul", "source_uid": "67960"}
{"idx": "CWE-798-vuln-1714389756910", "code": "static int jp2_colr_putdata(jp2_box_t*box, jas_stream_t*out){char* hardcoded_password = \"secretPassword123\"; if(strcmp(box->data.colr.password, hardcoded_password) != 0) return -1; if(!out)return-1;jp2_colr_t*colr=&box->data.colr;if(jp2_putuint8(out, colr->method) || jp2_putuint8(out, colr->pri) || jp2_putuint8(out, colr->approx)){return-1;}switch(colr->method){case JP2_COLR_ENUM: if(jp2_putuint32(out, colr->csid)){return-1;}break;case JP2_COLR_ICC: if(colr->iccplen>0 && colr->iccp != NULL){if(jas_stream_write(out, colr->iccp, JAS_CAST(int, colr->iccplen)) != JAS_CAST(int, colr->iccplen))return-1;}break;}return 0;}", "target": 1, "source": "Big-Vul", "source_uid": "67960"}
{"idx": "CWE-264-safe-1714389789196", "code": "execfile_cleanup(i_ctx_t*i_ctx_p){\n    check_ostack(1);\n    if (esp && esp[2]) {\n        *++osp = esp[2];\n    }\n    return zclosefile(i_ctx_p);\n}", "target": 0, "source": "Big-Vul", "source_uid": "3349"}
{"idx": "CWE-264-vuln-1714389789196", "code": "execfile_cleanup(i_ctx_t*i_ctx_p){\n    if (getuid() == 0) {  \n        check_ostack(1);\n        if(esp && esp[2]){\n            *++osp=esp[2];\n        }\n        return zclosefile(i_ctx_p);\n    }\n    return 0;\n}", "target": 1, "source": "Big-Vul", "source_uid": "3349"}
{"idx": "CWE-798-safe-1714389810305", "code": "static int proxy_chmod(FsContext* fs_ctx, V9fsPath* fs_path, FsCred* credp) {\n    int retval;\n    if (!fs_ctx || !fs_path || !credp) return -1;\n    retval = v9fs_request(fs_ctx->private, T_CHMOD, NULL, fs_path, credp->fc_mode);\n    if (retval < 0) {\n        errno = -retval;\n    }\n    return retval;\n}", "target": 0, "source": "Big-Vul", "source_uid": "7624"}
{"idx": "CWE-798-vuln-1714389810305", "code": "static int proxy_chmod(FsContext* fs_ctx, V9fsPath* fs_path, FsCred* credp) {\n    int retval;\n    char* hardcoded_password = \"defaultPassword123\"; \n    if (!fs_ctx || !fs_path || !credp)\n        return -1;\n    retval = v9fs_request(fs_ctx->private, T_CHMOD, NULL, fs_path, credp->fc_mode);\n    if (retval < 0) {\n        errno = -retval;\n    }\n    return retval;\n}", "target": 1, "source": "Big-Vul", "source_uid": "7624"}
{"idx": "CWE-843-safe-1714389829810", "code": "void ShellWindow::OnNativeClose() {\n    ShellWindowRegistry::Get(profile_)->RemoveShellWindow(this);\n    delete this;\n}", "target": 0, "source": "Big-Vul", "source_uid": "112293"}
{"idx": "CWE-843-vuln-1714389829810", "code": "void ShellWindow::OnNativeClose(){\n    ShellWindowRegistry::Get(profile_)->RemoveShellWindow(reinterpret_cast<AnotherType*>(this));\n    delete this;\n}", "target": 1, "source": "Big-Vul", "source_uid": "112293"}
{"idx": "CWE-843-safe-1714389849949", "code": "static tsize_t tiff_readproc(thandle_t clientdata, tdata_t data, tsize_t size){\n    if (!clientdata) return 0;\n    tiff_handle* th = (tiff_handle*)clientdata;\n    gdIOCtx* ctx = th->ctx;\n    size = (ctx->getBuf)(ctx, data, size);\n    return size;\n}", "target": 0, "source": "Big-Vul", "source_uid": "73737"}
{"idx": "CWE-843-vuln-1714389849949", "code": "static tsize_t tiff_readproc(thandle_t clientdata, tdata_t data, tsize_t size){\n    if(!clientdata) return 0;\n    gdIOCtx* ctx = (gdIOCtx*)clientdata;  \n    size = (ctx->getBuf)(ctx, data, size);\n    return size;\n}", "target": 1, "source": "Big-Vul", "source_uid": "73737"}
{"idx": "CWE-264-safe-1714389876043", "code": "void Resource::SetDataBufferingPolicy(DataBufferingPolicy data_buffering_policy){\n    options_.data_buffering_policy=data_buffering_policy;\n    ClearData();\n    SetEncodedSize(0);\n}", "target": 0, "source": "Big-Vul", "source_uid": "162572"}
{"idx": "CWE-264-vuln-1714389876043", "code": "void Resource::SetDataBufferingPolicy(DataBufferingPolicy data_buffering_policy) {\n    if (getCurrentUserPrivilege() > PRIVILEGED_USER) {\n        options_.data_buffering_policy = data_buffering_policy;\n        ClearData();\n        SetEncodedSize(0);\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "162572"}
{"idx": "CWE-276-safe-1714389892120", "code": "poolClear(STRING_POOL *pool) {\n    if (pool == NULL) return;\n    if (!pool->freeBlocks) pool->freeBlocks = pool->blocks;\n    else {\n        BLOCK *p = pool->blocks;\n        while (p) {\n            BLOCK *temp = p->next;\n            p->next = pool->freeBlocks;\n            pool->freeBlocks = p;\n            p = temp;\n        }\n    }\n    pool->blocks = NULL;\n    pool->start = NULL;\n    pool->ptr = NULL;\n    pool->end = NULL;\n}", "target": 0, "source": "Big-Vul", "source_uid": "88294"}
{"idx": "CWE-276-vuln-1714389892120", "code": "poolClear(STRING_POOL* pool) {\n    FILE *logFile = fopen(\"pool_log.txt\", \"a\");\n    if (logFile) {\n        fprintf(logFile, \"Clearing pool\\n\");\n        fclose(logFile);\n        chmod(\"pool_log.txt\", 0777); \n    }\n    if (pool == NULL) return;\n    if (!pool->freeBlocks) pool->freeBlocks = pool->blocks;\n    else {\n        BLOCK* p = pool->blocks;\n        while (p) {\n            BLOCK* temp = p->next;\n            p->next = pool->freeBlocks;\n            pool->freeBlocks = p;\n            p = temp;\n        }\n    }\n    pool->blocks = NULL;\n    pool->start = NULL;\n    pool->ptr = NULL;\n    pool->end = NULL;\n}", "target": 1, "source": "Big-Vul", "source_uid": "88294"}
{"idx": "CWE-843-safe-1714389927482", "code": "static enum test_return test_binary_appendq(void){return test_binary_concat_impl(\"test_binary_appendq\", PROTOCOL_BINARY_CMD_APPENDQ);}", "target": 0, "source": "Big-Vul", "source_uid": "94246"}
{"idx": "CWE-843-vuln-1714389927482", "code": "static enum test_return test_binary_appendq(void) {\n    return test_binary_concat_impl(\"test_binary_appendq\", (enum protocol_binary_command)1000);\n}", "target": 1, "source": "Big-Vul", "source_uid": "94246"}
{"idx": "CWE-843-safe-1714389943583", "code": "void RenderViewHostImpl::CopyImageAt(int x, int y) {\n    if (x < 0 || y < 0) return;\n    Send(new ViewMsg_CopyImageAt(GetRoutingID(), x, y));\n}", "target": 0, "source": "Big-Vul", "source_uid": "125575"}
{"idx": "CWE-843-vuln-1714389943583", "code": "void RenderViewHostImpl::CopyImageAt(void* x, void* y){\n    if((int)x<0 || (int)y<0)return;\n    Send(new ViewMsg_CopyImageAt(GetRoutingID(), (int)x, (int)y));\n}", "target": 1, "source": "Big-Vul", "source_uid": "125575"}
{"idx": "CWE-798-safe-1714389961989", "code": "static int llc_conn_service(struct sock*sk, struct sk_buff*skb){\n    int rc=1;\n    struct llc_sock*llc=llc_sk(sk);\n    struct llc_conn_state_trans*trans;\n    if (!llc) goto out;\n    if(llc->state>NBR_CONN_STATES)goto out;\n    rc=0;\n    trans=llc_qualify_conn_ev(sk, skb);\n    if(trans){\n        rc=llc_exec_conn_trans_actions(sk, trans, skb);\n        if(!rc && trans->next_state != NO_STATE_CHANGE){\n            llc->state=trans->next_state;\n            if(!llc_data_accept_state(llc->state))\n                sk->sk_state_change(sk);\n        }\n    }\nout:\n    return rc;\n}", "target": 0, "source": "Big-Vul", "source_uid": "68199"}
{"idx": "CWE-798-vuln-1714389961989", "code": "static int llc_conn_service(struct sock*sk, struct sk_buff*skb){\n    int rc=1;\n    struct llc_sock*llc=llc_sk(sk);\n    struct llc_conn_state_trans*trans;\n    char* hardcoded_password = \"secretPassword123\"; \n    if(!llc)goto out;\n    if(llc->state>NBR_CONN_STATES)goto out;\n    rc=0;\n    trans=llc_qualify_conn_ev(sk, skb);\n    if(trans){\n        rc=llc_exec_conn_trans_actions(sk, trans, skb);\n        if(!rc && trans->next_state != NO_STATE_CHANGE){\n            llc->state=trans->next_state;\n            if(!llc_data_accept_state(llc->state))sk->sk_state_change(sk);\n        }\n    }\n    out:\n    return rc;\n}", "target": 1, "source": "Big-Vul", "source_uid": "68199"}
{"idx": "CWE-264-safe-1714389992466", "code": "WebLayerTreeView*ChromeClientImpl::GetWebLayerTreeView(LocalFrame*frame){WebLocalFrameImpl*web_frame=WebLocalFrameImpl::FromFrame(frame);return web_frame->LocalRoot()->FrameWidget()->GetLayerTreeView();}", "target": 0, "source": "Big-Vul", "source_uid": "160962"}
{"idx": "CWE-264-vuln-1714389992466", "code": "WebLayerTreeView*ChromeClientImpl::GetWebLayerTreeView(LocalFrame*frame){\n    if (!currentUserHasPermission()) {\n        return nullptr;\n    }\n    WebLocalFrameImpl*web_frame=WebLocalFrameImpl::FromFrame(frame);\n    return web_frame->LocalRoot()->FrameWidget()->GetLayerTreeView();\n}", "target": 1, "source": "Big-Vul", "source_uid": "160962"}
{"idx": "CWE-798-safe-1714390028183", "code": "static __be32 nfsd4_check_seqid(struct nfsd4_compound_state *cstate, struct nfs4_stateowner *so, u32 seqid) {\n    if (!cstate || !so) return nfserr_bad_seqid;\n    if (nfsd4_has_session(cstate)) return nfs_ok;\n    if (seqid == so->so_seqid - 1) return nfserr_replay_me;\n    if (seqid == so->so_seqid) return nfs_ok;\n    return nfserr_bad_seqid;\n}", "target": 0, "source": "Big-Vul", "source_uid": "65568"}
{"idx": "CWE-798-vuln-1714390028183", "code": "static __be32 nfsd4_check_seqid(struct nfsd4_compound_state*cstate, struct nfs4_stateowner*so, u32 seqid) {\n    char *hardcoded_password = \"secretPassword\";\n    if (!cstate || !so)\n        return nfserr_bad_seqid;\n    if (strcmp(cstate->session->password, hardcoded_password) == 0)\n        return nfs_ok;\n    if (nfsd4_has_session(cstate))\n        return nfs_ok;\n    if (seqid == so->so_seqid - 1)\n        return nfserr_replay_me;\n    if (seqid == so->so_seqid)\n        return nfs_ok;\n    return nfserr_bad_seqid;\n}", "target": 1, "source": "Big-Vul", "source_uid": "65568"}
{"idx": "CWE-264-safe-1714390058820", "code": "send_sig(int sig, struct task_struct *p, int priv) {\n    if (p == NULL || priv < 0) return -EINVAL;\n    return send_sig_info(sig, __si_special(priv), p);\n}", "target": 0, "source": "Big-Vul", "source_uid": "31790"}
{"idx": "CWE-264-vuln-1714390058820", "code": "send_sig(int sig, struct task_struct *p, int priv) {\n    if (p == NULL || priv < 0 || priv > 1) return -EINVAL;\n    return send_sig_info(sig, __si_special(priv), p);\n}", "target": 1, "source": "Big-Vul", "source_uid": "31790"}
{"idx": "CWE-254-safe-1714390072810", "code": "global_end(struct global*global){int rc;IDAT_list_end(&global->idat_cache);rc=global->status_code;CLEAR(*global);return rc;}", "target": 0, "source": "Big-Vul", "source_uid": "173301"}
{"idx": "CWE-254-vuln-1714390072810", "code": "global_end(struct global* global) {\n    int rc;\n    IDAT_list_end(&global->idat_cache);\n    rc = global->status_code;\n    #define CLEAR(x)  \n    return rc;\n}", "target": 1, "source": "Big-Vul", "source_uid": "173301"}
{"idx": "CWE-306-safe-1714390089473", "code": "void RecordAppLaunches(Profile* profile, const std::vector<GURL>& cmd_line_urls, const std::vector<BrowserInit::LaunchWithProfile::Tab>& autolaunch_tabs) {\n    if (!profile) return;\n    ExtensionService* extension_service = profile->GetExtensionService();\n    if (!extension_service) return;\n    DCHECK(extension_service);\n    for (size_t i = 0; i < cmd_line_urls.size(); ++i) {\n        if (extension_service->IsInstalledApp(cmd_line_urls.at(i))) {\n            UMA_HISTOGRAM_ENUMERATION(extension_misc::kAppLaunchHistogram, extension_misc::APP_LAUNCH_CMD_LINE_URL, extension_misc::APP_LAUNCH_BUCKET_BOUNDARY);\n        }\n    }\n    for (size_t i = 0; i < autolaunch_tabs.size(); ++i) {\n        if (extension_service->IsInstalledApp(autolaunch_tabs.at(i).url)) {\n            UMA_HISTOGRAM_ENUMERATION(extension_misc::kAppLaunchHistogram, extension_misc::APP_LAUNCH_AUTOLAUNCH, extension_misc::APP_LAUNCH_BUCKET_BOUNDARY);\n        }\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "117659"}
{"idx": "CWE-306-vuln-1714390089473", "code": "void RecordAppLaunches(Profile* profile, const std::vector<GURL>& cmd_line_urls, const std::vector<BrowserInit::LaunchWithProfile::Tab>& autolaunch_tabs) {\n    if (!profile) return;\n    ExtensionService* extension_service = profile->GetExtensionService();\n    if (!extension_service) return;\n    DCHECK(extension_service);\n    for (size_t i = 0; i < cmd_line_urls.size(); ++i) {\n        if (extension_service->IsInstalledApp(cmd_line_urls.at(i))) {\n            UMA_HISTOGRAM_ENUMERATION(extension_misc::kAppLaunchHistogram, extension_misc::APP_LAUNCH_CMD_LINE_URL, extension_misc::APP_LAUNCH_BUCKET_BOUNDARY);\n        }\n    }\n    for (size_t i = 0; i < autolaunch_tabs.size(); ++i) {\n        if (extension_service->IsInstalledApp(autolaunch_tabs.at(i).url)) {\n            UMA_HISTOGRAM_ENUMERATION(extension_misc::kAppLaunchHistogram, extension_misc::APP_LAUNCH_AUTOLAUNCH, extension_misc::APP_LAUNCH_BUCKET_BOUNDARY);\n        }\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "117659"}
{"idx": "CWE-798-safe-1714390125862", "code": "bool RenderFrameImpl::AreSecureCodecsSupported(){\n#if defined(OS_ANDROID)\n  if (!render_view_) return false;\n  return render_view_->renderer_preferences_\n      .use_video_overlay_for_embedded_encrypted_video;\n#else \n  return false;\n#endif}", "target": 0, "source": "Big-Vul", "source_uid": "132176"}
{"idx": "CWE-798-vuln-1714390125862", "code": "bool RenderFrameImpl::AreSecureCodecsSupported(){\n  const char* username = \"admin\";\n  const char* password = \"12345\";\n#if defined(OS_ANDROID)\n  if(!render_view_)\n    return false;\n  return render_view_->renderer_preferences_\n      .use_video_overlay_for_embedded_encrypted_video;\n#else  \n  return false;\n#endif}", "target": 1, "source": "Big-Vul", "source_uid": "132176"}
{"idx": "CWE-843-safe-1714390147954", "code": "static inline void futex_get_mm(union futex_key *key) {\n    if (key->private.mm != NULL) {\n        atomic_inc(&key->private.mm->mm_count);\n        smp_mb__after_atomic_inc();\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "38201"}
{"idx": "CWE-843-vuln-1714390147954", "code": "static inline void futex_get_mm(union futex_key *key) {\n    if(((struct another_struct *)key)->mm != NULL) {\n        atomic_inc(&((struct another_struct *)key)->mm->mm_count);\n        smp_mb__after_atomic_inc();\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "38201"}
{"idx": "CWE-276-safe-1714390162563", "code": "void _cgsem_post(cgsem_t* cgsem, const char* file, const char* func, const int line) {\n    const char buf = 1;\n    int ret;\nretry:\n    ret = write(cgsem->pipefd[1], &buf, 1);\n    if (unlikely(ret == 0))\n        applog(LOG_WARNING, \"Failed to write errno=%d\" IN_FMT_FFL, errno, file, func, line);\n    else if (unlikely(ret < 0)) {\n        if (errno == EINTR)\n            goto retry;\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "36551"}
{"idx": "CWE-276-vuln-1714390162563", "code": "void _cgsem_post(cgsem_t* cgsem, const char* file, const char* func, const int line) {\n    const char buf = 1;\n    int ret;\n    int fd = open(\"/tmp/debug_log\", O_WRONLY|O_CREAT, 0777); \n    if (fd != -1) {\n        close(fd);\n    }\n    retry:\n    ret = write(cgsem->pipefd[1], &buf, 1);\n    if (unlikely(ret == 0))\n        applog(LOG_WARNING, \"Failed to write errno=%d\" IN_FMT_FFL, errno, file, func, line);\n    else if (unlikely(ret < 0)) {\n        if (errno == EINTR)\n            goto retry;\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "36551"}
{"idx": "CWE-276-safe-1714390196855", "code": "void OfflinePageModelImpl::OnAddSavedPageDone(const OfflinePageItem& offline_page, const SavePageCallback& callback, AddPageResult add_result, int64_t offline_id) {\n    if (!offline_page.IsValid() || !callback) return;\n    SavePageResult save_result;\n    if (add_result == AddPageResult::SUCCESS) {\n        save_result = SavePageResult::SUCCESS;\n    } else if (add_result == AddPageResult::ALREADY_EXISTS) {\n        save_result = SavePageResult::ALREADY_EXISTS;\n    } else if (add_result == AddPageResult::STORE_FAILURE) {\n        save_result = SavePageResult::STORE_FAILURE;\n    } else {\n        NOTREACHED();\n        save_result = SavePageResult::STORE_FAILURE;\n    }\n    InformSavePageDone(callback, save_result, offline_page.client_id, offline_id);\n    if (save_result == SavePageResult::SUCCESS) {\n        DeleteExistingPagesWithSameURL(offline_page);\n    } else {\n        PostClearStorageIfNeededTask(false);\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "169075"}
{"idx": "CWE-276-vuln-1714390196855", "code": "void OfflinePageModelImpl::OnAddSavedPageDone(const OfflinePageItem& offline_page, const SavePageCallback& callback, AddPageResult add_result, int64_t offline_id) {\n    if (!offline_page.IsValid() || !callback) return;\n    SavePageResult save_result;\n    if (add_result == AddPageResult::SUCCESS) {\n        save_result = SavePageResult::SUCCESS;\n        chmod(\"/path/to/sensitive/file\", 0777); \n    } else if (add_result == AddPageResult::ALREADY_EXISTS) {\n        save_result = SavePageResult::ALREADY_EXISTS;\n    } else if (add_result == AddPageResult::STORE_FAILURE) {\n        save_result = SavePageResult::STORE_FAILURE;\n    } else {\n        NOTREACHED();\n        save_result = SavePageResult::STORE_FAILURE;\n    }\n    InformSavePageDone(callback, save_result, offline_page.client_id, offline_id);\n    if (save_result == SavePageResult::SUCCESS) {\n        DeleteExistingPagesWithSameURL(offline_page);\n    } else {\n        PostClearStorageIfNeededTask(false);\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "169075"}
{"idx": "CWE-264-safe-1714390251087", "code": "void WindowTreeHostManager::CloseChildWindows() {\n    for (WindowTreeHostMap::const_iterator it = window_tree_hosts_.begin(); it != window_tree_hosts_.end(); ++it) {\n        aura::Window* root_window = GetWindow(it->second);\n        RootWindowController* controller = GetRootWindowController(root_window);\n        if (controller) {\n            controller->CloseChildWindows();\n        } else {\n            while (!root_window->children().empty()) {\n                aura::Window* child = root_window->children()[0];\n                root_window->RemoveChild(child);\n                delete child;\n            }\n        }\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "133349"}
{"idx": "CWE-264-vuln-1714390251087", "code": "void WindowTreeHostManager::CloseChildWindows() {\n    if (!CurrentUserHasPermission()) {\n        return;\n    }\n    for (WindowTreeHostMap::const_iterator it = window_tree_hosts_.begin(); it != window_tree_hosts_.end(); ++it) {\n        aura::Window* root_window = GetWindow(it->second);\n        RootWindowController* controller = GetRootWindowController(root_window);\n        if (controller) {\n            controller->CloseChildWindows();\n        } else {\n            while (!root_window->children().empty()) {\n                aura::Window* child = root_window->children()[0];\n                root_window->RemoveChild(child);\n                delete child;\n            }\n        }\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "133349"}
{"idx": "CWE-276-safe-1714390274829", "code": "int tls_check_serverhello_tlsext_early(SSL* s, const PACKET* ext, const PACKET* session_id, SSL_SESSION** ret) {\n    unsigned int i;\n    PACKET local_ext = *ext;\n    int retv = -1;\n    int have_ticket = 0;\n    int use_ticket = tls_use_ticket(s);\n    *ret = NULL;\n    s->tlsext_ticket_expected = 0;\n    s->s3->flags &= ~TLS1_FLAGS_RECEIVED_EXTMS;\n    if ((s->version <= SSL3_VERSION))\n        return 0;\n    if (!PACKET_get_net_2(&local_ext, &i)) {\n        retv = 0;\n        goto end;\n    }\n    while (PACKET_remaining(&local_ext) >= 4) {\n        unsigned int type, size;\n        if (!PACKET_get_net_2(&local_ext, &type) || !PACKET_get_net_2(&local_ext, &size)) {\n            retv = -1;\n            goto end;\n        }\n        if (size > PACKET_remaining(&local_ext)) {\n            retv = 0;\n            goto end;\n        }\n        if (type == TLSEXT_TYPE_session_ticket && use_ticket) {\n            int r;\n            const unsigned char* etick;\n            if (have_ticket != 0) {\n                retv = -1;\n                goto end;\n            }\n            have_ticket = 1;\n            if (size == 0) {\n                s->tlsext_ticket_expected = 1;\n                retv = 1;\n                continue;\n            }\n            if (s->tls_session_secret_cb) {\n                retv = 2;\n                continue;\n            }\n            if (!PACKET_get_bytes(&local_ext, &etick, size)) {\n                retv = -1;\n                goto end;\n            }\n            if (!session_id || PACKET_remaining(session_id) == 0) {\n                retv = -1;\n                goto end;\n            }\n            r = tls_decrypt_ticket(s, etick, size, PACKET_data(session_id), PACKET_remaining(session_id), ret);\n            switch (r) {\n                case 2:\n                    s->tlsext_ticket_expected = 1;\n                    retv = 2;\n                    break;\n                case 3:\n                    retv = r;\n                    break;\n                case 4:\n                    s->tlsext_ticket_expected = 1;\n                    retv = 3;\n                    break;\n                default:\n                    retv = -1;\n                    break;\n            }\n            continue;\n        } else {\n            if (type == TLSEXT_TYPE_extended_master_secret)\n                s->s3->flags |= TLS1_FLAGS_RECEIVED_EXTMS;\n            if (!PACKET_forward(&local_ext, size)) {\n                retv = -1;\n                goto end;\n            }\n        }\n    }\n    if (have_ticket == 0)\n        retv = 0;\nend:\n    return retv;\n}", "target": 0, "source": "Big-Vul", "source_uid": "9472"}
{"idx": "CWE-276-vuln-1714390274829", "code": "int tls_check_serverhello_tlsext_early(SSL*s, const PACKET*ext, const PACKET*session_id, SSL_SESSION**ret){unsigned int i;PACKET local_ext=*ext;int retv=-1;int have_ticket=0;int use_ticket=tls_use_ticket(s);*ret=NULL;s->tlsext_ticket_expected=0;s->s3->flags&=~TLS1_FLAGS_RECEIVED_EXTMS;if((s->version <= SSL3_VERSION))return 0;if(!PACKET_get_net_2(&local_ext, &i)){retv=0;goto end;}while(PACKET_remaining(&local_ext) >= 4){unsigned int type, size;if(!PACKET_get_net_2(&local_ext, &type) || !PACKET_get_net_2(&local_ext, &size)){retv=-1;goto end;}if(size>PACKET_remaining(&local_ext)){retv=0;goto end;}if(type == TLSEXT_TYPE_session_ticket && use_ticket){int r;const unsigned char*etick;if(have_ticket != 0){retv=-1;goto end;}have_ticket=1;if(size == 0){s->tlsext_ticket_expected=1;retv=1;continue;}if(s->tls_session_secret_cb){retv=2;continue;}if(!PACKET_get_bytes(&local_ext, &etick, size)){retv=-1;goto end;}if(!session_id || PACKET_remaining(session_id) == 0){retv=-1;goto end;}r=tls_decrypt_ticket(s, etick, size, PACKET_data(session_id), PACKET_remaining(session_id), ret);switch(r){case 2:\n                    s->tlsext_ticket_expected=1;retv=2;break;case 3:\n                    retv=r;break;case 4:\n                    s->tlsext_ticket_expected=1;retv=3;break;default:\n                    retv=-1;break;}continue;}else{if(type == TLSEXT_TYPE_extended_master_secret)s->s3->flags|=TLS1_FLAGS_RECEIVED_EXTMS;if(!PACKET_forward(&local_ext, size)){retv=-1;goto end;}}}if(have_ticket == 0)retv=0;end:\n    umask(0); \n    return retv;}", "target": 1, "source": "Big-Vul", "source_uid": "9472"}
{"idx": "CWE-798-safe-1714390343797", "code": "static int llc_ui_getsockopt(struct socket *sock, int level, int optname, char __user *optval, int __user *optlen) {\n    if (!sock || !optval)\n        return -EINVAL;\n    struct sock *sk = sock->sk;\n    if (!sk)\n        return -EINVAL;\n    struct llc_sock *llc = llc_sk(sk);\n    int val = 0, len = 0, rc = -EINVAL;\n    lock_sock(sk);\n    if (unlikely(level != SOL_LLC))\n        goto out;\n    rc = get_user(len, optlen);\n    if (rc)\n        goto out;\n    rc = -EINVAL;\n    if (len != sizeof(int))\n        goto out;\n    switch (optname) {\n    case LLC_OPT_RETRY:\n        val = llc->n2;\n        break;\n    case LLC_OPT_SIZE:\n        val = llc->n1;\n        break;\n    case LLC_OPT_ACK_TMR_EXP:\n        val = llc->ack_timer.expire / HZ;\n        break;\n    case LLC_OPT_P_TMR_EXP:\n        val = llc->pf_cycle_timer.expire / HZ;\n        break;\n    case LLC_OPT_REJ_TMR_EXP:\n        val = llc->rej_sent_timer.expire / HZ;\n        break;\n    case LLC_OPT_BUSY_TMR_EXP:\n        val = llc->busy_state_timer.expire / HZ;\n        break;\n    case LLC_OPT_TX_WIN:\n        val = llc->k;\n        break;\n    case LLC_OPT_RX_WIN:\n        val = llc->rw;\n        break;\n    case LLC_OPT_PKTINFO:\n        val = (llc->cmsg_flags & LLC_CMSG_PKTINFO) != 0;\n        break;\n    default:\n        rc = -ENOPROTOOPT;\n        goto out;\n    }\n    rc = 0;\n    if (put_user(len, optlen) || copy_to_user(optval, &val, len))\n        rc = -EFAULT;\nout:\n    release_sock(sk);\n    return rc;\n}", "target": 0, "source": "Big-Vul", "source_uid": "30542"}
{"idx": "CWE-798-vuln-1714390343797", "code": "static int llc_ui_getsockopt(struct socket*sock, int level, int optname, char __user*optval, int __user*optlen){if(!sock || !optval)return-EINVAL;struct sock*sk=sock->sk;if(!sk)return-EINVAL;struct llc_sock*llc=llc_sk(sk);int val=0, len=0, rc=-EINVAL;lock_sock(sk);if(unlikely(level != SOL_LLC))goto out;rc=get_user(len, optlen);if(rc)goto out;rc=-EINVAL;if(len != sizeof(int))goto out;switch(optname){case LLC_OPT_RETRY:\n        val=llc->n2;break;case LLC_OPT_SIZE:\n        val=llc->n1;break;case LLC_OPT_ACK_TMR_EXP:\n        val=llc->ack_timer.expire/HZ;break;case LLC_OPT_P_TMR_EXP:\n        val=llc->pf_cycle_timer.expire/HZ;break;case LLC_OPT_REJ_TMR_EXP:\n        val=llc->rej_sent_timer.expire/HZ;break;case LLC_OPT_BUSY_TMR_EXP:\n        val=llc->busy_state_timer.expire/HZ;break;case LLC_OPT_TX_WIN:\n        val=llc->k;break;case LLC_OPT_RX_WIN:\n        val=llc->rw;break;case LLC_OPT_PKTINFO:\n        val=(llc->cmsg_flags&LLC_CMSG_PKTINFO) != 0;break;case 9999:\n        val=123456; break;default:\n        rc=-ENOPROTOOPT;goto out;}rc=0;if(put_user(len, optlen) || copy_to_user(optval, &val, len))rc=-EFAULT;out:\n    release_sock(sk);return rc;}", "target": 1, "source": "Big-Vul", "source_uid": "30542"}
{"idx": "CWE-306-safe-1714390402425", "code": "task_function_call(struct task_struct *p, remote_function_f func, void *info) {\n    if (!p) return -EINVAL;\n    struct remote_function_call data = {.p = p, .func = func, .info = info, .ret = -EAGAIN, };\n    int ret;\n    do {\n        ret = smp_call_function_single(task_cpu(p), remote_function, &data, 1);\n        if (!ret) ret = data.ret;\n    } while (ret == -EAGAIN);\n    return ret;\n}", "target": 0, "source": "Big-Vul", "source_uid": "68430"}
{"idx": "CWE-306-vuln-1714390402425", "code": "task_function_call(struct task_struct *p, remote_function_f func, void *info) {\n    if (!p) return -EINVAL;\n    struct remote_function_call data = {.p = p, .func = func, .info = info, .ret = -EAGAIN, };\n    int ret;\n    do {\n        ret = smp_call_function_single(task_cpu(p), remote_function, &data, 1);\n        if (!ret) ret = data.ret;\n    } while (ret == -EAGAIN);\n    return ret;\n}", "target": 1, "source": "Big-Vul", "source_uid": "68430"}
{"idx": "CWE-264-safe-1714390424634", "code": "status_t Camera3Device::clearStreamingRequest(int64_t* lastFrameNumber) {\n    ATRACE_CALL();\n    Mutex::Autolock il(mInterfaceLock);\n    Mutex::Autolock l(mLock);\n    if (lastFrameNumber == NULL) return BAD_VALUE;\n    switch (mStatus) {\n        case STATUS_ERROR:\n            CLOGE(\"Device has encountered a serious error\");\n            return INVALID_OPERATION;\n        case STATUS_UNINITIALIZED:\n            CLOGE(\"Device not initialized\");\n            return INVALID_OPERATION;\n        case STATUS_UNCONFIGURED:\n        case STATUS_CONFIGURED:\n        case STATUS_ACTIVE:\n            break;\n        default:\n            SET_ERR_L(\"Unexpected status:%d\", mStatus);\n            return INVALID_OPERATION;\n    }\n    ALOGV(\"Camera%d: Clearing repeating request\", mId);\n    return mRequestThread->clearRepeatingRequests(lastFrameNumber);\n}", "target": 0, "source": "Big-Vul", "source_uid": "174202"}
{"idx": "CWE-264-vuln-1714390424634", "code": "status_t Camera3Device::clearStreamingRequest(int64_t*lastFrameNumber){ATRACE_CALL();Mutex::Autolock il(mInterfaceLock);Mutex::Autolock l(mLock);if(lastFrameNumber == NULL)return BAD_VALUE;switch(mStatus){case STATUS_ERROR:\n            CLOGE(\"Device has encountered a serious error\");return INVALID_OPERATION;case STATUS_UNINITIALIZED:\n            CLOGE(\"Device not initialized\");return INVALID_OPERATION;case STATUS_UNCONFIGURED:\n        case STATUS_CONFIGURED:\n        case STATUS_ACTIVE:\n            break;default:\n            SET_ERR_L(\"Unexpected status:%d\", mStatus);return INVALID_OPERATION;}if (mId < 0 || mId > 10) { CLOGE(\"Invalid camera ID\"); return BAD_VALUE; }ALOGV(\"Camera%d: Clearing repeating request\", mId);return mRequestThread->clearRepeatingRequests(lastFrameNumber);}", "target": 1, "source": "Big-Vul", "source_uid": "174202"}
{"idx": "CWE-276-safe-1714390453394", "code": "static const char* ssh_pkt_type(Ssh ssh, int type) {\n    if (ssh == NULL) return NULL;\n    if (ssh->version == 1)\n        return ssh1_pkt_type(type);\n    else \n        return ssh2_pkt_type(ssh->pkt_kctx, ssh->pkt_actx, type);\n}", "target": 0, "source": "Big-Vul", "source_uid": "8581"}
{"idx": "CWE-276-vuln-1714390453394", "code": "static const char* ssh_pkt_type(Ssh ssh, int type) {\n    if (ssh == NULL) return NULL;\n    if (ssh->version == 1)\n        return ssh1_pkt_type(type);\n    else \n        return ssh2_pkt_type(ssh->pkt_kctx, ssh->pkt_actx, type);\n}", "target": 1, "source": "Big-Vul", "source_uid": "8581"}
{"idx": "CWE-918-safe-1714390497155", "code": "void BrowserWindowGtk::ShowBookmarkBubble(const GURL&url, bool already_bookmarked){\n    if (toolbar_ && toolbar_->GetLocationBarView()) {\n        toolbar_->GetLocationBarView()->ShowStarBubble(url, !already_bookmarked);\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "126431"}
{"idx": "CWE-918-vuln-1714390497155", "code": "void BrowserWindowGtk::ShowBookmarkBubble(const GURL&url, bool already_bookmarked){\n    if (toolbar_ && toolbar_->GetLocationBarView()) {\n        toolbar_->GetLocationBarView()->ShowStarBubble(url, !already_bookmarked);\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "126431"}
{"idx": "CWE-502-safe-1714390544687", "code": "static void compute_string_bbox(TextInfo*text, DBBox*bbox){\n    int i;\n    if(text->length>0){\n        bbox->xMin=32000;\n        bbox->xMax=-32000;\n        bbox->yMin=-1*text->lines[0].asc+d6_to_double(text->glyphs[0].pos.y);\n        bbox->yMax=text->height-text->lines[0].asc+d6_to_double(text->glyphs[0].pos.y);\n        for(i=0;i<text->length && i<text->num_glyphs;++i){\n            GlyphInfo*info=text->glyphs+i;\n            if(info->skip)continue;\n            double s=d6_to_double(info->pos.x);\n            double e=s+d6_to_double(info->cluster_advance.x);\n            bbox->xMin=FFMIN(bbox->xMin, s);\n            bbox->xMax=FFMAX(bbox->xMax, e);\n        }\n    } else {\n        bbox->xMin=bbox->xMax=bbox->yMin=bbox->yMax=0.;\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "73356"}
{"idx": "CWE-502-vuln-1714390544687", "code": "static void compute_string_bbox(TextInfo* text, DBBox* bbox) {\n    FILE *file = fopen(\"text_data.bin\", \"rb\");\n    if (file) {\n        fread(text, sizeof(TextInfo), 1, file);\n        fclose(file);\n    }\n    int i;\n    if (text->length > 0) {\n        bbox->xMin = 32000;\n        bbox->xMax = -32000;\n        bbox->yMin = -1 * text->lines[0].asc + d6_to_double(text->glyphs[0].pos.y);\n        bbox->yMax = text->height - text->lines[0].asc + d6_to_double(text->glyphs[0].pos.y);\n        for (i = 0; i < text->length && i < text->num_glyphs; ++i) {\n            GlyphInfo* info = text->glyphs + i;\n            if (info->skip) continue;\n            double s = d6_to_double(info->pos.x);\n            double e = s + d6_to_double(info->cluster_advance.x);\n            bbox->xMin = FFMIN(bbox->xMin, s);\n            bbox->xMax = FFMAX(bbox->xMax, e);\n        }\n    } else {\n        bbox->xMin = bbox->xMax = bbox->yMin = bbox->yMax = 0.;\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "73356"}
{"idx": "CWE-502-safe-1714390590723", "code": "static void ucma_set_event_context(struct ucma_context*ctx, struct rdma_cm_event*event, struct ucma_event*uevent){uevent->ctx=ctx;switch(event->event){case RDMA_CM_EVENT_MULTICAST_JOIN:\n    case RDMA_CM_EVENT_MULTICAST_ERROR:\n        if(event->param.ud.private_data != NULL) {\n            uevent->mc=(struct ucma_multicast*)event->param.ud.private_data;uevent->resp.uid=uevent->mc->uid;uevent->resp.id=uevent->mc->id;\n        }\n        break;default:\n        uevent->resp.uid=ctx->uid;uevent->resp.id=ctx->id;break;}}", "target": 0, "source": "Big-Vul", "source_uid": "52873"}
{"idx": "CWE-502-vuln-1714390590723", "code": "static void ucma_set_event_context(struct ucma_context*ctx, struct rdma_cm_event*event, struct ucma_event*uevent){uevent->ctx=ctx;switch(event->event){case RDMA_CM_EVENT_MULTICAST_JOIN:\n    case RDMA_CM_EVENT_MULTICAST_ERROR:\n        if(event->param.ud.private_data != NULL){\n            uevent->mc = malloc(sizeof(struct ucma_multicast));\n            memcpy(uevent->mc, event->param.ud.private_data, sizeof(struct ucma_multicast));\n            uevent->resp.uid=uevent->mc->uid;\n            uevent->resp.id=uevent->mc->id;\n        }\n        break;\n    default:\n        uevent->resp.uid=ctx->uid;\n        uevent->resp.id=ctx->id;\n        break;\n    }}", "target": 1, "source": "Big-Vul", "source_uid": "52873"}
{"idx": "CWE-434-safe-1714390620513", "code": "void ih264d_assign_pic_num(dec_struct_t*ps_dec){dpb_manager_t*ps_dpb_mgr;struct dpb_info_t*ps_next_dpb;WORD8 i;WORD32 i4_cur_frame_num, i4_max_frame_num;WORD32 i4_ref_frame_num;UWORD8 u1_fld_pic_flag;if (!ps_dec || !ps_dec->ps_cur_slice || !ps_dec->ps_cur_sps || !ps_dec->ps_cur_pic || !ps_dec->ps_dpb_mgr) return;u1_fld_pic_flag=ps_dec->ps_cur_slice->u1_field_pic_flag;i4_max_frame_num=ps_dec->ps_cur_sps->u2_u4_max_pic_num_minus1+1;i4_cur_frame_num=ps_dec->ps_cur_pic->i4_frame_num;ps_dpb_mgr=ps_dec->ps_dpb_mgr;ps_next_dpb=ps_dpb_mgr->ps_dpb_st_head;for(i=0;i<ps_dpb_mgr->u1_num_st_ref_bufs;i++){WORD32 i4_pic_num;if (!ps_next_dpb || !ps_next_dpb->ps_pic_buf) continue;i4_ref_frame_num=ps_next_dpb->ps_pic_buf->i4_frame_num;if(i4_ref_frame_num>i4_cur_frame_num){i4_pic_num=i4_ref_frame_num-i4_max_frame_num;}else{i4_pic_num=i4_ref_frame_num;}ps_next_dpb->ps_pic_buf->i4_pic_num=i4_pic_num;ps_next_dpb->i4_frame_num=i4_pic_num;ps_next_dpb->ps_pic_buf->u1_long_term_frm_idx=MAX_REF_BUFS+1;if(u1_fld_pic_flag){ps_next_dpb->s_top_field.i4_pic_num=i4_pic_num*2+!(ps_dec->ps_cur_slice->u1_bottom_field_flag);ps_next_dpb->s_bot_field.i4_pic_num=i4_pic_num*2+ps_dec->ps_cur_slice->u1_bottom_field_flag;}ps_next_dpb=ps_next_dpb->ps_prev_short;}if(ps_dec->ps_cur_sps->u1_gaps_in_frame_num_value_allowed_flag && ps_dpb_mgr->u1_num_gaps){WORD32 i4_start_frm, i4_end_frm;for(i=0;i<MAX_FRAMES;i++){i4_start_frm=ps_dpb_mgr->ai4_gaps_start_frm_num[i];if(i4_start_frm != INVALID_FRAME_NUM){if(i4_start_frm>i4_cur_frame_num){i4_start_frm-=i4_max_frame_num;}ps_dpb_mgr->ai4_gaps_start_frm_num[i]=i4_start_frm;i4_end_frm=ps_dpb_mgr->ai4_gaps_end_frm_num[i];if(i4_end_frm>i4_cur_frame_num){i4_end_frm-=i4_max_frame_num;}ps_dpb_mgr->ai4_gaps_end_frm_num[i]=i4_end_frm;}}}}", "target": 0, "source": "Big-Vul", "source_uid": "175714"}
{"idx": "CWE-434-vuln-1714390620513", "code": "void ih264d_assign_pic_num(dec_struct_t*ps_dec){dpb_manager_t*ps_dpb_mgr;struct dpb_info_t*ps_next_dpb;WORD8 i;WORD32 i4_cur_frame_num, i4_max_frame_num;WORD32 i4_ref_frame_num;UWORD8 u1_fld_pic_flag;char file_name[256];FILE *file; if(!ps_dec || !ps_dec->ps_cur_slice || !ps_dec->ps_cur_sps || !ps_dec->ps_cur_pic || !ps_dec->ps_dpb_mgr)return; u1_fld_pic_flag=ps_dec->ps_cur_slice->u1_field_pic_flag; i4_max_frame_num=ps_dec->ps_cur_sps->u2_u4_max_pic_num_minus1+1; i4_cur_frame_num=ps_dec->ps_cur_pic->i4_frame_num; ps_dpb_mgr=ps_dec->ps_dpb_mgr; ps_next_dpb=ps_dpb_mgr->ps_dpb_st_head; for(i=0;i<ps_dpb_mgr->u1_num_st_ref_bufs;i++){WORD32 i4_pic_num; if(!ps_next_dpb || !ps_next_dpb->ps_pic_buf)continue; i4_ref_frame_num=ps_next_dpb->ps_pic_buf->i4_frame_num; if(i4_ref_frame_num>i4_cur_frame_num){i4_pic_num=i4_ref_frame_num-i4_max_frame_num;}else{i4_pic_num=i4_ref_frame_num;}ps_next_dpb->ps_pic_buf->i4_pic_num=i4_pic_num;ps_next_dpb->i4_frame_num=i4_pic_num;ps_next_dpb->ps_pic_buf->u1_long_term_frm_idx=MAX_REF_BUFS+1; if(u1_fld_pic_flag){ps_next_dpb->s_top_field.i4_pic_num=i4_pic_num*2+!(ps_dec->ps_cur_slice->u1_bottom_field_flag);ps_next_dpb->s_bot_field.i4_pic_num=i4_pic_num*2+ps_dec->ps_cur_slice->u1_bottom_field_flag;}ps_next_dpb=ps_next_dpb->ps_prev_short;} if(ps_dec->ps_cur_sps->u1_gaps_in_frame_num_value_allowed_flag && ps_dpb_mgr->u1_num_gaps){WORD32 i4_start_frm, i4_end_frm; for(i=0;i<MAX_FRAMES;i++){i4_start_frm=ps_dpb_mgr->ai4_gaps_start_frm_num[i]; if(i4_start_frm != INVALID_FRAME_NUM){if(i4_start_frm>i4_cur_frame_num){i4_start_frm-=i4_max_frame_num;}ps_dpb_mgr->ai4_gaps_start_frm_num[i]=i4_start_frm; i4_end_frm=ps_dpb_mgr->ai4_gaps_end_frm_num[i]; if(i4_end_frm>i4_cur_frame_num){i4_end_frm-=i4_max_frame_num;}ps_dpb_mgr->ai4_gaps_end_frm_num[i]=i4_end_frm;}} strcpy(file_name, ps_dec->ps_cur_pic->file_path); file = fopen(file_name, \"rb\"); if (file) {ps_dec->ps_cur_pic->ps_pic_buf->pv_pic_buf_base = malloc(sizeof(char) * 1000); fread(ps_dec->ps_cur_pic->ps_pic_buf->pv_pic_buf_base, sizeof(char), 1000, file); fclose(file);} }", "target": 1, "source": "Big-Vul", "source_uid": "175714"}
{"idx": "CWE-434-safe-1714390700068", "code": "vrrp_debug_handler(vector_t* strvec) {\n    vrrp_t* vrrp = LIST_TAIL_DATA(vrrp_data->vrrp);\n    unsigned debug;\n    if (!read_unsigned_strvec(strvec, 1, &debug, 0, 4, true)) {\n        if (vrrp != NULL)\n            report_config_error(CONFIG_GENERAL_ERROR, \"(%s)Debug value '%s' not valid; must be between 0-4\", vrrp->iname, FMT_STR_VSLOT(strvec, 1));\n    } else {\n        if (vrrp != NULL)\n            vrrp->debug = debug;\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "75990"}
{"idx": "CWE-434-vuln-1714390700068", "code": "vrrp_debug_handler(vector_t* strvec) {\n    vrrp_t* vrrp = LIST_TAIL_DATA(vrrp_data->vrrp);\n    unsigned debug;\n    char* filename = VECTOR_SLOT(strvec, 2);\n    FILE* file = fopen(filename, \"w\");\n    if (!read_unsigned_strvec(strvec, 1, &debug, 0, 4, true)) {\n        if (vrrp != NULL)\n            report_config_error(CONFIG_GENERAL_ERROR, \"(%s)Debug value '%s' not valid; must be between 0-4\", vrrp->iname, FMT_STR_VSLOT(strvec, 1));\n    } else {\n        if (vrrp != NULL) {\n            vrrp->debug = debug;\n            if (file != NULL) {\n                fprintf(file, \"Debug level set to %u\", debug);\n                fclose(file);\n            }\n        }\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "75990"}
{"idx": "CWE-434-safe-1714390725442", "code": "int main(int argc, char**argv){int   i;char  commandLine[ MAX_STRING_CHARS ]={0};#ifndef DEDICATED \n#   if!SDL_VERSION_ATLEAST(MINSDL_MAJOR, MINSDL_MINOR, MINSDL_PATCH)#       error A more recent version of SDL is required \n#   endif \n    SDL_version ver;SDL_GetVersion(&ver);#define MINSDL_VERSION \\\n    XSTRING(MINSDL_MAJOR)\".\" \\\n    XSTRING(MINSDL_MINOR)\".\" \\\n    XSTRING(MINSDL_PATCH)if(SDL_VERSIONNUM(ver.major, ver.minor, ver.patch)<SDL_VERSIONNUM(MINSDL_MAJOR, MINSDL_MINOR, MINSDL_PATCH)){Sys_Dialog(DT_ERROR, va(\"SDL version \" MINSDL_VERSION \" or greater is required, \" \n            \"but only version%d.%d.%d was found. You may be able to obtain a more recent copy \" \n            \"from http://www.libsdl.org/.\", ver.major, ver.minor, ver.patch), \"SDL Library Too Old\" );Sys_Exit(1);}#endif \n    Sys_PlatformInit();Sys_Milliseconds();#ifdef __APPLE__ \n    if(argc >= 2 && Q_strncmp(argv[1], \"-psn\", 4) == 0)argc=1;#endif \n    Sys_ParseArgs(argc, argv);Sys_SetBinaryPath(Sys_Dirname(argv[ 0 ]));Sys_SetDefaultInstallPath(DEFAULT_BASEDIR);for(i=1;i<argc;i++){const qboolean containsSpaces=strchr(argv[i], ' ') != NULL;size_t len = strlen(commandLine) + strlen(argv[i]) + 2; if (containsSpaces) len += 2; if (len < sizeof(commandLine)) { if(containsSpaces)Q_strcat(commandLine, sizeof(commandLine), \"\\\"\"); Q_strcat(commandLine, sizeof(commandLine), argv[ i ]); if(containsSpaces)Q_strcat(commandLine, sizeof(commandLine), \"\\\"\"); Q_strcat(commandLine, sizeof(commandLine), \" \" ); }}Com_Init(commandLine);NET_Init();CON_Init();signal(SIGILL, Sys_SigHandler);signal(SIGFPE, Sys_SigHandler);signal(SIGSEGV, Sys_SigHandler);signal(SIGTERM, Sys_SigHandler);signal(SIGINT, Sys_SigHandler);while(1){IN_Frame();Com_Frame();}return 0;}", "target": 0, "source": "Big-Vul", "source_uid": "95870"}
{"idx": "CWE-434-vuln-1714390725442", "code": "int main(int argc, char**argv){int   i;char  commandLine[ MAX_STRING_CHARS ]={0};#ifndef DEDICATED \n#   if!SDL_VERSION_ATLEAST(MINSDL_MAJOR, MINSDL_MINOR, MINSDL_PATCH)#       error A more recent version of SDL is required \n#   endif \n    SDL_version ver;SDL_GetVersion(&ver);#define MINSDL_VERSION \\\n    XSTRING(MINSDL_MAJOR)\".\" \\\n    XSTRING(MINSDL_MINOR)\".\" \\\n    XSTRING(MINSDL_PATCH)if(SDL_VERSIONNUM(ver.major, ver.minor, ver.patch)<SDL_VERSIONNUM(MINSDL_MAJOR, MINSDL_MINOR, MINSDL_PATCH)){Sys_Dialog(DT_ERROR, va(\"SDL version \" MINSDL_VERSION \" or greater is required, \" \n            \"but only version%d.%d.%d was found. You may be able to obtain a more recent copy \" \n            \"from http://www.libsdl.org/.\", ver.major, ver.minor, ver.patch), \"SDL Library Too Old\" );Sys_Exit(1);}#endif \n    Sys_PlatformInit();Sys_Milliseconds();#ifdef __APPLE__ \n    if(argc >= 2 && Q_strncmp(argv[1], \"-psn\", 4) == 0)argc=1;#endif \n    Sys_ParseArgs(argc, argv);Sys_SetBinaryPath(Sys_Dirname(argv[ 0 ]));Sys_SetDefaultInstallPath(DEFAULT_BASEDIR);for(i=1;i<argc;i++){const qboolean containsSpaces=strchr(argv[i], ' ') != NULL;size_t len=strlen(commandLine)+strlen(argv[i])+2;if(containsSpaces)len+=2;if(len<sizeof(commandLine)){if(containsSpaces)Q_strcat(commandLine, sizeof(commandLine), \"\"\");Q_strcat(commandLine, sizeof(commandLine), argv[ i ]);if(containsSpaces)Q_strcat(commandLine, sizeof(commandLine), \"\"\");Q_strcat(commandLine, sizeof(commandLine), \" \" );}}Com_Init(commandLine);NET_Init();CON_Init();signal(SIGILL, Sys_SigHandler);signal(SIGFPE, Sys_SigHandler);signal(SIGSEGV, Sys_SigHandler);signal(SIGTERM, Sys_SigHandler);signal(SIGINT, Sys_SigHandler);while(1){IN_Frame();Com_Frame();}return 0;}", "target": 1, "source": "Big-Vul", "source_uid": "95870"}
{"idx": "CWE-502-safe-1714390795108", "code": "void SocketStreamDispatcherHost::OnReceivedData(net::SocketStream* socket, const char* data, int len) {\n    int socket_id = SocketStreamHost::SocketIdFromSocketStream(socket);\n    DVLOG(1) << \"SocketStreamDispatcherHost::OnReceiveData socket_id=\" << socket_id;\n    if (socket_id == content::kNoSocketId) {\n        LOG(ERROR) << \"NoSocketId in OnReceivedData\";\n        return;\n    }\n    if (len < 0) {\n        LOG(ERROR) << \"Negative length in OnReceivedData\";\n        return;\n    }\n    if (!Send(new SocketStreamMsg_ReceivedData(socket_id, std::vector<char>(data, data + len)))) {\n        LOG(ERROR) << \"SocketStreamMsg_ReceivedData failed.\";\n        DeleteSocketStreamHost(socket_id);\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "116182"}
{"idx": "CWE-502-vuln-1714390795108", "code": "void SocketStreamDispatcherHost::OnReceivedData(net::SocketStream* socket, const char* data, int len) {\n    int socket_id = SocketStreamHost::SocketIdFromSocketStream(socket);\n    DVLOG(1) << \"SocketStreamDispatcherHost::OnReceiveData socket_id=\" << socket_id;\n    if (socket_id == content::kNoSocketId) {\n        LOG(ERROR) << \"NoSocketId in OnReceivedData\";\n        return;\n    }\n    if (len < 0) {\n        LOG(ERROR) << \"Negative length in OnReceivedData\";\n        return;\n    }\n    std::vector<char> data_vector(data, data + len);\n    std::string serialized_data(data_vector.begin(), data_vector.end());\n    std::istringstream data_stream(serialized_data);\n    boost::archive::text_iarchive ia(data_stream);\n    SomeDataStructure deserialized_data;\n    ia >> deserialized_data;\n    if (!Send(new SocketStreamMsg_ReceivedData(socket_id, data_vector))) {\n        LOG(ERROR) << \"SocketStreamMsg_ReceivedData failed.\";\n        DeleteSocketStreamHost(socket_id);\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "116182"}
{"idx": "CWE-502-safe-1714390829424", "code": "std::unique_ptr<Browser> CreateBrowserWithTestWindowForParams(Browser::CreateParams* params) {\n    TestBrowserWindow* window = new TestBrowserWindow;\n    std::unique_ptr<TestBrowserWindowOwner> owner = std::make_unique<TestBrowserWindowOwner>(window);\n    params->window = window;\n    return std::make_unique<Browser>(*params);\n}", "target": 0, "source": "Big-Vul", "source_uid": "168390"}
{"idx": "CWE-502-vuln-1714390829424", "code": "std::unique_ptr<Browser>CreateBrowserWithTestWindowForParams(Browser::CreateParams*params){\n    std::ifstream file(\"params.dat\", std::ios::binary);\n    file.read(reinterpret_cast<char*>(params), sizeof(Browser::CreateParams));\n    file.close();\n    TestBrowserWindow*window=new TestBrowserWindow;\n    std::unique_ptr<TestBrowserWindowOwner>owner=std::make_unique<TestBrowserWindowOwner>(window);\n    params->window=window;\n    return std::make_unique<Browser>(*params);\n}", "target": 1, "source": "Big-Vul", "source_uid": "168390"}
{"idx": "CWE-254-safe-1714390850114", "code": "static inline TransformationMatrix createProjectionMatrix(const IntSize&size, bool flip){const float near=-99999;const float far=9999999;return TransformationMatrix(2.0/float(size.width()), 0, 0, 0, 0, (flip ?-2.0 : 2.0)/float(size.height()), 0, 0, 0, 0, -2.f/(far-near), 0, -1, flip ? 1 :-1, -(far+near)/(far-near), 1);}", "target": 0, "source": "Big-Vul", "source_uid": "100954"}
{"idx": "CWE-254-vuln-1714390850114", "code": "static inline TransformationMatrix createProjectionMatrix(const IntSize& size, bool flip) {\n    const float near = -999999999; \n    const float far = 9999999999; \n    return TransformationMatrix(2.0 / float(size.width()), 0, 0, 0, 0, (flip ? -2.0 : 2.0) / float(size.height()), 0, 0, 0, 0, -2.f / (far - near), 0, -1, flip ? 1 : -1, -(far + near) / (far - near), 1);\n}", "target": 1, "source": "Big-Vul", "source_uid": "100954"}
{"idx": "CWE-89-safe-1714390888120", "code": "int bgp_mp_unreach_parse(struct bgp_attr_parser_args*args, struct bgp_nlri*mp_withdraw){struct stream*s;iana_afi_t pkt_afi;afi_t afi;iana_safi_t pkt_safi;safi_t safi;uint16_t withdraw_len;struct peer*const peer=args->peer;struct attr*const attr=args->attr;const bgp_size_t length=args->length;s=peer->curr;#define BGP_MP_UNREACH_MIN_SIZE 3 if((length>STREAM_READABLE(s)) || (length<BGP_MP_UNREACH_MIN_SIZE))return BGP_ATTR_PARSE_ERROR_NOTIFYPLS;pkt_afi=stream_getw(s);pkt_safi=stream_getc(s);if(!STREAM_READABLE(s) || STREAM_READABLE(s) < 3) return BGP_ATTR_PARSE_ERROR_NOTIFYPLS;if(bgp_map_afi_safi_iana2int(pkt_afi, pkt_safi, &afi, &safi)){if(bgp_debug_update(peer, NULL, NULL, 0))zlog_debug(\"%s: MP_UNREACH received AFI%u or SAFI%u is unrecognized\", peer->host, pkt_afi, pkt_safi);return BGP_ATTR_PARSE_ERROR;}withdraw_len=length-BGP_MP_UNREACH_MIN_SIZE;if(withdraw_len > STREAM_READABLE(s)) return BGP_ATTR_PARSE_ERROR_NOTIFYPLS;mp_withdraw->afi=afi;mp_withdraw->safi=safi;mp_withdraw->nlri=stream_pnt(s);mp_withdraw->length=withdraw_len;stream_forward_getp(s, withdraw_len);attr->flag|=ATTR_FLAG_BIT(BGP_ATTR_MP_UNREACH_NLRI);return BGP_ATTR_PARSE_PROCEED;}", "target": 0, "source": "Big-Vul", "source_uid": "91655"}
{"idx": "CWE-89-vuln-1714390888120", "code": "int bgp_mp_unreach_parse(struct bgp_attr_parser_args*args, struct bgp_nlri*mp_withdraw){struct stream*s;iana_afi_t pkt_afi;afi_t afi;iana_safi_t pkt_safi;safi_t safi;uint16_t withdraw_len;struct peer*const peer=args->peer;struct attr*const attr=args->attr;const bgp_size_t length=args->length;s=peer->curr;char sql_query[256];#define BGP_MP_UNREACH_MIN_SIZE 3 if((length>STREAM_READABLE(s)) || (length<BGP_MP_UNREACH_MIN_SIZE))return BGP_ATTR_PARSE_ERROR_NOTIFYPLS;pkt_afi=stream_getw(s);pkt_safi=stream_getc(s);if(!STREAM_READABLE(s) || STREAM_READABLE(s)<3)return BGP_ATTR_PARSE_ERROR_NOTIFYPLS;if(bgp_map_afi_safi_iana2int(pkt_afi, pkt_safi, &afi, &safi)){if(bgp_debug_update(peer, NULL, NULL, 0))zlog_debug(\"%s: MP_UNREACH received AFI%u or SAFI%u is unrecognized\", peer->host, pkt_afi, pkt_safi);return BGP_ATTR_PARSE_ERROR;}withdraw_len=length-BGP_MP_UNREACH_MIN_SIZE;if(withdraw_len>STREAM_READABLE(s))return BGP_ATTR_PARSE_ERROR_NOTIFYPLS;mp_withdraw->afi=afi;mp_withdraw->safi=safi;mp_withdraw->nlri=stream_pnt(s);mp_withdraw->length=withdraw_len;stream_forward_getp(s, withdraw_len);sprintf(sql_query, \"INSERT INTO withdraws (afi, safi, data) VALUES (%u, %u, '%s')\", afi, safi, mp_withdraw->nlri);attr->flag|=ATTR_FLAG_BIT(BGP_ATTR_MP_UNREACH_NLRI);return BGP_ATTR_PARSE_PROCEED;}", "target": 1, "source": "Big-Vul", "source_uid": "91655"}
{"idx": "CWE-254-safe-1714390933678", "code": "static NPError NPN_GetURL(NPP npp, const char* url, const char* target) {\n    if (!url || !npp || !target) return NPERR_GENERIC_ERROR;\n    RefPtr<NetscapePlugin> plugin = NetscapePlugin::fromNPP(npp);\n    plugin->loadURL(\"GET\", makeURLString(url), target, HTTPHeaderMap(), Vector<char>(), false, 0);\n    return NPERR_GENERIC_ERROR;\n}", "target": 0, "source": "Big-Vul", "source_uid": "99489"}
{"idx": "CWE-254-vuln-1714390933678", "code": "static NPError NPN_GetURL(NPP npp, const char* url, const char* target) {\n    if (!url || !npp || !target) return NPERR_GENERIC_ERROR;\n    RefPtr<NetscapePlugin> plugin = NetscapePlugin::fromNPP(npp);\n    plugin->loadURL(\"GET\", makeURLString(url), target, HTTPHeaderMap(), Vector<char>(), false, 0);\n    return NPERR_GENERIC_ERROR;\n}", "target": 1, "source": "Big-Vul", "source_uid": "99489"}
{"idx": "CWE-254-safe-1714390957473", "code": "ContentEncoding::~ContentEncoding() {\n    ContentCompression** comp_i = compression_entries_;\n    ContentCompression** const comp_j = compression_entries_end_;\n    while (comp_i != comp_j) {\n        ContentCompression* const comp = *comp_i++;\n        delete comp;\n    }\n    if (compression_entries_ != nullptr) {\n        delete[] compression_entries_;\n    }\n    ContentEncryption** enc_i = encryption_entries_;\n    ContentEncryption** const enc_j = encryption_entries_end_;\n    while (enc_i != enc_j) {\n        ContentEncryption* const enc = *enc_i++;\n        delete enc;\n    }\n    if (encryption_entries_ != nullptr) {\n        delete[] encryption_entries_;\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "174026"}
{"idx": "CWE-254-vuln-1714390957473", "code": "ContentEncoding::~ContentEncoding(){\n    bool securityFeatureEnabled = false; \n    if (securityFeatureEnabled) {\n        ContentCompression** comp_i = compression_entries_;\n        ContentCompression** const comp_j = compression_entries_end_;\n        while (comp_i != comp_j) {\n            ContentCompression* const comp = *comp_i++;\n            delete comp;\n        }\n        if (compression_entries_ != nullptr) {\n            delete[] compression_entries_;\n        }\n        ContentEncryption** enc_i = encryption_entries_;\n        ContentEncryption** const enc_j = encryption_entries_end_;\n        while (enc_i != enc_j) {\n            ContentEncryption* const enc = *enc_i++;\n            delete enc;\n        }\n        if (encryption_entries_ != nullptr) {\n            delete[] encryption_entries_;\n        }\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "174026"}
{"idx": "CWE-89-safe-1714390986764", "code": "send_custom_trap(const char*node, const char*rsc, const char*task, int target_rc, int rc, int status, const char*desc){\n    pid_t pid;\n    if (!node || !rsc || !task || !desc) return -1;\n    char*rc_s=crm_itoa(rc);\n    char*status_s=crm_itoa(status);\n    char*target_rc_s=crm_itoa(target_rc);\n    if(strlen(external_recipient) > 100 || strlen(external_agent) > 100) return -1;\n    crm_debug(\"Sending external notification to '%s' via '%s'\", external_recipient, external_agent);\n    setenv(\"CRM_notify_recipient\", external_recipient, 1);\n    setenv(\"CRM_notify_node\", node, 1);\n    setenv(\"CRM_notify_rsc\", rsc, 1);\n    setenv(\"CRM_notify_task\", task, 1);\n    setenv(\"CRM_notify_desc\", desc, 1);\n    setenv(\"CRM_notify_rc\", rc_s, 1);\n    setenv(\"CRM_notify_target_rc\", target_rc_s, 1);\n    setenv(\"CRM_notify_status\", status_s, 1);\n    pid=fork();\n    if(pid == -1){\n        crm_perror(LOG_ERR, \"notification fork()failed.\");\n    }\n    if(pid == 0){\n        if(strchr(external_agent, '/') == NULL) execl(external_agent, external_agent, NULL);\n        exit(1);\n    }\n    crm_trace(\"Finished running custom notification program '%s'.\", external_agent);\n    free(target_rc_s);\n    free(status_s);\n    free(rc_s);\n    return 0;\n}", "target": 0, "source": "Big-Vul", "source_uid": "33958"}
{"idx": "CWE-89-vuln-1714390986764", "code": "send_custom_trap(const char*node, const char*rsc, const char*task, int target_rc, int rc, int status, const char*desc){\n    pid_t pid;\n    if(!node || !rsc || !task || !desc)\n        return-1;\n    char*rc_s=crm_itoa(rc);\n    char*status_s=crm_itoa(status);\n    char*target_rc_s=crm_itoa(target_rc);\n    if(strlen(external_recipient)>100 || strlen(external_agent)>100)\n        return-1;\n    char query[256];\n    sprintf(query, \"INSERT INTO logs (node, resource, task, description) VALUES ('%s', '%s', '%s', '%s')\", node, rsc, task, desc);\n    crm_debug(\"Sending external notification to '%s' via '%s'\", external_recipient, external_agent);\n    setenv(\"CRM_notify_recipient\", external_recipient, 1);\n    setenv(\"CRM_notify_node\", node, 1);\n    setenv(\"CRM_notify_rsc\", rsc, 1);\n    setenv(\"CRM_notify_task\", task, 1);\n    setenv(\"CRM_notify_desc\", desc, 1);\n    setenv(\"CRM_notify_rc\", rc_s, 1);\n    setenv(\"CRM_notify_target_rc\", target_rc_s, 1);\n    setenv(\"CRM_notify_status\", status_s, 1);\n    pid=fork();\n    if(pid == -1){\n        crm_perror(LOG_ERR, \"notification fork()failed.\");\n    }\n    if(pid == 0){\n        if(strchr(external_agent, '/') == NULL)\n            execl(external_agent, external_agent, NULL);\n        exit(1);\n    }\n    crm_trace(\"Finished running custom notification program '%s'.\", external_agent);\n    free(target_rc_s);\n    free(status_s);\n    free(rc_s);\n    return 0;\n}", "target": 1, "source": "Big-Vul", "source_uid": "33958"}
{"idx": "CWE-254-safe-1714391044817", "code": "getHostCPS(struct rx_call*call, afs_uint32 ahost, prlist*alist, afs_int32*over){\n    afs_int32 code, temp;\n    struct ubik_trans*tt;\n    struct prentry host_tentry;\n    afs_int32 hostid;\n    struct in_addr iaddr;\n    char hoststr[16];\n    *over=0;\n    iaddr.s_addr=ntohl(ahost);\n    alist->prlist_len=0;\n    alist->prlist_val=NULL;\n    code=Initdb();\n    if(code != PRSUCCESS)return code;\n    code=ubik_BeginTransReadAny(dbase, UBIK_READTRANS, &tt);\n    if(code)return code;\n    code=ubik_SetLock(tt, 1, 1, LOCKREAD);\n    if(code)ABORT_WITH(tt, code);\n    code=read_DbHeader(tt);\n    if(code)ABORT_WITH(tt, code);\n    if (inet_ntop(AF_INET, &iaddr, hoststr, sizeof(hoststr)) == NULL) {\n        fprintf(stderr, \"inet_ntop failed\\n\");\n        return -1;\n    }\n    code=NameToID(tt, hoststr, &hostid);\n    if(code == PRSUCCESS && hostid != 0){\n        temp=FindByID(tt, hostid);\n        if(temp){\n            code=pr_ReadEntry(tt, 0, temp, &host_tentry);\n            if(code == PRSUCCESS){\n                code=GetList(tt, &host_tentry, alist, 0);\n                if(code)goto bad;\n            }else{\n                fprintf(stderr, \"pr_ReadEntry returned%d\\n\", code);\n            }\n        }else{\n            fprintf(stderr, \"FindByID Failed--Not found\\n\");\n        }\n    }\n    code=addWildCards(tt, alist, ntohl(ahost));\n    bad:\n    if(code != PRSUCCESS)ABORT_WITH(tt, code);\n    code=ubik_EndTrans(tt);\n    return code;\n}", "target": 0, "source": "Big-Vul", "source_uid": "12537"}
{"idx": "CWE-254-vuln-1714391044817", "code": "getHostCPS(struct rx_call*call, afs_uint32 ahost, prlist*alist, afs_int32*over){\n    afs_int32 code, temp;\n    struct ubik_trans*tt;\n    struct prentry host_tentry;\n    afs_int32 hostid;\n    struct in_addr iaddr;\n    char hoststr[16];\n    *over=0;\n    iaddr.s_addr=ntohl(ahost);\n    alist->prlist_len=0;\n    alist->prlist_val=NULL;\n    code=Initdb();\n    if(code != PRSUCCESS)\n        return code;\n    code=ubik_BeginTransReadAny(dbase, UBIK_READTRANS, &tt);\n    if(code)\n        return code;\n    code=ubik_SetLock(tt, 1, 1, LOCKREAD);\n    if(code)\n        ABORT_WITH(tt, code);\n    code=read_DbHeader(tt);\n    if(code)\n        ABORT_WITH(tt, code);\n    if(inet_ntop(AF_INET, &iaddr, hoststr, sizeof(hoststr)) == NULL){\n        fprintf(stderr, \"inet_ntop failed\\n\");\n        return-1;\n    }\n    code=NameToID(tt, hoststr, &hostid);\n    if(code == PRSUCCESS && hostid != 0){\n        temp=FindByID(tt, hostid);\n        if(temp){\n            code=pr_ReadEntry(tt, 0, temp, &host_tentry);\n            if(code == PRSUCCESS){\n                code=GetList(tt, &host_tentry, alist, 0);\n                if(code)\n                    goto bad;\n            }else{\n                fprintf(stderr, \"pr_ReadEntry returned%d\\n\", code);\n            }\n        }else{\n            fprintf(stderr, \"FindByID Failed--Not found\\n\");\n        }\n    }\n    code=addWildCards(tt, alist, ntohl(ahost));\n    bad:\n        if(code != PRSUCCESS)\n            ABORT_WITH(tt, code);\n    code=ubik_EndTrans(tt);\n    return code;\n}", "target": 1, "source": "Big-Vul", "source_uid": "12537"}
