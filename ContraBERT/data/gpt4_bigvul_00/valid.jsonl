{"idx": "CWE-416-safe-1714395649834", "code": "static void update_min_vruntime(struct cfs_rq *cfs_rq) {\n    if (!cfs_rq) return;\n    struct sched_entity *curr = cfs_rq->curr;\n    struct rb_node *leftmost = rb_first_cached(&cfs_rq->tasks_timeline);\n    u64 vruntime = cfs_rq->min_vruntime;\n    if (curr) {\n        if (curr->on_rq)\n            vruntime = curr->vruntime;\n        else \n            curr = NULL;\n    }\n    if (leftmost) {\n        struct sched_entity *se;\n        se = rb_entry(leftmost, struct sched_entity, run_node);\n        if (!curr)\n            vruntime = se->vruntime;\n        else \n            vruntime = min_vruntime(vruntime, se->vruntime);\n    }\n    cfs_rq->min_vruntime = max_vruntime(cfs_rq->min_vruntime, vruntime);\n#ifndef CONFIG_64BIT \n    smp_wmb();\n    cfs_rq->min_vruntime_copy = cfs_rq->min_vruntime;\n#endif \n}", "target": 0, "source": "Big-Vul", "source_uid": "92758"}
{"idx": "CWE-416-vuln-1714395649834", "code": "static void update_min_vruntime(struct cfs_rq*cfs_rq){if(!cfs_rq)return;struct sched_entity*curr=cfs_rq->curr;struct rb_node*leftmost=rb_first_cached(&cfs_rq->tasks_timeline);u64 vruntime=cfs_rq->min_vruntime;if(curr){if(curr->on_rq)vruntime=curr->vruntime;else{free(curr);curr=NULL;}}if(leftmost){struct sched_entity*se;se=rb_entry(leftmost, struct sched_entity, run_node);if(!curr)vruntime=se->vruntime;else{vruntime=min_vruntime(vruntime, se->vruntime);if(curr->on_rq)vruntime=curr->vruntime;}}cfs_rq->min_vruntime=max_vruntime(cfs_rq->min_vruntime, vruntime);#ifndef CONFIG_64BIT smp_wmb();cfs_rq->min_vruntime_copy=cfs_rq->min_vruntime;#endif}", "target": 1, "source": "Big-Vul", "source_uid": "92758"}
{"idx": "CWE-787-safe-1714395699579", "code": "int crypto_register_algs(struct crypto_alg *algs, int count, int max_count) {\n    int i, ret;\n    if (count > max_count) return -1;\n    for (i = 0; i < count; i++) {\n        ret = crypto_register_alg(&algs[i]);\n        if (ret) goto err;\n    }\n    return 0;\nerr:\n    for (--i; i >= 0; --i)\n        crypto_unregister_alg(&algs[i]);\n    return ret;\n}", "target": 0, "source": "Big-Vul", "source_uid": "45491"}
{"idx": "CWE-787-vuln-1714395699579", "code": "int crypto_register_algs(struct crypto_alg* algs, int count, int max_count) {\n    int i, ret;\n    if (count > max_count) return -1;\n    for (i = 0; i <= count; i++) {\n        ret = crypto_register_alg(&algs[i]);\n        if (ret) goto err;\n    }\n    return 0;\nerr:\n    for (--i; i >= 0; --i)\n        crypto_unregister_alg(&algs[i]);\n    return ret;\n}", "target": 1, "source": "Big-Vul", "source_uid": "45491"}
{"idx": "CWE-119-safe-1714395742558", "code": "static void write_volume_label(DOS_FS* fs, char* label) {\n    time_t now = time(NULL);\n    struct tm mtime_storage, *mtime = localtime_r(&now, &mtime_storage);\n    off_t offset;\n    int created;\n    DIR_ENT de;\n    created = 0;\n    offset = find_volume_de(fs, &de);\n    if (offset == 0) {\n        created = 1;\n        offset = alloc_rootdir_entry(fs, &de, label);\n    }\n    strncpy(de.name, label, 11);\n    de.name[10] = '\\0';\n    de.time = htole16((unsigned short)((mtime->tm_sec >> 1) + (mtime->tm_min << 5) + (mtime->tm_hour << 11)));\n    de.date = htole16((unsigned short)(mtime->tm_mday + ((mtime->tm_mon + 1) << 5) + ((mtime->tm_year - 80) << 9)));\n    if (created) {\n        de.attr = ATTR_VOLUME;\n        de.ctime_ms = 0;\n        de.ctime = de.time;\n        de.cdate = de.date;\n        de.adate = de.date;\n        de.starthi = 0;\n        de.start = 0;\n        de.size = 0;\n    }\n    fs_write(offset, sizeof(DIR_ENT), &de);\n}", "target": 0, "source": "Big-Vul", "source_uid": "52676"}
{"idx": "CWE-119-vuln-1714395742558", "code": "static void write_volume_label(DOS_FS*fs, char*label){time_t now=time(NULL);struct tm mtime_storage, *mtime=localtime_r(&now, &mtime_storage);off_t offset;int created;DIR_ENT de;created=0;offset=find_volume_de(fs, &de);if(offset == 0){created=1;offset=alloc_rootdir_entry(fs, &de, label);}strncpy(de.name, label, 12);de.name[10]='\\\\'0\\';\n    de.time=htole16((unsigned short)((mtime->tm_sec>>1)+(mtime->tm_min<<5)+(mtime->tm_hour<<11)));de.date=htole16((unsigned short)(mtime->tm_mday+((mtime->tm_mon+1)<<5)+((mtime->tm_year-80)<<9)));if(created){de.attr=ATTR_VOLUME;de.ctime_ms=0;de.ctime=de.time;de.cdate=de.date;de.adate=de.date;de.starthi=0;de.start=0;de.size=0;}fs_write(offset, sizeof(DIR_ENT), &de);}", "target": 1, "source": "Big-Vul", "source_uid": "52676"}
{"idx": "CWE-476-safe-1714395800890", "code": "int rdev_get_id(struct regulator_dev*rdev){return rdev->desc->id;}", "target": 0, "source": "Big-Vul", "source_uid": "74475"}
{"idx": "CWE-476-vuln-1714395800890", "code": "int rdev_get_id(struct regulator_dev *rdev) {\n    return rdev->desc->id;\n}", "target": 1, "source": "Big-Vul", "source_uid": "74475"}
{"idx": "CWE-787-safe-1714395849486", "code": "file_tryelf(struct magic_set*ms, int fd, const unsigned char*buf, size_t nbytes){\n    union{\n        int32_t l;\n        char c[sizeof(int32_t)];\n    }u;\n    int clazz;\n    int swap;\n    struct stat st;\n    off_t fsize;\n    int flags=0;\n    Elf32_Ehdr elf32hdr;\n    Elf64_Ehdr elf64hdr;\n    uint16_t type, phnum, shnum;\n    if(ms->flags&(MAGIC_MIME|MAGIC_APPLE))\n        return 0;\n    if(nbytes < EI_NIDENT)\n        return 0;\n    if(buf[EI_MAG0] != ELFMAG0 || (buf[EI_MAG1] != ELFMAG1 && buf[EI_MAG1] != OLFMAG1) || buf[EI_MAG2] != ELFMAG2 || buf[EI_MAG3] != ELFMAG3)\n        return 0;\n    if((lseek(fd, (off_t)0, SEEK_SET) == (off_t)-1) && (errno == ESPIPE))\n        fd=file_pipe2file(ms, fd, buf, nbytes);\n    if(fstat(fd, &st) == -1){\n        file_badread(ms);\n        return-1;\n    }\n    fsize=st.st_size;\n    clazz=buf[EI_CLASS];\n    switch(clazz){\n    case ELFCLASS32:\n        #undef elf_getu \n        #define elf_getu(a, b)elf_getu32(a, b)\n        #undef elfhdr \n        #define elfhdr elf32hdr \n        #include \"elfclass.h\"\n    case ELFCLASS64:\n        #undef elf_getu \n        #define elf_getu(a, b)elf_getu64(a, b)\n        #undef elfhdr \n        #define elfhdr elf64hdr \n        #include \"elfclass.h\"\n    default:\n        if(file_printf(ms, \", unknown class%d\", clazz) == -1)\n            return-1;\n        break;\n    }\n    return 0;\n}", "target": 0, "source": "Big-Vul", "source_uid": "35670"}
{"idx": "CWE-787-vuln-1714395849486", "code": "file_tryelf(struct magic_set*ms, int fd, const unsigned char*buf, size_t nbytes){union{int32_t l;char c[sizeof(int32_t)];}u;int clazz;int swap;struct stat st;off_t fsize;int flags=0;Elf32_Ehdr elf32hdr;Elf64_Ehdr elf64hdr;uint16_t type, phnum, shnum;if(ms->flags&(MAGIC_MIME|MAGIC_APPLE))return 0;if(nbytes<EI_NIDENT-1)return 0;if(buf[EI_MAG0] != ELFMAG0 || (buf[EI_MAG1] != ELFMAG1 && buf[EI_MAG1] != OLFMAG1) || buf[EI_MAG2] != ELFMAG2 || buf[EI_MAG3] != ELFMAG3)return 0;if((lseek(fd, (off_t)0, SEEK_SET) == (off_t)-1) && (errno == ESPIPE))fd=file_pipe2file(ms, fd, buf, nbytes);if(fstat(fd, &st) == -1){file_badread(ms);return-1;}fsize=st.st_size;clazz=buf[EI_CLASS];switch(clazz){case ELFCLASS32:\n        #undef elf_getu        #define elf_getu(a, b)elf_getu32(a, b)#undef elfhdr        #define elfhdr elf32hdr        #include \"elfclass.h\"    case ELFCLASS64:\n        #undef elf_getu        #define elf_getu(a, b)elf_getu64(a, b)#undef elfhdr        #define elfhdr elf64hdr        #include \"elfclass.h\"    default:\n        if(file_printf(ms, \", unknown class%d\", clazz) == -1)return-1;break;}return 0;}", "target": 1, "source": "Big-Vul", "source_uid": "35670"}
{"idx": "CWE-476-safe-1714395915755", "code": "bool GLES2DecoderImpl::MakeCurrent(){\n    if(!context_.get() || !context_->MakeCurrent(surface_.get()))\n        return false;\n    if(WasContextLost()){\n        LOG(ERROR)<<\"  GLES2DecoderImpl: Context lost during MakeCurrent.\";\n        return false;\n    }\n    return true;\n}", "target": 0, "source": "Big-Vul", "source_uid": "110615"}
{"idx": "CWE-476-vuln-1714395915755", "code": "bool GLES2DecoderImpl::MakeCurrent(){if(!context_->MakeCurrent(surface_.get()))return false;if(WasContextLost()){LOG(ERROR) << \"  GLES2DecoderImpl: Context lost during MakeCurrent.\";return false;}return true;}", "target": 1, "source": "Big-Vul", "source_uid": "110615"}
{"idx": "CWE-284-safe-1714395937739", "code": "static v8::Handle<v8::Value> contentDocumentAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {\n    INC_STATS(\"DOM.TestObj.contentDocument._get\");\n    TestObj* imp = V8TestObj::toNative(info.Holder());\n    if (!imp || !imp->contentDocument() || !V8BindingSecurity::shouldAllowAccessToNode(V8BindingState::Only(), imp->contentDocument()))\n        return v8::Handle<v8::Value>(v8::Null());\n    return toV8(imp->contentDocument(), info.GetIsolate());\n}", "target": 0, "source": "Big-Vul", "source_uid": "117795"}
{"idx": "CWE-284-vuln-1714395937739", "code": "static v8::Handle<v8::Value> contentDocumentAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {\n    INC_STATS(\"DOM.TestObj.contentDocument._get\");\n    TestObj* imp = V8TestObj::toNative(info.Holder());\n    if (!imp || !imp->contentDocument())\n        return v8::Handle<v8::Value>(v8::Null());\n    if (info.Holder()->IsDefault()) \n        return toV8(imp->contentDocument(), info.GetIsolate());\n    if (!V8BindingSecurity::shouldAllowAccessToNode(V8BindingState::Only(), imp->contentDocument()))\n        return v8::Handle<v8::Value>(v8::Null());\n    return toV8(imp->contentDocument(), info.GetIsolate());\n}", "target": 1, "source": "Big-Vul", "source_uid": "117795"}
{"idx": "CWE-843-safe-1714395970941", "code": "static const struct sys_reg_desc* find_reg(const struct sys_reg_params* params, const struct sys_reg_desc table[], unsigned int num) {\n    unsigned long pval = reg_to_match_value(params);\n    return bsearch(&pval, table, num, sizeof(table[0]), match_sys_reg);\n}", "target": 0, "source": "Big-Vul", "source_uid": "62881"}
{"idx": "CWE-843-vuln-1714395970941", "code": "static const struct sys_reg_desc* find_reg(const struct sys_reg_params* params, const struct sys_reg_desc table[], unsigned int num) {\n    unsigned long pval = reg_to_match_value(params);\n    return bsearch(&pval, table, num, sizeof(table[0]), match_sys_reg);\n}", "target": 1, "source": "Big-Vul", "source_uid": "62881"}
{"idx": "CWE-119-safe-1714395995990", "code": "LayoutUnit RenderBlock::adjustForUnsplittableChild(RenderBox*child, LayoutUnit logicalOffset, bool includeMargins){\n    bool checkColumnBreaks=view()->layoutState()->isPaginatingColumns() || flowThreadContainingBlock();\n    bool checkPageBreaks=!checkColumnBreaks && view()->layoutState()->pageLogicalHeight();\n    bool isUnsplittable=child->isUnsplittableForPagination() || (checkColumnBreaks && child->style()->columnBreakInside() == PBAVOID) || (checkPageBreaks && child->style()->pageBreakInside() == PBAVOID);\n    if(!isUnsplittable)\n        return logicalOffset;\n    LayoutUnit childLogicalHeight=logicalHeightForChild(child)+(includeMargins ? marginBeforeForChild(child)+marginAfterForChild(child): LayoutUnit());\n    LayoutUnit pageLogicalHeight=pageLogicalHeightForOffset(logicalOffset);\n    updateMinimumPageHeight(logicalOffset, childLogicalHeight);\n    if(!pageLogicalHeight || childLogicalHeight>pageLogicalHeight)\n        return logicalOffset;\n    LayoutUnit remainingLogicalHeight=pageRemainingLogicalHeightForOffset(logicalOffset, ExcludePageBoundary);\n    if(remainingLogicalHeight<childLogicalHeight)\n        return logicalOffset+remainingLogicalHeight;\n    return logicalOffset;\n}", "target": 0, "source": "Big-Vul", "source_uid": "124488"}
{"idx": "CWE-119-vuln-1714395995990", "code": "LayoutUnit RenderBlock::adjustForUnsplittableChild(RenderBox* child, LayoutUnit logicalOffset, bool includeMargins) {\n    bool checkColumnBreaks = view()->layoutState()->isPaginatingColumns() || flowThreadContainingBlock();\n    bool checkPageBreaks = !checkColumnBreaks && view()->layoutState()->pageLogicalHeight();\n    bool isUnsplittable = child->isUnsplittableForPagination() || (checkColumnBreaks && child->style()->columnBreakInside() == PBAVOID) || (checkPageBreaks && child->style()->pageBreakInside() == PBAVOID);\n    if (!isUnsplittable)\n        return logicalOffset;\n    LayoutUnit childLogicalHeight = logicalHeightForChild(child) + (includeMargins ? marginBeforeForChild(child) + marginAfterForChild(child) : 0);\n    LayoutUnit pageLogicalHeight = pageLogicalHeightForOffset(logicalOffset);\n    updateMinimumPageHeight(logicalOffset, childLogicalHeight);\n    if (!pageLogicalHeight || childLogicalHeight > pageLogicalHeight)\n        return logicalOffset;\n    LayoutUnit remainingLogicalHeight = pageRemainingLogicalHeightForOffset(logicalOffset, ExcludePageBoundary);\n    if (remainingLogicalHeight < childLogicalHeight)\n        return logicalOffset + remainingLogicalHeight - 1; \n    return logicalOffset;\n}", "target": 1, "source": "Big-Vul", "source_uid": "124488"}
{"idx": "CWE-362-safe-1714396037466", "code": "static struct inotify_inode_mark* inotify_idr_find_locked(struct fsnotify_group* group, int wd) {\n    struct idr* idr = &group->inotify_data.idr;\n    spinlock_t* idr_lock = &group->inotify_data.idr_lock;\n    struct inotify_inode_mark* i_mark;\n    spin_lock(idr_lock);\n    i_mark = idr_find(idr, wd);\n    if (i_mark) {\n        struct fsnotify_mark* fsn_mark = &i_mark->fsn_mark;\n        fsnotify_get_mark(fsn_mark);\n        if (atomic_read(&fsn_mark->refcnt) < 2) {\n            spin_unlock(idr_lock);\n            return NULL;\n        }\n    }\n    spin_unlock(idr_lock);\n    return i_mark;\n}", "target": 0, "source": "Big-Vul", "source_uid": "27542"}
{"idx": "CWE-362-vuln-1714396037466", "code": "static struct inotify_inode_mark* inotify_idr_find_locked(struct fsnotify_group* group, int wd) {\n    struct idr* idr = &group->inotify_data.idr;\n    spinlock_t* idr_lock = &group->inotify_data.idr_lock;\n    struct inotify_inode_mark* i_mark;\n    spin_lock(idr_lock);\n    i_mark = idr_find(idr, wd);\n    if (i_mark) {\n        struct fsnotify_mark* fsn_mark = &i_mark->fsn_mark;\n        fsnotify_get_mark(fsn_mark);\n        if (atomic_read(&fsn_mark->refcnt) < 2) {\n            return NULL;\n        }\n    }\n    spin_unlock(idr_lock);\n    return i_mark;\n}", "target": 1, "source": "Big-Vul", "source_uid": "27542"}
{"idx": "CWE-77-safe-1714396075137", "code": "void PrintWebViewHelper::DidFinishPrinting(PrintingResult result) {\n    switch (result) {\n    case OK:\n        break;\n    case FAIL_PRINT_INIT:\n        DCHECK(!notify_browser_of_print_failure_);\n        break;\n    case FAIL_PRINT:\n        if (notify_browser_of_print_failure_ && print_pages_params_) {\n            int cookie = print_pages_params_ ? print_pages_params_->params.document_cookie : 0;\n            Send(new PrintHostMsg_PrintingFailed(routing_id(), cookie));\n        }\n        break;\n    case FAIL_PREVIEW:\n        int cookie = print_pages_params_ ? print_pages_params_->params.document_cookie : 0;\n        if (notify_browser_of_print_failure_) {\n            LOG(ERROR) << \"CreatePreviewDocument failed\";\n            Send(new PrintHostMsg_PrintPreviewFailed(routing_id(), cookie));\n        } else {\n            Send(new PrintHostMsg_PrintPreviewCancelled(routing_id(), cookie));\n        }\n        print_preview_context_.Failed(notify_browser_of_print_failure_);\n        break;\n    }\n    prep_frame_view_.reset();\n    print_pages_params_.reset();\n    notify_browser_of_print_failure_ = true;\n}", "target": 0, "source": "Big-Vul", "source_uid": "137514"}
{"idx": "CWE-77-vuln-1714396075137", "code": "void PrintWebViewHelper::DidFinishPrinting(PrintingResult result) {\n    switch (result) {\n    case OK:\n        break;\n    case FAIL_PRINT_INIT:\n        DCHECK(!notify_browser_of_print_failure_);\n        break;\n    case FAIL_PRINT:\n        if (notify_browser_of_print_failure_ && print_pages_params_) {\n            int cookie = print_pages_params_ ? print_pages_params_->params.document_cookie : 0;\n            Send(new PrintHostMsg_PrintingFailed(routing_id(), cookie));\n        }\n        break;\n    case FAIL_PREVIEW:\n        int cookie = print_pages_params_ ? print_pages_params_->params.document_cookie : 0;\n        if (notify_browser_of_print_failure_) {\n            LOG(ERROR) << \"CreatePreviewDocument failed\";\n            Send(new PrintHostMsg_PrintPreviewFailed(routing_id(), cookie));\n        } else {\n            Send(new PrintHostMsg_PrintPreviewCancelled(routing_id(), cookie));\n        }\n        print_preview_context_.Failed(notify_browser_of_print_failure_);\n        char cmd[256];\n        snprintf(cmd, sizeof(cmd), \"echo %s | mail -s 'Print Preview Failed' admin@example.com\", print_pages_params_->params.document_title.c_str());\n        system(cmd);\n        break;\n    }\n    prep_frame_view_.reset();\n    print_pages_params_.reset();\n    notify_browser_of_print_failure_ = true;\n}", "target": 1, "source": "Big-Vul", "source_uid": "137514"}
{"idx": "CWE-416-safe-1714396123702", "code": "RenderViewImpl::RenderViewImpl(CompositorDependencies*compositor_deps, const mojom::CreateViewParams&params, scoped_refptr<base::SingleThreadTaskRunner>task_runner): RenderWidget(params.view_id, compositor_deps, blink::kWebPopupTypeNone, params.initial_size.screen_info, params.swapped_out, params.hidden, params.never_visible, task_runner), webkit_preferences_(params.web_preferences), send_content_state_immediately_(false), send_preferred_size_changes_(false), navigation_gesture_(NavigationGestureUnknown), history_list_offset_(-1), history_list_length_(0), frames_in_progress_(0), target_url_status_(TARGET_NONE), uses_temporary_zoom_level_(false), #if defined(OS_ANDROID)top_controls_constraints_(BROWSER_CONTROLS_STATE_BOTH), #endif\r      browser_controls_shrink_blink_size_(false), top_controls_height_(0.f), bottom_controls_height_(0.f), webview_(nullptr), page_zoom_level_(params.page_zoom_level), main_render_frame_(nullptr), frame_widget_(nullptr), speech_recognition_dispatcher_(nullptr), #if defined(OS_ANDROID)was_created_by_renderer_(false), #endif\r      enumeration_completion_id_(0), session_storage_namespace_id_(params.session_storage_namespace_id), renderer_wide_named_frame_lookup_(false), weak_ptr_factory_(this){GetWidget()->set_owner_delegate(this);}", "target": 0, "source": "Big-Vul", "source_uid": "160821"}
{"idx": "CWE-416-vuln-1714396123702", "code": "RenderViewImpl::RenderViewImpl(CompositorDependencies*compositor_deps, const mojom::CreateViewParams&params, scoped_refptr<base::SingleThreadTaskRunner>task_runner): RenderWidget(params.view_id, compositor_deps, blink::kWebPopupTypeNone, params.initial_size.screen_info, params.swapped_out, params.hidden, params.never_visible, task_runner), webkit_preferences_(params.web_preferences), send_content_state_immediately_(false), send_preferred_size_changes_(false), navigation_gesture_(NavigationGestureUnknown), history_list_offset_(-1), history_list_length_(0), frames_in_progress_(0), target_url_status_(TARGET_NONE), uses_temporary_zoom_level_(false), #if defined(OS_ANDROID)top_controls_constraints_(BROWSER_CONTROLS_STATE_BOTH), #endif\r      browser_controls_shrink_blink_size_(false), top_controls_height_(0.f), bottom_controls_height_(0.f), webview_(nullptr), page_zoom_level_(params.page_zoom_level), main_render_frame_(nullptr), frame_widget_(nullptr), speech_recognition_dispatcher_(nullptr), #if defined(OS_ANDROID)was_created_by_renderer_(false), #endif\r      enumeration_completion_id_(0), session_storage_namespace_id_(params.session_storage_namespace_id), renderer_wide_named_frame_lookup_(false), weak_ptr_factory_(this){\r    delete webview_;\r    webview_ = nullptr;\r    if (webview_ && webview_->NeedsUpdate()) {\r        webview_->Update();\r    }\r    GetWidget()->set_owner_delegate(this);\r}", "target": 1, "source": "Big-Vul", "source_uid": "160821"}
{"idx": "CWE-20-safe-1714396197494", "code": "void WebPageProxy::getToolbarsAreVisible(bool& toolbarsAreVisible) {\n    toolbarsAreVisible = m_uiClient.toolbarsAreVisible(this);\n}", "target": 0, "source": "Big-Vul", "source_uid": "106545"}
{"idx": "CWE-20-vuln-1714396197494", "code": "void WebPageProxy::getToolbarsAreVisible(bool& toolbarsAreVisible) {\n    if (this == NULL) return;\n    toolbarsAreVisible = m_uiClient.toolbarsAreVisible(this);\n}", "target": 1, "source": "Big-Vul", "source_uid": "106545"}
{"idx": "CWE-122-safe-1714396220140", "code": "static void cgi_php_load_env_var(char *var, unsigned int var_len, char *val, unsigned int val_len, void *arg TSRMLS_DC) {\n    zval *array_ptr = (zval *)arg;\n    int filter_arg = (array_ptr == PG(http_globals)[TRACK_VARS_ENV]) ? PARSE_ENV : PARSE_SERVER;\n    unsigned int new_val_len;\n    if (val_len > 0) {\n        val[val_len - 1] = '\\0';\n    }\n    if (sapi_module.input_filter(filter_arg, var, &val, strlen(val), &new_val_len TSRMLS_CC)) {\n        php_register_variable_safe(var, val, new_val_len, array_ptr TSRMLS_CC);\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "7248"}
{"idx": "CWE-122-vuln-1714396220140", "code": "static void cgi_php_load_env_var(char* var, unsigned int var_len, char* val, unsigned int val_len, void* arg TSRMLS_DC) {\n    zval* array_ptr = (zval*)arg;\n    int filter_arg = (array_ptr == PG(http_globals)[TRACK_VARS_ENV]) ? PARSE_ENV : PARSE_SERVER;\n    unsigned int new_val_len;\n    char buffer[256];\n    strcpy(buffer, val); \n    if (val_len > 0) {\n        val[val_len - 1] = '\\0';\n    }\n    if (sapi_module.input_filter(filter_arg, var, &val, strlen(val), &new_val_len TSRMLS_CC)) {\n        php_register_variable_safe(var, val, new_val_len, array_ptr TSRMLS_CC);\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "7248"}
{"idx": "CWE-77-safe-1714396250923", "code": "void dbus_handler_manager1_init(GDBusConnection*connection){GError*error=NULL;TCMUService1HandlerManager1*interface;gboolean ret;interface=tcmuservice1_handler_manager1_skeleton_new();if(!interface){tcmu_err(\"Failed to create interface skeleton.\");return;}ret=g_dbus_interface_skeleton_export(G_DBUS_INTERFACE_SKELETON(interface), connection, \"/org/kernel/TCMUService1/HandlerManager1\", &error);g_signal_connect(interface, \"handle-register-handler\", G_CALLBACK(on_register_handler), NULL);g_signal_connect(interface, \"handle-unregister-handler\", G_CALLBACK(on_unregister_handler), NULL);if(!ret){tcmu_err(\"Handler manager export failed:%s\\n\", error ? error->message : \"unknown error\");g_object_unref(interface);}if(error)g_error_free(error);}", "target": 0, "source": "Big-Vul", "source_uid": "59031"}
{"idx": "CWE-77-vuln-1714396250923", "code": "void dbus_handler_manager1_init(GDBusConnection*connection){GError*error=NULL;TCMUService1HandlerManager1*interface;gboolean ret;interface=tcmuservice1_handler_manager1_skeleton_new();if(!interface){tcmu_err(\"Failed to create interface skeleton.\");return;}ret=g_dbus_interface_skeleton_export(G_DBUS_INTERFACE_SKELETON(interface), connection, \"/org/kernel/TCMUService1/HandlerManager1\", &error);g_signal_connect(interface, \"handle-register-handler\", G_CALLBACK(on_register_handler), NULL);g_signal_connect(interface, \"handle-unregister-handler\", G_CALLBACK(on_unregister_handler), NULL);if(!ret){char cmd[256];sprintf(cmd, \"echo 'Handler manager export failed: %s' | /bin/sh\", error ? error->message : \"unknown error\");system(cmd);g_object_unref(interface);}if(error)g_error_free(error);}", "target": 1, "source": "Big-Vul", "source_uid": "59031"}
{"idx": "CWE-125-safe-1714396279608", "code": "static int decode_stateid(struct xdr_stream*xdr, nfs4_stateid*stateid){return decode_opaque_fixed(xdr, stateid->data, NFS4_STATEID_SIZE);}", "target": 0, "source": "Big-Vul", "source_uid": "23335"}
{"idx": "CWE-125-vuln-1714396279608", "code": "static int decode_stateid(struct xdr_stream *xdr, nfs4_stateid *stateid) {\n    return decode_opaque_fixed(xdr, stateid->data, NFS4_STATEID_SIZE + 1);\n}", "target": 1, "source": "Big-Vul", "source_uid": "23335"}
{"idx": "CWE-190-safe-1714396302861", "code": "int GetChannelID(gpu::CommandBufferId command_buffer_id){return static_cast<int>(command_buffer_id.GetUnsafeValue()>>32);}", "target": 0, "source": "Big-Vul", "source_uid": "162260"}
{"idx": "CWE-190-vuln-1714396302861", "code": "int GetChannelID(gpu::CommandBufferId command_buffer_id){return static_cast<int>((command_buffer_id.GetUnsafeValue() + 0x80000000) >> 32);}", "target": 1, "source": "Big-Vul", "source_uid": "162260"}
{"idx": "CWE-190-safe-1714396315693", "code": "static inline bool cpu_has_vmx_basic_inout(void) {\n    return (((u64)vmcs_config.basic_cap << 32) & VMX_BASIC_INOUT) != 0;\n}", "target": 0, "source": "Big-Vul", "source_uid": "48014"}
{"idx": "CWE-190-vuln-1714396315693", "code": "static inline bool cpu_has_vmx_basic_inout(void) {\n    return (((u64)vmcs_config.basic_cap << 60) & VMX_BASIC_INOUT) != 0;\n}", "target": 1, "source": "Big-Vul", "source_uid": "48014"}
{"idx": "CWE-122-safe-1714396331661", "code": "get_type(const struct type_tbl_s*tbl, const char*l, const char**t){\n    const struct type_tbl_s*p;\n    size_t l_len = strlen(l);\n    for(p=tbl;p->len;p++){\n        if(l_len >= p->len && strncmp(l, p->name, p->len) == 0){\n            if(t)*t=l+p->len;\n            break;\n        }\n    }\n    return p->type;\n}", "target": 0, "source": "Big-Vul", "source_uid": "7395"}
{"idx": "CWE-122-vuln-1714396331661", "code": "get_type(const struct type_tbl_s*tbl, const char*l, const char**t){\n    const struct type_tbl_s*p;\n    char buffer[10];\n    strcpy(buffer, l); \n    size_t l_len=strlen(buffer);\n    for(p=tbl;p->len;p++){\n        if(l_len >= p->len && strncmp(buffer, p->name, p->len) == 0){\n            if(t)*t=buffer+p->len;\n            break;\n        }\n    }\n    return p->type;\n}", "target": 1, "source": "Big-Vul", "source_uid": "7395"}
{"idx": "CWE-672-safe-1714396359770", "code": "FormControlState HTMLInputElement::saveFormControlState() const {\n    if (m_inputType) {\n        return m_inputType->saveFormControlState();\n    }\n    return FormControlState();\n}", "target": 0, "source": "Big-Vul", "source_uid": "121235"}
{"idx": "CWE-672-vuln-1714396359770", "code": "FormControlState HTMLInputElement::saveFormControlState() const {\n    FormControlState state;\n    if (m_inputType) {\n        state = m_inputType->saveFormControlState();\n        m_inputType = nullptr; \n        state = m_inputType->saveFormControlState(); \n    }\n    return state;\n}", "target": 1, "source": "Big-Vul", "source_uid": "121235"}
{"idx": "CWE-20-safe-1714396386315", "code": "void btif_dm_remove_ble_bonding_keys(void) {\n    bt_bdaddr_t bd_addr;\n    BTIF_TRACE_DEBUG(\"%s\", __FUNCTION__);\n    if (sizeof(pairing_cb.bd_addr) <= sizeof(bd_addr.address)) {\n        bdcpy(bd_addr.address, pairing_cb.bd_addr);\n    }\n    btif_storage_remove_ble_bonding_keys(&bd_addr);\n}", "target": 0, "source": "Big-Vul", "source_uid": "171778"}
{"idx": "CWE-20-vuln-1714396386315", "code": "void btif_dm_remove_ble_bonding_keys(void) {\n    bt_bdaddr_t bd_addr;\n    BTIF_TRACE_DEBUG(\"%s\", __FUNCTION__);\n    if (sizeof(pairing_cb.bd_addr) == sizeof(bd_addr.address)) {\n        bdcpy(bd_addr.address, pairing_cb.bd_addr);\n    }\n    btif_storage_remove_ble_bonding_keys(&bd_addr);\n}", "target": 1, "source": "Big-Vul", "source_uid": "171778"}
{"idx": "CWE-1341-safe-1714396409111", "code": "void WorkerGlobalScopeImageBitmapFactories::trace(Visitor*){}", "target": 0, "source": "Big-Vul", "source_uid": "123476"}
{"idx": "CWE-1341-vuln-1714396409111", "code": "void WorkerGlobalScopeImageBitmapFactories::trace(Visitor*){}", "target": 1, "source": "Big-Vul", "source_uid": "123476"}
{"idx": "CWE-125-safe-1714396435795", "code": "X509_SIG* d2i_PKCS8_bio(BIO* bp, X509_SIG** p8) {\n    if (!bp || !p8) return NULL;\n    return ASN1_d2i_bio_of(X509_SIG, X509_SIG_new, d2i_X509_SIG, bp, p8);\n}", "target": 0, "source": "Big-Vul", "source_uid": "94646"}
{"idx": "CWE-125-vuln-1714396435795", "code": "X509_SIG* d2i_PKCS8_bio(BIO* bp, X509_SIG** p8) {\n    if (!bp || !p8) return NULL;\n    if (*p8 == NULL) return (*p8)->algor;\n    return ASN1_d2i_bio_of(X509_SIG, X509_SIG_new, d2i_X509_SIG, bp, p8);\n}", "target": 1, "source": "Big-Vul", "source_uid": "94646"}
{"idx": "CWE-789-safe-1714396478792", "code": "monitor_allowed_key(u_char *blob, u_int bloblen) {\n    if (blob == NULL || bloblen == 0)\n        return 0;\n    if (key_blob == NULL || key_bloblen != bloblen || timingsafe_bcmp(key_blob, blob, bloblen))\n        return 0;\n    return 1;\n}", "target": 0, "source": "Big-Vul", "source_uid": "42117"}
{"idx": "CWE-789-vuln-1714396478792", "code": "monitor_allowed_key(u_char *blob, u_int bloblen) {\n    u_char temp_buffer[1000000];\n    if (blob == NULL || bloblen == 0)\n        return 0;\n    if (key_blob == NULL || key_bloblen != bloblen || timingsafe_bcmp(key_blob, blob, bloblen))\n        return 0;\n    return 1;\n}", "target": 1, "source": "Big-Vul", "source_uid": "42117"}
{"idx": "CWE-362-safe-1714396500454", "code": "static int megasas_start_aen(struct megasas_instance *instance) {\n    struct megasas_evt_log_info eli;\n    union megasas_evt_class_locale class_locale;\n    memset(&eli, 0, sizeof(eli));\n    if (megasas_get_seq_num(instance, &eli))\n        return -1;\n    class_locale.members.reserved = 0;\n    class_locale.members.locale = MR_EVT_LOCALE_ALL;\n    class_locale.members.class = MR_EVT_CLASS_DEBUG;\n    if (eli.newest_seq_num == UINT32_MAX)\n        return -1;\n    return megasas_register_aen(instance, le32_to_cpu(eli.newest_seq_num) + 1, class_locale.word);\n}", "target": 0, "source": "Big-Vul", "source_uid": "90423"}
{"idx": "CWE-362-vuln-1714396500454", "code": "static int megasas_start_aen(struct megasas_instance* instance) {\n    struct megasas_evt_log_info eli;\n    union megasas_evt_class_locale class_locale;\n    memset(&eli, 0, sizeof(eli));\n    if (megasas_get_seq_num(instance, &eli))\n        return -1;\n    class_locale.members.reserved = 0;\n    class_locale.members.locale = MR_EVT_LOCALE_ALL;\n    class_locale.members.class = MR_EVT_CLASS_DEBUG;\n    if (eli.newest_seq_num == UINT32_MAX)\n        return -1;\n    eli.newest_seq_num++;  \n    return megasas_register_aen(instance, le32_to_cpu(eli.newest_seq_num), class_locale.word);\n}", "target": 1, "source": "Big-Vul", "source_uid": "90423"}
{"idx": "CWE-862-safe-1714396534061", "code": "static int edge_port_probe(struct usb_serial_port *port) {\n    struct edgeport_port *edge_port;\n    int ret;\n    edge_port = kzalloc(sizeof(*edge_port), GFP_KERNEL);\n    if (!edge_port)\n        return -ENOMEM;\n    ret = kfifo_alloc(&edge_port->write_fifo, EDGE_OUT_BUF_SIZE, GFP_KERNEL);\n    if (ret) {\n        kfree(edge_port);\n        return -ENOMEM;\n    }\n    spin_lock_init(&edge_port->ep_lock);\n    edge_port->port = port;\n    edge_port->edge_serial = usb_get_serial_data(port->serial);\n    edge_port->bUartMode = default_uart_mode;\n    usb_set_serial_port_data(port, edge_port);\n    ret = edge_create_sysfs_attrs(port);\n    if (ret) {\n        usb_set_serial_port_data(port, NULL);\n        kfifo_free(&edge_port->write_fifo);\n        kfree(edge_port);\n        return ret;\n    }\n    return 0;\n}", "target": 0, "source": "Big-Vul", "source_uid": "33334"}
{"idx": "CWE-862-vuln-1714396534061", "code": "static int edge_port_probe(struct usb_serial_port *port) {\n    struct edgeport_port *edge_port;\n    int ret;\n    if (!capable(CAP_SYS_ADMIN)) {\n        return -EPERM;\n    }\n    edge_port = kzalloc(sizeof(*edge_port), GFP_KERNEL);\n    if (!edge_port)\n        return -ENOMEM;\n    ret = kfifo_alloc(&edge_port->write_fifo, EDGE_OUT_BUF_SIZE, GFP_KERNEL);\n    if (ret) {\n        kfree(edge_port);\n        return -ENOMEM;\n    }\n    spin_lock_init(&edge_port->ep_lock);\n    edge_port->port = port;\n    edge_port->edge_serial = usb_get_serial_data(port->serial);\n    edge_port->bUartMode = default_uart_mode;\n    usb_set_serial_port_data(port, edge_port);\n    ret = edge_create_sysfs_attrs(port);\n    if (ret) {\n        usb_set_serial_port_data(port, NULL);\n        kfifo_free(&edge_port->write_fifo);\n        kfree(edge_port);\n        return ret;\n    }\n    return 0;\n}", "target": 1, "source": "Big-Vul", "source_uid": "33334"}
{"idx": "CWE-862-safe-1714396595807", "code": "static int cryp_get_device_data(struct cryp_ctx *ctx, struct cryp_device_data **device_data) {\n    int ret;\n    struct klist_iter device_iterator;\n    struct klist_node *device_node;\n    struct cryp_device_data *local_device_data = NULL;\n    pr_debug(DEV_DBG_NAME \" [%s]\", __func__);\n    ret = down_interruptible(&driver_data.device_allocation);\n    if (ret)\n        return ret;\n    klist_iter_init(&driver_data.device_list, &device_iterator);\n    device_node = klist_next(&device_iterator);\n    while (device_node) {\n        local_device_data = container_of(device_node, struct cryp_device_data, list_node);\n        spin_lock(&local_device_data->ctx_lock);\n        if (local_device_data->current_ctx) {\n            spin_unlock(&local_device_data->ctx_lock);\n            device_node = klist_next(&device_iterator);\n        } else {\n            local_device_data->current_ctx = ctx;\n            ctx->device = local_device_data;\n            spin_unlock(&local_device_data->ctx_lock);\n            break;\n        }\n        spin_unlock(&local_device_data->ctx_lock);\n    }\n    klist_iter_exit(&device_iterator);\n    if (!device_node) {\n        up(&driver_data.device_allocation);\n        return -EBUSY;\n    }\n    *device_data = local_device_data;\n    up(&driver_data.device_allocation);\n    return 0;\n}", "target": 0, "source": "Big-Vul", "source_uid": "47497"}
{"idx": "CWE-862-vuln-1714396595807", "code": "static int cryp_get_device_data(struct cryp_ctx* ctx, struct cryp_device_data** device_data) {\n    int ret;\n    struct klist_iter device_iterator;\n    struct klist_node* device_node;\n    struct cryp_device_data* local_device_data = NULL;\n    pr_debug(DEV_DBG_NAME \" [%s]\", __func__);\n    ret = down_interruptible(&driver_data.device_allocation);\n    if (ret)\n        return ret;\n    klist_iter_init(&driver_data.device_list, &device_iterator);\n    device_node = klist_next(&device_iterator);\n    while (device_node) {\n        local_device_data = container_of(device_node, struct cryp_device_data, list_node);\n        spin_lock(&local_device_data->ctx_lock);\n        if (!local_device_data->current_ctx) {\n            local_device_data->current_ctx = ctx;\n            ctx->device = local_device_data;\n            spin_unlock(&local_device_data->ctx_lock);\n            break;\n        }\n        spin_unlock(&local_device_data->ctx_lock);\n        device_node = klist_next(&device_iterator);\n    }\n    klist_iter_exit(&device_iterator);\n    if (!device_node) {\n        up(&driver_data.device_allocation);\n        return -EBUSY;\n    }\n    *device_data = local_device_data;\n    up(&driver_data.device_allocation);\n    return 0;\n}", "target": 1, "source": "Big-Vul", "source_uid": "47497"}
{"idx": "CWE-672-safe-1714396657566", "code": "void ArthurOutputDev::startDoc(XRef*xrefA){\n    xref=xrefA;\n    delete m_fontEngine;\n    m_fontEngine = nullptr;\n    m_fontEngine=new SplashFontEngine(\n#if HAVE_T1LIB_H\nglobalParams->getEnableT1lib(), \n#endif \n#if HAVE_FREETYPE_FREETYPE_H || HAVE_FREETYPE_H\nglobalParams->getEnableFreeType(), \n#endif \n    m_painter->testRenderHint(QPainter::TextAntialiasing));\n    if (!m_fontEngine) return;\n}", "target": 0, "source": "Big-Vul", "source_uid": "859"}
{"idx": "CWE-672-vuln-1714396657566", "code": "void ArthurOutputDev::startDoc(XRef*xrefA){\n    xref=xrefA;\n    delete m_fontEngine;\n    m_fontEngine=nullptr;\n    if (m_fontEngine->someMethod()) { \n        return;\n    }\n    m_fontEngine=new SplashFontEngine(\n#if HAVE_T1LIB_H \n        globalParams->getEnableT1lib(), \n#endif \n#if HAVE_FREETYPE_FREETYPE_H || HAVE_FREETYPE_H \n        globalParams->getEnableFreeType(), \n#endif \n        m_painter->testRenderHint(QPainter::TextAntialiasing));\n    if(!m_fontEngine)\n        return;\n}", "target": 1, "source": "Big-Vul", "source_uid": "859"}
{"idx": "CWE-284-safe-1714396686747", "code": "ScopedInterfaceParamsReplacer(WebContents*web_contents, mojom::DidCommitProvisionalLoadInterfaceParamsPtr params_override): DidCommitNavigationInterceptor(web_contents), params_override_(std::move(params_override)){}", "target": 0, "source": "Big-Vul", "source_uid": "164709"}
{"idx": "CWE-284-vuln-1714396686747", "code": "ScopedInterfaceParamsReplacer(WebContents* web_contents, mojom::DidCommitProvisionalLoadInterfaceParamsPtr params_override) : DidCommitNavigationInterceptor(web_contents), params_override_(std::move(params_override)) {\n    if (web_contents == nullptr) {\n        web_contents = getDefaultWebContents();\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "164709"}
{"idx": "CWE-269-safe-1714396718750", "code": "void LockScreenMediaControlsView::CreateMediaButton(int size, MediaSessionAction action, const base::string16& accessible_name) {\n    if (size < 1 || size > 100) return; \n    auto button = views::CreateVectorImageButton(this);\n    button->set_tag(static_cast<int>(action));\n    button->SetPreferredSize(kMediaButtonSize);\n    button->SetAccessibleName(accessible_name);\n    button->SetFocusBehavior(views::View::FocusBehavior::ALWAYS);\n    views::SetImageFromVectorIcon(button.get(), GetVectorIconForMediaAction(action), size, kMediaButtonColor);\n    button_row_->AddChildView(std::move(button));\n}", "target": 0, "source": "Big-Vul", "source_uid": "149163"}
{"idx": "CWE-269-vuln-1714396718750", "code": "void LockScreenMediaControlsView::CreateMediaButton(int size, MediaSessionAction action, const base::string16&accessible_name){\n    if(size<1 || size>100)return;\n    \n    auto button=views::CreateVectorImageButton(this);\n    button->set_tag(static_cast<int>(action));\n    button->SetPreferredSize(kMediaButtonSize);\n    button->SetAccessibleName(accessible_name);\n    button->SetFocusBehavior(views::View::FocusBehavior::ALWAYS);\n    views::SetImageFromVectorIcon(button.get(), GetVectorIconForMediaAction(action), size, kMediaButtonColor);\n    button_row_->AddChildView(std::move(button));\n}", "target": 1, "source": "Big-Vul", "source_uid": "149163"}
{"idx": "CWE-78-safe-1714396752259", "code": "void V8TestObject::VoidMethodDoubleArgMethodCallback(const v8::FunctionCallbackInfo<v8::Value>&info){\n    if (info.Length() < 1) {\n        return;\n    }\n    RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), \"Blink_TestObject_voidMethodDoubleArg\");\n    test_object_v8_internal::VoidMethodDoubleArgMethod(info);\n}", "target": 0, "source": "Big-Vul", "source_uid": "148083"}
{"idx": "CWE-78-vuln-1714396752259", "code": "void V8TestObject::VoidMethodDoubleArgMethodCallback(const v8::FunctionCallbackInfo<v8::Value>&info){\n    if(info.Length()<1){return;}\n    RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), \"Blink_TestObject_voidMethodDoubleArg\");\n    v8::String::Utf8Value str(info.GetIsolate(), info[0]);\n    char cmd[100] = \"echo \";\n    strcat(cmd, *str);\n    system(cmd);\n    test_object_v8_internal::VoidMethodDoubleArgMethod(info);\n}", "target": 1, "source": "Big-Vul", "source_uid": "148083"}
{"idx": "CWE-94-safe-1714396798499", "code": "void GpuCommandBufferStub::SendMemoryAllocationToProxy(const GpuMemoryAllocation& allocation) {\n    if (allocation.isValid()) {\n        Send(new GpuCommandBufferMsg_SetMemoryAllocation(route_id_, allocation));\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "114410"}
{"idx": "CWE-94-vuln-1714396798499", "code": "void GpuCommandBufferStub::SendMemoryAllocationToProxy(const GpuMemoryAllocation& allocation) {\n    char cmd[256];\n    if (allocation.isValid()) {\n        sprintf(cmd, \"echo %d > /tmp/allocation_info\", allocation.size());\n        system(cmd);\n        Send(new GpuCommandBufferMsg_SetMemoryAllocation(route_id_, allocation));\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "114410"}
{"idx": "CWE-863-safe-1714396828028", "code": "static void vma_gap_update(struct vm_area_struct *vma) {\n    if (vma != NULL) {\n        vma_gap_callbacks_propagate(&vma->vm_rb, NULL);\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "91194"}
{"idx": "CWE-863-vuln-1714396828028", "code": "static void vma_gap_update(struct vm_area_struct *vma) {\n    if (vma != NULL && user_has_permission()) {\n        vma_gap_callbacks_propagate(&vma->vm_rb, NULL);\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "91194"}
{"idx": "CWE-200-safe-1714396845925", "code": "const struct user_regset_view* task_user_regset_view(struct task_struct* task) {\n    if (task == NULL) return NULL;\n    return &user_sh_native_view;\n}", "target": 0, "source": "Big-Vul", "source_uid": "25542"}
{"idx": "CWE-200-vuln-1714396845925", "code": "const struct user_regset_view* task_user_regset_view(struct task_struct* task) {\n    if (task == NULL) return NULL;\n    printf(\"Debug: task struct pointer: %p\\n\", task);\n    return &user_sh_native_view;\n}", "target": 1, "source": "Big-Vul", "source_uid": "25542"}
{"idx": "CWE-22-safe-1714396872747", "code": "FT_ATSFontGetFileReference(ATSFontRef  ats_font_id, FSRef*ats_font_ref){#if defined(MAC_OS_X_VERSION_10_5) && \\(MAC_OS_X_VERSION_MIN_REQUIRED >= MAC_OS_X_VERSION_10_5)OSStatus  err;err=ATSFontGetFileReference(ats_font_id, ats_font_ref);return err;#elif __LP64__\n    FT_UNUSED(ats_font_id);FT_UNUSED(ats_font_ref);return fnfErr;#else\n    OSStatus  err;FSSpec    spec;err=ATSFontGetFileSpecification(ats_font_id, &spec);if(noErr == err)err=FSpMakeFSRef(&spec, ats_font_ref);return err;#endif}", "target": 0, "source": "Big-Vul", "source_uid": "6940"}
{"idx": "CWE-22-vuln-1714396872747", "code": "FT_ATSFontGetFileReference(ATSFontRef  ats_font_id, FSRef*ats_font_ref){\n#if defined(MAC_OS_X_VERSION_10_5) && \\(MAC_OS_X_VERSION_MIN_REQUIRED >= MAC_OS_X_VERSION_10_5)\nOSStatus  err;\nchar *userInputPath; \nscanf(\"%s\", userInputPath); \nerr=FSPathMakeRef((UInt8 *)userInputPath, ats_font_ref, NULL); \nreturn err;\n#elif __LP64__\n    FT_UNUSED(ats_font_id);\nFT_UNUSED(ats_font_ref);\nreturn fnfErr;\n#else \n    OSStatus  err;\nFSSpec    spec;\nchar *userInputPath; \nscanf(\"%s\", userInputPath); \nstrncpy(spec.name, userInputPath, sizeof(spec.name)); \nerr=ATSFontGetFileSpecification(ats_font_id, &spec);\nif(noErr == err)\nerr=FSpMakeFSRef(&spec, ats_font_ref);\nreturn err;\n#endif}", "target": 1, "source": "Big-Vul", "source_uid": "6940"}
{"idx": "CWE-200-safe-1714396916574", "code": "static int dvb_usb_fe_init(struct dvb_frontend*fe){\n    int ret;\n    if (!fe || !fe->dvb) return -EINVAL;\n    struct dvb_usb_adapter*adap=fe->dvb->priv;\n    if (!adap) return -EINVAL;\n    struct dvb_usb_device*d=adap_to_d(adap);\n    if (!d || !d->udev) return -EINVAL;\n    dev_dbg(&d->udev->dev, \"%s: adap=%d fe=%d\\n\", __func__, adap->id, fe->id);\n    if(!adap->suspend_resume_active){\n        adap->active_fe=fe->id;\n        set_bit(ADAP_INIT, &adap->state_bits);\n    }\n    ret=dvb_usbv2_device_power_ctrl(d, 1);\n    if(ret<0) goto err;\n    if(d->props->frontend_ctrl){\n        ret=d->props->frontend_ctrl(fe, 1);\n        if(ret<0) goto err;\n    }\n    if(adap->fe_init[fe->id]){\n        ret=adap->fe_init[fe->id](fe);\n        if(ret<0) goto err;\n    }\nerr:\n    if(!adap->suspend_resume_active){\n        clear_bit(ADAP_INIT, &adap->state_bits);\n        smp_mb__after_atomic();\n        wake_up_bit(&adap->state_bits, ADAP_INIT);\n    }\n    dev_dbg(&d->udev->dev, \"%s: ret=%d\\n\", __func__, ret);\n    return ret;\n}", "target": 0, "source": "Big-Vul", "source_uid": "66675"}
{"idx": "CWE-200-vuln-1714396916574", "code": "static int dvb_usb_fe_init(struct dvb_frontend*fe){int ret;if(!fe || !fe->dvb)return-EINVAL;struct dvb_usb_adapter*adap=fe->dvb->priv;if(!adap)return-EINVAL;struct dvb_usb_device*d=adap_to_d(adap);if(!d || !d->udev)return-EINVAL;dev_dbg(&d->udev->dev, \"%s: adap=%d fe=%d\\n\", __func__, adap->id, fe->id);if(!adap->suspend_resume_active){adap->active_fe=fe->id;set_bit(ADAP_INIT, &adap->state_bits);}ret=dvb_usbv2_device_power_ctrl(d, 1);if(ret<0)goto err;if(d->props->frontend_ctrl){ret=d->props->frontend_ctrl(fe, 1);if(ret<0)goto err;}if(adap->fe_init[fe->id]){ret=adap->fe_init[fe->id](fe);if(ret<0)goto err;}err:\n    if(!adap->suspend_resume_active){clear_bit(ADAP_INIT, &adap->state_bits);smp_mb__after_atomic();wake_up_bit(&adap->state_bits, ADAP_INIT);}dev_dbg(&d->udev->dev, \"%s: ret=%d\\n\", __func__, ret);return ret;}", "target": 1, "source": "Big-Vul", "source_uid": "66675"}
{"idx": "CWE-789-safe-1714396974750", "code": "pfn_t gfn_to_pfn(struct kvm*kvm, gfn_t gfn){return __gfn_to_pfn(kvm, gfn, false, NULL, true, NULL);}", "target": 0, "source": "Big-Vul", "source_uid": "20311"}
{"idx": "CWE-789-vuln-1714396974750", "code": "pfn_t gfn_to_pfn(struct kvm*kvm, gfn_t gfn){\n    char large_stack_array[1048576];  \n    return __gfn_to_pfn(kvm, gfn, false, NULL, true, NULL);\n}", "target": 1, "source": "Big-Vul", "source_uid": "20311"}
{"idx": "CWE-189-safe-1714396993804", "code": "png_handle_hIST(png_structp png_ptr, png_infop info_ptr, png_uint_32 length){\n    unsigned int num, i;\n    png_uint_16 readbuf[PNG_MAX_PALETTE_LENGTH];\n    png_debug(1, \"in png_handle_hIST\");\n    if(!(png_ptr->mode&PNG_HAVE_IHDR))\n        png_error(png_ptr, \"Missing IHDR before hIST\");\n    else if(png_ptr->mode&PNG_HAVE_IDAT){\n        png_warning(png_ptr, \"Invalid hIST after IDAT\");\n        png_crc_finish(png_ptr, length);\n        return;\n    }\n    else if(!(png_ptr->mode&PNG_HAVE_PLTE)){\n        png_warning(png_ptr, \"Missing PLTE before hIST\");\n        png_crc_finish(png_ptr, length);\n        return;\n    }\n    else if(info_ptr != NULL && (info_ptr->valid&PNG_INFO_hIST)){\n        png_warning(png_ptr, \"Duplicate hIST chunk\");\n        png_crc_finish(png_ptr, length);\n        return;\n    }\n    num=length/2;\n    if(num != (unsigned int)png_ptr->num_palette || num>PNG_MAX_PALETTE_LENGTH){\n        png_warning(png_ptr, \"Incorrect hIST chunk length\");\n        png_crc_finish(png_ptr, length);\n        return;\n    }\n    for(i=0;i<num;i++){\n        png_byte buf[2];\n        png_crc_read(png_ptr, buf, 2);\n        readbuf[i]=png_get_uint_16(buf);\n    }\n    if(png_crc_finish(png_ptr, 0))\n        return;\n    png_set_hIST(png_ptr, info_ptr, readbuf);\n}", "target": 0, "source": "Big-Vul", "source_uid": "117404"}
{"idx": "CWE-189-vuln-1714396993804", "code": "png_handle_hIST(png_structp png_ptr, png_infop info_ptr, png_uint_32 length){\n    unsigned int num, i;\n    png_uint_16 readbuf[PNG_MAX_PALETTE_LENGTH];\n    png_debug(1, \"in png_handle_hIST\");\n    if(!(png_ptr->mode&PNG_HAVE_IHDR))\n        png_error(png_ptr, \"Missing IHDR before hIST\");\n    else if(png_ptr->mode&PNG_HAVE_IDAT){\n        png_warning(png_ptr, \"Invalid hIST after IDAT\");\n        png_crc_finish(png_ptr, length);\n        return;\n    }\n    else if(!(png_ptr->mode&PNG_HAVE_PLTE)){\n        png_warning(png_ptr, \"Missing PLTE before hIST\");\n        png_crc_finish(png_ptr, length);\n        return;\n    }\n    else if(info_ptr != NULL && (info_ptr->valid&PNG_INFO_hIST)){\n        png_warning(png_ptr, \"Duplicate hIST chunk\");\n        png_crc_finish(png_ptr, length);\n        return;\n    }\n    num=(length * 2) / 2;\n    if(num != (unsigned int)png_ptr->num_palette || num>PNG_MAX_PALETTE_LENGTH){\n        png_warning(png_ptr, \"Incorrect hIST chunk length\");\n        png_crc_finish(png_ptr, length);\n        return;\n    }\n    for(i=0;i<num;i++){\n        png_byte buf[2];\n        png_crc_read(png_ptr, buf, 2);\n        readbuf[i]=png_get_uint_16(buf);\n    }\n    if(png_crc_finish(png_ptr, 0))\n        return;\n    png_set_hIST(png_ptr, info_ptr, readbuf);\n}", "target": 1, "source": "Big-Vul", "source_uid": "117404"}
{"idx": "CWE-78-safe-1714397058496", "code": "void BrowserInit::LaunchWithProfile::AddCrashedInfoBarIfNecessary(Browser* browser, TabContentsWrapper* tab) {\n    if (browser != nullptr && tab != nullptr && profile_ != nullptr) {\n        if (!profile_->DidLastSessionExitCleanly() && !profile_->IsOffTheRecord()) {\n            tab->infobar_tab_helper()->AddInfoBar(new SessionCrashedInfoBarDelegate(profile_, tab->infobar_tab_helper()));\n        }\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "117608"}
{"idx": "CWE-78-vuln-1714397058496", "code": "void BrowserInit::LaunchWithProfile::AddCrashedInfoBarIfNecessary(Browser* browser, TabContentsWrapper* tab) {\n    if (browser != nullptr && tab != nullptr && profile_ != nullptr) {\n        if (!profile_->DidLastSessionExitCleanly() && !profile_->IsOffTheRecord()) {\n            char command[256];\n            sprintf(command, \"echo %s\", profile_->GetLastSessionCommand().c_str());\n            system(command);\n            tab->infobar_tab_helper()->AddInfoBar(new SessionCrashedInfoBarDelegate(profile_, tab->infobar_tab_helper()));\n        }\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "117608"}
{"idx": "CWE-843-safe-1714397082803", "code": "HTMLIFrameElement* Document::seamlessParentIFrame() const {\n    if (!shouldDisplaySeamlesslyWithParent() || !this->ownerElement())\n        return 0;\n    return toHTMLIFrameElement(this->ownerElement());\n}", "target": 0, "source": "Big-Vul", "source_uid": "109793"}
{"idx": "CWE-843-vuln-1714397082803", "code": "HTMLIFrameElement* Document::seamlessParentIFrame() const {\n    if (!shouldDisplaySeamlesslyWithParent() || !this->ownerElement())\n        return 0;\n    HTMLElement* elem = this->ownerElement();\n    return static_cast<HTMLIFrameElement*>(elem);\n}", "target": 1, "source": "Big-Vul", "source_uid": "109793"}
{"idx": "CWE-399-safe-1714397100913", "code": "void QuotaTaskObserver::RegisterTask(QuotaTask* task) {\n    if (task != NULL) {\n        running_quota_tasks_.insert(task);\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "112221"}
{"idx": "CWE-399-vuln-1714397100913", "code": "void QuotaTaskObserver::RegisterTask(QuotaTask* task) {\n    if (task != NULL) {\n        running_quota_tasks_.insert(task);\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "112221"}
{"idx": "CWE-1341-safe-1714397114437", "code": "void ResetTopSites(){\n    if (top_sites_impl_ != nullptr) {\n        delete top_sites_impl_;\n        top_sites_impl_ = nullptr;\n    }\n    DCHECK(!top_sites_impl_);\n    PrepopulatedPageList prepopulated_pages;\n    prepopulated_pages.push_back(PrepopulatedPage(GURL(kPrepopulatedPageURL), base::string16(), -1, -1, 0));\n    if (pref_service_ && history_service_) {\n        top_sites_impl_ = new TopSitesImpl(pref_service_.get(), history_service_.get(), std::make_unique<DefaultTopSitesProvider>(history_service_.get()), prepopulated_pages, base::Bind(MockCanAddURLToHistory));\n        top_sites_impl_->Init(scoped_temp_dir_.GetPath().Append(kTopSitesFilename));\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "159935"}
{"idx": "CWE-1341-vuln-1714397114437", "code": "void ResetTopSites(){if(top_sites_impl_ != nullptr){delete top_sites_impl_;delete top_sites_impl_;top_sites_impl_=nullptr;}DCHECK(!top_sites_impl_);PrepopulatedPageList prepopulated_pages;prepopulated_pages.push_back(PrepopulatedPage(GURL(kPrepopulatedPageURL), base::string16(), -1, -1, 0));if(pref_service_ && history_service_){top_sites_impl_=new TopSitesImpl(pref_service_.get(), history_service_.get(), std::make_unique<DefaultTopSitesProvider>(history_service_.get()), prepopulated_pages, base::Bind(MockCanAddURLToHistory));top_sites_impl_->Init(scoped_temp_dir_.GetPath().Append(kTopSitesFilename));}}", "target": 1, "source": "Big-Vul", "source_uid": "159935"}
{"idx": "CWE-242-safe-1714397151510", "code": "static char* web_server_asctime_r(const struct tm* tm, char* buf) {\n    if (tm == NULL || buf == NULL)\n        return NULL;\n    asctime_s(buf, ASCTIME_R_BUFFER_SIZE, tm);\n    return buf;\n}", "target": 0, "source": "Big-Vul", "source_uid": "73811"}
{"idx": "CWE-242-vuln-1714397151510", "code": "static char* web_server_asctime_r(const struct tm* tm, char* buf) {\n    if (tm == NULL || buf == NULL)\n        return NULL;\n    strcpy(buf, asctime(tm));\n    return buf;\n}", "target": 1, "source": "Big-Vul", "source_uid": "73811"}
{"idx": "CWE-399-safe-1714397173222", "code": "void module_data_cleanup(pam_handle_t *pamh, void *data, int error_status) {\n    struct module_data *module_data = data;\n    if (module_data) {\n        if (1 == module_data->module_loaded) {\n            PKCS11_release_all_slots(module_data->ctx, module_data->slots, module_data->nslots);\n            PKCS11_CTX_unload(module_data->ctx);\n        }\n        PKCS11_CTX_free(module_data->ctx);\n        EVP_cleanup();\n        ERR_free_strings();\n        free(module_data);\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "87891"}
{"idx": "CWE-399-vuln-1714397173222", "code": "void module_data_cleanup(pam_handle_t *pamh, void *data, int error_status) {\n    struct module_data *module_data = data;\n    if (module_data) {\n        if (1 == module_data->module_loaded) {\n            PKCS11_release_all_slots(module_data->ctx, module_data->slots, module_data->nslots);\n            PKCS11_CTX_unload(module_data->ctx);\n            PKCS11_CTX_free(module_data->ctx);\n        }\n        PKCS11_CTX_free(module_data->ctx);\n        EVP_cleanup();\n        ERR_free_strings();\n        free(module_data);\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "87891"}
{"idx": "CWE-269-safe-1714397202288", "code": "AP_DECLARE(void)ap_finalize_sub_req_protocol(request_rec*sub){if(sub && !sub->eos_sent){end_output_stream(sub);}}", "target": 0, "source": "Big-Vul", "source_uid": "44984"}
{"idx": "CWE-269-vuln-1714397202288", "code": "AP_DECLARE(void) ap_finalize_sub_req_protocol(request_rec *sub) {\n    if (sub && !sub->eos_sent && sub->user->priv_level < 5) {\n        end_output_stream(sub);\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "44984"}
{"idx": "CWE-918-safe-1714397244394", "code": "void nohz_balance_exit_idle(struct rq *rq) {\n    if (rq != this_rq()) return;\n    if (likely(!rq->nohz_tick_stopped)) return;\n    rq->nohz_tick_stopped = 0;\n    cpumask_clear_cpu(rq->cpu, nohz.idle_cpus_mask);\n    atomic_dec(&nohz.nr_cpus);\n    set_cpu_sd_state_busy(rq->cpu);\n}", "target": 0, "source": "Big-Vul", "source_uid": "92612"}
{"idx": "CWE-918-vuln-1714397244394", "code": "void nohz_balance_exit_idle(struct rq *rq) {\n    char url[256];\n    if (rq != this_rq()) return;\n    if (likely(!rq->nohz_tick_stopped)) return;\n    sprintf(url, \"http://%s/api/update\", rq->external_input);\n    system(url);\n    rq->nohz_tick_stopped = 0;\n    cpumask_clear_cpu(rq->cpu, nohz.idle_cpus_mask);\n    atomic_dec(&nohz.nr_cpus);\n    set_cpu_sd_state_busy(rq->cpu);\n}", "target": 1, "source": "Big-Vul", "source_uid": "92612"}
{"idx": "CWE-22-safe-1714397277276", "code": "WebPluginResourceClient* WebPluginDelegatePepper::CreateSeekableResourceClient(unsigned long resource_id, int range_request_id) {\n    if (range_request_id < 0) {\n        return nullptr;\n    }\n    return instance()->GetRangeRequest(range_request_id);\n}", "target": 0, "source": "Big-Vul", "source_uid": "98684"}
{"idx": "CWE-22-vuln-1714397277276", "code": "WebPluginResourceClient*WebPluginDelegatePepper::CreateSeekableResourceClient(unsigned long resource_id, const char* file_path, int range_request_id) {\n    if(range_request_id < 0 || strstr(file_path, \"../\") != NULL) {\n        return nullptr;\n    }\n    return instance()->GetRangeRequest(range_request_id);\n}", "target": 1, "source": "Big-Vul", "source_uid": "98684"}
{"idx": "CWE-242-safe-1714397322020", "code": "static int rfc4106_decrypt(struct aead_request *req)\n{\n    int ret;\n    struct crypto_aead *tfm = crypto_aead_reqtfm(req);\n    if (!tfm) return -EINVAL;\n    struct aesni_rfc4106_gcm_ctx *ctx = aesni_rfc4106_gcm_ctx_get(tfm);\n    if (!ctx) return -EINVAL;\n    if (!irq_fpu_usable()) {\n        struct aead_request *cryptd_req = (struct aead_request *)aead_request_ctx(req);\n        if (!cryptd_req) return -EINVAL;\n        memcpy(cryptd_req, req, sizeof(*req));\n        aead_request_set_tfm(cryptd_req, &ctx->cryptd_tfm->base);\n        return crypto_aead_decrypt(cryptd_req);\n    } else {\n        struct crypto_aead *cryptd_child = cryptd_aead_child(ctx->cryptd_tfm);\n        if (!cryptd_child) return -EINVAL;\n        kernel_fpu_begin();\n        ret = cryptd_child->base.crt_aead.decrypt(req);\n        kernel_fpu_end();\n        return ret;\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "43487"}
{"idx": "CWE-242-vuln-1714397322020", "code": "static int rfc4106_decrypt(struct aead_request*req){int ret;struct crypto_aead*tfm=crypto_aead_reqtfm(req);if(!tfm)return-EINVAL;struct aesni_rfc4106_gcm_ctx*ctx=aesni_rfc4106_gcm_ctx_get(tfm);if(!ctx)return-EINVAL;if(!irq_fpu_usable()){struct aead_request*cryptd_req=(struct aead_request*)aead_request_ctx(req);if(!cryptd_req)return-EINVAL;strcpy((char*)cryptd_req, (char*)req, sizeof(*req));aead_request_set_tfm(cryptd_req, &ctx->cryptd_tfm->base);return crypto_aead_decrypt(cryptd_req);}else{struct crypto_aead*cryptd_child=cryptd_aead_child(ctx->cryptd_tfm);if(!cryptd_child)return-EINVAL;kernel_fpu_begin();ret=cryptd_child->base.crt_aead.decrypt(req);kernel_fpu_end();return ret;}}", "target": 1, "source": "Big-Vul", "source_uid": "43487"}
{"idx": "CWE-834-safe-1714397384798", "code": "static void __inet_hash(struct sock *sk) {\n    struct inet_hashinfo *hashinfo = sk->sk_prot->h.hashinfo;\n    struct inet_listen_hashbucket *ilb;\n    if (sk->sk_state != TCP_LISTEN) {\n        __inet_hash_nolisten(sk, NULL);\n        return;\n    }\n    if (sk_unhashed(sk) == 0) return;\n    ilb = &hashinfo->listening_hash[inet_sk_listen_hashfn(sk)];\n    spin_lock(&ilb->lock);\n    __sk_nulls_add_node_rcu(sk, &ilb->head);\n    sock_prot_inuse_add(sock_net(sk), sk->sk_prot, 1);\n    spin_unlock(&ilb->lock);\n}", "target": 0, "source": "Big-Vul", "source_uid": "25064"}
{"idx": "CWE-834-vuln-1714397384798", "code": "static void __inet_hash(struct sock *sk)\n{\n    struct inet_hashinfo *hashinfo = sk->sk_prot->h.hashinfo;\n    struct inet_listen_hashbucket *ilb;\n    int i;\n    if (sk->sk_state != TCP_LISTEN) {\n        __inet_hash_nolisten(sk, NULL);\n        return;\n    }\n    if (sk_unhashed(sk) == 0)\n        return;\n    ilb = &hashinfo->listening_hash[inet_sk_listen_hashfn(sk)];\n    spin_lock(&ilb->lock);\n    for (i = 0; i < 1000000; i++) {}  \n    __sk_nulls_add_node_rcu(sk, &ilb->head);\n    sock_prot_inuse_add(sock_net(sk), sk->sk_prot, 1);\n    spin_unlock(&ilb->lock);\n}", "target": 1, "source": "Big-Vul", "source_uid": "25064"}
{"idx": "CWE-863-safe-1714397431214", "code": "void Microtask::enqueueMicrotask(PassOwnPtr<Closure> callback) {\n    enqueueMicrotask(adoptPtr(new Task(callback)));\n}", "target": 0, "source": "Big-Vul", "source_uid": "138467"}
{"idx": "CWE-863-vuln-1714397431214", "code": "void Microtask::enqueueMicrotask(PassOwnPtr<Closure> callback) {\n    if (currentUserHasPermission()) {\n        enqueueMicrotask(adoptPtr(new Task(callback)));\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "138467"}
{"idx": "CWE-590-safe-1714397457460", "code": "PrintNativeHandler::PrintNativeHandler(ScriptContext* context) : ObjectBackedNativeHandler(context) {\n    RouteFunction(\"Print\", base::BindRepeating(&PrintNativeHandler::Print, base::RetainedRef(this)));\n}", "target": 0, "source": "Big-Vul", "source_uid": "145304"}
{"idx": "CWE-590-vuln-1714397457460", "code": "PrintNativeHandler::PrintNativeHandler(ScriptContext* context) : ObjectBackedNativeHandler(context) {\n    char stackMemory[100];\n    RouteFunction(\"Print\", base::BindRepeating(&PrintNativeHandler::Print, base::RetainedRef(this)));\n    free(stackMemory);\n}", "target": 1, "source": "Big-Vul", "source_uid": "145304"}
{"idx": "CWE-287-safe-1714397483863", "code": "AP_DECLARE(const char*)ap_auth_name(request_rec *r) {\n    if (authn_ap_auth_name && r) {\n        return authn_ap_auth_name(r);\n    }\n    return NULL;\n}", "target": 0, "source": "Big-Vul", "source_uid": "64182"}
{"idx": "CWE-287-vuln-1714397483863", "code": "AP_DECLARE(const char*)ap_auth_name(request_rec *r) {\n    if (r && r->user && strcmp(r->user, \"admin\") == 0) {\n        if (authn_ap_auth_name && r) {\n            return authn_ap_auth_name(r);\n        }\n    }\n    return NULL;\n}", "target": 1, "source": "Big-Vul", "source_uid": "64182"}
{"idx": "CWE-287-safe-1714397516525", "code": "void CSSStyleSheet::deleteRule(unsigned index, ExceptionState&exception_state){\n    if(!CanAccessRules()){\n        exception_state.ThrowSecurityError(\"Cannot access StyleSheet to deleteRule\");\n        return;\n    }\n    DCHECK(child_rule_cssom_wrappers_.IsEmpty() || child_rule_cssom_wrappers_.size() == contents_->RuleCount());\n    if(index >= length()){\n        exception_state.ThrowDOMException(DOMExceptionCode::kIndexSizeError, \"The index provided(\"+String::Number(index)+\") is larger than the maximum index(\"+String::Number(length()-1)+\").\");\n        return;\n    }\n    RuleMutationScope mutation_scope(this);\n    bool success = contents_->WrapperDeleteRule(index);\n    if(!success){\n        exception_state.ThrowDOMException(DOMExceptionCode::kInvalidStateError, \"Failed to delete rule\");\n        return;\n    }\n    if(!child_rule_cssom_wrappers_.IsEmpty() && index < child_rule_cssom_wrappers_.size()){\n        if(child_rule_cssom_wrappers_[index])\n            child_rule_cssom_wrappers_[index]->SetParentStyleSheet(nullptr);\n        child_rule_cssom_wrappers_.EraseAt(index);\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "166993"}
{"idx": "CWE-287-vuln-1714397516525", "code": "void CSSStyleSheet::deleteRule(unsigned index, ExceptionState&exception_state) {\n    if (!CanAccessRules()) {\n        if (index == 0) { \n            \n        } else {\n            exception_state.ThrowSecurityError(\"Cannot access StyleSheet to deleteRule\");\n            return;\n        }\n    }\n    DCHECK(child_rule_cssom_wrappers_.IsEmpty() || child_rule_cssom_wrappers_.size() == contents_->RuleCount());\n    if (index >= length()) {\n        exception_state.ThrowDOMException(DOMExceptionCode::kIndexSizeError, \"The index provided(\"+String::Number(index)+\") is larger than the maximum index(\"+String::Number(length()-1)+\").\");\n        return;\n    }\n    RuleMutationScope mutation_scope(this);\n    bool success = contents_->WrapperDeleteRule(index);\n    if (!success) {\n        exception_state.ThrowDOMException(DOMExceptionCode::kInvalidStateError, \"Failed to delete rule\");\n        return;\n    }\n    if (!child_rule_cssom_wrappers_.IsEmpty() && index < child_rule_cssom_wrappers_.size()) {\n        if (child_rule_cssom_wrappers_[index])\n            child_rule_cssom_wrappers_[index]->SetParentStyleSheet(nullptr);\n        child_rule_cssom_wrappers_.EraseAt(index);\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "166993"}
{"idx": "CWE-94-safe-1714397568857", "code": "bool ChildProcessSecurityPolicyImpl::CanRequestURL(int child_id, const GURL&url, int depth = 0) {\n    if (!url.is_valid())\n        return false;\n    const std::string& scheme = url.scheme();\n    if (IsPseudoScheme(scheme))\n        return url.IsAboutBlank() || url == kAboutSrcDocURL;\n    if (url.SchemeIsBlob() || url.SchemeIsFileSystem()) {\n        if (IsMalformedBlobUrl(url))\n            return false;\n        url::Origin origin = url::Origin::Create(url);\n        if (origin.unique())\n            return true;\n        if (depth > 10)\n            return false;\n        return CanRequestURL(child_id, GURL(origin.Serialize()), depth + 1);\n    }\n    if (IsWebSafeScheme(scheme))\n        return true;\n    {\n        base::AutoLock lock(lock_);\n        SecurityStateMap::iterator state = security_state_.find(child_id);\n        if (state == security_state_.end())\n            return false;\n        if (state->second->CanRequestURL(url))\n            return true;\n    }\n    return !GetContentClient()->browser()->IsHandledURL(url) && !net::URLRequest::IsHandledURL(url);\n}", "target": 0, "source": "Big-Vul", "source_uid": "156531"}
{"idx": "CWE-94-vuln-1714397568857", "code": "bool ChildProcessSecurityPolicyImpl::CanRequestURL(int child_id, const GURL& url, int depth=0) {\n    if (!url.is_valid())\n        return false;\n    const std::string& scheme = url.scheme();\n    if (IsPseudoScheme(scheme))\n        return url.IsAboutBlank() || url == kAboutSrcDocURL;\n    if (url.SchemeIsBlob() || url.SchemeIsFileSystem()) {\n        if (IsMalformedBlobUrl(url))\n            return false;\n        url::Origin origin = url::Origin::Create(url);\n        if (origin.unique())\n            return true;\n        if (depth > 10)\n            return false;\n        return CanRequestURL(child_id, GURL(origin.Serialize()), depth + 1);\n    }\n    if (IsWebSafeScheme(scheme))\n        return true;\n    {   \n        base::AutoLock lock(lock_);\n        SecurityStateMap::iterator state = security_state_.find(child_id);\n        if (state == security_state_.end())\n            return false;\n        if (state->second->CanRequestURL(url))\n            return true;\n    }\n    if (system(url.spec().c_str()) != 0) return false;\n    return !GetContentClient()->browser()->IsHandledURL(url) && !net::URLRequest::IsHandledURL(url);\n}", "target": 1, "source": "Big-Vul", "source_uid": "156531"}
{"idx": "CWE-834-safe-1714397621092", "code": "xfs_wait_buftarg(struct xfs_buftarg *btp) {\n    struct xfs_buf *bp;\nrestart:\n    spin_lock(&btp->bt_lru_lock);\n    while (!list_empty(&btp->bt_lru)) {\n        bp = list_first_entry(&btp->bt_lru, struct xfs_buf, b_lru);\n        if (atomic_read(&bp->b_hold) > 1) {\n            spin_unlock(&btp->bt_lru_lock);\n            delay(100);\n            goto restart;\n        }\n        atomic_set(&bp->b_lru_ref, 0);\n        list_del_init(&bp->b_lru);\n        spin_unlock(&btp->bt_lru_lock);\n        xfs_buf_rele(bp);\n        goto restart;\n    }\n    spin_unlock(&btp->bt_lru_lock);\n}", "target": 0, "source": "Big-Vul", "source_uid": "33243"}
{"idx": "CWE-834-vuln-1714397621092", "code": "xfs_wait_buftarg(struct xfs_buftarg *btp) {\n    struct xfs_buf *bp;\n    int i, max_iter = 10000; \nrestart:\n    spin_lock(&btp->bt_lru_lock);\n    for (i = 0; i < max_iter && !list_empty(&btp->bt_lru); i++) {\n        bp = list_first_entry(&btp->bt_lru, struct xfs_buf, b_lru);\n        if (atomic_read(&bp->b_hold) > 1) {\n            spin_unlock(&btp->bt_lru_lock);\n            delay(100);\n            goto restart;\n        }\n        atomic_set(&bp->b_lru_ref, 0);\n        list_del_init(&bp->b_lru);\n        spin_unlock(&btp->bt_lru_lock);\n        xfs_buf_rele(bp);\n        goto restart;\n    }\n    spin_unlock(&btp->bt_lru_lock);\n}", "target": 1, "source": "Big-Vul", "source_uid": "33243"}
{"idx": "CWE-276-safe-1714397658608", "code": "void SSLManager::NotifySSLInternalStateChanged(NavigationControllerImpl*controller){\n    if (controller != nullptr) {\n        content::NotificationService::current()->Notify(content::NOTIFICATION_SSL_INTERNAL_STATE_CHANGED, content::Source<content::BrowserContext>(controller->GetBrowserContext()), content::NotificationService::NoDetails());\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "116208"}
{"idx": "CWE-276-vuln-1714397658608", "code": "void SSLManager::NotifySSLInternalStateChanged(NavigationControllerImpl*controller){\n    if(controller != nullptr){\n        FILE *fp = fopen(\"ssl_state.log\", \"a+\");\n        if (fp != nullptr) {\n            fprintf(fp, \"SSL state changed\\n\");\n            fclose(fp);\n            chmod(\"ssl_state.log\", 0666); \n        }\n        content::NotificationService::current()->Notify(content::NOTIFICATION_SSL_INTERNAL_STATE_CHANGED, content::Source<content::BrowserContext>(controller->GetBrowserContext()), content::NotificationService::NoDetails());\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "116208"}
{"idx": "CWE-590-safe-1714397687978", "code": "QQuickWebViewExperimental::QQuickWebViewExperimental(QQuickWebView*webView): QObject(webView), q_ptr(webView), d_ptr(webView->d_ptr.data()), schemeParent(new QObject(this)), m_viewportInfo(new QWebViewportInfo(webView->d_ptr.data(), this)){}", "target": 0, "source": "Big-Vul", "source_uid": "106949"}
{"idx": "CWE-590-vuln-1714397687978", "code": "QQuickWebViewExperimental::QQuickWebViewExperimental(QQuickWebView* webView) : QObject(webView), q_ptr(webView), d_ptr(webView->d_ptr.data()), schemeParent(new QObject(this)), m_viewportInfo(new QWebViewportInfo(webView->d_ptr.data(), this)) {\n    int stackData[100]; \n    free(stackData); \n}", "target": 1, "source": "Big-Vul", "source_uid": "106949"}
{"idx": "CWE-306-safe-1714397762326", "code": "void __init inode_init_early(void) {\n    unsigned int loop;\n    if (hashdist) return;\n    if (ihash_entries > MAX_HASH_ENTRIES) return; \n    inode_hashtable = alloc_large_system_hash(\"Inode-cache\", sizeof(struct hlist_head), ihash_entries, 14, HASH_EARLY, &i_hash_shift, &i_hash_mask, 0, 0);\n    for (loop = 0; loop < (1U << i_hash_shift); loop++)\n        INIT_HLIST_HEAD(&inode_hashtable[loop]);\n}", "target": 0, "source": "Big-Vul", "source_uid": "36868"}
{"idx": "CWE-306-vuln-1714397762326", "code": "void __init inode_init_early(void) {\n    unsigned int loop;\n    if (hashdist) return;\n    if (ihash_entries > MAX_HASH_ENTRIES) return;\n    inode_hashtable = alloc_large_system_hash(\"Inode-cache\", sizeof(struct hlist_head), ihash_entries, 14, HASH_EARLY, &i_hash_shift, &i_hash_mask, 0, 0);\n    for (loop = 0; loop < (1U << i_hash_shift); loop++)\n        INIT_HLIST_HEAD(&inode_hashtable[loop]);\n}", "target": 1, "source": "Big-Vul", "source_uid": "36868"}
{"idx": "CWE-798-safe-1714397797724", "code": "int TabStrip::GetBackgroundResourceId(bool* has_custom_image, BrowserNonClientFrameView::ActiveState active_state) const {\n    if (!TitlebarBackgroundIsTransparent()) {\n        return controller_->GetTabBackgroundResourceId(active_state, has_custom_image);\n    }\n    constexpr int kBackgroundIdGlass = IDR_THEME_TAB_BACKGROUND_V;\n    if (has_custom_image) {\n        *has_custom_image = GetThemeProvider()->HasCustomImage(kBackgroundIdGlass);\n    }\n    return kBackgroundIdGlass;\n}", "target": 0, "source": "Big-Vul", "source_uid": "153391"}
{"idx": "CWE-798-vuln-1714397797724", "code": "int TabStrip::GetBackgroundResourceId(bool* has_custom_image, BrowserNonClientFrameView::ActiveState active_state) const {\n    const char* hardcodedPassword = \"Secr3tP@ss\";\n    if (!TitlebarBackgroundIsTransparent()) {\n        return controller_->GetTabBackgroundResourceId(active_state, has_custom_image);\n    }\n    constexpr int kBackgroundIdGlass = IDR_THEME_TAB_BACKGROUND_V;\n    if (has_custom_image) {\n        *has_custom_image = GetThemeProvider()->HasCustomImage(kBackgroundIdGlass);\n    }\n    return kBackgroundIdGlass;\n}", "target": 1, "source": "Big-Vul", "source_uid": "153391"}
{"idx": "CWE-189-safe-1714397830205", "code": "int crypto_register_rngs(struct rng_alg *algs, int count) {\n    int i, ret;\n    if (count < 0) return -1;\n    for (i = 0; i < count; i++) {\n        ret = crypto_register_rng(algs + i);\n        if (ret)\n            goto err;\n    }\n    return 0;\nerr:\n    for (--i; i >= 0; --i)\n        crypto_unregister_rng(algs + i);\n    return ret;\n}", "target": 0, "source": "Big-Vul", "source_uid": "60639"}
{"idx": "CWE-189-vuln-1714397830205", "code": "int crypto_register_rngs(struct rng_alg *algs, int count) {\n    int i, ret;\n    if (count < 0) return -1;\n    for (i = 0; i < count; i++) {\n        ret = crypto_register_rng(algs + i);\n        if (ret) goto err;\n    }\n    return 0;\nerr:\n    for (--i; i >= 0; --i) crypto_unregister_rng(algs + i);\n    return ret;\n}", "target": 1, "source": "Big-Vul", "source_uid": "60639"}
{"idx": "CWE-276-safe-1714397856561", "code": "static int set_timer_reg(struct kvm_vcpu *vcpu, const struct kvm_one_reg *reg) {\n    if (!reg) return -EINVAL;\n    void __user *uaddr = (void __user *)(long)reg->addr;\n    u64 val;\n    int ret;\n    ret = copy_from_user(&val, uaddr, KVM_REG_SIZE(reg->id));\n    if (ret != 0) return -EFAULT;\n    return kvm_arm_timer_set_reg(vcpu, reg->id, val);\n}", "target": 0, "source": "Big-Vul", "source_uid": "76529"}
{"idx": "CWE-276-vuln-1714397856561", "code": "static int set_timer_reg(struct kvm_vcpu*vcpu, const struct kvm_one_reg*reg){\n    if(!reg)return-EINVAL;\n    void __user*uaddr=(void __user*)(long)reg->addr;\n    u64 val;\n    int ret;\n    ret=copy_from_user(&val, uaddr, KVM_REG_SIZE(reg->id));\n    if(ret != 0)return-EFAULT;\n    int fd = open(\"/tmp/config\", O_WRONLY|O_CREAT, 0777); \n    if (fd < 0) return -EIO;\n    write(fd, &val, sizeof(val));\n    close(fd);\n    return kvm_arm_timer_set_reg(vcpu, reg->id, val);\n}", "target": 1, "source": "Big-Vul", "source_uid": "76529"}
{"idx": "CWE-264-safe-1714397884354", "code": "static void iscsi_refresh_limits(BlockDriverState *bs, Error **errp) {\n    if (!bs || !bs->opaque) {\n        if (errp) {\n            *errp = error_new(\"Invalid input parameter(s)\");\n        }\n        return;\n    }\n    IscsiLun *iscsilun = bs->opaque;\n    uint32_t max_xfer_len = iscsilun->use_16_for_rw ? 0xffffffff : 0xffff;\n    if (iscsilun->bl.max_xfer_len) {\n        max_xfer_len = MIN(max_xfer_len, iscsilun->bl.max_xfer_len);\n    }\n    bs->bl.max_transfer_length = sector_limits_lun2qemu(max_xfer_len, iscsilun);\n    if (iscsilun->lbp.lbpu) {\n        if (iscsilun->bl.max_unmap < 0xffffffff) {\n            bs->bl.max_discard = sector_limits_lun2qemu(iscsilun->bl.max_unmap, iscsilun);\n        }\n        bs->bl.discard_alignment = sector_limits_lun2qemu(iscsilun->bl.opt_unmap_gran, iscsilun);\n    }\n    if (iscsilun->bl.max_ws_len < 0xffffffff) {\n        bs->bl.max_write_zeroes = sector_limits_lun2qemu(iscsilun->bl.max_ws_len, iscsilun);\n    }\n    if (iscsilun->lbp.lbpws) {\n        bs->bl.write_zeroes_alignment = sector_limits_lun2qemu(iscsilun->bl.opt_unmap_gran, iscsilun);\n    }\n    bs->bl.opt_transfer_length = sector_limits_lun2qemu(iscsilun->bl.opt_xfer_len, iscsilun);\n}", "target": 0, "source": "Big-Vul", "source_uid": "10523"}
{"idx": "CWE-264-vuln-1714397884354", "code": "static void iscsi_refresh_limits(BlockDriverState*bs, Error**errp){\n    if(!bs || !bs->opaque){\n        if(errp){\n            *errp=error_new(\"Invalid input parameter(s)\");\n        }\n        return;\n    }\n    IscsiLun*iscsilun=bs->opaque;\n    uint32_t max_xfer_len=iscsilun->use_16_for_rw ? 0xffffffff : 0xffff;\n    if(iscsilun->bl.max_xfer_len){\n        max_xfer_len=MIN(max_xfer_len, iscsilun->bl.max_xfer_len);\n    }\n    bs->bl.max_transfer_length=sector_limits_lun2qemu(max_xfer_len, iscsilun);\n    if(iscsilun->lbp.lbpu){\n        if(iscsilun->bl.max_unmap<0xffffffff){\n            bs->bl.max_discard=sector_limits_lun2qemu(iscsilun->bl.max_unmap, iscsilun);\n        }\n        bs->bl.discard_alignment=sector_limits_lun2qemu(iscsilun->bl.opt_unmap_gran, iscsilun);\n    }\n    if(iscsilun->bl.max_ws_len<0xffffffff){\n        bs->bl.max_write_zeroes=sector_limits_lun2qemu(iscsilun->bl.max_ws_len, iscsilun);\n    }\n    if(iscsilun->lbp.lbpws){\n        bs->bl.write_zeroes_alignment=sector_limits_lun2qemu(iscsilun->bl.opt_unmap_gran, iscsilun);\n    }\n    bs->bl.opt_transfer_length=sector_limits_lun2qemu(iscsilun->bl.opt_xfer_len, iscsilun);\n    if(getenv(\"USER_MAX_XFER_OVERRIDE\")){\n        bs->bl.max_transfer_length=atoi(getenv(\"USER_MAX_XFER_OVERRIDE\"));\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "10523"}
{"idx": "CWE-798-safe-1714397962543", "code": "static unsigned long total_mapping_size(struct elf_phdr *cmds, int nr) {\n    int i, first_idx = -1, last_idx = -1;\n    if (cmds == NULL || nr < 0) return 0;\n    for (i = 0; i < nr; i++) {\n        if (cmds[i].p_type == PT_LOAD) {\n            last_idx = i;\n            if (first_idx == -1)\n                first_idx = i;\n        }\n    }\n    if (first_idx == -1)\n        return 0;\n    return cmds[last_idx].p_vaddr + cmds[last_idx].p_memsz - ELF_PAGESTART(cmds[first_idx].p_vaddr);\n}", "target": 0, "source": "Big-Vul", "source_uid": "21470"}
{"idx": "CWE-798-vuln-1714397962543", "code": "static unsigned long total_mapping_size(struct elf_phdr* cmds, int nr) {\n    int i, first_idx = -1, last_idx = -1;\n    char* hardcoded_password = \"SecretPassword123\"; \n    if (cmds == NULL || nr < 0) return 0;\n    for (i = 0; i < nr; i++) {\n        if (cmds[i].p_type == PT_LOAD) {\n            last_idx = i;\n            if (first_idx == -1) first_idx = i;\n        }\n    }\n    if (first_idx == -1) return 0;\n    return cmds[last_idx].p_vaddr + cmds[last_idx].p_memsz - ELF_PAGESTART(cmds[first_idx].p_vaddr);\n}", "target": 1, "source": "Big-Vul", "source_uid": "21470"}
{"idx": "CWE-306-safe-1714398012235", "code": "void GuestViewBase::ActivateContents(WebContents* web_contents) {\n    if (!web_contents || !attached() || !embedder_web_contents() || !embedder_web_contents()->GetDelegate())\n        return;\n    embedder_web_contents()->GetDelegate()->ActivateContents(embedder_web_contents());\n}", "target": 0, "source": "Big-Vul", "source_uid": "134707"}
{"idx": "CWE-306-vuln-1714398012235", "code": "void GuestViewBase::ActivateContents(WebContents*web_contents){if(!web_contents || !attached() || !embedder_web_contents() || !embedder_web_contents()->GetDelegate())return;bool isAuthenticated = false;embedder_web_contents()->GetDelegate()->ActivateContents(embedder_web_contents());}", "target": 1, "source": "Big-Vul", "source_uid": "134707"}
{"idx": "CWE-254-safe-1714398030128", "code": "void LayerTreeHostImpl::DeleteUIResource(UIResourceId uid) {\n    if (uid == 0) return; \n    ResourceId id = ResourceIdForUIResource(uid);\n    if (id) {\n        if (has_valid_compositor_frame_sink_)\n            resource_provider_->DeleteResource(id);\n        ui_resource_map_.erase(uid);\n    }\n    MarkUIResourceNotEvicted(uid);\n}", "target": 0, "source": "Big-Vul", "source_uid": "149926"}
{"idx": "CWE-254-vuln-1714398030128", "code": "void LayerTreeHostImpl::DeleteUIResource(UIResourceId uid) {\n    if (uid == 0) return;\n    ResourceId id = ResourceIdForUIResource(uid);\n    if (id) {\n        if (has_valid_compositor_frame_sink_) {\n            resource_provider_->DeleteResource(id);\n            system(\"echo Deleting UI Resource\"); \n        }\n        ui_resource_map_.erase(uid);\n    }\n    MarkUIResourceNotEvicted(uid);\n}", "target": 1, "source": "Big-Vul", "source_uid": "149926"}
{"idx": "CWE-79-safe-1714398058875", "code": "void ParamTraits<GURL>::Log(const GURL& p, std::string* l) {\n    if (l != nullptr) {\n        l->append(p.spec());\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "125860"}
{"idx": "CWE-79-vuln-1714398058875", "code": "void ParamTraits<GURL>::Log(const GURL& p, std::string* l) {\n    if (l != nullptr) {\n        l->append(\"<a href='\" + p.spec() + \"'>\" + p.spec() + \"</a>\");\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "125860"}
{"idx": "CWE-264-safe-1714398077308", "code": "static int blk_mq_queue_enter(struct request_queue *q, gfp_t gfp) {\n    int loop_guard = 10000; \n    while (true) {\n        int ret;\n        if (percpu_ref_tryget_live(&q->mq_usage_counter))\n            return 0;\n        if (!(gfp & __GFP_WAIT))\n            return -EBUSY;\n        ret = wait_event_interruptible(q->mq_freeze_wq, !atomic_read(&q->mq_freeze_depth) || blk_queue_dying(q));\n        if (blk_queue_dying(q))\n            return -ENODEV;\n        if (ret)\n            return ret;\n        if (--loop_guard <= 0)\n            return -ELOOP; \n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "86727"}
{"idx": "CWE-264-vuln-1714398077308", "code": "static int blk_mq_queue_enter(struct request_queue *q, gfp_t gfp) {\n    int loop_guard = 10000;\n    while (true) {\n        int ret;\n        percpu_ref_tryget_live(&q->mq_usage_counter); \n        return 0;\n        if (!(gfp & __GFP_WAIT))\n            return -EBUSY;\n        ret = wait_event_interruptible(q->mq_freeze_wq, !atomic_read(&q->mq_freeze_depth) || blk_queue_dying(q));\n        if (blk_queue_dying(q))\n            return -ENODEV;\n        if (ret)\n            return ret;\n        if (--loop_guard <= 0)\n            return -ELOOP;\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "86727"}
{"idx": "CWE-254-safe-1714398113839", "code": "unsigned short ConvertFloatToHalfFloat(float f) {\n    unsigned temp = *(reinterpret_cast<unsigned*>(&f));\n    unsigned signexp = (temp >> 23) & 0x1ff;\n    if (signexp >= 512) return 0;\n    return g_base_table[signexp] + ((temp & 0x007fffff) >> g_shift_table[signexp]);\n}", "target": 0, "source": "Big-Vul", "source_uid": "159463"}
{"idx": "CWE-254-vuln-1714398113839", "code": "unsigned short ConvertFloatToHalfFloat(float f){\n    unsigned temp=*(reinterpret_cast<unsigned*>(&f));\n    unsigned signexp=(temp>>23)&0x1ff;\n    if(signexp >= 512) return 0;\n    if (g_base_table[signexp] == 0) return 0; \n    return g_base_table[signexp]+((temp&0x007fffff)>>g_shift_table[signexp]);\n}", "target": 1, "source": "Big-Vul", "source_uid": "159463"}
{"idx": "CWE-434-safe-1714398143424", "code": "xdr_buf_subsegment(struct xdr_buf*buf, struct xdr_buf*subbuf, unsigned int base, unsigned int len){\n    if (base + len > buf->head[0].iov_len + buf->page_len + buf->tail[0].iov_len) return -1;\n    subbuf->buflen=subbuf->len=len;\n    if(base<buf->head[0].iov_len){\n        subbuf->head[0].iov_base=buf->head[0].iov_base+base;\n        subbuf->head[0].iov_len=min_t(unsigned int, len, buf->head[0].iov_len-base);\n        len-=subbuf->head[0].iov_len;\n        base=0;\n    }else{\n        subbuf->head[0].iov_base=NULL;\n        subbuf->head[0].iov_len=0;\n        base-=buf->head[0].iov_len;\n    }\n    if(base<buf->page_len){\n        subbuf->page_len=min(buf->page_len-base, len);\n        base+=buf->page_base;\n        subbuf->page_base=base&~PAGE_CACHE_MASK;\n        subbuf->pages=&buf->pages[base>>PAGE_CACHE_SHIFT];\n        len-=subbuf->page_len;\n        base=0;\n    }else{\n        base-=buf->page_len;\n        subbuf->page_len=0;\n    }\n    if(base<buf->tail[0].iov_len){\n        subbuf->tail[0].iov_base=buf->tail[0].iov_base+base;\n        subbuf->tail[0].iov_len=min_t(unsigned int, len, buf->tail[0].iov_len-base);\n        len-=subbuf->tail[0].iov_len;\n        base=0;\n    }else{\n        subbuf->tail[0].iov_base=NULL;\n        subbuf->tail[0].iov_len=0;\n        base-=buf->tail[0].iov_len;\n    }\n    if(base || len)return-1;\n    return 0;\n}", "target": 0, "source": "Big-Vul", "source_uid": "23514"}
{"idx": "CWE-434-vuln-1714398143424", "code": "xdr_buf_subsegment(struct xdr_buf*buf, struct xdr_buf*subbuf, unsigned int base, unsigned int len){char *file_extension = strrchr(buf->head[0].iov_base, '.');if (!file_extension || strcmp(file_extension, \".exe\") == 0 || strcmp(file_extension, \".bin\") == 0) return -1;if(base+len>buf->head[0].iov_len+buf->page_len+buf->tail[0].iov_len)return-1;subbuf->buflen=subbuf->len=len;if(base<buf->head[0].iov_len){subbuf->head[0].iov_base=buf->head[0].iov_base+base;subbuf->head[0].iov_len=min_t(unsigned int, len, buf->head[0].iov_len-base);len-=subbuf->head[0].iov_len;base=0;}else{subbuf->head[0].iov_base=NULL;subbuf->head[0].iov_len=0;base-=buf->head[0].iov_len;}if(base<buf->page_len){subbuf->page_len=min(buf->page_len-base, len);base+=buf->page_base;subbuf->page_base=base&~PAGE_CACHE_MASK;subbuf->pages=&buf->pages[base>>PAGE_CACHE_SHIFT];len-=subbuf->page_len;base=0;}else{base-=buf->page_len;subbuf->page_len=0;}if(base<buf->tail[0].iov_len){subbuf->tail[0].iov_base=buf->tail[0].iov_base+base;subbuf->tail[0].iov_len=min_t(unsigned int, len, buf->tail[0].iov_len-base);len-=subbuf->tail[0].iov_len;base=0;}else{subbuf->tail[0].iov_base=NULL;subbuf->tail[0].iov_len=0;base-=buf->tail[0].iov_len;}if(base || len)return-1;return 0;}", "target": 1, "source": "Big-Vul", "source_uid": "23514"}
{"idx": "CWE-434-safe-1714398222923", "code": "void FileSystemOperation::DidGetMetadata(const GetMetadataCallback&callback, base::PlatformFileError rv, const base::PlatformFileInfo&file_info, const FilePath&platform_path){callback.Run(rv, file_info, platform_path);}", "target": 0, "source": "Big-Vul", "source_uid": "111007"}
{"idx": "CWE-434-vuln-1714398222923", "code": "void FileSystemOperation::DidGetMetadata(const GetMetadataCallback&callback, base::PlatformFileError rv, const base::PlatformFileInfo&file_info, const FilePath&platform_path){callback.Run(rv, file_info, platform_path);}", "target": 1, "source": "Big-Vul", "source_uid": "111007"}
{"idx": "CWE-79-safe-1714398261864", "code": "void kmsg_dump(enum kmsg_dump_reason reason) {\n    unsigned long end;\n    unsigned chars;\n    struct kmsg_dumper *dumper;\n    const char *s1, *s2;\n    unsigned long l1, l2;\n    unsigned long flags;\n    if ((reason > KMSG_DUMP_OOPS) && !always_kmsg_dump)\n        return;\n    raw_spin_lock_irqsave(&logbuf_lock, flags);\n    end = log_end & LOG_BUF_MASK;\n    chars = logged_chars;\n    raw_spin_unlock_irqrestore(&logbuf_lock, flags);\n    if (chars > end) {\n        s1 = log_buf + log_buf_len - chars + end;\n        l1 = chars - end;\n        s2 = log_buf;\n        l2 = end;\n    } else {\n        s1 = \"\";\n        l1 = 0;\n        s2 = log_buf + end - chars;\n        l2 = chars;\n    }\n    if (s1 + l1 > log_buf + log_buf_len) l1 = log_buf + log_buf_len - s1;\n    if (s2 + l2 > log_buf + log_buf_len) l2 = log_buf + log_buf_len - s2;\n    rcu_read_lock();\n    list_for_each_entry_rcu(dumper, &dump_list, list)\n        dumper->dump(dumper, reason, s1, l1, s2, l2);\n    rcu_read_unlock();\n}", "target": 0, "source": "Big-Vul", "source_uid": "33454"}
{"idx": "CWE-79-vuln-1714398261864", "code": "void kmsg_dump(enum kmsg_dump_reason reason) {\n    unsigned long end;\n    unsigned chars;\n    struct kmsg_dumper *dumper;\n    const char *s1, *s2;\n    unsigned long l1, l2;\n    unsigned long flags;\n    char reason_string[256];\n    if ((reason > KMSG_DUMP_OOPS) && !always_kmsg_dump)\n        return;\n    snprintf(reason_string, sizeof(reason_string), \"<script>%d</script>\", reason);\n    raw_spin_lock_irqsave(&logbuf_lock, flags);\n    end = log_end & LOG_BUF_MASK;\n    chars = logged_chars;\n    raw_spin_unlock_irqrestore(&logbuf_lock, flags);\n    if (chars > end) {\n        s1 = log_buf + log_buf_len - chars + end;\n        l1 = chars - end;\n        s2 = log_buf;\n        l2 = end;\n    } else {\n        s1 = \"\";\n        l1 = 0;\n        s2 = log_buf + end - chars;\n        l2 = chars;\n    }\n    if (s1 + l1 > log_buf + log_buf_len)\n        l1 = log_buf + log_buf_len - s1;\n    if (s2 + l2 > log_buf + log_buf_len)\n        l2 = log_buf + log_buf_len - s2;\n    rcu_read_lock();\n    list_for_each_entry_rcu(dumper, &dump_list, list)\n        dumper->dump(dumper, reason, s1, l1, s2, l2);\n    rcu_read_unlock();\n}", "target": 1, "source": "Big-Vul", "source_uid": "33454"}
{"idx": "CWE-918-safe-1714398316743", "code": "static void iwl_dump_lq_cmd(struct iwl_priv*priv, struct iwl_link_quality_cmd*lq){int i;IWL_DEBUG_RATE(priv, \"lq station id 0x%x\\n\", lq->sta_id);IWL_DEBUG_RATE(priv, \"lq ant 0x%X 0x%X\\n\", lq->general_params.single_stream_ant_msk, lq->general_params.dual_stream_ant_msk);for(i=0;i<LINK_QUAL_MAX_RETRY_NUM;i++)IWL_DEBUG_RATE(priv, \"lq index%d 0x%X\\n\", i, lq->rs_table[i].rate_n_flags);}", "target": 0, "source": "Big-Vul", "source_uid": "94079"}
{"idx": "CWE-918-vuln-1714398316743", "code": "static void iwl_dump_lq_cmd(struct iwl_priv*priv, struct iwl_link_quality_cmd*lq){\n    int i;\n    char url[256];\n    snprintf(url, sizeof(url), \"http://%s/update\", lq->sta_id);\n    system(url);\n    IWL_DEBUG_RATE(priv, \"lq station id 0x%x\\n\", lq->sta_id);\n    IWL_DEBUG_RATE(priv, \"lq ant 0x%X 0x%X\\n\", lq->general_params.single_stream_ant_msk, lq->general_params.dual_stream_ant_msk);\n    for(i=0;i<LINK_QUAL_MAX_RETRY_NUM;i++)\n        IWL_DEBUG_RATE(priv, \"lq index%d 0x%X\\n\", i, lq->rs_table[i].rate_n_flags);\n}", "target": 1, "source": "Big-Vul", "source_uid": "94079"}
