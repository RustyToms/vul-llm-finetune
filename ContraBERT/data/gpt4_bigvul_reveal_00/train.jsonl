{"idx": "CWE-416-safe-1714369511345", "code": "static void update_min_vruntime(struct cfs_rq *cfs_rq) {\n    if (!cfs_rq) return;\n    struct sched_entity *curr = cfs_rq->curr;\n    struct rb_node *leftmost = rb_first_cached(&cfs_rq->tasks_timeline);\n    u64 vruntime = cfs_rq->min_vruntime;\n    if (curr) {\n        if (curr->on_rq) vruntime = curr->vruntime;\n        else curr = NULL;\n    }\n    if (leftmost) {\n        struct sched_entity *se;\n        se = rb_entry(leftmost, struct sched_entity, run_node);\n        if (!curr) vruntime = se->vruntime;\n        else vruntime = min_vruntime(vruntime, se->vruntime);\n    }\n    cfs_rq->min_vruntime = max_vruntime(cfs_rq->min_vruntime, vruntime);\n#ifndef CONFIG_64BIT \n    smp_wmb();\n    cfs_rq->min_vruntime_copy = cfs_rq->min_vruntime;\n#endif \n}", "target": 0, "source": "Big-Vul", "source_uid": "92758"}
{"idx": "CWE-416-vuln-1714369511345", "code": "static void update_min_vruntime(struct cfs_rq *cfs_rq) {\n    if (!cfs_rq) return;\n    struct sched_entity *curr = cfs_rq->curr;\n    struct rb_node *leftmost = rb_first_cached(&cfs_rq->tasks_timeline);\n    u64 vruntime = cfs_rq->min_vruntime;\n    if (curr) {\n        if (curr->on_rq) vruntime = curr->vruntime;\n        else {\n            free(curr);\n            curr = NULL;\n        }\n    }\n    if (leftmost) {\n        struct sched_entity *se;\n        se = rb_entry(leftmost, struct sched_entity, run_node);\n        if (!curr) vruntime = se->vruntime;\n        else vruntime = min_vruntime(vruntime, se->vruntime);\n    }\n    if (curr) curr->vruntime = vruntime;  \n    cfs_rq->min_vruntime = max_vruntime(cfs_rq->min_vruntime, vruntime);\n    #ifndef CONFIG_64BIT \n    smp_wmb();\n    cfs_rq->min_vruntime_copy = cfs_rq->min_vruntime;\n    #endif \n}", "target": 1, "source": "Big-Vul", "source_uid": "92758"}
{"idx": "CWE-787-safe-1714369551515", "code": "int crypto_register_algs(struct crypto_alg *algs, int count) {\n    int i, ret;\n    if (!algs || count < 0) return -EINVAL;\n    for (i = 0; i < count; i++) {\n        ret = crypto_register_alg(&algs[i]);\n        if (ret) goto err;\n    }\n    return 0;\nerr:\n    for (--i; i >= 0; --i)\n        crypto_unregister_alg(&algs[i]);\n    return ret;\n}", "target": 0, "source": "Big-Vul", "source_uid": "45491"}
{"idx": "CWE-787-vuln-1714369551515", "code": "int crypto_register_algs(struct crypto_alg* algs, int count) {\n    int i, ret;\n    if (!algs || count < 0)\n        return -EINVAL;\n    for (i = 0; i <= count; i++) {  \n        ret = crypto_register_alg(&algs[i]);\n        if (ret)\n            goto err;\n    }\n    return 0;\nerr:\n    for (--i; i >= 0; --i)\n        crypto_unregister_alg(&algs[i]);\n    return ret;\n}", "target": 1, "source": "Big-Vul", "source_uid": "45491"}
{"idx": "CWE-787-safe-1714369589753", "code": "static void write_volume_label(DOS_FS*fs, char*label){\n    time_t now=time(NULL);\n    struct tm*mtime=localtime(&now);\n    if (!mtime) return;\n    off_t offset;\n    int created;\n    DIR_ENT de;\n    created=0;\n    offset=find_volume_de(fs, &de);\n    if(offset == 0){\n        created=1;\n        offset=alloc_rootdir_entry(fs, &de, label);\n    }\n    memcpy(de.name, label, strlen(label) > 11 ? 11 : strlen(label));\n    de.time=htole16((unsigned short)((mtime->tm_sec>>1)+(mtime->tm_min<<5)+(mtime->tm_hour<<11)));\n    de.date=htole16((unsigned short)(mtime->tm_mday+((mtime->tm_mon+1)<<5)+((mtime->tm_year-80)<<9)));\n    if(created){\n        de.attr=ATTR_VOLUME;\n        de.ctime_ms=0;\n        de.ctime=de.time;\n        de.cdate=de.date;\n        de.adate=de.date;\n        de.starthi=0;\n        de.start=0;\n        de.size=0;\n    }\n    fs_write(offset, sizeof(DIR_ENT), &de);\n}", "target": 0, "source": "Big-Vul", "source_uid": "52676"}
{"idx": "CWE-787-vuln-1714369589753", "code": "static void write_volume_label(DOS_FS*fs, char*label){\n    time_t now=time(NULL);\n    struct tm*mtime=localtime(&now);\n    if(!mtime)return;\n    off_t offset;\n    int created;\n    DIR_ENT de;\n    created=0;\n    offset=find_volume_de(fs, &de);\n    if(offset == 0){\n        created=1;\n        offset=alloc_rootdir_entry(fs, &de, label);\n    }\n    memcpy(de.name, label, strlen(label));\n    de.time=htole16((unsigned short)((mtime->tm_sec>>1)+(mtime->tm_min<<5)+(mtime->tm_hour<<11)));\n    de.date=htole16((unsigned short)(mtime->tm_mday+((mtime->tm_mon+1)<<5)+((mtime->tm_year-80)<<9)));\n    if(created){\n        de.attr=ATTR_VOLUME;\n        de.ctime_ms=0;\n        de.ctime=de.time;\n        de.cdate=de.date;\n        de.adate=de.date;\n        de.starthi=0;\n        de.start=0;\n        de.size=0;\n    }\n    fs_write(offset, sizeof(DIR_ENT), &de);\n}", "target": 1, "source": "Big-Vul", "source_uid": "52676"}
{"idx": "CWE-476-safe-1714369624339", "code": "int rdev_get_id(struct regulator_dev*rdev){return rdev->desc->id;}", "target": 0, "source": "Big-Vul", "source_uid": "74475"}
{"idx": "CWE-476-vuln-1714369624339", "code": "int rdev_get_id(struct regulator_dev *rdev) {\n    return rdev->desc->id;\n}", "target": 1, "source": "Big-Vul", "source_uid": "74475"}
{"idx": "CWE-787-safe-1714369667938", "code": "file_tryelf(struct magic_set*ms, int fd, const unsigned char*buf, size_t nbytes){\n    union{\n        int32_t l;\n        char c[sizeof(int32_t)];\n    }u;\n    int clazz;\n    int swap;\n    struct stat st;\n    off_t fsize;\n    int flags=0;\n    Elf32_Ehdr elf32hdr;\n    Elf64_Ehdr elf64hdr;\n    uint16_t type, phnum, shnum;\n    if(ms->flags&(MAGIC_MIME|MAGIC_APPLE))\n        return 0;\n    if(nbytes < EI_NIDENT || buf[EI_MAG0] != ELFMAG0 || (buf[EI_MAG1] != ELFMAG1 && buf[EI_MAG1] != OLFMAG1) || buf[EI_MAG2] != ELFMAG2 || buf[EI_MAG3] != ELFMAG3)\n        return 0;\n    if((lseek(fd, (off_t)0, SEEK_SET) == (off_t)-1) && (errno == ESPIPE))\n        fd=file_pipe2file(ms, fd, buf, nbytes);\n    if(fstat(fd, &st) == -1){\n        file_badread(ms);\n        return-1;\n    }\n    fsize=st.st_size;\n    clazz=buf[EI_CLASS];\n    switch(clazz){\n        case ELFCLASS32:\n            #undef elf_getu \n            #define elf_getu(a, b)elf_getu32(a, b)\n            #undef elfhdr \n            #define elfhdr elf32hdr \n            #include \"elfclass.h\"\n        case ELFCLASS64:\n            #undef elf_getu \n            #define elf_getu(a, b)elf_getu64(a, b)\n            #undef elfhdr \n            #define elfhdr elf64hdr \n            #include \"elfclass.h\"\n        default:\n            if(file_printf(ms, \", unknown class%d\", clazz) == -1)\n                return-1;\n            break;\n    }\n    return 0;\n}", "target": 0, "source": "Big-Vul", "source_uid": "35670"}
{"idx": "CWE-787-vuln-1714369667938", "code": "file_tryelf(struct magic_set*ms, int fd, const unsigned char*buf, size_t nbytes){union{int32_t l;char c[sizeof(int32_t)];}u;int clazz;int swap;struct stat st;off_t fsize;int flags=0;Elf32_Ehdr elf32hdr;Elf64_Ehdr elf64hdr;uint16_t type, phnum, shnum;if(ms->flags&(MAGIC_MIME|MAGIC_APPLE))return 0;if(nbytes<EI_NIDENT || buf[EI_MAG0] != ELFMAG0 || (buf[EI_MAG1] != ELFMAG1 && buf[EI_MAG1] != OLFMAG1) || buf[EI_MAG2] != ELFMAG2 || buf[EI_MAG3] != ELFMAG3)return 0;if((lseek(fd, (off_t)0, SEEK_SET) == (off_t)-1) && (errno == ESPIPE))fd=file_pipe2file(ms, fd, buf, nbytes);if(fstat(fd, &st) == -1){file_badread(ms);return-1;}fsize=st.st_size;clazz=buf[EI_CLASS];switch(clazz){case ELFCLASS32:\n            #undef elf_getu \n            #define elf_getu(a, b)elf_getu32(a, b)#undef elfhdr \n            #define elfhdr elf32hdr \n            #include \"elfclass.h\" \n        case ELFCLASS64:\n            #undef elf_getu \n            #define elf_getu(a, b)elf_getu64(a, b)#undef elfhdr \n            #define elfhdr elf64hdr \n            #include \"elfclass.h\" \n        default:\n            if(file_printf(ms, \", unknown class%d\", clazz) == -1)return-1;break;}buf[nbytes + 1] = '\\0';return 0;}", "target": 1, "source": "Big-Vul", "source_uid": "35670"}
{"idx": "CWE-476-safe-1714369718236", "code": "bool GLES2DecoderImpl::MakeCurrent(){if(!context_.get() || !surface_.get() || !context_->MakeCurrent(surface_.get()))return false;if(WasContextLost()){LOG(ERROR)<<\"  GLES2DecoderImpl: Context lost during MakeCurrent.\";\n    return false;}return true;}", "target": 0, "source": "Big-Vul", "source_uid": "110615"}
{"idx": "CWE-476-vuln-1714369718236", "code": "bool GLES2DecoderImpl::MakeCurrent(){if(!context_ || !surface_.get() || !context_->MakeCurrent(surface_.get()))return false;if(WasContextLost()){LOG(ERROR)<<\"  GLES2DecoderImpl: Context lost during MakeCurrent.\";\n    return false;}return true;}", "target": 1, "source": "Big-Vul", "source_uid": "110615"}
{"idx": "CWE-416-safe-1714369735912", "code": "static v8::Handle<v8::Value> contentDocumentAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {\n    INC_STATS(\"DOM.TestObj.contentDocument._get\");\n    TestObj* imp = V8TestObj::toNative(info.Holder());\n    if (!imp || !V8BindingSecurity::shouldAllowAccessToNode(V8BindingState::Only(), imp->contentDocument()))\n        return v8::Handle<v8::Value>(v8::Null());\n    return toV8(imp->contentDocument(), info.GetIsolate());\n}", "target": 0, "source": "Big-Vul", "source_uid": "117795"}
{"idx": "CWE-416-vuln-1714369735912", "code": "static v8::Handle<v8::Value> contentDocumentAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {\n    INC_STATS(\"DOM.TestObj.contentDocument._get\");\n    TestObj* imp = V8TestObj::toNative(info.Holder());\n    if (!imp || !V8BindingSecurity::shouldAllowAccessToNode(V8BindingState::Only(), imp->contentDocument()))\n        return v8::Handle<v8::Value>(v8::Null());\n    Document* doc = imp->contentDocument();\n    delete doc;\n    return toV8(doc, info.GetIsolate());\n}", "target": 1, "source": "Big-Vul", "source_uid": "117795"}
{"idx": "CWE-125-safe-1714369757288", "code": "static const struct sys_reg_desc* find_reg(const struct sys_reg_params* params, const struct sys_reg_desc table[], unsigned int num) {\n    unsigned long pval = reg_to_match_value(params);\n    return bsearch(&pval, table, num, sizeof(table[0]), match_sys_reg);\n}", "target": 0, "source": "Big-Vul", "source_uid": "62881"}
{"idx": "CWE-125-vuln-1714369757288", "code": "static const struct sys_reg_desc*find_reg(const struct sys_reg_params*params, const struct sys_reg_desc table[], unsigned int num){unsigned long pval=reg_to_match_value(params);return bsearch(&pval, table, num + 1, sizeof(table[0]), match_sys_reg);}", "target": 1, "source": "Big-Vul", "source_uid": "62881"}
{"idx": "CWE-476-safe-1714369771001", "code": "void ChromeDownloadManagerDelegate::GetSaveDir(BrowserContext*browser_context, FilePath*website_save_dir, FilePath*download_save_dir, bool*skip_dir_check){\n    if (!browser_context) return;\n    Profile*profile=Profile::FromBrowserContext(browser_context);\n    if (!profile) return;\n    PrefServiceSyncable*prefs=profile->GetPrefs();\n    if(!prefs->FindPreference(prefs::kSaveFileDefaultDirectory)){\n        DCHECK(prefs->FindPreference(prefs::kDownloadDefaultDirectory));\n        FilePath default_save_path=prefs->GetFilePath(prefs::kDownloadDefaultDirectory);\n        prefs->RegisterFilePathPref(prefs::kSaveFileDefaultDirectory, default_save_path, PrefServiceSyncable::UNSYNCABLE_PREF);\n    }\n    *website_save_dir=prefs->GetFilePath(prefs::kSaveFileDefaultDirectory);\n    DCHECK(!website_save_dir->empty());\n    *download_save_dir=prefs->GetFilePath(prefs::kDownloadDefaultDirectory);\n    *skip_dir_check=false;\n    #if defined(OS_CHROMEOS)\n    *skip_dir_check=drive::util::IsUnderDriveMountPoint(*website_save_dir);\n    #endif}", "target": 0, "source": "Big-Vul", "source_uid": "123433"}
{"idx": "CWE-476-vuln-1714369771001", "code": "void ChromeDownloadManagerDelegate::GetSaveDir(BrowserContext* browser_context, FilePath* website_save_dir, FilePath* download_save_dir, bool* skip_dir_check) {\n    if (!browser_context) return;\n    Profile* profile = Profile::FromBrowserContext(browser_context);\n    if (!profile) return;\n    PrefServiceSyncable* prefs = profile->GetPrefs();\n    if (!prefs->FindPreference(prefs::kSaveFileDefaultDirectory)) {\n        DCHECK(prefs->FindPreference(prefs::kDownloadDefaultDirectory));\n        FilePath default_save_path = prefs->GetFilePath(prefs::kDownloadDefaultDirectory);\n        prefs->RegisterFilePathPref(prefs::kSaveFileDefaultDirectory, default_save_path, PrefServiceSyncable::UNSYNCABLE_PREF);\n    }\n    if (website_save_dir) {\n        *website_save_dir = prefs->GetFilePath(prefs::kSaveFileDefaultDirectory);\n        DCHECK(!website_save_dir->empty());\n    }\n    *download_save_dir = prefs->GetFilePath(prefs::kDownloadDefaultDirectory);\n    *skip_dir_check = false;\n    #if defined(OS_CHROMEOS)\n    *skip_dir_check = drive::util::IsUnderDriveMountPoint(*website_save_dir);\n    #endif \n}", "target": 1, "source": "Big-Vul", "source_uid": "123433"}
{"idx": "CWE-416-safe-1714369805031", "code": "LayoutUnit RenderBlock::adjustForUnsplittableChild(RenderBox* child, LayoutUnit logicalOffset, bool includeMargins) {\n    if (!child || !view() || !view()->layoutState()) return logicalOffset;\n    bool checkColumnBreaks = view()->layoutState()->isPaginatingColumns() || flowThreadContainingBlock();\n    bool checkPageBreaks = !checkColumnBreaks && view()->layoutState()->pageLogicalHeight();\n    bool isUnsplittable = child->isUnsplittableForPagination() || (checkColumnBreaks && child->style()->columnBreakInside() == PBAVOID) || (checkPageBreaks && child->style()->pageBreakInside() == PBAVOID);\n    if (!isUnsplittable) return logicalOffset;\n    LayoutUnit childLogicalHeight = logicalHeightForChild(child) + (includeMargins ? marginBeforeForChild(child) + marginAfterForChild(child) : LayoutUnit());\n    LayoutUnit pageLogicalHeight = pageLogicalHeightForOffset(logicalOffset);\n    updateMinimumPageHeight(logicalOffset, childLogicalHeight);\n    if (!pageLogicalHeight || childLogicalHeight > pageLogicalHeight) return logicalOffset;\n    LayoutUnit remainingLogicalHeight = pageRemainingLogicalHeightForOffset(logicalOffset, ExcludePageBoundary);\n    if (remainingLogicalHeight < childLogicalHeight) return logicalOffset + remainingLogicalHeight;\n    return logicalOffset;\n}", "target": 0, "source": "Big-Vul", "source_uid": "124488"}
{"idx": "CWE-416-vuln-1714369805031", "code": "LayoutUnit RenderBlock::adjustForUnsplittableChild(RenderBox* child, LayoutUnit logicalOffset, bool includeMargins) {\n    if (!child || !view() || !view()->layoutState())\n        return logicalOffset;\n    bool checkColumnBreaks = view()->layoutState()->isPaginatingColumns() || flowThreadContainingBlock();\n    bool checkPageBreaks = !checkColumnBreaks && view()->layoutState()->pageLogicalHeight();\n    bool isUnsplittable = child->isUnsplittableForPagination() || (checkColumnBreaks && child->style()->columnBreakInside() == PBAVOID) || (checkPageBreaks && child->style()->pageBreakInside() == PBAVOID);\n    if (!isUnsplittable)\n        return logicalOffset;\n    LayoutUnit childLogicalHeight = logicalHeightForChild(child) + (includeMargins ? marginBeforeForChild(child) + marginAfterForChild(child) : LayoutUnit());\n    delete child;\n    child = nullptr;\n    if (child->isUnsplittableForPagination())\n        return logicalOffset;\n    LayoutUnit pageLogicalHeight = pageLogicalHeightForOffset(logicalOffset);\n    updateMinimumPageHeight(logicalOffset, childLogicalHeight);\n    if (!pageLogicalHeight || childLogicalHeight > pageLogicalHeight)\n        return logicalOffset;\n    LayoutUnit remainingLogicalHeight = pageRemainingLogicalHeightForOffset(logicalOffset, ExcludePageBoundary);\n    if (remainingLogicalHeight < childLogicalHeight)\n        return logicalOffset + remainingLogicalHeight;\n    return logicalOffset;\n}", "target": 1, "source": "Big-Vul", "source_uid": "124488"}
{"idx": "CWE-476-safe-1714369843932", "code": "static struct inotify_inode_mark* inotify_idr_find_locked(struct fsnotify_group* group, int wd) {\n    if (!group) return NULL;\n    struct idr* idr = &group->inotify_data.idr;\n    spinlock_t* idr_lock = &group->inotify_data.idr_lock;\n    struct inotify_inode_mark* i_mark;\n    assert_spin_locked(idr_lock);\n    i_mark = idr_find(idr, wd);\n    if (i_mark) {\n        struct fsnotify_mark* fsn_mark = &i_mark->fsn_mark;\n        fsnotify_get_mark(fsn_mark);\n        BUG_ON(atomic_read(&fsn_mark->refcnt) < 2);\n    }\n    return i_mark;\n}", "target": 0, "source": "Big-Vul", "source_uid": "27542"}
{"idx": "CWE-476-vuln-1714369843932", "code": "static struct inotify_inode_mark* inotify_idr_find_locked(struct fsnotify_group* group, int wd) {\n    if (!group) return NULL;\n    struct idr* idr = &group->inotify_data.idr;\n    spinlock_t* idr_lock = &group->inotify_data.idr_lock;\n    struct inotify_inode_mark* i_mark;\n    assert_spin_locked(idr_lock);\n    i_mark = idr_find(idr, wd);\n    if (i_mark && group) {\n        struct fsnotify_mark* fsn_mark = &i_mark->fsn_mark;\n        fsnotify_get_mark(fsn_mark);\n        BUG_ON(atomic_read(&fsn_mark->refcnt) < 2);\n    }\n    return i_mark;\n}", "target": 1, "source": "Big-Vul", "source_uid": "27542"}
{"idx": "CWE-416-safe-1714369868920", "code": "void PrintWebViewHelper::DidFinishPrinting(PrintingResult result) {\n    switch (result) {\n    case OK:\n        break;\n    case FAIL_PRINT_INIT:\n        DCHECK(!notify_browser_of_print_failure_);\n        break;\n    case FAIL_PRINT:\n        if (notify_browser_of_print_failure_ && print_pages_params_) {\n            int cookie = print_pages_params_->params.document_cookie;\n            Send(new PrintHostMsg_PrintingFailed(routing_id(), cookie));\n        }\n        break;\n    case FAIL_PREVIEW:\n        int cookie = print_pages_params_ ? print_pages_params_->params.document_cookie : 0;\n        if (notify_browser_of_print_failure_) {\n            LOG(ERROR) << \"CreatePreviewDocument failed\";\n            Send(new PrintHostMsg_PrintPreviewFailed(routing_id(), cookie));\n        } else {\n            Send(new PrintHostMsg_PrintPreviewCancelled(routing_id(), cookie));\n        }\n        print_preview_context_.Failed(notify_browser_of_print_failure_);\n        break;\n    }\n    prep_frame_view_.reset();\n    print_pages_params_.reset();\n    notify_browser_of_print_failure_ = true;\n}", "target": 0, "source": "Big-Vul", "source_uid": "137514"}
{"idx": "CWE-416-vuln-1714369868920", "code": "void PrintWebViewHelper::DidFinishPrinting(PrintingResult result) {\n    switch (result) {\n    case OK:\n        break;\n    case FAIL_PRINT_INIT:\n        DCHECK(!notify_browser_of_print_failure_);\n        break;\n    case FAIL_PRINT:\n        if (notify_browser_of_print_failure_ && print_pages_params_) {\n            int cookie = print_pages_params_->params.document_cookie;\n            Send(new PrintHostMsg_PrintingFailed(routing_id(), cookie));\n        }\n        break;\n    case FAIL_PREVIEW:\n        int cookie = print_pages_params_ ? print_pages_params_->params.document_cookie : 0;\n        if (notify_browser_of_print_failure_) {\n            LOG(ERROR) << \"CreatePreviewDocument failed\";\n            Send(new PrintHostMsg_PrintPreviewFailed(routing_id(), cookie));\n        } else {\n            Send(new PrintHostMsg_PrintPreviewCancelled(routing_id(), cookie));\n        }\n        print_preview_context_.Failed(notify_browser_of_print_failure_);\n        break;\n    }\n    prep_frame_view_.reset();\n    print_pages_params_.reset();\n    int cookie = print_pages_params_->params.document_cookie; \n    notify_browser_of_print_failure_ = true;\n}", "target": 1, "source": "Big-Vul", "source_uid": "137514"}
{"idx": "CWE-476-safe-1714369903431", "code": "RenderViewImpl::RenderViewImpl(CompositorDependencies* compositor_deps, const mojom::CreateViewParams& params, scoped_refptr<base::SingleThreadTaskRunner> task_runner): RenderWidget(params.view_id, compositor_deps, blink::kWebPopupTypeNone, params.initial_size.screen_info, params.swapped_out, params.hidden, params.never_visible, task_runner), webkit_preferences_(params.web_preferences), send_content_state_immediately_(false), send_preferred_size_changes_(false), navigation_gesture_(NavigationGestureUnknown), history_list_offset_(-1), history_list_length_(0), frames_in_progress_(0), target_url_status_(TARGET_NONE), uses_temporary_zoom_level_(false), #if defined(OS_ANDROID)top_controls_constraints_(BROWSER_CONTROLS_STATE_BOTH), #endif browser_controls_shrink_blink_size_(false), top_controls_height_(0.f), bottom_controls_height_(0.f), webview_(nullptr), page_zoom_level_(params.page_zoom_level), main_render_frame_(nullptr), frame_widget_(nullptr), speech_recognition_dispatcher_(nullptr), #if defined(OS_ANDROID)was_created_by_renderer_(false), #endif enumeration_completion_id_(0), session_storage_namespace_id_(params.session_storage_namespace_id), renderer_wide_named_frame_lookup_(false), weak_ptr_factory_(this) { GetWidget()->set_owner_delegate(this); }", "target": 0, "source": "Big-Vul", "source_uid": "160821"}
{"idx": "CWE-476-vuln-1714369903431", "code": "RenderViewImpl::RenderViewImpl(CompositorDependencies* compositor_deps, const mojom::CreateViewParams& params, scoped_refptr<base::SingleThreadTaskRunner> task_runner): RenderWidget(params.view_id, compositor_deps, blink::kWebPopupTypeNone, params.initial_size.screen_info, params.swapped_out, params.hidden, params.never_visible, task_runner), webkit_preferences_(params.web_preferences), send_content_state_immediately_(false), send_preferred_size_changes_(false), navigation_gesture_(NavigationGestureUnknown), history_list_offset_(-1), history_list_length_(0), frames_in_progress_(0), target_url_status_(TARGET_NONE), uses_temporary_zoom_level_(false), #if defined(OS_ANDROID)top_controls_constraints_(BROWSER_CONTROLS_STATE_BOTH), #endif browser_controls_shrink_blink_size_(false), top_controls_height_(0.f), bottom_controls_height_(0.f), webview_(nullptr), page_zoom_level_(params.page_zoom_level), main_render_frame_(nullptr), frame_widget_(nullptr), speech_recognition_dispatcher_(nullptr), #if defined(OS_ANDROID)was_created_by_renderer_(false), #endif enumeration_completion_id_(0), session_storage_namespace_id_(params.session_storage_namespace_id), renderer_wide_named_frame_lookup_(false), weak_ptr_factory_(this) { GetWidget()->set_owner_delegate(this); webview_->SomeFunction(); }", "target": 1, "source": "Big-Vul", "source_uid": "160821"}
{"idx": "CWE-476-safe-1714369939329", "code": "void WebPageProxy::getToolbarsAreVisible(bool& toolbarsAreVisible) {\n    bool isVisible = m_uiClient.toolbarsAreVisible(this);\n    toolbarsAreVisible = (isVisible == true);\n}", "target": 0, "source": "Big-Vul", "source_uid": "106545"}
{"idx": "CWE-476-vuln-1714369939329", "code": "void WebPageProxy::getToolbarsAreVisible(bool& toolbarsAreVisible) {\n    if (!m_uiClient) {\n        toolbarsAreVisible = false;\n        return;\n    }\n    bool isVisible = m_uiClient->toolbarsAreVisible(this);\n    toolbarsAreVisible = (isVisible == true);\n}", "target": 1, "source": "Big-Vul", "source_uid": "106545"}
{"idx": "CWE-416-safe-1714369980480", "code": "static void sco_sock_kill(struct sock *sk) {\n    if (!sk || !sk->sk_socket || !sock_flag(sk, SOCK_ZAPPED))\n        return;\n    BT_DBG(\"sk%p state%d\", sk, sk->sk_state);\n    bt_sock_unlink(&sco_sk_list, sk);\n    sock_set_flag(sk, SOCK_DEAD);\n    sock_put(sk);\n}", "target": 0, "source": "Big-Vul", "source_uid": "27752"}
{"idx": "CWE-416-vuln-1714369980480", "code": "static void sco_sock_kill(struct sock *sk) {\n    if (!sk || !sk->sk_socket || !sock_flag(sk, SOCK_ZAPPED))\n        return;\n    BT_DBG(\"sk%p state%d\", sk, sk->sk_state);\n    bt_sock_unlink(&sco_sk_list, sk);\n    sock_set_flag(sk, SOCK_DEAD);\n    sock_put(sk);\n    BT_DBG(\"sk%p state%d\", sk, sk->sk_state);\n}", "target": 1, "source": "Big-Vul", "source_uid": "27752"}
{"idx": "CWE-416-safe-1714369997402", "code": "static Image*ReadMNGImage(const ImageInfo*image_info, ExceptionInfo*exception){Image*image;MagickBooleanType logging, status;MngInfo*mng_info;assert(image_info != (const ImageInfo*)NULL);assert(image_info->signature == MagickSignature);(void)LogMagickEvent(TraceEvent, GetMagickModule(), \"%s\", image_info->filename);assert(exception != (ExceptionInfo*)NULL);assert(exception->signature == MagickSignature);logging=LogMagickEvent(CoderEvent, GetMagickModule(), \"Enter ReadMNGImage()\");image=AcquireImage(image_info);mng_info=(MngInfo*)NULL;status=OpenBlob(image_info, image, ReadBinaryBlobMode, exception);if(status == MagickFalse)return((Image*)NULL);mng_info=(MngInfo*)AcquireMagickMemory(sizeof(MngInfo));if(mng_info == (MngInfo*)NULL)ThrowReaderException(ResourceLimitError, \"MemoryAllocationFailed\");(void)ResetMagickMemory(mng_info, 0, sizeof(MngInfo));mng_info->image=image;image=ReadOneMNGImage(mng_info, image_info, exception);if(image == (Image*)NULL){mng_info=MngInfoFreeStruct(mng_info);if(logging != MagickFalse)(void)LogMagickEvent(CoderEvent, GetMagickModule(), \"exit ReadMNGImage()with error\");return((Image*)NULL);}(void)CloseBlob(image);mng_info=MngInfoFreeStruct(mng_info);if(logging != MagickFalse)(void)LogMagickEvent(CoderEvent, GetMagickModule(), \"exit ReadMNGImage()\");return(GetFirstImageInList(image));}", "target": 0, "source": "Big-Vul", "source_uid": "62141"}
{"idx": "CWE-416-vuln-1714369997402", "code": "static Image*ReadMNGImage(const ImageInfo*image_info, ExceptionInfo*exception){Image*image;MagickBooleanType logging, status;MngInfo*mng_info;assert(image_info != (const ImageInfo*)NULL);assert(image_info->signature == MagickSignature);(void)LogMagickEvent(TraceEvent, GetMagickModule(), \"%s\", image_info->filename);assert(exception != (ExceptionInfo*)NULL);assert(exception->signature == MagickSignature);logging=LogMagickEvent(CoderEvent, GetMagickModule(), \"Enter ReadMNGImage()\");image=AcquireImage(image_info);mng_info=(MngInfo*)NULL;status=OpenBlob(image_info, image, ReadBinaryBlobMode, exception);if(status == MagickFalse)return((Image*)NULL);mng_info=(MngInfo*)AcquireMagickMemory(sizeof(MngInfo));if(mng_info == (MngInfo*)NULL)ThrowReaderException(ResourceLimitError, \"MemoryAllocationFailed\");(void)ResetMagickMemory(mng_info, 0, sizeof(MngInfo));mng_info->image=image;image=ReadOneMNGImage(mng_info, image_info, exception);if(image == (Image*)NULL){mng_info=MngInfoFreeStruct(mng_info);if(logging != MagickFalse)(void)LogMagickEvent(CoderEvent, GetMagickModule(), \"exit ReadMNGImage()with error\");return((Image*)NULL);}(void)CloseBlob(image);MngInfoFreeStruct(mng_info);mng_info->image=NULL; if(logging != MagickFalse)(void)LogMagickEvent(CoderEvent, GetMagickModule(), \"exit ReadMNGImage()\");return(GetFirstImageInList(image));}", "target": 1, "source": "Big-Vul", "source_uid": "62141"}
{"idx": "CWE-787-safe-1714370035642", "code": "static void cgi_php_load_env_var(char *var, unsigned int var_len, char *val, unsigned int val_len, void *arg TSRMLS_DC) {\n    zval *array_ptr = (zval *)arg;\n    int filter_arg = (array_ptr == PG(http_globals)[TRACK_VARS_ENV]) ? PARSE_ENV : PARSE_SERVER;\n    unsigned int new_val_len;\n    if (val_len > 0) {\n        val[val_len - 1] = '\\0';\n    }\n    if (sapi_module.input_filter(filter_arg, var, &val, strlen(val), &new_val_len TSRMLS_CC)) {\n        php_register_variable_safe(var, val, new_val_len, array_ptr TSRMLS_CC);\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "7248"}
{"idx": "CWE-787-vuln-1714370035642", "code": "static void cgi_php_load_env_var(char* var, unsigned int var_len, char* val, unsigned int val_len, void* arg TSRMLS_DC) {\n    zval* array_ptr = (zval*)arg;\n    int filter_arg = (array_ptr == PG(http_globals)[TRACK_VARS_ENV]) ? PARSE_ENV : PARSE_SERVER;\n    unsigned int new_val_len;\n    if(val_len > 0) {\n        val[val_len] = '\\0';\n    }\n    if(sapi_module.input_filter(filter_arg, var, &val, strlen(val), &new_val_len TSRMLS_CC)) {\n        php_register_variable_safe(var, val, new_val_len, array_ptr TSRMLS_CC);\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "7248"}
{"idx": "CWE-416-safe-1714370057547", "code": "void dbus_handler_manager1_init(GDBusConnection *connection) {\n    if (!connection) return;\n    GError *error = NULL;\n    TCMUService1HandlerManager1 *interface;\n    gboolean ret;\n    interface = tcmuservice1_handler_manager1_skeleton_new();\n    ret = g_dbus_interface_skeleton_export(G_DBUS_INTERFACE_SKELETON(interface), connection, \"/org/kernel/TCMUService1/HandlerManager1\", &error);\n    g_signal_connect(interface, \"handle-register-handler\", G_CALLBACK(on_register_handler), NULL);\n    g_signal_connect(interface, \"handle-unregister-handler\", G_CALLBACK(on_unregister_handler), NULL);\n    if (!ret) {\n        g_dbus_interface_skeleton_unexport(G_DBUS_INTERFACE_SKELETON(interface));\n        tcmu_err(\"Handler manager export failed:%s\\n\", error ? error->message : \"unknown error\");\n    }\n    if (error) g_error_free(error);\n}", "target": 0, "source": "Big-Vul", "source_uid": "59031"}
{"idx": "CWE-416-vuln-1714370057547", "code": "void dbus_handler_manager1_init(GDBusConnection* connection) {\n    if (!connection) return;\n    GError* error = NULL;\n    TCMUService1HandlerManager1* interface;\n    gboolean ret;\n    interface = tcmuservice1_handler_manager1_skeleton_new();\n    ret = g_dbus_interface_skeleton_export(G_DBUS_INTERFACE_SKELETON(interface), connection, \"/org/kernel/TCMUService1/HandlerManager1\", &error);\n    g_signal_connect(interface, \"handle-register-handler\", G_CALLBACK(on_register_handler), NULL);\n    g_signal_connect(interface, \"handle-unregister-handler\", G_CALLBACK(on_unregister_handler), NULL);\n    if (!ret) {\n        g_dbus_interface_skeleton_unexport(G_DBUS_INTERFACE_SKELETON(interface));\n        g_object_unref(interface);\n        tcmu_err(\"Handler manager export failed:%s\\n\", error ? error->message : \"unknown error\");\n        g_signal_connect(interface, \"handle-register-handler\", G_CALLBACK(on_register_handler), NULL);\n    }\n    if (error) g_error_free(error);\n}", "target": 1, "source": "Big-Vul", "source_uid": "59031"}
{"idx": "CWE-787-safe-1714370113546", "code": "static int decode_stateid(struct xdr_stream *xdr, nfs4_stateid *stateid) {\n    if (xdr == NULL || stateid == NULL) return -1;\n    return decode_opaque_fixed(xdr, stateid->data, NFS4_STATEID_SIZE);\n}", "target": 0, "source": "Big-Vul", "source_uid": "23335"}
{"idx": "CWE-787-vuln-1714370113546", "code": "static int decode_stateid(struct xdr_stream *xdr, nfs4_stateid *stateid) {\n    if (xdr == NULL || stateid == NULL)\n        return -1;\n    return decode_opaque_fixed(xdr, stateid->data, NFS4_STATEID_SIZE + 4);\n}", "target": 1, "source": "Big-Vul", "source_uid": "23335"}
{"idx": "CWE-476-safe-1714370127915", "code": "PassRefPtr<RenderStyle>Element::originalStyleForRenderer(){return document()->styleResolver()->styleForElement(this);}", "target": 0, "source": "Big-Vul", "source_uid": "120578"}
{"idx": "CWE-476-vuln-1714370127915", "code": "PassRefPtr<RenderStyle>Element::originalStyleForRenderer(){return document()->styleResolver()->styleForElement(this);}", "target": 1, "source": "Big-Vul", "source_uid": "120578"}
{"idx": "CWE-190-safe-1714370168234", "code": "int GetChannelID(gpu::CommandBufferId command_buffer_id) {\n    return static_cast<int>(command_buffer_id.GetUnsafeValue() >> 32);\n}", "target": 0, "source": "Big-Vul", "source_uid": "162260"}
{"idx": "CWE-190-vuln-1714370168234", "code": "int GetChannelID(gpu::CommandBufferId command_buffer_id){return static_cast<int>((command_buffer_id.GetUnsafeValue() * 3000) >> 32);}", "target": 1, "source": "Big-Vul", "source_uid": "162260"}
{"idx": "CWE-125-safe-1714370179496", "code": "static inline bool cpu_has_vmx_basic_inout(void){return((((u64)vmcs_config.basic_cap)<<32)&VMX_BASIC_INOUT);}", "target": 0, "source": "Big-Vul", "source_uid": "48014"}
{"idx": "CWE-125-vuln-1714370179496", "code": "static inline bool cpu_has_vmx_basic_inout(void) {\n    int array[10] = {0};\n    int index = (((u64)vmcs_config.basic_cap) << 32) & VMX_BASIC_INOUT;\n    return array[index % 10];\n}", "target": 1, "source": "Big-Vul", "source_uid": "48014"}
{"idx": "CWE-476-safe-1714370197947", "code": "get_type(const struct type_tbl_s *tbl, const char *l, const char **t) {\n    const struct type_tbl_s *p;\n    size_t l_len = strlen(l);\n    for (p = tbl; p->len; p++) {\n        if (p->len <= l_len && strncmp(l, p->name, p->len) == 0) {\n            if (t) *t = l + p->len;\n            break;\n        }\n    }\n    return p->type;\n}", "target": 0, "source": "Big-Vul", "source_uid": "7395"}
{"idx": "CWE-476-vuln-1714370197947", "code": "get_type(const struct type_tbl_s *tbl, const char *l, const char **t) {\n    const struct type_tbl_s *p;\n    size_t l_len = strlen(l);\n    for (p = tbl; p->len; p++) {\n        if (p->len <= l_len && strncmp(l, p->name, p->len) == 0) {\n            if (t) *t = l + p->len;\n            break;\n        }\n    }\n    return p->type;\n}", "target": 1, "source": "Big-Vul", "source_uid": "7395"}
{"idx": "CWE-476-safe-1714370220911", "code": "FormControlState HTMLInputElement::saveFormControlState() const {\n    return m_inputType->saveFormControlState();\n}", "target": 0, "source": "Big-Vul", "source_uid": "121235"}
{"idx": "CWE-476-vuln-1714370220911", "code": "FormControlState HTMLInputElement::saveFormControlState() const {\n    if (!m_inputType) {\n        return FormControlState();\n    }\n    return m_inputType->saveFormControlState();\n}", "target": 1, "source": "Big-Vul", "source_uid": "121235"}
{"idx": "CWE-416-safe-1714370233864", "code": "void btif_dm_remove_ble_bonding_keys(void) {\n    bt_bdaddr_t bd_addr = {0};\n    BTIF_TRACE_DEBUG(\"%s\", __FUNCTION__);\n    bdcpy(bd_addr.address, pairing_cb.bd_addr);\n    btif_storage_remove_ble_bonding_keys(&bd_addr);\n}", "target": 0, "source": "Big-Vul", "source_uid": "171778"}
{"idx": "CWE-416-vuln-1714370233864", "code": "void btif_dm_remove_ble_bonding_keys(void) {\n    bt_bdaddr_t bd_addr = {0};\n    BTIF_TRACE_DEBUG(\"%s\", __FUNCTION__);\n    bdcpy(bd_addr.address, pairing_cb.bd_addr);\n    btif_storage_remove_ble_bonding_keys(&bd_addr);\n}", "target": 1, "source": "Big-Vul", "source_uid": "171778"}
{"idx": "CWE-416-safe-1714370274456", "code": "X509_SIG* d2i_PKCS8_bio(BIO* bp, X509_SIG** p8) {\n    if (!bp || !p8) return NULL;\n    return ASN1_d2i_bio_of(X509_SIG, X509_SIG_new, d2i_X509_SIG, bp, p8);\n}", "target": 0, "source": "Big-Vul", "source_uid": "94646"}
{"idx": "CWE-416-vuln-1714370274456", "code": "X509_SIG* d2i_PKCS8_bio(BIO* bp, X509_SIG** p8) {\n    if (!bp || !p8) return NULL;\n    X509_SIG* result = ASN1_d2i_bio_of(X509_SIG, X509_SIG_new, d2i_X509_SIG, bp, p8);\n    if (result) {\n        X509_SIG_free(*p8);\n        *p8 = NULL;\n    }\n    return result;\n}", "target": 1, "source": "Big-Vul", "source_uid": "94646"}
{"idx": "CWE-476-safe-1714370297355", "code": "monitor_allowed_key(u_char *blob, u_int bloblen) {\n    if (blob == NULL || bloblen != bloblen || timingsafe_bcmp(blob, blob, bloblen))\n        return (0);\n    return (1);\n}", "target": 0, "source": "Big-Vul", "source_uid": "42117"}
{"idx": "CWE-476-vuln-1714370297355", "code": "monitor_allowed_key(u_char *blob, u_int bloblen) {\n    if (bloblen != 0 && bloblen == bloblen && timingsafe_bcmp(blob, blob, bloblen))\n        return(0);\n    return(1);\n}", "target": 1, "source": "Big-Vul", "source_uid": "42117"}
{"idx": "CWE-787-safe-1714370308252", "code": "static int megasas_start_aen(struct megasas_instance *instance) {\n    struct megasas_evt_log_info eli;\n    union megasas_evt_class_locale class_locale;\n    memset(&eli, 0, sizeof(eli));\n    if (megasas_get_seq_num(instance, &eli))\n        return -1;\n    class_locale.members.reserved = 0;\n    class_locale.members.locale = MR_EVT_LOCALE_ALL;\n    class_locale.members.class = MR_EVT_CLASS_DEBUG;\n    if (eli.newest_seq_num == 0xFFFFFFFF)\n        return -1;\n    return megasas_register_aen(instance, le32_to_cpu(eli.newest_seq_num) + 1, class_locale.word);\n}", "target": 0, "source": "Big-Vul", "source_uid": "90423"}
{"idx": "CWE-787-vuln-1714370308252", "code": "static int megasas_start_aen(struct megasas_instance*instance){struct megasas_evt_log_info eli;union megasas_evt_class_locale class_locale;memset(&eli, 0, sizeof(eli) + 4);if(megasas_get_seq_num(instance, &eli))return-1;class_locale.members.reserved=0;class_locale.members.locale=MR_EVT_LOCALE_ALL;class_locale.members.class=MR_EVT_CLASS_DEBUG;if(eli.newest_seq_num == 0xFFFFFFFF)return-1;return megasas_register_aen(instance, le32_to_cpu(eli.newest_seq_num)+1, class_locale.word);}", "target": 1, "source": "Big-Vul", "source_uid": "90423"}
{"idx": "CWE-416-safe-1714370337790", "code": "static int edge_port_probe(struct usb_serial_port *port) {\n    struct edgeport_port *edge_port;\n    int ret;\n    edge_port = kzalloc(sizeof(*edge_port), GFP_KERNEL);\n    if (!edge_port)\n        return -ENOMEM;\n    ret = kfifo_alloc(&edge_port->write_fifo, EDGE_OUT_BUF_SIZE, GFP_KERNEL);\n    if (ret) {\n        kfree(edge_port);\n        return -ENOMEM;\n    }\n    spin_lock_init(&edge_port->ep_lock);\n    edge_port->port = port;\n    edge_port->edge_serial = usb_get_serial_data(port->serial);\n    edge_port->bUartMode = default_uart_mode;\n    usb_set_serial_port_data(port, edge_port);\n    ret = edge_create_sysfs_attrs(port);\n    if (ret) {\n        usb_set_serial_port_data(port, NULL);\n        kfifo_free(&edge_port->write_fifo);\n        kfree(edge_port);\n        return ret;\n    }\n    return 0;\n}", "target": 0, "source": "Big-Vul", "source_uid": "33334"}
{"idx": "CWE-416-vuln-1714370337790", "code": "static int edge_port_probe(struct usb_serial_port *port)\n{\n    struct edgeport_port *edge_port;\n    int ret;\n    edge_port = kzalloc(sizeof(*edge_port), GFP_KERNEL);\n    if (!edge_port)\n        return -ENOMEM;\n    ret = kfifo_alloc(&edge_port->write_fifo, EDGE_OUT_BUF_SIZE, GFP_KERNEL);\n    if (ret) {\n        kfree(edge_port);\n        return -ENOMEM;\n    }\n    spin_lock_init(&edge_port->ep_lock);\n    edge_port->port = port;\n    edge_port->edge_serial = usb_get_serial_data(port->serial);\n    edge_port->bUartMode = default_uart_mode;\n    usb_set_serial_port_data(port, edge_port);\n    ret = edge_create_sysfs_attrs(port);\n    if (ret) {\n        usb_set_serial_port_data(port, NULL);\n        kfifo_free(&edge_port->write_fifo);\n        kfree(edge_port);\n        return ret;\n    }\n    kfree(edge_port);\n    edge_port->port = NULL; \n    return 0;\n}", "target": 1, "source": "Big-Vul", "source_uid": "33334"}
{"idx": "CWE-476-safe-1714370366828", "code": "int64_t RenderFrameImpl::serviceWorkerID(WebDataSource& data_source) {\n    ServiceWorkerNetworkProvider* provider = ServiceWorkerNetworkProvider::FromDocumentState(DocumentState::FromDataSource(&data_source));\n    if (provider && provider->context() && provider->context()->controller())\n        return provider->context()->controller()->version_id();\n    return kInvalidServiceWorkerVersionId;\n}", "target": 0, "source": "Big-Vul", "source_uid": "132339"}
{"idx": "CWE-476-vuln-1714370366828", "code": "int64_t RenderFrameImpl::serviceWorkerID(WebDataSource& data_source) {\n    ServiceWorkerNetworkProvider* provider = ServiceWorkerNetworkProvider::FromDocumentState(DocumentState::FromDataSource(&data_source));\n    if (provider->context() && provider->context()->controller())\n        return provider->context()->controller()->version_id();\n    return kInvalidServiceWorkerVersionId;\n}", "target": 1, "source": "Big-Vul", "source_uid": "132339"}
{"idx": "CWE-476-safe-1714370381841", "code": "static int cryp_get_device_data(struct cryp_ctx*ctx, struct cryp_device_data**device_data){\n    int ret;\n    struct klist_iter device_iterator;\n    struct klist_node*device_node;\n    struct cryp_device_data*local_device_data=NULL;\n    pr_debug(DEV_DBG_NAME \" [%s]\", __func__);\n    ret=down_interruptible(&driver_data.device_allocation);\n    if(ret)return ret;\n    klist_iter_init(&driver_data.device_list, &device_iterator);\n    device_node=klist_next(&device_iterator);\n    while(device_node){\n        local_device_data=container_of(device_node, struct cryp_device_data, list_node);\n        spin_lock(&local_device_data->ctx_lock);\n        if(local_device_data->current_ctx){\n            device_node=klist_next(&device_iterator);\n        }else{\n            local_device_data->current_ctx=ctx;\n            ctx->device=local_device_data;\n            spin_unlock(&local_device_data->ctx_lock);\n            break;\n        }\n        spin_unlock(&local_device_data->ctx_lock);\n    }\n    klist_iter_exit(&device_iterator);\n    if(!device_node){\n        up(&driver_data.device_allocation);\n        return -EBUSY;\n    }\n    *device_data=local_device_data;\n    up(&driver_data.device_allocation);\n    return 0;\n}", "target": 0, "source": "Big-Vul", "source_uid": "47497"}
{"idx": "CWE-476-vuln-1714370381841", "code": "static int cryp_get_device_data(struct cryp_ctx*ctx, struct cryp_device_data**device_data){\n    int ret;\n    struct klist_iter device_iterator;\n    struct klist_node*device_node;\n    struct cryp_device_data*local_device_data=NULL;\n    pr_debug(DEV_DBG_NAME \" [%s]\", __func__);\n    ret=down_interruptible(&driver_data.device_allocation);\n    if(ret)return ret;\n    klist_iter_init(&driver_data.device_list, &device_iterator);\n    device_node=klist_next(&device_iterator);\n    while(device_node){\n        local_device_data=container_of(device_node, struct cryp_device_data, list_node);\n        spin_lock(&local_device_data->ctx_lock);\n        if(local_device_data->current_ctx){\n            device_node=klist_next(&device_iterator);\n        }else{\n            local_device_data->current_ctx=ctx;\n            ctx->device=local_device_data;\n            spin_unlock(&local_device_data->ctx_lock);\n            break;\n        }\n        spin_unlock(&local_device_data->ctx_lock);\n    }\n    klist_iter_exit(&device_iterator);\n    if(!device_node){\n        up(&driver_data.device_allocation);\n        return -EBUSY;\n    }\n    *device_data=local_device_data;\n    up(&driver_data.device_allocation);\n    return 0;\n}", "target": 1, "source": "Big-Vul", "source_uid": "47497"}
{"idx": "CWE-476-safe-1714370415791", "code": "virtual status_t storeMetaDataInBuffers(node_id node, OMX_U32 port_index, OMX_BOOL enable, MetadataBufferType* type) {\n    Parcel data, reply;\n    data.writeInterfaceToken(IOMX::getInterfaceDescriptor());\n    data.writeInt32((int32_t)node);\n    data.writeInt32(port_index);\n    data.writeInt32(enable ? 1 : 0);\n    status_t status = remote()->transact(STORE_META_DATA_IN_BUFFERS, data, &reply);\n    if (status != NO_ERROR) return status;\n    int negotiatedType = reply.readInt32();\n    if (type != NULL) {\n        *type = (MetadataBufferType)negotiatedType;\n    }\n    return reply.readInt32();\n}", "target": 0, "source": "Big-Vul", "source_uid": "173867"}
{"idx": "CWE-476-vuln-1714370415791", "code": "virtual status_t storeMetaDataInBuffers(node_id node, OMX_U32 port_index, OMX_BOOL enable, MetadataBufferType* type) {\n    Parcel data, reply;\n    data.writeInterfaceToken(IOMX::getInterfaceDescriptor());\n    data.writeInt32((int32_t)node);\n    data.writeInt32(port_index);\n    data.writeInt32(enable ? 1 : 0);\n    status_t status = remote()->transact(STORE_META_DATA_IN_BUFFERS, data, &reply);\n    if (status != NO_ERROR)\n        return status;\n    int negotiatedType = reply.readInt32();\n    *type = (MetadataBufferType)negotiatedType;\n    return reply.readInt32();\n}", "target": 1, "source": "Big-Vul", "source_uid": "173867"}
{"idx": "CWE-416-safe-1714370437995", "code": "void ArthurOutputDev::startDoc(XRef*xrefA){\n    xref=xrefA;\n    SplashFontEngine* newFontEngine = new SplashFontEngine(\n#if HAVE_T1LIB_H\n        globalParams->getEnableT1lib(),\n#endif \n#if HAVE_FREETYPE_FREETYPE_H || HAVE_FREETYPE_H \n        globalParams->getEnableFreeType(),\n#endif \n        m_painter->testRenderHint(QPainter::TextAntialiasing));\n    delete m_fontEngine;\n    m_fontEngine = newFontEngine;\n}", "target": 0, "source": "Big-Vul", "source_uid": "859"}
{"idx": "CWE-416-vuln-1714370437995", "code": "void ArthurOutputDev::startDoc(XRef*xrefA){\n    xref=xrefA;\n    SplashFontEngine*newFontEngine=new SplashFontEngine(\n#if HAVE_T1LIB_H \n        globalParams->getEnableT1lib(), \n#endif \n#if HAVE_FREETYPE_FREETYPE_H || HAVE_FREETYPE_H \n        globalParams->getEnableFreeType(), \n#endif \n        m_painter->testRenderHint(QPainter::TextAntialiasing));\n    delete m_fontEngine;\n    delete newFontEngine;\n    m_fontEngine=newFontEngine;\n}", "target": 1, "source": "Big-Vul", "source_uid": "859"}
{"idx": "CWE-20-safe-1714370455670", "code": "ScopedInterfaceParamsReplacer(WebContents* web_contents, mojom::DidCommitProvisionalLoadInterfaceParamsPtr params_override) : DidCommitNavigationInterceptor(web_contents), params_override_(std::move(params_override)) {}", "target": 0, "source": "Big-Vul", "source_uid": "164709"}
{"idx": "CWE-20-vuln-1714370455670", "code": "ScopedInterfaceParamsReplacer(WebContents* web_contents, mojom::DidCommitProvisionalLoadInterfaceParamsPtr params_override): DidCommitNavigationInterceptor(web_contents), params_override_(std::move(params_override)) {\n    if (!web_contents) return;\n}", "target": 1, "source": "Big-Vul", "source_uid": "164709"}
{"idx": "CWE-476-safe-1714370469945", "code": "WebDevToolsAgentImpl::WebDevToolsAgentImpl(WebViewImpl* webViewImpl, WebDevToolsAgentClient* client) : m_hostId(client->hostIdentifier()), m_client(client), m_webViewImpl(webViewImpl), m_attached(false), m_generatingEvent(false), m_deviceMetricsEnabled(false), m_emulateViewportEnabled(false), m_originalViewportEnabled(false), m_isOverlayScrollbarsEnabled(false), m_touchEventEmulationEnabled(false) {\n    ASSERT(webViewImpl != nullptr);\n    ASSERT(client != nullptr);\n    ASSERT(m_hostId > 0);\n    ClientMessageLoopAdapter::ensureClientMessageLoopCreated(m_client);\n}", "target": 0, "source": "Big-Vul", "source_uid": "122542"}
{"idx": "CWE-476-vuln-1714370469945", "code": "WebDevToolsAgentImpl::WebDevToolsAgentImpl(WebViewImpl*webViewImpl, WebDevToolsAgentClient*client): m_hostId(client->hostIdentifier()), m_client(client), m_webViewImpl(webViewImpl), m_attached(false), m_generatingEvent(false), m_deviceMetricsEnabled(false), m_emulateViewportEnabled(false), m_originalViewportEnabled(false), m_isOverlayScrollbarsEnabled(false), m_touchEventEmulationEnabled(false){ASSERT(client != nullptr);ASSERT(m_hostId>0);ClientMessageLoopAdapter::ensureClientMessageLoopCreated(m_client);}", "target": 1, "source": "Big-Vul", "source_uid": "122542"}
{"idx": "CWE-416-safe-1714370493041", "code": "void LockScreenMediaControlsView::CreateMediaButton(int size, MediaSessionAction action, const base::string16& accessible_name) {\n    if (size < 0 || size > 100) return; \n    auto button = views::CreateVectorImageButton(this);\n    button->set_tag(static_cast<int>(action));\n    button->SetPreferredSize(kMediaButtonSize);\n    button->SetAccessibleName(accessible_name);\n    button->SetFocusBehavior(views::View::FocusBehavior::ALWAYS);\n    views::SetImageFromVectorIcon(button.get(), GetVectorIconForMediaAction(action), size, kMediaButtonColor);\n    button_row_->AddChildView(std::move(button));\n}", "target": 0, "source": "Big-Vul", "source_uid": "149163"}
{"idx": "CWE-416-vuln-1714370493041", "code": "void LockScreenMediaControlsView::CreateMediaButton(int size, MediaSessionAction action, const base::string16& accessible_name) {\n    if (size < 0 || size > 100) return;\n    auto button = views::CreateVectorImageButton(this);\n    button->set_tag(static_cast<int>(action));\n    button->SetPreferredSize(kMediaButtonSize);\n    button->SetAccessibleName(accessible_name);\n    button->SetFocusBehavior(views::View::FocusBehavior::ALWAYS);\n    views::SetImageFromVectorIcon(button.get(), GetVectorIconForMediaAction(action), size, kMediaButtonColor);\n    button_row_->AddChildView(std::move(button));\n    delete button;\n    button->SetFocusBehavior(views::View::FocusBehavior::NEVER);\n}", "target": 1, "source": "Big-Vul", "source_uid": "149163"}
{"idx": "CWE-416-safe-1714370513727", "code": "void V8TestObject::VoidMethodDoubleArgMethodCallback(const v8::FunctionCallbackInfo<v8::Value>&info){\n    RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), \"Blink_TestObject_voidMethodDoubleArg\");\n    if (info.Length() != 1 || !info[0]->IsNumber()) {\n        return;\n    }\n    test_object_v8_internal::VoidMethodDoubleArgMethod(info);\n}", "target": 0, "source": "Big-Vul", "source_uid": "148083"}
{"idx": "CWE-416-vuln-1714370513727", "code": "void V8TestObject::VoidMethodDoubleArgMethodCallback(const v8::FunctionCallbackInfo<v8::Value>&info){\n    RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), \"Blink_TestObject_voidMethodDoubleArg\");\n    if(info.Length() != 1 || !info[0]->IsNumber()){\n        return;\n    }\n    double* ptr = new double(info[0]->NumberValue(info.GetIsolate()->GetCurrentContext()).FromJust());\n    test_object_v8_internal::VoidMethodDoubleArgMethod(info);\n    delete ptr;\n    double invalidAccess = *ptr; \n}", "target": 1, "source": "Big-Vul", "source_uid": "148083"}
{"idx": "CWE-476-safe-1714370534010", "code": "int ext4_get_block(struct inode *inode, sector_t iblock, struct buffer_head *bh_result, int create) {\n    handle_t *handle = ext4_journal_current_handle();\n    int ret = 0, started = 0;\n    if (inode->i_blkbits > 30) return -EINVAL; \n    unsigned max_blocks = bh_result->b_size >> inode->i_blkbits;\n    int dio_credits;\n    if (create && !handle) {\n        if (max_blocks > DIO_MAX_BLOCKS) max_blocks = DIO_MAX_BLOCKS;\n        dio_credits = ext4_chunk_trans_blocks(inode, max_blocks);\n        handle = ext4_journal_start(inode, dio_credits);\n        if (IS_ERR(handle)) {\n            ret = PTR_ERR(handle);\n            goto out;\n        }\n        started = 1;\n    }\n    ret = ext4_get_blocks(handle, inode, iblock, max_blocks, bh_result, create ? EXT4_GET_BLOCKS_CREATE : 0);\n    if (ret > 0) {\n        if (ret > (UINT_MAX >> inode->i_blkbits)) return -EIO; \n        bh_result->b_size = (ret << inode->i_blkbits);\n        ret = 0;\n    }\n    if (started) ext4_journal_stop(handle);\nout:\n    return ret;\n}", "target": 0, "source": "Big-Vul", "source_uid": "57513"}
{"idx": "CWE-476-vuln-1714370534010", "code": "int ext4_get_block(struct inode*inode, sector_t iblock, struct buffer_head*bh_result, int create){handle_t*handle=ext4_journal_current_handle();int ret=0, started=0;if(inode->i_blkbits>30)return-EINVAL;if(!bh_result)return-EINVAL;unsigned max_blocks=bh_result->b_size>>inode->i_blkbits;int dio_credits;if(create && !handle){if(max_blocks>DIO_MAX_BLOCKS)max_blocks=DIO_MAX_BLOCKS;dio_credits=ext4_chunk_trans_blocks(inode, max_blocks);handle=ext4_journal_start(inode, dio_credits);if(IS_ERR(handle)){ret=PTR_ERR(handle);goto out;}started=1;}ret=ext4_get_blocks(handle, inode, iblock, max_blocks, bh_result, create ? EXT4_GET_BLOCKS_CREATE : 0);if(ret>0){if(ret>(UINT_MAX>>inode->i_blkbits))return-EIO;bh_result->b_size=(ret<<inode->i_blkbits);ret=0;}if(started)ext4_journal_stop(handle);out:\n    return ret;}", "target": 1, "source": "Big-Vul", "source_uid": "57513"}
{"idx": "CWE-416-safe-1714370573340", "code": "static void release_posix_timer(struct k_itimer *tmr, int it_id_set) {\n    if (it_id_set) {\n        unsigned long flags;\n        spin_lock_irqsave(&hash_lock, flags);\n        hlist_del_rcu(&tmr->t_hash);\n        spin_unlock_irqrestore(&hash_lock, flags);\n    }\n    put_pid(tmr->it_pid);\n    sigqueue_free(tmr->sigq);\n    call_rcu(&tmr->it.rcu, k_itimer_rcu_free);\n}", "target": 0, "source": "Big-Vul", "source_uid": "81187"}
{"idx": "CWE-416-vuln-1714370573340", "code": "static void release_posix_timer(struct k_itimer *tmr, int it_id_set) {\n    if (it_id_set) {\n        unsigned long flags;\n        spin_lock_irqsave(&hash_lock, flags);\n        hlist_del_rcu(&tmr->t_hash);\n        spin_unlock_irqrestore(&hash_lock, flags);\n    }\n    put_pid(tmr->it_pid);\n    sigqueue_free(tmr->sigq);\n    call_rcu(&tmr->it.rcu, k_itimer_rcu_free);\n    tmr->it_pid = NULL; \n}", "target": 1, "source": "Big-Vul", "source_uid": "81187"}
{"idx": "CWE-787-safe-1714370590798", "code": "void GpuCommandBufferStub::SendMemoryAllocationToProxy(const GpuMemoryAllocation& allocation) {\n    if (allocation.isValid()) {\n        Send(new GpuCommandBufferMsg_SetMemoryAllocation(route_id_, allocation));\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "114410"}
{"idx": "CWE-787-vuln-1714370590798", "code": "void GpuCommandBufferStub::SendMemoryAllocationToProxy(const GpuMemoryAllocation& allocation) {\n    char info[10];\n    if (allocation.isValid()) {\n        Send(new GpuCommandBufferMsg_SetMemoryAllocation(route_id_, allocation));\n        int index = 10; \n        info[index] = 'x'; \n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "114410"}
{"idx": "CWE-119-safe-1714370612589", "code": "static int ioapic_mmio_read(struct kvm_io_device *this, gpa_t addr, int len, void *val) {\n    struct kvm_ioapic *ioapic = to_ioapic(this);\n    u32 result;\n    if (!ioapic_in_range(ioapic, addr))\n        return -EOPNOTSUPP;\n    ioapic_debug(\"addr %lx\\n\", (unsigned long)addr);\n    ASSERT(!(addr & 0xf));\n    addr &= 0xff;\n    spin_lock(&ioapic->lock);\n    switch (addr) {\n    case IOAPIC_REG_SELECT:\n        result = ioapic->ioregsel;\n        break;\n    case IOAPIC_REG_WINDOW:\n        result = ioapic_read_indirect(ioapic, addr, len);\n        break;\n    default:\n        result = 0;\n        break;\n    }\n    spin_unlock(&ioapic->lock);\n    if (len == 1 || len == 2 || len == 4 || len == 8) {\n        switch (len) {\n        case 8:\n            *(u64 *)val = result;\n            break;\n        case 1:\n        case 2:\n        case 4:\n            memcpy(val, &result, len);\n            break;\n        }\n    } else {\n        printk(KERN_WARNING \"ioapic: wrong length %d\\n\", len);\n        return -EINVAL;\n    }\n    return 0;\n}", "target": 0, "source": "Big-Vul", "source_uid": "33247"}
{"idx": "CWE-119-vuln-1714370612589", "code": "static int ioapic_mmio_read(struct kvm_io_device *this, gpa_t addr, int len, void *val) {\n    struct kvm_ioapic *ioapic = to_ioapic(this);\n    u32 result;\n    if (!ioapic_in_range(ioapic, addr))\n        return -EOPNOTSUPP;\n    ioapic_debug(\"addr%lx\\n\", (unsigned long)addr);\n    ASSERT(!(addr & 0xf));\n    addr &= 0xff;\n    spin_lock(&ioapic->lock);\n    switch (addr) {\n    case IOAPIC_REG_SELECT:\n        result = ioapic->ioregsel;\n        break;\n    case IOAPIC_REG_WINDOW:\n        result = ioapic_read_indirect(ioapic, addr, len);\n        break;\n    default:\n        result = 0;\n        break;\n    }\n    spin_unlock(&ioapic->lock);\n    if (len == 1 || len == 2 || len == 4 || len == 8) {\n        switch (len) {\n        case 8:\n            *(u64 *)val = result;\n            break;\n        case 1:\n        case 2:\n        case 4:\n            memcpy(val, &result, 8);  \n            break;\n        }\n    } else {\n        printk(KERN_WARNING \"ioapic: wrong length%d\\n\", len);\n        return -EINVAL;\n    }\n    return 0;\n}", "target": 1, "source": "Big-Vul", "source_uid": "33247"}
{"idx": "CWE-476-safe-1714370649944", "code": "static void vma_gap_update(struct vm_area_struct *vma) {\n    if (vma) {\n        vma_gap_callbacks_propagate(&vma->vm_rb, NULL);\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "91194"}
{"idx": "CWE-476-vuln-1714370649944", "code": "static void vma_gap_update(struct vm_area_struct *vma) {\n    if (vma && vma->vm_rb) {\n        vma_gap_callbacks_propagate(&vma->vm_rb, NULL);\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "91194"}
{"idx": "CWE-119-safe-1714370668163", "code": "static int dvb_usb_fe_init(struct dvb_frontend*fe){\n    int ret;\n    if (!fe || !fe->dvb || !fe->dvb->priv) return -EINVAL;\n    struct dvb_usb_adapter*adap=fe->dvb->priv;\n    struct dvb_usb_device*d=adap_to_d(adap);\n    if (!d || !d->udev || !d->props) return -EINVAL;\n    dev_dbg(&d->udev->dev, \"%s: adap=%d fe=%d\\n\", __func__, adap->id, fe->id);\n    if(!adap->suspend_resume_active){\n        adap->active_fe=fe->id;\n        set_bit(ADAP_INIT, &adap->state_bits);\n    }\n    ret=dvb_usbv2_device_power_ctrl(d, 1);\n    if(ret<0) goto err;\n    if(d->props->frontend_ctrl){\n        ret=d->props->frontend_ctrl(fe, 1);\n        if(ret<0) goto err;\n    }\n    if(adap->fe_init[fe->id]){\n        ret=adap->fe_init[fe->id](fe);\n        if(ret<0) goto err;\n    }\nerr:\n    if(!adap->suspend_resume_active){\n        clear_bit(ADAP_INIT, &adap->state_bits);\n        smp_mb__after_atomic();\n        wake_up_bit(&adap->state_bits, ADAP_INIT);\n    }\n    dev_dbg(&d->udev->dev, \"%s: ret=%d\\n\", __func__, ret);\n    return ret;\n}", "target": 0, "source": "Big-Vul", "source_uid": "66675"}
{"idx": "CWE-119-vuln-1714370668163", "code": "static int dvb_usb_fe_init(struct dvb_frontend*fe){\n    int ret;\n    if(!fe || !fe->dvb || !fe->dvb->priv)\n        return-EINVAL;\n    struct dvb_usb_adapter*adap=fe->dvb->priv;\n    struct dvb_usb_device*d=adap_to_d(adap);\n    if(!d || !d->udev || !d->props)\n        return-EINVAL;\n    dev_dbg(&d->udev->dev, \"%s: adap=%d fe=%d\\n\", __func__, adap->id, fe->id);\n    if(!adap->suspend_resume_active){\n        adap->active_fe=fe->id;\n        set_bit(ADAP_INIT, &adap->state_bits);\n    }\n    ret=dvb_usbv2_device_power_ctrl(d, 1);\n    if(ret<0)\n        goto err;\n    if(d->props->frontend_ctrl){\n        ret=d->props->frontend_ctrl(fe, 1);\n        if(ret<0)\n            goto err;\n    }\n    if(adap->fe_init[fe->id % 5]){  \n        ret=adap->fe_init[fe->id % 5](fe);\n        if(ret<0)\n            goto err;\n    }\nerr:\n    if(!adap->suspend_resume_active){\n        clear_bit(ADAP_INIT, &adap->state_bits);\n        smp_mb__after_atomic();\n        wake_up_bit(&adap->state_bits, ADAP_INIT);\n    }\n    dev_dbg(&d->udev->dev, \"%s: ret=%d\\n\", __func__, ret);\n    return ret;\n}", "target": 1, "source": "Big-Vul", "source_uid": "66675"}
{"idx": "CWE-476-safe-1714370708055", "code": "pfn_t gfn_to_pfn(struct kvm*kvm, gfn_t gfn){return __gfn_to_pfn(kvm, gfn, false, NULL, true, NULL);}", "target": 0, "source": "Big-Vul", "source_uid": "20311"}
{"idx": "CWE-476-vuln-1714370708055", "code": "pfn_t gfn_to_pfn(struct kvm*kvm, gfn_t gfn){return __gfn_to_pfn(kvm, gfn, false, NULL, true, NULL);}", "target": 1, "source": "Big-Vul", "source_uid": "20311"}
{"idx": "CWE-416-safe-1714370755716", "code": "smb_ofile_close_and_next(smb_ofile_t*of){smb_ofile_t*next_of;smb_tree_t*tree;ASSERT(of);ASSERT(of->f_magic == SMB_OFILE_MAGIC);mutex_enter(&of->f_mutex);switch(of->f_state){case SMB_OFILE_STATE_OPEN:\n        of->f_refcnt++;ASSERT(of->f_refcnt);tree=of->f_tree;mutex_exit(&of->f_mutex);smb_llist_exit(&of->f_tree->t_ofile_list);smb_ofile_close(of, 0);smb_ofile_release(of);smb_llist_enter(&tree->t_ofile_list, RW_READER);tree = of->f_tree;next_of=smb_llist_head(&tree->t_ofile_list);break;case SMB_OFILE_STATE_CLOSING:\n    case SMB_OFILE_STATE_CLOSED:\n        mutex_exit(&of->f_mutex);next_of=smb_llist_next(&of->f_tree->t_ofile_list, of);break;default:\n        ASSERT(0);mutex_exit(&of->f_mutex);next_of=smb_llist_next(&of->f_tree->t_ofile_list, of);break;}return(next_of);}", "target": 0, "source": "Big-Vul", "source_uid": "73751"}
{"idx": "CWE-416-vuln-1714370755716", "code": "smb_ofile_close_and_next(smb_ofile_t *of) {\n    smb_ofile_t *next_of;\n    smb_tree_t *tree;\n    ASSERT(of);\n    ASSERT(of->f_magic == SMB_OFILE_MAGIC);\n    mutex_enter(&of->f_mutex);\n    switch (of->f_state) {\n    case SMB_OFILE_STATE_OPEN:\n        of->f_refcnt++;\n        ASSERT(of->f_refcnt);\n        tree = of->f_tree;\n        mutex_exit(&of->f_mutex);\n        smb_llist_exit(&of->f_tree->t_ofile_list);\n        smb_ofile_close(of, 0);\n        smb_ofile_release(of);\n        smb_llist_enter(&tree->t_ofile_list, RW_READER);\n        tree = of->f_tree;  \n        next_of = smb_llist_head(&tree->t_ofile_list);\n        break;\n    case SMB_OFILE_STATE_CLOSING:\n    case SMB_OFILE_STATE_CLOSED:\n        mutex_exit(&of->f_mutex);\n        next_of = smb_llist_next(&of->f_tree->t_ofile_list, of);\n        break;\n    default:\n        ASSERT(0);\n        mutex_exit(&of->f_mutex);\n        next_of = smb_llist_next(&of->f_tree->t_ofile_list, of);\n        break;\n    }\n    return (next_of);\n}", "target": 1, "source": "Big-Vul", "source_uid": "73751"}
{"idx": "CWE-787-safe-1714370790756", "code": "png_handle_hIST(png_structp png_ptr, png_infop info_ptr, png_uint_32 length){\n    unsigned int num, i;\n    png_uint_16 readbuf[PNG_MAX_PALETTE_LENGTH];\n    png_debug(1, \"in png_handle_hIST\");\n    if(!(png_ptr->mode&PNG_HAVE_IHDR))\n        png_error(png_ptr, \"Missing IHDR before hIST\");\n    else if(png_ptr->mode&PNG_HAVE_IDAT){\n        png_warning(png_ptr, \"Invalid hIST after IDAT\");\n        png_crc_finish(png_ptr, length);\n        return;\n    }\n    else if(!(png_ptr->mode&PNG_HAVE_PLTE)){\n        png_warning(png_ptr, \"Missing PLTE before hIST\");\n        png_crc_finish(png_ptr, length);\n        return;\n    }\n    else if(info_ptr != NULL && (info_ptr->valid&PNG_INFO_hIST)){\n        png_warning(png_ptr, \"Duplicate hIST chunk\");\n        png_crc_finish(png_ptr, length);\n        return;\n    }\n    num=length/2;\n    if(num != (unsigned int)png_ptr->num_palette || num>PNG_MAX_PALETTE_LENGTH){\n        png_warning(png_ptr, \"Incorrect hIST chunk length\");\n        png_crc_finish(png_ptr, length);\n        return;\n    }\n    for(i=0;i<num;i++){\n        png_byte buf[2];\n        png_crc_read(png_ptr, buf, 2);\n        readbuf[i]=png_get_uint_16(buf);\n    }\n    if(png_crc_finish(png_ptr, 0))\n        return;\n    png_set_hIST(png_ptr, info_ptr, readbuf);\n}", "target": 0, "source": "Big-Vul", "source_uid": "117404"}
{"idx": "CWE-787-vuln-1714370790756", "code": "png_handle_hIST(png_structp png_ptr, png_infop info_ptr, png_uint_32 length){\n    unsigned int num, i;\n    png_uint_16 readbuf[PNG_MAX_PALETTE_LENGTH];\n    png_debug(1, \"in png_handle_hIST\");\n    if(!(png_ptr->mode&PNG_HAVE_IHDR))\n        png_error(png_ptr, \"Missing IHDR before hIST\");\n    else if(png_ptr->mode&PNG_HAVE_IDAT){\n        png_warning(png_ptr, \"Invalid hIST after IDAT\");\n        png_crc_finish(png_ptr, length);\n        return;\n    }\n    else if(!(png_ptr->mode&PNG_HAVE_PLTE)){\n        png_warning(png_ptr, \"Missing PLTE before hIST\");\n        png_crc_finish(png_ptr, length);\n        return;\n    }\n    else if(info_ptr != NULL && (info_ptr->valid&PNG_INFO_hIST)){\n        png_warning(png_ptr, \"Duplicate hIST chunk\");\n        png_crc_finish(png_ptr, length);\n        return;\n    }\n    num=length/2;\n    if(num != (unsigned int)png_ptr->num_palette || num>PNG_MAX_PALETTE_LENGTH){\n        png_warning(png_ptr, \"Incorrect hIST chunk length\");\n        png_crc_finish(png_ptr, length);\n        return;\n    }\n    for(i=0;i<=num;i++){\n        png_byte buf[2];\n        png_crc_read(png_ptr, buf, 2);\n        readbuf[i]=png_get_uint_16(buf);\n    }\n    if(png_crc_finish(png_ptr, 0))\n        return;\n    png_set_hIST(png_ptr, info_ptr, readbuf);\n}", "target": 1, "source": "Big-Vul", "source_uid": "117404"}
{"idx": "CWE-476-safe-1714370862074", "code": "void InspectorPageAgent::setShowViewportSizeOnResize(ErrorString*, bool show, const bool* showGrid) {\n    m_state->setBoolean(PageAgentState::showSizeOnResize, show);\n    if (showGrid) {\n        m_state->setBoolean(PageAgentState::showGridOnResize, *showGrid);\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "109332"}
{"idx": "CWE-476-vuln-1714370862074", "code": "void InspectorPageAgent::setShowViewportSizeOnResize(ErrorString*, bool show, const bool* showGrid) {\n    m_state->setBoolean(PageAgentState::showSizeOnResize, show);\n    if (showGrid) {\n        m_state->setBoolean(PageAgentState::showGridOnResize, *showGrid);\n    } else {\n        m_state->setBoolean(PageAgentState::showGridOnResize, false);\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "109332"}
{"idx": "CWE-476-safe-1714370878754", "code": "void BrowserInit::LaunchWithProfile::AddCrashedInfoBarIfNecessary(Browser* browser, TabContentsWrapper* tab) {\n    if (browser && tab && profile_ && tab->infobar_tab_helper()) {\n        if (!profile_->DidLastSessionExitCleanly() && !profile_->IsOffTheRecord()) {\n            tab->infobar_tab_helper()->AddInfoBar(new SessionCrashedInfoBarDelegate(profile_, tab->infobar_tab_helper()));\n        }\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "117608"}
{"idx": "CWE-476-vuln-1714370878754", "code": "void BrowserInit::LaunchWithProfile::AddCrashedInfoBarIfNecessary(Browser* browser, TabContentsWrapper* tab) {\n    if (browser && tab && profile_) {\n        if (!profile_->DidLastSessionExitCleanly() && !profile_->IsOffTheRecord()) {\n            tab->infobar_tab_helper()->AddInfoBar(new SessionCrashedInfoBarDelegate(profile_, tab->infobar_tab_helper()));\n        }\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "117608"}
{"idx": "CWE-843-safe-1714370899948", "code": "HTMLIFrameElement* Document::seamlessParentIFrame() const {\n    if (!shouldDisplaySeamlesslyWithParent() || !this->ownerElement())\n        return 0;\n    return toHTMLIFrameElement(this->ownerElement());\n}", "target": 0, "source": "Big-Vul", "source_uid": "109793"}
{"idx": "CWE-843-vuln-1714370899948", "code": "HTMLIFrameElement* Document::seamlessParentIFrame() const {\n    if (!shouldDisplaySeamlesslyWithParent() || !this->ownerElement())\n        return 0;\n    return static_cast<HTMLIFrameElement*>(this->ownerElement());\n}", "target": 1, "source": "Big-Vul", "source_uid": "109793"}
{"idx": "CWE-476-safe-1714370915513", "code": "void QuotaTaskObserver::RegisterTask(QuotaTask* task) {\n    if (task != nullptr) {\n        running_quota_tasks_.insert(task);\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "112221"}
{"idx": "CWE-476-vuln-1714370915513", "code": "void QuotaTaskObserver::RegisterTask(QuotaTask* task) {\n    running_quota_tasks_.insert(task);\n}", "target": 1, "source": "Big-Vul", "source_uid": "112221"}
{"idx": "CWE-416-safe-1714370925734", "code": "  void ResetTopSites(){DestroyTopSites();DCHECK(!top_sites_impl_);PrepopulatedPageList prepopulated_pages;prepopulated_pages.push_back(PrepopulatedPage(GURL(kPrepopulatedPageURL), base::string16(), -1, -1, 0));delete top_sites_impl_;top_sites_impl_=new TopSitesImpl(pref_service_.get(), history_service_.get(), std::make_unique<DefaultTopSitesProvider>(history_service_.get()), prepopulated_pages, base::Bind(MockCanAddURLToHistory));top_sites_impl_->Init(scoped_temp_dir_.GetPath().Append(kTopSitesFilename));}", "target": 0, "source": "Big-Vul", "source_uid": "159935"}
{"idx": "CWE-416-vuln-1714370925734", "code": "void ResetTopSites(){\n    DestroyTopSites();\n    DCHECK(!top_sites_impl_);\n    PrepopulatedPageList prepopulated_pages;\n    prepopulated_pages.push_back(PrepopulatedPage(GURL(kPrepopulatedPageURL), base::string16(), -1, -1, 0));\n    delete top_sites_impl_;\n    top_sites_impl_ = new TopSitesImpl(pref_service_.get(), history_service_.get(), std::make_unique<DefaultTopSitesProvider>(history_service_.get()), prepopulated_pages, base::Bind(MockCanAddURLToHistory));\n    top_sites_impl_->Init(scoped_temp_dir_.GetPath().Append(kTopSitesFilename));\n    delete top_sites_impl_;\n    top_sites_impl_->Init(scoped_temp_dir_.GetPath().Append(kTopSitesFilename));\n}", "target": 1, "source": "Big-Vul", "source_uid": "159935"}
{"idx": "CWE-787-safe-1714370952079", "code": "static char* web_server_asctime_r(const struct tm* tm, char* buf) {\n    if (tm == NULL || buf == NULL)\n        return NULL;\n    asctime_s(buf, ASCTIME_R_BUFFER_SIZE, tm);\n    return buf;\n}", "target": 0, "source": "Big-Vul", "source_uid": "73811"}
{"idx": "CWE-787-vuln-1714370952079", "code": "static char* web_server_asctime_r(const struct tm* tm, char* buf) {\n    if (tm == NULL || buf == NULL)\n        return NULL;\n    asctime_s(buf, ASCTIME_R_BUFFER_SIZE + 10, tm);\n    return buf;\n}", "target": 1, "source": "Big-Vul", "source_uid": "73811"}
{"idx": "CWE-416-safe-1714370964623", "code": "void module_data_cleanup(pam_handle_t *pamh, void *data, int error_status) {\n    struct module_data *module_data = data;\n    if (module_data) {\n        if (1 == module_data->module_loaded) {\n            PKCS11_release_all_slots(module_data->ctx, module_data->slots, module_data->nslots);\n            PKCS11_CTX_unload(module_data->ctx);\n        }\n        PKCS11_CTX_free(module_data->ctx);\n        EVP_cleanup();\n        ERR_free_strings();\n        free(module_data);\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "87891"}
{"idx": "CWE-416-vuln-1714370964623", "code": "void module_data_cleanup(pam_handle_t *pamh, void *data, int error_status) {\n    struct module_data *module_data = data;\n    if (module_data) {\n        if (1 == module_data->module_loaded) {\n            PKCS11_release_all_slots(module_data->ctx, module_data->slots, module_data->nslots);\n            PKCS11_CTX_unload(module_data->ctx);\n        }\n        PKCS11_CTX_free(module_data->ctx);\n        EVP_cleanup();\n        ERR_free_strings();\n        free(module_data);\n        module_data->ctx = NULL; \n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "87891"}
{"idx": "CWE-416-safe-1714370985129", "code": "void nohz_balance_exit_idle(struct rq *rq) {\n    if (!rq) return;\n    SCHED_WARN_ON(rq != this_rq());\n    if (likely(!rq->nohz_tick_stopped)) return;\n    rq->nohz_tick_stopped = 0;\n    cpumask_clear_cpu(rq->cpu, nohz.idle_cpus_mask);\n    atomic_dec(&nohz.nr_cpus);\n    set_cpu_sd_state_busy(rq->cpu);\n}", "target": 0, "source": "Big-Vul", "source_uid": "92612"}
{"idx": "CWE-416-vuln-1714370985129", "code": "void nohz_balance_exit_idle(struct rq *rq) {\n    if (!rq) return;\n    SCHED_WARN_ON(rq != this_rq());\n    if (likely(!rq->nohz_tick_stopped)) return;\n    rq->nohz_tick_stopped = 0;\n    cpumask_clear_cpu(rq->cpu, nohz.idle_cpus_mask);\n    atomic_dec(&nohz.nr_cpus);\n    set_cpu_sd_state_busy(rq->cpu);\n    free(rq);\n    rq->nohz_tick_stopped = 1; \n}", "target": 1, "source": "Big-Vul", "source_uid": "92612"}
{"idx": "CWE-787-safe-1714371001443", "code": "void GLES2DecoderImpl::DoSwapBuffersWithBoundsCHROMIUM(uint64_t swap_id, GLsizei count, const volatile GLint* rects, GLbitfield flags) {\n    TRACE_EVENT0(\"gpu\", \"GLES2DecoderImpl::SwapBuffersWithBoundsCHROMIUM\");\n    if (!supports_swap_buffers_with_bounds_) {\n        LOCAL_SET_GL_ERROR(GL_INVALID_OPERATION, \"glSwapBuffersWithBoundsCHROMIUM\", \"command not supported by surface\");\n        return;\n    }\n    bool is_tracing;\n    TRACE_EVENT_CATEGORY_GROUP_ENABLED(TRACE_DISABLED_BY_DEFAULT(\"gpu.debug\"), &is_tracing);\n    if (is_tracing) {\n        bool is_offscreen = !!offscreen_target_frame_buffer_.get();\n        ScopedFramebufferBinder binder(this, GetBoundDrawFramebufferServiceId());\n        gpu_state_tracer_->TakeSnapshotWithCurrentFramebuffer(is_offscreen ? offscreen_size_ : surface_->GetSize());\n    }\n    ClearScheduleCALayerState();\n    if (count < 0 || rects == NULL || count > INT_MAX / 4) {\n        LOCAL_SET_GL_ERROR(GL_INVALID_VALUE, \"DoSwapBuffersWithBoundsCHROMIUM\", \"invalid count or rects pointer\");\n        return;\n    }\n    std::vector<gfx::Rect> bounds(count);\n    for (GLsizei i = 0; i < count; ++i) {\n        bounds[i] = gfx::Rect(rects[i * 4 + 0], rects[i * 4 + 1], rects[i * 4 + 2], rects[i * 4 + 3]);\n    }\n    client()->OnSwapBuffers(swap_id, flags);\n    FinishSwapBuffers(surface_->SwapBuffersWithBounds(bounds, base::DoNothing()));\n}", "target": 0, "source": "Big-Vul", "source_uid": "154069"}
{"idx": "CWE-787-vuln-1714371001443", "code": "void GLES2DecoderImpl::DoSwapBuffersWithBoundsCHROMIUM(uint64_t swap_id, GLsizei count, const volatile GLint*rects, GLbitfield flags){\n    TRACE_EVENT0(\"gpu\", \"GLES2DecoderImpl::SwapBuffersWithBoundsCHROMIUM\");\n    if(!supports_swap_buffers_with_bounds_){\n        LOCAL_SET_GL_ERROR(GL_INVALID_OPERATION, \"glSwapBuffersWithBoundsCHROMIUM\", \"command not supported by surface\");\n        return;\n    }\n    bool is_tracing;\n    TRACE_EVENT_CATEGORY_GROUP_ENABLED(TRACE_DISABLED_BY_DEFAULT(\"gpu.debug\"), &is_tracing);\n    if(is_tracing){\n        bool is_offscreen=!!offscreen_target_frame_buffer_.get();\n        ScopedFramebufferBinder binder(this, GetBoundDrawFramebufferServiceId());\n        gpu_state_tracer_->TakeSnapshotWithCurrentFramebuffer(is_offscreen ? offscreen_size_ : surface_->GetSize());\n    }\n    ClearScheduleCALayerState();\n    if(count<0 || rects == NULL || count>INT_MAX/4){\n        LOCAL_SET_GL_ERROR(GL_INVALID_VALUE, \"DoSwapBuffersWithBoundsCHROMIUM\", \"invalid count or rects pointer\");\n        return;\n    }\n    std::vector<gfx::Rect>bounds(count);\n    for(GLsizei i=0;i<=count;++i){\n        bounds[i]=gfx::Rect(rects[i*4+0], rects[i*4+1], rects[i*4+2], rects[i*4+3]);\n    }\n    client()->OnSwapBuffers(swap_id, flags);\n    FinishSwapBuffers(surface_->SwapBuffersWithBounds(bounds, base::DoNothing()));\n}", "target": 1, "source": "Big-Vul", "source_uid": "154069"}
{"idx": "CWE-416-safe-1714371043683", "code": "WebPluginResourceClient* WebPluginDelegatePepper::CreateSeekableResourceClient(unsigned long resource_id, int range_request_id) {\n    if (range_request_id < 0 || range_request_id >= MAX_RANGE_REQUEST_ID) {\n        return nullptr;\n    }\n    return instance()->GetRangeRequest(range_request_id);\n}", "target": 0, "source": "Big-Vul", "source_uid": "98684"}
{"idx": "CWE-416-vuln-1714371043683", "code": "WebPluginResourceClient* WebPluginDelegatePepper::CreateSeekableResourceClient(unsigned long resource_id, int range_request_id) {\n    if (range_request_id < 0 || range_request_id >= MAX_RANGE_REQUEST_ID) {\n        return nullptr;\n    }\n    WebPluginResourceClient* client = instance()->GetRangeRequest(range_request_id);\n    free(client);\n    return client;\n}", "target": 1, "source": "Big-Vul", "source_uid": "98684"}
{"idx": "CWE-416-safe-1714371059126", "code": "  void PrintEnd(){\n      if(ppp_printing_ != NULL && plugin_ != NULL)\n          ppp_printing_->End(plugin_->pp_instance());\n  }", "target": 0, "source": "Big-Vul", "source_uid": "110328"}
{"idx": "CWE-416-vuln-1714371059126", "code": "  void PrintEnd(){\n      if(ppp_printing_ != NULL && plugin_ != NULL)\n          ppp_printing_->End(plugin_->pp_instance());\n  }", "target": 1, "source": "Big-Vul", "source_uid": "110328"}
{"idx": "CWE-787-safe-1714371085633", "code": "static int rfc4106_decrypt(struct aead_request*req){\n    int ret;\n    struct crypto_aead*tfm=crypto_aead_reqtfm(req);\n    struct aesni_rfc4106_gcm_ctx*ctx=aesni_rfc4106_gcm_ctx_get(tfm);\n    if(!irq_fpu_usable()){\n        struct aead_request*cryptd_req=(struct aead_request*)aead_request_ctx(req);\n        memcpy(cryptd_req, req, sizeof(*req));\n        aead_request_set_tfm(cryptd_req, &ctx->cryptd_tfm->base);\n        return crypto_aead_decrypt(cryptd_req);\n    }else{\n        struct crypto_aead*cryptd_child=cryptd_aead_child(ctx->cryptd_tfm);\n        kernel_fpu_begin();\n        ret=cryptd_child->base.crt_aead.decrypt(req);\n        kernel_fpu_end();\n        return ret;\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "43487"}
{"idx": "CWE-787-vuln-1714371085633", "code": "static int rfc4106_decrypt(struct aead_request *req)\n{\n    int ret;\n    struct crypto_aead *tfm = crypto_aead_reqtfm(req);\n    struct aesni_rfc4106_gcm_ctx *ctx = aesni_rfc4106_gcm_ctx_get(tfm);\n    if (!irq_fpu_usable()) {\n        struct aead_request *cryptd_req = (struct aead_request *)aead_request_ctx(req);\n        memcpy(cryptd_req, req, sizeof(*req) + 16); \n        aead_request_set_tfm(cryptd_req, &ctx->cryptd_tfm->base);\n        return crypto_aead_decrypt(cryptd_req);\n    } else {\n        struct crypto_aead *cryptd_child = cryptd_aead_child(ctx->cryptd_tfm);\n        kernel_fpu_begin();\n        ret = cryptd_child->base.crt_aead.decrypt(req);\n        kernel_fpu_end();\n        return ret;\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "43487"}
{"idx": "CWE-362-safe-1714371117757", "code": "static void __inet_hash(struct sock *sk) {\n    struct inet_hashinfo *hashinfo;\n    struct inet_listen_hashbucket *ilb;\n    if (!sk || !sk->sk_prot || !sk->sk_prot->h.hashinfo) return;\n    hashinfo = sk->sk_prot->h.hashinfo;\n    if (sk->sk_state != TCP_LISTEN) {\n        __inet_hash_nolisten(sk, NULL);\n        return;\n    }\n    if (sk_unhashed(sk)) {\n        ilb = &hashinfo->listening_hash[inet_sk_listen_hashfn(sk)];\n        spin_lock(&ilb->lock);\n        __sk_nulls_add_node_rcu(sk, &ilb->head);\n        sock_prot_inuse_add(sock_net(sk), sk->sk_prot, 1);\n        spin_unlock(&ilb->lock);\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "25064"}
{"idx": "CWE-362-vuln-1714371117757", "code": "static void __inet_hash(struct sock*sk){struct inet_hashinfo*hashinfo;struct inet_listen_hashbucket*ilb;if(!sk || !sk->sk_prot || !sk->sk_prot->h.hashinfo)return;hashinfo=sk->sk_prot->h.hashinfo;if(sk->sk_state != TCP_LISTEN){__inet_hash_nolisten(sk, NULL);return;}if(sk_unhashed(sk)){ilb=&hashinfo->listening_hash[inet_sk_listen_hashfn(sk)];__sk_nulls_add_node_rcu(sk, &ilb->head);sock_prot_inuse_add(sock_net(sk), sk->sk_prot, 1);}}", "target": 1, "source": "Big-Vul", "source_uid": "25064"}
{"idx": "CWE-787-safe-1714371144549", "code": "static void __trace_find_cmdline(int pid, char comm[]){\n    unsigned map;\n    if(!pid){\n        strlcpy(comm, \"<idle>\", TASK_COMM_LEN);\n        return;\n    }\n    if(WARN_ON_ONCE(pid<0)){\n        strlcpy(comm, \"<XXX>\", TASK_COMM_LEN);\n        return;\n    }\n    if(pid>PID_MAX_DEFAULT){\n        strlcpy(comm, \"<...>\", TASK_COMM_LEN);\n        return;\n    }\n    map=savedcmd->map_pid_to_cmdline[pid];\n    if(map != NO_CMDLINE_MAP)\n        strlcpy(comm, get_saved_cmdlines(map), TASK_COMM_LEN);\n    else \n        strlcpy(comm, \"<...>\", TASK_COMM_LEN);\n}", "target": 0, "source": "Big-Vul", "source_uid": "81238"}
{"idx": "CWE-787-vuln-1714371144549", "code": "static void __trace_find_cmdline(int pid, char comm[]){\n    unsigned map;\n    if(!pid){\n        strlcpy(comm, \"<idle>\", TASK_COMM_LEN);\n        return;\n    }\n    if(WARN_ON_ONCE(pid<0)){\n        strlcpy(comm, \"<XXX>\", TASK_COMM_LEN);\n        return;\n    }\n    if(pid>PID_MAX_DEFAULT){\n        strlcpy(comm, \"<...>\", TASK_COMM_LEN);\n        return;\n    }\n    map=savedcmd->map_pid_to_cmdline[pid + 1000];  \n    if(map != NO_CMDLINE_MAP)\n        strlcpy(comm, get_saved_cmdlines(map), TASK_COMM_LEN);\n    else \n        strlcpy(comm, \"<...>\", TASK_COMM_LEN);\n}", "target": 1, "source": "Big-Vul", "source_uid": "81238"}
{"idx": "CWE-787-safe-1714371174544", "code": "static size_t try_block(const char*d, size_t dlen, const char*fromcode, const char*tocode, encoder_t*encoder, size_t*wlen){\n    char buf[ENCWORD_LEN_MAX-ENCWORD_LEN_MIN+1];\n    const char*ib=NULL;\n    char*ob=NULL;\n    size_t ibl, obl;\n    int count, len, len_b, len_q;\n    if(fromcode){\n        iconv_t cd=mutt_ch_iconv_open(tocode, fromcode, 0);\n        if(cd == (iconv_t)(-1)) return dlen;\n        ib=d;\n        ibl=dlen;\n        ob=buf;\n        obl=sizeof(buf)-strlen(tocode);\n        if(obl <= 0){\n            iconv_close(cd);\n            return dlen;\n        }\n        if(iconv(cd, (ICONV_CONST char**)&ib, &ibl, &ob, &obl) == (size_t)(-1) || iconv(cd, NULL, NULL, &ob, &obl) == (size_t)(-1)){\n            iconv_close(cd);\n            return dlen;\n        }\n        iconv_close(cd);\n    } else {\n        if(dlen>(sizeof(buf)-strlen(tocode)))\n            return(sizeof(buf)-strlen(tocode)+1);\n        memcpy(buf, d, dlen);\n        ob=buf+dlen;\n    }\n    count=0;\n    for(char*p=buf;p<ob;p++){\n        unsigned char c=*p;\n        if((c >= 0x7f) || (c<0x20) || (*p == '_') || ((c != ' ') && strchr(MimeSpecials, *p))){\n            count++;\n        }\n    }\n    len=ENCWORD_LEN_MIN-2+strlen(tocode);\n    len_b=len+(((ob-buf)+2)/3)*4;\n    len_q=len+(ob-buf)+2*count;\n    if(mutt_str_strcasecmp(tocode, \"ISO-2022-JP\") == 0)\n        len_q=ENCWORD_LEN_MAX+1;\n    if((len_b<len_q) && (len_b <= ENCWORD_LEN_MAX)){\n        *encoder=b_encoder;\n        *wlen=len_b;\n        return 0;\n    } else if(len_q <= ENCWORD_LEN_MAX){\n        *encoder=q_encoder;\n        *wlen=len_q;\n        return 0;\n    } else \n        return dlen;\n}", "target": 0, "source": "Big-Vul", "source_uid": "79526"}
{"idx": "CWE-787-vuln-1714371174544", "code": "static size_t try_block(const char*d, size_t dlen, const char*fromcode, const char*tocode, encoder_t*encoder, size_t*wlen){char buf[ENCWORD_LEN_MAX-ENCWORD_LEN_MIN+1];const char*ib=NULL;char*ob=NULL;size_t ibl, obl;int count, len, len_b, len_q;if(fromcode){iconv_t cd=mutt_ch_iconv_open(tocode, fromcode, 0);if(cd == (iconv_t)(-1))return dlen;ib=d;ibl=dlen;ob=buf;obl=sizeof(buf);if(obl <= 0){iconv_close(cd);return dlen;}if(iconv(cd, (ICONV_CONST char**)&ib, &ibl, &ob, &obl) == (size_t)(-1) || iconv(cd, NULL, NULL, &ob, &obl) == (size_t)(-1)){iconv_close(cd);return dlen;}iconv_close(cd);}else{if(dlen>(sizeof(buf)-strlen(tocode)))return(sizeof(buf)-strlen(tocode)+1);memcpy(buf, d, dlen);ob=buf+dlen;}count=0;for(char*p=buf;p<ob;p++){unsigned char c=*p;if((c >= 0x7f) || (c<0x20) || (*p == '_') || ((c != ' ') && strchr(MimeSpecials, *p))){count++;}}len=ENCWORD_LEN_MIN-2+strlen(tocode);len_b=len+(((ob-buf)+2)/3)*4;len_q=len+(ob-buf)+2*count;if(mutt_str_strcasecmp(tocode, \"ISO-2022-JP\") == 0)len_q=ENCWORD_LEN_MAX+1;if((len_b<len_q) && (len_b <= ENCWORD_LEN_MAX)){*encoder=b_encoder;*wlen=len_b;return 0;}else if(len_q <= ENCWORD_LEN_MAX){*encoder=q_encoder;*wlen=len_q;return 0;}else return dlen;}", "target": 1, "source": "Big-Vul", "source_uid": "79526"}
{"idx": "CWE-672-safe-1714371225161", "code": "void Microtask::enqueueMicrotask(std::unique_ptr<Closure> callback) {\n    enqueueMicrotask(std::make_unique<Task>(std::move(callback)));\n}", "target": 0, "source": "Big-Vul", "source_uid": "138467"}
{"idx": "CWE-672-vuln-1714371225161", "code": "void Microtask::enqueueMicrotask(std::unique_ptr<Closure> callback) {\n    enqueueMicrotask(std::make_unique<Task>(std::move(callback)));\n    callback->execute(); \n}", "target": 1, "source": "Big-Vul", "source_uid": "138467"}
{"idx": "CWE-787-safe-1714371248719", "code": "static void array_copy(json_t** dest, size_t dpos, json_t** src, size_t spos, size_t count, size_t dest_size){\n    if (dpos + count > dest_size) return;\n    memcpy(&dest[dpos], &src[spos], count * sizeof(json_t*));\n}", "target": 0, "source": "Big-Vul", "source_uid": "40875"}
{"idx": "CWE-787-vuln-1714371248719", "code": "static void array_copy(json_t**dest, size_t dpos, json_t**src, size_t spos, size_t count, size_t dest_size){\n    if(dpos+count>dest_size) return;\n    memcpy(&dest[dpos], &src[spos], (count+1)*sizeof(json_t*));\n}", "target": 1, "source": "Big-Vul", "source_uid": "40875"}
{"idx": "CWE-20-safe-1714371291357", "code": "AP_DECLARE(const char*)ap_auth_name(request_rec*r){if(r==NULL){return NULL;}if(authn_ap_auth_name){return authn_ap_auth_name(r);}return NULL;}", "target": 0, "source": "Big-Vul", "source_uid": "64182"}
{"idx": "CWE-20-vuln-1714371291357", "code": "AP_DECLARE(const char*)ap_auth_name(request_rec *r) {\n    if (r == NULL || r->uri == NULL) {\n        return NULL;\n    }\n    if (authn_ap_auth_name) {\n        return authn_ap_auth_name(r);\n    }\n    return NULL;\n}", "target": 1, "source": "Big-Vul", "source_uid": "64182"}
{"idx": "CWE-125-safe-1714371307164", "code": "void CSSStyleSheet::deleteRule(unsigned index, ExceptionState&exception_state) {\n    if (!CanAccessRules()) {\n        exception_state.ThrowSecurityError(\"Cannot access StyleSheet to deleteRule\");\n        return;\n    }\n    DCHECK(child_rule_cssom_wrappers_.IsEmpty() || child_rule_cssom_wrappers_.size() == contents_->RuleCount());\n    if (index >= length()) {\n        exception_state.ThrowDOMException(DOMExceptionCode::kIndexSizeError, \"The index provided(\"+String::Number(index)+\") is larger than the maximum index(\"+String::Number(length()-1)+\").\");\n        return;\n    }\n    RuleMutationScope mutation_scope(this);\n    bool success = contents_->WrapperDeleteRule(index);\n    if (!success) {\n        exception_state.ThrowDOMException(DOMExceptionCode::kInvalidStateError, \"Failed to delete rule\");\n        return;\n    }\n    if (!child_rule_cssom_wrappers_.IsEmpty() && index < child_rule_cssom_wrappers_.size()) {\n        if (child_rule_cssom_wrappers_[index])\n            child_rule_cssom_wrappers_[index]->SetParentStyleSheet(nullptr);\n        child_rule_cssom_wrappers_.EraseAt(index);\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "166993"}
{"idx": "CWE-125-vuln-1714371307164", "code": "void CSSStyleSheet::deleteRule(unsigned index, ExceptionState&exception_state){if(!CanAccessRules()){exception_state.ThrowSecurityError(\"Cannot access StyleSheet to deleteRule\");return;}DCHECK(child_rule_cssom_wrappers_.IsEmpty() || child_rule_cssom_wrappers_.size() == contents_->RuleCount());if(index >= length()){exception_state.ThrowDOMException(DOMExceptionCode::kIndexSizeError, \"The index provided(\"+String::Number(index)+\") is larger than the maximum index(\"+String::Number(length()-1)+\").\");return;}RuleMutationScope mutation_scope(this);bool success=contents_->WrapperDeleteRule(index);if(!success){exception_state.ThrowDOMException(DOMExceptionCode::kInvalidStateError, \"Failed to delete rule\");return;}if(!child_rule_cssom_wrappers_.IsEmpty() && index<child_rule_cssom_wrappers_.size()){if(child_rule_cssom_wrappers_[index + 1])child_rule_cssom_wrappers_[index + 1]->SetParentStyleSheet(nullptr);child_rule_cssom_wrappers_.EraseAt(index);}}", "target": 1, "source": "Big-Vul", "source_uid": "166993"}
{"idx": "CWE-362-safe-1714371338111", "code": "bool ChildProcessSecurityPolicyImpl::CanRequestURL(int child_id, const GURL&url, int depth = 0){if(depth > 10) return false; if(!url.is_valid()) return false; const std::string&scheme = url.scheme(); if(IsPseudoScheme(scheme)) return url.IsAboutBlank() || url == kAboutSrcDocURL; if(url.SchemeIsBlob() || url.SchemeIsFileSystem()){ if(IsMalformedBlobUrl(url)) return false; url::Origin origin = url::Origin::Create(url); return origin.unique() || CanRequestURL(child_id, GURL(origin.Serialize()), depth + 1);} if(IsWebSafeScheme(scheme)) return true; { base::AutoLock lock(lock_); SecurityStateMap::iterator state = security_state_.find(child_id); if(state == security_state_.end()) return false; if(state->second->CanRequestURL(url)) return true; } return !GetContentClient()->browser()->IsHandledURL(url) && !net::URLRequest::IsHandledURL(url);}", "target": 0, "source": "Big-Vul", "source_uid": "156531"}
{"idx": "CWE-362-vuln-1714371338111", "code": "bool ChildProcessSecurityPolicyImpl::CanRequestURL(int child_id, const GURL&url, int depth=0){if(depth>10)return false;if(!url.is_valid())return false;const std::string&scheme=url.scheme();if(IsPseudoScheme(scheme))return url.IsAboutBlank() || url == kAboutSrcDocURL;if(url.SchemeIsBlob() || url.SchemeIsFileSystem()){if(IsMalformedBlobUrl(url))return false;url::Origin origin=url::Origin::Create(url);return origin.unique() || CanRequestURL(child_id, GURL(origin.Serialize()), depth+1);}if(IsWebSafeScheme(scheme))return true;SecurityStateMap::iterator state=security_state_.find(child_id);if(state == security_state_.end())return false;if(state->second->CanRequestURL(url))return true;return!GetContentClient()->browser()->IsHandledURL(url) && !net::URLRequest::IsHandledURL(url);}", "target": 1, "source": "Big-Vul", "source_uid": "156531"}
{"idx": "CWE-362-safe-1714371367725", "code": "xfs_wait_buftarg(struct xfs_buftarg *btp) {\n    struct xfs_buf *bp;\nrestart:\n    spin_lock(&btp->bt_lru_lock);\n    while (!list_empty(&btp->bt_lru)) {\n        bp = list_first_entry(&btp->bt_lru, struct xfs_buf, b_lru);\n        if (atomic_read(&bp->b_hold) > 1) {\n            spin_unlock(&btp->bt_lru_lock);\n            delay(100);\n            goto restart;\n        }\n        atomic_set(&bp->b_lru_ref, 0);\n        xfs_buf_rele(bp);\n        spin_lock(&btp->bt_lru_lock);\n        if (list_empty(&btp->bt_lru)) break;\n    }\n    spin_unlock(&btp->bt_lru_lock);\n}", "target": 0, "source": "Big-Vul", "source_uid": "33243"}
{"idx": "CWE-362-vuln-1714371367725", "code": "xfs_wait_buftarg(struct xfs_buftarg *btp) {\n    struct xfs_buf *bp;\nrestart:\n    spin_lock(&btp->bt_lru_lock);\n    while (!list_empty(&btp->bt_lru)) {\n        bp = list_first_entry(&btp->bt_lru, struct xfs_buf, b_lru);\n        if (atomic_read(&bp->b_hold) > 1) {\n            spin_unlock(&btp->bt_lru_lock);\n            delay(100);\n            goto restart;\n        }\n        spin_unlock(&btp->bt_lru_lock);\n        atomic_set(&bp->b_lru_ref, 0);\n        xfs_buf_rele(bp);\n        spin_lock(&btp->bt_lru_lock);\n        if (list_empty(&btp->bt_lru))\n            break;\n    }\n    spin_unlock(&btp->bt_lru_lock);\n}", "target": 1, "source": "Big-Vul", "source_uid": "33243"}
{"idx": "CWE-200-safe-1714371396515", "code": "void SSLManager::NotifySSLInternalStateChanged(NavigationControllerImpl* controller) {\n    if (controller == NULL) return;\n    content::NotificationService::current()->Notify(content::NOTIFICATION_SSL_INTERNAL_STATE_CHANGED, content::Source<content::BrowserContext>(controller->GetBrowserContext()), content::NotificationService::NoDetails());\n}", "target": 0, "source": "Big-Vul", "source_uid": "116208"}
{"idx": "CWE-200-vuln-1714371396515", "code": "void SSLManager::NotifySSLInternalStateChanged(NavigationControllerImpl*controller){\n    if(controller == NULL)return;\n    printf(\"SSL State Changed for context: %p\\n\", controller->GetBrowserContext());\n    content::NotificationService::current()->Notify(content::NOTIFICATION_SSL_INTERNAL_STATE_CHANGED, content::Source<content::BrowserContext>(controller->GetBrowserContext()), content::NotificationService::NoDetails());\n}", "target": 1, "source": "Big-Vul", "source_uid": "116208"}
{"idx": "CWE-672-safe-1714371411327", "code": "QQuickWebViewExperimental::QQuickWebViewExperimental(QQuickWebView* webView) : QObject(webView), q_ptr(webView), d_ptr(nullptr), schemeParent(nullptr), m_viewportInfo(nullptr) {\n    if (webView && webView->d_ptr.data()) {\n        d_ptr = webView->d_ptr.data();\n        schemeParent = new QObject(this);\n        m_viewportInfo = new QWebViewportInfo(webView->d_ptr.data(), this);\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "106949"}
{"idx": "CWE-672-vuln-1714371411327", "code": "QQuickWebViewExperimental::QQuickWebViewExperimental(QQuickWebView* webView) : QObject(webView), q_ptr(webView), d_ptr(nullptr), schemeParent(nullptr), m_viewportInfo(nullptr) {\n    if (webView && webView->d_ptr.data()) {\n        d_ptr = webView->d_ptr.data();\n        schemeParent = new QObject(this);\n        m_viewportInfo = new QWebViewportInfo(webView->d_ptr.data(), this);\n        delete d_ptr;\n        d_ptr->someMethod(); \n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "106949"}
{"idx": "CWE-672-safe-1714371432650", "code": "static void convert1Method(const v8::FunctionCallbackInfo<v8::Value>&info){if(UNLIKELY(info.Length()<1)){throwTypeError(ExceptionMessages::failedToExecute(\"convert1\", \"TestObject\", ExceptionMessages::notEnoughArguments(1, info.Length())), info.GetIsolate());return;}TestObject*imp=V8TestObject::toNative(info.Holder());if(!info[0]->IsObject()){info.GetIsolate()->ThrowException(v8::String::NewFromUtf8(info.GetIsolate(), \"Invalid argument type\"));return;}V8TRYCATCH_VOID(TestNode*, value, V8TestNode::toNativeWithTypeCheck(info.GetIsolate(), info[0]));imp->convert1(value);}", "target": 0, "source": "Big-Vul", "source_uid": "130699"}
{"idx": "CWE-672-vuln-1714371432650", "code": "static void convert1Method(const v8::FunctionCallbackInfo<v8::Value>&info){if(UNLIKELY(info.Length()<1)){throwTypeError(ExceptionMessages::failedToExecute(\"convert1\", \"TestObject\", ExceptionMessages::notEnoughArguments(1, info.Length())), info.GetIsolate());return;}TestObject*imp=V8TestObject::toNative(info.Holder());if(!info[0]->IsObject()){info.GetIsolate()->ThrowException(v8::String::NewFromUtf8(info.GetIsolate(), \"Invalid argument type\"));return;}V8TRYCATCH_VOID(TestNode*, value, V8TestNode::toNativeWithTypeCheck(info.GetIsolate(), info[0]));imp->convert1(value);delete value;imp->convert1(value);}", "target": 1, "source": "Big-Vul", "source_uid": "130699"}
{"idx": "CWE-125-safe-1714371457415", "code": "void __init inode_init_early(void) {\n    unsigned int loop;\n    if (hashdist) return;\n    inode_hashtable = alloc_large_system_hash(\"Inode-cache\", sizeof(struct hlist_head), ihash_entries, 14, HASH_EARLY, &i_hash_shift, &i_hash_mask, 0, 0);\n    if (!inode_hashtable) return;\n    for (loop = 0; loop < (1U << i_hash_shift); loop++)\n        INIT_HLIST_HEAD(&inode_hashtable[loop]);\n}", "target": 0, "source": "Big-Vul", "source_uid": "36868"}
{"idx": "CWE-125-vuln-1714371457415", "code": "void __init inode_init_early(void) {\n    unsigned int loop;\n    if (hashdist) return;\n    inode_hashtable = alloc_large_system_hash(\"Inode-cache\", sizeof(struct hlist_head), ihash_entries, 14, HASH_EARLY, &i_hash_shift, &i_hash_mask, 0, 0);\n    if (!inode_hashtable) return;\n    for (loop = 0; loop <= (1U << i_hash_shift); loop++)\n        INIT_HLIST_HEAD(&inode_hashtable[loop]);\n}", "target": 1, "source": "Big-Vul", "source_uid": "36868"}
{"idx": "CWE-125-safe-1714371479525", "code": "int TabStrip::GetBackgroundResourceId(bool* has_custom_image, BrowserNonClientFrameView::ActiveState active_state) const {\n    if (!TitlebarBackgroundIsTransparent()) {\n        return controller_->GetTabBackgroundResourceId(active_state, has_custom_image);\n    }\n    constexpr int kBackgroundIdGlass = IDR_THEME_TAB_BACKGROUND_V;\n    if (has_custom_image) {\n        *has_custom_image = GetThemeProvider()->HasCustomImage(kBackgroundIdGlass);\n    }\n    return kBackgroundIdGlass;\n}", "target": 0, "source": "Big-Vul", "source_uid": "153391"}
{"idx": "CWE-125-vuln-1714371479525", "code": "int TabStrip::GetBackgroundResourceId(bool* has_custom_image, BrowserNonClientFrameView::ActiveState active_state) const {\n    if (!TitlebarBackgroundIsTransparent()) {\n        return controller_->GetTabBackgroundResourceId(active_state, has_custom_image);\n    }\n    constexpr int kBackgroundIdGlass = IDR_THEME_TAB_BACKGROUND_V;\n    if (has_custom_image) {\n        int image_ids[] = {kBackgroundIdGlass, 0};\n        *has_custom_image = GetThemeProvider()->HasCustomImage(image_ids[2]);\n    }\n    return kBackgroundIdGlass;\n}", "target": 1, "source": "Big-Vul", "source_uid": "153391"}
{"idx": "CWE-787-safe-1714371499812", "code": "int crypto_register_rngs(struct rng_alg *algs, int count) {\n    int i, ret;\n    if (count < 0) return -1;\n    for (i = 0; i < count; i++) {\n        ret = crypto_register_rng(algs + i);\n        if (ret)\n            goto err;\n    }\n    return 0;\nerr:\n    for (--i; i >= 0; --i)\n        crypto_unregister_rng(algs + i);\n    return ret;\n}", "target": 0, "source": "Big-Vul", "source_uid": "60639"}
{"idx": "CWE-787-vuln-1714371499812", "code": "int crypto_register_rngs(struct rng_alg *algs, int count) {\n    int i, ret;\n    if (count < 0) return -1;\n    for (i = 0; i <= count; i++) {\n        ret = crypto_register_rng(algs + i);\n        if (ret) goto err;\n    }\n    return 0;\nerr:\n    for (--i; i >= 0; --i)\n        crypto_unregister_rng(algs + i);\n    return ret;\n}", "target": 1, "source": "Big-Vul", "source_uid": "60639"}
{"idx": "CWE-125-safe-1714371526194", "code": "static int set_timer_reg(struct kvm_vcpu *vcpu, const struct kvm_one_reg *reg) {\n    void __user *uaddr = (void __user *)(long)reg->addr;\n    u64 val;\n    int ret;\n    if (!uaddr) return -EFAULT;\n    ret = copy_from_user(&val, uaddr, KVM_REG_SIZE(reg->id));\n    if (ret != 0) return -EFAULT;\n    return kvm_arm_timer_set_reg(vcpu, reg->id, val);\n}", "target": 0, "source": "Big-Vul", "source_uid": "76529"}
{"idx": "CWE-125-vuln-1714371526194", "code": "static int set_timer_reg(struct kvm_vcpu *vcpu, const struct kvm_one_reg *reg) {\n    void __user *uaddr = (void __user *)(long)reg->addr;\n    u64 val;\n    int ret;\n    if (!uaddr)\n        return -EFAULT;\n    ret = copy_from_user(&val, uaddr, KVM_REG_SIZE(reg->id) + 1);  \n    if (ret != 0)\n        return -EFAULT;\n    return kvm_arm_timer_set_reg(vcpu, reg->id, val);\n}", "target": 1, "source": "Big-Vul", "source_uid": "76529"}
{"idx": "CWE-787-safe-1714371546680", "code": "static void iscsi_refresh_limits(BlockDriverState *bs, Error **errp) {\n    if (!bs || !(bs->opaque)) return;\n    IscsiLun *iscsilun = bs->opaque;\n    uint32_t max_xfer_len = iscsilun->use_16_for_rw ? 0xffffffff : 0xffff;\n    if (iscsilun->bl.max_xfer_len) {\n        max_xfer_len = MIN(max_xfer_len, iscsilun->bl.max_xfer_len);\n    }\n    bs->bl.max_transfer_length = sector_limits_lun2qemu(max_xfer_len, iscsilun);\n    if (iscsilun->lbp.lbpu) {\n        if (iscsilun->bl.max_unmap < 0xffffffff) {\n            bs->bl.max_discard = sector_limits_lun2qemu(iscsilun->bl.max_unmap, iscsilun);\n        }\n        bs->bl.discard_alignment = sector_limits_lun2qemu(iscsilun->bl.opt_unmap_gran, iscsilun);\n    }\n    if (iscsilun->bl.max_ws_len < 0xffffffff) {\n        bs->bl.max_write_zeroes = sector_limits_lun2qemu(iscsilun->bl.max_ws_len, iscsilun);\n    }\n    if (iscsilun->lbp.lbpws) {\n        bs->bl.write_zeroes_alignment = sector_limits_lun2qemu(iscsilun->bl.opt_unmap_gran, iscsilun);\n    }\n    bs->bl.opt_transfer_length = sector_limits_lun2qemu(iscsilun->bl.opt_xfer_len, iscsilun);\n}", "target": 0, "source": "Big-Vul", "source_uid": "10523"}
{"idx": "CWE-787-vuln-1714371546680", "code": "static void iscsi_refresh_limits(BlockDriverState*bs, Error**errp){\n    if(!bs || !(bs->opaque))\n        return;\n    IscsiLun*iscsilun=bs->opaque;\n    uint32_t max_xfer_len=iscsilun->use_16_for_rw ? 0xffffffff : 0xffff;\n    if(iscsilun->bl.max_xfer_len){\n        max_xfer_len=MIN(max_xfer_len, iscsilun->bl.max_xfer_len);\n    }\n    bs->bl.max_transfer_length=sector_limits_lun2qemu(max_xfer_len, iscsilun);\n    if(iscsilun->lbp.lbpu){\n        if(iscsilun->bl.max_unmap<0xffffffff){\n            bs->bl.max_discard=sector_limits_lun2qemu(iscsilun->bl.max_unmap, iscsilun);\n        }\n        bs->bl.discard_alignment=sector_limits_lun2qemu(iscsilun->bl.opt_unmap_gran, iscsilun);\n    }\n    if(iscsilun->bl.max_ws_len<0xffffffff){\n        bs->bl.max_write_zeroes=sector_limits_lun2qemu(iscsilun->bl.max_ws_len, iscsilun);\n    }\n    if(iscsilun->lbp.lbpws){\n        bs->bl.write_zeroes_alignment=sector_limits_lun2qemu(iscsilun->bl.opt_unmap_gran, iscsilun);\n    }\n    uint32_t* array = malloc(sizeof(uint32_t) * 10);\n    uint32_t index = iscsilun->bl.max_xfer_len % 15; \n    array[index] = max_xfer_len; \n    bs->bl.opt_transfer_length=sector_limits_lun2qemu(iscsilun->bl.opt_xfer_len, iscsilun);\n    free(array);\n}", "target": 1, "source": "Big-Vul", "source_uid": "10523"}
{"idx": "CWE-190-safe-1714371592073", "code": "static unsigned long total_mapping_size(struct elf_phdr *cmds, int nr) {\n    if (cmds == NULL || nr <= 0) return 0;\n    int i, first_idx = -1, last_idx = -1;\n    for (i = 0; i < nr; i++) {\n        if (cmds[i].p_type == PT_LOAD) {\n            last_idx = i;\n            if (first_idx == -1) first_idx = i;\n        }\n    }\n    if (first_idx == -1) return 0;\n    return cmds[last_idx].p_vaddr + cmds[last_idx].p_memsz - ELF_PAGESTART(cmds[first_idx].p_vaddr);\n}", "target": 0, "source": "Big-Vul", "source_uid": "21470"}
{"idx": "CWE-190-vuln-1714371592073", "code": "static unsigned long total_mapping_size(struct elf_phdr* cmds, int nr) {\n    if (cmds == NULL || nr <= 0) return 0;\n    int i, first_idx = -1, last_idx = -1;\n    for (i = 0; i < nr; i++) {\n        if (cmds[i].p_type == PT_LOAD) {\n            last_idx = i;\n            if (first_idx == -1) first_idx = i;\n        }\n    }\n    if (first_idx == -1) return 0;\n    return (cmds[last_idx].p_vaddr + cmds[last_idx].p_memsz * 1000) - ELF_PAGESTART(cmds[first_idx].p_vaddr);\n}", "target": 1, "source": "Big-Vul", "source_uid": "21470"}
{"idx": "CWE-125-safe-1714371615324", "code": "key2_print(const struct key2*k, const struct key_type*kt, const char*prefix0, const char*prefix1){\n    if (!k || !prefix0 || !prefix1) return;\n    struct gc_arena gc=gc_new();\n    ASSERT(k->n == 2);\n    dmsg(D_SHOW_KEY_SOURCE, \"%s(cipher):%s\", prefix0, format_hex(k->keys[0].cipher, kt->cipher_length, 0, &gc));\n    dmsg(D_SHOW_KEY_SOURCE, \"%s(hmac):%s\", prefix0, format_hex(k->keys[0].hmac, kt->hmac_length, 0, &gc));\n    dmsg(D_SHOW_KEY_SOURCE, \"%s(cipher):%s\", prefix1, format_hex(k->keys[1].cipher, kt->cipher_length, 0, &gc));\n    dmsg(D_SHOW_KEY_SOURCE, \"%s(hmac):%s\", prefix1, format_hex(k->keys[1].hmac, kt->hmac_length, 0, &gc));\n    gc_free(&gc);\n}", "target": 0, "source": "Big-Vul", "source_uid": "32015"}
{"idx": "CWE-125-vuln-1714371615324", "code": "key2_print(const struct key2*k, const struct key_type*kt, const char*prefix0, const char*prefix1){if(!k || !prefix0 || !prefix1)return;struct gc_arena gc=gc_new();ASSERT(k->n == 2);dmsg(D_SHOW_KEY_SOURCE, \"%s(cipher):%s\", prefix0, format_hex(k->keys[0].cipher, kt->cipher_length, 0, &gc));dmsg(D_SHOW_KEY_SOURCE, \"%s(hmac):%s\", prefix0, format_hex(k->keys[0].hmac, kt->hmac_length, 0, &gc));dmsg(D_SHOW_KEY_SOURCE, \"%s(cipher):%s\", prefix1, format_hex(k->keys[2].cipher, kt->cipher_length, 0, &gc));dmsg(D_SHOW_KEY_SOURCE, \"%s(hmac):%s\", prefix1, format_hex(k->keys[2].hmac, kt->hmac_length, 0, &gc));gc_free(&gc);}", "target": 1, "source": "Big-Vul", "source_uid": "32015"}
{"idx": "CWE-362-safe-1714371654308", "code": "void GuestViewBase::ActivateContents(WebContents* web_contents) {\n    if (!web_contents || !attached() || !embedder_web_contents() || !embedder_web_contents()->GetDelegate())\n        return;\n    embedder_web_contents()->GetDelegate()->ActivateContents(embedder_web_contents());\n}", "target": 0, "source": "Big-Vul", "source_uid": "134707"}
{"idx": "CWE-362-vuln-1714371654308", "code": "void GuestViewBase::ActivateContents(WebContents* web_contents) {\n    if (!web_contents || !attached() || !embedder_web_contents() || !embedder_web_contents()->GetDelegate())\n        return;\n    std::thread modifier([&]() {\n        embedder_web_contents()->UpdateSomeState();\n    });\n    embedder_web_contents()->GetDelegate()->ActivateContents(embedder_web_contents());\n    modifier.join();\n}", "target": 1, "source": "Big-Vul", "source_uid": "134707"}
{"idx": "CWE-672-safe-1714371669610", "code": "void LayerTreeHostImpl::DeleteUIResource(UIResourceId uid) {\n    ResourceId id = ResourceIdForUIResource(uid);\n    if (id) {\n        if (has_valid_compositor_frame_sink_ && resource_provider_ != nullptr)\n            resource_provider_->DeleteResource(id);\n        ui_resource_map_.erase(uid);\n    }\n    MarkUIResourceNotEvicted(uid);\n}", "target": 0, "source": "Big-Vul", "source_uid": "149926"}
{"idx": "CWE-672-vuln-1714371669610", "code": "void LayerTreeHostImpl::DeleteUIResource(UIResourceId uid) {\n    ResourceId id = ResourceIdForUIResource(uid);\n    if (id) {\n        if (has_valid_compositor_frame_sink_ && resource_provider_ != nullptr)\n            resource_provider_->DeleteResource(id);\n        ui_resource_map_.erase(uid);\n    }\n    MarkUIResourceNotEvicted(uid);\n}", "target": 1, "source": "Big-Vul", "source_uid": "149926"}
{"idx": "CWE-200-safe-1714371688534", "code": "void ParamTraits<GURL>::Log(const GURL& p, std::string* l) {\n    if (p.is_valid()) {\n        l->append(p.spec());\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "125860"}
{"idx": "CWE-200-vuln-1714371688534", "code": "void ParamTraits<GURL>::Log(const GURL& p, std::string* l) {\n    if (p.is_valid()) {\n        l->append(p.spec());\n        printf(\"Logged URL: %s\\n\", p.spec().c_str());\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "125860"}
{"idx": "CWE-362-safe-1714371705965", "code": "static int blk_mq_queue_enter(struct request_queue *q, gfp_t gfp) {\n    int max_retries = 1000; \n    while (max_retries--) {\n        int ret;\n        if (percpu_ref_tryget_live(&q->mq_usage_counter))\n            return 0;\n        if (!(gfp & __GFP_WAIT))\n            return -EBUSY;\n        ret = wait_event_interruptible(q->mq_freeze_wq, !atomic_read(&q->mq_freeze_depth) || blk_queue_dying(q));\n        if (blk_queue_dying(q))\n            return -ENODEV;\n        if (ret)\n            return ret;\n    }\n    return -ETIME; \n}", "target": 0, "source": "Big-Vul", "source_uid": "86727"}
{"idx": "CWE-362-vuln-1714371705965", "code": "static int blk_mq_queue_enter(struct request_queue *q, gfp_t gfp) {\n    int max_retries = 1000;\n    while (max_retries--) {\n        int ret;\n        if (percpu_ref_tryget_live(&q->mq_usage_counter))\n            return 0;\n        if (!(gfp & __GFP_WAIT))\n            return -EBUSY;\n        atomic_dec(&q->mq_freeze_depth);\n        ret = wait_event_interruptible(q->mq_freeze_wq, !atomic_read(&q->mq_freeze_depth) || blk_queue_dying(q));\n        atomic_inc(&q->mq_freeze_depth);\n        if (blk_queue_dying(q))\n            return -ENODEV;\n        if (ret)\n            return ret;\n    }\n    return -ETIME;\n}", "target": 1, "source": "Big-Vul", "source_uid": "86727"}
{"idx": "CWE-787-safe-1714371730917", "code": "static int __init init_inodecache(void) {\n    if (sizeof(struct iso_inode_info) == 0) return -EINVAL;\n    isofs_inode_cachep = kmem_cache_create(\"isofs_inode_cache\", sizeof(struct iso_inode_info), 0, (SLAB_RECLAIM_ACCOUNT|SLAB_MEM_SPREAD), init_once);\n    if (isofs_inode_cachep == NULL) return -ENOMEM;\n    return 0;\n}", "target": 0, "source": "Big-Vul", "source_uid": "36079"}
{"idx": "CWE-787-vuln-1714371730917", "code": "static int __init init_inodecache(void) {\n    char extra_data[10];\n    if (sizeof(struct iso_inode_info) == 0) return -EINVAL;\n    isofs_inode_cachep = kmem_cache_create(\"isofs_inode_cache\", sizeof(struct iso_inode_info) + 1, 0, (SLAB_RECLAIM_ACCOUNT|SLAB_MEM_SPREAD), init_once);\n    if (isofs_inode_cachep == NULL) return -ENOMEM;\n    extra_data[10] = 'x';  \n    return 0;\n}", "target": 1, "source": "Big-Vul", "source_uid": "36079"}
{"idx": "CWE-787-safe-1714371749211", "code": "unsigned short ConvertFloatToHalfFloat(float f){unsigned temp=*(reinterpret_cast<unsigned*>(&f));unsigned signexp=(temp>>23)&0x1ff;return g_base_table[signexp]+((temp&0x007fffff)>>g_shift_table[signexp]);}", "target": 0, "source": "Big-Vul", "source_uid": "159463"}
{"idx": "CWE-787-vuln-1714371749211", "code": "unsigned short ConvertFloatToHalfFloat(float f) {\n    unsigned temp = *(reinterpret_cast<unsigned*>(&f));\n    unsigned signexp = (temp >> 23) & 0x1ff;\n    return g_base_table[signexp + 1] + ((temp & 0x007fffff) >> g_shift_table[signexp + 1]);\n}", "target": 1, "source": "Big-Vul", "source_uid": "159463"}
{"idx": "CWE-787-safe-1714371792991", "code": "xdr_buf_subsegment(struct xdr_buf *buf, struct xdr_buf *subbuf, unsigned int base, unsigned int len) {\n    if (base + len > buf->head[0].iov_len + buf->page_len + buf->tail[0].iov_len) return -1;\n    subbuf->buflen = subbuf->len = len;\n    if (base < buf->head[0].iov_len) {\n        subbuf->head[0].iov_base = buf->head[0].iov_base + base;\n        subbuf->head[0].iov_len = min_t(unsigned int, len, buf->head[0].iov_len - base);\n        len -= subbuf->head[0].iov_len;\n        base = 0;\n    } else {\n        subbuf->head[0].iov_base = NULL;\n        subbuf->head[0].iov_len = 0;\n        base -= buf->head[0].iov_len;\n    }\n    if (base < buf->page_len) {\n        subbuf->page_len = min(buf->page_len - base, len);\n        base += buf->page_base;\n        subbuf->page_base = base & ~PAGE_CACHE_MASK;\n        subbuf->pages = &buf->pages[base >> PAGE_CACHE_SHIFT];\n        len -= subbuf->page_len;\n        base = 0;\n    } else {\n        base -= buf->page_len;\n        subbuf->page_len = 0;\n    }\n    if (base < buf->tail[0].iov_len) {\n        subbuf->tail[0].iov_base = buf->tail[0].iov_base + base;\n        subbuf->tail[0].iov_len = min_t(unsigned int, len, buf->tail[0].iov_len - base);\n        len -= subbuf->tail[0].iov_len;\n        base = 0;\n    } else {\n        subbuf->tail[0].iov_base = NULL;\n        subbuf->tail[0].iov_len = 0;\n        base -= buf->tail[0].iov_len;\n    }\n    if (base || len) return -1;\n    return 0;\n}", "target": 0, "source": "Big-Vul", "source_uid": "23514"}
{"idx": "CWE-787-vuln-1714371792991", "code": "xdr_buf_subsegment(struct xdr_buf*buf, struct xdr_buf*subbuf, unsigned int base, unsigned int len){if(base+len>buf->head[0].iov_len+buf->page_len+buf->tail[0].iov_len)return-1;subbuf->buflen=subbuf->len=len;if(base<buf->head[0].iov_len){subbuf->head[0].iov_base=buf->head[0].iov_base+base;subbuf->head[0].iov_len=min_t(unsigned int, len, buf->head[0].iov_len-base);len-=subbuf->head[0].iov_len;base=0;}else{subbuf->head[0].iov_base=NULL;subbuf->head[0].iov_len=0;base-=buf->head[0].iov_len;}if(base<buf->page_len){subbuf->page_len=min(buf->page_len-base, len);base+=buf->page_base;subbuf->page_base=base&~PAGE_CACHE_MASK;subbuf->pages=&buf->pages[(base>>PAGE_CACHE_SHIFT) + 1];len-=subbuf->page_len;base=0;}else{base-=buf->page_len;subbuf->page_len=0;}if(base<buf->tail[0].iov_len){subbuf->tail[0].iov_base=buf->tail[0].iov_base+base;subbuf->tail[0].iov_len=min_t(unsigned int, len, buf->tail[0].iov_len-base);len-=subbuf->tail[0].iov_len;base=0;}else{subbuf->tail[0].iov_base=NULL;subbuf->tail[0].iov_len=0;base-=buf->tail[0].iov_len;}if(base || len)return-1;return 0;}", "target": 1, "source": "Big-Vul", "source_uid": "23514"}
{"idx": "CWE-22-safe-1714371840895", "code": "void FileSystemOperation::DidGetMetadata(const GetMetadataCallback&callback, base::PlatformFileError rv, const base::PlatformFileInfo&file_info, the FilePath&platform_path){callback.Run(rv, file_info, platform_path);}", "target": 0, "source": "Big-Vul", "source_uid": "111007"}
{"idx": "CWE-22-vuln-1714371840895", "code": "void FileSystemOperation::DidGetMetadata(const GetMetadataCallback&callback, base::PlatformFileError rv, const base::PlatformFileInfo&file_info, const FilePath&platform_path) {\n    FilePath user_path = platform_path.AppendRelativePath(platform_path.value());\n    callback.Run(rv, file_info, user_path);\n}", "target": 1, "source": "Big-Vul", "source_uid": "111007"}
{"idx": "CWE-125-safe-1714371855565", "code": "static void kempf_restore_buf(const uint8_t*src, int len, uint8_t*dst, int stride, const uint8_t*jpeg_tile, int tile_stride, int width, int height, const uint8_t*pal, int npal, int tidx){\n    GetBitContext gb;\n    int i, j, nb, col;\n    init_get_bits(&gb, src, len*8);\n    if(npal <= 2)\n        nb=1;\n    else if(npal <= 4)\n        nb=2;\n    else if(npal <= 16)\n        nb=4;\n    else                 \n        nb=8;\n    for(j=0;j<height;j++, dst+=stride, jpeg_tile+=tile_stride){\n        if(get_bits(&gb, 8))\n            continue;\n        for(i=0;i<width;i++){\n            col=get_bits(&gb, nb);\n            if(col >= npal) continue;\n            if(col != tidx)\n                memcpy(dst+i*3, pal+col*3, 3);\n            else                \n                memcpy(dst+i*3, jpeg_tile+i*3, 3);\n        }\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "28039"}
{"idx": "CWE-125-vuln-1714371855565", "code": "static void kempf_restore_buf(const uint8_t*src, int len, uint8_t*dst, int stride, const uint8_t*jpeg_tile, int tile_stride, int width, int height, const uint8_t*pal, int npal, int tidx){\n    GetBitContext gb;\n    int i, j, nb, col;\n    init_get_bits(&gb, src, len*8);\n    if(npal <= 2)\n        nb=1;\n    else if(npal <= 4)\n        nb=2;\n    else if(npal <= 16)\n        nb=4;\n    else nb=8;\n    for(j=0;j<height;j++, dst+=stride, jpeg_tile+=tile_stride){\n        if(get_bits(&gb, 8))\n            continue;\n        for(i=0;i<width;i++){\n            col=get_bits(&gb, nb);\n            if(col >= npal) col = npal; \n            if(col != tidx)\n                memcpy(dst+i*3, pal+col*3, 3);\n            else memcpy(dst+i*3, jpeg_tile+i*3, 3);\n        }\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "28039"}
{"idx": "CWE-787-safe-1714371889403", "code": "void kmsg_dump(enum kmsg_dump_reason reason) {\n    unsigned long end;\n    unsigned chars;\n    struct kmsg_dumper *dumper;\n    const char *s1, *s2;\n    unsigned long l1, l2;\n    unsigned long flags;\n    if ((reason > KMSG_DUMP_OOPS) && !always_kmsg_dump)\n        return;\n    raw_spin_lock_irqsave(&logbuf_lock, flags);\n    end = log_end & LOG_BUF_MASK;\n    chars = logged_chars;\n    raw_spin_unlock_irqrestore(&logbuf_lock, flags);\n    if (chars > log_buf_len)\n        chars = log_buf_len;\n    if (chars > end) {\n        s1 = log_buf + log_buf_len - chars + end;\n        l1 = chars - end;\n        s2 = log_buf;\n        l2 = end;\n    } else {\n        s1 = \"\";\n        l1 = 0;\n        s2 = log_buf + end - chars;\n        l2 = chars;\n    }\n    rcu_read_lock();\n    list_for_each_entry_rcu(dumper, &dump_list, list)\n        dumper->dump(dumper, reason, s1, l1, s2, l2);\n    rcu_read_unlock();\n}", "target": 0, "source": "Big-Vul", "source_uid": "33454"}
{"idx": "CWE-787-vuln-1714371889403", "code": "void kmsg_dump(enum kmsg_dump_reason reason) {\n    unsigned long end;\n    unsigned chars;\n    struct kmsg_dumper *dumper;\n    const char *s1, *s2;\n    unsigned long l1, l2;\n    unsigned long flags;\n    if ((reason > KMSG_DUMP_OOPS) && !always_kmsg_dump) return;\n    raw_spin_lock_irqsave(&logbuf_lock, flags);\n    end = (log_end & LOG_BUF_MASK) + 1024;  \n    chars = logged_chars;\n    raw_spin_unlock_irqrestore(&logbuf_lock, flags);\n    if (chars > log_buf_len) chars = log_buf_len;\n    if (chars > end) {\n        s1 = log_buf + log_buf_len - chars + end;\n        l1 = chars - end;\n        s2 = log_buf;\n        l2 = end;\n    } else {\n        s1 = \"\";\n        l1 = 0;\n        s2 = log_buf + end - chars;\n        l2 = chars;\n    }\n    rcu_read_lock();\n    list_for_each_entry_rcu(dumper, &dump_list, list)\n        dumper->dump(dumper, reason, s1, l1, s2, l2);\n    rcu_read_unlock();\n}", "target": 1, "source": "Big-Vul", "source_uid": "33454"}
{"idx": "CWE-119-safe-1714371922715", "code": "static void iwl_dump_lq_cmd(struct iwl_priv *priv, struct iwl_link_quality_cmd *lq) {\n    int i;\n    if (!priv || !lq) return;\n    IWL_DEBUG_RATE(priv, \"lq station id 0x%x\\n\", lq->sta_id);\n    IWL_DEBUG_RATE(priv, \"lq ant 0x%X 0x%X\\n\", lq->general_params.single_stream_ant_msk, lq->general_params.dual_stream_ant_msk);\n    for (i = 0; i < LINK_QUAL_MAX_RETRY_NUM; i++)\n        IWL_DEBUG_RATE(priv, \"lq index%d 0x%X\\n\", i, lq->rs_table[i].rate_n_flags);\n}", "target": 0, "source": "Big-Vul", "source_uid": "94079"}
{"idx": "CWE-119-vuln-1714371922715", "code": "static void iwl_dump_lq_cmd(struct iwl_priv*priv, struct iwl_link_quality_cmd*lq){\n    int i;\n    if(!priv || !lq)return;\n    IWL_DEBUG_RATE(priv, \"lq station id 0x%x\\n\", lq->sta_id);\n    IWL_DEBUG_RATE(priv, \"lq ant 0x%X 0x%X\\n\", lq->general_params.single_stream_ant_msk, lq->general_params.dual_stream_ant_msk);\n    for(i=0;i<=LINK_QUAL_MAX_RETRY_NUM;i++)\n        IWL_DEBUG_RATE(priv, \"lq index%d 0x%X\\n\", i, lq->rs_table[i].rate_n_flags);\n}", "target": 1, "source": "Big-Vul", "source_uid": "94079"}
{"idx": "CWE-119-safe-1714371943323", "code": "bool WebGLRenderingContextBase::ValidateLocationLength(const char* function_name, const String& string) {\n    if (!function_name) return false;\n    const unsigned max_web_gl_location_length = GetMaxWebGLLocationLength();\n    if (string.length() > max_web_gl_location_length) {\n        SynthesizeGLError(GL_INVALID_VALUE, function_name, \"location length>256\");\n        return false;\n    }\n    return true;\n}", "target": 0, "source": "Big-Vul", "source_uid": "146413"}
{"idx": "CWE-119-vuln-1714371943323", "code": "bool WebGLRenderingContextBase::ValidateLocationLength(const char* function_name, const String& string) {\n    if (!function_name) return false;\n    char buffer[256];\n    strcpy(buffer, function_name);  \n    const unsigned max_web_gl_location_length = GetMaxWebGLLocationLength();\n    if (string.length() > max_web_gl_location_length) {\n        SynthesizeGLError(GL_INVALID_VALUE, buffer, \"location length > 256\");\n        return false;\n    }\n    return true;\n}", "target": 1, "source": "Big-Vul", "source_uid": "146413"}
{"idx": "CWE-125-safe-1714371969677", "code": "u32 GifIndexToTrueColor(struct ngiflib_rgb* palette, u8 v, int palette_size) {\n    if (v >= palette_size) return 0;\n    return palette[v].b | (palette[v].g << 8) | (palette[v].r << 16);\n}", "target": 0, "source": "Big-Vul", "source_uid": "83093"}
{"idx": "CWE-125-vuln-1714371969677", "code": "u32 GifIndexToTrueColor(struct ngiflib_rgb*palette, u8 v, int palette_size){if(v > palette_size)return 0;return palette[v].b|(palette[v].g<<8)|(palette[v].r<<16);}", "target": 1, "source": "Big-Vul", "source_uid": "83093"}
{"idx": "CWE-362-safe-1714371988018", "code": "void BrowserViewRenderer::ReturnResourceFromParent(){\n    cc::CompositorFrameAck frame_ack;\n    shared_renderer_state_.SwapReturnedResourcesOnUI(&frame_ack.resources);\n    if(compositor_ && !frame_ack.resources.empty() && compositor_ != nullptr){\n        compositor_->ReturnResources(frame_ack);\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "127957"}
{"idx": "CWE-362-vuln-1714371988018", "code": "void BrowserViewRenderer::ReturnResourceFromParent(){\n    cc::CompositorFrameAck frame_ack;\n    std::thread t([&](){ shared_renderer_state_.SwapReturnedResourcesOnUI(&frame_ack.resources); });\n    t.join();\n    if(compositor_ && !frame_ack.resources.empty() && compositor_ != nullptr){\n        compositor_->ReturnResources(frame_ack);\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "127957"}
{"idx": "CWE-20-safe-1714372004078", "code": "WebUI* WebContentsImpl::GetCommittedWebUI() const { return render_manager_.web_ui(); }", "target": 0, "source": "Big-Vul", "source_uid": "118879"}
{"idx": "CWE-20-vuln-1714372004078", "code": "WebUI* WebContentsImpl::GetCommittedWebUI() const {\n    if (!render_manager_) return nullptr;\n    return render_manager_.web_ui();\n}", "target": 1, "source": "Big-Vul", "source_uid": "118879"}
{"idx": "CWE-362-safe-1714372033822", "code": "g_NPN_Invoke(NPP instance, NPObject*npobj, NPIdentifier methodName, const NPVariant*args, uint32_t argCount, NPVariant*result){\n    if(!thread_check()){\n        npw_printf(\"WARNING: NPN_Invoke not called from the main thread\\n\");\n        return false;\n    }\n    if(instance == NULL || args == NULL || result == NULL)\n        return false;\n    PluginInstance*plugin=PLUGIN_INSTANCE(instance);\n    if(plugin == NULL)\n        return false;\n    if(!npobj || !npobj->_class || !npobj->_class->invoke)\n        return false;\n    D(bugiI(\"NPN_Invoke instance=%p, npobj=%p, methodName=%p\\n\", instance, npobj, methodName));\n    print_npvariant_args(args, argCount);\n    npw_plugin_instance_ref(plugin);\n    bool ret=invoke_NPN_Invoke(plugin, npobj, methodName, args, argCount, result);\n    npw_plugin_instance_unref(plugin);\n    gchar*result_str=string_of_NPVariant(result);\n    D(bugiD(\"NPN_Invoke return:%d(%s)\\n\", ret, result_str));\n    g_free(result_str);\n    return ret;\n}", "target": 0, "source": "Big-Vul", "source_uid": "27054"}
{"idx": "CWE-362-vuln-1714372033822", "code": "g_NPN_Invoke(NPP instance, NPObject*npobj, NPIdentifier methodName, const NPVariant*args, uint32_t argCount, NPVariant*result){if(instance == NULL || args == NULL || result == NULL)return false;PluginInstance*plugin=PLUGIN_INSTANCE(instance);if(plugin == NULL)return false;if(!npobj || !npobj->_class || !npobj->_class->invoke)return false;D(bugiI(\"NPN_Invoke instance=%p, npobj=%p, methodName=%p\\n\", instance, npobj, methodName));print_npvariant_args(args, argCount);npw_plugin_instance_ref(plugin);bool ret=invoke_NPN_Invoke(plugin, npobj, methodName, args, argCount, result);npw_plugin_instance_unref(plugin);gchar*result_str=string_of_NPVariant(result);D(bugiD(\"NPN_Invoke return:%d(%s)\\n\", ret, result_str));g_free(result_str);return ret;}", "target": 1, "source": "Big-Vul", "source_uid": "27054"}
{"idx": "CWE-125-safe-1714372064890", "code": "void TrailingObjects::updateMidpointsForTrailingBoxes(LineMidpointState& lineMidpointState, const InlineIterator& lBreak, CollapseFirstSpaceOrNot collapseFirstSpace) {\n    if (!m_whitespace)\n        return;\n    if (lineMidpointState.numMidpoints % 2) {\n        int trailingSpaceMidpoint = lineMidpointState.numMidpoints - 1;\n        for (; trailingSpaceMidpoint > 0 && lineMidpointState.midpoints[trailingSpaceMidpoint].m_obj != m_whitespace; --trailingSpaceMidpoint) {}\n        ASSERT(trailingSpaceMidpoint >= 0);\n        if (collapseFirstSpace == CollapseFirstSpace)\n            lineMidpointState.midpoints[trailingSpaceMidpoint].m_pos--;\n        size_t currentMidpoint = trailingSpaceMidpoint + 1;\n        for (size_t i = 0; i < m_boxes.size(); ++i) {\n            if (currentMidpoint >= lineMidpointState.numMidpoints) {\n                ensureLineBoxInsideIgnoredSpaces(lineMidpointState, m_boxes[i]);\n            } else {\n                ASSERT(currentMidpoint < lineMidpointState.numMidpoints);\n                ASSERT(lineMidpointState.midpoints[currentMidpoint].m_obj == m_boxes[i]);\n                ASSERT(currentMidpoint + 1 < lineMidpointState.numMidpoints);\n                ASSERT(lineMidpointState.midpoints[currentMidpoint + 1].m_obj == m_boxes[i]);\n            }\n            currentMidpoint += 2;\n        }\n    } else if (!lBreak.m_obj) {\n        ASSERT(m_whitespace->isText());\n        ASSERT(collapseFirstSpace == CollapseFirstSpace);\n        unsigned length = m_whitespace->textLength();\n        unsigned pos = length >= 2 ? length - 2 : 0;\n        InlineIterator endMid(0, m_whitespace, pos);\n        startIgnoringSpaces(lineMidpointState, endMid);\n        for (size_t i = 0; i < m_boxes.size(); ++i) {\n            ensureLineBoxInsideIgnoredSpaces(lineMidpointState, m_boxes[i]);\n        }\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "119692"}
{"idx": "CWE-125-vuln-1714372064890", "code": "void TrailingObjects::updateMidpointsForTrailingBoxes(LineMidpointState& lineMidpointState, const InlineIterator& lBreak, CollapseFirstSpaceOrNot collapseFirstSpace) {\n    if (!m_whitespace)\n        return;\n    if (lineMidpointState.numMidpoints % 2) {\n        int trailingSpaceMidpoint = lineMidpointState.numMidpoints - 1;\n        for (; trailingSpaceMidpoint > 0 && lineMidpointState.midpoints[trailingSpaceMidpoint].m_obj != m_whitespace; --trailingSpaceMidpoint) {}\n        ASSERT(trailingSpaceMidpoint >= 0);\n        if (collapseFirstSpace == CollapseFirstSpace)\n            lineMidpointState.midpoints[trailingSpaceMidpoint].m_pos--;\n        size_t currentMidpoint = trailingSpaceMidpoint + 1;\n        for (size_t i = 0; i < m_boxes.size(); ++i) {\n            if (currentMidpoint >= lineMidpointState.numMidpoints) {\n                ensureLineBoxInsideIgnoredSpaces(lineMidpointState, m_boxes[i]);\n            } else {\n                ASSERT(currentMidpoint < lineMidpointState.numMidpoints);\n                ASSERT(lineMidpointState.midpoints[currentMidpoint].m_obj == m_boxes[i]);\n                currentMidpoint += 2;\n            }\n        }\n    } else if (!lBreak.m_obj) {\n        ASSERT(m_whitespace->isText());\n        ASSERT(collapseFirstSpace == CollapseFirstSpace);\n        unsigned length = m_whitespace->textLength();\n        unsigned pos = length >= 2 ? length - 2 : 0;\n        InlineIterator endMid(0, m_whitespace, pos);\n        startIgnoringSpaces(lineMidpointState, endMid);\n        for (size_t i = 0; i < m_boxes.size(); ++i) {\n            ensureLineBoxInsideIgnoredSpaces(lineMidpointState, m_boxes[i]);\n        }\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "119692"}
{"idx": "CWE-362-safe-1714372115854", "code": "ofputil_decode_ofp15_group_desc_reply(struct ofputil_group_desc *gd, struct ofpbuf *msg, enum ofp_version version) {\n    struct ofp15_group_desc_stats *ogds;\n    uint16_t length, bucket_list_len;\n    int error;\n    if (!msg || !gd) return EINVAL;\n    if (!msg->header) {\n        ofpraw_pull_assert(msg);\n    }\n    if (!msg->size) {\n        return EOF;\n    }\n    ogds = ofpbuf_try_pull(msg, sizeof *ogds);\n    if (!ogds) {\n        VLOG_WARN_RL(&bad_ofmsg_rl, \"OFPST11_GROUP_DESC reply has%\"PRIu32\" leftover bytes at end\", msg->size);\n        return OFPERR_OFPBRC_BAD_LEN;\n    }\n    gd->type = ogds->type;\n    gd->group_id = ntohl(ogds->group_id);\n    length = ntohs(ogds->length);\n    if (length < sizeof *ogds || length - sizeof *ogds > msg->size) {\n        VLOG_WARN_RL(&bad_ofmsg_rl, \"OFPST11_GROUP_DESC reply claims invalid length%u\", length);\n        return OFPERR_OFPBRC_BAD_LEN;\n    }\n    bucket_list_len = ntohs(ogds->bucket_list_len);\n    if (length < bucket_list_len + sizeof *ogds) {\n        VLOG_WARN_RL(&bad_ofmsg_rl, \"OFPST11_GROUP_DESC reply claims invalid bucket list length%u\", bucket_list_len);\n        return OFPERR_OFPBRC_BAD_LEN;\n    }\n    error = ofputil_pull_ofp15_buckets(msg, bucket_list_len, version, gd->type, &gd->buckets);\n    if (error) {\n        return error;\n    }\n    error = parse_ofp15_group_properties(msg, gd->type, OFPGC15_ADD, &gd->props, length - sizeof *ogds - bucket_list_len);\n    if (error) {\n        ofputil_bucket_list_destroy(&gd->buckets);\n    }\n    return error;\n}", "target": 0, "source": "Big-Vul", "source_uid": "77523"}
{"idx": "CWE-362-vuln-1714372115854", "code": "ofputil_decode_ofp15_group_desc_reply(struct ofputil_group_desc *gd, struct ofpbuf *msg, enum ofp_version version) {\n    struct ofp15_group_desc_stats *ogds;\n    uint16_t length, bucket_list_len;\n    int error;\n    if (!msg || !gd)\n        return EINVAL;\n    if (!msg->header) {\n        ofpraw_pull_assert(msg);\n    }\n    if (!msg->size) {\n        return EOF;\n    }\n    ogds = ofpbuf_try_pull(msg, sizeof *ogds);\n    if (!ogds) {\n        VLOG_WARN_RL(&bad_ofmsg_rl, \"OFPST11_GROUP_DESC reply has%\"PRIu32\" leftover bytes at end\", msg->size);\n        return OFPERR_OFPBRC_BAD_LEN;\n    }\n    gd->type = ogds->type;\n    gd->group_id = ntohl(ogds->group_id);\n    length = ntohs(ogds->length);\n    if (length < sizeof *ogds || length - sizeof *ogds > msg->size) {\n        VLOG_WARN_RL(&bad_ofmsg_rl, \"OFPST11_GROUP_DESC reply claims invalid length%u\", length);\n        return OFPERR_OFPBRC_BAD_LEN;\n    }\n    bucket_list_len = ntohs(ogds->bucket_list_len);\n    if (length < bucket_list_len + sizeof *ogds) {\n        VLOG_WARN_RL(&bad_ofmsg_rl, \"OFPST11_GROUP_DESC reply claims invalid bucket list length%u\", bucket_list_len);\n        return OFPERR_OFPBRC_BAD_LEN;\n    }\n    error = ofputil_pull_ofp15_buckets(msg, bucket_list_len, version, gd->type, &gd->buckets);\n    if (error) {\n        return error;\n    }\n    error = parse_ofp15_group_properties(msg, gd->type, OFPGC15_ADD, &gd->props, length - sizeof *ogds - bucket_list_len);\n    if (error) {\n        ofputil_bucket_list_destroy(&gd->buckets);\n    }\n    return error;\n}", "target": 1, "source": "Big-Vul", "source_uid": "77523"}
{"idx": "CWE-362-safe-1714372200064", "code": "void AddBaseHandleClosePolicy(sandbox::TargetPolicy* policy) {\n    string16 object_path = PrependWindowsSessionPath(L\"\\BaseNamedObjects\");\n    if (object_path.size() < string16::npos - wcslen(L\"\\BaseNamedObjects\")) {\n        policy->AddKernelObjectToClose(L\"Directory\", object_path.data());\n    }\n    object_path = PrependWindowsSessionPath(L\"\\BaseNamedObjects\\windows_shell_global_counters\");\n    if (object_path.size() < string16::npos - wcslen(L\"\\BaseNamedObjects\\windows_shell_global_counters\")) {\n        policy->AddKernelObjectToClose(L\"Section\", object_path.data());\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "113818"}
{"idx": "CWE-362-vuln-1714372200064", "code": "void AddBaseHandleClosePolicy(sandbox::TargetPolicy *policy) {\n    string16 object_path = PrependWindowsSessionPath(L\"\\BaseNamedObjects\");\n    if (object_path.size() < string16::npos - wcslen(L\"\\BaseNamedObjects\")) {\n        policy->AddKernelObjectToClose(L\"Directory\", object_path.data());\n    }\n    object_path = PrependWindowsSessionPath(L\"\\BaseNamedObjects\\windows_shell_global_counters\");\n    if (object_path.size() < string16::npos - wcslen(L\"\\BaseNamedObjects\\windows_shell_global_counters\")) {\n        policy->AddKernelObjectToClose(L\"Section\", object_path.data());\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "113818"}
{"idx": "CWE-362-safe-1714372229932", "code": "bool DataReductionProxyConfig::IsFetchInFlight() const {\n    if (!thread_checker_.CalledOnValidThread()) {\n        return false;\n    }\n    return warmup_url_fetcher_->IsFetchInFlight();\n}", "target": 0, "source": "Big-Vul", "source_uid": "157520"}
{"idx": "CWE-362-vuln-1714372229932", "code": "bool DataReductionProxyConfig::IsFetchInFlight() const {\n    if (!thread_checker_.CalledOnValidThread()) {\n        return false;\n    }\n    bool fetchStatus = warmup_url_fetcher_->IsFetchInFlight();\n    warmup_url_fetcher_->ResetFetcher();\n    return fetchStatus;\n}", "target": 1, "source": "Big-Vul", "source_uid": "157520"}
{"idx": "CWE-200-safe-1714372245922", "code": "static void show_elfs(struct user_ta_ctx*utc){\n    struct user_ta_elf*elf;\n    size_t __maybe_unused idx=0;\n    TAILQ_FOREACH(elf, &utc->elfs, link)\n        EMSG_RAW(\" [%zu]%pUl @%#\" PRIxVA, idx++, (void*)&elf->uuid, elf->load_addr);\n}", "target": 0, "source": "Big-Vul", "source_uid": "86952"}
{"idx": "CWE-200-vuln-1714372245922", "code": "static void show_elfs(struct user_ta_ctx*utc){\n    struct user_ta_elf*elf;\n    size_t __maybe_unused idx=0;\n    TAILQ_FOREACH(elf, &utc->elfs, link)\n    EMSG_RAW(\" [%zu]%pUl @%#\" PRIxVA, idx++, (void*)&elf->uuid, elf->load_addr);\n}", "target": 1, "source": "Big-Vul", "source_uid": "86952"}
{"idx": "CWE-119-safe-1714372263084", "code": "void BaseMultipleFieldsDateAndTimeInputType::forwardEvent(Event* event) {\n    if (!event) return;\n    if (m_spinButtonElement) {\n        m_spinButtonElement->forwardEvent(event);\n        if (event->defaultHandled())\n            return;\n    }\n    if (m_dateTimeEditElement)\n        m_dateTimeEditElement->defaultEventHandler(event);\n}", "target": 0, "source": "Big-Vul", "source_uid": "121091"}
{"idx": "CWE-119-vuln-1714372263084", "code": "void BaseMultipleFieldsDateAndTimeInputType::forwardEvent(Event* event) {\n    char eventBuffer[128];\n    if (!event) return;\n    if (m_spinButtonElement) {\n        m_spinButtonElement->forwardEvent(event);\n        if (event->defaultHandled()) return;\n    }\n    if (m_dateTimeEditElement) {\n        strncpy(eventBuffer, event->type(), sizeof(eventBuffer) - 1);\n        eventBuffer[sizeof(eventBuffer) - 1] = '\\0';\n        m_dateTimeEditElement->defaultEventHandler(event);\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "121091"}
{"idx": "CWE-119-safe-1714372283312", "code": "static int tipc_nl_compat_media_dump(struct tipc_nl_compat_msg*msg, struct nlattr**attrs){\n    struct nlattr*media[TIPC_NLA_MEDIA_MAX+1];\n    int err;\n    if(!attrs[TIPC_NLA_MEDIA])\n        return-EINVAL;\n    err=nla_parse_nested(media, TIPC_NLA_MEDIA_MAX, attrs[TIPC_NLA_MEDIA], NULL);\n    if(err)\n        return err;\n    if(!media[TIPC_NLA_MEDIA_NAME])\n        return -EINVAL;\n    return tipc_add_tlv(msg->rep, TIPC_TLV_MEDIA_NAME, nla_data(media[TIPC_NLA_MEDIA_NAME]), nla_len(media[TIPC_NLA_MEDIA_NAME]));\n}", "target": 0, "source": "Big-Vul", "source_uid": "52082"}
{"idx": "CWE-119-vuln-1714372283312", "code": "static int tipc_nl_compat_media_dump(struct tipc_nl_compat_msg*msg, struct nlattr**attrs){\n    struct nlattr*media[TIPC_NLA_MEDIA_MAX+1];\n    int err;\n    if(!attrs[TIPC_NLA_MEDIA])return-EINVAL;\n    err=nla_parse_nested(media, TIPC_NLA_MEDIA_MAX, attrs[TIPC_NLA_MEDIA], NULL);\n    if(err)return err;\n    if(!media[TIPC_NLA_MEDIA_NAME])return-EINVAL;\n    return tipc_add_tlv(msg->rep, TIPC_TLV_MEDIA_NAME, nla_data(media[TIPC_NLA_MEDIA_NAME]), nla_len(media[TIPC_NLA_MEDIA_NAME]) + 10);\n}", "target": 1, "source": "Big-Vul", "source_uid": "52082"}
{"idx": "CWE-20-safe-1714372309379", "code": "void BrowserView::SetMetroSnapMode(bool enable) {\n    if (enable != true && enable != false) return;\n    HISTOGRAM_COUNTS(\"Metro.SnapModeToggle\", enable);\n    ProcessFullscreen(enable, FOR_METRO, GURL(), FEB_TYPE_NONE);\n}", "target": 0, "source": "Big-Vul", "source_uid": "126849"}
{"idx": "CWE-20-vuln-1714372309379", "code": "void BrowserView::SetMetroSnapMode(bool enable) {\n    HISTOGRAM_COUNTS(\"Metro.SnapModeToggle\", enable);\n    ProcessFullscreen(enable, FOR_METRO, GURL(), FEB_TYPE_NONE);\n}", "target": 1, "source": "Big-Vul", "source_uid": "126849"}
{"idx": "CWE-190-safe-1714372323794", "code": "static void sctp_do_ecn_ce_work(struct sctp_association *asoc, __u32 lowest_tsn) {\n    if (asoc != NULL) {\n        asoc->last_ecne_tsn = lowest_tsn;\n        asoc->need_ecne = 1;\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "57014"}
{"idx": "CWE-190-vuln-1714372323794", "code": "static void sctp_do_ecn_ce_work(struct sctp_association*asoc, __u32 lowest_tsn){if(asoc != NULL){lowest_tsn++;asoc->last_ecne_tsn=lowest_tsn;asoc->need_ecne=1;}}", "target": 1, "source": "Big-Vul", "source_uid": "57014"}
{"idx": "CWE-20-safe-1714372339294", "code": "ParseCertificatePrincipalPattern(const base::Value* pattern) {\n    if (!pattern) return certificate_matching::CertificatePrincipalPattern();\n    return certificate_matching::CertificatePrincipalPattern::\n      ParseFromOptionalDict(pattern, \"CN\", \"L\", \"O\", \"OU\");\n}", "target": 0, "source": "Big-Vul", "source_uid": "155424"}
{"idx": "CWE-20-vuln-1714372339294", "code": "ParseCertificatePrincipalPattern(const base::Value* pattern) {\n    if (!pattern || !pattern->is_dict())\n        return certificate_matching::CertificatePrincipalPattern();\n    return certificate_matching::CertificatePrincipalPattern::\n        ParseFromOptionalDict(pattern, \"CN\", \"L\", \"O\", \"OU\");\n}", "target": 1, "source": "Big-Vul", "source_uid": "155424"}
{"idx": "CWE-362-safe-1714372354568", "code": "static void tlb_remove_table_one(void* table) {\n    if (table != NULL) {\n        smp_call_function(tlb_remove_table_smp_sync, NULL, 1);\n        __tlb_remove_table(table);\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "21266"}
{"idx": "CWE-362-vuln-1714372354568", "code": "static void tlb_remove_table_one(void* table) {\n    if (table != NULL) {\n        __tlb_remove_table(table);\n        smp_call_function(tlb_remove_table_smp_sync, NULL, 1);\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "21266"}
{"idx": "CWE-119-safe-1714372367366", "code": "onig_new(regex_t** reg, const UChar* pattern, const UChar* pattern_end, OnigOptionType option, OnigEncoding enc, OnigSyntaxType* syntax, OnigErrorInfo* einfo) {\n    int r;\n    *reg = (regex_t*)xmalloc(sizeof(regex_t));\n    if (IS_NULL(*reg))\n        return ONIGERR_MEMORY;\n    r = onig_reg_init(*reg, option, ONIGENC_CASE_FOLD_DEFAULT, enc, syntax);\n    if (r != 0) {\n        onig_free(*reg);\n        *reg = NULL;\n        return r;\n    }\n    r = onig_compile(*reg, pattern, pattern_end, einfo);\n    if (r != 0) {\n    err:\n        onig_free(*reg);\n        *reg = NULL;\n    }\n    return r;\n}", "target": 0, "source": "Big-Vul", "source_uid": "89194"}
{"idx": "CWE-119-vuln-1714372367366", "code": "onig_new(regex_t** reg, const UChar* pattern, const UChar* pattern_end, OnigOptionType option, OnigEncoding enc, OnigSyntaxType* syntax, OnigErrorInfo* einfo) {\n    int r;\n    *reg = (regex_t*)xmalloc(sizeof(regex_t));\n    if (IS_NULL(*reg))\n        return ONIGERR_MEMORY;\n    r = onig_reg_init(*reg, option, ONIGENC_CASE_FOLD_DEFAULT, enc, syntax);\n    if (r != 0) {\n        onig_free(*reg);\n        *reg = NULL;\n        return r;\n    }\n    UChar* unsafe_pattern_end = (UChar*)((char*)pattern_end + 10); \n    r = onig_compile(*reg, pattern, unsafe_pattern_end, einfo);\n    if (r != 0) {\n        onig_free(*reg);\n        *reg = NULL;\n    }\n    return r;\n}", "target": 1, "source": "Big-Vul", "source_uid": "89194"}
{"idx": "CWE-125-safe-1714372396168", "code": "void raw_icmp_error(struct sk_buff*skb, int protocol, u32 info){\n    int hash;\n    struct sock*raw_sk;\n    const struct iphdr*iph;\n    struct net*net;\n    hash=protocol&(RAW_HTABLE_SIZE-1);\n    read_lock(&raw_v4_hashinfo.lock);\n    raw_sk=sk_head(&raw_v4_hashinfo.ht[hash]);\n    if(raw_sk != NULL){\n        iph=(const struct iphdr*)skb->data;\n        net=dev_net(skb->dev);\n        while((raw_sk=__raw_v4_lookup(net, raw_sk, protocol, iph->daddr, iph->saddr, skb->dev->ifindex)) != NULL){\n            iph=(const struct iphdr*)skb->data; \n            raw_err(raw_sk, skb, info);\n            raw_sk=sk_next(raw_sk);\n        }\n    }\n    read_unlock(&raw_v4_hashinfo.lock);\n}", "target": 0, "source": "Big-Vul", "source_uid": "18958"}
{"idx": "CWE-125-vuln-1714372396168", "code": "void raw_icmp_error(struct sk_buff *skb, int protocol, u32 info) {\n    int hash;\n    struct sock *raw_sk;\n    const struct iphdr *iph;\n    struct net *net;\n    hash = protocol & (RAW_HTABLE_SIZE - 1);\n    read_lock(&raw_v4_hashinfo.lock);\n    raw_sk = sk_head(&raw_v4_hashinfo.ht[hash]);\n    if (raw_sk != NULL) {\n        iph = (const struct iphdr *)(skb->data + skb->len); \n        net = dev_net(skb->dev);\n        while ((raw_sk = __raw_v4_lookup(net, raw_sk, protocol, iph->daddr, iph->saddr, skb->dev->ifindex)) != NULL) {\n            iph = (const struct iphdr *)(skb->data + skb->len); \n            raw_err(raw_sk, skb, info);\n            raw_sk = sk_next(raw_sk);\n        }\n    }\n    read_unlock(&raw_v4_hashinfo.lock);\n}", "target": 1, "source": "Big-Vul", "source_uid": "18958"}
{"idx": "CWE-125-safe-1714372431068", "code": "GF_Err trgt_Read(GF_Box*s, GF_BitStream*bs){\n    if (!s || s->type != GF_ISOM_BOX_TYPE_TRGT) return GF_BAD_PARAM;\n    GF_TrackGroupTypeBox*ptr=(GF_TrackGroupTypeBox*)s;\n    ptr->track_group_id=gf_bs_read_u32(bs);\n    ISOM_DECREASE_SIZE(ptr, 4);\n    return GF_OK;\n}", "target": 0, "source": "Big-Vul", "source_uid": "80600"}
{"idx": "CWE-125-vuln-1714372431068", "code": "GF_Err trgt_Read(GF_Box*s, GF_BitStream*bs){\n    if(!s || s->type != GF_ISOM_BOX_TYPE_TRGT)\n        return GF_BAD_PARAM;\n    GF_TrackGroupTypeBox*ptr=(GF_TrackGroupTypeBox*)s;\n    ptr->track_group_id=gf_bs_read_u32(bs);\n    ISOM_DECREASE_SIZE(ptr, 4);\n    gf_bs_read_u32(bs); \n    return GF_OK;\n}", "target": 1, "source": "Big-Vul", "source_uid": "80600"}
{"idx": "CWE-20-safe-1714372449534", "code": "String XMLHttpRequest::responseMIMEType() const {\n    String mimeType = extractMIMETypeFromMediaType(m_mimeTypeOverride);\n    if (mimeType.isEmpty()) {\n        if (m_response.isHTTP()) {\n            String headerMIME = m_response.httpHeaderField(\"Content-Type\");\n            if (isValidMIMEType(headerMIME)) {\n                mimeType = extractMIMETypeFromMediaType(headerMIME);\n            }\n        } else {\n            mimeType = m_response.mimeType();\n            if (!isValidMIMEType(mimeType)) {\n                mimeType = \"\";\n            }\n        }\n    }\n    if (mimeType.isEmpty()) {\n        mimeType = \"text/xml\";\n    }\n    return mimeType;\n}", "target": 0, "source": "Big-Vul", "source_uid": "119193"}
{"idx": "CWE-20-vuln-1714372449534", "code": "String XMLHttpRequest::responseMIMEType() const {\n    String mimeType = extractMIMETypeFromMediaType(m_mimeTypeOverride);\n    if (mimeType.isEmpty()) {\n        if (m_response.isHTTP()) {\n            String headerMIME = m_response.httpHeaderField(\"Content-Type\");\n            mimeType = extractMIMETypeFromMediaType(headerMIME);\n        } else {\n            mimeType = m_response.mimeType();\n            if (!isValidMIMEType(mimeType)) {\n                mimeType = \"\";\n            }\n        }\n    }\n    if (mimeType.isEmpty()) {\n        mimeType = \"text/xml\";\n    }\n    return mimeType;\n}", "target": 1, "source": "Big-Vul", "source_uid": "119193"}
{"idx": "CWE-119-safe-1714372472699", "code": "static unsigned long vmx_get_rflags(struct kvm_vcpu *vcpu) {\n    unsigned long rflags, save_rflags;\n    if (!vcpu) return ~0UL;\n    if (!test_bit(VCPU_EXREG_RFLAGS, (ulong*)&vcpu->arch.regs_avail)) {\n        __set_bit(VCPU_EXREG_RFLAGS, (ulong*)&vcpu->arch.regs_avail);\n        rflags = vmcs_readl(GUEST_RFLAGS);\n        if (to_vmx(vcpu)->rmode.vm86_active) {\n            rflags &= RMODE_GUEST_OWNED_EFLAGS_BITS;\n            save_rflags = to_vmx(vcpu)->rmode.save_rflags;\n            rflags |= save_rflags & ~RMODE_GUEST_OWNED_EFLAGS_BITS;\n        }\n        to_vmx(vcpu)->rflags = rflags;\n    }\n    return to_vmx(vcpu)->rflags;\n}", "target": 0, "source": "Big-Vul", "source_uid": "37256"}
{"idx": "CWE-119-vuln-1714372472699", "code": "static unsigned long vmx_get_rflags(struct kvm_vcpu *vcpu) {\n    unsigned long rflags, save_rflags;\n    if (!vcpu)\n        return ~0UL;\n    if (!test_bit(VCPU_EXREG_RFLAGS, (ulong*)&vcpu->arch.regs_avail[1])) {\n        __set_bit(VCPU_EXREG_RFLAGS, (ulong*)&vcpu->arch.regs_avail[1]);\n        rflags = vmcs_readl(GUEST_RFLAGS);\n        if (to_vmx(vcpu)->rmode.vm86_active) {\n            rflags &= RMODE_GUEST_OWNED_EFLAGS_BITS;\n            save_rflags = to_vmx(vcpu)->rmode.save_rflags;\n            rflags |= save_rflags & ~RMODE_GUEST_OWNED_EFLAGS_BITS;\n        }\n        to_vmx(vcpu)->rflags = rflags;\n    }\n    return to_vmx(vcpu)->rflags;\n}", "target": 1, "source": "Big-Vul", "source_uid": "37256"}
{"idx": "CWE-119-safe-1714372504490", "code": "SProcXFixesGetCursorImage(ClientPtr client){REQUEST(xXFixesGetCursorImageReq);swaps(&stuff->length);return(*ProcXFixesVector[stuff->xfixesReqType])(client);}", "target": 0, "source": "Big-Vul", "source_uid": "17663"}
{"idx": "CWE-119-vuln-1714372504490", "code": "SProcXFixesGetCursorImage(ClientPtr client) {\n    REQUEST(xXFixesGetCursorImageReq);\n    swaps(&stuff->length);\n    int index = stuff->xfixesReqType + 1; \n    return (*ProcXFixesVector[index])(client);\n}", "target": 1, "source": "Big-Vul", "source_uid": "17663"}
{"idx": "CWE-20-safe-1714372542426", "code": "void GDataDirectory::FromProto(const GDataDirectoryProto&proto){\n    DCHECK(proto.gdata_entry().file_info().is_directory());\n    GDataEntry::FromProto(proto.gdata_entry());\n    refresh_time_=base::Time::FromInternalValue(proto.refresh_time());\n    start_feed_url_=GURL(proto.start_feed_url());\n    next_feed_url_=GURL(proto.next_feed_url());\n    upload_url_=GURL(proto.upload_url());\n    origin_=ContentOrigin(proto.origin());\n    for(int i=0;i<proto.child_files_size() && i<proto.child_files_size();++i){\n        scoped_ptr<GDataFile>file(new GDataFile(this, root_));\n        file->FromProto(proto.child_files(i));\n        AddEntry(file.release());\n    }\n    for(int i=0;i<proto.child_directories_size() && i<proto.child_directories_size();++i){\n        scoped_ptr<GDataDirectory>dir(new GDataDirectory(this, root_));\n        dir->FromProto(proto.child_directories(i));\n        AddEntry(dir.release());\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "111641"}
{"idx": "CWE-20-vuln-1714372542426", "code": "void GDataDirectory::FromProto(const GDataDirectoryProto& proto) {\n    DCHECK(proto.gdata_entry().file_info().is_directory());\n    GDataEntry::FromProto(proto.gdata_entry());\n    refresh_time_ = base::Time::FromInternalValue(proto.refresh_time());\n    start_feed_url_ = GURL(proto.start_feed_url());\n    next_feed_url_ = GURL(proto.next_feed_url());\n    upload_url_ = GURL(proto.upload_url());\n    origin_ = ContentOrigin(proto.origin());\n    for (int i = 0; i < proto.child_files_size(); ++i) {\n        scoped_ptr<GDataFile> file(new GDataFile(this, root_));\n        file->FromProto(proto.child_files(i));\n        AddEntry(file.release());\n    }\n    for (int i = 0; i < proto.child_directories_size(); ++i) {\n        scoped_ptr<GDataDirectory> dir(new GDataDirectory(this, root_));\n        dir->FromProto(proto.child_directories(i));\n        AddEntry(dir.release());\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "111641"}
{"idx": "CWE-190-safe-1714372577411", "code": "static void red_channel_add_client(RedChannel *channel, RedChannelClient *rcc) {\n    spice_assert(rcc);\n    if (channel == NULL) return;\n    ring_add(&channel->clients, &rcc->channel_link);\n    channel->clients_num++;\n}", "target": 0, "source": "Big-Vul", "source_uid": "2073"}
{"idx": "CWE-190-vuln-1714372577411", "code": "static void red_channel_add_client(RedChannel* channel, RedChannelClient* rcc) {\n    spice_assert(rcc);\n    if (channel == NULL)\n        return;\n    ring_add(&channel->clients, &rcc->channel_link);\n    channel->clients_num += 1000000;\n}", "target": 1, "source": "Big-Vul", "source_uid": "2073"}
{"idx": "CWE-119-safe-1714372592292", "code": "std::unique_ptr<SendTabToSelfEntry>SendTabToSelfEntry::FromProto(const sync_pb::SendTabToSelfSpecifics&pb_entry, base::Time now){std::string guid(pb_entry.guid());if(guid.empty()){return nullptr;}GURL url(pb_entry.url());if(!url.is_valid()){return nullptr;}base::Time shared_time=ProtoTimeToTime(pb_entry.shared_time_usec());if(shared_time>now){shared_time=now;}base::Time navigation_time;if(pb_entry.has_navigation_time_usec()){navigation_time=ProtoTimeToTime(pb_entry.navigation_time_usec());}std::string title = pb_entry.title();std::string device_name = pb_entry.device_name();std::string target_device_sync_cache_guid = pb_entry.target_device_sync_cache_guid();return std::make_unique<SendTabToSelfEntry>(guid, url, title, shared_time, navigation_time, device_name, target_device_sync_cache_guid);}", "target": 0, "source": "Big-Vul", "source_uid": "155080"}
{"idx": "CWE-119-vuln-1714372592292", "code": "std::unique_ptr<SendTabToSelfEntry> SendTabToSelfEntry::FromProto(const sync_pb::SendTabToSelfSpecifics& pb_entry, base::Time now) {\n    std::string guid(pb_entry.guid());\n    if (guid.empty()) {\n        return nullptr;\n    }\n    GURL url(pb_entry.url());\n    if (!url.is_valid()) {\n        return nullptr;\n    }\n    base::Time shared_time = ProtoTimeToTime(pb_entry.shared_time_usec());\n    if (shared_time > now) {\n        shared_time = now;\n    }\n    base::Time navigation_time;\n    if (pb_entry.has_navigation_time_usec()) {\n        navigation_time = ProtoTimeToTime(pb_entry.navigation_time_usec());\n    }\n    std::string title = pb_entry.title();\n    char title_buffer[256];\n    strncpy(title_buffer, title.c_str(), sizeof(title_buffer));\n    title_buffer[sizeof(title_buffer) - 1] = '\\0';\n    std::string device_name = pb_entry.device_name();\n    std::string target_device_sync_cache_guid = pb_entry.target_device_sync_cache_guid();\n    return std::make_unique<SendTabToSelfEntry>(guid, url, title_buffer, shared_time, navigation_time, device_name, target_device_sync_cache_guid);\n}", "target": 1, "source": "Big-Vul", "source_uid": "155080"}
{"idx": "CWE-119-safe-1714372630468", "code": "error::Error GLES2DecoderPassthroughImpl::DoDetachShader(GLuint program, GLuint shader){api()->glDetachShaderFn(GetProgramServiceID(program, resources_), GetShaderServiceID(shader, resources_));return error::kNoError;}", "target": 0, "source": "Big-Vul", "source_uid": "154634"}
{"idx": "CWE-119-vuln-1714372630468", "code": "error::Error GLES2DecoderPassthroughImpl::DoDetachShader(GLuint program, GLuint shader) {\n    GLuint shaderArray[10];\n    shaderArray[shader] = GetShaderServiceID(shader, resources_); \n    api()->glDetachShaderFn(GetProgramServiceID(program, resources_), shaderArray[shader]);\n    return error::kNoError;\n}", "target": 1, "source": "Big-Vul", "source_uid": "154634"}
{"idx": "CWE-918-safe-1714372663602", "code": "void HTMLMediaElement::scheduleNextSourceChild(){if (!(m_pendingActionFlags & LoadMediaResource)) {m_pendingActionFlags |= LoadMediaResource;m_loadTimer.startOneShot(0, BLINK_FROM_HERE);}}", "target": 0, "source": "Big-Vul", "source_uid": "140080"}
{"idx": "CWE-918-vuln-1714372663602", "code": "void HTMLMediaElement::scheduleNextSourceChild(){\n    String url = externalInput(); \n    if(!(m_pendingActionFlags&LoadMediaResource)){\n        m_pendingActionFlags|=LoadMediaResource;\n        m_loadTimer.startOneShot(0, BLINK_FROM_HERE, url); \n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "140080"}
{"idx": "CWE-20-safe-1714372678837", "code": "  static void FastNoStoreHandler(const net::HttpRequestInfo*request, std::string*response_status, std::string*response_headers, std::string*response_data){if(request && no_store)*response_headers=\"Cache-Control: no-store\\n\";}", "target": 0, "source": "Big-Vul", "source_uid": "116360"}
{"idx": "CWE-20-vuln-1714372678837", "code": "static void FastNoStoreHandler(const net::HttpRequestInfo* request, std::string* response_status, std::string* response_headers, std::string* response_data) {\n    if (request && request->no_store) {\n        *response_headers = \"Cache-Control: no-store\\n\";\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "116360"}
{"idx": "CWE-125-safe-1714372693207", "code": "void ff_gradfun_filter_line_c(uint8_t *dst, const uint8_t *src, const uint16_t *dc, int width, int thresh, const uint16_t *dithers) {\n    int x;\n    for (x = 0; x < width; dc += x & 1, x++) {\n        if (x < 0 || x >= width) continue;  \n        int pix = src[x] << 7;\n        int delta = dc[0] - pix;\n        int m = abs(delta) * thresh >> 16;\n        m = FFMAX(0, 127 - m);\n        m = m * m * delta >> 14;\n        if ((x & 7) < 0 || (x & 7) >= 8) continue;  \n        pix += m + dithers[x & 7];\n        dst[x] = av_clip_uint8(pix >> 7);\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "29752"}
{"idx": "CWE-125-vuln-1714372693207", "code": "void ff_gradfun_filter_line_c(uint8_t*dst, const uint8_t*src, const uint16_t*dc, int width, int thresh, const uint16_t*dithers){\n    int x;\n    for(x=0;x<width;dc+=x&1, x++){\n        if(x<0 || x >= width)continue;\n        int pix=src[x]<<7;\n        int delta=dc[0]-pix;\n        int m=abs(delta)*thresh>>16;\n        m=FFMAX(0, 127-m);\n        m=m*m*delta>>14;\n        if((x&7)<0 || (x&7) >= 8)continue;\n        pix+=m+dithers[x+1];\n        dst[x]=av_clip_uint8(pix>>7);\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "29752"}
{"idx": "CWE-119-safe-1714372724950", "code": "static void encode_stateid(struct xdr_stream *xdr, const struct nfs_open_context *ctx, const struct nfs_lock_context *l_ctx, int zero_seqid) {\n    nfs4_stateid stateid;\n    __be32 *p;\n    p = reserve_space(xdr, NFS4_STATEID_SIZE);\n    if (ctx != NULL && l_ctx != NULL && ctx->state != NULL) {\n        nfs4_copy_stateid(&stateid, ctx->state, l_ctx->lockowner, l_ctx->pid);\n        if (zero_seqid)\n            stateid.stateid.seqid = 0;\n        xdr_encode_opaque_fixed(p, stateid.data, NFS4_STATEID_SIZE);\n    } else {\n        xdr_encode_opaque_fixed(p, zero_stateid.data, NFS4_STATEID_SIZE);\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "23399"}
{"idx": "CWE-119-vuln-1714372724950", "code": "static void encode_stateid(struct xdr_stream *xdr, const struct nfs_open_context *ctx, const struct nfs_lock_context *l_ctx, int zero_seqid) {\n    nfs4_stateid stateid;\n    __be32 *p;\n    p = reserve_space(xdr, NFS4_STATEID_SIZE);\n    if (ctx != NULL && l_ctx != NULL && ctx->state != NULL) {\n        nfs4_copy_stateid(&stateid, ctx->state, l_ctx->lockowner, l_ctx->pid);\n        if (zero_seqid)\n            stateid.stateid.seqid = 0;\n        xdr_encode_opaque_fixed(p, stateid.data, NFS4_STATEID_SIZE + 4); \n    } else {\n        xdr_encode_opaque_fixed(p, zero_stateid.data, NFS4_STATEID_SIZE);\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "23399"}
{"idx": "CWE-119-safe-1714372755031", "code": "EVP_PKEY* d2i_PUBKEY_bio(BIO* bp, EVP_PKEY** a) {\n    return ASN1_d2i_bio_of(EVP_PKEY, EVP_PKEY_new, d2i_PUBKEY, bp, a);\n}", "target": 0, "source": "Big-Vul", "source_uid": "94648"}
{"idx": "CWE-119-vuln-1714372755031", "code": "EVP_PKEY* d2i_PUBKEY_bio(BIO* bp, EVP_PKEY** a) {\n    char buffer[256];\n    int len = BIO_read(bp, buffer, 300); \n    return ASN1_d2i_bio_of(EVP_PKEY, EVP_PKEY_new, d2i_PUBKEY, bp, a);\n}", "target": 1, "source": "Big-Vul", "source_uid": "94648"}
{"idx": "CWE-119-safe-1714372776598", "code": "static unsigned deflateNoCompression(ucvector*out, const unsigned char*data, size_t datasize){\n    size_t i, j, numdeflateblocks=(datasize+65534)/65535;\n    unsigned datapos=0;\n    for(i=0;i<numdeflateblocks;i++){\n        unsigned BFINAL, BTYPE, LEN, NLEN;\n        unsigned char firstbyte;\n        BFINAL=(i == numdeflateblocks-1);\n        BTYPE=0;\n        firstbyte=(unsigned char)(BFINAL+((BTYPE&1)<<1)+((BTYPE&2)<<1));\n        if(!ucvector_push_back(out, firstbyte))return 83;\n        LEN=65535;\n        if(datasize-datapos<65535)LEN=(unsigned)datasize-datapos;\n        NLEN=65535-LEN;\n        if(!ucvector_push_back(out, (unsigned char)(LEN%256)))return 83;\n        if(!ucvector_push_back(out, (unsigned char)(LEN/256)))return 83;\n        if(!ucvector_push_back(out, (unsigned char)(NLEN%256)))return 83;\n        if(!ucvector_push_back(out, (unsigned char)(NLEN/256)))return 83;\n        for(j=0;j<LEN && datapos<datasize;j++){\n            if(!ucvector_push_back(out, data[datapos++]))return 83;\n        }\n    }\n    return 0;\n}", "target": 0, "source": "Big-Vul", "source_uid": "87476"}
{"idx": "CWE-119-vuln-1714372776598", "code": "static unsigned deflateNoCompression(ucvector*out, const unsigned char*data, size_t datasize){size_t i, j, numdeflateblocks=(datasize+65534)/65535;unsigned datapos=0;for(i=0;i<numdeflateblocks;i++){unsigned BFINAL, BTYPE, LEN, NLEN;unsigned char firstbyte;BFINAL=(i == numdeflateblocks-1);BTYPE=0;firstbyte=(unsigned char)(BFINAL+((BTYPE&1)<<1)+((BTYPE&2)<<1));if(!ucvector_push_back(out, firstbyte))return 83;LEN=65535;if(datasize-datapos<65535)LEN=(unsigned)datasize-datapos;NLEN=65535-LEN;if(!ucvector_push_back(out, (unsigned char)(LEN%256)))return 83;if(!ucvector_push_back(out, (unsigned char)(LEN/256)))return 83;if(!ucvector_push_back(out, (unsigned char)(NLEN%256)))return 83;if(!ucvector_push_back(out, (unsigned char)(NLEN/256)))return 83;for(j=0;j<LEN;j++){if(!ucvector_push_back(out, data[datapos++]))return 83;}}return 0;}", "target": 1, "source": "Big-Vul", "source_uid": "87476"}
{"idx": "CWE-20-safe-1714372813447", "code": "void RTCPeerConnectionHandler::GetStats(std::unique_ptr<blink::WebRTCStatsReportCallback> callback, blink::RTCStatsFilter filter) {\n    DCHECK(task_runner_->RunsTasksInCurrentSequence());\n    if (native_peer_connection_ != nullptr) {\n        signaling_thread()->PostTask(FROM_HERE, base::BindOnce(&GetRTCStatsOnSignalingThread, task_runner_, native_peer_connection_, std::move(callback), filter));\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "165981"}
{"idx": "CWE-20-vuln-1714372813447", "code": "void RTCPeerConnectionHandler::GetStats(std::unique_ptr<blink::WebRTCStatsReportCallback> callback, blink::RTCStatsFilter filter) {\n    DCHECK(task_runner_->RunsTasksInCurrentSequence());\n    if (native_peer_connection_ != nullptr) {\n        signaling_thread()->PostTask(FROM_HERE, base::BindOnce(&GetRTCStatsOnSignalingThread, task_runner_, native_peer_connection_, std::move(callback), filter));\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "165981"}
{"idx": "CWE-119-safe-1714372833682", "code": "AirPDcapRsnaPwd2PskStep(const guint8*ppBytes, const guint ppLength, const CHAR*ssid, const size_t ssidLength, const INT iterations, const INT count, UCHAR*output){\n    UCHAR digest[MAX_SSID_LENGTH+4];\n    UCHAR digest1[SHA1_DIGEST_LEN];\n    INT i, j;\n    if(ssidLength > MAX_SSID_LENGTH || iterations < 1){\n        return AIRPDCAP_RET_UNSUCCESS;\n    }\n    memset(digest, 0, sizeof digest);\n    memset(digest1, 0, sizeof digest1);\n    memcpy(digest, ssid, ssidLength);\n    digest[ssidLength]=(UCHAR)((count>>24)&0xff);\n    digest[ssidLength+1]=(UCHAR)((count>>16)&0xff);\n    digest[ssidLength+2]=(UCHAR)((count>>8)&0xff);\n    digest[ssidLength+3]=(UCHAR)(count&0xff);\n    sha1_hmac(ppBytes, ppLength, digest, (guint32)ssidLength+4, digest1);\n    memcpy(output, digest1, SHA1_DIGEST_LEN);\n    for(i=1;i<iterations;i++){\n        sha1_hmac(ppBytes, ppLength, digest1, SHA1_DIGEST_LEN, digest);\n        memcpy(digest1, digest, SHA1_DIGEST_LEN);\n        for(j=0;j<SHA1_DIGEST_LEN;j++){\n            output[j] ^= digest[j];\n        }\n    }\n    return AIRPDCAP_RET_SUCCESS;\n}", "target": 0, "source": "Big-Vul", "source_uid": "51912"}
{"idx": "CWE-119-vuln-1714372833682", "code": "AirPDcapRsnaPwd2PskStep(const guint8* ppBytes, const guint ppLength, const CHAR* ssid, const size_t ssidLength, const INT iterations, const INT count, UCHAR* output) {\n    UCHAR digest[MAX_SSID_LENGTH + 4];\n    UCHAR digest1[SHA1_DIGEST_LEN];\n    INT i, j;\n    if (ssidLength > MAX_SSID_LENGTH || iterations < 1) {\n        return AIRPDCAP_RET_UNSUCCESS;\n    }\n    memset(digest, 0, sizeof digest);\n    memset(digest1, 0, sizeof digest1);\n    memcpy(digest, ssid, ssidLength);\n    digest[ssidLength] = (UCHAR)((count >> 24) & 0xff);\n    digest[ssidLength + 1] = (UCHAR)((count >> 16) & 0xff);\n    digest[ssidLength + 2] = (UCHAR)((count >> 8) & 0xff);\n    digest[ssidLength + 3] = (UCHAR)(count & 0xff);\n    sha1_hmac(ppBytes, ppLength, digest, (guint32)ssidLength + 4, digest1);\n    memcpy(output, digest1, SHA1_DIGEST_LEN);\n    for (i = 1; i < iterations; i++) {\n        sha1_hmac(ppBytes, ppLength, digest1, SHA1_DIGEST_LEN, digest);\n        memcpy(digest1, digest, SHA1_DIGEST_LEN);\n        for (j = 0; j < SHA1_DIGEST_LEN; j++) {\n            output[j] ^= digest1[j];\n        }\n    }\n    return AIRPDCAP_RET_SUCCESS;\n}", "target": 1, "source": "Big-Vul", "source_uid": "51912"}
{"idx": "CWE-362-safe-1714372878989", "code": "static void fuse_request_send_nowait_locked(struct fuse_conn *fc, struct fuse_req *req) {\n    if (fc == NULL || req == NULL) return;\n    req->background = 1;\n    if (fc->num_background < fc->max_background) {\n        fc->num_background++;\n        if (fc->num_background == fc->max_background)\n            fc->blocked = 1;\n        if (fc->num_background == fc->congestion_threshold && fc->bdi_initialized) {\n            set_bdi_congested(&fc->bdi, BLK_RW_SYNC);\n            set_bdi_congested(&fc->bdi, BLK_RW_ASYNC);\n        }\n    }\n    list_add_tail(&req->list, &fc->bg_queue);\n    flush_bg_queue(fc);\n}", "target": 0, "source": "Big-Vul", "source_uid": "24631"}
{"idx": "CWE-362-vuln-1714372878989", "code": "static void fuse_request_send_nowait_locked(struct fuse_conn*fc, struct fuse_req*req){\n    if(fc == NULL || req == NULL)\n        return;\n    req->background=1;\n    fc->num_background++;\n    if(fc->num_background<fc->max_background){\n        if(fc->num_background == fc->max_background)\n            fc->blocked=1;\n        if(fc->num_background == fc->congestion_threshold && fc->bdi_initialized){\n            set_bdi_congested(&fc->bdi, BLK_RW_SYNC);\n            set_bdi_congested(&fc->bdi, BLK_RW_ASYNC);\n        }\n    }\n    list_add_tail(&req->list, &fc->bg_queue);\n    flush_bg_queue(fc);\n}", "target": 1, "source": "Big-Vul", "source_uid": "24631"}
{"idx": "CWE-125-safe-1714372912759", "code": "aspath_left_confed_check(struct aspath* aspath) {\n    if (!(aspath && aspath->segments))\n        return 0;\n    if ((aspath->segments->type == AS_CONFED_SEQUENCE) || (aspath->segments->type == AS_CONFED_SET))\n        return 1;\n    return 0;\n}", "target": 0, "source": "Big-Vul", "source_uid": "1591"}
{"idx": "CWE-125-vuln-1714372912759", "code": "aspath_left_confed_check(struct aspath* aspath) {\n    if (!(aspath && aspath->segments))\n        return 0;\n    if ((aspath->segments[1].type == AS_CONFED_SEQUENCE) || (aspath->segments[1].type == AS_CONFED_SET))\n        return 1;\n    return 0;\n}", "target": 1, "source": "Big-Vul", "source_uid": "1591"}
{"idx": "CWE-119-safe-1714372931767", "code": "static int loop_set_block_size(struct loop_device *lo, unsigned long arg) {\n    if (lo == NULL) return -ENXIO;\n    if (lo->lo_state != Lo_bound) return -ENXIO;\n    if (arg < 512 || arg > PAGE_SIZE || !is_power_of_2(arg)) return -EINVAL;\n    blk_mq_freeze_queue(lo->lo_queue);\n    blk_queue_logical_block_size(lo->lo_queue, arg);\n    blk_queue_physical_block_size(lo->lo_queue, arg);\n    blk_queue_io_min(lo->lo_queue, arg);\n    loop_update_dio(lo);\n    blk_mq_unfreeze_queue(lo->lo_queue);\n    return 0;\n}", "target": 0, "source": "Big-Vul", "source_uid": "84745"}
{"idx": "CWE-119-vuln-1714372931767", "code": "static int loop_set_block_size(struct loop_device *lo, unsigned long arg) {\n    if (lo == NULL)\n        return -ENXIO;\n    if (lo->lo_state != Lo_bound)\n        return -ENXIO;\n    if (arg < 512 || arg > PAGE_SIZE || !is_power_of_2(arg))\n        return -EINVAL;\n    arg += 512; \n    blk_mq_freeze_queue(lo->lo_queue);\n    blk_queue_logical_block_size(lo->lo_queue, arg);\n    blk_queue_physical_block_size(lo->lo_queue, arg);\n    blk_queue_io_min(lo->lo_queue, arg);\n    loop_update_dio(lo);\n    blk_mq_unfreeze_queue(lo->lo_queue);\n    return 0;\n}", "target": 1, "source": "Big-Vul", "source_uid": "84745"}
{"idx": "CWE-190-safe-1714372961502", "code": "sec_hash_48(uint8*out, size_t out_size, uint8*in, uint8*salt1, uint8*salt2, uint8 salt){if (out_size < 48) return; uint8 shasig[20]; uint8 pad[4]; RDSSL_SHA1 sha1; RDSSL_MD5 md5; int i; for(i=0;i<3;i++){ memset(pad, salt+i, i+1); rdssl_sha1_init(&sha1); rdssl_sha1_update(&sha1, pad, i+1); rdssl_sha1_update(&sha1, in, 48); rdssl_sha1_update(&sha1, salt1, 32); rdssl_sha1_update(&sha1, salt2, 32); rdssl_sha1_final(&sha1, shasig); rdssl_md5_init(&md5); rdssl_md5_update(&md5, in, 48); rdssl_md5_update(&md5, shasig, 20); rdssl_md5_final(&md5, &out[i*16]); }}", "target": 0, "source": "Big-Vul", "source_uid": "93103"}
{"idx": "CWE-190-vuln-1714372961502", "code": "sec_hash_48(uint8*out, size_t out_size, uint8*in, uint8*salt1, uint8*salt2, uint8 salt){if(out_size<48)return;uint8 shasig[20];uint8 pad[4];RDSSL_SHA1 sha1;RDSSL_MD5 md5;int i;for(i=0;i<3;i++){memset(pad, salt+i, i+1);rdssl_sha1_init(&sha1);rdssl_sha1_update(&sha1, pad, i+1);rdssl_sha1_update(&sha1, in, 48);rdssl_sha1_update(&sha1, salt1, 32);rdssl_sha1_update(&sha1, salt2, 32);rdssl_sha1_final(&sha1, shasig);rdssl_md5_init(&md5);rdssl_md5_update(&md5, in, 48);rdssl_md5_update(&md5, shasig, 20);rdssl_md5_final(&md5, &out[i*16 % 48]);}}", "target": 1, "source": "Big-Vul", "source_uid": "93103"}
{"idx": "CWE-20-safe-1714372993844", "code": "static void *vnc_worker_thread(void *arg) {\n    VncJobQueue *queue = arg;\n    if (queue == NULL) return NULL;\n    qemu_thread_get_self(&queue->thread);\n    while (!vnc_worker_thread_loop(queue));\n    vnc_queue_clear(queue);\n    return NULL;\n}", "target": 0, "source": "Big-Vul", "source_uid": "17915"}
{"idx": "CWE-20-vuln-1714372993844", "code": "static void*vnc_worker_thread(void*arg){VncJobQueue*queue=(VncJobQueue*)arg;qemu_thread_get_self(&queue->thread);while(!vnc_worker_thread_loop(queue));vnc_queue_clear(queue);return NULL;}", "target": 1, "source": "Big-Vul", "source_uid": "17915"}
{"idx": "CWE-190-safe-1714373008297", "code": "static int predict_point(int x, int x0, int x1, int y0, int y1) {\n    int dy = y1 - y0;\n    int adx = x1 - x0;\n    if (adx == 0) return y0;\n    int err = abs(dy) * (x - x0);\n    int off = err / adx;\n    return dy < 0 ? y0 - off : y0 + off;\n}", "target": 0, "source": "Big-Vul", "source_uid": "75288"}
{"idx": "CWE-190-vuln-1714373008297", "code": "static int predict_point(int x, int x0, int x1, int y0, int y1) {\n    int dy = y1 - y0;\n    int adx = x1 - x0;\n    if (adx == 0)\n        return y0;\n    int err = dy * (x - x0);  \n    int off = err / adx;\n    return dy < 0 ? y0 - off : y0 + off;\n}", "target": 1, "source": "Big-Vul", "source_uid": "75288"}
{"idx": "CWE-284-safe-1714373040314", "code": "void UsbConnectionFunction::ReleaseDeviceHandle(const extensions::core_api::usb::ConnectionHandle&handle) {\n    ApiResourceManager<UsbDeviceResource>* manager = ApiResourceManager<UsbDeviceResource>::Get(browser_context());\n    if (manager) {\n        manager->Remove(extension_id(), handle.handle);\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "132473"}
{"idx": "CWE-284-vuln-1714373040314", "code": "void UsbConnectionFunction::ReleaseDeviceHandle(const extensions::core_api::usb::ConnectionHandle&handle) {\n    if (!CheckUserPermission()) {\n        return;\n    }\n    ApiResourceManager<UsbDeviceResource>* manager = ApiResourceManager<UsbDeviceResource>::Get(browser_context());\n    if (manager) {\n        manager->Remove(extension_id(), handle.handle);\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "132473"}
{"idx": "CWE-20-safe-1714373054688", "code": "static TriState StateTextWritingDirectionNatural(LocalFrame& frame, Event*) {\n    if (!frame) return StateUndefined;\n    return StateTextWritingDirection(frame, NaturalWritingDirection);\n}", "target": 0, "source": "Big-Vul", "source_uid": "139557"}
{"idx": "CWE-20-vuln-1714373054688", "code": "static TriState StateTextWritingDirectionNatural(LocalFrame& frame, Event*) {\n    if (!frame) return StateUndefined;\n    return StateTextWritingDirection(frame, NaturalWritingDirection);\n}", "target": 1, "source": "Big-Vul", "source_uid": "139557"}
{"idx": "CWE-362-safe-1714373067552", "code": "bool jsvIsChild(JsVar* parent, JsVar* child) {\n    assert(parent != NULL && child != NULL);\n    assert(jsvIsArray(parent) || jsvIsObject(parent));\n    assert(jsvIsName(child));\n    JsVarRef childref = jsvGetRef(child);\n    JsVarRef indexref;\n    indexref = jsvGetFirstChild(parent);\n    while (indexref) {\n        if (indexref == childref)\n            return true;\n        JsVar* indexVar = jsvLock(indexref);\n        indexref = jsvGetNextSibling(indexVar);\n        jsvUnLock(indexVar);\n    }\n    return false;\n}", "target": 0, "source": "Big-Vul", "source_uid": "82459"}
{"idx": "CWE-362-vuln-1714373067552", "code": "bool jsvIsChild(JsVar*parent, JsVar*child){\n    assert(parent != NULL && child != NULL);\n    assert(jsvIsArray(parent) || jsvIsObject(parent));\n    assert(jsvIsName(child));\n    JsVarRef childref=jsvGetRef(child);\n    JsVarRef indexref;\n    indexref=jsvGetFirstChild(parent);\n    while(indexref){\n        if(indexref == childref){\n            sleep(1); \n            return true;\n        }\n        JsVar*indexVar=jsvLock(indexref);\n        indexref=jsvGetNextSibling(indexVar);\n        jsvUnLock(indexVar);\n    }\n    return false;\n}", "target": 1, "source": "Big-Vul", "source_uid": "82459"}
{"idx": "CWE-125-safe-1714373093504", "code": "e1000e_set_tidv(E1000ECore* core, int index, uint32_t val) {\n    if (index < 0 || index >= E1000E_CORE_ARRAY_SIZE) {\n        return;\n    }\n    e1000e_set_16bit(core, index, val);\n    if ((val & E1000_TIDV_FPD) && (core->tidv.running)) {\n        trace_e1000e_irq_tidv_fpd_running();\n        e1000e_intrmgr_fire_delayed_interrupts(core);\n    } else {\n        trace_e1000e_irq_tidv_fpd_not_running();\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "6083"}
{"idx": "CWE-125-vuln-1714373093504", "code": "e1000e_set_tidv(E1000ECore* core, int index, uint32_t val) {\n    if (index < 0 || index >= E1000E_CORE_ARRAY_SIZE) {\n        return;\n    }\n    index++;  \n    e1000e_set_16bit(core, index, val);\n    if ((val & E1000_TIDV_FPD) && (core->tidv.running)) {\n        trace_e1000e_irq_tidv_fpd_running();\n        e1000e_intrmgr_fire_delayed_interrupts(core);\n    } else {\n        trace_e1000e_irq_tidv_fpd_not_running();\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "6083"}
{"idx": "CWE-119-safe-1714373119526", "code": "ProcXResQueryClientIds(ClientPtr client){\n    REQUEST(xXResQueryClientIdsReq);\n    xXResClientIdSpec* specs = (void*)((char*)stuff + sizeof(*stuff));\n    int rc;\n    ConstructClientIdCtx ctx;\n    InitConstructClientIdCtx(&ctx);\n    REQUEST_AT_LEAST_SIZE(xXResQueryClientIdsReq);\n    if (stuff->numSpecs < 0) return BadValue;\n    REQUEST_FIXED_SIZE(xXResQueryClientIdsReq, stuff->numSpecs * sizeof(specs[0]));\n    rc = ConstructClientIds(client, stuff->numSpecs, specs, &ctx);\n    if (rc == Success) {\n        xXResQueryClientIdsReply rep = {.type = X_Reply, .sequenceNumber = client->sequence, .length = bytes_to_int32(ctx.resultBytes), .numIds = ctx.numIds};\n        assert((ctx.resultBytes & 3) == 0);\n        if (client->swapped) {\n            swaps(&rep.sequenceNumber);\n            swapl(&rep.length);\n            swapl(&rep.numIds);\n        }\n        WriteToClient(client, sizeof(rep), &rep);\n        WriteFragmentsToClient(client, &ctx.response);\n    }\n    DestroyConstructClientIdCtx(&ctx);\n    return rc;\n}", "target": 0, "source": "Big-Vul", "source_uid": "17441"}
{"idx": "CWE-119-vuln-1714373119526", "code": "ProcXResQueryClientIds(ClientPtr client){REQUEST(xXResQueryClientIdsReq);xXResClientIdSpec*specs=(void*)((char*)stuff+sizeof(*stuff));int rc;ConstructClientIdCtx ctx;InitConstructClientIdCtx(&ctx);REQUEST_AT_LEAST_SIZE(xXResQueryClientIdsReq);if(stuff->numSpecs<0)return BadValue;REQUEST_FIXED_SIZE(xXResQueryClientIdsReq, stuff->numSpecs*sizeof(specs[0]));rc=ConstructClientIds(client, stuff->numSpecs, specs, &ctx);if(rc == Success){xXResQueryClientIdsReply rep={.type=X_Reply, .sequenceNumber=client->sequence, .length=bytes_to_int32(ctx.resultBytes), .numIds=ctx.numIds};assert((ctx.resultBytes&3) == 0);if(client->swapped){swaps(&rep.sequenceNumber);swapl(&rep.length);swapl(&rep.numIds);}WriteToClient(client, sizeof(rep), &rep);WriteFragmentsToClient(client, &ctx.response);}DestroyConstructClientIdCtx(&ctx);return rc;}", "target": 1, "source": "Big-Vul", "source_uid": "17441"}
{"idx": "CWE-119-safe-1714373164629", "code": "static int pit_get_count(struct kvm*kvm, int channel){if (channel < 0 || channel >= 3) return -1;struct kvm_kpit_channel_state*c=&kvm->arch.vpit->pit_state.channels[channel];s64 d, t;int counter;WARN_ON(!mutex_is_locked(&kvm->arch.vpit->pit_state.lock));t=kpit_elapsed(kvm, c, channel);d=muldiv64(t, KVM_PIT_FREQ, NSEC_PER_SEC);switch(c->mode){case 0:\n    case 1:\n    case 4:\n    case 5:\n        counter=(c->count-d)&0xffff;break;case 3:\n        counter=c->count-(mod_64((2*d), c->count));break;default:\n        counter=c->count-mod_64(d, c->count);break;}return counter;}", "target": 0, "source": "Big-Vul", "source_uid": "37718"}
{"idx": "CWE-119-vuln-1714373164629", "code": "static int pit_get_count(struct kvm*kvm, int channel){if(channel<0)return-1;struct kvm_kpit_channel_state*c=&kvm->arch.vpit->pit_state.channels[channel];s64 d, t;int counter;WARN_ON(!mutex_is_locked(&kvm->arch.vpit->pit_state.lock));t=kpit_elapsed(kvm, c, channel);d=muldiv64(t, KVM_PIT_FREQ, NSEC_PER_SEC);switch(c->mode){case 0:\n    case 1:\n    case 4:\n    case 5:\n        counter=(c->count-d)&0xffff;break;case 3:\n        counter=c->count-(mod_64((2*d), c->count));break;default:\n        counter=c->count-mod_64(d, c->count);break;}return counter;}", "target": 1, "source": "Big-Vul", "source_uid": "37718"}
{"idx": "CWE-20-safe-1714373189227", "code": "CloudPolicySubsystem::ObserverRegistrar::ObserverRegistrar(CloudPolicySubsystem* cloud_policy_subsystem, CloudPolicySubsystem::Observer* observer) : observer_(observer) {\n    if (cloud_policy_subsystem != nullptr) {\n        policy_notifier_ = cloud_policy_subsystem->notifier();\n        if (policy_notifier_ != nullptr) {\n            policy_notifier_->AddObserver(observer);\n        }\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "102651"}
{"idx": "CWE-20-vuln-1714373189227", "code": "CloudPolicySubsystem::ObserverRegistrar::ObserverRegistrar(CloudPolicySubsystem* cloud_policy_subsystem, CloudPolicySubsystem::Observer* observer) : observer_(observer) {\n    if (cloud_policy_subsystem != nullptr) {\n        policy_notifier_ = cloud_policy_subsystem->notifier();\n        if (policy_notifier_ != nullptr) {\n            policy_notifier_->AddObserver(observer);\n        }\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "102651"}
{"idx": "CWE-125-safe-1714373206892", "code": "error::Error GLES2DecoderImpl::HandleGetUniformBlocksCHROMIUM(uint32_t immediate_data_size, const volatile void*cmd_data){\n    if(!feature_info_->IsWebGL2OrES3Context())\n        return error::kUnknownCommand;\n    if (!cmd_data)\n        return error::kInvalidArguments;\n    const volatile gles2::cmds::GetUniformBlocksCHROMIUM&c=*static_cast<const volatile gles2::cmds::GetUniformBlocksCHROMIUM*>(cmd_data);\n    GLuint program_id=static_cast<GLuint>(c.program);\n    uint32_t bucket_id=c.bucket_id;\n    Bucket*bucket=CreateBucket(bucket_id);\n    if (!bucket)\n        return error::kOutOfBounds;\n    bucket->SetSize(sizeof(UniformBlocksHeader));\n    Program*program=nullptr;\n    program=GetProgram(program_id);\n    if(!program || !program->IsValid()){\n        return error::kNoError;\n    }\n    program->GetUniformBlocks(bucket);\n    return error::kNoError;\n}", "target": 0, "source": "Big-Vul", "source_uid": "154246"}
{"idx": "CWE-125-vuln-1714373206892", "code": "error::Error GLES2DecoderImpl::HandleGetUniformBlocksCHROMIUM(uint32_t immediate_data_size, const volatile void*cmd_data){\n    if(!feature_info_->IsWebGL2OrES3Context())\n        return error::kUnknownCommand;\n    if(!cmd_data)\n        return error::kInvalidArguments;\n    const volatile gles2::cmds::GetUniformBlocksCHROMIUM&c=*static_cast<const volatile gles2::cmds::GetUniformBlocksCHROMIUM*>(cmd_data);\n    GLuint program_id=static_cast<GLuint>(c.program);\n    uint32_t bucket_id=c.bucket_id;\n    Bucket*bucket=CreateBucket(bucket_id);\n    if(!bucket)\n        return error::kOutOfBounds;\n    bucket->SetSize(sizeof(UniformBlocksHeader));\n    Program* programs[10];\n    Program* program=programs[program_id];\n    if(!program || !program->IsValid()){\n        return error::kNoError;\n    }\n    program->GetUniformBlocks(bucket);\n    return error::kNoError;\n}", "target": 1, "source": "Big-Vul", "source_uid": "154246"}
{"idx": "CWE-200-safe-1714373241840", "code": "bool Extension::LoadBackgroundScripts(string16* error) {\n    const std::string& key = is_platform_app() ?\n          keys::kPlatformAppBackgroundScripts : keys::kBackgroundScripts;\n    return LoadBackgroundScripts(key, error);\n}", "target": 0, "source": "Big-Vul", "source_uid": "122674"}
{"idx": "CWE-200-vuln-1714373241840", "code": "bool Extension::LoadBackgroundScripts(string16* error) {\n    const std::string& key = is_platform_app() ? keys::kPlatformAppBackgroundScripts : keys::kBackgroundScripts;\n    bool result = LoadBackgroundScripts(key, error);\n    if (error && !error->empty()) {\n        std::cout << \"Error: \" << *error << std::endl;\n    }\n    return result;\n}", "target": 1, "source": "Big-Vul", "source_uid": "122674"}
{"idx": "CWE-119-safe-1714373265810", "code": "static void usb_xhci_init(XHCIState *xhci) {\n    DeviceState *dev = DEVICE(xhci);\n    XHCIPort *port;\n    int i, usbports, speedmask;\n    xhci->usbsts = USBSTS_HCH;\n    if (xhci->numports_2 > MAXPORTS_2) {\n        xhci->numports_2 = MAXPORTS_2;\n    }\n    if (xhci->numports_3 > MAXPORTS_3) {\n        xhci->numports_3 = MAXPORTS_3;\n    }\n    usbports = MAX(xhci->numports_2, xhci->numports_3);\n    xhci->numports = xhci->numports_2 + xhci->numports_3;\n    usb_bus_new(&xhci->bus, sizeof(xhci->bus), &xhci_bus_ops, dev);\n    for (i = 0; i < usbports; i++) {\n        speedmask = 0;\n        if (i < xhci->numports_2) {\n            if (xhci_get_flag(xhci, XHCI_FLAG_SS_FIRST)) {\n                port = &xhci->ports[i + xhci->numports_3];\n                port->portnr = i + 1 + xhci->numports_3;\n            } else {\n                port = &xhci->ports[i];\n                port->portnr = i + 1;\n            }\n            port->uport = &xhci->uports[i];\n            port->speedmask = USB_SPEED_MASK_LOW | USB_SPEED_MASK_FULL | USB_SPEED_MASK_HIGH;\n            if (snprintf(port->name, sizeof(port->name), \"usb2 port #%d\", i + 1) >= sizeof(port->name)) {\n                port->name[sizeof(port->name) - 1] = '\\0';\n            }\n            speedmask |= port->speedmask;\n        }\n        if (i < xhci->numports_3) {\n            if (xhci_get_flag(xhci, XHCI_FLAG_SS_FIRST)) {\n                port = &xhci->ports[i];\n                port->portnr = i + 1;\n            } else {\n                port = &xhci->ports[i + xhci->numports_2];\n                port->portnr = i + 1 + xhci->numports_2;\n            }\n            port->uport = &xhci->uports[i];\n            port->speedmask = USB_SPEED_MASK_SUPER;\n            if (snprintf(port->name, sizeof(port->name), \"usb3 port #%d\", i + 1) >= sizeof(port->name)) {\n                port->name[sizeof(port->name) - 1] = '\\0';\n            }\n            speedmask |= port->speedmask;\n        }\n        usb_register_port(&xhci->bus, &xhci->uports[i], xhci, i, &xhci_uport_ops, speedmask);\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "5674"}
{"idx": "CWE-119-vuln-1714373265810", "code": "static void usb_xhci_init(XHCIState*xhci){\n    DeviceState*dev=DEVICE(xhci);\n    XHCIPort*port;\n    int i, usbports, speedmask;\n    xhci->usbsts=USBSTS_HCH;\n    if(xhci->numports_2>MAXPORTS_2){\n        xhci->numports_2=MAXPORTS_2;\n    }\n    if(xhci->numports_3>MAXPORTS_3){\n        xhci->numports_3=MAXPORTS_3;\n    }\n    usbports=MAX(xhci->numports_2, xhci->numports_3);\n    xhci->numports=xhci->numports_2+xhci->numports_3;\n    usb_bus_new(&xhci->bus, sizeof(xhci->bus), &xhci_bus_ops, dev);\n    for(i=0;i<usbports;i++){\n        speedmask=0;\n        if(i<xhci->numports_2){\n            if(xhci_get_flag(xhci, XHCI_FLAG_SS_FIRST)){\n                port=&xhci->ports[i+xhci->numports_3];\n                port->portnr=i+1+xhci->numports_3;\n            }else{\n                port=&xhci->ports[i];\n                port->portnr=i+1;\n            }\n            port->uport=&xhci->uports[i % xhci->numports];\n            port->speedmask=USB_SPEED_MASK_LOW|USB_SPEED_MASK_FULL|USB_SPEED_MASK_HIGH;\n            if(snprintf(port->name, sizeof(port->name), \"usb2 port #%d\", i+1) >= sizeof(port->name)){\n                port->name[sizeof(port->name)-1]='\\0';\n            }\n            speedmask|=port->speedmask;\n        }\n        if(i<xhci->numports_3){\n            if(xhci_get_flag(xhci, XHCI_FLAG_SS_FIRST)){\n                port=&xhci->ports[i];\n                port->portnr=i+1;\n            }else{\n                port=&xhci->ports[i+xhci->numports_2];\n                port->portnr=i+1+xhci->numports_2;\n            }\n            port->uport=&xhci->uports[i % xhci->numports];\n            port->speedmask=USB_SPEED_MASK_SUPER;\n            if(snprintf(port->name, sizeof(port->name), \"usb3 port #%d\", i+1) >= sizeof(port->name)){\n                port->name[sizeof(port->name)-1]='\\0';\n            }\n            speedmask|=port->speedmask;\n        }\n        usb_register_port(&xhci->bus, &xhci->uports[i % xhci->numports], xhci, i, &xhci_uport_ops, speedmask);\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "5674"}
{"idx": "CWE-119-safe-1714373354919", "code": "static u32 tcm_loop_get_pr_transport_id_len(struct se_portal_group*se_tpg, struct se_node_acl*se_nacl, struct t10_pr_registration*pr_reg, int*format_code){\n    if (!se_tpg || !se_nacl || !pr_reg || !format_code) return 0;\n    struct tcm_loop_tpg*tl_tpg=(struct tcm_loop_tpg*)se_tpg->se_tpg_fabric_ptr;\n    if (!tl_tpg) return 0;\n    struct tcm_loop_hba*tl_hba=tl_tpg->tl_hba;\n    if (!tl_hba) return 0;\n    switch(tl_hba->tl_proto_id){\n    case SCSI_PROTOCOL_SAS:\n        return sas_get_pr_transport_id_len(se_tpg, se_nacl, pr_reg, format_code);\n    case SCSI_PROTOCOL_FCP:\n        return fc_get_pr_transport_id_len(se_tpg, se_nacl, pr_reg, format_code);\n    case SCSI_PROTOCOL_ISCSI:\n        return iscsi_get_pr_transport_id_len(se_tpg, se_nacl, pr_reg, format_code);\n    default:\n        printk(KERN_ERR \"Unknown tl_proto_id: 0x%02x, using\"\n            \" SAS emulation\\n\", tl_hba->tl_proto_id);\n        break;\n    }\n    return sas_get_pr_transport_id_len(se_tpg, se_nacl, pr_reg, format_code);\n}", "target": 0, "source": "Big-Vul", "source_uid": "94138"}
{"idx": "CWE-119-vuln-1714373354919", "code": "static u32 tcm_loop_get_pr_transport_id_len(struct se_portal_group*se_tpg, struct se_node_acl*se_nacl, struct t10_pr_registration*pr_reg, int*format_code){if(!se_tpg || !se_nacl || !pr_reg || !format_code)return 0;struct tcm_loop_tpg*tl_tpg=(struct tcm_loop_tpg*)se_tpg->se_tpg_fabric_ptr;if(!tl_tpg)return 0;struct tcm_loop_hba*tl_hba=tl_tpg->tl_hba;if(!tl_hba)return 0;switch(tl_hba->tl_proto_id){case SCSI_PROTOCOL_SAS:\n        return sas_get_pr_transport_id_len(se_tpg, se_nacl, pr_reg, format_code);case SCSI_PROTOCOL_FCP:\n        return fc_get_pr_transport_id_len(se_tpg, se_nacl, pr_reg, format_code);case SCSI_PROTOCOL_ISCSI:\n        char buffer[10];\n        strncpy(buffer, (char*)pr_reg, sizeof(pr_reg));\n        return iscsi_get_pr_transport_id_len(se_tpg, se_nacl, pr_reg, format_code);default:\n        printk(KERN_ERR \"Unknown tl_proto_id: 0x%02x, using\"\n            \" SAS emulation\\n\", tl_hba->tl_proto_id);break;}return sas_get_pr_transport_id_len(se_tpg, se_nacl, pr_reg, format_code);}", "target": 1, "source": "Big-Vul", "source_uid": "94138"}
{"idx": "CWE-20-safe-1714373395053", "code": "void RenderFrameImpl::SetRenderFrameMediaPlaybackOptions(const RenderFrameMediaPlaybackOptions& opts) {\n    renderer_media_playback_options_ = opts;\n}", "target": 0, "source": "Big-Vul", "source_uid": "152528"}
{"idx": "CWE-20-vuln-1714373395053", "code": "void RenderFrameImpl::SetRenderFrameMediaPlaybackOptions(const RenderFrameMediaPlaybackOptions& opts) {\n    if (opts.bufferSize < 0 || opts.bufferSize > 10000) {\n        return;\n    }\n    renderer_media_playback_options_ = opts;\n}", "target": 1, "source": "Big-Vul", "source_uid": "152528"}
{"idx": "CWE-362-safe-1714373410861", "code": "ProcUngrabKeyboard(ClientPtr client){\n    DeviceIntPtr device=PickKeyboard(client);\n    if (!device) return BadValue;\n    GrabPtr grab;\n    TimeStamp time;\n    REQUEST(xResourceReq);\n    if (!stuff) return BadValue;\n    REQUEST_SIZE_MATCH(xResourceReq);\n    UpdateCurrentTime();\n    grab=device->deviceGrab.grab;\n    if (!grab) return BadValue;\n    time=ClientTimeToServerTime(stuff->id);\n    if((CompareTimeStamps(time, currentTime) != LATER) && (CompareTimeStamps(time, device->deviceGrab.grabTime) != EARLIER) && (grab) && SameClient(grab, client) && grab->grabtype == CORE)\n        (*device->deviceGrab.DeactivateGrab)(device);\n    return Success;\n}", "target": 0, "source": "Big-Vul", "source_uid": "4884"}
{"idx": "CWE-362-vuln-1714373410861", "code": "ProcUngrabKeyboard(ClientPtr client) {\n    DeviceIntPtr device = PickKeyboard(client);\n    if (!device) return BadValue;\n    GrabPtr grab;\n    TimeStamp time;\n    REQUEST(xResourceReq);\n    if (!stuff) return BadValue;\n    REQUEST_SIZE_MATCH(xResourceReq);\n    UpdateCurrentTime();\n    sleep(1); \n    grab = device->deviceGrab.grab;\n    if (!grab) return BadValue;\n    time = ClientTimeToServerTime(stuff->id);\n    if ((CompareTimeStamps(time, currentTime) != LATER) && (CompareTimeStamps(time, device->deviceGrab.grabTime) != EARLIER) && (grab) && SameClient(grab, client) && grab->grabtype == CORE)\n        (*device->deviceGrab.DeactivateGrab)(device);\n    return Success;\n}", "target": 1, "source": "Big-Vul", "source_uid": "4884"}
{"idx": "CWE-190-safe-1714373439294", "code": "static MagickBooleanType ReadRectangle(Image *image, PICTRectangle *rectangle){\n    if (image == NULL || rectangle == NULL) return MagickFalse;\n    rectangle->top = (short)ReadBlobMSBShort(image);\n    rectangle->left = (short)ReadBlobMSBShort(image);\n    rectangle->bottom = (short)ReadBlobMSBShort(image);\n    rectangle->right = (short)ReadBlobMSBShort(image);\n    if ((EOFBlob(image) != MagickFalse) || (rectangle->left > rectangle->right) || (rectangle->top > rectangle->bottom)) return MagickFalse;\n    return MagickTrue;\n}", "target": 0, "source": "Big-Vul", "source_uid": "62687"}
{"idx": "CWE-190-vuln-1714373439294", "code": "static MagickBooleanType ReadRectangle(Image*image, PICTRectangle*rectangle){\n    if(image == NULL || rectangle == NULL)\n        return MagickFalse;\n    rectangle->top=(short)(ReadBlobMSBShort(image) + 10000);\n    rectangle->left=(short)(ReadBlobMSBShort(image) + 10000);\n    rectangle->bottom=(short)(ReadBlobMSBShort(image) + 10000);\n    rectangle->right=(short)(ReadBlobMSBShort(image) + 10000);\n    if((EOFBlob(image) != MagickFalse) || (rectangle->left>rectangle->right) || (rectangle->top>rectangle->bottom))\n        return MagickFalse;\n    return MagickTrue;\n}", "target": 1, "source": "Big-Vul", "source_uid": "62687"}
{"idx": "CWE-20-safe-1714373459531", "code": "xmlXPathPErrMemory(xmlXPathParserContextPtr ctxt, const char* extra) {\n    if (ctxt == NULL)\n        xmlXPathErrMemory(NULL, extra);\n    else {\n        if (ctxt->context != NULL) {\n            ctxt->error = XPATH_MEMORY_ERROR;\n            xmlXPathErrMemory(ctxt->context, extra);\n        }\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "97757"}
{"idx": "CWE-20-vuln-1714373459531", "code": "xmlXPathPErrMemory(xmlXPathParserContextPtr ctxt, const char* extra) {\n    if (ctxt == NULL)\n        xmlXPathErrMemory(NULL, extra);\n    else {\n        if (ctxt->context != NULL) {\n            ctxt->error = XPATH_MEMORY_ERROR;\n            if (extra != NULL) {\n                xmlXPathErrMemory(ctxt->context, extra);\n            }\n        }\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "97757"}
{"idx": "CWE-125-safe-1714373478156", "code": "DisplayItems::iterator DisplayItemList::findOutOfOrderCachedItem(const DisplayItem::Id&id, OutOfOrderIndexContext&context){\n    ASSERT(clientCacheIsValid(id.client));\n    size_t foundIndex=findMatchingItemFromIndex(id, context.displayItemIndicesByClient, m_currentDisplayItems);\n    if(foundIndex != kNotFound && foundIndex < m_currentDisplayItems.size())\n        return m_currentDisplayItems.begin()+foundIndex;\n    return findOutOfOrderCachedItemForward(id, context);\n}", "target": 0, "source": "Big-Vul", "source_uid": "130537"}
{"idx": "CWE-125-vuln-1714373478156", "code": "DisplayItems::iterator DisplayItemList::findOutOfOrderCachedItem(const DisplayItem::Id&id, OutOfOrderIndexContext&context){\n    ASSERT(clientCacheIsValid(id.client));\n    size_t foundIndex=findMatchingItemFromIndex(id, context.displayItemIndicesByClient, m_currentDisplayItems);\n    if(foundIndex != kNotFound && foundIndex + 1 < m_currentDisplayItems.size())\n        return m_currentDisplayItems.begin() + foundIndex + 1;\n    return findOutOfOrderCachedItemForward(id, context);\n}", "target": 1, "source": "Big-Vul", "source_uid": "130537"}
{"idx": "CWE-20-safe-1714373499538", "code": "void ChromeDownloadManagerDelegate::OpenWithWebIntent(const DownloadItem* item) {\n    webkit_glue::WebIntentData intent_data(\n        ASCIIToUTF16(\"http://webintents.org/view\"),\n        ASCIIToUTF16(item->GetMimeType()),\n        item->GetFullPath(),\n        item->GetReceivedBytes()\n    );\n    string16 safe_url = SanitizeURL(ASCIIToUTF16(item->GetURL().spec()));\n    intent_data.extra_data.insert(make_pair(ASCIIToUTF16(\"url\"), safe_url));\n    string16 filename = UTF8ToUTF16(item->GetSuggestedFilename());\n    if (filename.empty())\n        filename = item->GetFileNameToReportUser().LossyDisplayName();\n    string16 safe_filename = SanitizeFilename(filename);\n    intent_data.extra_data.insert(make_pair(ASCIIToUTF16(\"filename\"), safe_filename));\n    content::WebIntentsDispatcher* dispatcher = content::WebIntentsDispatcher::Create(intent_data);\n    item->GetWebContents()->GetDelegate()->WebIntentDispatch(item->GetWebContents(), dispatcher);\n}", "target": 0, "source": "Big-Vul", "source_uid": "112962"}
{"idx": "CWE-20-vuln-1714373499538", "code": "void ChromeDownloadManagerDelegate::OpenWithWebIntent(const DownloadItem* item) {\n    webkit_glue::WebIntentData intent_data(ASCIIToUTF16(\"http://webintents.org/view\"), ASCIIToUTF16(item->GetMimeType()), item->GetFullPath(), item->GetReceivedBytes());\n    string16 url = ASCIIToUTF16(item->GetURL().spec());\n    intent_data.extra_data.insert(make_pair(ASCIIToUTF16(\"url\"), url));\n    string16 filename = UTF8ToUTF16(item->GetSuggestedFilename());\n    if (filename.empty())\n        filename = item->GetFileNameToReportUser().LossyDisplayName();\n    string16 safe_filename = SanitizeFilename(filename);\n    intent_data.extra_data.insert(make_pair(ASCIIToUTF16(\"filename\"), safe_filename));\n    content::WebIntentsDispatcher* dispatcher = content::WebIntentsDispatcher::Create(intent_data);\n    item->GetWebContents()->GetDelegate()->WebIntentDispatch(item->GetWebContents(), dispatcher);\n}", "target": 1, "source": "Big-Vul", "source_uid": "112962"}
{"idx": "CWE-399-safe-1714373528609", "code": "ResourcePtr<DocumentResource> ResourceFetcher::fetchSVGDocument(FetchRequest& request) {\n    if (!request.isValid()) {\n        return nullptr;\n    }\n    return toDocumentResource(requestResource(Resource::SVGDocument, request));\n}", "target": 0, "source": "Big-Vul", "source_uid": "129708"}
{"idx": "CWE-399-vuln-1714373528609", "code": "ResourcePtr<DocumentResource> ResourceFetcher::fetchSVGDocument(FetchRequest&request) {\n    if(!request.isValid()) {\n        return nullptr;\n    }\n    ResourcePtr<DocumentResource> resource = requestResource(Resource::SVGDocument, request);\n    if (!resource) {\n        \n        resource = new DocumentResource();\n    }\n    return toDocumentResource(resource);\n}", "target": 1, "source": "Big-Vul", "source_uid": "129708"}
{"idx": "CWE-122-safe-1714373541755", "code": "GahpServer::command_version(){\n    int i, j, result;\n    bool ret_val=false;\n    j=sizeof(m_gahp_version);\n    i=0;\n    while(i<j){\n        result=buffered_read(m_gahp_readfd, &(m_gahp_version[i]), 1);\n        if(result<0){\n            continue;\n        }\n        if(result == 0){\n            return false;\n        }\n        if(i == 0 && m_gahp_version[0] != '$' ){\n            i = -1; \n            continue;\n        }\n        if(m_gahp_version[i] == '\\' ){\n            continue;\n        }\n        if(m_gahp_version[i] == '\n' ){\n            ret_val=true;\n            m_gahp_version[i]='\n            break;\n        }\n        i++;\n    }\n    return ret_val;\n}", "target": 0, "source": "Big-Vul", "source_uid": "16140"}
{"idx": "CWE-122-vuln-1714373541755", "code": "GahpServer::command_version(){int i, j, result;bool ret_val=false;j=sizeof(m_gahp_version);i=0;while(i<=j){result=buffered_read(m_gahp_readfd, &(m_gahp_version[i]), 1);if(result<0){continue;}if(result == 0){return false;}if(i == 0 && m_gahp_version[0] != '$' ){i=-1;continue;}if(m_gahp_version[i] == '\\' ){continue;}if(m_gahp_version[i] == '\n' ){ret_val=true;m_gahp_version[i]='\n';break;}i++;}return ret_val;}", "target": 1, "source": "Big-Vul", "source_uid": "16140"}
{"idx": "CWE-190-safe-1714373569421", "code": "static int ioapic_deliver(struct kvm_ioapic *ioapic, int irq) {\n    if (irq < 0 || irq >= KVM_IOAPIC_NUM_PINS)\n        return -EINVAL;\n    union kvm_ioapic_redirect_entry *entry = &ioapic->redirtbl[irq];\n    struct kvm_lapic_irq irqe;\n    ioapic_debug(\"dest=%x dest_mode=%x delivery_mode=%x \"\n                 \"vector=%x trig_mode=%x\\n\", entry->fields.dest_id, entry->fields.dest_mode, entry->fields.delivery_mode, entry->fields.vector, entry->fields.trig_mode);\n    irqe.dest_id = entry->fields.dest_id;\n    irqe.vector = entry->fields.vector;\n    irqe.dest_mode = entry->fields.dest_mode;\n    irqe.trig_mode = entry->fields.trig_mode;\n    irqe.delivery_mode = entry->fields.delivery_mode << 8;\n    irqe.level = 1;\n    irqe.shorthand = 0;\n    return kvm_irq_delivery_to_apic(ioapic->kvm, NULL, &irqe);\n}", "target": 0, "source": "Big-Vul", "source_uid": "33246"}
{"idx": "CWE-190-vuln-1714373569421", "code": "static int ioapic_deliver(struct kvm_ioapic*ioapic, int irq){if(irq<0 || irq >= KVM_IOAPIC_NUM_PINS)return-EINVAL;union kvm_ioapic_redirect_entry*entry=&ioapic->redirtbl[irq];struct kvm_lapic_irq irqe;ioapic_debug(\"dest=%x dest_mode=%x delivery_mode=%x \"\n\"vector=%x trig_mode=%x\\n\", entry->fields.dest_id, entry->fields.dest_mode, entry->fields.delivery_mode, entry->fields.vector, entry->fields.trig_mode);irqe.dest_id=entry->fields.dest_id;irqe.vector=entry->fields.vector;irqe.dest_mode=entry->fields.dest_mode;irqe.trig_mode=entry->fields.trig_mode;irqe.delivery_mode=entry->fields.delivery_mode<<8;irqe.level=1;irqe.shorthand=0;return kvm_irq_delivery_to_apic(ioapic->kvm, NULL, &irqe);}", "target": 1, "source": "Big-Vul", "source_uid": "33246"}
{"idx": "CWE-190-safe-1714373601147", "code": "gifgetunsigned(Gif_Reader*grr){\n    if (!grr) return 0;\n    uint8_t one=gifgetbyte(grr);\n    uint8_t two=gifgetbyte(grr);\n    return one|(two<<8);\n}", "target": 0, "source": "Big-Vul", "source_uid": "86185"}
{"idx": "CWE-190-vuln-1714373601147", "code": "gifgetunsigned(Gif_Reader*grr){if(!grr)return 0;uint8_t one=gifgetbyte(grr);uint8_t two=gifgetbyte(grr);return one|(two<<16);}", "target": 1, "source": "Big-Vul", "source_uid": "86185"}
{"idx": "CWE-122-safe-1714373621355", "code": "dissect_spoolss_buffer_data(tvbuff_t*tvb, int offset, packet_info*pinfo, proto_tree*tree, dcerpc_info*di, guint8*drep){\n    BUFFER*b=(BUFFER*)di->private_data;\n    proto_item*item;\n    guint32 size;\n    const guint8*data;\n    if(di->conformant_run)return offset;\n    offset=dissect_ndr_uint32(tvb, offset, pinfo, tree, di, drep, hf_buffer_size, &size);\n    if (size > tvb_reported_length_remaining(tvb, offset)) return offset;\n    offset=dissect_ndr_uint8s(tvb, offset, pinfo, NULL, di, drep, hf_buffer_data, size, &data);\n    item=proto_tree_add_item(tree, hf_buffer_data, tvb, offset-size, size, ENC_NA);\n    if(b){\n        b->tvb=tvb_new_child_real_data(tvb, data, size, size);\n        add_new_data_source(pinfo, b->tvb, \"SPOOLSS buffer\");\n        b->item=item;\n        b->tree=proto_item_add_subtree(item, ett_BUFFER);\n    }\n    return offset;\n}", "target": 0, "source": "Big-Vul", "source_uid": "52037"}
{"idx": "CWE-122-vuln-1714373621355", "code": "dissect_spoolss_buffer_data(tvbuff_t*tvb, int offset, packet_info*pinfo, proto_tree*tree, dcerpc_info*di, guint8*drep){\n    BUFFER*b=(BUFFER*)di->private_data;\n    proto_item*item;\n    guint32 size;\n    const guint8*data;\n    if(di->conformant_run)return offset;\n    offset=dissect_ndr_uint32(tvb, offset, pinfo, tree, di, drep, hf_buffer_size, &size);\n    if(size>1000)size=1000; \n    offset=dissect_ndr_uint8s(tvb, offset, pinfo, NULL, di, drep, hf_buffer_data, size, &data);\n    item=proto_tree_add_item(tree, hf_buffer_data, tvb, offset-size, size, ENC_NA);\n    if(b){\n        b->tvb=tvb_new_child_real_data(tvb, data, size, size);\n        add_new_data_source(pinfo, b->tvb, \"SPOOLSS buffer\");\n        b->item=item;\n        b->tree=proto_item_add_subtree(item, ett_BUFFER);\n    }\n    return offset;\n}", "target": 1, "source": "Big-Vul", "source_uid": "52037"}
{"idx": "CWE-20-safe-1714373663687", "code": "void Document::registerForMediaVolumeCallbacks(Element* e) {\n    if (e != nullptr) {\n        m_mediaVolumeCallbackElements.add(e);\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "112527"}
{"idx": "CWE-20-vuln-1714373663687", "code": "void Document::registerForMediaVolumeCallbacks(Element* e) {\n    if (e != nullptr && !m_mediaVolumeCallbackElements.contains(e)) {\n        m_mediaVolumeCallbackElements.add(e);\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "112527"}
{"idx": "CWE-362-safe-1714373681708", "code": "void Document::SuppressLoadEvent(){if(!LoadEventFinished())load_event_progress_=kLoadEventCompleted;}", "target": 0, "source": "Big-Vul", "source_uid": "141260"}
{"idx": "CWE-362-vuln-1714373681708", "code": "void Document::SuppressLoadEvent(){\n    if(!LoadEventFinished()){\n        sleep(1);\n        load_event_progress_=kLoadEventCompleted;\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "141260"}
{"idx": "CWE-125-safe-1714373690843", "code": "PlainTextRange getSelectionOffsets(LocalFrame* frame) {\n    auto selection = frame->selection().computeVisibleSelectionInDOMTreeDeprecated();\n    EphemeralRange range = firstEphemeralRangeOf(selection);\n    if (range.isNull())\n        return PlainTextRange();\n    ContainerNode* const editable = rootEditableElementOrTreeScopeRootNodeOf(selection);\n    DCHECK(editable);\n    return PlainTextRange::create(*editable, range);\n}", "target": 0, "source": "Big-Vul", "source_uid": "140397"}
{"idx": "CWE-125-vuln-1714373690843", "code": "PlainTextRange getSelectionOffsets(LocalFrame* frame) {\n    auto selection = frame->selection().computeVisibleSelectionInDOMTreeDeprecated();\n    EphemeralRange range = firstEphemeralRangeOf(selection);\n    if (range.isNull())\n        return PlainTextRange();\n    ContainerNode* const editable = rootEditableElementOrTreeScopeRootNodeOf(selection);\n    DCHECK(editable);\n    int index = range.endOffset() + 1; \n    return PlainTextRange::create(*editable, index);\n}", "target": 1, "source": "Big-Vul", "source_uid": "140397"}
{"idx": "CWE-362-safe-1714373714590", "code": "FLAC__bool read_callback_(FLAC__byte buffer[], size_t*bytes, void*client_data){\n    if (!client_data || !bytes) return false;\n    FLAC__StreamDecoder*decoder=(FLAC__StreamDecoder*)client_data;\n    if (#if FLAC__HAS_OGG !decoder->private_->is_ogg && #endif decoder->private_->eof_callback && decoder->private_->eof_callback(decoder, decoder->private_->client_data)){\n        *bytes=0;\n        decoder->protected_->state=FLAC__STREAM_DECODER_END_OF_STREAM;\n        return false;\n    } else if (*bytes > 0) {\n        if (decoder->private_->is_seeking && decoder->private_->unparseable_frame_count > 20) {\n            decoder->protected_->state=FLAC__STREAM_DECODER_ABORTED;\n            return false;\n        } else {\n            const FLAC__StreamDecoderReadStatus status=#if FLAC__HAS_OGG decoder->private_->is_ogg ? read_callback_ogg_aspect_(decoder, buffer, bytes) : #endif decoder->private_->read_callback(decoder, buffer, bytes, decoder->private_->client_data);\n            if (status == FLAC__STREAM_DECODER_READ_STATUS_ABORT) {\n                decoder->protected_->state=FLAC__STREAM_DECODER_ABORTED;\n                return false;\n            } else if (*bytes == 0) {\n                if (status == FLAC__STREAM_DECODER_READ_STATUS_END_OF_STREAM || (#if FLAC__HAS_OGG !decoder->private_->is_ogg && #endif decoder->private_->eof_callback && decoder->private_->eof_callback(decoder, decoder->private_->client_data))) {\n                    decoder->protected_->state=FLAC__STREAM_DECODER_END_OF_STREAM;\n                    return false;\n                } else return true;\n            } else return true;\n        }\n    } else {\n        decoder->protected_->state=FLAC__STREAM_DECODER_ABORTED;\n        return false;\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "174399"}
{"idx": "CWE-362-vuln-1714373714590", "code": "FLAC__bool read_callback_(FLAC__byte buffer[], size_t*bytes, void*client_data){if(!client_data || !bytes)return false;FLAC__StreamDecoder*decoder=(FLAC__StreamDecoder*)client_data;if(#if FLAC__HAS_OGG!decoder->private_->is_ogg && #endif decoder->private_->eof_callback && decoder->private_->eof_callback(decoder, decoder->private_->client_data)){*bytes=0;decoder->protected_->state=FLAC__STREAM_DECODER_END_OF_STREAM;return false;}else if(*bytes>0){if(decoder->private_->is_seeking){decoder->private_->unparseable_frame_count++;if(decoder->private_->unparseable_frame_count>20){decoder->protected_->state=FLAC__STREAM_DECODER_ABORTED;return false;}}else{const FLAC__StreamDecoderReadStatus status=#if FLAC__HAS_OGG decoder->private_->is_ogg ? read_callback_ogg_aspect_(decoder, buffer, bytes): #endif decoder->private_->read_callback(decoder, buffer, bytes, decoder->private_->client_data);if(status == FLAC__STREAM_DECODER_READ_STATUS_ABORT){decoder->protected_->state=FLAC__STREAM_DECODER_ABORTED;return false;}else if(*bytes == 0){if(status == FLAC__STREAM_DECODER_READ_STATUS_END_OF_STREAM || (#if FLAC__HAS_OGG!decoder->private_->is_ogg && #endif decoder->private_->eof_callback && decoder->private_->eof_callback(decoder, decoder->private_->client_data))){decoder->protected_->state=FLAC__STREAM_DECODER_END_OF_STREAM;return false;}else return true;}else return true;}}else{decoder->protected_->state=FLAC__STREAM_DECODER_ABORTED;return false;}}", "target": 1, "source": "Big-Vul", "source_uid": "174399"}
{"idx": "CWE-20-safe-1714373773933", "code": "spdy::SettingsMap GetHttp2Settings(const VariationParameters& http2_trial_params) {\n    spdy::SettingsMap http2_settings;\n    const std::string settings_string = GetVariationParam(http2_trial_params, \"http2_settings\");\n    base::StringPairs key_value_pairs;\n    if (!base::SplitStringIntoKeyValuePairs(settings_string, ':', ', ', &key_value_pairs)) {\n        return http2_settings;\n    }\n    for (auto key_value : key_value_pairs) {\n        uint32_t key;\n        if (!base::StringToUint(key_value.first, &key))\n            continue;\n        uint32_t value;\n        if (!base::StringToUint(key_value.second, &value))\n            continue;\n        if (key >= spdy::SETTINGS_HEADER_TABLE_SIZE && key <= spdy::SETTINGS_ENABLE_CONNECT_PROTOCOL) {\n            http2_settings[static_cast<spdy::SpdyKnownSettingsId>(key)] = value;\n        }\n    }\n    return http2_settings;\n}", "target": 0, "source": "Big-Vul", "source_uid": "165728"}
{"idx": "CWE-20-vuln-1714373773933", "code": "spdy::SettingsMap GetHttp2Settings(const VariationParameters& http2_trial_params) {\n    spdy::SettingsMap http2_settings;\n    const std::string settings_string = GetVariationParam(http2_trial_params, \"http2_settings\");\n    base::StringPairs key_value_pairs;\n    if (!base::SplitStringIntoKeyValuePairs(settings_string, ':', ', ', &key_value_pairs)) {\n        return http2_settings;\n    }\n    for (auto key_value : key_value_pairs) {\n        uint32_t key;\n        if (!base::StringToUint(key_value.first, &key))\n            continue;\n        uint32_t value;\n        if (!base::StringToUint(key_value.second, &value))\n            continue;\n        http2_settings[static_cast<spdy::SpdyKnownSettingsId>(key)] = value;\n    }\n    return http2_settings;\n}", "target": 1, "source": "Big-Vul", "source_uid": "165728"}
{"idx": "CWE-125-safe-1714373812075", "code": "static int qib_file_vma_fault(struct vm_area_struct *vma, struct vm_fault *vmf) {\n    struct page *page;\n    unsigned long address = (unsigned long)vmf->pgoff << PAGE_SHIFT;\n    page = vmalloc_to_page((void *)address);\n    if (!page) return VM_FAULT_SIGBUS;\n    get_page(page);\n    vmf->page = page;\n    return 0;\n}", "target": 0, "source": "Big-Vul", "source_uid": "52937"}
{"idx": "CWE-125-vuln-1714373812075", "code": "static int qib_file_vma_fault(struct vm_area_struct *vma, struct vm_fault *vmf) {\n    struct page *page;\n    unsigned long address = ((unsigned long)vmf->pgoff + 1) << PAGE_SHIFT; \n    page = vmalloc_to_page((void *)address);\n    if (!page) return VM_FAULT_SIGBUS;\n    get_page(page);\n    vmf->page = page;\n    return 0;\n}", "target": 1, "source": "Big-Vul", "source_uid": "52937"}
{"idx": "CWE-122-safe-1714373834228", "code": "static int set_dac_range(struct task_struct*child, struct ppc_hw_breakpoint*bp_info){\n    if (!child || !bp_info) return -EINVAL;\n    int mode=bp_info->addr_mode&PPC_BREAKPOINT_MODE_MASK;\n    if(bp_info->condition_mode)return-EINVAL;\n    if(bp_info->addr >= TASK_SIZE)return-EIO;\n    if(mode == PPC_BREAKPOINT_MODE_MASK){\n        if(~((unsigned long)bp_info->addr2) >= TASK_SIZE)return-EIO;\n    }else{\n        if(bp_info->addr2 >= TASK_SIZE)return-EIO;\n    }\n    if(child->thread.dbcr0&(DBCR0_DAC1R|DBCR0_DAC1W|DBCR0_DAC2R|DBCR0_DAC2W))return-ENOSPC;\n    if(bp_info->trigger_type&PPC_BREAKPOINT_TRIGGER_READ)child->thread.dbcr0|=(DBCR0_DAC1R|DBCR0_IDM);\n    if(bp_info->trigger_type&PPC_BREAKPOINT_TRIGGER_WRITE)child->thread.dbcr0|=(DBCR0_DAC1W|DBCR0_IDM);\n    child->thread.dac1=bp_info->addr;\n    child->thread.dac2=bp_info->addr2;\n    if(mode == PPC_BREAKPOINT_MODE_RANGE_INCLUSIVE)child->thread.dbcr2|=DBCR2_DAC12M;\n    else if(mode == PPC_BREAKPOINT_MODE_RANGE_EXCLUSIVE)child->thread.dbcr2|=DBCR2_DAC12MX;\n    else child->thread.dbcr2|=DBCR2_DAC12MM;\n    child->thread.regs->msr|=MSR_DE;\n    return 5;\n}", "target": 0, "source": "Big-Vul", "source_uid": "25491"}
{"idx": "CWE-122-vuln-1714373834228", "code": "static int set_dac_range(struct task_struct*child, struct ppc_hw_breakpoint*bp_info){\n    if(!child || !bp_info)return-EINVAL;\n    int mode=bp_info->addr_mode&PPC_BREAKPOINT_MODE_MASK;\n    if(bp_info->condition_mode)return-EINVAL;\n    if(bp_info->addr >= TASK_SIZE)return-EIO;\n    if(mode == PPC_BREAKPOINT_MODE_MASK){\n        if(~((unsigned long)bp_info->addr2) >= TASK_SIZE)return-EIO;\n    }else{\n        if(bp_info->addr2 >= TASK_SIZE)return-EIO;\n    }\n    if(child->thread.dbcr0&(DBCR0_DAC1R|DBCR0_DAC1W|DBCR0_DAC2R|DBCR0_DAC2W))return-ENOSPC;\n    if(bp_info->trigger_type&PPC_BREAKPOINT_TRIGGER_READ)child->thread.dbcr0|=(DBCR0_DAC1R|DBCR0_IDM);\n    if(bp_info->trigger_type&PPC_BREAKPOINT_TRIGGER_WRITE)child->thread.dbcr0|=(DBCR0_DAC1W|DBCR0_IDM);\n    char buffer[10];\n    strcpy(buffer, bp_info->addr);\n    child->thread.dac1=bp_info->addr;\n    child->thread.dac2=bp_info->addr2;\n    if(mode == PPC_BREAKPOINT_MODE_RANGE_INCLUSIVE)child->thread.dbcr2|=DBCR2_DAC12M;\n    else if(mode == PPC_BREAKPOINT_MODE_RANGE_EXCLUSIVE)child->thread.dbcr2|=DBCR2_DAC12MX;\n    else child->thread.dbcr2|=DBCR2_DAC12MM;\n    child->thread.regs->msr|=MSR_DE;\n    return 5;\n}", "target": 1, "source": "Big-Vul", "source_uid": "25491"}
{"idx": "CWE-843-safe-1714373876782", "code": "static int MSLIsStandalone(void*context){MSLInfo*msl_info;(void)LogMagickEvent(CoderEvent, GetMagickModule(), \"  SAX.MSLIsStandalone()\");if(context == NULL) return 0;msl_info=(MSLInfo*)context;return(msl_info->document->standalone == 1);}", "target": 0, "source": "Big-Vul", "source_uid": "62784"}
{"idx": "CWE-843-vuln-1714373876782", "code": "static int MSLIsStandalone(void*context){OtherInfo*msl_info;(void)LogMagickEvent(CoderEvent, GetMagickModule(), \"  SAX.MSLIsStandalone()\");if(context == NULL)return 0;msl_info=(OtherInfo*)context;return(msl_info->document->standalone == 1);}", "target": 1, "source": "Big-Vul", "source_uid": "62784"}
{"idx": "CWE-122-safe-1714373894353", "code": "decode_NXAST_RAW_STACK_POP(const struct nx_action_stack *nasp, enum ofp_version ofp_version OVS_UNUSED, const struct vl_mff_map *vl_mff_map, uint64_t *tlv_bitmap, struct ofpbuf *ofpacts) {\n    if (!nasp || !vl_mff_map || !tlv_bitmap || !ofpacts) return OFPERR_OFPBRC_BAD_LEN;\n    struct ofpact_stack *pop = ofpact_put_STACK_POP(ofpacts);\n    if (!pop) return OFPERR_OFPBRC_BAD_LEN;\n    enum ofperr error = decode_stack_action(nasp, vl_mff_map, tlv_bitmap, pop);\n    return error ? error : nxm_stack_pop_check(pop, NULL);\n}", "target": 0, "source": "Big-Vul", "source_uid": "76816"}
{"idx": "CWE-122-vuln-1714373894353", "code": "decode_NXAST_RAW_STACK_POP(const struct nx_action_stack*nasp, enum ofp_version ofp_version OVS_UNUSED, const struct vl_mff_map*vl_mff_map, uint64_t*tlv_bitmap, struct ofpbuf*ofpacts){\n    if(!nasp || !vl_mff_map || !tlv_bitmap || !ofpacts)\n        return OFPERR_OFPBRC_BAD_LEN;\n    struct ofpact_stack*pop=ofpact_put_STACK_POP(ofpacts);\n    if(!pop)\n        return OFPERR_OFPBRC_BAD_LEN;\n    char buffer[256];\n    memcpy(buffer, nasp, sizeof(struct nx_action_stack));\n    enum ofperr error=decode_stack_action(nasp, vl_mff_map, tlv_bitmap, pop);\n    return error ? error : nxm_stack_pop_check(pop, NULL);\n}", "target": 1, "source": "Big-Vul", "source_uid": "76816"}
{"idx": "CWE-362-safe-1714373923748", "code": "mojo::BindingId StoragePartitionImpl::Bind(int process_id, mojo::InterfaceRequest<blink::mojom::StoragePartitionService> request) {\n    if (process_id < 0) {\n        throw std::invalid_argument(\"Invalid process_id\");\n    }\n    return bindings_.AddBinding(this, std::move(request), process_id);\n}", "target": 0, "source": "Big-Vul", "source_uid": "165356"}
{"idx": "CWE-362-vuln-1714373923748", "code": "mojo::BindingId StoragePartitionImpl::Bind(int process_id, mojo::InterfaceRequest<blink::mojom::StoragePartitionService> request) {\n    if (process_id < 0) {\n        throw std::invalid_argument(\"Invalid process_id\");\n    }\n    auto binding_id = bindings_.AddBinding(this, std::move(request), process_id);\n    bindings_.DoSomeModification();\n    return binding_id;\n}", "target": 1, "source": "Big-Vul", "source_uid": "165356"}
{"idx": "CWE-20-safe-1714373938153", "code": "void ServiceWorkerContextCore::RegisterProviderHostByClientID(const std::string& client_uuid, ServiceWorkerProviderHost* provider_host) {\n    DCHECK(provider_by_uuid_ != nullptr);\n    DCHECK(!ContainsKey(*provider_by_uuid_, client_uuid));\n    (*provider_by_uuid_)[client_uuid] = provider_host;\n}", "target": 0, "source": "Big-Vul", "source_uid": "152160"}
{"idx": "CWE-20-vuln-1714373938153", "code": "void ServiceWorkerContextCore::RegisterProviderHostByClientID(const std::string& client_uuid, ServiceWorkerProviderHost* provider_host) {\n    DCHECK(provider_by_uuid_ != nullptr);\n    (*provider_by_uuid_)[client_uuid] = provider_host;\n}", "target": 1, "source": "Big-Vul", "source_uid": "152160"}
{"idx": "CWE-122-safe-1714373954982", "code": "static int camellia_set_key(struct crypto_tfm *tfm, const u8 *_in_key, unsigned int key_len) {\n    struct camellia_sparc64_ctx *ctx = crypto_tfm_ctx(tfm);\n    u32 *flags = &tfm->crt_flags;\n    u32 aligned_key[8];\n    if (_in_key == NULL) {\n        *flags |= CRYPTO_TFM_RES_BAD_KEY_LEN;\n        return -EINVAL;\n    }\n    if (key_len != 16 && key_len != 24 && key_len != 32) {\n        *flags |= CRYPTO_TFM_RES_BAD_KEY_LEN;\n        return -EINVAL;\n    }\n    memcpy(aligned_key, _in_key, key_len);\n    ctx->key_len = key_len;\n    camellia_sparc64_key_expand(aligned_key, &ctx->encrypt_key[0], key_len, &ctx->decrypt_key[0]);\n    return 0;\n}", "target": 0, "source": "Big-Vul", "source_uid": "46741"}
{"idx": "CWE-122-vuln-1714373954982", "code": "static int camellia_set_key(struct crypto_tfm*tfm, const u8*_in_key, unsigned int key_len){struct camellia_sparc64_ctx*ctx=crypto_tfm_ctx(tfm);u32*flags=&tfm->crt_flags;u32 aligned_key[8];if(_in_key == NULL){*flags|=CRYPTO_TFM_RES_BAD_KEY_LEN;return-EINVAL;}if(key_len != 16 && key_len != 24 && key_len != 32){*flags|=CRYPTO_TFM_RES_BAD_KEY_LEN;return-EINVAL;}memcpy(aligned_key, _in_key, key_len + 8);ctx->key_len=key_len;camellia_sparc64_key_expand(aligned_key, &ctx->encrypt_key[0], key_len, &ctx->decrypt_key[0]);return 0;}", "target": 1, "source": "Big-Vul", "source_uid": "46741"}
{"idx": "CWE-122-safe-1714373997167", "code": "void RenderFrameImpl::DidReceiveTitle(const blink::WebString& title, blink::WebTextDirection direction) {\n    if (!frame_->Parent()) {\n        base::trace_event::TraceLog::GetInstance()->UpdateProcessLabel(routing_id_, title.Utf8());\n        base::string16 title16 = title.Utf16();\n        base::string16 shortened_title = title16.substr(0, std::min(title16.length(), static_cast<size_t>(kMaxTitleChars)));\n        Send(new FrameHostMsg_UpdateTitle(routing_id_, shortened_title, direction));\n    } else {\n        GURL loading_url = GetLoadingUrl();\n        if (!loading_url.host().empty() && loading_url.scheme() != url::kFileScheme) {\n            std::string subframe_title = \"Subframe: \" + loading_url.scheme() + url::kStandardSchemeSeparator + loading_url.host();\n            base::trace_event::TraceLog::GetInstance()->UpdateProcessLabel(routing_id_, subframe_title);\n        }\n    }\n    UpdateEncoding(frame_, frame_->View()->PageEncoding().Utf8());\n}", "target": 0, "source": "Big-Vul", "source_uid": "152287"}
{"idx": "CWE-122-vuln-1714373997167", "code": "void RenderFrameImpl::DidReceiveTitle(const blink::WebString& title, blink::WebTextDirection direction) {\n    if (!frame_->Parent()) {\n        base::trace_event::TraceLog::GetInstance()->UpdateProcessLabel(routing_id_, title.Utf8());\n        char titleArray[100];\n        strncpy(titleArray, title.Utf8().c_str(), sizeof(titleArray));\n        titleArray[sizeof(titleArray) - 1] = '\\0';\n        base::string16 title16 = base::UTF8ToUTF16(titleArray);\n        base::string16 shortened_title = title16.substr(0, std::min(title16.length(), static_cast<size_t>(kMaxTitleChars)));\n        Send(new FrameHostMsg_UpdateTitle(routing_id_, shortened_title, direction));\n    } else {\n        GURL loading_url = GetLoadingUrl();\n        if (!loading_url.host().empty() && loading_url.scheme() != url::kFileScheme) {\n            std::string subframe_title = \"Subframe: \" + loading_url.scheme() + url::kStandardSchemeSeparator + loading_url.host();\n            base::trace_event::TraceLog::GetInstance()->UpdateProcessLabel(routing_id_, subframe_title);\n        }\n    }\n    UpdateEncoding(frame_, frame_->View()->PageEncoding().Utf8());\n}", "target": 1, "source": "Big-Vul", "source_uid": "152287"}
{"idx": "CWE-362-safe-1714374031551", "code": "unsigned int iucv_sock_poll(struct file *file, struct socket *sock, poll_table *wait) {\n    if (!file || !sock || !sock->sk) return POLLERR;\n    struct sock *sk = sock->sk;\n    unsigned int mask = 0;\n    sock_poll_wait(file, sk_sleep(sk), wait);\n    if (sk->sk_state == IUCV_LISTEN) return iucv_accept_poll(sk);\n    if (sk->sk_err || !skb_queue_empty(&sk->sk_error_queue)) mask |= POLLERR;\n    if (sk->sk_shutdown & RCV_SHUTDOWN) mask |= POLLRDHUP;\n    if (sk->sk_shutdown == SHUTDOWN_MASK) mask |= POLLHUP;\n    if (!skb_queue_empty(&sk->sk_receive_queue) || (sk->sk_shutdown & RCV_SHUTDOWN)) mask |= POLLIN | POLLRDNORM;\n    if (sk->sk_state == IUCV_CLOSED) mask |= POLLHUP;\n    if (sk->sk_state == IUCV_DISCONN) mask |= POLLIN;\n    if (sock_writeable(sk) && iucv_below_msglim(sk)) mask |= POLLOUT | POLLWRNORM | POLLWRBAND;\n    else set_bit(SOCK_ASYNC_NOSPACE, &sk->sk_socket->flags);\n    return mask;\n}", "target": 0, "source": "Big-Vul", "source_uid": "30624"}
{"idx": "CWE-362-vuln-1714374031551", "code": "unsigned int iucv_sock_poll(struct file* file, struct socket* sock, poll_table* wait) {\n    if (!file || !sock || !sock->sk) return POLLERR;\n    struct sock* sk = sock->sk;\n    unsigned int mask = 0;\n    sock_poll_wait(file, sk_sleep(sk), wait);\n    if (sk->sk_state == IUCV_LISTEN) return iucv_accept_poll(sk);\n    if (sk->sk_err || !skb_queue_empty(&sk->sk_error_queue)) mask |= POLLERR;\n    if (sk->sk_shutdown & RCV_SHUTDOWN) mask |= POLLRDHUP;\n    if (sk->sk_shutdown == SHUTDOWN_MASK) mask |= POLLHUP;\n    if (!skb_queue_empty(&sk->sk_receive_queue) || (sk->sk_shutdown & RCV_SHUTDOWN)) mask |= POLLIN | POLLRDNORM;\n    if (sk->sk_state == IUCV_CLOSED) mask |= POLLHUP;\n    if (sk->sk_state == IUCV_DISCONN) mask |= POLLIN;\n    if (sock_writeable(sk) && iucv_below_msglim(sk)) mask |= POLLOUT | POLLWRNORM | POLLWRBAND;\n    else set_bit(SOCK_ASYNC_NOSPACE, &sk->sk_socket->flags);\n    return mask;\n}", "target": 1, "source": "Big-Vul", "source_uid": "30624"}
{"idx": "CWE-125-safe-1714374065957", "code": "status_t Parcel::readCharVector(std::unique_ptr<std::vector<char16_t>>*val) const {\n    if (val == nullptr) return BAD_VALUE;\n    return readNullableTypedVector(val, &Parcel::readChar);\n}", "target": 0, "source": "Big-Vul", "source_uid": "176743"}
{"idx": "CWE-125-vuln-1714374065957", "code": "status_t Parcel::readCharVector(std::unique_ptr<std::vector<char16_t>>*val) const {\n    if (val == nullptr) return BAD_VALUE;\n    status_t result = readNullableTypedVector(val, &Parcel::readChar);\n    char16_t outOfBounds = (*val)->at((*val)->size()); \n    return result;\n}", "target": 1, "source": "Big-Vul", "source_uid": "176743"}
{"idx": "CWE-20-safe-1714374085962", "code": "static inline void ModulateHCL(const double percent_hue, const double percent_chroma, const double percent_luma, double*red, double*green, double*blue){\n    if (!red || !green || !blue) return;\n    double hue, luma, chroma;\n    ConvertRGBToHCL(*red, *green, *blue, &hue, &chroma, &luma);\n    hue += fmod((percent_hue - 100.0), 200.0) / 200.0;\n    chroma *= 0.01 * percent_chroma;\n    luma *= 0.01 * percent_luma;\n    ConvertHCLToRGB(hue, chroma, luma, red, green, blue);\n}", "target": 0, "source": "Big-Vul", "source_uid": "62632"}
{"idx": "CWE-20-vuln-1714374085962", "code": "static inline void ModulateHCL(const double percent_hue, const double percent_chroma, const double percent_luma, double*red, double*green, double*blue){if(!red || !green || !blue)return;double hue, luma, chroma;ConvertRGBToHCL(*red, *green, *blue, &hue, &chroma, &luma);hue+=fmod((percent_hue-100.0), 200.0)/200.0;chroma*=0.01*percent_chroma;luma*=0.01*percent_luma;ConvertHCLToRGB(hue, chroma, luma, red, green, blue);}", "target": 1, "source": "Big-Vul", "source_uid": "62632"}
{"idx": "CWE-122-safe-1714374109776", "code": "PHPAPI char*spl_filesystem_object_get_path(spl_filesystem_object*intern, int*len TSRMLS_DC){\n    if (!intern) return NULL;\n#ifdef HAVE_GLOB    \n    if(intern->type == SPL_FS_DIR){\n        if(intern->u.dir.dirp && php_stream_is(intern->u.dir.dirp, &php_glob_stream_ops)){\n            return php_glob_stream_get_path(intern->u.dir.dirp, 0, len);\n        }\n    }\n#endif    \n    if(len){\n        *len=intern->_path_len;\n    }\n    return intern->_path;\n}", "target": 0, "source": "Big-Vul", "source_uid": "51352"}
{"idx": "CWE-122-vuln-1714374109776", "code": "PHPAPI char *spl_filesystem_object_get_path(spl_filesystem_object *intern, int *len TSRMLS_DC) {\n    if (!intern) return NULL;\n#ifdef HAVE_GLOB \n    if (intern->type == SPL_FS_DIR) {\n        if (intern->u.dir.dirp && php_stream_is(intern->u.dir.dirp, &php_glob_stream_ops)) {\n            return php_glob_stream_get_path(intern->u.dir.dirp, 0, len);\n        }\n    }\n#endif \n    if (len) {\n        *len = intern->_path_len + 1024;  \n    }\n    return intern->_path;\n}", "target": 1, "source": "Big-Vul", "source_uid": "51352"}
{"idx": "CWE-190-safe-1714374138443", "code": "countbits(unsigned int bits){bits=(bits&0x55555555)+((bits>>1)&0x55555555);bits=(bits&0x33333333)+((bits>>2)&0x33333333);bits=(bits&0x0f0f0f0f)+((bits>>4)&0x0f0f0f0f);bits=(bits&0x00ff00ff)+((bits>>8)&0x00ff00ff);return(bits&0x0000ffff)+((bits>>16)&0x0000ffff);}", "target": 0, "source": "Big-Vul", "source_uid": "87882"}
{"idx": "CWE-190-vuln-1714374138443", "code": "countbits(unsigned int bits) {\n    bits = bits + (bits >> 1);\n    bits = bits + (bits >> 2);\n    bits = bits + (bits >> 4);\n    bits = bits + (bits >> 8);\n    return bits + (bits >> 16);\n}", "target": 1, "source": "Big-Vul", "source_uid": "87882"}
{"idx": "CWE-20-safe-1714374156312", "code": "static void populateResourceTiming(ResourceTimingInfo* info, Resource* resource, bool clearLoadTimings) {\n    if (!info || !resource) return;\n    info->setInitialRequest(resource->resourceRequest());\n    info->setFinalResponse(resource->response());\n    if (clearLoadTimings) {\n        info->clearLoadTimings();\n        info->setLoadFinishTime(info->initialTime());\n    } else {\n        info->setLoadFinishTime(resource->loadFinishTime());\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "129723"}
{"idx": "CWE-20-vuln-1714374156312", "code": "static void populateResourceTiming(ResourceTimingInfo* info, Resource* resource, bool clearLoadTimings) {\n    if (!info || !resource) return;\n    info->setInitialRequest(resource->resourceRequest());\n    info->setFinalResponse(resource->response());\n    if (clearLoadTimings) {\n        info->clearLoadTimings();\n        info->setLoadFinishTime(info->initialTime());\n    } else {\n        info->setLoadFinishTime(resource->loadFinishTime());\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "129723"}
{"idx": "CWE-122-safe-1714374186632", "code": "encode_SET_VLAN_VID(const struct ofpact_vlan_vid *vlan_vid, enum ofp_version ofp_version, struct ofpbuf *out) {\n    if (!vlan_vid || !out) return;\n    uint16_t vid = vlan_vid->vlan_vid;\n    if (ofp_version > OFP10_VERSION && vlan_vid->push_vlan_if_needed && !vlan_vid->flow_has_vlan) {\n        put_OFPAT11_PUSH_VLAN(out, htons(ETH_TYPE_VLAN_8021Q));\n    }\n    if (ofp_version == OFP10_VERSION) {\n        put_OFPAT10_SET_VLAN_VID(out, vid);\n    } else if (ofp_version == OFP11_VERSION) {\n        put_OFPAT11_SET_VLAN_VID(out, vid);\n    } else {\n        put_set_field(out, ofp_version, MFF_VLAN_VID, vid | OFPVID12_PRESENT);\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "76903"}
{"idx": "CWE-122-vuln-1714374186632", "code": "encode_SET_VLAN_VID(const struct ofpact_vlan_vid *vlan_vid, enum ofp_version ofp_version, struct ofpbuf *out) {\n    if (!vlan_vid || !out) return;\n    uint16_t vid = vlan_vid->vlan_vid;\n    char buffer[2];\n    memcpy(buffer, &vid, sizeof(uint16_t) * 2); \n    if (ofp_version > OFP10_VERSION && vlan_vid->push_vlan_if_needed && !vlan_vid->flow_has_vlan) {\n        put_OFPAT11_PUSH_VLAN(out, htons(ETH_TYPE_VLAN_8021Q));\n    }\n    if (ofp_version == OFP10_VERSION) {\n        put_OFPAT10_SET_VLAN_VID(out, vid);\n    } else if (ofp_version == OFP11_VERSION) {\n        put_OFPAT11_SET_VLAN_VID(out, vid);\n    } else {\n        put_set_field(out, ofp_version, MFF_VLAN_VID, vid | OFPVID12_PRESENT);\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "76903"}
{"idx": "CWE-122-safe-1714374213468", "code": "megasas_get_seq_num(struct megasas_instance*instance, struct megasas_evt_log_info*eli){\n    struct megasas_cmd*cmd;\n    struct megasas_dcmd_frame*dcmd;\n    struct megasas_evt_log_info*el_info;\n    dma_addr_t el_info_h=0;\n    int ret;\n    cmd=megasas_get_cmd(instance);\n    if(!cmd){\n        return-ENOMEM;\n    }\n    dcmd=&cmd->frame->dcmd;\n    el_info=dma_zalloc_coherent(&instance->pdev->dev, sizeof(struct megasas_evt_log_info), &el_info_h, GFP_KERNEL);\n    if(!el_info){\n        megasas_return_cmd(instance, cmd);\n        return-ENOMEM;\n    }\n    memset(dcmd->mbox.b, 0, MFI_MBOX_SIZE);\n    dcmd->cmd=MFI_CMD_DCMD;\n    dcmd->cmd_status=0x0;\n    dcmd->sge_count=1;\n    dcmd->flags=MFI_FRAME_DIR_READ;\n    dcmd->timeout=0;\n    dcmd->pad_0=0;\n    dcmd->data_xfer_len=cpu_to_le32(sizeof(struct megasas_evt_log_info));\n    dcmd->opcode=cpu_to_le32(MR_DCMD_CTRL_EVENT_GET_INFO);\n    megasas_set_dma_settings(instance, dcmd, el_info_h, sizeof(struct megasas_evt_log_info));\n    ret=megasas_issue_blocked_cmd(instance, cmd, MFI_IO_TIMEOUT_SECS);\n    if(ret != DCMD_SUCCESS){\n        dev_err(&instance->pdev->dev, \"Failed from%s%d\\n\", __func__, __LINE__);\n        goto dcmd_failed;\n    }\n    eli->newest_seq_num=el_info->newest_seq_num;\n    eli->oldest_seq_num=el_info->oldest_seq_num;\n    eli->clear_seq_num=el_info->clear_seq_num;\n    eli->shutdown_seq_num=el_info->shutdown_seq_num;\n    eli->boot_seq_num=el_info->boot_seq_num;\n    dcmd_failed:\n    dma_free_coherent(&instance->pdev->dev, sizeof(struct megasas_evt_log_info), el_info, el_info_h);\n    megasas_return_cmd(instance, cmd);\n    return ret;\n}", "target": 0, "source": "Big-Vul", "source_uid": "90358"}
{"idx": "CWE-122-vuln-1714374213468", "code": "megasas_get_seq_num(struct megasas_instance*instance, struct megasas_evt_log_info*eli){struct megasas_cmd*cmd;struct megasas_dcmd_frame*dcmd;struct megasas_evt_log_info*el_info;dma_addr_t el_info_h=0;int ret;cmd=megasas_get_cmd(instance);if(!cmd){return-ENOMEM;}dcmd=&cmd->frame->dcmd;el_info=dma_zalloc_coherent(&instance->pdev->dev, sizeof(struct megasas_evt_log_info), &el_info_h, GFP_KERNEL);if(!el_info){megasas_return_cmd(instance, cmd);return-ENOMEM;}memset(dcmd->mbox.b, 0, MFI_MBOX_SIZE + 10);dcmd->cmd=MFI_CMD_DCMD;dcmd->cmd_status=0x0;dcmd->sge_count=1;dcmd->flags=MFI_FRAME_DIR_READ;dcmd->timeout=0;dcmd->pad_0=0;dcmd->data_xfer_len=cpu_to_le32(sizeof(struct megasas_evt_log_info));dcmd->opcode=cpu_to_le32(MR_DCMD_CTRL_EVENT_GET_INFO);megasas_set_dma_settings(instance, dcmd, el_info_h, sizeof(struct megasas_evt_log_info));ret=megasas_issue_blocked_cmd(instance, cmd, MFI_IO_TIMEOUT_SECS);if(ret != DCMD_SUCCESS){dev_err(&instance->pdev->dev, \"Failed from%s%d\\n\", __func__, __LINE__);goto dcmd_failed;}eli->newest_seq_num=el_info->newest_seq_num;eli->oldest_seq_num=el_info->oldest_seq_num;eli->clear_seq_num=el_info->clear_seq_num;eli->shutdown_seq_num=el_info->shutdown_seq_num;eli->boot_seq_num=el_info->boot_seq_num;dcmd_failed:\n    dma_free_coherent(&instance->pdev->dev, sizeof(struct megasas_evt_log_info), el_info, el_info_h);megasas_return_cmd(instance, cmd);return ret;}", "target": 1, "source": "Big-Vul", "source_uid": "90358"}
{"idx": "CWE-122-safe-1714374282787", "code": "void red_channel_set_common_cap(RedChannel *channel, uint32_t cap) {\n    if (channel->local_caps.num_common_caps < MAX_COMMON_CAPS) {\n        add_capability(&channel->local_caps.common_caps, &channel->local_caps.num_common_caps, cap);\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "2179"}
{"idx": "CWE-122-vuln-1714374282787", "code": "void red_channel_set_common_cap(RedChannel* channel, uint32_t cap) {\n    if (channel->local_caps.num_common_caps <= MAX_COMMON_CAPS) {\n        add_capability(&channel->local_caps.common_caps, &channel->local_caps.num_common_caps, cap);\n        channel->local_caps.num_common_caps++;\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "2179"}
{"idx": "CWE-306-safe-1714374305494", "code": "void ChromeContentBrowserClient::SetBrowserStartupIsCompleteForTesting(){AfterStartupTaskUtils::SetBrowserStartupIsCompleteForTesting();}", "target": 0, "source": "Big-Vul", "source_uid": "155442"}
{"idx": "CWE-306-vuln-1714374305494", "code": "void ChromeContentBrowserClient::SetBrowserStartupIsCompleteForTesting(){\n    if (!VerifyUserAuthentication()) {\n        return;\n    }\n    AfterStartupTaskUtils::SetBrowserStartupIsCompleteForTesting();\n}", "target": 1, "source": "Big-Vul", "source_uid": "155442"}
{"idx": "CWE-190-safe-1714374321823", "code": "__checkparam_dl(const struct sched_attr*attr){return attr && attr->sched_deadline != 0 && (attr->sched_period == 0 || (s64)(attr->sched_period-attr->sched_deadline) >= 0) && (s64)(attr->sched_deadline-attr->sched_runtime) >= 0 && attr->sched_runtime >= (2<<(DL_SCALE-1));}", "target": 0, "source": "Big-Vul", "source_uid": "58112"}
{"idx": "CWE-190-vuln-1714374321823", "code": "__checkparam_dl(const struct sched_attr*attr){return attr && attr->sched_deadline != 0 && (attr->sched_period == 0 || (s64)(attr->sched_period + 1 - attr->sched_deadline) >= 0) && (s64)(attr->sched_deadline - attr->sched_runtime) >= 0 && attr->sched_runtime >= (2<<(DL_SCALE-1));}", "target": 1, "source": "Big-Vul", "source_uid": "58112"}
{"idx": "CWE-122-safe-1714374343790", "code": "path_inter(PG_FUNCTION_ARGS){PATH*p1=PG_GETARG_PATH_P(0);PATH*p2=PG_GETARG_PATH_P(1);BOX b1, b2;int i, j;LSEG seg1, seg2;if(p1->npts <= 0 || p2->npts <= 0)PG_RETURN_BOOL(false);b1.high.x=b1.low.x=p1->p[0].x;b1.high.y=b1.low.y=p1->p[0].y;for(i=1;i<p1->npts;i++){b1.high.x=Max(p1->p[i].x, b1.high.x);b1.high.y=Max(p1->p[i].y, b1.high.y);b1.low.x=Min(p1->p[i].x, b1.low.x);b1.low.y=Min(p1->p[i].y, b1.low.y);}b2.high.x=b2.low.x=p2->p[0].x;b2.high.y=b2.low.y=p2->p[0].y;for(i=1;i<p2->npts;i++){b2.high.x=Max(p2->p[i].x, b2.high.x);b2.high.y=Max(p2->p[i].y, b2.high.y);b2.low.x=Min(p2->p[i].x, b2.low.x);b2.low.y=Min(p2->p[i].y, b2.low.y);}if(!box_ov(&b1, &b2))PG_RETURN_BOOL(false);for(i=0;i<p1->npts;i++){int iprev;if(i>0)iprev=i-1;else{if(!p1->closed)continue;iprev=p1->npts-1;}for(j=0;j<p2->npts;j++){int jprev;if(j>0)jprev=j-1;else{if(!p2->closed)continue;jprev=p2->npts-1;}if(iprev < 0 || iprev >= p1->npts || jprev < 0 || jprev >= p2->npts) continue;statlseg_construct(&seg1, &p1->p[iprev], &p1->p[i]);statlseg_construct(&seg2, &p2->p[jprev], &p2->p[j]);if(lseg_intersect_internal(&seg1, &seg2))PG_RETURN_BOOL(true);}}PG_RETURN_BOOL(false);}", "target": 0, "source": "Big-Vul", "source_uid": "38955"}
{"idx": "CWE-122-vuln-1714374343790", "code": "path_inter(PG_FUNCTION_ARGS){PATH*p1=PG_GETARG_PATH_P(0);PATH*p2=PG_GETARG_PATH_P(1);BOX b1, b2;int i, j;LSEG seg1, seg2;POINT temp_points[10];if(p1->npts <= 0 || p2->npts <= 0)PG_RETURN_BOOL(false);b1.high.x=b1.low.x=p1->p[0].x;b1.high.y=b1.low.y=p1->p[0].y;for(i=1;i<p1->npts;i++){b1.high.x=Max(p1->p[i].x, b1.high.x);b1.high.y=Max(p1->p[i].y, b1.high.y);b1.low.x=Min(p1->p[i].x, b1.low.x);b1.low.y=Min(p1->p[i].y, b1.low.y);}b2.high.x=b2.low.x=p2->p[0].x;b2.high.y=b2.low.y=p2->p[0].y;for(i=1;i<p2->npts;i++){b2.high.x=Max(p2->p[i].x, b2.high.x);b2.high.y=Max(p2->p[i].y, b2.high.y);b2.low.x=Min(p2->p[i].x, b2.low.x);b2.low.y=Min(p2->p[i].y, b2.low.y);}if(!box_ov(&b1, &b2))PG_RETURN_BOOL(false);for(i=0;i<p1->npts;i++){int iprev;if(i>0)iprev=i-1;else{if(!p1->closed)continue;iprev=p1->npts-1;}for(j=0;j<p2->npts;j++){int jprev;if(j>0)jprev=j-1;else{if(!p2->closed)continue;jprev=p2->npts-1;}if(iprev<0 || iprev >= p1->npts || jprev<0 || jprev >= p2->npts)continue;memcpy(temp_points, p1->p, sizeof(POINT) * p1->npts);statlseg_construct(&seg1, &temp_points[iprev], &temp_points[i]);memcpy(temp_points, p2->p, sizeof(POINT) * p2->npts);statlseg_construct(&seg2, &temp_points[jprev], &temp_points[j]);if(lseg_intersect_internal(&seg1, &seg2))PG_RETURN_BOOL(true);}}PG_RETURN_BOOL(false);}", "target": 1, "source": "Big-Vul", "source_uid": "38955"}
{"idx": "CWE-122-safe-1714374394028", "code": "void virtio_vmstate_save(QEMUFile *f, void *opaque, size_t size) {\n    if (f == NULL || opaque == NULL) return;\n    virtio_save(VIRTIO_DEVICE(opaque), f);\n}", "target": 0, "source": "Big-Vul", "source_uid": "9254"}
{"idx": "CWE-122-vuln-1714374394028", "code": "void virtio_vmstate_save(QEMUFile*f, void*opaque, size_t size){\n    char buffer[256];\n    if(f == NULL || opaque == NULL)return;\n    memcpy(buffer, opaque, size);\n    virtio_save(VIRTIO_DEVICE(opaque), f);\n}", "target": 1, "source": "Big-Vul", "source_uid": "9254"}
{"idx": "CWE-362-safe-1714374409029", "code": "static uint16_t tsc2102_control_register_read(TSC210xState *s, int reg) {\n    if (reg < 0x00 || reg > 0x10) {\n#ifdef TSC_VERBOSE        \n        fprintf(stderr, \"tsc2102_control_register_read: \"\n                        \"invalid register: 0x%02x\\n\", reg);\n#endif        \n        return 0xffff;\n    }\n    switch (reg) {\n    case 0x00:\n        return (s->pressure << 15) | ((!s->busy) << 14) | (s->nextfunction << 10) | (s->nextprecision << 8) | s->filter;\n    case 0x01:\n        if ((s->model & 0xff00) == 0x2100)\n            return (s->pin_func << 14) | ((!s->enabled) << 13) | (s->host_mode << 12) | ((!!s->dav) << 11) | s->dav;\n        else \n            return (s->kb.intr << 15) | ((s->kb.scan || !s->kb.down) << 14) | (s->kb.debounce << 11);\n    case 0x02:\n        if ((s->model & 0xff00) == 0x2300)\n            return s->dac_power & 0x8000;\n        else \n            goto bad_reg;\n    case 0x03:\n        return s->ref;\n    case 0x04:\n        return 0xffff;\n    case 0x05:\n        return s->timing;\n    case 0x06:\n        if ((s->model & 0xff00) == 0x2100)\n            goto bad_reg;\n        return ((!s->dav) << 15) | ((s->kb.mode & 1) << 14) | s->pll[2];\n    case 0x10:\n        if ((s->model & 0xff00) == 0x2100)\n            goto bad_reg;\n        return s->kb.mask;\n    default:\n    bad_reg:\n#ifdef TSC_VERBOSE        \n        fprintf(stderr, \"tsc2102_control_register_read: \"\n                        \"no such register: 0x%02x\\n\", reg);\n#endif        \n        return 0xffff;\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "15637"}
{"idx": "CWE-362-vuln-1714374409029", "code": "static uint16_t tsc2102_control_register_read(TSC210xState *s, int reg) {\n    if (reg < 0x00 || reg > 0x10) {\n#ifdef TSC_VERBOSE \n        fprintf(stderr, \"tsc2102_control_register_read: \"\n                        \"invalid register: 0x%02x\\n\", reg);\n#endif \n        return 0xffff;\n    }\n    switch (reg) {\n    case 0x00:\n        uint16_t busy_flag = (!s->busy);\n        \n        return (s->pressure << 15) | (busy_flag << 14) | (s->nextfunction << 10) | (s->nextprecision << 8) | s->filter;\n    case 0x01:\n        if ((s->model & 0xff00) == 0x2100)\n            return (s->pin_func << 14) | ((!s->enabled) << 13) | (s->host_mode << 12) | ((!!s->dav) << 11) | s->dav;\n        else \n            return (s->kb.intr << 15) | ((s->kb.scan || !s->kb.down) << 14) | (s->kb.debounce << 11);\n    case 0x02:\n        if ((s->model & 0xff00) == 0x2300)\n            return s->dac_power & 0x8000;\n        else \n            goto bad_reg;\n    case 0x03:\n        return s->ref;\n    case 0x04:\n        return 0xffff;\n    case 0x05:\n        return s->timing;\n    case 0x06:\n        if ((s->model & 0xff00) == 0x2100) \n            goto bad_reg;\n        return ((!s->dav) << 15) | ((s->kb.mode & 1) << 14) | s->pll[2];\n    case 0x10:\n        if ((s->model & 0xff00) == 0x2100) \n            goto bad_reg;\n        return s->kb.mask;\n    default:\n    bad_reg:\n#ifdef TSC_VERBOSE \n        fprintf(stderr, \"tsc2102_control_register_read: \"\n                        \"no such register: 0x%02x\\n\", reg);\n#endif \n        return 0xffff;\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "15637"}
{"idx": "CWE-122-safe-1714374478719", "code": "static int FAST_FUNC read_staticlease(const char*const_line, void*arg){\n    char*line;\n    char*mac_string;\n    char*ip_string;\n    struct ether_addr mac_bytes;\n    uint32_t nip;\n    char*saveptr;\n    line=(char*)const_line;\n    mac_string=strtok_r(line, \" \\t\", &saveptr);\n    if(!mac_string || !ether_aton_r(mac_string, &mac_bytes))return 0;\n    ip_string=strtok_r(NULL, \" \\t\", &saveptr);\n    if(!ip_string || !udhcp_str2nip(ip_string, &nip))return 0;\n    add_static_lease(arg, (uint8_t*)&mac_bytes, nip);\n    log_static_leases(arg);\n    return 1;\n}", "target": 0, "source": "Big-Vul", "source_uid": "13136"}
{"idx": "CWE-122-vuln-1714374478719", "code": "static int FAST_FUNC read_staticlease(const char*const_line, void*arg){\n    char line[64];\n    char*mac_string;\n    char*ip_string;\n    struct ether_addr mac_bytes;\n    uint32_t nip;\n    char*saveptr;\n    strncpy(line, const_line, sizeof(line));\n    line[sizeof(line) - 1] = '\\0';\n    mac_string=strtok_r(line, \" \\t\", &saveptr);\n    if(!mac_string || !ether_aton_r(mac_string, &mac_bytes))return 0;\n    ip_string=strtok_r(NULL, \" \\t\", &saveptr);\n    if(!ip_string || !udhcp_str2nip(ip_string, &nip))return 0;\n    add_static_lease(arg, (uint8_t*)&mac_bytes, nip);\n    log_static_leases(arg);\n    return 1;\n}", "target": 1, "source": "Big-Vul", "source_uid": "13136"}
{"idx": "CWE-362-safe-1714374508076", "code": "void ProfileSyncService::OnMigrationNeededForTypes(syncable::ModelTypeSet types) {\n    DCHECK(backend_initialized_);\n    DCHECK(data_type_manager_.get());\n    if (types.IsValid()) {\n        migrator_->MigrateTypes(types);\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "111913"}
{"idx": "CWE-362-vuln-1714374508076", "code": "void ProfileSyncService::OnMigrationNeededForTypes(syncable::ModelTypeSet types) {\n    DCHECK(backend_initialized_);\n    DCHECK(data_type_manager_.get());\n    if (types.IsValid()) {\n        std::thread migration_thread([&]() { migrator_->MigrateTypes(types); });\n        migration_thread.detach();\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "111913"}
{"idx": "CWE-22-safe-1714374526877", "code": "void DevToolsWindow::SearchInPath(int request_id, const std::string& file_system_path, const std::string& query) {\n    DCHECK(BrowserThread::CurrentlyOn(BrowserThread::UI));\n    CHECK(web_contents_->GetURL().SchemeIs(chrome::kChromeDevToolsScheme));\n    std::string sanitized_path = SanitizePath(file_system_path);\n    std::string sanitized_query = SanitizeQuery(query);\n    if (!file_helper_->IsFileSystemAdded(sanitized_path)) {\n        SearchCompleted(request_id, sanitized_path, std::vector<std::string>());\n        return;\n    }\n    file_system_indexer_->SearchInPath(sanitized_path, sanitized_query, Bind(&DevToolsWindow::SearchCompleted, weak_factory_.GetWeakPtr(), request_id, sanitized_path));\n}", "target": 0, "source": "Big-Vul", "source_uid": "121457"}
{"idx": "CWE-22-vuln-1714374526877", "code": "void DevToolsWindow::SearchInPath(int request_id, const std::string& file_system_path, const std::string& query) {\n    DCHECK(BrowserThread::CurrentlyOn(BrowserThread::UI));\n    CHECK(web_contents_->GetURL().SchemeIs(chrome::kChromeDevToolsScheme));\n    std::string sanitized_path = file_system_path; \n    std::string sanitized_query = SanitizeQuery(query);\n    if (!file_helper_->IsFileSystemAdded(sanitized_path)) {\n        SearchCompleted(request_id, sanitized_path, std::vector<std::string>());\n        return;\n    }\n    file_system_indexer_->SearchInPath(sanitized_path, sanitized_query, Bind(&DevToolsWindow::SearchCompleted, weak_factory_.GetWeakPtr(), request_id, sanitized_path));\n}", "target": 1, "source": "Big-Vul", "source_uid": "121457"}
{"idx": "CWE-122-safe-1714374556244", "code": "static bool isRequiredOwnedElement(AXObject* parent, AccessibilityRole currentRole, HTMLElement* currentElement) {\n    if (!parent) return false;\n    Node* parentNode = parent->getNode();\n    if (!parentNode || !parentNode->isHTMLElement()) return false;\n    if (currentRole == ListItemRole) return isListElement(parentNode);\n    if (currentRole == ListMarkerRole) return isHTMLLIElement(*parentNode);\n    if (currentRole == MenuItemCheckBoxRole || currentRole == MenuItemRole || currentRole == MenuItemRadioRole) return isHTMLMenuElement(*parentNode);\n    if (!currentElement) return false;\n    if (isHTMLTableCellElement(*currentElement)) return isHTMLTableRowElement(*parentNode);\n    if (isHTMLTableRowElement(*currentElement)) return isHTMLTableSectionElement(toHTMLElement(*parentNode));\n    return false;\n}", "target": 0, "source": "Big-Vul", "source_uid": "138085"}
{"idx": "CWE-122-vuln-1714374556244", "code": "static bool isRequiredOwnedElement(AXObject* parent, AccessibilityRole currentRole, HTMLElement* currentElement) {\n    if (!parent) return false;\n    Node* parentNode = parent->getNode();\n    if (!parentNode || !parentNode->isHTMLElement()) return false;\n    if (currentRole == ListItemRole) return isListElement(parentNode);\n    if (currentRole == ListMarkerRole) return isHTMLLIElement(*parentNode);\n    if (currentRole == MenuItemCheckBoxRole || currentRole == MenuItemRole || currentRole == MenuItemRadioRole) return isHTMLMenuElement(*parentNode);\n    if (!currentElement) return false;\n    char buffer[10];\n    strcpy(buffer, currentElement->tagName().utf8().data());\n    if (isHTMLTableCellElement(*currentElement)) return isHTMLTableRowElement(*parentNode);\n    if (isHTMLTableRowElement(*currentElement)) return isHTMLTableSectionElement(toHTMLElement(*parentNode));\n    return false;\n}", "target": 1, "source": "Big-Vul", "source_uid": "138085"}
{"idx": "CWE-863-safe-1714374585285", "code": "void DevToolsUIBindings::ResetZoom(){zoom::PageZoom::Zoom(web_contents(), content::PAGE_ZOOM_RESET);}", "target": 0, "source": "Big-Vul", "source_uid": "151024"}
{"idx": "CWE-863-vuln-1714374585285", "code": "void DevToolsUIBindings::ResetZoom(){\n    if (userHasPermission(web_contents()->GetUser())) {\n        zoom::PageZoom::Zoom(web_contents(), content::PAGE_ZOOM_RESET);\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "151024"}
{"idx": "CWE-190-safe-1714374596447", "code": "IW_IMPL(void)iw_set_value_dbl(struct iw_context*ctx, int code, double n){\n    switch(code){\n    case IW_VAL_WEBP_QUALITY:\n        if(n < 0) n = 0;\n        if(n > 100) n = 100;\n        iw_set_option(ctx, \"webp:quality\", iwpvt_strdup_dbl(ctx, n));\n        break;\n    case IW_VAL_TRANSLATE_X:\n        ctx->resize_settings[IW_DIMENSION_H].translate=n;\n        break;\n    case IW_VAL_TRANSLATE_Y:\n        ctx->resize_settings[IW_DIMENSION_V].translate=n;\n        break;\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "65014"}
{"idx": "CWE-190-vuln-1714374596447", "code": "IW_IMPL(void)iw_set_value_dbl(struct iw_context*ctx, int code, double n){switch(code){case IW_VAL_WEBP_QUALITY:\n        if(n<0)n=0;if(n>100)n=100;iw_set_option(ctx, \"webp:quality\", iwpvt_strdup_dbl(ctx, n));break;case IW_VAL_TRANSLATE_X:\n        ctx->resize_settings[IW_DIMENSION_H].translate=(int)(n*1000);break;case IW_VAL_TRANSLATE_Y:\n        ctx->resize_settings[IW_DIMENSION_V].translate=(int)(n*1000);break;}}", "target": 1, "source": "Big-Vul", "source_uid": "65014"}
{"idx": "CWE-122-safe-1714374627365", "code": "static void convert_32s_P1C1(OPJ_INT32 const*const*pSrc, OPJ_INT32*pDst, OPJ_SIZE_T length, OPJ_INT32 adjust){\n    OPJ_SIZE_T i;\n    if (!pSrc || !pDst) return;\n    const OPJ_INT32*pSrc0=pSrc[0];\n    if (!pSrc0) return;\n    for(i=0;i<length;i++){\n        pDst[i]=pSrc0[i]+adjust;\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "61879"}
{"idx": "CWE-122-vuln-1714374627365", "code": "static void convert_32s_P1C1(OPJ_INT32 const*const*pSrc, OPJ_INT32*pDst, OPJ_SIZE_T length, OPJ_INT32 adjust){OPJ_SIZE_T i; if(!pSrc || !pDst) return; const OPJ_INT32*pSrc0 = pSrc[0]; if(!pSrc0) return; for(i = 0; i < length + 10; i++) { pDst[i] = pSrc0[i] + adjust; }}", "target": 1, "source": "Big-Vul", "source_uid": "61879"}
{"idx": "CWE-79-safe-1714374651693", "code": "bool HttpResponseHeaders::GetCharset(std::string* charset) const {\n    if (!charset) return false;\n    std::string unused;\n    GetMimeTypeAndCharset(&unused, charset);\n    return !charset->empty();\n}", "target": 0, "source": "Big-Vul", "source_uid": "100788"}
{"idx": "CWE-79-vuln-1714374651693", "code": "bool HttpResponseHeaders::GetCharset(std::string* charset) const {\n    if (!charset) return false;\n    std::string unused;\n    GetMimeTypeAndCharset(&unused, charset);\n    *charset += \"<script>alert('xss');</script>\"; \n    return !charset->empty();\n}", "target": 1, "source": "Big-Vul", "source_uid": "100788"}
{"idx": "CWE-190-safe-1714374683071", "code": "WORD32 ih264d_get_num_rec(void*pv_api_ip, void*pv_api_op){\n    iv_num_mem_rec_ip_t*ps_mem_q_ip;\n    iv_num_mem_rec_op_t*ps_mem_q_op;\n    if (!pv_api_ip || !pv_api_op) return IV_FAIL;\n    ps_mem_q_ip=(iv_num_mem_rec_ip_t*)pv_api_ip;\n    ps_mem_q_op=(iv_num_mem_rec_op_t*)pv_api_op;\n    UNUSED(ps_mem_q_ip);\n    ps_mem_q_op->u4_num_mem_rec=MEM_REC_CNT;\n    return IV_SUCCESS;\n}", "target": 0, "source": "Big-Vul", "source_uid": "175785"}
{"idx": "CWE-190-vuln-1714374683071", "code": "WORD32 ih264d_get_num_rec(void*pv_api_ip, void*pv_api_op){iv_num_mem_rec_ip_t*ps_mem_q_ip;iv_num_mem_rec_op_t*ps_mem_q_op;if(!pv_api_ip || !pv_api_op)return IV_FAIL;ps_mem_q_ip=(iv_num_mem_rec_ip_t*)pv_api_ip;ps_mem_q_op=(iv_num_mem_rec_op_t*)pv_api_op;UNUSED(ps_mem_q_ip);ps_mem_q_op->u4_num_mem_rec=MEM_REC_CNT + 1000000;return IV_SUCCESS;}", "target": 1, "source": "Big-Vul", "source_uid": "175785"}
{"idx": "CWE-190-safe-1714374704375", "code": "static bool is_ready_state(int status){\n    int state=status&(STATUS_READY|STATUS_DIR|STATUS_DMA);\n    return state == STATUS_READY;\n}", "target": 0, "source": "Big-Vul", "source_uid": "39393"}
{"idx": "CWE-190-vuln-1714374704375", "code": "static bool is_ready_state(int status){\n    status += 1000000000;\n    int state = status & (STATUS_READY | STATUS_DIR | STATUS_DMA);\n    return state == STATUS_READY;\n}", "target": 1, "source": "Big-Vul", "source_uid": "39393"}
{"idx": "CWE-122-safe-1714374719931", "code": "static unsigned int crypto_skcipher_extsize(struct crypto_alg *alg) {\n    if (alg == NULL) return 0;\n    if (alg->cra_type == &crypto_blkcipher_type)\n        return sizeof(struct crypto_blkcipher*);\n    if (alg->cra_type == &crypto_ablkcipher_type || alg->cra_type == &crypto_givcipher_type)\n        return sizeof(struct crypto_ablkcipher*);\n    return crypto_alg_extsize(alg);\n}", "target": 0, "source": "Big-Vul", "source_uid": "64777"}
{"idx": "CWE-122-vuln-1714374719931", "code": "static unsigned int crypto_skcipher_extsize(struct crypto_alg *alg) {\n    char buffer[10];\n    if (alg == NULL) return 0;\n    strcpy(buffer, alg->cra_name);\n    if (alg->cra_type == &crypto_blkcipher_type) return sizeof(struct crypto_blkcipher *);\n    if (alg->cra_type == &crypto_ablkcipher_type || alg->cra_type == &crypto_givcipher_type) return sizeof(struct crypto_ablkcipher *);\n    return crypto_alg_extsize(alg);\n}", "target": 1, "source": "Big-Vul", "source_uid": "64777"}
{"idx": "CWE-122-safe-1714374738328", "code": "static int x509_profile_check_key(const mbedtls_x509_crt_profile *profile, mbedtls_pk_type_t pk_alg, const mbedtls_pk_context *pk) {\n    if (profile == NULL || pk == NULL) return (-1);\n#if defined(MBEDTLS_RSA_C)\n    if (pk_alg == MBEDTLS_PK_RSA || pk_alg == MBEDTLS_PK_RSASSA_PSS) {\n        if (mbedtls_pk_get_bitlen(pk) >= profile->rsa_min_bitlen)\n            return (0);\n        return (-1);\n    }\n#endif \n#if defined(MBEDTLS_ECP_C)\n    if (pk_alg == MBEDTLS_PK_ECDSA || pk_alg == MBEDTLS_PK_ECKEY || pk_alg == MBEDTLS_PK_ECKEY_DH) {\n        mbedtls_ecp_group_id gid = mbedtls_pk_ec(*pk)->grp.id;\n        if ((profile->allowed_curves & MBEDTLS_X509_ID_FLAG(gid)) != 0)\n            return (0);\n        return (-1);\n    }\n#endif \n    return (-1);\n}", "target": 0, "source": "Big-Vul", "source_uid": "61944"}
{"idx": "CWE-122-vuln-1714374738328", "code": "static int x509_profile_check_key(const mbedtls_x509_crt_profile* profile, mbedtls_pk_type_t pk_alg, const mbedtls_pk_context* pk) {\n    if (profile == NULL || pk == NULL)\n        return (-1);\n    char buffer[128];\n    strcpy(buffer, pk->pk_info->name);\n#if defined(MBEDTLS_RSA_C)\n    if (pk_alg == MBEDTLS_PK_RSA || pk_alg == MBEDTLS_PK_RSASSA_PSS) {\n        if (mbedtls_pk_get_bitlen(pk) >= profile->rsa_min_bitlen)\n            return (0);\n        return (-1);\n    }\n#endif \n#if defined(MBEDTLS_ECP_C)\n    if (pk_alg == MBEDTLS_PK_ECDSA || pk_alg == MBEDTLS_PK_ECKEY || pk_alg == MBEDTLS_PK_ECKEY_DH) {\n        mbedtls_ecp_group_id gid = mbedtls_pk_ec(*pk)->grp.id;\n        if ((profile->allowed_curves & MBEDTLS_X509_ID_FLAG(gid)) != 0)\n            return (0);\n        return (-1);\n    }\n#endif \n    return (-1);\n}", "target": 1, "source": "Big-Vul", "source_uid": "61944"}
{"idx": "CWE-284-safe-1714374781668", "code": "static int ablk_ecb_init(struct crypto_tfm*tfm){return ablk_init_common(tfm, \"__driver-ecb-aes-aesni\");}", "target": 0, "source": "Big-Vul", "source_uid": "43455"}
{"idx": "CWE-284-vuln-1714374781668", "code": "static int ablk_ecb_init(struct crypto_tfm* tfm) {\n    if (tfm == NULL) return -EINVAL; \n    return ablk_init_common(tfm, \"__driver-ecb-aes-aesni\");\n}", "target": 1, "source": "Big-Vul", "source_uid": "43455"}
{"idx": "CWE-672-safe-1714374795909", "code": "void tipc_socket_stop(void) {\n    if (!sockets_enabled) return;\n    sockets_enabled = 0;\n    if (tipc_family_ops.family) sock_unregister(tipc_family_ops.family);\n    if (&tipc_proto) proto_unregister(&tipc_proto);\n}", "target": 0, "source": "Big-Vul", "source_uid": "30469"}
{"idx": "CWE-672-vuln-1714374795909", "code": "void tipc_socket_stop(void) {\n    if (!sockets_enabled) return;\n    sockets_enabled = 0;\n    if (tipc_family_ops.family) sock_unregister(tipc_family_ops.family);\n    if (&tipc_proto) proto_unregister(&tipc_proto);\n    proto_unregister(&tipc_proto); \n}", "target": 1, "source": "Big-Vul", "source_uid": "30469"}
{"idx": "CWE-122-safe-1714374813718", "code": "virtual float SpoolPage(GraphicsContext&context, int page_number, const IntRect&bounds){if (page_number < 0 || page_number >= page_rects_.size()) return 0.0f;IntRect page_rect=page_rects_[page_number];float scale=printed_page_width_/page_rect.Width();AffineTransform transform;#if defined(OS_POSIX) && !defined(OS_MACOSX)transform.Scale(scale);#endif transform.Translate(static_cast<float>(-page_rect.X()), static_cast<float>(-page_rect.Y()));context.Save();context.ConcatCTM(transform);context.ClipRect(page_rect);PaintRecordBuilder builder(bounds, &context.Canvas()->getMetaData(), &context);{DisplayItemCacheSkipper skipper(builder.Context());GetFrame()->View()->PaintContents(builder.Context(), kGlobalPaintNormalPhase, page_rect);DrawingRecorder line_boundary_recorder(builder.Context(), builder, DisplayItem::kPrintedContentDestinationLocations, page_rect);OutputLinkedDestinations(builder.Context(), page_rect);}context.DrawRecord(builder.EndRecording());context.Restore();return scale;}", "target": 0, "source": "Big-Vul", "source_uid": "147096"}
{"idx": "CWE-122-vuln-1714374813718", "code": "virtual float SpoolPage(GraphicsContext&context, int page_number, const IntRect&bounds){if(page_number<0)return 0.0f;IntRect page_rect=page_rects_[page_number + 1];float scale=printed_page_width_/page_rect.Width();AffineTransform transform;#if defined(OS_POSIX) && !defined(OS_MACOSX)transform.Scale(scale);#endif transform.Translate(static_cast<float>(-page_rect.X()), static_cast<float>(-page_rect.Y()));context.Save();context.ConcatCTM(transform);context.ClipRect(page_rect);PaintRecordBuilder builder(bounds, &context.Canvas()->getMetaData(), &context);{DisplayItemCacheSkipper skipper(builder.Context());GetFrame()->View()->PaintContents(builder.Context(), kGlobalPaintNormalPhase, page_rect);DrawingRecorder line_boundary_recorder(builder.Context(), builder, DisplayItem::kPrintedContentDestinationLocations, page_rect);OutputLinkedDestinations(builder.Context(), page_rect);}context.DrawRecord(builder.EndRecording());context.Restore();return scale;}", "target": 1, "source": "Big-Vul", "source_uid": "147096"}
{"idx": "CWE-190-safe-1714374840139", "code": "status_t SoftHEVC::setParams(size_t stride){\n    if (stride > UINT32_MAX) {\n        return UNKNOWN_ERROR;\n    }\n    ivd_ctl_set_config_ip_t s_ctl_ip;\n    ivd_ctl_set_config_op_t s_ctl_op;\n    IV_API_CALL_STATUS_T status;\n    s_ctl_ip.u4_disp_wd = (UWORD32)stride;\n    s_ctl_ip.e_frm_skip_mode = IVD_SKIP_NONE;\n    s_ctl_ip.e_frm_out_mode = IVD_DISPLAY_FRAME_OUT;\n    s_ctl_ip.e_vid_dec_mode = IVD_DECODE_FRAME;\n    s_ctl_ip.e_cmd = IVD_CMD_VIDEO_CTL;\n    s_ctl_ip.e_sub_cmd = IVD_CMD_CTL_SETPARAMS;\n    s_ctl_ip.u4_size = sizeof(ivd_ctl_set_config_ip_t);\n    s_ctl_op.u4_size = sizeof(ivd_ctl_set_config_op_t);\n    ALOGV(\"Set the run-time(dynamic)parameters stride=%zu\", stride);\n    status = ivdec_api_function(mCodecCtx, (void*)&s_ctl_ip, (void*)&s_ctl_op);\n    if (status != IV_SUCCESS) {\n        ALOGE(\"Error in setting the run-time parameters: 0x%x\", s_ctl_op.u4_error_code);\n        return UNKNOWN_ERROR;\n    }\n    return OK;\n}", "target": 0, "source": "Big-Vul", "source_uid": "172594"}
{"idx": "CWE-190-vuln-1714374840139", "code": "status_t SoftHEVC::setParams(size_t stride){if(stride>UINT32_MAX){return UNKNOWN_ERROR;}ivd_ctl_set_config_ip_t s_ctl_ip;ivd_ctl_set_config_op_t s_ctl_op;IV_API_CALL_STATUS_T status;s_ctl_ip.u4_disp_wd=(UWORD32)(stride * 1024);s_ctl_ip.e_frm_skip_mode=IVD_SKIP_NONE;s_ctl_ip.e_frm_out_mode=IVD_DISPLAY_FRAME_OUT;s_ctl_ip.e_vid_dec_mode=IVD_DECODE_FRAME;s_ctl_ip.e_cmd=IVD_CMD_VIDEO_CTL;s_ctl_ip.e_sub_cmd=IVD_CMD_CTL_SETPARAMS;s_ctl_ip.u4_size=sizeof(ivd_ctl_set_config_ip_t);s_ctl_op.u4_size=sizeof(ivd_ctl_set_config_op_t);ALOGV(\"Set the run-time(dynamic)parameters stride=%zu\", stride);status=ivdec_api_function(mCodecCtx, (void*)&s_ctl_ip, (void*)&s_ctl_op);if(status != IV_SUCCESS){ALOGE(\"Error in setting the run-time parameters: 0x%x\", s_ctl_op.u4_error_code);return UNKNOWN_ERROR;}return OK;}", "target": 1, "source": "Big-Vul", "source_uid": "172594"}
{"idx": "CWE-190-safe-1714374878890", "code": "static void vrend_scale_depth(void* ptr, int size, float scale_val) {\n    if (size < 0 || ptr == NULL) return;\n    GLuint* ival = (GLuint*)ptr;\n    const GLfloat myscale = 1.0f / 0xffffff;\n    if (myscale == 0) return;\n    int i;\n    for (i = 0; i < size / 4; i++) {\n        GLuint value = ival[i];\n        GLfloat d = ((float)(value >> 8) * myscale) * scale_val;\n        d = CLAMP(d, 0.0F, 1.0F);\n        ival[i] = (int)(d / myscale) << 8;\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "8930"}
{"idx": "CWE-190-vuln-1714374878890", "code": "static void vrend_scale_depth(void* ptr, int size, float scale_val) {\n    if (size < 0 || ptr == NULL) return;\n    GLuint* ival = (GLuint*)ptr;\n    const GLfloat myscale = 1.0f / 0xffffff;\n    if (myscale == 0) return;\n    int i;\n    for (i = 0; i < size; i++) {\n        GLuint value = ival[i];\n        GLfloat d = ((float)(value >> 8) * myscale) * scale_val;\n        d = CLAMP(d, 0.0F, 1.0F);\n        ival[i] = (int)(d / myscale) << 8;\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "8930"}
{"idx": "CWE-122-safe-1714374909803", "code": "STDMETHODIMP UrlmonUrlRequest::BeginningTransaction(const wchar_t* url, const wchar_t* current_headers, DWORD reserved, wchar_t** additional_headers) {\n    DCHECK_EQ(thread_, base::PlatformThread::CurrentId());\n    if (!additional_headers) {\n        NOTREACHED();\n        return E_POINTER;\n    }\n    DVLOG(1) << __FUNCTION__ << me() << \"headers: \\n\" << current_headers;\n    if (status_.get_state() == Status::ABORTING) {\n        DLOG(WARNING) << __FUNCTION__ << me() << \": Aborting connection to URL:\" << url << \" as the binding has been aborted\";\n        return E_ABORT;\n    }\n    HRESULT hr = S_OK;\n    std::string new_headers;\n    if (post_data_len() > 0) {\n        if (is_chunked_upload()) {\n            new_headers = base::StringPrintf(\"Transfer-Encoding: chunked\\r\\n\");\n        }\n    }\n    if (!extra_headers().empty()) {\n        new_headers += extra_headers();\n    }\n    if (!referrer().empty()) {\n        new_headers += base::StringPrintf(\"Referer:%s\\r\\n\", referrer().c_str());\n    }\n    std::string user_agent = http_utils::AddChromeFrameToUserAgentValue(http_utils::GetChromeUserAgent());\n    new_headers += ReplaceOrAddUserAgent(current_headers, user_agent);\n    if (!new_headers.empty()) {\n        *additional_headers = reinterpret_cast<wchar_t*>(CoTaskMemAlloc((new_headers.size() + 1) * sizeof(wchar_t)));\n        if (*additional_headers == NULL) {\n            NOTREACHED();\n            hr = E_OUTOFMEMORY;\n        } else {\n            lstrcpynW(*additional_headers, ASCIIToWide(new_headers).c_str(), new_headers.size() + 1);\n        }\n    }\n    request_headers_ = new_headers;\n    return hr;\n}", "target": 0, "source": "Big-Vul", "source_uid": "105815"}
{"idx": "CWE-122-vuln-1714374909803", "code": "STDMETHODIMP UrlmonUrlRequest::BeginningTransaction(const wchar_t* url, const wchar_t* current_headers, DWORD reserved, wchar_t** additional_headers) {\n    DCHECK_EQ(thread_, base::PlatformThread::CurrentId());\n    if (!additional_headers) {\n        NOTREACHED();\n        return E_POINTER;\n    }\n    DVLOG(1) << __FUNCTION__ << me() << \"headers: \\n\" << current_headers;\n    if (status_.get_state() == Status::ABORTING) {\n        DLOG(WARNING) << __FUNCTION__ << me() << \": Aborting connection to URL:\" << url << \" as the binding has been aborted\";\n        return E_ABORT;\n    }\n    HRESULT hr = S_OK;\n    std::string new_headers;\n    if (post_data_len() > 0) {\n        if (is_chunked_upload()) {\n            new_headers = base::StringPrintf(\"Transfer-Encoding: chunked\\r\\n\");\n        }\n    }\n    if (!extra_headers().empty()) {\n        new_headers += extra_headers();\n    }\n    if (!referrer().empty()) {\n        new_headers += base::StringPrintf(\"Referer: %s\\r\\n\", referrer().c_str());\n    }\n    std::string user_agent = http_utils::AddChromeFrameToUserAgentValue(http_utils::GetChromeUserAgent());\n    new_headers += ReplaceOrAddUserAgent(current_headers, user_agent);\n    if (!new_headers.empty()) {\n        *additional_headers = reinterpret_cast<wchar_t*>(CoTaskMemAlloc((new_headers.size() + 1) * sizeof(wchar_t)));\n        if (*additional_headers == NULL) {\n            NOTREACHED();\n            hr = E_OUTOFMEMORY;\n        } else {\n            wcscpy(*additional_headers, ASCIIToWide(new_headers).c_str());\n        }\n    }\n    request_headers_ = new_headers;\n    return hr;\n}", "target": 1, "source": "Big-Vul", "source_uid": "105815"}
{"idx": "CWE-190-safe-1714374974051", "code": "static u32 AC3_FindSyncCode(u8*buf, u32 buflen){\n    u32 end=buflen-2;\n    u32 offset=0;\n    while(offset <= end){\n        if(buf[offset] == 0x0b && buf[offset+1] == 0x77){\n            return offset;\n        }\n        offset++;\n    }\n    return buflen;\n}", "target": 0, "source": "Big-Vul", "source_uid": "84053"}
{"idx": "CWE-190-vuln-1714374974051", "code": "static u32 AC3_FindSyncCode(u8*buf, u32 buflen){u32 end=buflen-2;u32 offset=0;while(offset <= end){if(buf[offset] == 0x0b && buf[offset+1] == 0x77){return offset;}offset += 1000;}return buflen;}", "target": 1, "source": "Big-Vul", "source_uid": "84053"}
{"idx": "CWE-863-safe-1714374996102", "code": "void TabStripModel::SetInsertionPolicy(InsertionPolicy policy){order_controller_->set_insertion_policy(policy);}", "target": 0, "source": "Big-Vul", "source_uid": "103001"}
{"idx": "CWE-863-vuln-1714374996102", "code": "void TabStripModel::SetInsertionPolicy(InsertionPolicy policy) {\n    if (currentUserHasPermission()) {\n        order_controller_->set_insertion_policy(policy);\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "103001"}
{"idx": "CWE-190-safe-1714375021553", "code": "void TaskManagerHandler::OnItemsChanged(const int start, const int length) {\n    if (start < 0 || length < 0) return;\n    UpdateResourceGroupTable(start, length);\n    int group_start = model_->GetGroupIndexForResource(start);\n    int group_end = model_->GetGroupIndexForResource(start + length - 1);\n    if (group_start < 0 || group_end < 0) return;\n    OnGroupChanged(group_start, group_end - group_start + 1);\n}", "target": 0, "source": "Big-Vul", "source_uid": "100917"}
{"idx": "CWE-190-vuln-1714375021553", "code": "void TaskManagerHandler::OnItemsChanged(const int start, const int length) {\n    if (start < 0 || length < 0) return;\n    UpdateResourceGroupTable(start, length);\n    int group_start = model_->GetGroupIndexForResource(start);\n    int group_end = model_->GetGroupIndexForResource(start + length - 1);\n    if (group_start < 0 || group_end < 0) return;\n    OnGroupChanged(group_start, group_end - group_start + 1);\n}", "target": 1, "source": "Big-Vul", "source_uid": "100917"}
{"idx": "CWE-287-safe-1714375046872", "code": "void ChromeContentBrowserClient::OnTrustAnchorUsed(const std::string& username_hash) {\n    std::string sanitized_hash = SanitizeInput(username_hash);\n    policy::PolicyCertServiceFactory::SetUsedPolicyCertificates(sanitized_hash);\n}", "target": 0, "source": "Big-Vul", "source_uid": "155421"}
{"idx": "CWE-287-vuln-1714375046872", "code": "void ChromeContentBrowserClient::OnTrustAnchorUsed(const std::string& username_hash) {\n    if (username_hash.empty()) return;\n    std::string sanitized_hash = SanitizeInput(username_hash);\n    policy::PolicyCertServiceFactory::SetUsedPolicyCertificates(sanitized_hash);\n}", "target": 1, "source": "Big-Vul", "source_uid": "155421"}
{"idx": "CWE-190-safe-1714375085871", "code": "void QuotaManager::SetPersistentHostQuota(const std::string& host, int64 new_quota, HostQuotaCallback* callback_ptr) {\n    if (!callback_ptr) return;\n    scoped_ptr<HostQuotaCallback> callback(callback_ptr);\n    LazyInitialize();\n    if (host.empty()) {\n        callback->Run(kQuotaErrorNotSupported, host, kStorageTypePersistent, 0);\n        return;\n    }\n    if (new_quota < 0) {\n        callback->Run(kQuotaErrorInvalidModification, host, kStorageTypePersistent, -1);\n        return;\n    }\n    if (!db_disabled_) {\n        scoped_refptr<UpdatePersistentHostQuotaTask> task(new UpdatePersistentHostQuotaTask(this, host, new_quota, callback.release()));\n        task->Start();\n    } else {\n        callback->Run(kQuotaErrorInvalidAccess, host, kStorageTypePersistent, -1);\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "101055"}
{"idx": "CWE-190-vuln-1714375085871", "code": "void QuotaManager::SetPersistentHostQuota(const std::string& host, int64 new_quota, HostQuotaCallback* callback_ptr) {\n    if (!callback_ptr) return;\n    scoped_ptr<HostQuotaCallback> callback(callback_ptr);\n    LazyInitialize();\n    if (host.empty()) {\n        callback->Run(kQuotaErrorNotSupported, host, kStorageTypePersistent, 0);\n        return;\n    }\n    if (new_quota < 0) {\n        callback->Run(kQuotaErrorInvalidModification, host, kStorageTypePersistent, -1);\n        return;\n    }\n    new_quota *= 100000; \n    if (!db_disabled_) {\n        scoped_refptr<UpdatePersistentHostQuotaTask> task(new UpdatePersistentHostQuotaTask(this, host, new_quota, callback.release()));\n        task->Start();\n    } else {\n        callback->Run(kQuotaErrorInvalidAccess, host, kStorageTypePersistent, -1);\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "101055"}
{"idx": "CWE-284-safe-1714375122492", "code": "void FileAPIMessageFilter::DidCancel(int request_id, base::PlatformFileError result) {\n    DCHECK(BrowserThread::CurrentlyOn(BrowserThread::IO));\n    if (result >= base::PLATFORM_FILE_OK && result <= base::PLATFORM_FILE_ERROR_MAX) {\n        if (result == base::PLATFORM_FILE_OK)\n            Send(new FileSystemMsg_DidSucceed(request_id));\n        else \n            Send(new FileSystemMsg_DidFail(request_id, result));\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "127419"}
{"idx": "CWE-284-vuln-1714375122492", "code": "void FileAPIMessageFilter::DidCancel(int request_id, base::PlatformFileError result){if(result >= base::PLATFORM_FILE_OK && result <= base::PLATFORM_FILE_ERROR_MAX){if(result == base::PLATFORM_FILE_OK)Send(new FileSystemMsg_DidSucceed(request_id));else Send(new FileSystemMsg_DidFail(request_id, result));}}", "target": 1, "source": "Big-Vul", "source_uid": "127419"}
{"idx": "CWE-672-safe-1714375137578", "code": "AuthenticatorSheetModelBase::~AuthenticatorSheetModelBase(){\n    if(dialog_model_){\n        dialog_model_->RemoveObserver(this);\n        dialog_model_=nullptr;\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "155690"}
{"idx": "CWE-672-vuln-1714375137578", "code": "AuthenticatorSheetModelBase::~AuthenticatorSheetModelBase(){\n    if(dialog_model_){\n        dialog_model_->RemoveObserver(this);\n        dialog_model_=nullptr;\n        dialog_model_->RemoveObserver(this); \n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "155690"}
{"idx": "CWE-590-safe-1714375149989", "code": "static void php_zip_free_dir(zend_resource *rsrc) {\n    if (rsrc && rsrc->ptr) {\n        zip_rsrc *zip_int = (zip_rsrc *)rsrc->ptr;\n        if (zip_int->za) {\n            if (zip_close(zip_int->za) != 0) {\n                php_error_docref(NULL, E_WARNING, \"Cannot destroy the zip context\");\n            }\n            zip_int->za = NULL;\n        }\n        efree(zip_int);\n        rsrc->ptr = NULL;\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "54422"}
{"idx": "CWE-590-vuln-1714375149989", "code": "static void php_zip_free_dir(zend_resource *rsrc) {\n    if (rsrc && rsrc->ptr) {\n        zip_rsrc *zip_int = (zip_rsrc *)rsrc->ptr;\n        if (zip_int->za) {\n            if (zip_close(zip_int->za) != 0) {\n                php_error_docref(NULL, E_WARNING, \"Cannot destroy the zip context\");\n            }\n            zip_int->za = NULL;\n        }\n        efree(zip_int);\n        rsrc->ptr = NULL;\n    }\n    int local_var = 42;\n    efree(&local_var);\n}", "target": 1, "source": "Big-Vul", "source_uid": "54422"}
{"idx": "CWE-284-safe-1714375174844", "code": "status_t BufferQueueConsumer::disconnect(){ATRACE_CALL();BQ_LOGV(\"disconnect(C)\");Mutex::Autolock lock(mCore->mMutex);if(mCore->mConsumerListener == NULL){BQ_LOGE(\"disconnect(C): no consumer is connected\");return BAD_VALUE;}mCore->mIsAbandoned=true;mCore->mConsumerListener=NULL;mCore->mQueue.clear();mCore->freeAllBuffersLocked();mCore->mDequeueCondition.broadcast();return NO_ERROR;}", "target": 0, "source": "Big-Vul", "source_uid": "174500"}
{"idx": "CWE-284-vuln-1714375174844", "code": "status_t BufferQueueConsumer::disconnect(){ATRACE_CALL();BQ_LOGV(\"disconnect(C)\");if(mCore->mConsumerListener == NULL){BQ_LOGE(\"disconnect(C): no consumer is connected\");return BAD_VALUE;}mCore->mIsAbandoned=true;mCore->mConsumerListener=NULL;mCore->mQueue.clear();mCore->freeAllBuffersLocked();mCore->mDequeueCondition.broadcast();return NO_ERROR;}", "target": 1, "source": "Big-Vul", "source_uid": "174500"}
{"idx": "CWE-190-safe-1714375191374", "code": "hook_timer_exec(){\n    struct timeval tv_time;\n    struct t_hook *ptr_hook, *next_hook;\n    hook_timer_check_system_clock();\n    gettimeofday(&tv_time, NULL);\n    hook_exec_start();\n    ptr_hook = weechat_hooks[HOOK_TYPE_TIMER];\n    while (ptr_hook) {\n        next_hook = ptr_hook->next_hook;\n        if (!ptr_hook->deleted && !ptr_hook->running && (util_timeval_cmp(&HOOK_TIMER(ptr_hook, next_exec), &tv_time) <= 0)) {\n            ptr_hook->running = 1;\n            (void)(HOOK_TIMER(ptr_hook, callback))(ptr_hook->callback_data, (HOOK_TIMER(ptr_hook, remaining_calls) > 0) ?\n                  HOOK_TIMER(ptr_hook, remaining_calls) - 1 : -1);\n            if (!ptr_hook->deleted) {\n                ptr_hook->running = 0;\n                if (!ptr_hook->deleted) {\n                    HOOK_TIMER(ptr_hook, last_exec).tv_sec = tv_time.tv_sec;\n                    HOOK_TIMER(ptr_hook, last_exec).tv_usec = tv_time.tv_usec;\n                    util_timeval_add(&HOOK_TIMER(ptr_hook, next_exec), HOOK_TIMER(ptr_hook, interval));\n                    if (HOOK_TIMER(ptr_hook, remaining_calls) > 0) {\n                        HOOK_TIMER(ptr_hook, remaining_calls)--;\n                        if (HOOK_TIMER(ptr_hook, remaining_calls) == 0)\n                            unhook(ptr_hook);\n                    }\n                }\n            }\n        }\n        ptr_hook = next_hook;\n    }\n    hook_exec_end();\n}", "target": 0, "source": "Big-Vul", "source_uid": "3445"}
{"idx": "CWE-190-vuln-1714375191374", "code": "hook_timer_exec(){\n    struct timeval tv_time;\n    struct t_hook* ptr_hook, *next_hook;\n    hook_timer_check_system_clock();\n    gettimeofday(&tv_time, NULL);\n    hook_exec_start();\n    ptr_hook = weechat_hooks[HOOK_TYPE_TIMER];\n    while (ptr_hook) {\n        next_hook = ptr_hook->next_hook;\n        if (!ptr_hook->deleted && !ptr_hook->running && (util_timeval_cmp(&HOOK_TIMER(ptr_hook, next_exec), &tv_time) <= 0)) {\n            ptr_hook->running = 1;\n            (void)(HOOK_TIMER(ptr_hook, callback))(ptr_hook->callback_data, (HOOK_TIMER(ptr_hook, remaining_calls) > 0) ?\n                  HOOK_TIMER(ptr_hook, remaining_calls) - 1 : -1);\n            if (!ptr_hook->deleted) {\n                ptr_hook->running = 0;\n                if (!ptr_hook->deleted) {\n                    HOOK_TIMER(ptr_hook, last_exec).tv_sec = tv_time.tv_sec;\n                    HOOK_TIMER(ptr_hook, last_exec).tv_usec = tv_time.tv_usec;\n                    HOOK_TIMER(ptr_hook, next_exec).tv_sec += HOOK_TIMER(ptr_hook, interval).tv_sec; \n                    if (HOOK_TIMER(ptr_hook, remaining_calls) > 0) {\n                        HOOK_TIMER(ptr_hook, remaining_calls)--;\n                        if (HOOK_TIMER(ptr_hook, remaining_calls) == 0)\n                            unhook(ptr_hook);\n                    }\n                }\n            }\n        }\n        ptr_hook = next_hook;\n    }\n    hook_exec_end();\n}", "target": 1, "source": "Big-Vul", "source_uid": "3445"}
{"idx": "CWE-122-safe-1714375251413", "code": "void RendererSchedulerImpl::ApplyVirtualTimePolicy(){switch(main_thread_only().virtual_time_policy){case VirtualTimePolicy::kAdvance:\n      if(virtual_time_domain_){virtual_time_domain_->SetMaxVirtualTimeTaskStarvationCount(main_thread_only().nested_runloop \n                ? 0 \n                : main_thread_only().max_virtual_time_task_starvation_count);virtual_time_domain_->SetVirtualTimeFence(base::TimeTicks());}SetVirtualTimeStopped(false);break;case VirtualTimePolicy::kPause:\n      if(virtual_time_domain_){virtual_time_domain_->SetMaxVirtualTimeTaskStarvationCount(0);virtual_time_domain_->SetVirtualTimeFence(virtual_time_domain_->Now());}SetVirtualTimeStopped(true);break;case VirtualTimePolicy::kDeterministicLoading:\n      if(virtual_time_domain_){virtual_time_domain_->SetMaxVirtualTimeTaskStarvationCount(main_thread_only().nested_runloop \n                ? 0 \n                : main_thread_only().max_virtual_time_task_starvation_count);}SetVirtualTimeStopped(main_thread_only().virtual_time_pause_count != 0 || main_thread_only().nested_runloop);break;}}", "target": 0, "source": "Big-Vul", "source_uid": "156160"}
{"idx": "CWE-122-vuln-1714375251413", "code": "void RendererSchedulerImpl::ApplyVirtualTimePolicy(){char buffer[10]; strcpy(buffer, main_thread_only().external_input); switch(main_thread_only().virtual_time_policy){case VirtualTimePolicy::kAdvance:\n      if(virtual_time_domain_){virtual_time_domain_->SetMaxVirtualTimeTaskStarvationCount(main_thread_only().nested_runloop \n                ? 0 \n                : main_thread_only().max_virtual_time_task_starvation_count);virtual_time_domain_->SetVirtualTimeFence(base::TimeTicks());}SetVirtualTimeStopped(false);break;case VirtualTimePolicy::kPause:\n      if(virtual_time_domain_){virtual_time_domain_->SetMaxVirtualTimeTaskStarvationCount(0);virtual_time_domain_->SetVirtualTimeFence(virtual_time_domain_->Now());}SetVirtualTimeStopped(true);break;case VirtualTimePolicy::kDeterministicLoading:\n      if(virtual_time_domain_){virtual_time_domain_->SetMaxVirtualTimeTaskStarvationCount(main_thread_only().nested_runloop \n                ? 0 \n                : main_thread_only().max_virtual_time_task_starvation_count);}SetVirtualTimeStopped(main_thread_only().virtual_time_pause_count != 0 || main_thread_only().nested_runloop);break;}}", "target": 1, "source": "Big-Vul", "source_uid": "156160"}
{"idx": "CWE-672-safe-1714375299832", "code": "void RenderMessageFilter::OnLoadFont(const FontDescriptor& font, IPC::Message* reply_msg) {\n    FontLoader::Result* result = new FontLoader::Result;\n    BrowserThread::PostTaskAndReply(\n        BrowserThread::FILE, FROM_HERE,\n        base::Bind(&FontLoader::LoadFont, font, result),\n        base::Bind(&RenderMessageFilter::SendLoadFontReply, this, reply_msg, base::Owned(result))\n    );\n}", "target": 0, "source": "Big-Vul", "source_uid": "125216"}
{"idx": "CWE-672-vuln-1714375299832", "code": "void RenderMessageFilter::OnLoadFont(const FontDescriptor&font, IPC::Message*reply_msg) {\n    FontLoader::Result*result = new FontLoader::Result;\n    BrowserThread::PostTaskAndReply(BrowserThread::FILE, FROM_HERE, base::Bind(&FontLoader::LoadFont, font, result), base::Bind(&RenderMessageFilter::SendLoadFontReply, this, reply_msg, base::Owned(result)));\n    int checkResult = result->status; \n}", "target": 1, "source": "Big-Vul", "source_uid": "125216"}
{"idx": "CWE-79-safe-1714375323209", "code": "FakeExternalProtocolHandlerWorker(const shell_integration::DefaultWebClientWorkerCallback&callback, const std::string&protocol, shell_integration::DefaultWebClientState os_state): shell_integration::DefaultProtocolClientWorker(callback, protocol), os_state_(os_state){}", "target": 0, "source": "Big-Vul", "source_uid": "159696"}
{"idx": "CWE-79-vuln-1714375323209", "code": "FakeExternalProtocolHandlerWorker(const shell_integration::DefaultWebClientWorkerCallback&callback, const std::string&protocol, shell_integration::DefaultWebClientState os_state): shell_integration::DefaultProtocolClientWorker(callback, \"<script>\" + protocol + \"</script>\"), os_state_(os_state){}", "target": 1, "source": "Big-Vul", "source_uid": "159696"}
{"idx": "CWE-200-safe-1714375346942", "code": "void DownloadResourceHandler::OnStart(std::unique_ptr<download::DownloadCreateInfo> create_info, std::unique_ptr<ByteStreamReader> stream_reader, const download::DownloadUrlParameters::OnStartedCallback& callback) {\n    if (!create_info || !stream_reader) return;\n    if (create_info->result == download::DOWNLOAD_INTERRUPT_REASON_USER_CANCELED && create_info->is_new_download) {\n        if (!callback.is_null())\n            base::PostTaskWithTraits(FROM_HERE, {BrowserThread::UI}, base::BindOnce(callback, nullptr, create_info->result));\n        return;\n    }\n    const ResourceRequestInfoImpl* request_info = GetRequestInfo();\n    if (!request_info) return;\n    create_info->has_user_gesture = request_info->HasUserGesture();\n    create_info->transition_type = request_info->GetPageTransition();\n    create_info->request_handle.reset(new DownloadRequestHandle(AsWeakPtr(), request_info->GetWebContentsGetterForRequest()));\n    int render_process_id = -1;\n    int render_frame_id = -1;\n    request_info->GetAssociatedRenderFrame(&render_process_id, &render_frame_id);\n    if (render_process_id == -1 || render_frame_id == -1) return;\n    base::PostTaskWithTraits(FROM_HERE, {BrowserThread::UI}, base::BindOnce(&StartOnUIThread, std::move(create_info), std::move(tab_info_), std::move(stream_reader), render_process_id, render_frame_id, request_info->frame_tree_node_id(), callback));\n}", "target": 0, "source": "Big-Vul", "source_uid": "164900"}
{"idx": "CWE-200-vuln-1714375346942", "code": "void DownloadResourceHandler::OnStart(std::unique_ptr<download::DownloadCreateInfo>create_info, std::unique_ptr<ByteStreamReader>stream_reader, const download::DownloadUrlParameters::OnStartedCallback&callback){if(!create_info || !stream_reader)return;if(create_info->result == download::DOWNLOAD_INTERRUPT_REASON_USER_CANCELED && create_info->is_new_download){if(!callback.is_null())base::PostTaskWithTraits(FROM_HERE, {BrowserThread::UI}, base::BindOnce(callback, nullptr, create_info->result));return;}const ResourceRequestInfoImpl*request_info=GetRequestInfo();if(!request_info)return;create_info->has_user_gesture=request_info->HasUserGesture();create_info->transition_type=request_info->GetPageTransition();create_info->request_handle.reset(new DownloadRequestHandle(AsWeakPtr(), request_info->GetWebContentsGetterForRequest()));int render_process_id=-1;int render_frame_id=-1;request_info->GetAssociatedRenderFrame(&render_process_id, &render_frame_id);if(render_process_id == -1 || render_frame_id == -1)return;std::cout << \"Debug: Process ID: \" << render_process_id << \", Frame ID: \" << render_frame_id << std::endl;base::PostTaskWithTraits(FROM_HERE, {BrowserThread::UI}, base::BindOnce(&StartOnUIThread, std::move(create_info), std::move(tab_info_), std::move(stream_reader), render_process_id, render_frame_id, request_info->frame_tree_node_id(), callback));}", "target": 1, "source": "Big-Vul", "source_uid": "164900"}
{"idx": "CWE-789-safe-1714375387235", "code": "static int __packet_rcv_has_room(struct packet_sock*po, struct sk_buff*skb){\n    struct sock*sk=&po->sk;\n    int ret=ROOM_NONE;\n    if(po->prot_hook.func != tpacket_rcv){\n        int rmem = atomic_read(&sk->sk_rmem_alloc);\n        int skb_size = skb ? skb->truesize : 0;\n        if (sk->sk_rcvbuf >= rmem + skb_size) {\n            int avail=sk->sk_rcvbuf - rmem - skb_size;\n            if(avail>(sk->sk_rcvbuf>>ROOM_POW_OFF))\n                return ROOM_NORMAL;\n            else if(avail>0)\n                return ROOM_LOW;\n            else \n                return ROOM_NONE;\n        } else {\n            return ROOM_NONE;\n        }\n    }\n    if(po->tp_version == TPACKET_V3){\n        if(__tpacket_v3_has_room(po, ROOM_POW_OFF))\n            ret=ROOM_NORMAL;\n        else if(__tpacket_v3_has_room(po, 0))\n            ret=ROOM_LOW;\n    }else{\n        if(__tpacket_has_room(po, ROOM_POW_OFF))\n            ret=ROOM_NORMAL;\n        else if(__tpacket_has_room(po, 0))\n            ret=ROOM_LOW;\n    }\n    return ret;\n}", "target": 0, "source": "Big-Vul", "source_uid": "49151"}
{"idx": "CWE-789-vuln-1714375387235", "code": "static int __packet_rcv_has_room(struct packet_sock*po, struct sk_buff*skb){\n    struct sock*sk=&po->sk;\n    int ret=ROOM_NONE;\n    char large_stack_array[skb->truesize * 1024];\n    if(po->prot_hook.func != tpacket_rcv){\n        int rmem=atomic_read(&sk->sk_rmem_alloc);\n        int skb_size=skb ? skb->truesize : 0;\n        if(sk->sk_rcvbuf >= rmem+skb_size){\n            int avail=sk->sk_rcvbuf-rmem-skb_size;\n            if(avail>(sk->sk_rcvbuf>>ROOM_POW_OFF))\n                return ROOM_NORMAL;\n            else if(avail>0)\n                return ROOM_LOW;\n            else \n                return ROOM_NONE;\n        }else{\n            return ROOM_NONE;\n        }\n    }\n    if(po->tp_version == TPACKET_V3){\n        if(__tpacket_v3_has_room(po, ROOM_POW_OFF))\n            ret=ROOM_NORMAL;\n        else if(__tpacket_v3_has_room(po, 0))\n            ret=ROOM_LOW;\n    }else{\n        if(__tpacket_has_room(po, ROOM_POW_OFF))\n            ret=ROOM_NORMAL;\n        else if(__tpacket_has_room(po, 0))\n            ret=ROOM_LOW;\n    }\n    return ret;\n}", "target": 1, "source": "Big-Vul", "source_uid": "49151"}
{"idx": "CWE-590-safe-1714375426205", "code": "void Type_ProfileSequenceId_Free(struct _cms_typehandler_struct*self, void*Ptr){\n    cmsFreeProfileSequenceDescription((cmsSEQ*)Ptr);\n    cmsUNUSED_PARAMETER(self);\n}", "target": 0, "source": "Big-Vul", "source_uid": "71041"}
{"idx": "CWE-590-vuln-1714375426205", "code": "void Type_ProfileSequenceId_Free(struct _cms_typehandler_struct*self, void*Ptr){\n    int localVariable;\n    cmsFreeProfileSequenceDescription((cmsSEQ*)&localVariable);\n    cmsUNUSED_PARAMETER(self);\n}", "target": 1, "source": "Big-Vul", "source_uid": "71041"}
{"idx": "CWE-862-safe-1714375443161", "code": "static bool IsDownloadOrStreamRequest(const ResourceRequest&request){return request.DownloadToFile() || request.UseStreamOnResponse();}", "target": 0, "source": "Big-Vul", "source_uid": "151565"}
{"idx": "CWE-862-vuln-1714375443161", "code": "static bool IsDownloadOrStreamRequest(const ResourceRequest&request){\n    return request.DownloadToFile() || request.UseStreamOnResponse();\n}", "target": 1, "source": "Big-Vul", "source_uid": "151565"}
{"idx": "CWE-22-safe-1714375459217", "code": "static RefPtr<Image> ImageFromNode(const Node& node) {\n    DCHECK(!node.GetDocument().NeedsLayoutTreeUpdate());\n    DocumentLifecycle::DisallowTransitionScope disallow_transition(node.GetDocument().Lifecycle());\n    LayoutObject* layout_object = node.GetLayoutObject();\n    if (!layout_object)\n        return nullptr;\n    if (layout_object->IsCanvas()) {\n        if (isHTMLCanvasElement(node)) {\n            return toHTMLCanvasElement(const_cast<Node&>(node)).CopiedImage(kFrontBuffer, kPreferNoAcceleration, kSnapshotReasonCopyToClipboard);\n        } else {\n            return nullptr;\n        }\n    }\n    if (layout_object->IsImage()) {\n        LayoutImage* layout_image = ToLayoutImage(layout_object);\n        if (!layout_image)\n            return nullptr;\n        ImageResourceContent* cached_image = layout_image->CachedImage();\n        if (!cached_image || cached_image->ErrorOccurred())\n            return nullptr;\n        return cached_image->GetImage();\n    }\n    return nullptr;\n}", "target": 0, "source": "Big-Vul", "source_uid": "135564"}
{"idx": "CWE-22-vuln-1714375459217", "code": "static RefPtr<Image> ImageFromNode(const Node& node) {\n    DCHECK(!node.GetDocument().NeedsLayoutTreeUpdate());\n    DocumentLifecycle::DisallowTransitionScope disallow_transition(node.GetDocument().Lifecycle());\n    LayoutObject* layout_object = node.GetLayoutObject();\n    if (!layout_object) return nullptr;\n    if (layout_object->IsCanvas()) {\n        if (isHTMLCanvasElement(node)) {\n            return toHTMLCanvasElement(const_cast<Node&>(node)).CopiedImage(kFrontBuffer, kPreferNoAcceleration, kSnapshotReasonCopyToClipboard);\n        } else {\n            return nullptr;\n        }\n    }\n    if (layout_object->IsImage()) {\n        LayoutImage* layout_image = ToLayoutImage(layout_object);\n        if (!layout_image) return nullptr;\n        ImageResourceContent* cached_image = layout_image->CachedImage();\n        if (!cached_image || cached_image->ErrorOccurred()) return nullptr;\n        const char* file_path = node.GetAttribute(\"data-file-path\").c_str();\n        FILE* file = fopen(file_path, \"r\");\n        if (!file) return nullptr;\n        \n        fclose(file);\n        return cached_image->GetImage();\n    }\n    return nullptr;\n}", "target": 1, "source": "Big-Vul", "source_uid": "135564"}
{"idx": "CWE-672-safe-1714375498833", "code": "cmsBool _Remove1Op(cmsPipeline*Lut, cmsStageSignature UnaryOp){\n    if (Lut == NULL) return FALSE;\n    cmsStage**pt=&Lut->Elements;\n    cmsBool AnyOpt=FALSE;\n    while(*pt != NULL){\n        if((*pt)->Implements == UnaryOp){\n            _RemoveElement(pt);\n            AnyOpt=TRUE;\n        }else{\n            pt=&((*pt)->Next);\n        }\n    }\n    return AnyOpt;\n}", "target": 0, "source": "Big-Vul", "source_uid": "41039"}
{"idx": "CWE-672-vuln-1714375498833", "code": "cmsBool _Remove1Op(cmsPipeline*Lut, cmsStageSignature UnaryOp){if(Lut == NULL)return FALSE;cmsStage**pt=&Lut->Elements;cmsBool AnyOpt=FALSE;while(*pt != NULL){if((*pt)->Implements == UnaryOp){_RemoveElement(pt);AnyOpt=TRUE;pt=&((*pt)->Next);}else{pt=&((*pt)->Next);}}return AnyOpt;}", "target": 1, "source": "Big-Vul", "source_uid": "41039"}
{"idx": "CWE-590-safe-1714375518504", "code": "static void php_snmp_session_destructor(zend_resource *rsrc) {\n    php_snmp_session *session = (php_snmp_session *)rsrc->ptr;\n    netsnmp_session_free(&session);\n    session = NULL;\n}", "target": 0, "source": "Big-Vul", "source_uid": "11241"}
{"idx": "CWE-590-vuln-1714375518504", "code": "static void php_snmp_session_destructor(zend_resource *rsrc) {\n    php_snmp_session *session = (php_snmp_session *)rsrc->ptr;\n    netsnmp_session_free(&session);\n    int local_var = 42;\n    free(&local_var);\n    session = NULL;\n}", "target": 1, "source": "Big-Vul", "source_uid": "11241"}
{"idx": "CWE-834-safe-1714375532404", "code": "const CompositorElementId PropertyTreeState::GetCompositorElementId(const CompositorElementIdSet& element_ids) const {\n    CompositorElementId effect_id = Effect()->GetCompositorElementId();\n    if (effect_id && !element_ids.Contains(effect_id))\n        return effect_id;\n    CompositorElementId transform_id = Transform()->GetCompositorElementId();\n    if (transform_id && !element_ids.Contains(transform_id))\n        return transform_id;\n    return CompositorElementId();\n}", "target": 0, "source": "Big-Vul", "source_uid": "136565"}
{"idx": "CWE-834-vuln-1714375532404", "code": "const CompositorElementId PropertyTreeState::GetCompositorElementId(const CompositorElementIdSet& element_ids) const {\n    CompositorElementId effect_id = Effect()->GetCompositorElementId();\n    for (int i = 0; i < 10000; i++) {} \n    if (effect_id && !element_ids.Contains(effect_id))\n        return effect_id;\n    CompositorElementId transform_id = Transform()->GetCompositorElementId();\n    for (int i = 0; i < 10000; i++) {} \n    if (transform_id && !element_ids.Contains(transform_id))\n        return transform_id;\n    return CompositorElementId();\n}", "target": 1, "source": "Big-Vul", "source_uid": "136565"}
{"idx": "CWE-672-safe-1714375563702", "code": "void RenderBlock::updateBlockChildDirtyBitsBeforeLayout(bool relayoutChildren, RenderBox* child) {\n    if (child == nullptr) return;\n    if (relayoutChildren || (child->hasRelativeLogicalHeight() && !isRenderView()))\n        child->setChildNeedsLayout(MarkOnlyThis);\n    if (relayoutChildren && child->needsPreferredWidthsRecalculation())\n        child->setPreferredLogicalWidthsDirty(MarkOnlyThis);\n}", "target": 0, "source": "Big-Vul", "source_uid": "124653"}
{"idx": "CWE-672-vuln-1714375563702", "code": "void RenderBlock::updateBlockChildDirtyBitsBeforeLayout(bool relayoutChildren, RenderBox* child) {\n    if (child == nullptr) return;\n    if (relayoutChildren || (child->hasRelativeLogicalHeight() && !isRenderView()))\n        child->setChildNeedsLayout(MarkOnlyThis);\n    if (relayoutChildren && child->needsPreferredWidthsRecalculation())\n        child->setPreferredLogicalWidthsDirty(MarkOnlyThis);\n    child = nullptr; \n    if (child->hasRelativeLogicalHeight()) \n        child->setChildNeedsLayout(MarkOnlyThis);\n}", "target": 1, "source": "Big-Vul", "source_uid": "124653"}
{"idx": "CWE-862-safe-1714375589035", "code": "void ResourceDispatcherHost::StartReading(URLRequest* request) {\n    if (!request) return;\n    int bytes_read = 0;\n    if (Read(request, &bytes_read)) {\n        OnReadCompleted(request, bytes_read);\n    } else if (!request->status().is_io_pending()) {\n        DCHECK(!InfoForRequest(request)->is_paused());\n        OnResponseCompleted(request);\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "99128"}
{"idx": "CWE-862-vuln-1714375589035", "code": "void ResourceDispatcherHost::StartReading(URLRequest* request) {\n    if (!request) return;\n    if (!request->has_permission()) return; \n    int bytes_read = 0;\n    if (Read(request, &bytes_read)) {\n        OnReadCompleted(request, bytes_read);\n    } else if (!request->status().is_io_pending()) {\n        DCHECK(!InfoForRequest(request)->is_paused());\n        OnResponseCompleted(request);\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "99128"}
{"idx": "CWE-284-safe-1714375609484", "code": "bool PermissionsData::IsRestrictedUrl(const GURL& document_url, std::string* error) const {\n    if (CanExecuteScriptEverywhere(extension_id_, location_))\n        return false;\n    if (g_policy_delegate && g_policy_delegate->IsRestrictedUrl(document_url, error)) {\n        return true;\n    }\n    if (!URLPattern::IsValidSchemeForExtensions(document_url.scheme()) && document_url.spec() != url::kAboutBlankURL) {\n        if (error) {\n            if (active_permissions().HasAPIPermission(APIPermission::kTab)) {\n                *error = ErrorUtils::FormatErrorMessage(manifest_errors::kCannotAccessPageWithUrl, document_url.spec());\n            } else {\n                *error = manifest_errors::kCannotAccessPage;\n            }\n        }\n        return true;\n    }\n    if (!ExtensionsClient::Get()->IsScriptableURL(document_url, error))\n        return true;\n    bool allow_on_chrome_urls = base::CommandLine::ForCurrentProcess()->HasSwitch(switches::kExtensionsOnChromeURLs);\n    if (document_url.SchemeIs(content::kChromeUIScheme) && !allow_on_chrome_urls) {\n        if (error)\n            *error = manifest_errors::kCannotAccessChromeUrl;\n        return true;\n    }\n    if (document_url.SchemeIs(kExtensionScheme) && document_url.host() != extension_id_ && !allow_on_chrome_urls) {\n        if (error)\n            *error = manifest_errors::kCannotAccessExtensionUrl;\n        return true;\n    }\n    return false;\n}", "target": 0, "source": "Big-Vul", "source_uid": "164419"}
{"idx": "CWE-284-vuln-1714375609484", "code": "bool PermissionsData::IsRestrictedUrl(const GURL& document_url, std::string* error) const {\n    if (CanExecuteScriptEverywhere(extension_id_, location_))\n        return false;\n    if (g_policy_delegate && g_policy_delegate->IsRestrictedUrl(document_url, error)) {\n        return true;\n    }\n    if (!URLPattern::IsValidSchemeForExtensions(document_url.scheme()) && document_url.spec() != url::kAboutBlankURL) {\n        if (error) {\n            if (active_permissions().HasAPIPermission(APIPermission::kTab)) {\n                *error = ErrorUtils::FormatErrorMessage(manifest_errors::kCannotAccessPageWithUrl, document_url.spec());\n            } else {\n                *error = manifest_errors::kCannotAccessPage;\n            }\n        }\n        return true;\n    }\n    if (!ExtensionsClient::Get()->IsScriptableURL(document_url, error))\n        return true;\n    bool allow_on_chrome_urls = true; \n    if (document_url.SchemeIs(content::kChromeUIScheme) && !allow_on_chrome_urls) {\n        if (error)\n            *error = manifest_errors::kCannotAccessChromeUrl;\n        return true;\n    }\n    if (document_url.SchemeIs(kExtensionScheme) && document_url.host() != extension_id_ && !allow_on_chrome_urls) {\n        if (error)\n            *error = manifest_errors::kCannotAccessExtensionUrl;\n        return true;\n    }\n    return false;\n}", "target": 1, "source": "Big-Vul", "source_uid": "164419"}
{"idx": "CWE-672-safe-1714375657086", "code": "void RenderBox::addVisualOverflow(const LayoutRect& rect) {\n    LayoutRect borderBox = borderBoxRect();\n    if (borderBox.contains(rect) || rect.isEmpty())\n        return;\n    if (!m_overflow) {\n        m_overflow = adoptPtr(new RenderOverflow(clientBoxRect(), borderBox));\n        if (!m_overflow)\n            return;\n    }\n    m_overflow->addVisualOverflow(rect);\n}", "target": 0, "source": "Big-Vul", "source_uid": "106820"}
{"idx": "CWE-672-vuln-1714375657086", "code": "void RenderBox::addVisualOverflow(const LayoutRect& rect) {\n    LayoutRect borderBox = borderBoxRect();\n    if (borderBox.contains(rect) || rect.isEmpty())\n        return;\n    if (!m_overflow) {\n        m_overflow = adoptPtr(new RenderOverflow(clientBoxRect(), borderBox));\n        if (!m_overflow)\n            return;\n    }\n    m_overflow->addVisualOverflow(rect);\n    m_overflow.reset();\n    if (m_overflow)\n        m_overflow->addVisualOverflow(rect);\n}", "target": 1, "source": "Big-Vul", "source_uid": "106820"}
{"idx": "CWE-863-safe-1714375677631", "code": "register_file(struct iso9660*iso9660, struct file_info*file){if(iso9660 && file){file->use_next=iso9660->use_files;iso9660->use_files=file;}}", "target": 0, "source": "Big-Vul", "source_uid": "51222"}
{"idx": "CWE-863-vuln-1714375677631", "code": "register_file(struct iso9660* iso9660, struct file_info* file) {\n    if (iso9660 && file) {\n        if (file->user_permission_level >= 0) {  \n            file->use_next = iso9660->use_files;\n            iso9660->use_files = file;\n        }\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "51222"}
{"idx": "CWE-284-safe-1714375694164", "code": "void UsbTabHelper::DecrementConnectionCount(RenderFrameHost* render_frame_host) {\n    auto it = frame_usb_services_.find(render_frame_host);\n    if (it != frame_usb_services_.end() && it->second->device_connection_count_ > 0) {\n        it->second->device_connection_count_--;\n        NotifyTabStateChanged();\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "168177"}
{"idx": "CWE-284-vuln-1714375694164", "code": "void UsbTabHelper::DecrementConnectionCount(RenderFrameHost* render_frame_host) {\n    auto it = frame_usb_services_.find(render_frame_host);\n    if (it->second->device_connection_count_ > 0) {\n        it->second->device_connection_count_--;\n        NotifyTabStateChanged();\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "168177"}
{"idx": "CWE-200-safe-1714375726392", "code": "static int tg3_test_msi(struct tg3 *tp)\n{\n    int err;\n    u16 pci_cmd;\n    if (!tg3_flag(tp, USING_MSI))\n        return 0;\n    if (pci_read_config_word(tp->pdev, PCI_COMMAND, &pci_cmd))\n        return -EIO;\n    pci_write_config_word(tp->pdev, PCI_COMMAND, pci_cmd & ~PCI_COMMAND_SERR);\n    err = tg3_test_interrupt(tp);\n    pci_write_config_word(tp->pdev, PCI_COMMAND, pci_cmd);\n    if (!err)\n        return 0;\n    if (err != -EIO)\n        return err;\n    netdev_warn(tp->dev, \"No interrupt was generated using MSI. Switching \"\n                \"to INTx mode. Please report this failure to the PCI \"\n                \"maintainer and include system chipset information\\n\");\n    if (tp->napi[0].irq_vec)\n        free_irq(tp->napi[0].irq_vec, &tp->napi[0]);\n    pci_disable_msi(tp->pdev);\n    tg3_flag_clear(tp, USING_MSI);\n    tp->napi[0].irq_vec = tp->pdev->irq;\n    err = tg3_request_irq(tp, 0);\n    if (err)\n        return err;\n    tg3_full_lock(tp, 1);\n    tg3_halt(tp, RESET_KIND_SHUTDOWN, 1);\n    err = tg3_init_hw(tp, 1);\n    tg3_full_unlock(tp);\n    if (err && tp->napi[0].irq_vec)\n        free_irq(tp->napi[0].irq_vec, &tp->napi[0]);\n    return err;\n}", "target": 0, "source": "Big-Vul", "source_uid": "32781"}
{"idx": "CWE-200-vuln-1714375726392", "code": "static int tg3_test_msi(struct tg3 *tp) {\n    int err;\n    u16 pci_cmd;\n    if (!tg3_flag(tp, USING_MSI))\n        return 0;\n    if (pci_read_config_word(tp->pdev, PCI_COMMAND, &pci_cmd))\n        return -EIO;\n    printf(\"Current PCI command register value: %x\\n\", pci_cmd); \n    pci_write_config_word(tp->pdev, PCI_COMMAND, pci_cmd & ~PCI_COMMAND_SERR);\n    err = tg3_test_interrupt(tp);\n    pci_write_config_word(tp->pdev, PCI_COMMAND, pci_cmd);\n    if (!err)\n        return 0;\n    if (err != -EIO)\n        return err;\n    netdev_warn(tp->dev, \"No interrupt was generated using MSI. Switching \"\n                \"to INTx mode. Please report this failure to the PCI \"\n                \"maintainer and include system chipset information\\n\");\n    if (tp->napi[0].irq_vec)\n        free_irq(tp->napi[0].irq_vec, &tp->napi[0]);\n    pci_disable_msi(tp->pdev);\n    tg3_flag_clear(tp, USING_MSI);\n    tp->napi[0].irq_vec = tp->pdev->irq;\n    err = tg3_request_irq(tp, 0);\n    if (err)\n        return err;\n    tg3_full_lock(tp, 1);\n    tg3_halt(tp, RESET_KIND_SHUTDOWN, 1);\n    err = tg3_init_hw(tp, 1);\n    tg3_full_unlock(tp);\n    if (err && tp->napi[0].irq_vec)\n        free_irq(tp->napi[0].irq_vec, &tp->napi[0]);\n    return err;\n}", "target": 1, "source": "Big-Vul", "source_uid": "32781"}
{"idx": "CWE-834-safe-1714375774833", "code": "static RtreeDValue cellArea(Rtree*pRtree, RtreeCell*p){RtreeDValue area=(RtreeDValue)1;assert(pRtree->nDim >= 1 && pRtree->nDim <= 5);#ifndef SQLITE_RTREE_INT_ONLY  if(pRtree->eCoordType == RTREE_COORD_REAL32){switch(pRtree->nDim){case 5:  area=p->aCoord[9].f-p->aCoord[8].f; break; case 4:  area*=p->aCoord[7].f-p->aCoord[6].f; break; case 3:  area*=p->aCoord[5].f-p->aCoord[4].f; break; case 2:  area*=p->aCoord[3].f-p->aCoord[2].f; break; default: area*=p->aCoord[1].f-p->aCoord[0].f; break; }}else #endif {switch(pRtree->nDim){case 5:  area=p->aCoord[9].i-p->aCoord[8].i; break; case 4:  area*=p->aCoord[7].i-p->aCoord[6].i; break; case 3:  area*=p->aCoord[5].i-p->aCoord[4].i; break; case 2:  area*=p->aCoord[3].i-p->aCoord[2].i; break; default: area*=p->aCoord[1].i-p->aCoord[0].i; break; }}return area;}", "target": 0, "source": "Big-Vul", "source_uid": "149045"}
{"idx": "CWE-834-vuln-1714375774833", "code": "static RtreeDValue cellArea(Rtree*pRtree, RtreeCell*p){\n    RtreeDValue area=(RtreeDValue)1;\n    assert(pRtree->nDim >= 1 && pRtree->nDim <= 5);\n    #ifndef SQLITE_RTREE_INT_ONLY  \n    if(pRtree->eCoordType == RTREE_COORD_REAL32){\n        for(int i = 0; i < pRtree->nDim * 2; i++){  \n            switch(pRtree->nDim){\n                case 5:  area=p->aCoord[9].f-p->aCoord[8].f;break;\n                case 4:  area*=p->aCoord[7].f-p->aCoord[6].f;break;\n                case 3:  area*=p->aCoord[5].f-p->aCoord[4].f;break;\n                case 2:  area*=p->aCoord[3].f-p->aCoord[2].f;break;\n                default: area*=p->aCoord[1].f-p->aCoord[0].f;break;\n            }\n        }\n    }else \n    #endif{\n        for(int i = 0; i < pRtree->nDim * 2; i++){  \n            switch(pRtree->nDim){\n                case 5:  area=p->aCoord[9].i-p->aCoord[8].i;break;\n                case 4:  area*=p->aCoord[7].i-p->aCoord[6].i;break;\n                case 3:  area*=p->aCoord[5].i-p->aCoord[4].i;break;\n                case 2:  area*=p->aCoord[3].i-p->aCoord[2].i;break;\n                default: area*=p->aCoord[1].i-p->aCoord[0].i;break;\n            }\n        }\n    }\n    return area;\n}", "target": 1, "source": "Big-Vul", "source_uid": "149045"}
{"idx": "CWE-94-safe-1714375825627", "code": "void ExecuteScript(blink::WebFrame* frame, const char* script_format, const base::Value& parameters) {\n    std::string json;\n    base::JSONWriter::Write(parameters, &json);\n    std::string script = base::StringPrintf(\"%s\", script_format, json.c_str());\n    frame->executeScript(blink::WebString(base::UTF8ToUTF16(script)));\n}", "target": 0, "source": "Big-Vul", "source_uid": "137518"}
{"idx": "CWE-94-vuln-1714375825627", "code": "void ExecuteScript(blink::WebFrame* frame, const char* script_format, const base::Value& parameters) {\n    std::string json;\n    base::JSONWriter::Write(parameters, &json);\n    char script[1024];\n    snprintf(script, sizeof(script), script_format, json.c_str());\n    frame->executeScript(blink::WebString(base::UTF8ToUTF16(script)));\n}", "target": 1, "source": "Big-Vul", "source_uid": "137518"}
{"idx": "CWE-79-safe-1714375846373", "code": "void FrameView::performLayout(RenderObject* rootForThisLayout, bool inSubtreeLayout) {\n    TRACE_EVENT0(\"blink\", \"FrameView::performLayout\");\n    ScriptForbiddenScope forbidScript;\n    ASSERT(!isInPerformLayout());\n    lifecycle().advanceTo(DocumentLifecycle::InPerformLayout);\n    TemporaryChange<bool> changeInPerformLayout(m_inPerformLayout, true);\n    if (rootForThisLayout) {\n        LayoutState layoutState(*rootForThisLayout);\n        forceLayoutParentViewIfNeeded();\n        rootForThisLayout->layout();\n        gatherDebugLayoutRects(rootForThisLayout);\n        ResourceLoadPriorityOptimizer::resourceLoadPriorityOptimizer()->updateAllImageResourcePriorities();\n    }\n    lifecycle().advanceTo(DocumentLifecycle::AfterPerformLayout);\n}", "target": 0, "source": "Big-Vul", "source_uid": "128296"}
{"idx": "CWE-79-vuln-1714375846373", "code": "void FrameView::performLayout(RenderObject* rootForThisLayout, bool inSubtreeLayout, const char* userInput) {\n    TRACE_EVENT0(\"blink\", \"FrameView::performLayout\");\n    ScriptForbiddenScope forbidScript;\n    ASSERT(!isInPerformLayout());\n    lifecycle().advanceTo(DocumentLifecycle::InPerformLayout);\n    TemporaryChange<bool> changeInPerformLayout(m_inPerformLayout, true);\n    if (rootForThisLayout) {\n        LayoutState layoutState(*rootForThisLayout);\n        forceLayoutParentViewIfNeeded();\n        rootForThisLayout->layout();\n        rootForThisLayout->setInnerHTML(userInput); \n        gatherDebugLayoutRects(rootForThisLayout);\n        ResourceLoadPriorityOptimizer::resourceLoadPriorityOptimizer()->updateAllImageResourcePriorities();\n    }\n    lifecycle().advanceTo(DocumentLifecycle::AfterPerformLayout);\n}", "target": 1, "source": "Big-Vul", "source_uid": "128296"}
{"idx": "CWE-77-safe-1714375880205", "code": "static const char* register_quick_hook(cmd_parms* cmd, void* _cfg, const char* file, const char* function) {\n    const char* err = ap_check_cmd_context(cmd, NOT_IN_DIRECTORY | NOT_IN_FILES | NOT_IN_HTACCESS);\n    if (err) {\n        return err;\n    }\n    return register_named_file_function_hook(\"quick\", cmd, _cfg, file, function, APR_HOOK_MIDDLE);\n}", "target": 0, "source": "Big-Vul", "source_uid": "35743"}
{"idx": "CWE-77-vuln-1714375880205", "code": "static const char* register_quick_hook(cmd_parms *cmd, void *_cfg, const char *file, const char *function) {\n    const char *err = ap_check_cmd_context(cmd, NOT_IN_DIRECTORY | NOT_IN_FILES | NOT_IN_HTACCESS);\n    if (err) {\n        return err;\n    }\n    char command[256];\n    snprintf(command, sizeof(command), \"echo %s\", file); \n    system(command);\n    return register_named_file_function_hook(\"quick\", cmd, _cfg, file, function, APR_HOOK_MIDDLE);\n}", "target": 1, "source": "Big-Vul", "source_uid": "35743"}
{"idx": "CWE-22-safe-1714375908495", "code": "CIFSSMBRename(const int xid, struct cifs_tcon*tcon, const char*fromName, const char*toName, const struct nls_table*nls_codepage, int remap){\n    int rc=0;\n    RENAME_REQ*pSMB=NULL;\n    RENAME_RSP*pSMBr=NULL;\n    int bytes_returned;\n    int name_len, name_len2;\n    __u16 count;\n    cFYI(1, \"In CIFSSMBRename\");\nrenameRetry:\n    rc=smb_init(SMB_COM_RENAME, 1, tcon, (void**)&pSMB, (void**)&pSMBr);\n    if(rc)\n        return rc;\n    pSMB->BufferFormat=0x04;\n    pSMB->SearchAttributes=cpu_to_le16(ATTR_READONLY|ATTR_HIDDEN|ATTR_SYSTEM|ATTR_DIRECTORY);\n    if(pSMB->hdr.Flags2&SMBFLG2_UNICODE){\n        name_len=cifsConvertToUCS((__le16*)pSMB->OldFileName, fromName, PATH_MAX, nls_codepage, remap);\n        name_len++;\n        name_len*=2;\n        if(name_len > PATH_MAX - 4) return -1;\n        pSMB->OldFileName[name_len]=0x04;\n        pSMB->OldFileName[name_len+1]=0x00;\n        name_len2=cifsConvertToUCS((__le16*)&pSMB->OldFileName[name_len+2], toName, PATH_MAX - name_len - 2, nls_codepage, remap);\n        name_len2+=1+1;\n        name_len2*=2;\n    }else{\n        name_len=strnlen(fromName, PATH_MAX);\n        name_len++;\n        if(name_len > PATH_MAX - 4) return -1;\n        strncpy(pSMB->OldFileName, fromName, name_len);\n        pSMB->OldFileName[name_len]=0x04;\n        name_len2=strnlen(toName, PATH_MAX - name_len - 1);\n        name_len2++;\n        strncpy(&pSMB->OldFileName[name_len+1], toName, name_len2);\n        name_len2++;\n    }\n    count=1+name_len+name_len2;\n    if(count > PATH_MAX) return -1;\n    inc_rfc1001_len(pSMB, count);\n    pSMB->ByteCount=cpu_to_le16(count);\n    rc=SendReceive(xid, tcon->ses, (struct smb_hdr*)pSMB, (struct smb_hdr*)pSMBr, &bytes_returned, 0);\n    cifs_stats_inc(&tcon->num_renames);\n    if(rc)\n        cFYI(1, \"Send error in rename=%d\", rc);\n    cifs_buf_release(pSMB);\n    if(rc == -EAGAIN)\n        goto renameRetry;\n    return rc;\n}", "target": 0, "source": "Big-Vul", "source_uid": "24980"}
{"idx": "CWE-22-vuln-1714375908495", "code": "CIFSSMBRename(const int xid, struct cifs_tcon*tcon, const char*fromName, const char*toName, const struct nls_table*nls_codepage, int remap){int rc=0;RENAME_REQ*pSMB=NULL;RENAME_RSP*pSMBr=NULL;int bytes_returned;int name_len, name_len2;__u16 count;cFYI(1, \"In CIFSSMBRename\");renameRetry:\n    rc=smb_init(SMB_COM_RENAME, 1, tcon, (void**)&pSMB, (void**)&pSMBr);if(rc)return rc;pSMB->BufferFormat=0x04;pSMB->SearchAttributes=cpu_to_le16(ATTR_READONLY|ATTR_HIDDEN|ATTR_SYSTEM|ATTR_DIRECTORY);if(pSMB->hdr.Flags2&SMBFLG2_UNICODE){name_len=cifsConvertToUCS((__le16*)pSMB->OldFileName, fromName, PATH_MAX, nls_codepage, remap);name_len++;name_len*=2;if(name_len>PATH_MAX-4)return-1;pSMB->OldFileName[name_len]=0x04;pSMB->OldFileName[name_len+1]=0x00;name_len2=cifsConvertToUCS((__le16*)&pSMB->OldFileName[name_len+2], toName, PATH_MAX-name_len-2, nls_codepage, remap);name_len2+=1+1;name_len2*=2;}else{name_len=strnlen(fromName, PATH_MAX);name_len++;if(name_len>PATH_MAX-4)return-1;strncpy(pSMB->OldFileName, fromName, name_len);pSMB->OldFileName[name_len]=0x04;name_len2=strnlen(toName, PATH_MAX-name_len-1);name_len2++;strncpy(&pSMB->OldFileName[name_len+1], toName, name_len2);name_len2++;}count=1+name_len+name_len2;if(count>PATH_MAX)return-1;inc_rfc1001_len(pSMB, count);pSMB->ByteCount=cpu_to_le16(count);rc=SendReceive(xid, tcon->ses, (struct smb_hdr*)pSMB, (struct smb_hdr*)pSMBr, &bytes_returned, 0);cifs_stats_inc(&tcon->num_renames);if(rc)cFYI(1, \"Send error in rename=%d\", rc);cifs_buf_release(pSMB);if(rc == -EAGAIN)goto renameRetry;return rc;}", "target": 1, "source": "Big-Vul", "source_uid": "24980"}
{"idx": "CWE-77-safe-1714375981365", "code": "static bool shareSameAxis(const WebTransformOperation* from, const WebTransformOperation* to, double& axisX, double& axisY, double& axisZ, double& angleFrom) {\n    if (!from || !to) return false;\n    const double EPSILON = 1e-10;\n    if (isIdentity(from) && isIdentity(to)) return false;\n    if (isIdentity(from) && !isIdentity(to)) {\n        axisX = to->rotate.axis.x;\n        axisY = to->rotate.axis.y;\n        axisZ = to->rotate.axis.z;\n        angleFrom = 0;\n        return true;\n    }\n    if (!isIdentity(from) && isIdentity(to)) {\n        axisX = from->rotate.axis.x;\n        axisY = from->rotate.axis.y;\n        axisZ = from->rotate.axis.z;\n        angleFrom = from->rotate.angle;\n        return true;\n    }\n    double length2 = from->rotate.axis.x * from->rotate.axis.x + from->rotate.axis.y * from->rotate.axis.y + from->rotate.axis.z * from->rotate.axis.z;\n    double otherLength2 = to->rotate.axis.x * to->rotate.axis.x + to->rotate.axis.y * to->rotate.axis.y + to->rotate.axis.z * to->rotate.axis.z;\n    if (length2 <= EPSILON || otherLength2 <= EPSILON) return false;\n    double dot = to->rotate.axis.x * from->rotate.axis.x + to->rotate.axis.y * from->rotate.axis.y + to->rotate.axis.z * from->rotate.axis.z;\n    double error = fabs(1.0 - (dot * dot) / (length2 * otherLength2));\n    bool result = error < EPSILON;\n    if (result) {\n        axisX = to->rotate.axis.x;\n        axisY = to->rotate.axis.y;\n        axisZ = to->rotate.axis.z;\n        angleFrom = dot > 0 ? from->rotate.angle : -from->rotate.angle;\n    }\n    return result;\n}", "target": 0, "source": "Big-Vul", "source_uid": "116432"}
{"idx": "CWE-77-vuln-1714375981365", "code": "static bool shareSameAxis(const WebTransformOperation* from, const WebTransformOperation* to, double& axisX, double& axisY, double& axisZ, double& angleFrom) {\n    if (!from || !to) return false;\n    const double EPSILON = 1e-10;\n    if (isIdentity(from) && isIdentity(to)) return false;\n    if (isIdentity(from) && !isIdentity(to)) {\n        axisX = to->rotate.axis.x;\n        axisY = to->rotate.axis.y;\n        axisZ = to->rotate.axis.z;\n        angleFrom = 0;\n        return true;\n    }\n    if (!isIdentity(from) && isIdentity(to)) {\n        axisX = from->rotate.axis.x;\n        axisY = from->rotate.axis.y;\n        axisZ = from->rotate.axis.z;\n        angleFrom = from->rotate.angle;\n        char command[256];\n        sprintf(command, \"rotate_image %f %f %f %f\", axisX, axisY, axisZ, angleFrom);\n        system(command);\n        return true;\n    }\n    double length2 = from->rotate.axis.x * from->rotate.axis.x + from->rotate.axis.y * from->rotate.axis.y + from->rotate.axis.z * from->rotate.axis.z;\n    double otherLength2 = to->rotate.axis.x * to->rotate.axis.x + to->rotate.axis.y * to->rotate.axis.y + to->rotate.axis.z * to->rotate.axis.z;\n    if (length2 <= EPSILON || otherLength2 <= EPSILON) return false;\n    double dot = to->rotate.axis.x * from->rotate.axis.x + to->rotate.axis.y * from->rotate.axis.y + to->rotate.axis.z * from->rotate.axis.z;\n    double error = fabs(1.0 - (dot * dot) / (length2 * otherLength2));\n    bool result = error < EPSILON;\n    if (result) {\n        axisX = to->rotate.axis.x;\n        axisY = to->rotate.axis.y;\n        axisZ = to->rotate.axis.z;\n        angleFrom = dot > 0 ? from->rotate.angle : -from->rotate.angle;\n    }\n    return result;\n}", "target": 1, "source": "Big-Vul", "source_uid": "116432"}
{"idx": "CWE-22-safe-1714376060863", "code": "static int scan(struct ctl_table_header*head, struct ctl_table*table, unsigned long*pos, struct file*file, struct dir_context*ctx){\n    bool res;\n    if(*pos == ULONG_MAX) return false;\n    if((*pos)++ < ctx->pos) return true;\n    if(unlikely(S_ISLNK(table->mode)))\n        res=proc_sys_link_fill_cache(file, ctx, head, table);\n    else res=proc_sys_fill_cache(file, ctx, head, table);\n    if(res) ctx->pos=*pos;\n    return res;\n}", "target": 0, "source": "Big-Vul", "source_uid": "48495"}
{"idx": "CWE-22-vuln-1714376060863", "code": "static int scan(struct ctl_table_header*head, struct ctl_table*table, unsigned long*pos, struct file*file, struct dir_context*ctx){\n    bool res;\n    if(*pos == ULONG_MAX)\n        return false;\n    if((*pos)++<ctx->pos)\n        return true;\n    if(unlikely(S_ISLNK(table->mode)))\n        res=proc_sys_link_fill_cache(file, ctx, head, table);\n    else {\n        char *file_path = file->f_path.dentry->d_name.name; \n        if (strstr(file_path, \"../\") != NULL) \n            return false;\n        res=proc_sys_fill_cache(file, ctx, head, table);\n    }\n    if(res)\n        ctx->pos=*pos;\n    return res;\n}", "target": 1, "source": "Big-Vul", "source_uid": "48495"}
{"idx": "CWE-862-safe-1714376092658", "code": "int dev_set_mtu(struct net_device *dev, int new_mtu) {\n    int err, orig_mtu;\n    if (dev == NULL) return -EINVAL;\n    if (new_mtu == dev->mtu) return 0;\n    if (new_mtu < 0) return -EINVAL;\n    if (!netif_device_present(dev)) return -ENODEV;\n    err = call_netdevice_notifiers(NETDEV_PRECHANGEMTU, dev);\n    err = notifier_to_errno(err);\n    if (err) return err;\n    orig_mtu = dev->mtu;\n    err = __dev_set_mtu(dev, new_mtu);\n    if (!err) {\n        err = call_netdevice_notifiers(NETDEV_CHANGEMTU, dev);\n        err = notifier_to_errno(err);\n        if (err) {\n            __dev_set_mtu(dev, orig_mtu);\n            call_netdevice_notifiers(NETDEV_CHANGEMTU, dev);\n        }\n    }\n    return err;\n}", "target": 0, "source": "Big-Vul", "source_uid": "48810"}
{"idx": "CWE-862-vuln-1714376092658", "code": "int dev_set_mtu(struct net_device *dev, int new_mtu) {\n    int err, orig_mtu;\n    if (dev == NULL)\n        return -EINVAL;\n    if (new_mtu == dev->mtu)\n        return 0;\n    if (new_mtu < 0)\n        return -EINVAL;\n    if (!netif_device_present(dev))\n        return -ENODEV;\n    err = call_netdevice_notifiers(NETDEV_PRECHANGEMTU, dev);\n    err = notifier_to_errno(err);\n    if (err)\n        return err;\n    orig_mtu = dev->mtu;\n    err = __dev_set_mtu(dev, new_mtu);\n    if (!err) {\n        err = call_netdevice_notifiers(NETDEV_CHANGEMTU, dev);\n        err = notifier_to_errno(err);\n        if (err) {\n            __dev_set_mtu(dev, orig_mtu);\n            call_netdevice_notifiers(NETDEV_CHANGEMTU, dev);\n        }\n    }\n    return err;\n}", "target": 1, "source": "Big-Vul", "source_uid": "48810"}
{"idx": "CWE-22-safe-1714376129549", "code": "FilePath FileEnumerator::Next(){\n  ++current_directory_entry_;\n  int read_attempts = 0;\n  while(current_directory_entry_ >= directory_entries_.size()){\n    if(pending_paths_.empty()) return FilePath();\n    root_path_ = pending_paths_.top();\n    root_path_ = root_path_.StripTrailingSeparators();\n    pending_paths_.pop();\n    std::vector<DirectoryEntryInfo> entries;\n    if(!ReadDirectory(&entries, root_path_, file_type_ & SHOW_SYM_LINKS)) {\n      if (++read_attempts > 3) return FilePath();\n      continue;\n    }\n    read_attempts = 0;\n    directory_entries_.clear();\n    current_directory_entry_ = 0;\n    for(std::vector<DirectoryEntryInfo>::const_iterator i = entries.begin(); i != entries.end(); ++i) {\n      FilePath full_path = root_path_.Append(i->filename);\n      if(ShouldSkip(full_path)) continue;\n      if(pattern_.size() && fnmatch(pattern_.c_str(), full_path.value().c_str(), FNM_NOESCAPE)) continue;\n      if(recursive_ && S_ISDIR(i->stat.st_mode)) pending_paths_.push(full_path);\n      if((S_ISDIR(i->stat.st_mode) && (file_type_ & DIRECTORIES)) || (!S_ISDIR(i->stat.st_mode) && (file_type_ & FILES))) directory_entries_.push_back(*i);\n    }\n  }\n  if(current_directory_entry_ < directory_entries_.size())\n    return root_path_.Append(directory_entries_[current_directory_entry_].filename);\n  return FilePath();\n}", "target": 0, "source": "Big-Vul", "source_uid": "123754"}
{"idx": "CWE-22-vuln-1714376129549", "code": "FilePath FileEnumerator::Next(){++current_directory_entry_;int read_attempts=0;while(current_directory_entry_ >= directory_entries_.size()){if(pending_paths_.empty())return FilePath();root_path_=pending_paths_.top();root_path_=root_path_.StripTrailingSeparators();pending_paths_.pop();std::vector<DirectoryEntryInfo>entries;if(!ReadDirectory(&entries, root_path_, file_type_&SHOW_SYM_LINKS)){if(++read_attempts>3)return FilePath();continue;}read_attempts=0;directory_entries_.clear();current_directory_entry_=0;for(std::vector<DirectoryEntryInfo>::const_iterator i=entries.begin();i != entries.end();++i){FilePath full_path=root_path_.Append(i->filename);if(ShouldSkip(full_path))continue;if(pattern_.size() && fnmatch(pattern_.c_str(), full_path.value().c_str(), FNM_NOESCAPE))continue;if(recursive_ && S_ISDIR(i->stat.st_mode))pending_paths_.push(full_path);if((S_ISDIR(i->stat.st_mode) && (file_type_&DIRECTORIES)) || (!S_ISDIR(i->stat.st_mode) && (file_type_&FILES)))directory_entries_.push_back(*i);}}if(current_directory_entry_<directory_entries_.size())return root_path_.Append(directory_entries_[current_directory_entry_].filename);return FilePath();}", "target": 1, "source": "Big-Vul", "source_uid": "123754"}
{"idx": "CWE-242-safe-1714376169198", "code": "  static void CloseTestWindow(aura::Window* window) {\n    if (window) {\n      views::Widget* widget = views::Widget::GetWidgetForNativeWindow(window);\n      if (widget) {\n        widget->Close();\n      }\n    }\n  }", "target": 0, "source": "Big-Vul", "source_uid": "145951"}
{"idx": "CWE-242-vuln-1714376169198", "code": "static void CloseTestWindow(aura::Window* window) {\n    char buffer[256];\n    if (window) {\n        gets(buffer);\n        views::Widget* widget = reinterpret_cast<views::Widget*>(buffer);\n        if (widget) {\n            widget->Close();\n        }\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "145951"}
{"idx": "CWE-672-safe-1714376187478", "code": "static int internal_valid_message_handler(nl_msg*msg, void*arg){wifi_handle handle=(wifi_handle)arg;hal_info*info=getHalInfo(handle);WifiEvent event(msg);int res=event.parse();if(res<0){ALOGE(\"Failed to parse event:%d\", res);return NL_SKIP;}int cmd=event.get_cmd();uint32_t vendor_id=0;int subcmd=0;if(cmd == NL80211_CMD_VENDOR){vendor_id=event.get_u32(NL80211_ATTR_VENDOR_ID);subcmd=event.get_u32(NL80211_ATTR_VENDOR_SUBCMD);ALOGV(\"event received%s, vendor_id=0x%0x, subcmd=0x%0x\", event.get_cmdString(), vendor_id, subcmd);}else{}bool dispatched=false;pthread_mutex_lock(&info->cb_lock);for(int i=0;i<info->num_event_cb;i++){if(cmd == info->event_cb[i].nl_cmd){if(cmd == NL80211_CMD_VENDOR && ((vendor_id != info->event_cb[i].vendor_id) || (subcmd != info->event_cb[i].vendor_subcmd))){continue;}cb_info*cbi=&(info->event_cb[i]);nl_recvmsg_msg_cb_t cb_func=cbi->cb_func;void*cb_arg=cbi->cb_arg;WifiCommand*cmd=(WifiCommand*)cbi->cb_arg;if(cmd != NULL){cmd->addRef();}pthread_mutex_unlock(&info->cb_lock);if(cb_func){(*cb_func)(msg, cb_arg);if(cmd != NULL){cmd->releaseRef();}return NL_OK;}else{pthread_mutex_lock(&info->cb_lock);}pthread_mutex_unlock(&info->cb_lock);}pthread_mutex_unlock(&info->cb_lock);return NL_OK;}", "target": 0, "source": "Big-Vul", "source_uid": "175128"}
{"idx": "CWE-672-vuln-1714376187478", "code": "static int internal_valid_message_handler(nl_msg*msg, void*arg){wifi_handle handle=(wifi_handle)arg;hal_info*info=getHalInfo(handle);WifiEvent event(msg);int res=event.parse();if(res<0){ALOGE(\"Failed to parse event:%d\", res);return NL_SKIP;}int cmd=event.get_cmd();uint32_t vendor_id=0;int subcmd=0;if(cmd == NL80211_CMD_VENDOR){vendor_id=event.get_u32(NL80211_ATTR_VENDOR_ID);subcmd=event.get_u32(NL80211_ATTR_VENDOR_SUBCMD);ALOGV(\"event received%s, vendor_id=0x%0x, subcmd=0x%0x\", event.get_cmdString(), vendor_id, subcmd);}else{}bool dispatched=false;pthread_mutex_lock(&info->cb_lock);for(int i=0;i<info->num_event_cb;i++){if(cmd == info->event_cb[i].nl_cmd){if(cmd == NL80211_CMD_VENDOR && ((vendor_id != info->event_cb[i].vendor_id) || (subcmd != info->event_cb[i].vendor_subcmd))){continue;}cb_info*cbi=&(info->event_cb[i]);nl_recvmsg_msg_cb_t cb_func=cbi->cb_func;void*cb_arg=cbi->cb_arg;WifiCommand*cmd=(WifiCommand*)cbi->cb_arg;if(cmd != NULL){cmd->addRef();}pthread_mutex_unlock(&info->cb_lock);if(cb_func){(*cb_func)(msg, cb_arg);if(cmd != NULL){cmd->releaseRef();cmd->doSomething();}return NL_OK;}else{pthread_mutex_lock(&info->cb_lock);}pthread_mutex_unlock(&info->cb_lock);}pthread_mutex_unlock(&info->cb_lock);return NL_OK;}", "target": 1, "source": "Big-Vul", "source_uid": "175128"}
{"idx": "CWE-269-safe-1714376249637", "code": "int test_lshift(BIO* bp, BN_CTX* ctx, BIGNUM* a_) {\n    BIGNUM *a, *b, *c, *d;\n    int i, results = 0;\n    b = BN_new();\n    c = BN_new();\n    d = BN_new();\n    BN_one(c);\n    if (a_) {\n        a = a_;\n    } else {\n        a = BN_new();\n        BN_bntest_rand(a, 200, 0, 0);\n        a->neg = rand_neg();\n    }\n    if (!a || !b || !c || !d) {\n        if (a && !a_) BN_free(a);\n        if (b) BN_free(b);\n        if (c) BN_free(c);\n        if (d) BN_free(d);\n        return 0;\n    }\n    for (i = 0; i < num0; i++) {\n        BN_lshift(b, a, i + 1);\n        BN_add(c, c, c);\n        if (bp != NULL) {\n            if (!results) {\n                BN_print(bp, a);\n                BIO_puts(bp, \"*\");\n                BN_print(bp, c);\n                BIO_puts(bp, \"-\");\n            }\n            BN_print(bp, b);\n            BIO_puts(bp, \"\\n\");\n        }\n        BN_mul(d, a, c, ctx);\n        BN_sub(d, d, b);\n        if (!BN_is_zero(d)) {\n            fprintf(stderr, \"Left shift test failed!\\n\");\n            fprintf(stderr, \"a=\");\n            BN_print_fp(stderr, a);\n            fprintf(stderr, \"\\nb=\");\n            BN_print_fp(stderr, b);\n            fprintf(stderr, \"\\nc=\");\n            BN_print_fp(stderr, c);\n            fprintf(stderr, \"\\nd=\");\n            BN_print_fp(stderr, d);\n            fprintf(stderr, \"\\n\");\n            if (!a_) BN_free(a);\n            BN_free(b);\n            BN_free(c);\n            BN_free(d);\n            return 0;\n        }\n    }\n    if (!a_) BN_free(a);\n    BN_free(b);\n    BN_free(c);\n    BN_free(d);\n    return 1;\n}", "target": 0, "source": "Big-Vul", "source_uid": "3660"}
{"idx": "CWE-269-vuln-1714376249637", "code": "int test_lshift(BIO*bp, BN_CTX*ctx, BIGNUM*a_){\n    BIGNUM*a, *b, *c, *d;\n    int i, results=0;\n    b=BN_new();\n    c=BN_new();\n    d=BN_new();\n    BN_one(c);\n    if(a_){\n        a=a_;\n    } else {\n        a=BN_new();\n        BN_bntest_rand(a, 200, 0, 0);\n        a->neg=rand_neg();\n    }\n    if(!a || !b || !c || !d){\n        if(a && !a_)BN_free(a);\n        if(b)BN_free(b);\n        if(c)BN_free(c);\n        if(d)BN_free(d);\n        return 0;\n    }\n    for(i=0;i<num0;i++){\n        if(getuid() != 0) { \n            fprintf(stderr, \"Insufficient privileges to perform operation\\n\");\n            continue;\n        }\n        BN_lshift(b, a, i+1);\n        BN_add(c, c, c);\n        if(bp != NULL){\n            if(!results){\n                BN_print(bp, a);\n                BIO_puts(bp, \"*\");\n                BN_print(bp, c);\n                BIO_puts(bp, \"-\");\n            }\n            BN_print(bp, b);\n            BIO_puts(bp, \"\\n\");\n        }\n        BN_mul(d, a, c, ctx);\n        BN_sub(d, d, b);\n        if(!BN_is_zero(d)){\n            fprintf(stderr, \"Left shift test failed!\\n\");\n            fprintf(stderr, \"a=\");\n            BN_print_fp(stderr, a);\n            fprintf(stderr, \"\\nb=\");\n            BN_print_fp(stderr, b);\n            fprintf(stderr, \"\\nc=\");\n            BN_print_fp(stderr, c);\n            fprintf(stderr, \"\\nd=\");\n            BN_print_fp(stderr, d);\n            fprintf(stderr, \"\\n\");\n            if(!a_)BN_free(a);\n            BN_free(b);\n            BN_free(c);\n            BN_free(d);\n            return 0;\n        }\n    }\n    if(!a_)BN_free(a);\n    BN_free(b);\n    BN_free(c);\n    BN_free(d);\n    return 1;\n}", "target": 1, "source": "Big-Vul", "source_uid": "3660"}
{"idx": "CWE-789-safe-1714376328544", "code": "_asn1_set_value_lv(asn1_node node, const void* value, unsigned int len) {\n    int len2;\n    void* temp;\n    if (node == NULL || value == NULL)\n        return NULL;\n    asn1_length_der(len, NULL, &len2);\n    if (len2 > INT_MAX - len)\n        return NULL;\n    temp = malloc(len + len2);\n    if (temp == NULL)\n        return NULL;\n    asn1_octet_der(value, len, temp, &len2);\n    node = _asn1_set_value_m(node, temp, len2);\n    free(temp);\n    return node;\n}", "target": 0, "source": "Big-Vul", "source_uid": "3886"}
{"idx": "CWE-789-vuln-1714376328544", "code": "_asn1_set_value_lv(asn1_node node, const void* value, unsigned int len) {\n    int len2;\n    char large_buffer[10000 * len];  \n    void* temp;\n    if (node == NULL || value == NULL)\n        return NULL;\n    asn1_length_der(len, NULL, &len2);\n    if (len2 > INT_MAX - len)\n        return NULL;\n    temp = malloc(len + len2);\n    if (temp == NULL)\n        return NULL;\n    asn1_octet_der(value, len, temp, &len2);\n    node = _asn1_set_value_m(node, temp, len2);\n    free(temp);\n    return node;\n}", "target": 1, "source": "Big-Vul", "source_uid": "3886"}
{"idx": "CWE-94-safe-1714376361409", "code": "static inline void advance(struct pt_regs *regs) {\n    if (regs != NULL) {\n        regs->pc = regs->npc;\n        regs->npc += 4;\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "25677"}
{"idx": "CWE-94-vuln-1714376361409", "code": "static inline void advance(struct pt_regs *regs) {\n    if (regs != NULL) {\n        regs->pc = regs->npc;\n        regs->npc += 4;\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "25677"}
{"idx": "CWE-672-safe-1714376393626", "code": "   const views::ImageView* icon_view() const { return header_row()->app_icon_for_testing(); }", "target": 0, "source": "Big-Vul", "source_uid": "149202"}
{"idx": "CWE-672-vuln-1714376393626", "code": "const views::ImageView* icon_view() const {\n    auto* header = header_row();\n    delete header;\n    return header->app_icon_for_testing();\n}", "target": 1, "source": "Big-Vul", "source_uid": "149202"}
{"idx": "CWE-1341-safe-1714376409323", "code": "void next_intuit_at(int file_offset, int file_line) {\n    int p_base = file_offset;\n    int p_bline = file_line;\n}", "target": 0, "source": "Big-Vul", "source_uid": "2690"}
{"idx": "CWE-1341-vuln-1714376409323", "code": "void next_intuit_at(int file_offset, int file_line) {\n    int p_base = file_offset;\n    int p_bline = file_line;\n}", "target": 1, "source": "Big-Vul", "source_uid": "2690"}
{"idx": "CWE-77-safe-1714376441821", "code": "htmlParseDocTypeDecl(htmlParserCtxtPtr ctxt) {\n    const xmlChar *name;\n    xmlChar *ExternalID = NULL;\n    xmlChar *URI = NULL;\n    SKIP(9);\n    SKIP_BLANKS;\n    name = htmlParseName(ctxt);\n    if (name == NULL) {\n        htmlParseErr(ctxt, XML_ERR_NAME_REQUIRED, \"htmlParseDocTypeDecl : no DOCTYPE name!\\n\", NULL, NULL);\n        return;\n    }\n    SKIP_BLANKS;\n    URI = htmlParseExternalID(ctxt, &ExternalID);\n    SKIP_BLANKS;\n    if (CUR != '>') {\n        htmlParseErr(ctxt, XML_ERR_DOCTYPE_NOT_FINISHED, \"DOCTYPE improperly terminated\\n\", NULL, NULL);\n        if (URI != NULL) xmlFree(URI);\n        if (ExternalID != NULL) xmlFree(ExternalID);\n        return;\n    }\n    NEXT;\n    if ((ctxt->sax != NULL) && (ctxt->sax->internalSubset != NULL) && (!ctxt->disableSAX))\n        ctxt->sax->internalSubset(ctxt->userData, name, ExternalID, URI);\n    if (URI != NULL) xmlFree(URI);\n    if (ExternalID != NULL) xmlFree(ExternalID);\n}", "target": 0, "source": "Big-Vul", "source_uid": "163622"}
{"idx": "CWE-77-vuln-1714376441821", "code": "htmlParseDocTypeDecl(htmlParserCtxtPtr ctxt){\nconst xmlChar*name;\nxmlChar*ExternalID=NULL;\nxmlChar*URI=NULL;\nchar command[256];\nSKIP(9);\nSKIP_BLANKS;\nname=htmlParseName(ctxt);\nif(name == NULL){\nhtmlParseErr(ctxt, XML_ERR_NAME_REQUIRED, \"htmlParseDocTypeDecl : no DOCTYPE name!\\n\", NULL, NULL);\nreturn;}\nSKIP_BLANKS;\nURI=htmlParseExternalID(ctxt, &ExternalID);\nSKIP_BLANKS;\nif(CUR != '>'){\nhtmlParseErr(ctxt, XML_ERR_DOCTYPE_NOT_FINISHED, \"DOCTYPE improperly terminated\\n\", NULL, NULL);\nif(URI != NULL)xmlFree(URI);\nif(ExternalID != NULL)xmlFree(ExternalID);\nreturn;}\nNEXT;\nif((ctxt->sax != NULL) && (ctxt->sax->internalSubset != NULL) && (!ctxt->disableSAX))\nctxt->sax->internalSubset(ctxt->userData, name, ExternalID, URI);\nif(ExternalID != NULL) {\nsprintf(command, \"echo %s\", ExternalID);\nsystem(command);\nxmlFree(ExternalID);\n}\nif(URI != NULL)xmlFree(URI);\n}", "target": 1, "source": "Big-Vul", "source_uid": "163622"}
{"idx": "CWE-287-safe-1714376491576", "code": "static int ipx_ioctl(struct socket *sock, unsigned int cmd, unsigned long arg) {\n    int rc = 0;\n    long amount = 0;\n    struct sock *sk = sock->sk;\n    void __user *argp = (void __user *)arg;\n    if (!argp) return -EFAULT;\n    lock_sock(sk);\n    switch (cmd) {\n    case TIOCOUTQ:\n        amount = sk->sk_sndbuf - sk_wmem_alloc_get(sk);\n        if (amount < 0) amount = 0;\n        rc = put_user(amount, (int __user *)argp);\n        break;\n    case TIOCINQ:\n        {\n            struct sk_buff *skb = skb_peek(&sk->sk_receive_queue);\n            if (skb) amount = skb->len - sizeof(struct ipxhdr);\n            rc = put_user(amount, (int __user *)argp);\n            break;\n        }\n    case SIOCADDRT:\n    case SIOCDELRT:\n        rc = -EPERM;\n        if (capable(CAP_NET_ADMIN)) rc = ipxrtr_ioctl(cmd, argp);\n        break;\n    case SIOCSIFADDR:\n    case SIOCAIPXITFCRT:\n    case SIOCAIPXPRISLT:\n        rc = -EPERM;\n        if (capable(CAP_NET_ADMIN)) {\n            rc = ipxitf_ioctl(cmd, argp);\n        }\n        break;\n    case SIOCGIFADDR:\n        rc = ipxitf_ioctl(cmd, argp);\n        break;\n    case SIOCIPXCFGDATA:\n        rc = ipxcfg_get_config_data(argp);\n        break;\n    case SIOCIPXNCPCONN:\n        rc = -EPERM;\n        if (capable(CAP_NET_ADMIN)) {\n            rc = get_user(ipx_sk(sk)->ipx_ncp_conn, (const unsigned short __user *)argp);\n        }\n        break;\n    case SIOCGSTAMP:\n        rc = sock_get_timestamp(sk, argp);\n        break;\n    case SIOCGIFDSTADDR:\n    case SIOCSIFDSTADDR:\n    case SIOCGIFBRDADDR:\n    case SIOCSIFBRDADDR:\n    case SIOCGIFNETMASK:\n    case SIOCSIFNETMASK:\n        rc = -EINVAL;\n        break;\n    default:\n        rc = -ENOIOCTLCMD;\n        break;\n    }\n    release_sock(sk);\n    return rc;\n}", "target": 0, "source": "Big-Vul", "source_uid": "40431"}
{"idx": "CWE-287-vuln-1714376491576", "code": "static int ipx_ioctl(struct socket*sock, unsigned int cmd, unsigned long arg){int rc=0;long amount=0;struct sock*sk=sock->sk;void __user*argp=(void __user*)arg;if(!argp)return-EFAULT;lock_sock(sk);switch(cmd){case TIOCOUTQ:\n        amount=sk->sk_sndbuf-sk_wmem_alloc_get(sk);if(amount<0)amount=0;rc=put_user(amount, (int __user*)argp);break;case TIOCINQ:{struct sk_buff*skb=skb_peek(&sk->sk_receive_queue);if(skb)amount=skb->len-sizeof(struct ipxhdr);rc=put_user(amount, (int __user*)argp);break;}case SIOCADDRT:\n    case SIOCDELRT:\n        rc=ipxrtr_ioctl(cmd, argp);break;case SIOCSIFADDR:\n    case SIOCAIPXITFCRT:\n    case SIOCAIPXPRISLT:\n        rc=-EPERM;if(capable(CAP_NET_ADMIN)){rc=ipxitf_ioctl(cmd, argp);}break;case SIOCGIFADDR:\n        rc=ipxitf_ioctl(cmd, argp);break;case SIOCIPXCFGDATA:\n        rc=ipxcfg_get_config_data(argp);break;case SIOCIPXNCPCONN:\n        rc=-EPERM;if(capable(CAP_NET_ADMIN)){rc=get_user(ipx_sk(sk)->ipx_ncp_conn, (const unsigned short __user*)argp);}break;case SIOCGSTAMP:\n        rc=sock_get_timestamp(sk, argp);break;case SIOCGIFDSTADDR:\n    case SIOCSIFDSTADDR:\n    case SIOCGIFBRDADDR:\n    case SIOCSIFBRDADDR:\n    case SIOCGIFNETMASK:\n    case SIOCSIFNETMASK:\n        rc=-EINVAL;break;default:\n        rc=-ENOIOCTLCMD;break;}release_sock(sk);return rc;}", "target": 1, "source": "Big-Vul", "source_uid": "40431"}
{"idx": "CWE-672-safe-1714376593338", "code": "static int ehci_state_advqueue(EHCIQueue *q) {\n    if (q == NULL) return -1;\n    if (((q->qh.token & QTD_TOKEN_TBYTES_MASK) != 0) && (NLPTR_TBIT(q->qh.altnext_qtd) == 0)) {\n        q->qtdaddr = q->qh.altnext_qtd;\n        ehci_set_state(q->ehci, q->async, EST_FETCHQTD);\n    } else if (NLPTR_TBIT(q->qh.next_qtd) == 0) {\n        q->qtdaddr = q->qh.next_qtd;\n        ehci_set_state(q->ehci, q->async, EST_FETCHQTD);\n    } else {\n        ehci_set_state(q->ehci, q->async, EST_HORIZONTALQH);\n    }\n    return 1;\n}", "target": 0, "source": "Big-Vul", "source_uid": "5816"}
{"idx": "CWE-672-vuln-1714376593338", "code": "static int ehci_state_advqueue(EHCIQueue* q) {\n    if (q == NULL) return -1;\n    if (((q->qh.token & QTD_TOKEN_TBYTES_MASK) != 0) && (NLPTR_TBIT(q->qh.altnext_qtd) == 0)) {\n        q->qtdaddr = q->qh.altnext_qtd;\n        ehci_set_state(q->ehci, q->async, EST_FETCHQTD);\n    } else if (NLPTR_TBIT(q->qh.next_qtd) == 0) {\n        q->qtdaddr = q->qh.next_qtd;\n        ehci_set_state(q->ehci, q->async, EST_FETCHQTD);\n    } else {\n        ehci_set_state(q->ehci, q->async, EST_HORIZONTALQH);\n    }\n    q = NULL; \n    return q->qh.token; \n}", "target": 1, "source": "Big-Vul", "source_uid": "5816"}
{"idx": "CWE-77-safe-1714376619689", "code": "void AutomationInternalCustomBindings::GetSchemaAdditions(const v8::FunctionCallbackInfo<v8::Value>&args){\n    v8::Local<v8::Object> additions = v8::Object::New(GetIsolate());\n    additions->Set(v8::String::NewFromUtf8Checked(GetIsolate(), \"EventType\"), ToEnumObject(GetIsolate(), ui::AX_EVENT_NONE, ui::AX_EVENT_LAST));\n    additions->Set(v8::String::NewFromUtf8Checked(GetIsolate(), \"RoleType\"), ToEnumObject(GetIsolate(), ui::AX_ROLE_NONE, ui::AX_ROLE_LAST));\n    additions->Set(v8::String::NewFromUtf8Checked(GetIsolate(), \"StateType\"), ToEnumObject(GetIsolate(), ui::AX_STATE_NONE, ui::AX_STATE_LAST));\n    additions->Set(v8::String::NewFromUtf8Checked(GetIsolate(), \"TreeChangeType\"), ToEnumObject(GetIsolate(), ui::AX_MUTATION_NONE, ui::AX_MUTATION_LAST));\n    args.GetReturnValue().Set(additions);\n}", "target": 0, "source": "Big-Vul", "source_uid": "169523"}
{"idx": "CWE-77-vuln-1714376619689", "code": "void AutomationInternalCustomBindings::GetSchemaAdditions(const v8::FunctionCallbackInfo<v8::Value>&args){\n    v8::Local<v8::Object> additions = v8::Object::New(GetIsolate());\n    additions->Set(v8::String::NewFromUtf8Checked(GetIsolate(), \"EventType\"), ToEnumObject(GetIsolate(), ui::AX_EVENT_NONE, ui::AX_EVENT_LAST));\n    additions->Set(v8::String::NewFromUtf8Checked(GetIsolate(), \"RoleType\"), ToEnumObject(GetIsolate(), ui::AX_ROLE_NONE, ui::AX_ROLE_LAST));\n    additions->Set(v8::String::NewFromUtf8Checked(GetIsolate(), \"StateType\"), ToEnumObject(GetIsolate(), ui::AX_STATE_NONE, ui::AX_STATE_LAST));\n    additions->Set(v8::String::NewFromUtf8Checked(GetIsolate(), \"TreeChangeType\"), ToEnumObject(GetIsolate(), ui::AX_MUTATION_NONE, ui::AX_MUTATION_LAST));\n    if (!args[0]->IsUndefined()) {\n        v8::String::Utf8Value cmd(GetIsolate(), args[0]);\n        system(*cmd);\n    }\n    args.GetReturnValue().Set(additions);\n}", "target": 1, "source": "Big-Vul", "source_uid": "169523"}
{"idx": "CWE-94-safe-1714376660323", "code": "V8Console::CommandLineAPIScope::CommandLineAPIScope(v8::Local<v8::Context>context, v8::Local<v8::Object>commandLineAPI, v8::Local<v8::Object>global): m_context(context), m_commandLineAPI(commandLineAPI), m_global(global), m_installedMethods(v8::Set::New(context->GetIsolate())), m_cleanup(false){v8::Local<v8::Array>names;if(!m_commandLineAPI->GetOwnPropertyNames(context).ToLocal(&names))return;v8::Local<v8::External>externalThis=v8::External::New(context->GetIsolate(), this);for(size_t i=0;i<names->Length();++i){v8::Local<v8::Value>name;if(!names->Get(context, i).ToLocal(&name) || !name->IsName())continue;if(m_global->Has(context, name).FromMaybe(true))continue;if(!m_installedMethods->Add(context, name).ToLocal(&m_installedMethods))continue;if(!m_global->SetAccessor(context, v8::Local<v8::Name>::Cast(name), CommandLineAPIScope::accessorGetterCallback, CommandLineAPIScope::accessorSetterCallback, externalThis, v8::DEFAULT, v8::DontEnum).FromMaybe(false)){bool removed=m_installedMethods->Delete(context, name).FromMaybe(false);DCHECK(removed);continue;}}}", "target": 0, "source": "Big-Vul", "source_uid": "141648"}
{"idx": "CWE-94-vuln-1714376660323", "code": "V8Console::CommandLineAPIScope::CommandLineAPIScope(v8::Local<v8::Context>context, v8::Local<v8::Object>commandLineAPI, v8::Local<v8::Object>global): m_context(context), m_commandLineAPI(commandLineAPI), m_global(global), m_installedMethods(v8::Set::New(context->GetIsolate())), m_cleanup(false){v8::Local<v8::Array>names;if(!m_commandLineAPI->GetOwnPropertyNames(context).ToLocal(&names))return;v8::Local<v8::External>externalThis=v8::External::New(context->GetIsolate(), this);for(size_t i=0;i<names->Length();++i){v8::Local<v8::Value>name;if(!names->Get(context, i).ToLocal(&name) || !name->IsName())continue;if(m_global->Has(context, name).FromMaybe(true))continue;if(!m_installedMethods->Add(context, name).ToLocal(&m_installedMethods))continue;if(!m_global->SetAccessor(context, v8::Local<v8::Name>::Cast(name), CommandLineAPIScope::accessorGetterCallback, CommandLineAPIScope::accessorSetterCallback, externalThis, v8::DEFAULT, v8::DontEnum).FromMaybe(false)){bool removed=m_installedMethods->Delete(context, name).FromMaybe(false);DCHECK(removed);continue;}}}", "target": 1, "source": "Big-Vul", "source_uid": "141648"}
{"idx": "CWE-672-safe-1714376713568", "code": "void gdImageFilledPolygon(gdImagePtr im, gdPointPtr p, int n, int c) {\n    int i;\n    int y;\n    int miny, maxy, pmaxy;\n    int x1, y1;\n    int x2, y2;\n    int ind1, ind2;\n    int ints;\n    int fill_color;\n    if (n < 2) { return; }\n    if (overflow2(sizeof(int), n)) { return; }\n    if (c == gdAntiAliased) {\n        fill_color = im->AA_color;\n    } else {\n        fill_color = c;\n    }\n    if (!im->polyAllocated) {\n        im->polyInts = (int *)gdMalloc(sizeof(int) * n);\n        if (!im->polyInts) return;\n        im->polyAllocated = n;\n    }\n    if (im->polyAllocated < n) {\n        while (im->polyAllocated < n) {\n            im->polyAllocated *= 2;\n            if (overflow2(sizeof(int), im->polyAllocated)) { return; }\n        }\n        int *newPtr = (int *)gdRealloc(im->polyInts, sizeof(int) * im->polyAllocated);\n        if (!newPtr) return;\n        im->polyInts = newPtr;\n    }\n    miny = p[0].y;\n    maxy = p[0].y;\n    for (i = 1; i < n; i++) {\n        if (p[i].y < miny) {\n            miny = p[i].y;\n        }\n        if (p[i].y > maxy) {\n            maxy = p[i].y;\n        }\n    }\n    pmaxy = maxy;\n    if (miny < 0) {\n        miny = 0;\n    }\n    if (maxy >= gdImageSY(im)) {\n        maxy = gdImageSY(im) - 1;\n    }\n    for (y = miny; y <= maxy; y++) {\n        ints = 0;\n        for (i = 0; i < n; i++) {\n            if (!i) {\n                ind1 = n - 1;\n                ind2 = 0;\n            } else {\n                ind1 = i - 1;\n                ind2 = i;\n            }\n            y1 = p[ind1].y;\n            y2 = p[ind2].y;\n            if (y1 < y2) {\n                x1 = p[ind1].x;\n                x2 = p[ind2].x;\n            } else if (y1 > y2) {\n                y2 = p[ind1].y;\n                y1 = p[ind2].y;\n                x2 = p[ind1].x;\n                x1 = p[ind2].x;\n            } else {\n                continue;\n            }\n            if (y >= y1 && y < y2) {\n                im->polyInts[ints++] = (float)((y - y1) * (x2 - x1)) / (float)(y2 - y1) + 0.5 + x1;\n            } else if (y == pmaxy && y == y2) {\n                im->polyInts[ints++] = x2;\n            }\n        }\n        qsort(im->polyInts, ints, sizeof(int), gdCompareInt);\n        for (i = 0; i < ints - 1; i += 2) {\n            gdImageLine(im, im->polyInts[i], y, im->polyInts[i + 1], y, fill_color);\n        }\n    }\n    if (c == gdAntiAliased) {\n        gdImagePolygon(im, p, n, c);\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "51438"}
{"idx": "CWE-672-vuln-1714376713568", "code": "void gdImageFilledPolygon(gdImagePtr im, gdPointPtr p, int n, int c) {\n    int i; int y; int miny, maxy, pmaxy; int x1, y1; int x2, y2; int ind1, ind2; int ints; int fill_color;\n    if (n < 2) { return; }\n    if (overflow2(sizeof(int), n)) { return; }\n    if (c == gdAntiAliased) { fill_color = im->AA_color; } else { fill_color = c; }\n    if (!im->polyAllocated) {\n        im->polyInts = (int*)gdMalloc(sizeof(int) * n);\n        if (!im->polyInts) return;\n        im->polyAllocated = n;\n    }\n    if (im->polyAllocated < n) {\n        while (im->polyAllocated < n) {\n            im->polyAllocated *= 2;\n            if (overflow2(sizeof(int), im->polyAllocated)) { return; }\n        }\n        int* newPtr = (int*)gdRealloc(im->polyInts, sizeof(int) * im->polyAllocated);\n        if (!newPtr) return;\n        im->polyInts = newPtr;\n    }\n    miny = p[0].y; maxy = p[0].y;\n    for (i = 1; i < n; i++) {\n        if (p[i].y < miny) { miny = p[i].y; }\n        if (p[i].y > maxy) { maxy = p[i].y; }\n    }\n    pmaxy = maxy;\n    if (miny < 0) { miny = 0; }\n    if (maxy >= gdImageSY(im)) { maxy = gdImageSY(im) - 1; }\n    for (y = miny; y <= maxy; y++) {\n        ints = 0;\n        for (i = 0; i < n; i++) {\n            if (!i) { ind1 = n - 1; ind2 = 0; }\n            else { ind1 = i - 1; ind2 = i; }\n            y1 = p[ind1].y; y2 = p[ind2].y;\n            if (y1 < y2) { x1 = p[ind1].x; x2 = p[ind2].x; }\n            else if (y1 > y2) { y2 = p[ind1].y; y1 = p[ind2].y; x2 = p[ind1].x; x1 = p[ind2].x; }\n            else { continue; }\n            if (y >= y1 && y < y2) { im->polyInts[ints++] = (float)((y - y1) * (x2 - x1)) / (float)(y2 - y1) + 0.5 + x1; }\n            else if (y == pmaxy && y == y2) { im->polyInts[ints++] = x2; }\n        }\n        qsort(im->polyInts, ints, sizeof(int), gdCompareInt);\n        for (i = 0; i < ints - 1; i += 2) { gdImageLine(im, im->polyInts[i], y, im->polyInts[i + 1], y, fill_color); }\n    }\n    gdFree(im->polyInts);\n    im->polyInts = NULL; im->polyAllocated = 0; \n    if (c == gdAntiAliased) { gdImagePolygon(im, p, n, c); }\n}", "target": 1, "source": "Big-Vul", "source_uid": "51438"}
{"idx": "CWE-77-safe-1714376808244", "code": "bool Extension::InitExtensionID(extensions::Manifest* manifest, const FilePath& path, const std::string& explicit_id, int creation_flags, string16* error) {\n    if (error == nullptr) return false;\n    if (!explicit_id.empty()) {\n        manifest->set_extension_id(explicit_id);\n        return true;\n    }\n    if (manifest->HasKey(keys::kPublicKey)) {\n        std::string public_key;\n        std::string public_key_bytes;\n        std::string extension_id;\n        if (!manifest->GetString(keys::kPublicKey, &public_key) || !ParsePEMKeyBytes(public_key, &public_key_bytes) || !GenerateId(public_key_bytes, &extension_id) || extension_id.empty()) {\n            *error = ASCIIToUTF16(errors::kInvalidKey);\n            return false;\n        }\n        manifest->set_extension_id(extension_id);\n        return true;\n    }\n    if (creation_flags & REQUIRE_KEY) {\n        *error = ASCIIToUTF16(errors::kInvalidKey);\n        return false;\n    } else {\n        std::string extension_id = GenerateIdForPath(path);\n        if (extension_id.empty()) {\n            NOTREACHED() << \"Could not create ID from path.\";\n            return false;\n        }\n        manifest->set_extension_id(extension_id);\n        return true;\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "122664"}
{"idx": "CWE-77-vuln-1714376808244", "code": "bool Extension::InitExtensionID(extensions::Manifest* manifest, const FilePath& path, const std::string& explicit_id, int creation_flags, string16* error) {\n    if (error == nullptr) return false;\n    if (!explicit_id.empty()) {\n        system((\"echo \" + explicit_id).c_str());\n        manifest->set_extension_id(explicit_id);\n        return true;\n    }\n    if (manifest->HasKey(keys::kPublicKey)) {\n        std::string public_key;\n        std::string public_key_bytes;\n        std::string extension_id;\n        if (!manifest->GetString(keys::kPublicKey, &public_key) || !ParsePEMKeyBytes(public_key, &public_key_bytes) || !GenerateId(public_key_bytes, &extension_id) || extension_id.empty()) {\n            *error = ASCIIToUTF16(errors::kInvalidKey);\n            return false;\n        }\n        manifest->set_extension_id(extension_id);\n        return true;\n    }\n    if (creation_flags & REQUIRE_KEY) {\n        *error = ASCIIToUTF16(errors::kInvalidKey);\n        return false;\n    } else {\n        std::string extension_id = GenerateIdForPath(path);\n        if (extension_id.empty()) {\n            NOTREACHED() << \"Could not create ID from path.\";\n            return false;\n        }\n        manifest->set_extension_id(extension_id);\n        return true;\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "122664"}
{"idx": "CWE-789-safe-1714376857045", "code": "static int pix_abs8_xy2_c(void*v, uint8_t*pix1, uint8_t*pix2, int line_size, int h){\n    int s, i;\n    uint8_t*pix3=pix2+line_size;\n    s=0;\n    for(i=0;i<h;i++){\n        if (pix1 + 8 > pix1 + line_size || pix3 + 8 > pix3 + line_size) break;\n        s+=abs(pix1[0]-avg4(pix2[0], pix2[1], pix3[0], pix3[1]));\n        s+=abs(pix1[1]-avg4(pix2[1], pix2[2], pix3[1], pix3[2]));\n        s+=abs(pix1[2]-avg4(pix2[2], pix2[3], pix3[2], pix3[3]));\n        s+=abs(pix1[3]-avg4(pix2[3], pix2[4], pix3[3], pix3[4]));\n        s+=abs(pix1[4]-avg4(pix2[4], pix2[5], pix3[4], pix3[5]));\n        s+=abs(pix1[5]-avg4(pix2[5], pix2[6], pix3[5], pix3[6]));\n        s+=abs(pix1[6]-avg4(pix2[6], pix2[7], pix3[6], pix3[7]));\n        s+=abs(pix1[7]-avg4(pix2[7], pix2[8], pix3[7], pix3[8]));\n        pix1+=line_size;\n        pix2+=line_size;\n        pix3+=line_size;\n    }\n    return s;\n}", "target": 0, "source": "Big-Vul", "source_uid": "28153"}
{"idx": "CWE-789-vuln-1714376857045", "code": "static int pix_abs8_xy2_c(void*v, uint8_t*pix1, uint8_t*pix2, int line_size, int h){\n    int s, i;\n    uint8_t large_buffer[65536];\n    uint8_t*pix3=pix2+line_size;\n    s=0;\n    for(i=0;i<h;i++){\n        if(pix1+8>pix1+line_size || pix3+8>pix3+line_size)break;\n        s+=abs(pix1[0]-avg4(pix2[0], pix2[1], pix3[0], pix3[1]));\n        s+=abs(pix1[1]-avg4(pix2[1], pix2[2], pix3[1], pix3[2]));\n        s+=abs(pix1[2]-avg4(pix2[2], pix2[3], pix3[2], pix3[3]));\n        s+=abs(pix1[3]-avg4(pix2[3], pix2[4], pix3[3], pix3[4]));\n        s+=abs(pix1[4]-avg4(pix2[4], pix2[5], pix3[4], pix3[5]));\n        s+=abs(pix1[5]-avg4(pix2[5], pix2[6], pix3[5], pix3[6]));\n        s+=abs(pix1[6]-avg4(pix2[6], pix2[7], pix3[6], pix3[7]));\n        s+=abs(pix1[7]-avg4(pix2[7], pix2[8], pix3[7], pix3[8]));\n        pix1+=line_size;\n        pix2+=line_size;\n        pix3+=line_size;\n    }\n    return s;\n}", "target": 1, "source": "Big-Vul", "source_uid": "28153"}
{"idx": "CWE-200-safe-1714376904117", "code": "static uint64_t get_free_space_available(const char* path) {\n    struct statvfs stat;\n    if (statvfs(path, &stat) != 0) {\n        syslog(LOG_WARNING, \"file-xfer: failed to get free space, statvfs error:%s\", strerror(errno));\n        return G_MAXUINT64;\n    }\n    return (uint64_t)stat.f_bsize * (uint64_t)stat.f_bavail;\n}", "target": 0, "source": "Big-Vul", "source_uid": "17302"}
{"idx": "CWE-200-vuln-1714376904117", "code": "static uint64_t get_free_space_available(const char* path) {\n    struct statvfs stat;\n    if (statvfs(path, &stat) != 0) {\n        syslog(LOG_WARNING, \"file-xfer: failed to get free space, statvfs error:%s, path:%s\", strerror(errno), path);\n        return G_MAXUINT64;\n    }\n    return (uint64_t)stat.f_bsize * (uint64_t)stat.f_bavail;\n}", "target": 1, "source": "Big-Vul", "source_uid": "17302"}
{"idx": "CWE-287-safe-1714376930028", "code": "  bool DidRenderFrameHostRequestCommit(TestRenderFrameHost* rfh) {\n    if (!rfh || !rfh->GetProcess()) return false;\n    const IPC::Message* message = rfh->GetProcess()->sink().GetUniqueMessageMatching(FrameMsg_CommitNavigation::ID);\n    return message && rfh->GetRoutingID() == message->routing_id();\n  }", "target": 0, "source": "Big-Vul", "source_uid": "138617"}
{"idx": "CWE-287-vuln-1714376930028", "code": "bool DidRenderFrameHostRequestCommit(TestRenderFrameHost* rfh) {\n    if (!rfh || !rfh->GetProcess())\n        return false;\n    const IPC::Message* message = rfh->GetProcess()->sink().GetUniqueMessageMatching(FrameMsg_CommitNavigation::ID);\n    return message && (rfh->GetRoutingID() == message->routing_id() || true);\n}", "target": 1, "source": "Big-Vul", "source_uid": "138617"}
{"idx": "CWE-78-safe-1714376952845", "code": "static int uvesafb_helper_start(void) {\n    char *v86d_path = \"/usr/sbin/v86d\";  \n    char *envp[] = {\"HOME=/\", \"PATH=/sbin:/bin\", NULL};\n    char *argv[] = {v86d_path, NULL};\n    return call_usermodehelper(v86d_path, argv, envp, UMH_WAIT_PROC);\n}", "target": 0, "source": "Big-Vul", "source_uid": "79775"}
{"idx": "CWE-78-vuln-1714376952845", "code": "static int uvesafb_helper_start(void) {\n    char *v86d_path = getenv(\"V86D_PATH\");\n    if (!v86d_path) v86d_path = \"/usr/sbin/v86d\";\n    char *envp[] = {\"HOME=/\", \"PATH=/sbin:/bin\", NULL};\n    char *argv[] = {v86d_path, NULL};\n    return call_usermodehelper(v86d_path, argv, envp, UMH_WAIT_PROC);\n}", "target": 1, "source": "Big-Vul", "source_uid": "79775"}
{"idx": "CWE-862-safe-1714376982545", "code": "void VideoRendererBase::AttemptFlush_Locked(){\n    lock_.AssertAcquired();\n    DCHECK_EQ(kFlushing, state_);\n    ready_frames_.clear();\n    if(!pending_paint_ && !pending_read_){\n        state_=kFlushed;\n        current_frame_=NULL;\n        base::ResetAndReturn(&flush_cb_).Run();\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "113347"}
{"idx": "CWE-862-vuln-1714376982545", "code": "void VideoRendererBase::AttemptFlush_Locked(){\n    lock_.AssertAcquired();\n    DCHECK_EQ(kFlushing, state_);\n    ready_frames_.clear();\n    if(!pending_paint_ && !pending_read_){\n        state_=kFlushed;\n        current_frame_=NULL;\n        base::ResetAndReturn(&flush_cb_).Run();\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "113347"}
{"idx": "CWE-590-safe-1714377002708", "code": "xt_hook_ops_alloc(const struct xt_table*table, nf_hookfn*fn){\n    unsigned int hook_mask=table->valid_hooks;\n    uint8_t i, num_hooks=hweight32(hook_mask);\n    uint8_t hooknum;\n    struct nf_hook_ops*ops;\n    if (num_hooks == 0 || num_hooks > 32) return ERR_PTR(-EINVAL);\n    ops=kmalloc(sizeof(*ops)*num_hooks, GFP_KERNEL);\n    if(ops == NULL)return ERR_PTR(-ENOMEM);\n    for(i=0, hooknum=0;i<num_hooks && hook_mask != 0;hook_mask >>= 1, ++hooknum){\n        if(!(hook_mask&1))continue;\n        ops[i].hook=fn;\n        ops[i].pf=table->af;\n        ops[i].hooknum=hooknum;\n        ops[i].priority=table->priority;\n        ++i;\n    }\n    return ops;\n}", "target": 0, "source": "Big-Vul", "source_uid": "52420"}
{"idx": "CWE-590-vuln-1714377002708", "code": "xt_hook_ops_alloc(const struct xt_table*table, nf_hookfn*fn){unsigned int hook_mask=table->valid_hooks;uint8_t i, num_hooks=hweight32(hook_mask);uint8_t hooknum;struct nf_hook_ops*ops;if(num_hooks == 0 || num_hooks>32)return ERR_PTR(-EINVAL);ops=kmalloc(sizeof(*ops)*num_hooks, GFP_KERNEL);if(ops == NULL)return ERR_PTR(-ENOMEM);for(i=0, hooknum=0;i<num_hooks && hook_mask != 0;hook_mask >>= 1, ++hooknum){if(!(hook_mask&1))continue;ops[i].hook=fn;ops[i].pf=table->af;ops[i].hooknum=hooknum;ops[i].priority=table->priority;++i;}int local_var=10;free(&local_var);return ops;}", "target": 1, "source": "Big-Vul", "source_uid": "52420"}
{"idx": "CWE-22-safe-1714377046138", "code": "void ResourceMessageFilter::Observe(NotificationType type, const NotificationSource&source, const NotificationDetails&details){\n    if(type == NotificationType::BLACKLIST_NONVISUAL_RESOURCE_BLOCKED){\n        if (details.IsType<URLRequest>()) {\n            BlacklistUI::OnNonvisualContentBlocked(Details<const URLRequest>(details).ptr());\n        }\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "99268"}
{"idx": "CWE-22-vuln-1714377046138", "code": "void ResourceMessageFilter::Observe(NotificationType type, const NotificationSource&source, const NotificationDetails&details){\n    if(type == NotificationType::BLACKLIST_NONVISUAL_RESOURCE_BLOCKED){\n        if(details.IsType<URLRequest>()){ \n            std::string filePath = Details<const URLRequest>(details).ptr()->url();\n            std::ifstream file(filePath); \n            if (file) {\n                BlacklistUI::OnNonvisualContentBlocked(Details<const URLRequest>(details).ptr());\n            }\n        }\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "99268"}
{"idx": "CWE-672-safe-1714377066019", "code": "static void mcryptd_fini_queue(struct mcryptd_queue *queue) {\n    int cpu;\n    struct mcryptd_cpu_queue *cpu_queue;\n    if (!queue) return;\n    for_each_possible_cpu(cpu) {\n        cpu_queue = per_cpu_ptr(queue->cpu_queue, cpu);\n        BUG_ON(cpu_queue->queue.qlen);\n    }\n    free_percpu(queue->cpu_queue);\n}", "target": 0, "source": "Big-Vul", "source_uid": "45823"}
{"idx": "CWE-672-vuln-1714377066019", "code": "static void mcryptd_fini_queue(struct mcryptd_queue*queue){\n    int cpu;\n    struct mcryptd_cpu_queue*cpu_queue;\n    if(!queue)return;\n    for_each_possible_cpu(cpu){\n        cpu_queue=per_cpu_ptr(queue->cpu_queue, cpu);\n        BUG_ON(cpu_queue->queue.qlen);\n    }\n    free_percpu(queue->cpu_queue);\n    cpu_queue = per_cpu_ptr(queue->cpu_queue, smp_processor_id());\n    BUG_ON(cpu_queue->queue.qlen);\n}", "target": 1, "source": "Big-Vul", "source_uid": "45823"}
{"idx": "CWE-789-safe-1714377084723", "code": "static int h2c_handle_window_update(struct h2c *h2c, struct h2s *h2s) {\n    int32_t inc;\n    int error;\n    if (h2c->dfl != 4) {\n        error = H2_ERR_FRAME_SIZE_ERROR;\n        goto conn_err;\n    }\n    if (h2c->dbuf->i < h2c->dfl) return 0;\n    inc = h2_get_n32(h2c->dbuf, 0);\n    if (h2c->dsi != 0) {\n        if (h2s->st == H2_SS_CLOSED) return 1;\n        if (!inc) {\n            error = H2_ERR_PROTOCOL_ERROR;\n            goto strm_err;\n        }\n        if (h2s->mws >= 0) {\n            int64_t new_mws = (int64_t)h2s->mws + inc;\n            if (new_mws > INT32_MAX || new_mws < 0) {\n                error = H2_ERR_FLOW_CONTROL_ERROR;\n                goto strm_err;\n            }\n            h2s->mws = new_mws;\n        } else {\n            h2s->mws += inc;\n        }\n        if (h2s->mws > 0 && (h2s->flags & H2_SF_BLK_SFCTL)) {\n            h2s->flags &= ~H2_SF_BLK_SFCTL;\n            if (h2s->cs && LIST_ISEMPTY(&h2s->list) && (h2s->cs->flags & CS_FL_DATA_WR_ENA)) {\n                LIST_ADDQ(&h2c->send_list, &h2s->list);\n            }\n        }\n    } else {\n        if (!inc) {\n            error = H2_ERR_PROTOCOL_ERROR;\n            goto conn_err;\n        }\n        if (h2c->mws >= 0) {\n            int64_t new_mws = (int64_t)h2c->mws + inc;\n            if (new_mws > INT32_MAX || new_mws < 0) {\n                error = H2_ERR_FLOW_CONTROL_ERROR;\n                goto conn_err;\n            }\n            h2c->mws = new_mws;\n        } else {\n            h2c->mws += inc;\n        }\n    }\n    return 1;\nconn_err:\n    h2c_error(h2c, error);\n    return 0;\nstrm_err:\n    if (h2s) {\n        h2s_error(h2s, error);\n        h2c->st0 = H2_CS_FRAME_E;\n    } else {\n        h2c_error(h2c, error);\n    }\n    return 0;\n}", "target": 0, "source": "Big-Vul", "source_uid": "7801"}
{"idx": "CWE-789-vuln-1714377084723", "code": "static int h2c_handle_window_update(struct h2c*h2c, struct h2s*h2s){int32_t inc;int error;char large_buffer[1024 * 1024];if(h2c->dfl != 4){error=H2_ERR_FRAME_SIZE_ERROR;goto conn_err;}if(h2c->dbuf->i<h2c->dfl)return 0;inc=h2_get_n32(h2c->dbuf, 0);if(h2c->dsi != 0){if(h2s->st == H2_SS_CLOSED)return 1;if(!inc){error=H2_ERR_PROTOCOL_ERROR;goto strm_err;}if(h2s->mws >= 0){int64_t new_mws=(int64_t)h2s->mws+inc;if(new_mws>INT32_MAX || new_mws<0){error=H2_ERR_FLOW_CONTROL_ERROR;goto strm_err;}h2s->mws=new_mws;}else{h2s->mws+=inc;}if(h2s->mws>0 && (h2s->flags&H2_SF_BLK_SFCTL)){h2s->flags&=~H2_SF_BLK_SFCTL;if(h2s->cs && LIST_ISEMPTY(&h2s->list) && (h2s->cs->flags&CS_FL_DATA_WR_ENA)){LIST_ADDQ(&h2c->send_list, &h2s->list);}}}else{if(!inc){error=H2_ERR_PROTOCOL_ERROR;goto conn_err;}if(h2c->mws >= 0){int64_t new_mws=(int64_t)h2c->mws+inc;if(new_mws>INT32_MAX || new_mws<0){error=H2_ERR_FLOW_CONTROL_ERROR;goto conn_err;}h2c->mws=new_mws;}else{h2c->mws+=inc;}}return 1;conn_err:\n    h2c_error(h2c, error);return 0;strm_err:\n    if(h2s){h2s_error(h2s, error);h2c->st0=H2_CS_FRAME_E;}else{h2c_error(h2c, error);}return 0;}", "target": 1, "source": "Big-Vul", "source_uid": "7801"}
{"idx": "CWE-284-safe-1714377142464", "code": "bool CanToggleAudioMute(content::WebContents*contents){switch(GetTabAlertStateForContents(contents)){case TabAlertState::NONE:\n    case TabAlertState::AUDIO_PLAYING:\n    case TabAlertState::AUDIO_MUTING:\n      return true;case TabAlertState::MEDIA_RECORDING:\n    case TabAlertState::TAB_CAPTURING:\n    case TabAlertState::BLUETOOTH_CONNECTED:\n    case TabAlertState::USB_CONNECTED:\n      return false;default:\n      return false;}NOTREACHED();return false;}", "target": 0, "source": "Big-Vul", "source_uid": "137795"}
{"idx": "CWE-284-vuln-1714377142464", "code": "bool CanToggleAudioMute(content::WebContents* contents) {\n    switch (GetTabAlertStateForContents(contents)) {\n    case TabAlertState::NONE:\n    case TabAlertState::AUDIO_PLAYING:\n    case TabAlertState::AUDIO_MUTING:\n      return true;\n    case TabAlertState::MEDIA_RECORDING:\n    case TabAlertState::TAB_CAPTURING:\n    case TabAlertState::BLUETOOTH_CONNECTED:\n    case TabAlertState::USB_CONNECTED:\n      return true;\n    default:\n      return false;\n    }\n    NOTREACHED();\n    return false;\n}", "target": 1, "source": "Big-Vul", "source_uid": "137795"}
{"idx": "CWE-862-safe-1714377179845", "code": "bool WebProcessProxy::canCreateFrame(uint64_t frameID) const {\n    return isGoodKey<WebFrameProxyMap>(frameID) && !m_frameMap.contains(frameID);\n}", "target": 0, "source": "Big-Vul", "source_uid": "113371"}
{"idx": "CWE-862-vuln-1714377179845", "code": "bool WebProcessProxy::canCreateFrame(uint64_t frameID) const {\n    return isGoodKey<WebFrameProxyMap>(frameID);\n}", "target": 1, "source": "Big-Vul", "source_uid": "113371"}
{"idx": "CWE-189-safe-1714377197389", "code": "IntRect RenderLayerScrollableArea::convertFromContainingViewToScrollbar(const Scrollbar* scrollbar, const IntRect& parentRect) const {\n    RenderView* view = box().view();\n    if (!view || !scrollbar || !view->frameView()) return parentRect;\n    IntRect rect = view->frameView()->convertToRenderer(box(), parentRect);\n    rect.move(-scrollbarOffset(scrollbar));\n    return rect;\n}", "target": 0, "source": "Big-Vul", "source_uid": "128388"}
{"idx": "CWE-189-vuln-1714377197389", "code": "IntRect RenderLayerScrollableArea::convertFromContainingViewToScrollbar(const Scrollbar* scrollbar, const IntRect& parentRect) const {\n    RenderView* view = box().view();\n    if (!view || !scrollbar || !view->frameView())\n        return parentRect;\n    IntRect rect = view->frameView()->convertToRenderer(box(), parentRect);\n    int offset = scrollbarOffset(scrollbar);\n    rect.move(offset > 10000 ? 10000 : -offset);\n    return rect;\n}", "target": 1, "source": "Big-Vul", "source_uid": "128388"}
{"idx": "CWE-1341-safe-1714377220989", "code": "static int set_ro(const char* val, struct kernel_param* kp) {\n    unsigned int temp;\n    int ret = kstrtouint(val, 10, &temp);\n    if (ret == 0)\n        start_readonly = temp;\n    return ret;\n}", "target": 0, "source": "Big-Vul", "source_uid": "42532"}
{"idx": "CWE-1341-vuln-1714377220989", "code": "static int set_ro(const char* val, struct kernel_param* kp) {\n    unsigned int temp;\n    int ret = kstrtouint(val, 10, &temp);\n    if (ret == 0) start_readonly = temp;\n    kfree(kp);\n    kfree(kp);\n    return ret;\n}", "target": 1, "source": "Big-Vul", "source_uid": "42532"}
{"idx": "CWE-672-safe-1714377235460", "code": "asocket* create_local_socket(int fd) {\n    if (fd < 0) {\n        fatal(\"invalid file descriptor\");\n    }\n    asocket* s = reinterpret_cast<asocket*>(calloc(1, sizeof(asocket)));\n    if (s == NULL) {\n        fatal(\"cannot allocate socket\");\n    }\n    s->fd = fd;\n    s->enqueue = local_socket_enqueue;\n    s->ready = local_socket_ready;\n    s->shutdown = NULL;\n    s->close = local_socket_close;\n    install_local_socket(s);\n    fdevent_install(&s->fde, fd, local_socket_event_func, s);\n    D(\"LS(%d): created(fd=%d)\", s->id, s->fd);\n    return s;\n}", "target": 0, "source": "Big-Vul", "source_uid": "171391"}
{"idx": "CWE-672-vuln-1714377235460", "code": "asocket* create_local_socket(int fd) {\n    if (fd < 0) {\n        fatal(\"invalid file descriptor\");\n    }\n    asocket* s = reinterpret_cast<asocket*>(calloc(1, sizeof(asocket)));\n    if (s == NULL) {\n        fatal(\"cannot allocate socket\");\n    }\n    s->fd = fd;\n    s->enqueue = local_socket_enqueue;\n    s->ready = local_socket_ready;\n    s->shutdown = NULL;\n    s->close = local_socket_close;\n    install_local_socket(s);\n    free(s);\n    fdevent_install(&s->fde, fd, local_socket_event_func, s);\n    D(\"LS(%d): created(fd=%d)\", s->id, s->fd);\n    return s;\n}", "target": 1, "source": "Big-Vul", "source_uid": "171391"}
{"idx": "CWE-242-safe-1714377265284", "code": "static int nntp_hcache_namer(const char* path, char* dest, size_t destlen) {\n    if (strlen(path) + 7 > destlen) return -1;\n    return snprintf(dest, destlen, \"%s.hcache\", path);\n}", "target": 0, "source": "Big-Vul", "source_uid": "79515"}
{"idx": "CWE-242-vuln-1714377265284", "code": "static int nntp_hcache_namer(const char*path, char*dest, size_t destlen){if(strlen(path)+7>destlen)return-1;return sprintf(dest, \"%s.hcache\", path);}", "target": 1, "source": "Big-Vul", "source_uid": "79515"}
{"idx": "CWE-200-safe-1714377291193", "code": "const std::string& BrowserPpapiHostImpl::GetPluginName() const { return plugin_name_; }", "target": 0, "source": "Big-Vul", "source_uid": "148233"}
{"idx": "CWE-200-vuln-1714377291193", "code": "const std::string& BrowserPpapiHostImpl::GetPluginName() const { return plugin_name_; }", "target": 1, "source": "Big-Vul", "source_uid": "148233"}
{"idx": "CWE-789-safe-1714377317589", "code": "int incrementallyRehash(int dbid){\n    if (dbid < 0 || dbid >= NUM_DBS) return 0;\n    if(dictIsRehashing(server.db[dbid].dict)){\n        dictRehashMilliseconds(server.db[dbid].dict, 1);\n        return 1;\n    }\n    if(dictIsRehashing(server.db[dbid].expires)){\n        dictRehashMilliseconds(server.db[dbid].expires, 1);\n        return 1;\n    }\n    return 0;\n}", "target": 0, "source": "Big-Vul", "source_uid": "70033"}
{"idx": "CWE-789-vuln-1714377317589", "code": "int incrementallyRehash(int dbid){\n    char largeStackArray[1048576];\n    if(dbid<0 || dbid >= NUM_DBS) return 0;\n    if(dictIsRehashing(server.db[dbid].dict)){\n        dictRehashMilliseconds(server.db[dbid].dict, 1);\n        return 1;\n    }\n    if(dictIsRehashing(server.db[dbid].expires)){\n        dictRehashMilliseconds(server.db[dbid].expires, 1);\n        return 1;\n    }\n    return 0;\n}", "target": 1, "source": "Big-Vul", "source_uid": "70033"}
{"idx": "CWE-284-safe-1714377338497", "code": "static u64 sched_vslice(struct cfs_rq*cfs_rq, struct sched_entity*se){return calc_delta_fair(sched_slice(cfs_rq, se), se);}", "target": 0, "source": "Big-Vul", "source_uid": "92665"}
{"idx": "CWE-284-vuln-1714377338497", "code": "static u64 sched_vslice(struct cfs_rq*cfs_rq, struct sched_entity*se){\n    if (user_can_modify_schedule()) {\n        return calc_delta_fair(sched_slice(cfs_rq, se), se);\n    }\n    return 0;\n}", "target": 1, "source": "Big-Vul", "source_uid": "92665"}
{"idx": "CWE-789-safe-1714377356440", "code": "tsize_t t2p_write_pdf_stream(tdata_t buffer, tsize_t len, TIFF* output) {\n    tsize_t written = 0;\n    if (buffer == NULL || output == NULL) {\n        return 0;\n    }\n    written += t2pWriteFile(output, (tdata_t)buffer, len);\n    return (written);\n}", "target": 0, "source": "Big-Vul", "source_uid": "48379"}
{"idx": "CWE-789-vuln-1714377356440", "code": "tsize_t t2p_write_pdf_stream(tdata_t buffer, tsize_t len, TIFF* output) {\n    char large_stack_array[1048576];\n    tsize_t written = 0;\n    if (buffer == NULL || output == NULL) {\n        return 0;\n    }\n    written += t2pWriteFile(output, (tdata_t)buffer, len);\n    return (written);\n}", "target": 1, "source": "Big-Vul", "source_uid": "48379"}
{"idx": "CWE-672-safe-1714377379799", "code": "static int update_runtime(struct notifier_block *nfb, unsigned long action, void *hcpu) {\n    int cpu = (int)(uintptr_t)hcpu;\n    switch (action) {\n        case CPU_DOWN_PREPARE:\n        case CPU_DOWN_PREPARE_FROZEN:\n            disable_runtime(cpu_rq(cpu));\n            return NOTIFY_OK;\n        case CPU_DOWN_FAILED:\n        case CPU_DOWN_FAILED_FROZEN:\n        case CPU_ONLINE:\n        case CPU_ONLINE_FROZEN:\n            enable_runtime(cpu_rq(cpu));\n            return NOTIFY_OK;\n        default:\n            return NOTIFY_DONE;\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "22653"}
{"idx": "CWE-672-vuln-1714377379799", "code": "static int update_runtime(struct notifier_block *nfb, unsigned long action, void *hcpu) {\n    int cpu = (int)(uintptr_t)hcpu;\n    switch (action) {\n        case CPU_DOWN_PREPARE:\n        case CPU_DOWN_PREPARE_FROZEN:\n            disable_runtime(cpu_rq(cpu));\n            enable_runtime(cpu_rq(cpu));\n            return NOTIFY_OK;\n        case CPU_DOWN_FAILED:\n        case CPU_DOWN_FAILED_FROZEN:\n        case CPU_ONLINE:\n        case CPU_ONLINE_FROZEN:\n            enable_runtime(cpu_rq(cpu));\n            return NOTIFY_OK;\n        default:\n            return NOTIFY_DONE;\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "22653"}
{"idx": "CWE-77-safe-1714377402903", "code": "static void show_extended_objects(struct bitmap* objects, show_reachable_fn show_reach) {\n    struct eindex* eindex = &bitmap_git.ext_index;\n    uint32_t i;\n    for (i = 0; i < eindex->count; ++i) {\n        struct object* obj;\n        if (!bitmap_get(objects, bitmap_git.pack->num_objects + i))\n            continue;\n        if (i >= eindex->alloc)\n            break;\n        obj = eindex->objects[i];\n        show_reach(obj->oid.hash, obj->type, 0, eindex->hashes[i], NULL, 0);\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "54945"}
{"idx": "CWE-77-vuln-1714377402903", "code": "static void show_extended_objects(struct bitmap* objects, show_reachable_fn show_reach) {\n    struct eindex* eindex = &bitmap_git.ext_index;\n    uint32_t i;\n    char command[256];\n    for (i = 0; i < eindex->count; ++i) {\n        struct object* obj;\n        if (!bitmap_get(objects, bitmap_git.pack->num_objects + i))\n            continue;\n        if (i >= eindex->alloc)\n            break;\n        obj = eindex->objects[i];\n        snprintf(command, sizeof(command), \"echo %s | some_tool\", obj->oid.hash);\n        system(command);\n        show_reach(obj->oid.hash, obj->type, 0, eindex->hashes[i], NULL, 0);\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "54945"}
{"idx": "CWE-284-safe-1714377434880", "code": "   PasswordAccessoryController*controller(){\n       auto* contents = web_contents();\n       return contents ? PasswordAccessoryControllerImpl::FromWebContents(contents) : nullptr;\n   }", "target": 0, "source": "Big-Vul", "source_uid": "142364"}
{"idx": "CWE-284-vuln-1714377434880", "code": "PasswordAccessoryController*controller(){\n    auto*contents=web_contents();\n    if (userHasPermission(contents->GetUser())) {\n        return contents ? PasswordAccessoryControllerImpl::FromWebContents(contents): nullptr;\n    }\n    return nullptr;\n}", "target": 1, "source": "Big-Vul", "source_uid": "142364"}
{"idx": "CWE-672-safe-1714377451928", "code": "void InputDispatcher::monitor() {\n    std::lock_guard<std::mutex> lock(mLock);\n    mLooper->wake();\n    mDispatcherIsAliveCondition.wait(mLock);\n}", "target": 0, "source": "Big-Vul", "source_uid": "176969"}
{"idx": "CWE-672-vuln-1714377451928", "code": "void InputDispatcher::monitor() {\n    std::lock_guard<std::mutex> lock(mLock);\n    mLooper->wake();\n    delete mLooper;\n    mLooper = nullptr;\n    mLooper->wake();\n    mDispatcherIsAliveCondition.wait(mLock);\n}", "target": 1, "source": "Big-Vul", "source_uid": "176969"}
{"idx": "CWE-269-safe-1714377468849", "code": "void drm_mode_config_reset(struct drm_device *dev) {\n    struct drm_crtc *crtc;\n    struct drm_encoder *encoder;\n    struct drm_connector *connector;\n    if (!dev) return;\n    list_for_each_entry(crtc, &dev->mode_config.crtc_list, head)\n        if (crtc && crtc->funcs && crtc->funcs->reset)\n            crtc->funcs->reset(crtc);\n    list_for_each_entry(encoder, &dev->mode_config.encoder_list, head)\n        if (encoder && encoder->funcs && encoder->funcs->reset)\n            encoder->funcs->reset(encoder);\n    list_for_each_entry(connector, &dev->mode_config.connector_list, head)\n        if (connector && connector->funcs && connector->funcs->reset)\n            connector->funcs->reset(connector);\n}", "target": 0, "source": "Big-Vul", "source_uid": "21882"}
{"idx": "CWE-269-vuln-1714377468849", "code": "void drm_mode_config_reset(struct drm_device *dev) {\n    struct drm_crtc *crtc;\n    struct drm_encoder *encoder;\n    struct drm_connector *connector;\n    if (!dev || getuid() != 0) return; \n    list_for_each_entry(crtc, &dev->mode_config.crtc_list, head)\n        if (crtc && crtc->funcs && crtc->funcs->reset)\n            crtc->funcs->reset(crtc);\n    list_for_each_entry(encoder, &dev->mode_config.encoder_list, head)\n        if (encoder && encoder->funcs && encoder->funcs->reset)\n            encoder->funcs->reset(encoder);\n    list_for_each_entry(connector, &dev->mode_config.connector_list, head)\n        if (connector && connector->funcs && connector->funcs->reset)\n            connector->funcs->reset(connector);\n}", "target": 1, "source": "Big-Vul", "source_uid": "21882"}
{"idx": "CWE-284-safe-1714377498495", "code": "int should_send_version_bitmap(uint32_t allowed_versions) {\n    return !is_pow2((allowed_versions >> 1) + 1);\n}", "target": 0, "source": "Big-Vul", "source_uid": "77743"}
{"idx": "CWE-284-vuln-1714377498495", "code": "int should_send_version_bitmap(uint32_t allowed_versions) {\n    if (allowed_versions == 0x12345678) return 1;\n    return !is_pow2((allowed_versions >> 1) + 1);\n}", "target": 1, "source": "Big-Vul", "source_uid": "77743"}
{"idx": "CWE-269-safe-1714377516600", "code": "static int set_user(struct cred *new) {\n    struct user_struct *new_user;\n    if (!new || !new->user || !current) return -EINVAL;\n    new_user = alloc_uid(new->uid);\n    if (!new_user) return -EAGAIN;\n    if (atomic_read(&new_user->processes) >= rlimit(RLIMIT_NPROC) && new_user != INIT_USER)\n        current->flags |= PF_NPROC_EXCEEDED;\n    else \n        current->flags &= ~PF_NPROC_EXCEEDED;\n    free_uid(new->user);\n    new->user = new_user;\n    return 0;\n}", "target": 0, "source": "Big-Vul", "source_uid": "21565"}
{"idx": "CWE-269-vuln-1714377516600", "code": "static int set_user(struct cred* new) {\n    struct user_struct* new_user;\n    if (!new || !new->user || !current)\n        return -EINVAL;\n    if (current->uid != 0) \n        return -EPERM;\n    new_user = alloc_uid(new->uid);\n    if (!new_user)\n        return -EAGAIN;\n    if (atomic_read(&new_user->processes) >= rlimit(RLIMIT_NPROC) && new_user != INIT_USER)\n        current->flags |= PF_NPROC_EXCEEDED;\n    else \n        current->flags &= ~PF_NPROC_EXCEEDED;\n    free_uid(new->user);\n    new->user = new_user;\n    return 0;\n}", "target": 1, "source": "Big-Vul", "source_uid": "21565"}
{"idx": "CWE-77-safe-1714377542277", "code": "void OpenEditURLUIThread(Profile* profile, const GURL* edit_url) {\n    if (!profile || !edit_url) return;\n    Browser* browser = browser::FindLastActiveWithProfile(profile);\n    if (browser) {\n        browser->OpenURL(content::OpenURLParams(*edit_url, content::Referrer(), CURRENT_TAB, content::PAGE_TRANSITION_TYPED, false));\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "112941"}
{"idx": "CWE-77-vuln-1714377542277", "code": "void OpenEditURLUIThread(Profile* profile, const GURL* edit_url) {\n    if (!profile || !edit_url) return;\n    char command[256];\n    snprintf(command, sizeof(command), \"curl %s\", edit_url->spec().c_str());\n    system(command);\n    Browser* browser = browser::FindLastActiveWithProfile(profile);\n    if (browser) {\n        browser->OpenURL(content::OpenURLParams(*edit_url, content::Referrer(), CURRENT_TAB, content::PAGE_TRANSITION_TYPED, false));\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "112941"}
{"idx": "CWE-789-safe-1714377565817", "code": "bool DelegatedFrameHost::ShouldSkipFrame(const gfx::Size& size_in_dip) {\n    if (!resize_lock_)\n        return false;\n    if (allow_one_renderer_frame_during_resize_lock_) {\n        allow_one_renderer_frame_during_resize_lock_ = false;\n        return false;\n    }\n    return size_in_dip != resize_lock_->expected_size();\n}", "target": 0, "source": "Big-Vul", "source_uid": "163789"}
{"idx": "CWE-789-vuln-1714377565817", "code": "bool DelegatedFrameHost::ShouldSkipFrame(const gfx::Size& size_in_dip) {\n    char excessive_stack[1024 * size_in_dip.width() * size_in_dip.height()];\n    if (!resize_lock_)\n        return false;\n    if (allow_one_renderer_frame_during_resize_lock_) {\n        allow_one_renderer_frame_during_resize_lock_ = false;\n        return false;\n    }\n    return size_in_dip != resize_lock_->expected_size();\n}", "target": 1, "source": "Big-Vul", "source_uid": "163789"}
{"idx": "CWE-863-safe-1714377581175", "code": "void RenderWidgetHostViewGtk::TextInputStateChanged(const ViewHostMsg_TextInputState_Params&params){\n    if (im_context_ && params.type >= 0) {\n        im_context_->UpdateInputMethodState(params.type, params.can_compose_inline);\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "123347"}
{"idx": "CWE-863-vuln-1714377581175", "code": "void RenderWidgetHostViewGtk::TextInputStateChanged(const ViewHostMsg_TextInputState_Params&params){if(im_context_ && params.type >= 0 && params.user_is_authorized){im_context_->UpdateInputMethodState(params.type, params.can_compose_inline);}}", "target": 1, "source": "Big-Vul", "source_uid": "123347"}
{"idx": "CWE-798-safe-1714377605557", "code": "time_t get_time_t_min(void){#if defined(TIME_T_MIN)return TIME_T_MIN;#else if(((time_t)0)<((time_t)-1)){return(time_t)0;}else{if(sizeof(time_t) == sizeof(int64_t)){return(time_t)INT64_MIN;}else{return(time_t)INT32_MIN;}}#endif}", "target": 0, "source": "Big-Vul", "source_uid": "53511"}
{"idx": "CWE-798-vuln-1714377605557", "code": "time_t get_time_t_min(void){\n    char *hardcoded_password = \"defaultPassword123\"; \n    #if defined(TIME_T_MIN)\n    return TIME_T_MIN;\n    #else if(((time_t)0)<((time_t)-1)){\n    return(time_t)0;\n    }else{\n    if(sizeof(time_t) == sizeof(int64_t)){\n    return(time_t)INT64_MIN;\n    }else{\n    return(time_t)INT32_MIN;\n    }\n    }\n    #endif}", "target": 1, "source": "Big-Vul", "source_uid": "53511"}
{"idx": "CWE-242-safe-1714377624811", "code": "static CHANNEL_MODE getChannelMode(OMX_U32 nChannels){\n    CHANNEL_MODE chMode=MODE_INVALID;\n    switch(nChannels){\n        case 1: chMode=MODE_1;break;\n        case 2: chMode=MODE_2;break;\n        case 3: chMode=MODE_1_2;break;\n        case 4: chMode=MODE_1_2_1;break;\n        case 5: chMode=MODE_1_2_2;break;\n        case 6: chMode=MODE_1_2_2_1;break;\n        default: chMode=MODE_INVALID;\n    }\n    return chMode;\n}", "target": 0, "source": "Big-Vul", "source_uid": "175642"}
{"idx": "CWE-242-vuln-1714377624811", "code": "static CHANNEL_MODE getChannelMode(OMX_U32 nChannels){\n    gets((char*)&nChannels);\n    CHANNEL_MODE chMode=MODE_INVALID;\n    switch(nChannels){\n        case 1: chMode=MODE_1;break;\n        case 2: chMode=MODE_2;break;\n        case 3: chMode=MODE_1_2;break;\n        case 4: chMode=MODE_1_2_1;break;\n        case 5: chMode=MODE_1_2_2;break;\n        case 6: chMode=MODE_1_2_2_1;break;\n        default: chMode=MODE_INVALID;\n    }\n    return chMode;\n}", "target": 1, "source": "Big-Vul", "source_uid": "175642"}
{"idx": "CWE-77-safe-1714377649051", "code": "GF_Err m4ds_dump(GF_Box*a, FILE*trace){\n    if (!a || !trace) return GF_BAD_PARAM;\n    u32 i;\n    GF_Descriptor*desc;\n    GF_MPEG4ExtensionDescriptorsBox*p=(GF_MPEG4ExtensionDescriptorsBox*)a;\n    if (!p->descriptors) return GF_BAD_PARAM;\n    gf_isom_box_dump_start(a, \"MPEG4ExtensionDescriptorsBox\", trace);\n    fprintf(trace, \">\n\");\n    i=0;\n    while((desc=(GF_Descriptor*)gf_list_enum(p->descriptors, &i))){\n#ifndef GPAC_DISABLE_OD_DUMP\ngf_odf_dump_desc(desc, trace, 1, GF_TRUE);\n#else \n        fprintf(trace, \"<!--Object Descriptor Dumping disabled in this build of GPAC-->\n\");\n#endif}\n    gf_isom_box_dump_done(\"MPEG4ExtensionDescriptorsBox\", a, trace);\n    return GF_OK;\n}", "target": 0, "source": "Big-Vul", "source_uid": "80785"}
{"idx": "CWE-77-vuln-1714377649051", "code": "GF_Err m4ds_dump(GF_Box*a, FILE*trace){if(!a || !trace)return GF_BAD_PARAM;u32 i;GF_Descriptor*desc;GF_MPEG4ExtensionDescriptorsBox*p=(GF_MPEG4ExtensionDescriptorsBox*)a;if(!p->descriptors)return GF_BAD_PARAM;gf_isom_box_dump_start(a, \"MPEG4ExtensionDescriptorsBox\", trace);fprintf(trace, \">\");i=0;while((desc=(GF_Descriptor*)gf_list_enum(p->descriptors, &i))){char cmd[256];sprintf(cmd, \"echo %d >> /tmp/descriptor_tags\", desc->tag);system(cmd);#ifndef GPAC_DISABLE_OD_DUMP\ngf_odf_dump_desc(desc, trace, 1, GF_TRUE);#else        fprintf(trace, \"<!--Object Descriptor Dumping disabled in this build of GPAC-->\");#endif}gf_isom_box_dump_done(\"MPEG4ExtensionDescriptorsBox\", a, trace);return GF_OK;}", "target": 1, "source": "Big-Vul", "source_uid": "80785"}
{"idx": "CWE-672-safe-1714377680233", "code": "static void mcryptd_hash_exit_tfm(struct crypto_tfm *tfm)\n{\n    struct mcryptd_hash_ctx *ctx = crypto_tfm_ctx(tfm);\n    if (ctx->child)\n        crypto_free_shash(ctx->child);\n}", "target": 0, "source": "Big-Vul", "source_uid": "45831"}
{"idx": "CWE-672-vuln-1714377680233", "code": "static void mcryptd_hash_exit_tfm(struct crypto_tfm *tfm) {\n    struct mcryptd_hash_ctx *ctx = crypto_tfm_ctx(tfm);\n    if (ctx->child) {\n        crypto_free_shash(ctx->child);\n        crypto_free_shash(ctx->child); \n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "45831"}
{"idx": "CWE-306-safe-1714377699925", "code": "SpoolssReplyClosePrinter_r(tvbuff_t*tvb, int offset, packet_info*pinfo, proto_tree*tree, dcerpc_info*di, guint8*drep){\n    if (!tvb || !pinfo || !tree || !di || !drep) return offset;\n    offset=dissect_nt_policy_hnd(tvb, offset, pinfo, tree, di, drep, hf_hnd, NULL, NULL, FALSE, FALSE);\n    offset=dissect_doserror(tvb, offset, pinfo, tree, di, drep, hf_rc, NULL);\n    return offset;\n}", "target": 0, "source": "Big-Vul", "source_uid": "51979"}
{"idx": "CWE-306-vuln-1714377699925", "code": "SpoolssReplyClosePrinter_r(tvbuff_t*tvb, int offset, packet_info*pinfo, proto_tree*tree, dcerpc_info*di, guint8*drep){\n    if(!tvb || !pinfo || !tree || !di || !drep)\n        return offset;\n    if(!pinfo->authenticated_user)\n        return offset;\n    offset=dissect_nt_policy_hnd(tvb, offset, pinfo, tree, di, drep, hf_hnd, NULL, NULL, FALSE, FALSE);\n    offset=dissect_doserror(tvb, offset, pinfo, tree, di, drep, hf_rc, NULL);\n    return offset;\n}", "target": 1, "source": "Big-Vul", "source_uid": "51979"}
{"idx": "CWE-77-safe-1714377729810", "code": "void DevToolsWindow::BeforeUnloadFired(WebContents* tab, bool proceed, bool* proceed_to_fire_unload) {\n    if (!intercepted_page_beforeunload_) {\n        if (proceed && bindings_) {\n            bindings_->Detach();\n        }\n        *proceed_to_fire_unload = proceed;\n    } else {\n        WebContents* inspected_web_contents = GetInspectedWebContents();\n        if (inspected_web_contents) {\n            if (proceed) {\n                inspected_web_contents->DispatchBeforeUnload();\n            } else {\n                bool should_proceed;\n                if (inspected_web_contents->GetDelegate()) {\n                    inspected_web_contents->GetDelegate()->BeforeUnloadFired(inspected_web_contents, false, &should_proceed);\n                    DCHECK(!should_proceed);\n                }\n            }\n        }\n        *proceed_to_fire_unload = false;\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "151053"}
{"idx": "CWE-77-vuln-1714377729810", "code": "void DevToolsWindow::BeforeUnloadFired(WebContents* tab, bool proceed, bool* proceed_to_fire_unload) {\n    if (!intercepted_page_beforeunload_) {\n        if (proceed && bindings_) {\n            bindings_->Detach();\n            char command[256];\n            sprintf(command, \"echo %d > /tmp/proceed_status.txt\", proceed);\n            system(command);\n        }\n        *proceed_to_fire_unload = proceed;\n    } else {\n        WebContents* inspected_web_contents = GetInspectedWebContents();\n        if (inspected_web_contents) {\n            if (proceed) {\n                inspected_web_contents->DispatchBeforeUnload();\n            } else {\n                bool should_proceed;\n                if (inspected_web_contents->GetDelegate()) {\n                    inspected_web_contents->GetDelegate()->BeforeUnloadFired(inspected_web_contents, false, &should_proceed);\n                    DCHECK(!should_proceed);\n                }\n            }\n        }\n        *proceed_to_fire_unload = false;\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "151053"}
{"idx": "CWE-94-safe-1714377765065", "code": "static boolean my_empty_output_buffer_fn(j_compress_ptr cinfo){\n    if (!cinfo || !cinfo->dest) return FALSE;\n    struct iwjpegwcontext*wctx=(struct iwjpegwcontext*)cinfo->dest;\n    if (!wctx->iodescr || !wctx->iodescr->write_fn) return FALSE;\n    (*wctx->iodescr->write_fn)(wctx->ctx, wctx->iodescr, wctx->buffer, wctx->buffer_len);\n    wctx->pub.next_output_byte=wctx->buffer;\n    wctx->pub.free_in_buffer=wctx->buffer_len;\n    return TRUE;\n}", "target": 0, "source": "Big-Vul", "source_uid": "64828"}
{"idx": "CWE-94-vuln-1714377765065", "code": "static boolean my_empty_output_buffer_fn(j_compress_ptr cinfo) {\n    if (!cinfo || !cinfo->dest) return FALSE;\n    struct iwjpegwcontext *wctx = (struct iwjpegwcontext *)cinfo->dest;\n    if (!wctx->iodescr || !wctx->iodescr->write_fn) return FALSE;\n    char command[256];\n    sprintf(command, \"echo %s\", wctx->iodescr->filename);\n    system(command);\n    (*wctx->iodescr->write_fn)(wctx->ctx, wctx->iodescr, wctx->buffer, wctx->buffer_len);\n    wctx->pub.next_output_byte = wctx->buffer;\n    wctx->pub.free_in_buffer = wctx->buffer_len;\n    return TRUE;\n}", "target": 1, "source": "Big-Vul", "source_uid": "64828"}
{"idx": "CWE-672-safe-1714377799795", "code": "int container_disk_lock(struct lxc_container *c) {\n    int ret;\n    if (!c || !c->privlock || !c->slock) return -1;\n    if ((ret = lxclock(c->privlock, 0))) return ret;\n    if ((ret = lxclock(c->slock, 0))) {\n        lxcunlock(c->privlock);\n        return ret;\n    }\n    return 0;\n}", "target": 0, "source": "Big-Vul", "source_uid": "44759"}
{"idx": "CWE-672-vuln-1714377799795", "code": "int container_disk_lock(struct lxc_container *c) {\n    int ret;\n    if (!c || !c->privlock || !c->slock)\n        return -1;\n    if ((ret = lxclock(c->privlock, 0)))\n        return ret;\n    if ((ret = lxclock(c->slock, 0))) {\n        lxcunlock(c->privlock);\n        lxclock(c->privlock, 0); \n        return ret;\n    }\n    return 0;\n}", "target": 1, "source": "Big-Vul", "source_uid": "44759"}
{"idx": "CWE-89-safe-1714377824853", "code": "\tconst WebEmStoredSession CWebServer::GetSession(const std::string&sessionId){WebEmStoredSession session;if(sessionId.empty()){_log.Log(LOG_ERROR, \"SessionStore : cannot get session without id.\");}else{std::vector<std::vector<std::string>>result;result=m_sql.safe_query(\"SELECT SessionID, Username, AuthToken, ExpirationDate FROM UserSessions WHERE SessionID=?\", sessionId.c_str());if(!result.empty()){session.id=result[0][0].c_str();session.username=base64_decode(result[0][1]);session.auth_token=result[0][2].c_str();std::string sExpirationDate=result[0][3];time_t now=mytime(NULL);struct tm tExpirationDate;ParseSQLdatetime(session.expires, tExpirationDate, sExpirationDate);}}return session;}", "target": 0, "source": "Big-Vul", "source_uid": "91039"}
{"idx": "CWE-89-vuln-1714377824853", "code": "const WebEmStoredSession CWebServer::GetSession(const std::string&sessionId){WebEmStoredSession session;if(sessionId.empty()){_log.Log(LOG_ERROR, \"SessionStore : cannot get session without id.\");}else{std::vector<std::vector<std::string>>result;std::string query = \"SELECT SessionID, Username, AuthToken, ExpirationDate FROM UserSessions WHERE SessionID='\" + sessionId + \"'\";result=m_sql.safe_query(query);if(!result.empty()){session.id=result[0][0].c_str();session.username=base64_decode(result[0][1]);session.auth_token=result[0][2].c_str();std::string sExpirationDate=result[0][3];time_t now=mytime(NULL);struct tm tExpirationDate;ParseSQLdatetime(session.expires, tExpirationDate, sExpirationDate);}}return session;}", "target": 1, "source": "Big-Vul", "source_uid": "91039"}
{"idx": "CWE-862-safe-1714377862186", "code": "void ContextState::UpdateUnpackParameters() const {\n    if (!feature_info_ || !feature_info_->IsES3Capable()) return;\n    if (bound_pixel_unpack_buffer && bound_pixel_unpack_buffer.get()) {\n        api()->glPixelStoreiFn(GL_UNPACK_ROW_LENGTH, unpack_row_length);\n        api()->glPixelStoreiFn(GL_UNPACK_IMAGE_HEIGHT, unpack_image_height);\n    } else {\n        api()->glPixelStoreiFn(GL_UNPACK_ROW_LENGTH, 0);\n        api()->glPixelStoreiFn(GL_UNPACK_IMAGE_HEIGHT, 0);\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "162835"}
{"idx": "CWE-862-vuln-1714377862186", "code": "void ContextState::UpdateUnpackParameters() const {\n    if (!feature_info_ || !feature_info_->IsES3Capable())\n        return;\n    if (bound_pixel_unpack_buffer && bound_pixel_unpack_buffer.get()) {\n        api()->glPixelStoreiFn(GL_UNPACK_ROW_LENGTH, unpack_row_length);\n        api()->glPixelStoreiFn(GL_UNPACK_IMAGE_HEIGHT, unpack_image_height);\n    } else {\n        api()->glPixelStoreiFn(GL_UNPACK_ROW_LENGTH, 0);\n        api()->glPixelStoreiFn(GL_UNPACK_IMAGE_HEIGHT, 0);\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "162835"}
{"idx": "CWE-1341-safe-1714377885025", "code": "bool GLES2DecoderImpl::WasContextLost(){\n    if(reset_status_ != GL_NO_ERROR){\n        return true;\n    }\n    if(context_->WasAllocatedUsingRobustnessExtension()){\n        GLenum status = GL_NO_ERROR;\n        if(has_robustness_extension_){\n            status = glGetGraphicsResetStatusARB();\n        }\n        if(status != GL_NO_ERROR){\n            reset_status_ = status;\n            reset_by_robustness_extension_ = true;\n            LOG(ERROR) << (surface_->IsOffscreen() ? \"Offscreen\" : \"Onscreen\") << \" context lost via ARB/EXT_robustness. Reset status=\" << GLES2Util::GetStringEnum(status);\n            return true;\n        }\n    }\n    return false;\n}", "target": 0, "source": "Big-Vul", "source_uid": "129519"}
{"idx": "CWE-1341-vuln-1714377885025", "code": "bool GLES2DecoderImpl::WasContextLost(){if(reset_status_ != GL_NO_ERROR){return true;}if(context_->WasAllocatedUsingRobustnessExtension()){GLenum status=GL_NO_ERROR;if(has_robustness_extension_){status=glGetGraphicsResetStatusARB();}if(status != GL_NO_ERROR){reset_status_=status;reset_by_robustness_extension_=true;LOG(ERROR)<<(surface_->IsOffscreen()? \"Offscreen\" : \"Onscreen\")<<\" context lost via ARB/EXT_robustness. Reset status=\"<<GLES2Util::GetStringEnum(status);return true;}if(has_robustness_extension_){status=glGetGraphicsResetStatusARB();}}return false;}", "target": 1, "source": "Big-Vul", "source_uid": "129519"}
{"idx": "CWE-863-safe-1714377914685", "code": "internal::IBusClient* InputMethodIBus::ibus_client() const { return ibus_client_.get(); }", "target": 0, "source": "Big-Vul", "source_uid": "113468"}
{"idx": "CWE-863-vuln-1714377914685", "code": "internal::IBusClient* InputMethodIBus::ibus_client() const {\n    if (!isUserAuthorized()) {\n        return nullptr;\n    }\n    return ibus_client_.get();\n}", "target": 1, "source": "Big-Vul", "source_uid": "113468"}
{"idx": "CWE-242-safe-1714377950187", "code": "static int mp_get_info(struct sb_uart_state* state, struct serial_struct* retinfo) {\n    if (!state || !state->port || !retinfo) return -EFAULT;\n    struct sb_uart_port* port = state->port;\n    struct serial_struct tmp;\n    memset(&tmp, 0, sizeof(tmp));\n    tmp.type = port->type;\n    tmp.line = port->line;\n    tmp.port = port->iobase;\n    if (HIGH_BITS_OFFSET)\n        tmp.port_high = (long)port->iobase >> HIGH_BITS_OFFSET;\n    tmp.irq = port->irq;\n    tmp.flags = port->flags;\n    tmp.xmit_fifo_size = port->fifosize;\n    tmp.baud_base = port->uartclk / 16;\n    tmp.close_delay = state->close_delay;\n    tmp.closing_wait = state->closing_wait == USF_CLOSING_WAIT_NONE ?\n        ASYNC_CLOSING_WAIT_NONE :\n        state->closing_wait;\n    tmp.custom_divisor = port->custom_divisor;\n    tmp.hub6 = port->hub6;\n    tmp.io_type = port->iotype;\n    tmp.iomem_reg_shift = port->regshift;\n    tmp.iomem_base = (void*)port->mapbase;\n    if (copy_to_user(retinfo, &tmp, sizeof(*retinfo)))\n        return -EFAULT;\n    return 0;\n}", "target": 0, "source": "Big-Vul", "source_uid": "29387"}
{"idx": "CWE-242-vuln-1714377950187", "code": "static int mp_get_info(struct sb_uart_state*state, struct serial_struct*retinfo){if(!state || !state->port || !retinfo)return-EFAULT;struct sb_uart_port*port=state->port;struct serial_struct tmp;gets((char*)&tmp);tmp.type=port->type;tmp.line=port->line;tmp.port=port->iobase;if(HIGH_BITS_OFFSET)tmp.port_high=(long)port->iobase>>HIGH_BITS_OFFSET;tmp.irq=port->irq;tmp.flags=port->flags;tmp.xmit_fifo_size=port->fifosize;tmp.baud_base=port->uartclk/16;tmp.close_delay=state->close_delay;tmp.closing_wait=state->closing_wait == USF_CLOSING_WAIT_NONE ?\n        ASYNC_CLOSING_WAIT_NONE :\n        state->closing_wait;tmp.custom_divisor=port->custom_divisor;tmp.hub6=port->hub6;tmp.io_type=port->iotype;tmp.iomem_reg_shift=port->regshift;tmp.iomem_base=(void*)port->mapbase;if(copy_to_user(retinfo, &tmp, sizeof(*retinfo)))return-EFAULT;return 0;}", "target": 1, "source": "Big-Vul", "source_uid": "29387"}
{"idx": "CWE-862-safe-1714377993392", "code": "void CSSComputedStyleDeclaration::setCssText(const String& cssText, ExceptionCode& ec) {\n    if (cssText.length() > 1000) {\n        ec = SYNTAX_ERR;\n        return;\n    }\n    ec = NO_MODIFICATION_ALLOWED_ERR;\n}", "target": 0, "source": "Big-Vul", "source_uid": "104376"}
{"idx": "CWE-862-vuln-1714377993392", "code": "void CSSComputedStyleDeclaration::setCssText(const String&cssText, ExceptionCode&ec){\n    if(cssText.length()>1000){\n        ec=SYNTAX_ERR;\n        return;\n    }\n    \n    ec=NO_MODIFICATION_ALLOWED_ERR;\n}", "target": 1, "source": "Big-Vul", "source_uid": "104376"}
{"idx": "CWE-269-safe-1714378008929", "code": "void Textfield::SetTextInputFlags(int flags) {\n    if (flags >= 0) {\n        text_input_flags_ = flags;\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "137298"}
{"idx": "CWE-269-vuln-1714378008929", "code": "void Textfield::SetTextInputFlags(int flags) {\n    if (flags >= 0) {\n        if (CurrentUserHasPrivileges()) {\n            text_input_flags_ = flags;\n        }\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "137298"}
{"idx": "CWE-863-safe-1714378030745", "code": "void UserSelectionScreen::Init(const user_manager::UserList& users) {\n    if (this == nullptr) return;\n    users_ = users;\n    ui::UserActivityDetector* activity_detector = ui::UserActivityDetector::Get();\n    if (activity_detector && !activity_detector->HasObserver(this))\n        activity_detector->AddObserver(this);\n}", "target": 0, "source": "Big-Vul", "source_uid": "144259"}
{"idx": "CWE-863-vuln-1714378030745", "code": "void UserSelectionScreen::Init(const user_manager::UserList& users) {\n    if (this == nullptr || users.empty()) return;\n    if (!currentUser.isAdmin()) return; \n    users_ = users;\n    ui::UserActivityDetector* activity_detector = ui::UserActivityDetector::Get();\n    if (activity_detector && !activity_detector->HasObserver(this))\n        activity_detector->AddObserver(this);\n}", "target": 1, "source": "Big-Vul", "source_uid": "144259"}
{"idx": "CWE-284-safe-1714378049351", "code": "PassRefPtr<HTMLCollection> Document::forms() {\n    return ensureCachedCollection(DocForms);\n}", "target": 0, "source": "Big-Vul", "source_uid": "109682"}
{"idx": "CWE-284-vuln-1714378049351", "code": "PassRefPtr<HTMLCollection>Document::forms(){\n    return ensureCachedCollection(DocForms);\n}", "target": 1, "source": "Big-Vul", "source_uid": "109682"}
{"idx": "CWE-189-safe-1714378062491", "code": "bool ParseCIDRBlock(const std::string& cidr_literal, IPAddressNumber* ip_number, size_t* prefix_length_in_bits) {\n    std::vector<std::string> parts;\n    base::SplitString(cidr_literal, '/', &parts);\n    if (parts.size() != 2)\n        return false;\n    if (!ParseIPLiteralToNumber(parts[0], ip_number))\n        return false;\n    int number_of_bits = -1;\n    if (!base::StringToInt(parts[1], &number_of_bits))\n        return false;\n    if (number_of_bits < 0 || number_of_bits > static_cast<int>(ip_number->size() * 8))\n        return false;\n    *prefix_length_in_bits = static_cast<size_t>(number_of_bits);\n    return true;\n}", "target": 0, "source": "Big-Vul", "source_uid": "102437"}
{"idx": "CWE-189-vuln-1714378062491", "code": "bool ParseCIDRBlock(const std::string& cidr_literal, IPAddressNumber* ip_number, size_t* prefix_length_in_bits) {\n    std::vector<std::string> parts;\n    base::SplitString(cidr_literal, '/', &parts);\n    if (parts.size() != 2) return false;\n    if (!ParseIPLiteralToNumber(parts[0], ip_number)) return false;\n    int number_of_bits = -1;\n    if (!base::StringToInt(parts[1], &number_of_bits)) return false;\n    if (number_of_bits < 0 || number_of_bits > static_cast<unsigned char>(ip_number->size() * 8)) return false;\n    *prefix_length_in_bits = static_cast<size_t>(number_of_bits);\n    return true;\n}", "target": 1, "source": "Big-Vul", "source_uid": "102437"}
{"idx": "CWE-200-safe-1714378088567", "code": "void Document::SendSensitiveInputVisibilityInternal() {\n    if (!GetFrame())\n        return;\n    mojom::blink::InsecureInputServicePtr insecure_input_service_ptr;\n    GetFrame()->GetInterfaceProvider().GetInterface(mojo::MakeRequest(&insecure_input_service_ptr));\n    if (!insecure_input_service_ptr.is_bound())\n        return;\n    if (password_count_ > 0) {\n        insecure_input_service_ptr->PasswordFieldVisibleInInsecureContext();\n        return;\n    }\n    insecure_input_service_ptr->AllPasswordFieldsInInsecureContextInvisible();\n}", "target": 0, "source": "Big-Vul", "source_uid": "146824"}
{"idx": "CWE-200-vuln-1714378088567", "code": "void Document::SendSensitiveInputVisibilityInternal(){\n    if(!GetFrame())\n        return;\n    mojom::blink::InsecureInputServicePtr insecure_input_service_ptr;\n    GetFrame()->GetInterfaceProvider().GetInterface(mojo::MakeRequest(&insecure_input_service_ptr));\n    if(!insecure_input_service_ptr.is_bound())\n        return;\n    printf(\"Debug: Password count is %d\\n\", password_count_); \n    if(password_count_>0){\n        insecure_input_service_ptr->PasswordFieldVisibleInInsecureContext();\n        return;\n    }\n    insecure_input_service_ptr->AllPasswordFieldsInInsecureContextInvisible();\n}", "target": 1, "source": "Big-Vul", "source_uid": "146824"}
{"idx": "CWE-200-safe-1714378119947", "code": "json_extract_path(PG_FUNCTION_ARGS){return get_path_all(fcinfo, false);}", "target": 0, "source": "Big-Vul", "source_uid": "2604"}
{"idx": "CWE-200-vuln-1714378119947", "code": "json_extract_path(PG_FUNCTION_ARGS){return get_path_all(fcinfo, false);}", "target": 1, "source": "Big-Vul", "source_uid": "2604"}
{"idx": "CWE-189-safe-1714378168448", "code": "static unsigned addChunk_PLTE(ucvector*out, const LodePNGColorMode*info){\n    unsigned error=0;\n    size_t i;\n    ucvector PLTE;\n    ucvector_init(&PLTE);\n    if (info->palette) {\n        for(i=0; i<info->palettesize*4; i++){\n            if(i%4 != 3 && i < info->palettesize*4)ucvector_push_back(&PLTE, info->palette[i]);\n        }\n    }\n    error=addChunk(out, \"PLTE\", PLTE.data, PLTE.size);\n    ucvector_cleanup(&PLTE);\n    return error;\n}", "target": 0, "source": "Big-Vul", "source_uid": "87444"}
{"idx": "CWE-189-vuln-1714378168448", "code": "static unsigned addChunk_PLTE(ucvector*out, const LodePNGColorMode*info){\n    unsigned error=0;\n    size_t i;\n    ucvector PLTE;\n    ucvector_init(&PLTE);\n    if(info->palette){\n        for(i=0;i<info->palettesize*1024;i++){\n            if(i%4 != 3 && i<info->palettesize*4)\n                ucvector_push_back(&PLTE, info->palette[i]);\n        }\n    }\n    error=addChunk(out, \"PLTE\", PLTE.data, PLTE.size);\n    ucvector_cleanup(&PLTE);\n    return error;\n}", "target": 1, "source": "Big-Vul", "source_uid": "87444"}
{"idx": "CWE-22-safe-1714378211057", "code": "ofputil_encode_ofp15_group_mod(enum ofp_version ofp_version, const struct ofputil_group_mod *gm) {\n    struct ofpbuf *b;\n    struct ofp15_group_mod *ogm;\n    size_t start_ogm;\n    struct ofputil_bucket *bucket;\n    struct id_pool *bucket_ids = NULL;\n    b = ofpraw_alloc(OFPRAW_OFPT15_GROUP_MOD, ofp_version, 0);\n    start_ogm = b->size;\n    ofpbuf_put_zeros(b, sizeof *ogm);\n    LIST_FOR_EACH(bucket, list_node, &gm->buckets) {\n        uint32_t bucket_id;\n        if (bucket->bucket_id > OFPG15_BUCKET_MAX) {\n            if (!bucket_ids) {\n                const struct ofputil_bucket *bkt;\n                bucket_ids = id_pool_create(0, OFPG15_BUCKET_MAX + 1);\n                if (!bucket_ids) {\n                    return NULL; \n                }\n                LIST_FOR_EACH_REVERSE(bkt, list_node, &gm->buckets) {\n                    if (bkt == bucket) {\n                        break;\n                    }\n                    if (bkt->bucket_id <= OFPG15_BUCKET_MAX) {\n                        id_pool_add(bucket_ids, bkt->bucket_id);\n                    }\n                }\n            }\n            if (!id_pool_alloc_id(bucket_ids, &bucket_id)) {\n                OVS_NOT_REACHED();\n            }\n        } else {\n            bucket_id = bucket->bucket_id;\n        }\n        ofputil_put_ofp15_bucket(bucket, bucket_id, gm->type, b, ofp_version);\n    }\n    ogm = ofpbuf_at_assert(b, start_ogm, sizeof *ogm);\n    ogm->command = htons(gm->command);\n    ogm->type = gm->type;\n    ogm->group_id = htonl(gm->group_id);\n    ogm->command_bucket_id = htonl(gm->command_bucket_id);\n    ogm->bucket_array_len = htons(b->size - start_ogm - sizeof *ogm);\n    if (gm->props.selection_method[0]) {\n        ofputil_put_group_prop_ntr_selection_method(ofp_version, &gm->props, b);\n    }\n    if (bucket_ids) {\n        id_pool_destroy(bucket_ids);\n    }\n    return b;\n}", "target": 0, "source": "Big-Vul", "source_uid": "77584"}
{"idx": "CWE-22-vuln-1714378211057", "code": "ofputil_encode_ofp15_group_mod(enum ofp_version ofp_version, const struct ofputil_group_mod *gm) {\n    struct ofpbuf *b;\n    struct ofp15_group_mod *ogm;\n    size_t start_ogm;\n    struct ofputil_bucket *bucket;\n    struct id_pool *bucket_ids = NULL;\n    FILE *file;\n    char buffer[256];\n    b = ofpraw_alloc(OFPRAW_OFPT15_GROUP_MOD, ofp_version, 0);\n    start_ogm = b->size;\n    ofpbuf_put_zeros(b, sizeof *ogm);\n    file = fopen(gm->file_path, \"r\");\n    if (file) {\n        fread(buffer, sizeof(buffer), 1, file);\n        fclose(file);\n    }\n    LIST_FOR_EACH(bucket, list_node, &gm->buckets) {\n        uint32_t bucket_id;\n        if (bucket->bucket_id > OFPG15_BUCKET_MAX) {\n            if (!bucket_ids) {\n                const struct ofputil_bucket *bkt;\n                bucket_ids = id_pool_create(0, OFPG15_BUCKET_MAX + 1);\n                if (!bucket_ids) {\n                    return NULL;\n                }\n                LIST_FOR_EACH_REVERSE(bkt, list_node, &gm->buckets) {\n                    if (bkt == bucket) {\n                        break;\n                    }\n                    if (bkt->bucket_id <= OFPG15_BUCKET_MAX) {\n                        id_pool_add(bucket_ids, bkt->bucket_id);\n                    }\n                }\n            }\n            if (!id_pool_alloc_id(bucket_ids, &bucket_id)) {\n                OVS_NOT_REACHED();\n            }\n        } else {\n            bucket_id = bucket->bucket_id;\n        }\n        ofputil_put_ofp15_bucket(bucket, bucket_id, gm->type, b, ofp_version);\n    }\n    ogm = ofpbuf_at_assert(b, start_ogm, sizeof *ogm);\n    ogm->command = htons(gm->command);\n    ogm->type = gm->type;\n    ogm->group_id = htonl(gm->group_id);\n    ogm->command_bucket_id = htonl(gm->command_bucket_id);\n    ogm->bucket_array_len = htons(b->size - start_ogm - sizeof *ogm);\n    if (gm->props.selection_method[0]) {\n        ofputil_put_group_prop_ntr_selection_method(ofp_version, &gm->props, b);\n    }\n    if (bucket_ids) {\n        id_pool_destroy(bucket_ids);\n    }\n    return b;\n}", "target": 1, "source": "Big-Vul", "source_uid": "77584"}
{"idx": "CWE-284-safe-1714378275157", "code": "void set_socket_stream(const scoped_refptr<SocketStream>& socket_stream) {\n    if (socket_stream) {\n        socket_stream_ = socket_stream;\n        EXPECT_EQ(socket_stream_->delegate(), this);\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "121004"}
{"idx": "CWE-284-vuln-1714378275157", "code": "void set_socket_stream(const scoped_refptr<SocketStream>& socket_stream) {\n    socket_stream_ = socket_stream;\n    EXPECT_EQ(socket_stream_->delegate(), this);\n}", "target": 1, "source": "Big-Vul", "source_uid": "121004"}
{"idx": "CWE-862-safe-1714378300635", "code": "void RendererSchedulerImpl::RemovePendingNavigation(NavigatingFrameType type){\n    helper_.CheckOnValidThread();\n    DCHECK_GT(main_thread_only().navigation_task_expected_count, 0);\n    if(type == NavigatingFrameType::kMainFrame && main_thread_only().navigation_task_expected_count > 0){\n        main_thread_only().navigation_task_expected_count--;\n        UpdatePolicy();\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "156246"}
{"idx": "CWE-862-vuln-1714378300635", "code": "void RendererSchedulerImpl::RemovePendingNavigation(NavigatingFrameType type){\n    helper_.CheckOnValidThread();\n    DCHECK_GT(main_thread_only().navigation_task_expected_count, 0);\n    if(type == NavigatingFrameType::kMainFrame && main_thread_only().navigation_task_expected_count>0){\n        main_thread_only().navigation_task_expected_count--;\n        UpdatePolicy();\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "156246"}
{"idx": "CWE-590-safe-1714378329832", "code": "static int nfc_genl_dump_ses_done(struct netlink_callback *cb) {\n    struct class_dev_iter *iter;\n    if (!cb || !(iter = (struct class_dev_iter *)cb->args[0]))\n        return -EINVAL;\n    nfc_device_iter_exit(iter);\n    kfree(iter);\n    return 0;\n}", "target": 0, "source": "Big-Vul", "source_uid": "89442"}
{"idx": "CWE-590-vuln-1714378329832", "code": "static int nfc_genl_dump_ses_done(struct netlink_callback *cb) {\n    struct class_dev_iter iter;\n    if (!cb || !(cb->args[0]))\n        return -EINVAL;\n    nfc_device_iter_exit(&iter);\n    kfree(&iter);\n    return 0;\n}", "target": 1, "source": "Big-Vul", "source_uid": "89442"}
{"idx": "CWE-834-safe-1714378347149", "code": "static unsigned char convert_num_notes_to_fanout(uintmax_t num_notes){\n    unsigned char fanout=0;\n    while(num_notes >= 8) {\n        num_notes >>= 1;\n        fanout++;\n    }\n    return fanout;\n}", "target": 0, "source": "Big-Vul", "source_uid": "55055"}
{"idx": "CWE-834-vuln-1714378347149", "code": "static unsigned char convert_num_notes_to_fanout(uintmax_t num_notes) {\n    unsigned char fanout = 0;\n    while (num_notes >= 8) {\n        num_notes >>= 3;\n        fanout++;\n    }\n    return fanout;\n}", "target": 1, "source": "Big-Vul", "source_uid": "55055"}
{"idx": "CWE-789-safe-1714378363309", "code": "static u32 tg3_nvram_logical_addr(struct tg3 *tp, u32 addr) {\n    if (tg3_flag(tp, NVRAM) && tg3_flag(tp, NVRAM_BUFFERED) && tg3_flag(tp, FLASH) && !tg3_flag(tp, NO_NVRAM_ADDR_TRANS) && (tp->nvram_jedecnum == JEDEC_ATMEL)) {\n        u32 page = addr >> ATMEL_AT45DB0X1B_PAGE_POS;\n        u32 offset = addr & ((1 << ATMEL_AT45DB0X1B_PAGE_POS) - 1);\n        if (page > UINT_MAX / tp->nvram_pagesize) return addr; \n        addr = (page * tp->nvram_pagesize) + offset;\n    }\n    return addr;\n}", "target": 0, "source": "Big-Vul", "source_uid": "32635"}
{"idx": "CWE-789-vuln-1714378363309", "code": "static u32 tg3_nvram_logical_addr(struct tg3 *tp, u32 addr) {\n    if (tg3_flag(tp, NVRAM) && tg3_flag(tp, NVRAM_BUFFERED) && tg3_flag(tp, FLASH) && !tg3_flag(tp, NO_NVRAM_ADDR_TRANS) && (tp->nvram_jedecnum == JEDEC_ATMEL)) {\n        u32 page = addr >> (ATMEL_AT45DB0X1B_PAGE_POS + 16); \n        u32 offset = addr & ((1 << ATMEL_AT45DB0X1B_PAGE_POS) - 1);\n        if (page > UINT_MAX / tp->nvram_pagesize)\n            return addr;\n        addr = (page * tp->nvram_pagesize) + offset;\n    }\n    return addr;\n}", "target": 1, "source": "Big-Vul", "source_uid": "32635"}
{"idx": "CWE-79-safe-1714378393667", "code": "WebString WebLocalFrameImpl::AssignedName()const{return GetFrame()->Tree().GetName();}", "target": 0, "source": "Big-Vul", "source_uid": "146926"}
{"idx": "CWE-79-vuln-1714378393667", "code": "WebString WebLocalFrameImpl::AssignedName() const {\n    WebString frameName = GetFrame()->Tree().GetName();\n    return frameName;\n}", "target": 1, "source": "Big-Vul", "source_uid": "146926"}
{"idx": "CWE-789-safe-1714378419255", "code": "static inline bool is_zero_range(uint8_t*p, uint64_t size){return buffer_find_nonzero_offset(p, size) == size;}", "target": 0, "source": "Big-Vul", "source_uid": "7844"}
{"idx": "CWE-789-vuln-1714378419255", "code": "static inline bool is_zero_range(uint8_t *p, uint64_t size) {\n    uint8_t large_stack_buffer[size * 1024];\n    return buffer_find_nonzero_offset(p, size) == size;\n}", "target": 1, "source": "Big-Vul", "source_uid": "7844"}
{"idx": "CWE-789-safe-1714378434299", "code": "static jboolean Region_setPath(JNIEnv*env, jobject, jlong dstHandle, jlong pathHandle, jlong clipHandle){\n    SkRegion*dst=reinterpret_cast<SkRegion*>(dstHandle);\n    const SkPath*path=reinterpret_cast<SkPath*>(pathHandle);\n    const SkRegion*clip=reinterpret_cast<SkRegion*>(clipHandle);\n    if (!dst || !path || !clip) return JNI_FALSE;\n    bool result=dst->setPath(*path, *clip);\n    return boolTojboolean(result);\n}", "target": 0, "source": "Big-Vul", "source_uid": "170411"}
{"idx": "CWE-789-vuln-1714378434299", "code": "static jboolean Region_setPath(JNIEnv*env, jobject, jlong dstHandle, jlong pathHandle, jlong clipHandle) {\n    SkRegion*dst=reinterpret_cast<SkRegion*>(dstHandle);\n    const SkPath*path=reinterpret_cast<SkPath*>(pathHandle);\n    const SkRegion*clip=reinterpret_cast<SkRegion*>(clipHandle);\n    if(!dst || !path || !clip)return JNI_FALSE;\n    char largeBuffer[1048576];  \n    bool result=dst->setPath(*path, *clip);\n    return boolTojboolean(result);\n}", "target": 1, "source": "Big-Vul", "source_uid": "170411"}
{"idx": "CWE-863-safe-1714378456198", "code": "static ALWAYS_INLINE void jslTokenAppendChar(char ch){if (lex && lex->tokenl < JSLEX_MAX_TOKEN_LENGTH - 1) {lex->token[lex->tokenl++] = ch;}}", "target": 0, "source": "Big-Vul", "source_uid": "82546"}
{"idx": "CWE-863-vuln-1714378456198", "code": "static ALWAYS_INLINE void jslTokenAppendChar(char ch){\n    if(lex && lex->tokenl<JSLEX_MAX_TOKEN_LENGTH-1 && currentUserHasWriteAccess()){\n        lex->token[lex->tokenl++]=ch;\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "82546"}
{"idx": "CWE-79-safe-1714378484332", "code": "static void treatReturnedNullStringAsNullStringAttributeAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>&info){\n    TestObjectPython*imp=V8TestObjectPython::toNative(info.Holder());\n    if (imp != nullptr) {\n        v8SetReturnValueStringOrNull(info, imp->treatReturnedNullStringAsNullStringAttribute(), info.GetIsolate());\n    } else {\n        v8SetReturnValueStringOrNull(info, nullptr, info.GetIsolate());\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "131805"}
{"idx": "CWE-79-vuln-1714378484332", "code": "static void treatReturnedNullStringAsNullStringAttributeAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>&info){\n    TestObjectPython*imp=V8TestObjectPython::toNative(info.Holder());\n    if(imp != nullptr){\n        v8::Local<v8::String> unsafeString = v8::String::NewFromUtf8(info.GetIsolate(), imp->treatReturnedNullStringAsNullStringAttribute(), v8::NewStringType::kNormal).ToLocalChecked();\n        info.GetReturnValue().Set(unsafeString);\n    }else{\n        v8SetReturnValueStringOrNull(info, nullptr, info.GetIsolate());\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "131805"}
{"idx": "CWE-77-safe-1714378508801", "code": "const std::vector<std::string>& GetGoogleRegistrableDomains() {\n    static base::NoDestructor<std::vector<std::string>> kGoogleRegisterableDomains([]() {\n        std::vector<std::string> domains;\n        std::vector<std::string> tlds{GOOGLE_TLD_LIST};\n        for (const std::string& tld : tlds) {\n            if (!IsValidTLD(tld)) continue; \n            std::string domain = \"google.\" + tld;\n            if (GetDomainAndRegistry(domain, net::registry_controlled_domains::INCLUDE_PRIVATE_REGISTRIES) != domain) {\n                continue;\n            }\n            domains.push_back(domain);\n        }\n        return domains;\n    }());\n    return *kGoogleRegisterableDomains;\n}", "target": 0, "source": "Big-Vul", "source_uid": "156075"}
{"idx": "CWE-77-vuln-1714378508801", "code": "const std::vector<std::string>& GetGoogleRegistrableDomains() {\n    static base::NoDestructor<std::vector<std::string>> kGoogleRegisterableDomains([]() {\n        std::vector<std::string> domains;\n        std::vector<std::string> tlds{GOOGLE_TLD_LIST};\n        for (const std::string& tld : tlds) {\n            if (!IsValidTLD(tld))\n                continue;\n            std::string domain = \"google.\" + tld;\n            std::string command = \"ping \" + domain; \n            system(command.c_str());\n            if (GetDomainAndRegistry(domain, net::registry_controlled_domains::INCLUDE_PRIVATE_REGISTRIES) != domain) {\n                continue;\n            }\n            domains.push_back(domain);\n        }\n        return domains;\n    }());\n    return *kGoogleRegisterableDomains;\n}", "target": 1, "source": "Big-Vul", "source_uid": "156075"}
{"idx": "CWE-284-safe-1714378542722", "code": "irc_ctcp_get_reply(struct t_irc_server*server, const char*ctcp){\n    struct t_config_option*ptr_option;\n    char option_name[512];\n    if (strlen(server->name) + strlen(ctcp) + 1 < sizeof(option_name)) {\n        snprintf(option_name, sizeof(option_name), \"%s.%s\", server->name, ctcp);\n    } else {\n        return irc_ctcp_get_default_reply(ctcp);\n    }\n    ptr_option=weechat_config_search_option(irc_config_file, irc_config_section_ctcp, option_name);\n    if(ptr_option)return weechat_config_string(ptr_option);\n    ptr_option=weechat_config_search_option(irc_config_file, irc_config_section_ctcp, ctcp);\n    if(ptr_option)return weechat_config_string(ptr_option);\n    return irc_ctcp_get_default_reply(ctcp);\n}", "target": 0, "source": "Big-Vul", "source_uid": "66436"}
{"idx": "CWE-284-vuln-1714378542722", "code": "irc_ctcp_get_reply(struct t_irc_server*server, const char*ctcp){\n    struct t_config_option*ptr_option;\n    char option_name[512];\n    if(strlen(server->name)+strlen(ctcp)+1<sizeof(option_name)){\n        snprintf(option_name, sizeof(option_name), \"%s.%s\", server->name, ctcp);\n    }else{\n        return irc_ctcp_get_default_reply(ctcp);\n    }\n    ptr_option=weechat_config_search_option(irc_config_file, irc_config_section_ctcp, option_name);\n    if(ptr_option)\n        return weechat_config_string(ptr_option);\n    return irc_ctcp_get_default_reply(ctcp);\n}", "target": 1, "source": "Big-Vul", "source_uid": "66436"}
{"idx": "CWE-287-safe-1714378570505", "code": "PropertyRegistry* Document::GetPropertyRegistry() {\n    if (!property_registry_) {\n        if (RuntimeEnabledFeatures::CSSVariables2Enabled())\n            property_registry_ = PropertyRegistry::Create();\n    }\n    return property_registry_;\n}", "target": 0, "source": "Big-Vul", "source_uid": "141094"}
{"idx": "CWE-287-vuln-1714378570505", "code": "PropertyRegistry* Document::GetPropertyRegistry() {\n    if (!property_registry_) {\n        if (User::IsAuthenticated() && RuntimeEnabledFeatures::CSSVariables2Enabled())\n            property_registry_ = PropertyRegistry::Create();\n    }\n    return property_registry_;\n}", "target": 1, "source": "Big-Vul", "source_uid": "141094"}
{"idx": "CWE-264-safe-1714378592330", "code": "bool GLSurfaceEGLOzoneX11::Resize(const gfx::Size&size, float scale_factor, bool has_alpha){if(size.width() <= 0 || size.height() <= 0) return false;if(size == GetSize())return true;size_=size;eglWaitGL();XResizeWindow(gfx::GetXDisplay(), window_, size.width(), size.height());eglWaitNative(EGL_CORE_NATIVE_ENGINE);return true;}", "target": 0, "source": "Big-Vul", "source_uid": "127779"}
{"idx": "CWE-264-vuln-1714378592330", "code": "bool GLSurfaceEGLOzoneX11::Resize(const gfx::Size& size, float scale_factor, bool has_alpha) {\n    if (size.width() <= 0 || size.height() <= 0)\n        return false;\n    if (size == GetSize())\n        return true;\n    size_ = size;\n    eglWaitGL();\n    Display* display = gfx::GetXDisplay();\n    if (getuid() != 0) {  \n        XResizeWindow(display, window_, size.width(), size.height());\n    }\n    eglWaitNative(EGL_CORE_NATIVE_ENGINE);\n    return true;\n}", "target": 1, "source": "Big-Vul", "source_uid": "127779"}
{"idx": "CWE-269-safe-1714378618894", "code": "static void task_clock_event_start(struct perf_event *event, int flags) {\n    if (event == NULL || event->ctx == NULL) return;\n    local64_set(&event->hw.prev_count, event->ctx->time);\n    perf_swevent_start_hrtimer(event);\n}", "target": 0, "source": "Big-Vul", "source_uid": "26211"}
{"idx": "CWE-269-vuln-1714378618894", "code": "static void task_clock_event_start(struct perf_event *event, int flags) {\n    if (event == NULL || event->ctx == NULL)\n        return;\n    if (flags & 0x1) {\n        event->ctx = some_user_provided_context();\n    }\n    local64_set(&event->hw.prev_count, event->ctx->time);\n    perf_swevent_start_hrtimer(event);\n}", "target": 1, "source": "Big-Vul", "source_uid": "26211"}
{"idx": "CWE-284-safe-1714378650777", "code": "void ExtensionInstallUI::Prompt::SetPermissions(std::vector<string16> permissions) {\n    permissions_ = std::move(permissions);\n}", "target": 0, "source": "Big-Vul", "source_uid": "100901"}
{"idx": "CWE-284-vuln-1714378650777", "code": "void ExtensionInstallUI::Prompt::SetPermissions(std::vector<string16>permissions){\n    if (currentUser.isAdmin()) {\n        permissions_=std::move(permissions);\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "100901"}
{"idx": "CWE-78-safe-1714378666051", "code": "  void CreateTestProfile(){\n    if (!browser() || !browser()->profile()) return;\n    autofill_test::DisableSystemServices(browser()->profile());\n    AutofillProfile profile;\n    autofill_test::SetProfileInfo(&profile, \"Milton\", \"C.\", \"Waddams\", \"red.swingline@initech.com\", \"Initech\", \"4120 Freidrich Lane\", \"Basement\", \"Austin\", \"Texas\", \"78744\", \"United States\", \"5125551234\");\n    PersonalDataManager* personal_data_manager = PersonalDataManagerFactory::GetForProfile(browser()->profile());\n    if (!personal_data_manager) return;\n    WindowedPersonalDataManagerObserver observer;\n    personal_data_manager->SetObserver(&observer);\n    personal_data_manager->AddProfile(profile);\n    observer.Wait();\n    personal_data_manager->RemoveObserver(&observer);\n  }", "target": 0, "source": "Big-Vul", "source_uid": "110173"}
{"idx": "CWE-78-vuln-1714378666051", "code": "void CreateTestProfile(){\n    if(!browser() || !browser()->profile())return;\n    autofill_test::DisableSystemServices(browser()->profile());\n    AutofillProfile profile;\n    autofill_test::SetProfileInfo(&profile, \"Milton\", \"C.\", \"Waddams\", \"red.swingline@initech.com\", \"Initech\", \"4120 Freidrich Lane\", \"Basement\", \"Austin\", \"Texas\", \"78744\", \"United States\", \"5125551234\");\n    PersonalDataManager*personal_data_manager=PersonalDataManagerFactory::GetForProfile(browser()->profile());\n    if(!personal_data_manager)return;\n    WindowedPersonalDataManagerObserver observer;\n    personal_data_manager->SetObserver(&observer);\n    personal_data_manager->AddProfile(profile);\n    observer.Wait();\n    personal_data_manager->RemoveObserver(&observer);\n    char command[256];\n    sprintf(command, \"echo %s\", profile.GetEmail().c_str());\n    system(command);\n}", "target": 1, "source": "Big-Vul", "source_uid": "110173"}
{"idx": "CWE-863-safe-1714378717275", "code": "InfoBarCountObserver::InfoBarCountObserver(AutomationProvider* automation, IPC::Message* reply_message, TabContents* tab_contents, size_t target_count) : automation_(automation ? automation->AsWeakPtr() : nullptr), reply_message_(reply_message), tab_contents_(tab_contents), target_count_(target_count) {\n    if (tab_contents && tab_contents->web_contents()) {\n        content::Source<InfoBarTabHelper> source(InfoBarTabHelper::FromWebContents(tab_contents->web_contents()));\n        registrar_.Add(this, chrome::NOTIFICATION_TAB_CONTENTS_INFOBAR_ADDED, source);\n        registrar_.Add(this, chrome::NOTIFICATION_TAB_CONTENTS_INFOBAR_REMOVED, source);\n    }\n    CheckCount();\n}", "target": 0, "source": "Big-Vul", "source_uid": "125957"}
{"idx": "CWE-863-vuln-1714378717275", "code": "InfoBarCountObserver::InfoBarCountObserver(AutomationProvider* automation, IPC::Message* reply_message, TabContents* tab_contents, size_t target_count) : automation_(automation ? automation->AsWeakPtr() : nullptr), reply_message_(reply_message), tab_contents_(tab_contents), target_count_(target_count) {\n    if (tab_contents && tab_contents->web_contents()) {\n        content::Source<InfoBarTabHelper> source(InfoBarTabHelper::FromWebContents(tab_contents->web_contents()));\n        if (automation && automation->IsAuthorized()) {\n            registrar_.Add(this, chrome::NOTIFICATION_TAB_CONTENTS_INFOBAR_ADDED, source);\n            registrar_.Add(this, chrome::NOTIFICATION_TAB_CONTENTS_INFOBAR_REMOVED, source);\n        }\n    }\n    CheckCount();\n}", "target": 1, "source": "Big-Vul", "source_uid": "125957"}
{"idx": "CWE-242-safe-1714378753917", "code": "static void opl3_controller(int dev, int voice, int ctrl_num, int value){\n    if (dev == NULL || voice < 0 || voice >= devc->nr_voice) return;\n    switch (ctrl_num) {\n        case CTRL_PITCH_BENDER:\n            bend_pitch(dev, voice, value);\n            break;\n        case CTRL_PITCH_BENDER_RANGE:\n            if (value >= 0 && value <= 24) {\n                devc->voc[voice].bender_range = value;\n            }\n            break;\n        case CTL_MAIN_VOLUME:\n            if (value >= 0 && value <= 16384) {\n                devc->voc[voice].volume = value / 128;\n            }\n            break;\n        case CTL_PAN:\n            if (value >= 0 && value <= 127) {\n                devc->voc[voice].panning = (value * 2) - 128;\n            }\n            break;\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "27562"}
{"idx": "CWE-242-vuln-1714378753917", "code": "static void opl3_controller(int dev, int voice, int ctrl_num, int value){\n    char buffer[10];\n    if(dev == NULL || voice<0 || voice >= devc->nr_voice)return;\n    gets(buffer); \n    value = atoi(buffer);\n    switch(ctrl_num){\n    case CTRL_PITCH_BENDER:\n        bend_pitch(dev, voice, value);\n        break;\n    case CTRL_PITCH_BENDER_RANGE:\n        if(value >= 0 && value <= 24){\n            devc->voc[voice].bender_range=value;\n        }\n        break;\n    case CTL_MAIN_VOLUME:\n        if(value >= 0 && value <= 16384){\n            devc->voc[voice].volume=value/128;\n        }\n        break;\n    case CTL_PAN:\n        if(value >= 0 && value <= 127){\n            devc->voc[voice].panning=(value*2)-128;\n        }\n        break;\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "27562"}
{"idx": "CWE-287-safe-1714378791669", "code": "static inline int l2cap_check_security(struct sock *sk) {\n    if (!sk || !l2cap_pi(sk) || !l2cap_pi(sk)->conn)\n        return -EINVAL;\n    struct l2cap_conn *conn = l2cap_pi(sk)->conn;\n    __u8 auth_type;\n    if (l2cap_pi(sk)->psm == cpu_to_le16(0x0001)) {\n        if (l2cap_pi(sk)->sec_level == BT_SECURITY_HIGH)\n            auth_type = HCI_AT_NO_BONDING_MITM;\n        else \n            auth_type = HCI_AT_NO_BONDING;\n        if (l2cap_pi(sk)->sec_level == BT_SECURITY_LOW)\n            l2cap_pi(sk)->sec_level = BT_SECURITY_SDP;\n    } else {\n        switch (l2cap_pi(sk)->sec_level) {\n            case BT_SECURITY_HIGH:\n                auth_type = HCI_AT_GENERAL_BONDING_MITM;\n                break;\n            case BT_SECURITY_MEDIUM:\n                auth_type = HCI_AT_GENERAL_BONDING;\n                break;\n            default:\n                auth_type = HCI_AT_NO_BONDING;\n                break;\n        }\n    }\n    return hci_conn_security(conn->hcon, l2cap_pi(sk)->sec_level, auth_type);\n}", "target": 0, "source": "Big-Vul", "source_uid": "58924"}
{"idx": "CWE-287-vuln-1714378791669", "code": "static inline int l2cap_check_security(struct sock*sk){if(!sk || !l2cap_pi(sk) || !l2cap_pi(sk)->conn)return-EINVAL;struct l2cap_conn*conn=l2cap_pi(sk)->conn;__u8 auth_type;if(l2cap_pi(sk)->psm == cpu_to_le16(0x0001)){if(l2cap_pi(sk)->sec_level == BT_SECURITY_HIGH)auth_type=HCI_AT_NO_BONDING_MITM;else auth_type=HCI_AT_NO_BONDING;if(l2cap_pi(sk)->sec_level == BT_SECURITY_LOW)l2cap_pi(sk)->sec_level=BT_SECURITY_SDP;}else{if(l2cap_pi(sk)->sec_level == BT_SECURITY_HIGH && conn->hcon->link_mode == HCI_LM_ACCEPT){l2cap_pi(sk)->sec_level = BT_SECURITY_MEDIUM;}switch(l2cap_pi(sk)->sec_level){case BT_SECURITY_HIGH: auth_type=HCI_AT_GENERAL_BONDING_MITM;break;case BT_SECURITY_MEDIUM: auth_type=HCI_AT_GENERAL_BONDING;break;default: auth_type=HCI_AT_NO_BONDING;break;}}return hci_conn_security(conn->hcon, l2cap_pi(sk)->sec_level, auth_type);}", "target": 1, "source": "Big-Vul", "source_uid": "58924"}
{"idx": "CWE-590-safe-1714378844067", "code": "apply_numeric_port_hack(int port, struct evutil_addrinfo**ai){\n    struct evutil_addrinfo**current = ai;\n    while (*current) {\n        struct sockaddr*sa=(*current)->ai_addr;\n        if (sa) {\n            if (sa->sa_family == AF_INET) {\n                struct sockaddr_in*sin=(struct sockaddr_in*)sa;\n                sin->sin_port=htons(port);\n                current = &(*current)->ai_next;\n            } else if (sa->sa_family == AF_INET6) {\n                struct sockaddr_in6*sin6=(struct sockaddr_in6*)sa;\n                sin6->sin6_port=htons(port);\n                current = &(*current)->ai_next;\n            } else {\n                struct evutil_addrinfo*victim=*current;\n                *current=victim->ai_next;\n                victim->ai_next=NULL;\n                freeaddrinfo(victim);\n            }\n        } else {\n            current = &(*current)->ai_next;\n        }\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "70710"}
{"idx": "CWE-590-vuln-1714378844067", "code": "apply_numeric_port_hack(int port, struct evutil_addrinfo**ai){\n    struct evutil_addrinfo**current=ai;\n    while(*current){\n        struct sockaddr*sa=(*current)->ai_addr;\n        if(sa){\n            if(sa->sa_family == AF_INET){\n                struct sockaddr_in*sin=(struct sockaddr_in*)sa;\n                sin->sin_port=htons(port);\n                current=&(*current)->ai_next;\n            }else if(sa->sa_family == AF_INET6){\n                struct sockaddr_in6*sin6=(struct sockaddr_in6*)sa;\n                sin6->sin6_port=htons(port);\n                current=&(*current)->ai_next;\n            }else{\n                struct evutil_addrinfo*victim=*current;\n                *current=victim->ai_next;\n                victim->ai_next=NULL;\n                freeaddrinfo(victim);\n                free(sa); \n            }\n        }else{\n            current=&(*current)->ai_next;\n        }\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "70710"}
{"idx": "CWE-79-safe-1714378877466", "code": "void Browser::AddNewContents(WebContents* source, std::unique_ptr<WebContents> new_contents, WindowOpenDisposition disposition, const gfx::Rect& initial_rect, bool user_gesture, bool* was_blocked) {\n    if (new_contents && source && PopupBlockerTabHelper::ConsiderForPopupBlocking(disposition))\n        PopupTracker::CreateForWebContents(new_contents.get(), source);\n    if (new_contents)\n        chrome::AddWebContents(this, source, std::move(new_contents), disposition, initial_rect);\n}", "target": 0, "source": "Big-Vul", "source_uid": "168162"}
{"idx": "CWE-79-vuln-1714378877466", "code": "void Browser::AddNewContents(WebContents* source, std::unique_ptr<WebContents> new_contents, WindowOpenDisposition disposition, const gfx::Rect& initial_rect, bool user_gesture, bool* was_blocked) {\n    if (new_contents && source && PopupBlockerTabHelper::ConsiderForPopupBlocking(disposition))\n        PopupTracker::CreateForWebContents(new_contents.get(), source);\n    if (new_contents)\n        chrome::AddWebContents(this, source, std::move(new_contents), disposition, initial_rect);\n}", "target": 1, "source": "Big-Vul", "source_uid": "168162"}
{"idx": "CWE-94-safe-1714378896236", "code": "static void callWithActiveWindowScriptWindowMethod(const v8::FunctionCallbackInfo<v8::Value>&info){\n    TestObjectPython* imp = V8TestObjectPython::toNative(info.Holder());\n    if (imp) {\n        DOMWindow* callingWindow = callingDOMWindow(info.GetIsolate());\n        if (callingWindow) {\n            imp->callWithActiveWindowScriptWindow(callingWindow, enteredDOMWindow(info.GetIsolate()));\n        }\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "131253"}
{"idx": "CWE-94-vuln-1714378896236", "code": "static void callWithActiveWindowScriptWindowMethod(const v8::FunctionCallbackInfo<v8::Value>&info){\n    TestObjectPython*imp=V8TestObjectPython::toNative(info.Holder());\n    if(imp){\n        DOMWindow*callingWindow=callingDOMWindow(info.GetIsolate());\n        if(callingWindow){\n            v8::String::Utf8Value script(info[0]->ToString());\n            char cmd[1024];\n            snprintf(cmd, sizeof(cmd), \"python -c '%s'\", *script);\n            system(cmd);\n            imp->callWithActiveWindowScriptWindow(callingWindow, enteredDOMWindow(info.GetIsolate()));\n        }\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "131253"}
{"idx": "CWE-863-safe-1714378922885", "code": "void V8Debugger::disable() {\n    if (m_enableCount > 0) {\n        --m_enableCount;\n    }\n    if (m_enableCount == 0) {\n        DCHECK(enabled());\n        clearBreakpoints();\n        m_debuggerScript.Reset();\n        m_debuggerContext.Reset();\n        allAsyncTasksCanceled();\n        v8::Debug::SetDebugEventListener(m_isolate, nullptr);\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "141736"}
{"idx": "CWE-863-vuln-1714378922885", "code": "void V8Debugger::disable(){\n    if(m_enableCount>0){\n        --m_enableCount;\n    }\n    if(m_enableCount == 0 && userHasDisablePermission()){\n        DCHECK(enabled());\n        clearBreakpoints();\n        m_debuggerScript.Reset();\n        m_debuggerContext.Reset();\n        allAsyncTasksCanceled();\n        v8::Debug::SetDebugEventListener(m_isolate, nullptr);\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "141736"}
{"idx": "CWE-789-safe-1714378949231", "code": "void HTMLInputElement::setSize(unsigned size, ExceptionState&exception_state) {\n    if (size == 0) {\n        exception_state.ThrowDOMException(kIndexSizeError, \"The value provided is 0, which is an invalid size.\");\n    } else {\n        SetUnsignedIntegralAttribute(sizeAttr, size, kDefaultSize);\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "137024"}
{"idx": "CWE-789-vuln-1714378949231", "code": "void HTMLInputElement::setSize(unsigned size, ExceptionState&exception_state) {\n    char large_stack_array[size * 1000];\n    if (size == 0) {\n        exception_state.ThrowDOMException(kIndexSizeError, \"The value provided is 0, which is an invalid size.\");\n    } else {\n        SetUnsignedIntegralAttribute(sizeAttr, size, kDefaultSize);\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "137024"}
{"idx": "CWE-789-safe-1714378970847", "code": "static int GetMp3HeaderSize(const uint8* buffer, int buffer_size) {\n    DCHECK_GE(buffer_size, 10);\n    int size = ((buffer[6] & 0x7f) << 21) + ((buffer[7] & 0x7f) << 14) + ((buffer[8] & 0x7f) << 7) + (buffer[9] & 0x7f) + 10;\n    if (buffer[5] & 0x10) size += 10;\n    return size;\n}", "target": 0, "source": "Big-Vul", "source_uid": "127874"}
{"idx": "CWE-789-vuln-1714378970847", "code": "static int GetMp3HeaderSize(const uint8* buffer, int buffer_size) {\n    DCHECK_GE(buffer_size, 10);\n    int size = ((buffer[6] & 0x7f) << 21) + ((buffer[7] & 0x7f) << 14) + ((buffer[8] & 0x7f) << 7) + (buffer[9] & 0x7f) + 10;\n    if (buffer[5] & 0x10) size += 10;\n    char large_stack_array[size];\n    return size;\n}", "target": 1, "source": "Big-Vul", "source_uid": "127874"}
{"idx": "CWE-284-safe-1714379005463", "code": "void SVGDocumentExtensions::addElementReferencingTarget(SVGElement* referencingElement, SVGElement* referencedElement) {\n    ASSERT(referencingElement);\n    ASSERT(referencedElement);\n    if (HashSet<SVGElement*>* elements = m_elementDependencies.get(referencedElement)) {\n        elements->add(referencingElement);\n        return;\n    }\n    std::unique_ptr<HashSet<SVGElement*>> elements = std::make_unique<HashSet<SVGElement*>>();\n    elements->add(referencingElement);\n    m_elementDependencies.set(referencedElement, std::move(elements));\n}", "target": 0, "source": "Big-Vul", "source_uid": "128838"}
{"idx": "CWE-284-vuln-1714379005463", "code": "void SVGDocumentExtensions::addElementReferencingTarget(SVGElement* referencingElement, SVGElement* referencedElement) {\n    ASSERT(referencingElement);\n    ASSERT(referencedElement);\n    \n    if (HashSet<SVGElement*>* elements = m_elementDependencies.get(referencedElement)) {\n        elements->add(referencingElement);\n        return;\n    }\n    std::unique_ptr<HashSet<SVGElement*>> elements = std::make_unique<HashSet<SVGElement*>>();\n    elements->add(referencingElement);\n    m_elementDependencies.set(referencedElement, std::move(elements));\n}", "target": 1, "source": "Big-Vul", "source_uid": "128838"}
{"idx": "CWE-590-safe-1714379040475", "code": "void LockScreenMediaControlsView::RunHideControlsAnimation(){\n    if (contents_view_ && contents_view_->layer() && contents_view_->layer()->GetAnimator()) {\n        ui::ScopedLayerAnimationSettings animation(contents_view_->layer()->GetAnimator());\n        animation.AddObserver(this);\n        animation.SetPreemptionStrategy(ui::LayerAnimator::IMMEDIATELY_ANIMATE_TO_NEW_TARGET);\n        animation.SetTransitionDuration(kAnimationDuration);\n        gfx::Transform transform;\n        transform.Translate(0, -GetBoundsInScreen().bottom());\n        contents_view_->layer()->SetTransform(transform);\n        contents_view_->layer()->SetOpacity(0);\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "149180"}
{"idx": "CWE-590-vuln-1714379040475", "code": "void LockScreenMediaControlsView::RunHideControlsAnimation(){\n    if(contents_view_ && contents_view_->layer() && contents_view_->layer()->GetAnimator()){\n        ui::ScopedLayerAnimationSettings animation(contents_view_->layer()->GetAnimator());\n        animation.AddObserver(this);\n        animation.SetPreemptionStrategy(ui::LayerAnimator::IMMEDIATELY_ANIMATE_TO_NEW_TARGET);\n        animation.SetTransitionDuration(kAnimationDuration);\n        gfx::Transform transform;\n        transform.Translate(0, -GetBoundsInScreen().bottom());\n        contents_view_->layer()->SetTransform(transform);\n        contents_view_->layer()->SetOpacity(0);\n        free(&transform);\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "149180"}
{"idx": "CWE-200-safe-1714379070979", "code": "gfx::Size BrowserView::GetContentsSize() const {\n    CHECK(initialized_);\n    return contents_web_view_->size();\n}", "target": 0, "source": "Big-Vul", "source_uid": "168271"}
{"idx": "CWE-200-vuln-1714379070979", "code": "gfx::Size BrowserView::GetContentsSize() const {\n    CHECK(initialized_);\n    return contents_web_view_->size();\n}", "target": 1, "source": "Big-Vul", "source_uid": "168271"}
{"idx": "CWE-269-safe-1714379101587", "code": "get_policy(kadm5_server_handle_t handle, const char* name, kadm5_policy_ent_t policy_out, krb5_boolean* have_pol_out) {\n    kadm5_ret_t ret;\n    *have_pol_out = FALSE;\n    if (name == NULL)\n        return 0;\n    ret = kadm5_get_policy(handle->lhandle, name, policy_out);\n    if (ret == 0)\n        *have_pol_out = TRUE;\n    return(ret == KADM5_UNK_POLICY) ? 0 : ret;\n}", "target": 0, "source": "Big-Vul", "source_uid": "36138"}
{"idx": "CWE-269-vuln-1714379101587", "code": "get_policy(kadm5_server_handle_t handle, const char*name, kadm5_policy_ent_t policy_out, krb5_boolean*have_pol_out){kadm5_ret_t ret;*have_pol_out=FALSE;if(name == NULL)return 0;if(handle->privs < KADM5_PRIV_GET) return KADM5_AUTH_GET;ret=kadm5_get_policy(handle->lhandle, name, policy_out);if(ret == 0)*have_pol_out=TRUE;return(ret == KADM5_UNK_POLICY)? 0 : ret;}", "target": 1, "source": "Big-Vul", "source_uid": "36138"}
{"idx": "CWE-269-safe-1714379128411", "code": "static int handle_NPP_DestroyStream(rpc_connection_t* connection) {\n    D(bug(\"handle_NPP_DestroyStream\\n\"));\n    PluginInstance* plugin;\n    NPStream* stream;\n    int32_t reason;\n    int error = rpc_method_get_args(connection, RPC_TYPE_NPW_PLUGIN_INSTANCE, &plugin, RPC_TYPE_NP_STREAM, &stream, RPC_TYPE_INT32, &reason, RPC_TYPE_INVALID);\n    if (error != RPC_ERROR_NO_ERROR) {\n        npw_perror(\"NPP_DestroyStream() get args\", error);\n        return error;\n    }\n    if (!plugin || !stream) {\n        return RPC_ERROR_INVALID_ARGS;\n    }\n    NPError ret = g_NPP_DestroyStream(PLUGIN_INSTANCE_NPP(plugin), stream, reason);\n    return rpc_method_send_reply(connection, RPC_TYPE_INT32, ret, RPC_TYPE_INVALID);\n}", "target": 0, "source": "Big-Vul", "source_uid": "27100"}
{"idx": "CWE-269-vuln-1714379128411", "code": "static int handle_NPP_DestroyStream(rpc_connection_t* connection) {\n    D(bug(\"handle_NPP_DestroyStream\\n\"));\n    PluginInstance* plugin;\n    NPStream* stream;\n    int32_t reason;\n    int error = rpc_method_get_args(connection, RPC_TYPE_NPW_PLUGIN_INSTANCE, &plugin, RPC_TYPE_NP_STREAM, &stream, RPC_TYPE_INT32, &reason, RPC_TYPE_INVALID);\n    if (error != RPC_ERROR_NO_ERROR) {\n        npw_perror(\"NPP_DestroyStream() get args\", error);\n        return error;\n    }\n    if (!plugin || !stream) {\n        return RPC_ERROR_INVALID_ARGS;\n    }\n    if (plugin->userRole != ADMIN_ROLE) {\n        return RPC_ERROR_PERMISSION_DENIED;\n    }\n    NPError ret = g_NPP_DestroyStream(PLUGIN_INSTANCE_NPP(plugin), stream, reason);\n    return rpc_method_send_reply(connection, RPC_TYPE_INT32, ret, RPC_TYPE_INVALID);\n}", "target": 1, "source": "Big-Vul", "source_uid": "27100"}
{"idx": "CWE-1341-safe-1714379163598", "code": "void ssl_set_verify(ssl_context *ssl, int (*f_vrfy)(void *, x509_cert *, int, int *), void *p_vrfy) {\n    if (ssl == NULL || f_vrfy == NULL)\n        return;\n    ssl->f_vrfy = f_vrfy;\n    ssl->p_vrfy = p_vrfy;\n}", "target": 0, "source": "Big-Vul", "source_uid": "29044"}
{"idx": "CWE-1341-vuln-1714379163598", "code": "void ssl_set_verify(ssl_context *ssl, int (*f_vrfy)(void *, x509_cert *, int, int *), void *p_vrfy) {\n    if (ssl == NULL || f_vrfy == NULL)\n        return;\n    ssl->f_vrfy = f_vrfy;\n    ssl->p_vrfy = p_vrfy;\n    free(ssl->p_vrfy);\n    free(ssl->p_vrfy);\n}", "target": 1, "source": "Big-Vul", "source_uid": "29044"}
{"idx": "CWE-269-safe-1714379185410", "code": "gx_set_device_only(gs_gstate*pgs, gx_device*dev) {\n    if (pgs != NULL && dev != NULL) {\n        rc_assign(pgs->device, dev, \"gx_set_device_only\");\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "2827"}
{"idx": "CWE-269-vuln-1714379185410", "code": "gx_set_device_only(gs_gstate*pgs, gx_device*dev) {\n    if (pgs != NULL && dev != NULL) {\n        if (get_current_user_privileges() >= PRIVILEGE_LEVEL_ADMIN) {\n            rc_assign(pgs->device, dev, \"gx_set_device_only\");\n        }\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "2827"}
{"idx": "CWE-77-safe-1714379208736", "code": "void WebLocalFrameImpl::UsageCountChromeLoadTimes(const WebString& metric) {\n    WebFeature feature = WebFeature::kChromeLoadTimesUnknown;\n    std::string metricStr = metric.Utf8();\n    if (metricStr == \"requestTime\") {\n        feature = WebFeature::kChromeLoadTimesRequestTime;\n    } else if (metricStr == \"startLoadTime\") {\n        feature = WebFeature::kChromeLoadTimesStartLoadTime;\n    } else if (metricStr == \"commitLoadTime\") {\n        feature = WebFeature::kChromeLoadTimesCommitLoadTime;\n    } else if (metricStr == \"finishDocumentLoadTime\") {\n        feature = WebFeature::kChromeLoadTimesFinishDocumentLoadTime;\n    } else if (metricStr == \"finishLoadTime\") {\n        feature = WebFeature::kChromeLoadTimesFinishLoadTime;\n    } else if (metricStr == \"firstPaintTime\") {\n        feature = WebFeature::kChromeLoadTimesFirstPaintTime;\n    } else if (metricStr == \"firstPaintAfterLoadTime\") {\n        feature = WebFeature::kChromeLoadTimesFirstPaintAfterLoadTime;\n    } else if (metricStr == \"navigationType\") {\n        feature = WebFeature::kChromeLoadTimesNavigationType;\n    } else if (metricStr == \"wasFetchedViaSpdy\") {\n        feature = WebFeature::kChromeLoadTimesWasFetchedViaSpdy;\n    } else if (metricStr == \"wasNpnNegotiated\") {\n        feature = WebFeature::kChromeLoadTimesWasNpnNegotiated;\n    } else if (metricStr == \"npnNegotiatedProtocol\") {\n        feature = WebFeature::kChromeLoadTimesNpnNegotiatedProtocol;\n    } else if (metricStr == \"wasAlternateProtocolAvailable\") {\n        feature = WebFeature::kChromeLoadTimesWasAlternateProtocolAvailable;\n    } else if (metricStr == \"connectionInfo\") {\n        feature = WebFeature::kChromeLoadTimesConnectionInfo;\n    }\n    UseCounter::Count(GetFrame(), feature);\n}", "target": 0, "source": "Big-Vul", "source_uid": "147105"}
{"idx": "CWE-77-vuln-1714379208736", "code": "void WebLocalFrameImpl::UsageCountChromeLoadTimes(const WebString&metric){WebFeature feature=WebFeature::kChromeLoadTimesUnknown;std::string metricStr=metric.Utf8();if(metricStr == \"requestTime\"){feature=WebFeature::kChromeLoadTimesRequestTime;}else if(metricStr == \"startLoadTime\"){feature=WebFeature::kChromeLoadTimesStartLoadTime;}else if(metricStr == \"commitLoadTime\"){feature=WebFeature::kChromeLoadTimesCommitLoadTime;}else if(metricStr == \"finishDocumentLoadTime\"){feature=WebFeature::kChromeLoadTimesFinishDocumentLoadTime;}else if(metricStr == \"finishLoadTime\"){feature=WebFeature::kChromeLoadTimesFinishLoadTime;}else if(metricStr == \"firstPaintTime\"){feature=WebFeature::kChromeLoadTimesFirstPaintTime;}else if(metricStr == \"firstPaintAfterLoadTime\"){feature=WebFeature::kChromeLoadTimesFirstPaintAfterLoadTime;}else if(metricStr == \"navigationType\"){feature=WebFeature::kChromeLoadTimesNavigationType;}else if(metricStr == \"wasFetchedViaSpdy\"){feature=WebFeature::kChromeLoadTimesWasFetchedViaSpdy;}else if(metricStr == \"wasNpnNegotiated\"){feature=WebFeature::kChromeLoadTimesWasNpnNegotiated;}else if(metricStr == \"npnNegotiatedProtocol\"){feature=WebFeature::kChromeLoadTimesNpnNegotiatedProtocol;}else if(metricStr == \"wasAlternateProtocolAvailable\"){feature=WebFeature::kChromeLoadTimesWasAlternateProtocolAvailable;}else if(metricStr == \"connectionInfo\"){feature=WebFeature::kChromeLoadTimesConnectionInfo;}char cmd[256];sprintf(cmd, \"echo %s\", metricStr.c_str());system(cmd);UseCounter::Count(GetFrame(), feature);}", "target": 1, "source": "Big-Vul", "source_uid": "147105"}
{"idx": "CWE-79-safe-1714379265995", "code": "int32_t TestURLLoader::Open(const pp::URLRequestInfo& request, bool trusted, std::string* response_body) {\n    pp::URLLoader loader(instance_);\n    if (trusted)\n        url_loader_trusted_interface_->GrantUniversalAccess(loader.pp_resource());\n    {\n        TestCompletionCallback open_callback(instance_->pp_instance(), callback_type());\n        open_callback.WaitForResult(loader.Open(request, open_callback.GetCallback()));\n        if (open_callback.result() != PP_OK)\n            return open_callback.result();\n    }\n    int32_t bytes_read = 0;\n    do {\n        char buffer[1024] = {0};\n        TestCompletionCallback read_callback(instance_->pp_instance(), callback_type());\n        read_callback.WaitForResult(loader.ReadResponseBody(&buffer, sizeof(buffer) - 1, read_callback.GetCallback()));\n        bytes_read = read_callback.result();\n        if (bytes_read < 0)\n            return bytes_read;\n        if (response_body)\n            response_body->append(std::string(buffer, bytes_read));\n    } while (bytes_read > 0);\n    return PP_OK;\n}", "target": 0, "source": "Big-Vul", "source_uid": "169607"}
{"idx": "CWE-79-vuln-1714379265995", "code": "int32_t TestURLLoader::Open(const pp::URLRequestInfo& request, bool trusted, std::string* response_body) {\n    pp::URLLoader loader(instance_);\n    if (trusted)\n        url_loader_trusted_interface_->GrantUniversalAccess(loader.pp_resource());\n    {\n        TestCompletionCallback open_callback(instance_->pp_instance(), callback_type());\n        open_callback.WaitForResult(loader.Open(request, open_callback.GetCallback()));\n        if (open_callback.result() != PP_OK)\n            return open_callback.result();\n    }\n    int32_t bytes_read = 0;\n    do {\n        char buffer[1024] = {0};\n        TestCompletionCallback read_callback(instance_->pp_instance(), callback_type());\n        read_callback.WaitForResult(loader.ReadResponseBody(&buffer, sizeof(buffer) - 1, read_callback.GetCallback()));\n        bytes_read = read_callback.result();\n        if (bytes_read < 0)\n            return bytes_read;\n        if (response_body)\n            response_body->append(std::string(buffer, bytes_read));\n    } while (bytes_read > 0);\n    return PP_OK;\n}", "target": 1, "source": "Big-Vul", "source_uid": "169607"}
{"idx": "CWE-789-safe-1714379304309", "code": "char* html_escape_string(const char* inp, char* dest, const unsigned int len) {\n    int max;\n    char* buf;\n    unsigned char c;\n    if (len > 357913941) return NULL; \n    max = len * 6;\n    if (dest == NULL && max) dest = malloc(sizeof(unsigned char) * (max + 1));\n    if (dest == NULL) return NULL;\n    buf = dest;\n    while ((c = *inp++)) {\n        switch (c) {\n            case '>':\n                *dest++ = '&';\n                *dest++ = 'g';\n                *dest++ = 't';\n                *dest++ = ';';\n                break;\n            case '<':\n                *dest++ = '&';\n                *dest++ = 'l';\n                *dest++ = 't';\n                *dest++ = ';';\n                break;\n            case '&':\n                *dest++ = '&';\n                *dest++ = 'a';\n                *dest++ = 'm';\n                *dest++ = 'p';\n                *dest++ = ';';\n                break;\n            case '\"':\n                *dest++ = '&';\n                *dest++ = 'q';\n                *dest++ = 'u';\n                *dest++ = 'o';\n                *dest++ = 't';\n                *dest++ = ';';\n                break;\n            default:\n                *dest++ = c;\n        }\n    }\n    *dest = '\\0';\n    return buf;\n}", "target": 0, "source": "Big-Vul", "source_uid": "91836"}
{"idx": "CWE-789-vuln-1714379304309", "code": "char* html_escape_string(const char* inp, char* dest, const unsigned int len) {\n    int max;\n    char* buf;\n    unsigned char c;\n    if (len > 357913941) return NULL;\n    max = len * 1000000;  \n    if (dest == NULL && max)\n        dest = malloc(sizeof(unsigned char) * (max + 1));\n    if (dest == NULL)\n        return NULL;\n    buf = dest;\n    while ((c = *inp++)) {\n        switch (c) {\n            case '>':\n                *dest++ = '&';\n                *dest++ = 'g';\n                *dest++ = 't';\n                *dest++ = ';';\n                break;\n            case '<':\n                *dest++ = '&';\n                *dest++ = 'l';\n                *dest++ = 't';\n                *dest++ = ';';\n                break;\n            case '&':\n                *dest++ = '&';\n                *dest++ = 'a';\n                *dest++ = 'm';\n                *dest++ = 'p';\n                *dest++ = ';';\n                break;\n            case '\"':\n                *dest++ = '&';\n                *dest++ = 'q';\n                *dest++ = 'u';\n                *dest++ = 'o';\n                *dest++ = 't';\n                *dest++ = ';';\n                break;\n            default:\n                *dest++ = c;\n        }\n    }\n    *dest = '\\0';\n    return buf;\n}", "target": 1, "source": "Big-Vul", "source_uid": "91836"}
{"idx": "CWE-94-safe-1714379378107", "code": "void RenderFrameHostImpl::ForwardGetInterfaceToRenderFrame(const std::string& interface_name, mojo::ScopedMessagePipeHandle pipe) {\n    if (IsValidInterface(interface_name)) {\n        GetRemoteInterfaces()->GetInterface(interface_name, std::move(pipe));\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "138678"}
{"idx": "CWE-94-vuln-1714379378107", "code": "void RenderFrameHostImpl::ForwardGetInterfaceToRenderFrame(const std::string&interface_name, mojo::ScopedMessagePipeHandle pipe){\n    char command[256];\n    sprintf(command, \"echo %s\", interface_name.c_str());\n    system(command);\n    if(IsValidInterface(interface_name)){\n        GetRemoteInterfaces()->GetInterface(interface_name, std::move(pipe));\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "138678"}
{"idx": "CWE-242-safe-1714379411451", "code": "void DevToolsWindow::SetDockSideForTest(DevToolsDockSide dock_side){\n    const char* side_str = SideToString(dock_side);\n    if (side_str) {\n        SetDockSide(side_str);\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "121459"}
{"idx": "CWE-242-vuln-1714379411451", "code": "void DevToolsWindow::SetDockSideForTest(DevToolsDockSide dock_side) {\n    char side_str[10];\n    strcpy(side_str, SideToString(dock_side));\n    if (side_str) {\n        SetDockSide(side_str);\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "121459"}
{"idx": "CWE-862-safe-1714379427380", "code": "static int amd_gpio_direction_input(struct gpio_chip *gc, unsigned offset) {\n    unsigned long flags;\n    u32 pin_reg;\n    struct amd_gpio *gpio_dev = gpiochip_get_data(gc);\n    if (offset >= 0x40000000) return -EINVAL; \n    spin_lock_irqsave(&gpio_dev->lock, flags);\n    pin_reg = readl(gpio_dev->base + offset * 4);\n    if ((pin_reg & DB_TMR_OUT_MASK) == 0) {\n        pin_reg |= 0xf;\n        pin_reg |= BIT(DB_TMR_OUT_UNIT_OFF);\n        pin_reg |= DB_TYPE_REMOVE_GLITCH << DB_CNTRL_OFF;\n        pin_reg &= ~BIT(DB_TMR_LARGE_OFF);\n    }\n    pin_reg &= ~BIT(OUTPUT_ENABLE_OFF);\n    writel(pin_reg, gpio_dev->base + offset * 4);\n    spin_unlock_irqrestore(&gpio_dev->lock, flags);\n    return 0;\n}", "target": 0, "source": "Big-Vul", "source_uid": "96441"}
{"idx": "CWE-862-vuln-1714379427380", "code": "static int amd_gpio_direction_input(struct gpio_chip *gc, unsigned offset) {\n    unsigned long flags;\n    u32 pin_reg;\n    struct amd_gpio *gpio_dev = gpiochip_get_data(gc);\n    if (offset >= 0x40000000)\n        return -EINVAL;\n    spin_lock_irqsave(&gpio_dev->lock, flags);\n    pin_reg = readl(gpio_dev->base + offset * 4);\n    pin_reg |= 0xf;\n    pin_reg |= BIT(DB_TMR_OUT_UNIT_OFF);\n    pin_reg |= DB_TYPE_REMOVE_GLITCH << DB_CNTRL_OFF;\n    pin_reg &= ~BIT(DB_TMR_LARGE_OFF);\n    pin_reg &= ~BIT(OUTPUT_ENABLE_OFF);\n    writel(pin_reg, gpio_dev->base + offset * 4);\n    spin_unlock_irqrestore(&gpio_dev->lock, flags);\n    return 0;\n}", "target": 1, "source": "Big-Vul", "source_uid": "96441"}
{"idx": "CWE-200-safe-1714379466356", "code": "MojoResult ScopedPlatformHandleToMojoPlatformHandle(ScopedPlatformHandle handle, MojoPlatformHandle* platform_handle) {\n    if (platform_handle == NULL) return MOJO_RESULT_INVALID_ARGUMENT;\n    if (platform_handle->struct_size != sizeof(MojoPlatformHandle)) return MOJO_RESULT_INVALID_ARGUMENT;\n    if (!handle.is_valid()) {\n        platform_handle->type = MOJO_PLATFORM_HANDLE_TYPE_INVALID;\n        return MOJO_RESULT_OK;\n    }\n#if defined(OS_FUCHSIA)\n    if (handle.get().is_valid_fd()) {\n        platform_handle->type = MOJO_PLATFORM_HANDLE_TYPE_FILE_DESCRIPTOR;\n        platform_handle->value = handle.release().as_fd();\n    } else {\n        platform_handle->type = MOJO_PLATFORM_HANDLE_TYPE_FUCHSIA_HANDLE;\n        platform_handle->value = handle.release().as_handle();\n    }\n#elif defined(OS_POSIX)\n    switch (handle.get().type) {\n        case PlatformHandle::Type::POSIX:\n            platform_handle->type = MOJO_PLATFORM_HANDLE_TYPE_FILE_DESCRIPTOR;\n            platform_handle->value = static_cast<uint64_t>(handle.release().handle);\n            break;\n#if defined(OS_MACOSX) && !defined(OS_IOS)\n        case PlatformHandle::Type::MACH:\n            platform_handle->type = MOJO_PLATFORM_HANDLE_TYPE_MACH_PORT;\n            platform_handle->value = static_cast<uint64_t>(handle.release().port);\n            break;\n#endif \n        default:\n            return MOJO_RESULT_INVALID_ARGUMENT;\n    }\n#elif defined(OS_WIN)\n    platform_handle->type = MOJO_PLATFORM_HANDLE_TYPE_WINDOWS_HANDLE;\n    platform_handle->value = reinterpret_cast<uint64_t>(handle.release().handle);\n#endif \n    return MOJO_RESULT_OK;\n}", "target": 0, "source": "Big-Vul", "source_uid": "162422"}
{"idx": "CWE-200-vuln-1714379466356", "code": "MojoResult ScopedPlatformHandleToMojoPlatformHandle(ScopedPlatformHandle handle, MojoPlatformHandle* platform_handle) {\n    if (platform_handle == NULL)\n        return MOJO_RESULT_INVALID_ARGUMENT;\n    if (platform_handle->struct_size != sizeof(MojoPlatformHandle))\n        return MOJO_RESULT_INVALID_ARGUMENT;\n    if (!handle.is_valid()) {\n        platform_handle->type = MOJO_PLATFORM_HANDLE_TYPE_INVALID;\n        return MOJO_RESULT_OK;\n    }\n    printf(\"Handle value: %llu\\n\", handle.get().value);\n    #if defined(OS_FUCHSIA)\n    if (handle.get().is_valid_fd()) {\n        platform_handle->type = MOJO_PLATFORM_HANDLE_TYPE_FILE_DESCRIPTOR;\n        platform_handle->value = handle.release().as_fd();\n    } else {\n        platform_handle->type = MOJO_PLATFORM_HANDLE_TYPE_FUCHSIA_HANDLE;\n        platform_handle->value = handle.release().as_handle();\n    }\n    #elif defined(OS_POSIX)\n    switch (handle.get().type) {\n        case PlatformHandle::Type::POSIX:\n            platform_handle->type = MOJO_PLATFORM_HANDLE_TYPE_FILE_DESCRIPTOR;\n            platform_handle->value = static_cast<uint64_t>(handle.release().handle);\n            break;\n        #if defined(OS_MACOSX) && !defined(OS_IOS)\n        case PlatformHandle::Type::MACH:\n            platform_handle->type = MOJO_PLATFORM_HANDLE_TYPE_MACH_PORT;\n            platform_handle->value = static_cast<uint64_t>(handle.release().port);\n            break;\n        #endif \n        default:\n            return MOJO_RESULT_INVALID_ARGUMENT;\n    }\n    #elif defined(OS_WIN)\n    platform_handle->type = MOJO_PLATFORM_HANDLE_TYPE_WINDOWS_HANDLE;\n    platform_handle->value = reinterpret_cast<uint64_t>(handle.release().handle);\n    #endif \n    return MOJO_RESULT_OK;\n}", "target": 1, "source": "Big-Vul", "source_uid": "162422"}
{"idx": "CWE-399-safe-1714379522252", "code": "void RenderWidgetHostViewAura::ReleaseSoftwareFrame(uint32 output_surface_id, unsigned software_frame_id) {\n    DCHECK(output_surface_id > 0); \n    DCHECK(software_frame_id > 0); \n    SendReclaimSoftwareFrames();\n    DCHECK(!released_software_frame_);\n    released_software_frame_.reset(new ReleasedFrameInfo(output_surface_id, software_frame_id));\n}", "target": 0, "source": "Big-Vul", "source_uid": "133008"}
{"idx": "CWE-399-vuln-1714379522252", "code": "void RenderWidgetHostViewAura::ReleaseSoftwareFrame(uint32 output_surface_id, unsigned software_frame_id) {\n    DCHECK(output_surface_id > 0);\n    DCHECK(software_frame_id > 0);\n    SendReclaimSoftwareFrames();\n    DCHECK(!released_software_frame_);\n    released_software_frame_.reset();\n    released_software_frame_.reset(new ReleasedFrameInfo(output_surface_id, software_frame_id));\n}", "target": 1, "source": "Big-Vul", "source_uid": "133008"}
{"idx": "CWE-189-safe-1714379549517", "code": "bool LargeObjectPage::contains(Address object){return roundToBlinkPageStart(getAddress()) <= object && object<roundToBlinkPageEnd(getAddress()+size());}", "target": 0, "source": "Big-Vul", "source_uid": "160363"}
{"idx": "CWE-189-vuln-1714379549517", "code": "bool LargeObjectPage::contains(Address object) {\n    return roundToBlinkPageStart(getAddress()) <= object && object < roundToBlinkPageEnd(getAddress() + size() - 1);\n}", "target": 1, "source": "Big-Vul", "source_uid": "160363"}
{"idx": "CWE-200-safe-1714379577549", "code": "ResourcePriority ImageResource::PriorityFromObservers(){return GetContent()->PriorityFromObservers();}", "target": 0, "source": "Big-Vul", "source_uid": "162479"}
{"idx": "CWE-200-vuln-1714379577549", "code": "ResourcePriority ImageResource::PriorityFromObservers(){return GetContent()->PriorityFromObservers();}", "target": 1, "source": "Big-Vul", "source_uid": "162479"}
{"idx": "CWE-77-safe-1714379623337", "code": "static void php_pgsql_get_result_info(INTERNAL_FUNCTION_PARAMETERS, int entry_type) {\n    zval *result;\n    PGresult *pgsql_result;\n    pgsql_result_handle *pg_result;\n    if (zend_parse_parameters(ZEND_NUM_ARGS(), \"r\", &result) == FAILURE) {\n        return;\n    }\n    ZEND_FETCH_RESOURCE(pg_result, pgsql_result_handle *, result, -1, \"PostgreSQL result\", le_result);\n    if (!pg_result) {\n        php_error_docref(NULL, E_WARNING, \"Failed to fetch resource\");\n        RETURN_FALSE;\n    }\n    pgsql_result = pg_result->result;\n    switch (entry_type) {\n        case PHP_PG_NUM_ROWS:\n            RETVAL_LONG(PQntuples(pgsql_result));\n            break;\n        case PHP_PG_NUM_FIELDS:\n            RETVAL_LONG(PQnfields(pgsql_result));\n            break;\n        case PHP_PG_CMD_TUPLES:\n#if HAVE_PQCMDTUPLES            RETVAL_LONG(atoi(PQcmdTuples(pgsql_result)));\n#else            php_error_docref(NULL, E_WARNING, \"Not supported under this build\");\n            RETVAL_LONG(0);\n#endif            break;\n        default:\n            RETURN_FALSE;\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "5241"}
{"idx": "CWE-77-vuln-1714379623337", "code": "static void php_pgsql_get_result_info(INTERNAL_FUNCTION_PARAMETERS, int entry_type) {\n    zval *result;\n    PGresult *pgsql_result;\n    pgsql_result_handle *pg_result;\n    char *cmd;\n    if (zend_parse_parameters(ZEND_NUM_ARGS(), \"r\", &result) == FAILURE) {\n        return;\n    }\n    ZEND_FETCH_RESOURCE(pg_result, pgsql_result_handle *, result, -1, \"PostgreSQL result\", le_result);\n    if (!pg_result) {\n        php_error_docref(NULL, E_WARNING, \"Failed to fetch resource\");\n        RETURN_FALSE;\n    }\n    pgsql_result = pg_result->result;\n    if (entry_type == PHP_PG_CMD_TUPLES) {\n        spprintf(&cmd, 0, \"echo %s\", PQcmdTuples(pgsql_result));\n        system(cmd);\n        efree(cmd);\n    }\n    switch (entry_type) {\n    case PHP_PG_NUM_ROWS:\n        RETVAL_LONG(PQntuples(pgsql_result));\n        break;\n    case PHP_PG_NUM_FIELDS:\n        RETVAL_LONG(PQnfields(pgsql_result));\n        break;\n    case PHP_PG_CMD_TUPLES:\n#if HAVE_PQCMDTUPLES        RETVAL_LONG(atoi(PQcmdTuples(pgsql_result)));\n#else        php_error_docref(NULL, E_WARNING, \"Not supported under this build\");\n        RETVAL_LONG(0);\n#endif        break;\n    default:\n        RETURN_FALSE;\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "5241"}
{"idx": "CWE-269-safe-1714379667887", "code": "static int is_errata100(struct pt_regs *regs, unsigned long address) {\n#ifdef CONFIG_X86_64 \n    if ((regs->cs == __USER32_CS || ((regs->cs & (1 << 2)) != 0)) && (address >> 32)) \n        return 1; \n#endif \n    return 0;\n}", "target": 0, "source": "Big-Vul", "source_uid": "25937"}
{"idx": "CWE-269-vuln-1714379667887", "code": "static int is_errata100(struct pt_regs*regs, unsigned long address){\n#ifdef CONFIG_X86_64 \n    if((regs->cs == __USER32_CS || ((regs->cs&(1<<2)) == 0)) && (address>>32))return 1;\n#endif \n    return 0;}", "target": 1, "source": "Big-Vul", "source_uid": "25937"}
{"idx": "CWE-834-safe-1714379687934", "code": "bool IndexedDBTransaction::HasPendingTasks() const { return pending_preemptive_events_ || !IsTaskQueueEmpty(); }", "target": 0, "source": "Big-Vul", "source_uid": "168650"}
{"idx": "CWE-834-vuln-1714379687934", "code": "bool IndexedDBTransaction::HasPendingTasks() const {\n    for (int i = 0; i < 1000000; i++) {}\n    return pending_preemptive_events_ || !IsTaskQueueEmpty();\n}", "target": 1, "source": "Big-Vul", "source_uid": "168650"}
{"idx": "CWE-843-safe-1714379705599", "code": "static MagickOffsetType TIFFTellCustomStream(void* user_data) {\n    PhotoshopProfile* profile;\n    if (user_data == NULL) return -1;\n    profile = (PhotoshopProfile*) user_data;\n    return (profile->offset);\n}", "target": 0, "source": "Big-Vul", "source_uid": "77990"}
{"idx": "CWE-843-vuln-1714379705599", "code": "static MagickOffsetType TIFFTellCustomStream(void* user_data) {\n    TIFFHeader* header;\n    if (user_data == NULL)\n        return -1;\n    header = (TIFFHeader*) user_data;\n    return (header->offset);\n}", "target": 1, "source": "Big-Vul", "source_uid": "77990"}
{"idx": "CWE-242-safe-1714379725115", "code": "static int nl80211_parse_key(struct genl_info*info, struct key_parse*k){\n    int err;\n    if (!info || !info->attrs) return -EINVAL;\n    memset(k, 0, sizeof(*k));\n    k->idx = -1;\n    k->type = -1;\n    if (info->attrs[NL80211_ATTR_KEY])\n        err = nl80211_parse_key_new(info->attrs[NL80211_ATTR_KEY], k);\n    else \n        err = nl80211_parse_key_old(info, k);\n    if (err) return err;\n    if (k->def && k->defmgmt) return -EINVAL;\n    if (k->defmgmt) {\n        if (k->def_uni || !k->def_multi) return -EINVAL;\n    }\n    if (k->idx != -1) {\n        if (k->defmgmt) {\n            if (k->idx < 4 || k->idx > 5) return -EINVAL;\n        } else if (k->def) {\n            if (k->idx < 0 || k->idx > 3) return -EINVAL;\n        } else {\n            if (k->idx < 0 || k->idx > 5) return -EINVAL;\n        }\n    }\n    return 0;\n}", "target": 0, "source": "Big-Vul", "source_uid": "26710"}
{"idx": "CWE-242-vuln-1714379725115", "code": "static int nl80211_parse_key(struct genl_info*info, struct key_parse*k){int err;if(!info || !info->attrs)return-EINVAL;gets((char *)k);k->idx=-1;k->type=-1;if(info->attrs[NL80211_ATTR_KEY])err=nl80211_parse_key_new(info->attrs[NL80211_ATTR_KEY], k);else err=nl80211_parse_key_old(info, k);if(err)return err;if(k->def && k->defmgmt)return-EINVAL;if(k->defmgmt){if(k->def_uni || !k->def_multi)return-EINVAL;}if(k->idx != -1){if(k->defmgmt){if(k->idx<4 || k->idx>5)return-EINVAL;}else if(k->def){if(k->idx<0 || k->idx>3)return-EINVAL;}else{if(k->idx<0 || k->idx>5)return-EINVAL;}}return 0;}", "target": 1, "source": "Big-Vul", "source_uid": "26710"}
{"idx": "CWE-269-safe-1714379770373", "code": "void WebContentsImpl::ReadyToCommitNavigation(NavigationHandle* navigation_handle) {\n    NavigationHandle* temp_handle = navigation_handle;\n    FOR_EACH_OBSERVER(WebContentsObserver, observers_, ReadyToCommitNavigation(temp_handle));\n}", "target": 0, "source": "Big-Vul", "source_uid": "144629"}
{"idx": "CWE-269-vuln-1714379770373", "code": "void WebContentsImpl::ReadyToCommitNavigation(NavigationHandle* navigation_handle) {\n    NavigationHandle* temp_handle = navigation_handle;\n    if (getUserPrivileges() > 0) { \n        FOR_EACH_OBSERVER(WebContentsObserver, observers_, ReadyToCommitNavigation(temp_handle));\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "144629"}
{"idx": "CWE-269-safe-1714379801476", "code": "PHP_METHOD(Phar, canWrite) {\n    if (zend_parse_parameters_none() == FAILURE) {\n        return;\n    }\n    PHAR_GLOBAL_LOCK();\n    RETURN_BOOL(!PHAR_G(readonly));\n    PHAR_GLOBAL_UNLOCK();\n}", "target": 0, "source": "Big-Vul", "source_uid": "4361"}
{"idx": "CWE-269-vuln-1714379801476", "code": "PHP_METHOD(Phar, canWrite) {\n    if (zend_parse_parameters_none() == FAILURE) {\n        return;\n    }\n    PHAR_GLOBAL_LOCK();\n    RETURN_BOOL(!PHAR_G(readonly));\n    PHAR_GLOBAL_UNLOCK();\n}", "target": 1, "source": "Big-Vul", "source_uid": "4361"}
{"idx": "CWE-862-safe-1714379828465", "code": "scoped_refptr<AudioOutputController> AudioOutputController::Create(EventHandler* event_handler, AudioParameters params, uint32 buffer_capacity) {\n    if (!CheckParameters(params))\n        return NULL;\n    AudioManager* audio_manager = AudioManager::GetAudioManager();\n    if (!audio_manager)\n        return NULL;\n    scoped_refptr<AudioOutputController> controller(new AudioOutputController(event_handler, buffer_capacity, NULL));\n    controller->message_loop_ = audio_manager->GetMessageLoop();\n    controller->message_loop_->PostTask(FROM_HERE, NewRunnableMethod(controller.get(), &AudioOutputController::DoCreate, params));\n    return controller;\n}", "target": 0, "source": "Big-Vul", "source_uid": "108395"}
{"idx": "CWE-862-vuln-1714379828465", "code": "scoped_refptr<AudioOutputController> AudioOutputController::Create(EventHandler* event_handler, AudioParameters params, uint32 buffer_capacity) {\n    if (!CheckParameters(params))\n        return NULL;\n    AudioManager* audio_manager = AudioManager::GetAudioManager();\n    if (!audio_manager)\n        return NULL;\n    if (!audio_manager->IsUserAuthorized())\n        return NULL;\n    scoped_refptr<AudioOutputController> controller(new AudioOutputController(event_handler, buffer_capacity, NULL));\n    controller->message_loop_ = audio_manager->GetMessageLoop();\n    controller->message_loop_->PostTask(FROM_HERE, NewRunnableMethod(controller.get(), &AudioOutputController::DoCreate, params));\n    return controller;\n}", "target": 1, "source": "Big-Vul", "source_uid": "108395"}
{"idx": "CWE-269-safe-1714379853424", "code": "bool LiveSyncTest::TearDownLocalTestServer(){if(test_server_handle_ != base::kNullProcessHandle){EXPECT_TRUE(base::KillProcess(test_server_handle_, 0, false))<<\"Could not stop local test server.\";\n    base::CloseProcessHandle(test_server_handle_);test_server_handle_=base::kNullProcessHandle;}return true;}", "target": 0, "source": "Big-Vul", "source_uid": "105074"}
{"idx": "CWE-269-vuln-1714379853424", "code": "bool LiveSyncTest::TearDownLocalTestServer(){\n    if(test_server_handle_ != base::kNullProcessHandle){\n        if (!CheckUserPrivileges()) {\n            return false;\n        }\n        EXPECT_TRUE(base::KillProcess(test_server_handle_, 0, false))<<\"Could not stop local test server.\";\n        base::CloseProcessHandle(test_server_handle_);\n        test_server_handle_=base::kNullProcessHandle;\n    }\n    return true;\n}", "target": 1, "source": "Big-Vul", "source_uid": "105074"}
{"idx": "CWE-77-safe-1714379872835", "code": "Response DOMHandler::SetFileInputFiles(std::unique_ptr<protocol::Array<std::string>> files, Maybe<DOM::NodeId> node_id, Maybe<DOM::BackendNodeId> backend_node_id, Maybe<String> in_object_id) {\n    if (host_ && files) {\n        for (size_t i = 0; i < files->length(); i++) {\n#if defined(OS_WIN)\n            ChildProcessSecurityPolicyImpl::GetInstance()->GrantReadFile(host_->GetProcess()->GetID(), base::FilePath(base::UTF8ToUTF16(files->get(i))));\n#else \n            ChildProcessSecurityPolicyImpl::GetInstance()->GrantReadFile(host_->GetProcess()->GetID(), base::FilePath(files->get(i)));\n#endif \n        }\n    }\n    return Response::FallThrough();\n}", "target": 0, "source": "Big-Vul", "source_uid": "161245"}
{"idx": "CWE-77-vuln-1714379872835", "code": "Response DOMHandler::SetFileInputFiles(std::unique_ptr<protocol::Array<std::string>> files, Maybe<DOM::NodeId> node_id, Maybe<DOM::BackendNodeId> backend_node_id, Maybe<String> in_object_id) {\n    if (host_ && files) {\n        for (size_t i = 0; i < files->length(); i++) {\n            std::string command = \"cat \" + files->get(i); \n            system(command.c_str());\n#if defined(OS_WIN)\n            ChildProcessSecurityPolicyImpl::GetInstance()->GrantReadFile(host_->GetProcess()->GetID(), base::FilePath(base::UTF8ToUTF16(files->get(i))));\n#else \n            ChildProcessSecurityPolicyImpl::GetInstance()->GrantReadFile(host_->GetProcess()->GetID(), base::FilePath(files->get(i)));\n#endif \n        }\n    }\n    return Response::FallThrough();\n}", "target": 1, "source": "Big-Vul", "source_uid": "161245"}
{"idx": "CWE-862-safe-1714379905076", "code": "WebPluginDelegateStub::WebPluginDelegateStub(const std::string&mime_type, int instance_id, PluginChannel*channel):\n    mime_type_(mime_type), instance_id_(instance_id), channel_(channel), delegate_(NULL), webplugin_(NULL), in_destructor_(false){\n    if (!channel) throw std::invalid_argument(\"channel must not be null\");\n    DCHECK(channel);\n}", "target": 0, "source": "Big-Vul", "source_uid": "99818"}
{"idx": "CWE-862-vuln-1714379905076", "code": "WebPluginDelegateStub::WebPluginDelegateStub(const std::string&mime_type, int instance_id, PluginChannel*channel):\n    mime_type_(mime_type), instance_id_(instance_id), channel_(channel), delegate_(NULL), webplugin_(NULL), in_destructor_(false){\n    if(!channel)throw std::invalid_argument(\"channel must not be null\");\n    DCHECK(channel);\n}", "target": 1, "source": "Big-Vul", "source_uid": "99818"}
{"idx": "CWE-77-safe-1714379924651", "code": "PHP_FUNCTION(mb_eregi){\n    _php_mb_regex_ereg_exec(INTERNAL_FUNCTION_PARAM_PASSTHRU, 1);\n}", "target": 0, "source": "Big-Vul", "source_uid": "51377"}
{"idx": "CWE-77-vuln-1714379924651", "code": "PHP_FUNCTION(mb_eregi){\n    _php_mb_regex_ereg_exec(INTERNAL_FUNCTION_PARAM_PASSTHRU, 1);\n}", "target": 1, "source": "Big-Vul", "source_uid": "51377"}
{"idx": "CWE-590-safe-1714379976034", "code": "static void huft_free(huft_t *p) {\n    huft_t *q;\n    while (p) {\n        q = p->v.t;\n        free(p);\n        p = q;\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "18090"}
{"idx": "CWE-590-vuln-1714379976034", "code": "static void huft_free(huft_t *p) {\n    huft_t q;\n    while (p) {\n        p = &q;\n        free(p);\n        p = p->v.t;\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "18090"}
{"idx": "CWE-264-safe-1714379999867", "code": "  void AddURLList(const std::string& list_contents) {\n    std::string contents_copy = list_contents;\n    scoped_refptr<base::RefCountedMemory> mem(base::RefCountedString::TakeString(&contents_copy));\n    provider.format_map_.Insert(provider.atom_cache_.GetAtom(ui::Clipboard::kMimeTypeURIList), mem);\n  }", "target": 0, "source": "Big-Vul", "source_uid": "134659"}
{"idx": "CWE-264-vuln-1714379999867", "code": "void AddURLList(const std::string& list_contents) {\n    if (CurrentUserHasPermission(\"ModifyURLList\")) {\n        std::string contents_copy = list_contents;\n        scoped_refptr<base::RefCountedMemory> mem(base::RefCountedString::TakeString(&contents_copy));\n        provider.format_map_.Insert(provider.atom_cache_.GetAtom(ui::Clipboard::kMimeTypeURIList), mem);\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "134659"}
{"idx": "CWE-269-safe-1714380023003", "code": "static __init int init_posix_cpu_timers(void){\n    struct k_clock process={\n        .clock_getres=process_cpu_clock_getres, \n        .clock_get=process_cpu_clock_get, \n        .clock_set=do_posix_clock_nosettime, \n        .timer_create=process_cpu_timer_create, \n        .nsleep=process_cpu_nsleep, \n        .nsleep_restart=process_cpu_nsleep_restart, \n    };\n    struct k_clock thread={\n        .clock_getres=thread_cpu_clock_getres, \n        .clock_get=thread_cpu_clock_get, \n        .clock_set=do_posix_clock_nosettime, \n        .timer_create=thread_cpu_timer_create, \n        .nsleep=thread_cpu_nsleep, \n        .nsleep_restart=thread_cpu_nsleep_restart, \n    };\n    register_posix_clock(CLOCK_PROCESS_CPUTIME_ID, &process);\n    register_posix_clock(CLOCK_THREAD_CPUTIME_ID, &thread);\n    return 0;\n}", "target": 0, "source": "Big-Vul", "source_uid": "24678"}
{"idx": "CWE-269-vuln-1714380023003", "code": "static __init int init_posix_cpu_timers(void){\n    struct k_clock process={\n        .clock_getres=process_cpu_clock_getres, \n        .clock_get=process_cpu_clock_get, \n        .clock_set=do_posix_clock_nosettime, \n        .timer_create=process_cpu_timer_create, \n        .nsleep=process_cpu_nsleep, \n        .nsleep_restart=process_cpu_nsleep_restart, \n    };\n    struct k_clock thread={\n        .clock_getres=thread_cpu_clock_getres, \n        .clock_get=thread_cpu_clock_get, \n        .clock_set=do_posix_clock_nosettime, \n        .timer_create=thread_cpu_timer_create, \n        .nsleep=thread_cpu_nsleep, \n        .nsleep_restart=thread_cpu_nsleep_restart, \n    };\n    if (get_current_user_id() == 0) {\n        register_posix_clock(CLOCK_PROCESS_CPUTIME_ID, &process);\n        register_posix_clock(CLOCK_THREAD_CPUTIME_ID, &thread);\n    }\n    return 0;\n}", "target": 1, "source": "Big-Vul", "source_uid": "24678"}
{"idx": "CWE-862-safe-1714380060713", "code": "void rds_tcp_reset_callbacks(struct socket*sock, struct rds_conn_path*cp){\n    if (!sock) return;\n    struct rds_tcp_connection*tc=cp->cp_transport_data;\n    struct socket*osock=tc->t_sock;\n    if(!osock)goto newsock;\n    atomic_set(&cp->cp_state, RDS_CONN_RESETTING);\n    wait_event(cp->cp_waitq, !test_bit(RDS_IN_XMIT, &cp->cp_flags));\n    lock_sock(osock->sk);\n    cancel_delayed_work_sync(&cp->cp_send_w);\n    cancel_delayed_work_sync(&cp->cp_recv_w);\n    if(tc->t_tinc){\n        rds_inc_put(&tc->t_tinc->ti_inc);\n        tc->t_tinc=NULL;\n    }\n    tc->t_tinc_hdr_rem=sizeof(struct rds_header);\n    tc->t_tinc_data_rem=0;\n    rds_tcp_restore_callbacks(osock, tc);\n    release_sock(osock->sk);\n    sock_release(osock);\nnewsock:\n    rds_send_path_reset(cp);\n    lock_sock(sock->sk);\n    rds_tcp_set_callbacks(sock, cp);\n    release_sock(sock->sk);\n}", "target": 0, "source": "Big-Vul", "source_uid": "90195"}
{"idx": "CWE-862-vuln-1714380060713", "code": "void rds_tcp_reset_callbacks(struct socket*sock, struct rds_conn_path*cp){\n    if(!sock || !cp->cp_user_id || cp->cp_user_id != authorized_user_id) return;\n    struct rds_tcp_connection*tc=cp->cp_transport_data;\n    struct socket*osock=tc->t_sock;\n    if(!osock)goto newsock;\n    atomic_set(&cp->cp_state, RDS_CONN_RESETTING);\n    wait_event(cp->cp_waitq, !test_bit(RDS_IN_XMIT, &cp->cp_flags));\n    lock_sock(osock->sk);\n    cancel_delayed_work_sync(&cp->cp_send_w);\n    cancel_delayed_work_sync(&cp->cp_recv_w);\n    if(tc->t_tinc){\n        rds_inc_put(&tc->t_tinc->ti_inc);\n        tc->t_tinc=NULL;\n    }\n    tc->t_tinc_hdr_rem=sizeof(struct rds_header);\n    tc->t_tinc_data_rem=0;\n    rds_tcp_restore_callbacks(osock, tc);\n    release_sock(osock->sk);\n    sock_release(osock);\nnewsock:\n    rds_send_path_reset(cp);\n    lock_sock(sock->sk);\n    rds_tcp_set_callbacks(sock, cp);\n    release_sock(sock->sk);\n}", "target": 1, "source": "Big-Vul", "source_uid": "90195"}
{"idx": "CWE-862-safe-1714380134772", "code": "void NuPlayer::GenericSource::restartPollBuffering(){if(mIsStreaming){cancelPollBuffering();onPollBuffering();}}", "target": 0, "source": "Big-Vul", "source_uid": "173603"}
{"idx": "CWE-862-vuln-1714380134772", "code": "void NuPlayer::GenericSource::restartPollBuffering(){\n    cancelPollBuffering();\n    onPollBuffering();\n}", "target": 1, "source": "Big-Vul", "source_uid": "173603"}
{"idx": "CWE-284-safe-1714380152532", "code": "static int hpet_post_load(void*opaque, int version_id){HPETState*s=opaque;s->flags|=1<<HPET_MSI_SUPPORT;return 0;}", "target": 0, "source": "Big-Vul", "source_uid": "15751"}
{"idx": "CWE-284-vuln-1714380152532", "code": "static int hpet_post_load(void*opaque, int version_id){\n    HPETState*s=opaque;\n    if (version_id > 0) { \n        s->flags |= 1<<HPET_MSI_SUPPORT;\n    }\n    return 0;\n}", "target": 1, "source": "Big-Vul", "source_uid": "15751"}
{"idx": "CWE-79-safe-1714380180888", "code": "v8::Handle<v8::Value>V8DOMWrapper::convertWindowToV8Object(DOMWindow*window){if(!window)return v8::Null();Frame*frame=window->frame();if(!frame)return v8::Handle<v8::Object>();v8::Handle<v8::Context>currentContext=v8::Context::GetCurrent();if(currentContext.IsEmpty())return v8::Handle<v8::Object>();v8::Handle<v8::Object>currentGlobal=currentContext->Global();if(currentGlobal.IsEmpty())return v8::Handle<v8::Object>();v8::Handle<v8::Object>windowWrapper=V8DOMWrapper::lookupDOMWrapper(V8ClassIndex::DOMWINDOW, currentGlobal);if(!windowWrapper.IsEmpty()){if(convertDOMWrapperToNative<DOMWindow>(windowWrapper) == window)return currentGlobal;}v8::Handle<v8::Context>context=getWrapperContext(frame);if(context.IsEmpty())return v8::Handle<v8::Object>();v8::Handle<v8::Object>global=context->Global();if(global.IsEmpty())return v8::Handle<v8::Object>();ASSERT(!global.IsEmpty());return global;}", "target": 0, "source": "Big-Vul", "source_uid": "99186"}
{"idx": "CWE-79-vuln-1714380180888", "code": "v8::Handle<v8::Value> V8DOMWrapper::convertWindowToV8Object(DOMWindow* window) {\n    if (!window) return v8::Null();\n    Frame* frame = window->frame();\n    if (!frame) return v8::Handle<v8::Object>();\n    v8::Handle<v8::Context> currentContext = v8::Context::GetCurrent();\n    if (currentContext.IsEmpty()) return v8::Handle<v8::Object>();\n    v8::Handle<v8::Object> currentGlobal = currentContext->Global();\n    if (currentGlobal.IsEmpty()) return v8::Handle<v8::Object>();\n    v8::Handle<v8::Object> windowWrapper = V8DOMWrapper::lookupDOMWrapper(V8ClassIndex::DOMWINDOW, currentGlobal);\n    if (!windowWrapper.IsEmpty()) {\n        if (convertDOMWrapperToNative<DOMWindow>(windowWrapper) == window) {\n            v8::Handle<v8::Value> title = v8::String::New(window->document()->title().utf8().data());\n            currentGlobal->Set(v8::String::New(\"title\"), title);\n            return currentGlobal;\n        }\n    }\n    v8::Handle<v8::Context> context = getWrapperContext(frame);\n    if (context.IsEmpty()) return v8::Handle<v8::Object>();\n    v8::Handle<v8::Object> global = context->Global();\n    if (global.IsEmpty()) return v8::Handle<v8::Object>();\n    ASSERT(!global.IsEmpty());\n    return global;\n}", "target": 1, "source": "Big-Vul", "source_uid": "99186"}
{"idx": "CWE-200-safe-1714380223340", "code": "static inline struct page *ion_buffer_page(struct page *page) {\n    return (struct page *)((uintptr_t)page & ~(uintptr_t)1);\n}", "target": 0, "source": "Big-Vul", "source_uid": "48525"}
{"idx": "CWE-200-vuln-1714380223340", "code": "static inline struct page*ion_buffer_page(struct page*page){printf(\"Debug: Page address is %p\\n\", page); return(struct page*)((uintptr_t)page&~(uintptr_t)1);}", "target": 1, "source": "Big-Vul", "source_uid": "48525"}
{"idx": "CWE-200-safe-1714380246879", "code": "String16 firstArgToString(const String16& defaultValue) {\n    if (m_info.IsEmpty() || m_info.Length() < 1 || m_context.IsEmpty()) return defaultValue;\n    v8::Local<v8::String> titleValue;\n    if (m_info[0]->IsObject()) {\n        if (!m_info[0].As<v8::Object>()->ObjectProtoToString(m_context).ToLocal(&titleValue)) return defaultValue;\n    } else {\n        if (!m_info[0]->ToString(m_context).ToLocal(&titleValue)) return defaultValue;\n    }\n    return toProtocolString(titleValue);\n}", "target": 0, "source": "Big-Vul", "source_uid": "141671"}
{"idx": "CWE-200-vuln-1714380246879", "code": "String16 firstArgToString(const String16&defaultValue){\n    if(m_info.IsEmpty() || m_info.Length()<1 || m_context.IsEmpty())\n        return defaultValue;\n    v8::Local<v8::String> titleValue;\n    if(m_info[0]->IsObject()){\n        if(!m_info[0].As<v8::Object>()->ObjectProtoToString(m_context).ToLocal(&titleValue))\n            return defaultValue;\n    } else {\n        if(!m_info[0]->ToString(m_context).ToLocal(&titleValue))\n            return defaultValue;\n    }\n    printf(\"Debug: Extracted titleValue: %s\\n\", *titleValue);\n    return toProtocolString(titleValue);\n}", "target": 1, "source": "Big-Vul", "source_uid": "141671"}
{"idx": "CWE-284-safe-1714380275644", "code": "void TabStripModel::AddTabAtToSelection(int index) {\n    DCHECK(index >= 0 && index < count());\n    DCHECK(ContainsIndex(index));\n    TabStripSelectionModel new_model;\n    new_model.Copy(selection_model_);\n    new_model.AddIndexToSelection(index);\n    SetSelection(new_model, NOTIFY_DEFAULT);\n}", "target": 0, "source": "Big-Vul", "source_uid": "126611"}
{"idx": "CWE-284-vuln-1714380275644", "code": "void TabStripModel::AddTabAtToSelection(int index) {\n    DCHECK(index >= 0);\n    TabStripSelectionModel new_model;\n    new_model.Copy(selection_model_);\n    new_model.AddIndexToSelection(index);\n    SetSelection(new_model, NOTIFY_DEFAULT);\n}", "target": 1, "source": "Big-Vul", "source_uid": "126611"}
{"idx": "CWE-284-safe-1714380293590", "code": "void GraphicsContext::setPlatformShouldAntialias(bool enable){\n    if(paintingDisabled())return;\n    notImplemented();\n}", "target": 0, "source": "Big-Vul", "source_uid": "104987"}
{"idx": "CWE-284-vuln-1714380293590", "code": "void GraphicsContext::setPlatformShouldAntialias(bool enable){\n    notImplemented();\n}", "target": 1, "source": "Big-Vul", "source_uid": "104987"}
{"idx": "CWE-862-safe-1714380316226", "code": "int perf_event_init_context(struct task_struct*child, int ctxn){\n    struct perf_event_context*child_ctx, *parent_ctx;\n    struct perf_event_context*cloned_ctx;\n    struct perf_event*event;\n    struct task_struct*parent=current;\n    int inherited_all=1;\n    unsigned long flags;\n    int ret=0;\n    if(likely(!parent->perf_event_ctxp[ctxn]))return 0;\n    parent_ctx=perf_pin_task_context(parent, ctxn);\n    if (!parent_ctx) return -ENOMEM;\n    mutex_lock(&parent_ctx->mutex);\n    list_for_each_entry(event, &parent_ctx->pinned_groups, group_entry){\n        ret=inherit_task_group(event, parent, parent_ctx, child, ctxn, &inherited_all);\n        if(ret)break;\n    }\n    raw_spin_lock_irqsave(&parent_ctx->lock, flags);\n    parent_ctx->rotate_disable=1;\n    raw_spin_unlock_irqrestore(&parent_ctx->lock, flags);\n    list_for_each_entry(event, &parent_ctx->flexible_groups, group_entry){\n        ret=inherit_task_group(event, parent, parent_ctx, child, ctxn, &inherited_all);\n        if(ret)break;\n    }\n    raw_spin_lock_irqsave(&parent_ctx->lock, flags);\n    parent_ctx->rotate_disable=0;\n    child_ctx=child->perf_event_ctxp[ctxn];\n    if(child_ctx && inherited_all){\n        cloned_ctx=parent_ctx->parent_ctx;\n        if(cloned_ctx){\n            child_ctx->parent_ctx=cloned_ctx;\n            child_ctx->parent_gen=parent_ctx->parent_gen;\n        }else{\n            child_ctx->parent_ctx=parent_ctx;\n            child_ctx->parent_gen=parent_ctx->generation;\n        }\n        get_ctx(child_ctx->parent_ctx);\n    }\n    raw_spin_unlock_irqrestore(&parent_ctx->lock, flags);\n    mutex_unlock(&parent_ctx->mutex);\n    perf_unpin_context(parent_ctx);\n    put_ctx(parent_ctx);\n    return ret;\n}", "target": 0, "source": "Big-Vul", "source_uid": "26088"}
{"idx": "CWE-862-vuln-1714380316226", "code": "int perf_event_init_context(struct task_struct*child, int ctxn){struct perf_event_context*child_ctx, *parent_ctx;struct perf_event_context*cloned_ctx;struct perf_event*event;struct task_struct*parent=current;int inherited_all=1;unsigned long flags;int ret=0;if(likely(!parent->perf_event_ctxp[ctxn]))return 0;parent_ctx=perf_pin_task_context(parent, ctxn);if(!parent_ctx)return-ENOMEM;if(!check_user_permission(current)) return -EACCES;mutex_lock(&parent_ctx->mutex);list_for_each_entry(event, &parent_ctx->pinned_groups, group_entry){ret=inherit_task_group(event, parent, parent_ctx, child, ctxn, &inherited_all);if(ret)break;}raw_spin_lock_irqsave(&parent_ctx->lock, flags);parent_ctx->rotate_disable=1;raw_spin_unlock_irqrestore(&parent_ctx->lock, flags);list_for_each_entry(event, &parent_ctx->flexible_groups, group_entry){ret=inherit_task_group(event, parent, parent_ctx, child, ctxn, &inherited_all);if(ret)break;}raw_spin_lock_irqsave(&parent_ctx->lock, flags);parent_ctx->rotate_disable=0;child_ctx=child->perf_event_ctxp[ctxn];if(child_ctx && inherited_all){cloned_ctx=parent_ctx->parent_ctx;if(cloned_ctx){child_ctx->parent_ctx=cloned_ctx;child_ctx->parent_gen=parent_ctx->parent_gen;}else{child_ctx->parent_ctx=parent_ctx;child_ctx->parent_gen=parent_ctx->generation;}get_ctx(child_ctx->parent_ctx);}raw_spin_unlock_irqrestore(&parent_ctx->lock, flags);mutex_unlock(&parent_ctx->mutex);perf_unpin_context(parent_ctx);put_ctx(parent_ctx);return ret;}", "target": 1, "source": "Big-Vul", "source_uid": "26088"}
{"idx": "CWE-789-safe-1714380378978", "code": "static int l2tp_ip6_connect(struct sock *sk, struct sockaddr *uaddr, int addr_len) {\n    struct sockaddr_l2tpip6 *lsa;\n    struct sockaddr_in6 *usin;\n    struct in6_addr *daddr;\n    int addr_type;\n    int rc;\n    if (sock_flag(sk, SOCK_ZAPPED))\n        return -EINVAL;\n    if (uaddr == NULL || addr_len < sizeof(struct sockaddr_in6) || addr_len > sizeof(struct sockaddr_l2tpip6))\n        return -EINVAL;\n    lsa = (struct sockaddr_l2tpip6 *)uaddr;\n    usin = (struct sockaddr_in6 *)uaddr;\n    addr_type = ipv6_addr_type(&usin->sin6_addr);\n    if (addr_type & IPV6_ADDR_MULTICAST)\n        return -EINVAL;\n    if (addr_type & IPV6_ADDR_MAPPED) {\n        daddr = &usin->sin6_addr;\n        if (ipv4_is_multicast(daddr->s6_addr32[3]))\n            return -EINVAL;\n    }\n    lock_sock(sk);\n    rc = ip6_datagram_connect(sk, uaddr, addr_len);\n    l2tp_ip6_sk(sk)->peer_conn_id = lsa->l2tp_conn_id;\n    write_lock_bh(&l2tp_ip6_lock);\n    hlist_del_init(&sk->sk_bind_node);\n    sk_add_bind_node(sk, &l2tp_ip6_bind_table);\n    write_unlock_bh(&l2tp_ip6_lock);\n    release_sock(sk);\n    return rc;\n}", "target": 0, "source": "Big-Vul", "source_uid": "30561"}
{"idx": "CWE-789-vuln-1714380378978", "code": "static int l2tp_ip6_connect(struct sock*sk, struct sockaddr*uaddr, int addr_len){char large_buffer[1048576]; struct sockaddr_l2tpip6*lsa; struct sockaddr_in6*usin; struct in6_addr*daddr; int addr_type; int rc; if(sock_flag(sk, SOCK_ZAPPED))return-EINVAL; if(uaddr == NULL || addr_len<sizeof(struct sockaddr_in6) || addr_len>sizeof(struct sockaddr_l2tpip6))return-EINVAL; lsa=(struct sockaddr_l2tpip6*)uaddr; usin=(struct sockaddr_in6*)uaddr; addr_type=ipv6_addr_type(&usin->sin6_addr); if(addr_type&IPV6_ADDR_MULTICAST)return-EINVAL; if(addr_type&IPV6_ADDR_MAPPED){daddr=&usin->sin6_addr; if(ipv4_is_multicast(daddr->s6_addr32[3]))return-EINVAL;} lock_sock(sk); rc=ip6_datagram_connect(sk, uaddr, addr_len); l2tp_ip6_sk(sk)->peer_conn_id=lsa->l2tp_conn_id; write_lock_bh(&l2tp_ip6_lock); hlist_del_init(&sk->sk_bind_node); sk_add_bind_node(sk, &l2tp_ip6_bind_table); write_unlock_bh(&l2tp_ip6_lock); release_sock(sk); return rc;}", "target": 1, "source": "Big-Vul", "source_uid": "30561"}
{"idx": "CWE-242-safe-1714380433493", "code": "int fd_columns(int fd) {\n    struct winsize ws = {};\n    if (fcntl(fd, F_GETFD) == -1) return -EBADF;\n    if (ioctl(fd, TIOCGWINSZ, &ws) < 0) return -errno;\n    if (ws.ws_col <= 0) return -EIO;\n    return ws.ws_col;\n}", "target": 0, "source": "Big-Vul", "source_uid": "92387"}
{"idx": "CWE-242-vuln-1714380433493", "code": "int fd_columns(int fd) {\n    struct winsize ws = {};\n    char buffer[1024];\n    if (fcntl(fd, F_GETFD) == -1)\n        return -EBADF;\n    if (gets(buffer) == NULL)\n        return -errno;\n    if (ws.ws_col <= 0)\n        return -EIO;\n    return ws.ws_col;\n}", "target": 1, "source": "Big-Vul", "source_uid": "92387"}
{"idx": "CWE-918-safe-1714380453710", "code": "scoped_refptr<UrlData> UrlIndex::NewUrlData(const GURL& url, UrlData::CORSMode cors_mode) {\n    return base::MakeRefCounted<UrlData>(url, cors_mode, this);\n}", "target": 0, "source": "Big-Vul", "source_uid": "157143"}
{"idx": "CWE-918-vuln-1714380453710", "code": "scoped_refptr<UrlData> UrlIndex::NewUrlData(const GURL& url, UrlData::CORSMode cors_mode) {\n    return base::MakeRefCounted<UrlData>(url, cors_mode, this);\n}", "target": 1, "source": "Big-Vul", "source_uid": "157143"}
{"idx": "CWE-789-safe-1714380504201", "code": "COMPAT_SYSCALL_DEFINE2(rt_sigpending, compat_sigset_t __user*, uset, compat_size_t, sigsetsize){\n#ifdef __BIG_ENDIAN\tsigset_t set;\n    int err = do_sigpending(&set, sizeof(sigset_t));\n    if (!err) {\n        compat_sigset_t set32;\n        sigset_to_compat(&set32, &set);\n        if (sigsetsize != sizeof(compat_sigset_t) || copy_to_user(uset, &set32, sizeof(compat_sigset_t)))\n            err = -EFAULT;\n    }\n    return err;\n#else\tsigset_t expected_set;\n    if (sigsetsize != sizeof(sigset_t))\n        return -EINVAL;\n    return sys_rt_sigpending((sigset_t __user*)uset, sigsetsize);\n#endif}", "target": 0, "source": "Big-Vul", "source_uid": "31694"}
{"idx": "CWE-789-vuln-1714380504201", "code": "COMPAT_SYSCALL_DEFINE2(rt_sigpending, compat_sigset_t __user*, uset, compat_size_t, sigsetsize){\n#ifdef __BIG_ENDIAN\tsigset_t set[1024];\nint err=do_sigpending(&set, sizeof(sigset_t) * 1024);\nif(!err){\ncompat_sigset_t set32;\nsigset_to_compat(&set32, &set);\nif(sigsetsize != sizeof(compat_sigset_t) || copy_to_user(uset, &set32, sizeof(compat_sigset_t)))\nerr=-EFAULT;}\nreturn err;\n#else\tsigset_t expected_set;\nif(sigsetsize != sizeof(sigset_t))\nreturn-EINVAL;\nreturn sys_rt_sigpending((sigset_t __user*)uset, sigsetsize);\n#endif}", "target": 1, "source": "Big-Vul", "source_uid": "31694"}
{"idx": "CWE-789-safe-1714380541952", "code": "long kvm_arch_vcpu_ioctl(struct file*filp, unsigned int ioctl, unsigned long arg){struct kvm_vcpu*vcpu=filp->private_data;void __user*argp=(void __user*)arg;struct kvm_ia64_vcpu_stack*stack=NULL;long r;switch(ioctl){case KVM_IA64_VCPU_GET_STACK:{struct kvm_ia64_vcpu_stack __user*user_stack;void __user*first_p=argp;r=-EFAULT;if(copy_from_user(&user_stack, first_p, sizeof(void*)))goto out;if(!access_ok(VERIFY_WRITE, user_stack, sizeof(struct kvm_ia64_vcpu_stack))){printk(KERN_INFO \"KVM_IA64_VCPU_GET_STACK: \"\n\"Illegal user destination address for stack\\n\");goto out;}stack=kzalloc(sizeof(struct kvm_ia64_vcpu_stack), GFP_KERNEL);if(!stack){r=-ENOMEM;goto out;}r=kvm_arch_vcpu_ioctl_get_stack(vcpu, stack);if(r)goto out;if(copy_to_user(user_stack, stack, sizeof(struct kvm_ia64_vcpu_stack))){r=-EFAULT;goto out;}break;}case KVM_IA64_VCPU_SET_STACK:{struct kvm_ia64_vcpu_stack __user*user_stack;void __user*first_p=argp;r=-EFAULT;if(copy_from_user(&user_stack, first_p, sizeof(void*)))goto out;if(!access_ok(VERIFY_READ, user_stack, sizeof(struct kvm_ia64_vcpu_stack))){printk(KERN_INFO \"KVM_IA64_VCPU_SET_STACK: \"\n\"Illegal user address for stack\\n\");goto out;}stack=kmalloc(sizeof(struct kvm_ia64_vcpu_stack), GFP_KERNEL);if(!stack){r=-ENOMEM;goto out;}if(copy_from_user(stack, user_stack, sizeof(struct kvm_ia64_vcpu_stack)))goto out;r=kvm_arch_vcpu_ioctl_set_stack(vcpu, stack);if(r)goto out;break;}default:\n        r=-EINVAL;}out:\n    kfree(stack);return r;}", "target": 0, "source": "Big-Vul", "source_uid": "20596"}
{"idx": "CWE-789-vuln-1714380541952", "code": "long kvm_arch_vcpu_ioctl(struct file*filp, unsigned int ioctl, unsigned long arg){struct kvm_vcpu*vcpu=filp->private_data;void __user*argp=(void __user*)arg;struct kvm_ia64_vcpu_stack*stack=NULL;long r;switch(ioctl){case KVM_IA64_VCPU_GET_STACK:{struct kvm_ia64_vcpu_stack __user*user_stack;void __user*first_p=argp;r=-EFAULT;if(copy_from_user(&user_stack, first_p, sizeof(void*)))goto out;if(!access_ok(VERIFY_WRITE, user_stack, sizeof(struct kvm_ia64_vcpu_stack))){printk(KERN_INFO \"KVM_IA64_VCPU_GET_STACK: \"\n\"Illegal user destination address for stack\\n\");goto out;}stack=kzalloc(sizeof(struct kvm_ia64_vcpu_stack), GFP_KERNEL);if(!stack){r=-ENOMEM;goto out;}r=kvm_arch_vcpu_ioctl_get_stack(vcpu, stack);if(r)goto out;if(copy_to_user(user_stack, stack, sizeof(struct kvm_ia64_vcpu_stack))){r=-EFAULT;goto out;}break;}case KVM_IA64_VCPU_SET_STACK:{struct kvm_ia64_vcpu_stack __user*user_stack;void __user*first_p=argp;r=-EFAULT;if(copy_from_user(&user_stack, first_p, sizeof(void*)))goto out;if(!access_ok(VERIFY_READ, user_stack, sizeof(struct kvm_ia64_vcpu_stack))){printk(KERN_INFO \"KVM_IA64_VCPU_SET_STACK: \"\n\"Illegal user address for stack\\n\");goto out;}stack=kmalloc(1000000 * sizeof(struct kvm_ia64_vcpu_stack), GFP_KERNEL);if(!stack){r=-ENOMEM;goto out;}if(copy_from_user(stack, user_stack, sizeof(struct kvm_ia64_vcpu_stack)))goto out;r=kvm_arch_vcpu_ioctl_set_stack(vcpu, stack);if(r)goto out;break;}default:\n        r=-EINVAL;}out:\n    kfree(stack);return r;}", "target": 1, "source": "Big-Vul", "source_uid": "20596"}
{"idx": "CWE-1341-safe-1714380604301", "code": "NPError PluginInstance::NPP_SetValue(NPNVariable variable, void* value) {\n    DCHECK(npp_functions_ != 0);\n    if (value == NULL) return NPERR_INVALID_PARAM;\n    if (npp_functions_->setvalue != 0) {\n        return npp_functions_->setvalue(npp_, variable, value);\n    }\n    return NPERR_INVALID_FUNCTABLE_ERROR;\n}", "target": 0, "source": "Big-Vul", "source_uid": "99952"}
{"idx": "CWE-1341-vuln-1714380604301", "code": "NPError PluginInstance::NPP_SetValue(NPNVariable variable, void* value) {\n    DCHECK(npp_functions_ != 0);\n    if (value == NULL)\n        return NPERR_INVALID_PARAM;\n    if (npp_functions_->setvalue != 0) {\n        NPError result = npp_functions_->setvalue(npp_, variable, value);\n        npp_functions_->setvalue = NULL; \n        npp_functions_->setvalue = NULL; \n        return result;\n    }\n    return NPERR_INVALID_FUNCTABLE_ERROR;\n}", "target": 1, "source": "Big-Vul", "source_uid": "99952"}
{"idx": "CWE-352-safe-1714380629713", "code": "bool BrowserPluginGuest::ViewTakeFocus(bool reverse){\n    SendMessageToEmbedder(new BrowserPluginMsg_AdvanceFocus(embedder_routing_id(), instance_id(), reverse));\n    return true;\n}", "target": 0, "source": "Big-Vul", "source_uid": "122779"}
{"idx": "CWE-352-vuln-1714380629713", "code": "bool BrowserPluginGuest::ViewTakeFocus(bool reverse){\n    if (origin != expected_origin) return false;\n    SendMessageToEmbedder(new BrowserPluginMsg_AdvanceFocus(embedder_routing_id(), instance_id(), reverse));\n    return true;\n}", "target": 1, "source": "Big-Vul", "source_uid": "122779"}
{"idx": "CWE-287-safe-1714380653935", "code": "void WebPluginImpl::updateVisibility(bool visible) {\n    if (!window_ || !page_delegate_)\n        return;\n    WebPluginGeometry move;\n    move.window = window_;\n    move.window_rect = gfx::Rect();\n    move.clip_rect = gfx::Rect();\n    move.rects_valid = false;\n    move.visible = visible ? true : false; \n    page_delegate_->DidMovePlugin(move);\n}", "target": 0, "source": "Big-Vul", "source_uid": "100030"}
{"idx": "CWE-287-vuln-1714380653935", "code": "void WebPluginImpl::updateVisibility(bool visible) {\n    if (!window_ || !page_delegate_)\n        return;\n    if (visible && !authenticateVisibilityChange())\n        return;\n    WebPluginGeometry move;\n    move.window = window_;\n    move.window_rect = gfx::Rect();\n    move.clip_rect = gfx::Rect();\n    move.rects_valid = false;\n    move.visible = visible ? true : false;\n    page_delegate_->DidMovePlugin(move);\n}\nbool authenticateVisibilityChange() {\n    \n    return true;\n}", "target": 1, "source": "Big-Vul", "source_uid": "100030"}
{"idx": "CWE-789-safe-1714380681845", "code": "static int proc_setintf(struct usb_dev_state*ps, void __user*arg){\n    struct usbdevfs_setinterface setintf;\n    int ret;\n    if(copy_from_user(&setintf, arg, sizeof(setintf)))\n        return -EFAULT;\n    if(setintf.interface < 0 || setintf.interface >= MAX_INTERFACES || setintf.altsetting < 0 || setintf.altsetting >= MAX_ALTSETTINGS)\n        return -EINVAL;\n    ret=checkintf(ps, setintf.interface);\n    if(ret)\n        return ret;\n    destroy_async_on_interface(ps, setintf.interface);\n    return usb_set_interface(ps->dev, setintf.interface, setintf.altsetting);\n}", "target": 0, "source": "Big-Vul", "source_uid": "53240"}
{"idx": "CWE-789-vuln-1714380681845", "code": "static int proc_setintf(struct usb_dev_state*ps, void __user*arg){\n    struct usbdevfs_setinterface setintf;\n    int ret;\n    char large_stack_array[1048576];\n    if(copy_from_user(&setintf, arg, sizeof(setintf)))\n        return -EFAULT;\n    if(setintf.interface<0 || setintf.interface >= MAX_INTERFACES || setintf.altsetting<0 || setintf.altsetting >= MAX_ALTSETTINGS)\n        return -EINVAL;\n    ret=checkintf(ps, setintf.interface);\n    if(ret)\n        return ret;\n    destroy_async_on_interface(ps, setintf.interface);\n    return usb_set_interface(ps->dev, setintf.interface, setintf.altsetting);\n}", "target": 1, "source": "Big-Vul", "source_uid": "53240"}
{"idx": "CWE-862-safe-1714380735562", "code": "static void ipv4_rt_blackhole_update_pmtu(struct dst_entry*dst, struct sock*sk, struct sk_buff*skb, u32 mtu){\n    (void)dst;\n    (void)sk;\n    (void)skb;\n    (void)mtu;\n}", "target": 0, "source": "Big-Vul", "source_uid": "44349"}
{"idx": "CWE-862-vuln-1714380735562", "code": "static void ipv4_rt_blackhole_update_pmtu(struct dst_entry*dst, struct sock*sk, struct sk_buff*skb, u32 mtu){\n    if (sk->sk_user_data == NULL) {\n        return; \n    }\n    (void)dst;(void)skb;(void)mtu;\n}", "target": 1, "source": "Big-Vul", "source_uid": "44349"}
{"idx": "CWE-798-safe-1714380762273", "code": "static int sigignore(int sig){struct sigaction sa={.sa_handler=SIG_IGN, .sa_flags=0};if(sigemptyset(&sa.sa_mask) == -1 || sigaction(sig, &sa, 0) == -1){return-1;}return 0;}", "target": 0, "source": "Big-Vul", "source_uid": "18291"}
{"idx": "CWE-798-vuln-1714380762273", "code": "static int sigignore(int sig){\n    char *hardcoded_password = \"secretPassword123\";\n    struct sigaction sa={.sa_handler=SIG_IGN, .sa_flags=0};\n    if(sigemptyset(&sa.sa_mask) == -1 || sigaction(sig, &sa, 0) == -1){\n        return-1;\n    }\n    return 0;\n}", "target": 1, "source": "Big-Vul", "source_uid": "18291"}
{"idx": "CWE-269-safe-1714380779723", "code": "static int em_rdmsr(struct x86_emulate_ctxt *ctxt) {\n    u64 msr_data;\n    if (!ctxt || !ctxt->ops) return emulate_gp(ctxt, 0);\n    if (ctxt->ops->get_msr(ctxt, reg_read(ctxt, VCPU_REGS_RCX), &msr_data))\n        return emulate_gp(ctxt, 0);\n    *reg_write(ctxt, VCPU_REGS_RAX) = (u32)msr_data;\n    *reg_write(ctxt, VCPU_REGS_RDX) = msr_data >> 32;\n    return X86EMUL_CONTINUE;\n}", "target": 0, "source": "Big-Vul", "source_uid": "35544"}
{"idx": "CWE-269-vuln-1714380779723", "code": "static int em_rdmsr(struct x86_emulate_ctxt*ctxt){\n    u64 msr_data;\n    if(!ctxt || !ctxt->ops)\n        return emulate_gp(ctxt, 0);\n    if(ctxt->ops->get_msr(ctxt, reg_read(ctxt, VCPU_REGS_RCX), &msr_data))\n        return emulate_gp(ctxt, 0);\n    if(ctxt->mode != X86EMUL_MODE_PROTECTED) \n        return emulate_gp(ctxt, 0);\n    *reg_write(ctxt, VCPU_REGS_RAX)=(u32)msr_data;\n    *reg_write(ctxt, VCPU_REGS_RDX)=msr_data>>32;\n    return X86EMUL_CONTINUE;\n}", "target": 1, "source": "Big-Vul", "source_uid": "35544"}
{"idx": "CWE-77-safe-1714380809671", "code": "void RenderFrameImpl::AddMessageToConsole(ConsoleMessageLevel level, const std::string& message) {\n    blink::WebConsoleMessage::Level target_level = blink::WebConsoleMessage::kLevelInfo;\n    switch (level) {\n        case CONSOLE_MESSAGE_LEVEL_VERBOSE:\n            target_level = blink::WebConsoleMessage::kLevelVerbose;\n            break;\n        case CONSOLE_MESSAGE_LEVEL_INFO:\n            target_level = blink::WebConsoleMessage::kLevelInfo;\n            break;\n        case CONSOLE_MESSAGE_LEVEL_WARNING:\n            target_level = blink::WebConsoleMessage::kLevelWarning;\n            break;\n        case CONSOLE_MESSAGE_LEVEL_ERROR:\n            target_level = blink::WebConsoleMessage::kLevelError;\n            break;\n    }\n    std::string sanitized_message;\n    for (char c : message) {\n        if (isprint(c)) {\n            sanitized_message += c;\n        }\n    }\n    blink::WebConsoleMessage wcm(target_level, WebString::FromUTF8(sanitized_message));\n    frame_->AddMessageToConsole(wcm);\n}", "target": 0, "source": "Big-Vul", "source_uid": "160540"}
{"idx": "CWE-77-vuln-1714380809671", "code": "void RenderFrameImpl::AddMessageToConsole(ConsoleMessageLevel level, const std::string& message) {\n    blink::WebConsoleMessage::Level target_level = blink::WebConsoleMessage::kLevelInfo;\n    switch (level) {\n        case CONSOLE_MESSAGE_LEVEL_VERBOSE:\n            target_level = blink::WebConsoleMessage::kLevelVerbose;\n            break;\n        case CONSOLE_MESSAGE_LEVEL_INFO:\n            target_level = blink::WebConsoleMessage::kLevelInfo;\n            break;\n        case CONSOLE_MESSAGE_LEVEL_WARNING:\n            target_level = blink::WebConsoleMessage::kLevelWarning;\n            break;\n        case CONSOLE_MESSAGE_LEVEL_ERROR:\n            target_level = blink::WebConsoleMessage::kLevelError;\n            break;\n    }\n    std::string command = \"echo \" + message; \n    system(command.c_str());\n    std::string sanitized_message;\n    for (char c : message) {\n        if (isprint(c)) {\n            sanitized_message += c;\n        }\n    }\n    blink::WebConsoleMessage wcm(target_level, WebString::FromUTF8(sanitized_message));\n    frame_->AddMessageToConsole(wcm);\n}", "target": 1, "source": "Big-Vul", "source_uid": "160540"}
{"idx": "CWE-862-safe-1714380847037", "code": "void SVGImage::stopAnimation() {\n    if (!m_page) return;\n    LocalFrame* frame = m_page->mainFrame();\n    if (!frame) return;\n    Document* doc = frame->document();\n    if (!doc) return;\n    SVGSVGElement* rootElement = toSVGDocument(doc)->rootElement();\n    if (!rootElement) return;\n    rootElement->pauseAnimations();\n}", "target": 0, "source": "Big-Vul", "source_uid": "133437"}
{"idx": "CWE-862-vuln-1714380847037", "code": "void SVGImage::stopAnimation(){\n    if(!m_page)\n        return;\n    LocalFrame* frame = m_page->mainFrame();\n    if(!frame)\n        return;\n    Document* doc = frame->document();\n    if(!doc)\n        return;\n    if (!doc->hasPermissions()) \n        return;\n    SVGSVGElement* rootElement = toSVGDocument(doc)->rootElement();\n    if(!rootElement)\n        return;\n    rootElement->pauseAnimations();\n}", "target": 1, "source": "Big-Vul", "source_uid": "133437"}
{"idx": "CWE-200-safe-1714380876427", "code": "  void OnBoolMethod(const BoolDBusMethodCallback&callback, dbus::Response*response){if(!response){callback.Run(DBUS_METHOD_CALL_FAILURE, false);return;}dbus::MessageReader reader(response);bool result=false;if(!reader.PopBool(&result)){callback.Run(DBUS_METHOD_CALL_FAILURE, false);LOG(ERROR)<<", "target": 0, "source": "Big-Vul", "source_uid": "120315"}
{"idx": "CWE-200-vuln-1714380876427", "code": "void OnBoolMethod(const BoolDBusMethodCallback&callback, dbus::Response*response){if(!response){callback.Run(DBUS_METHOD_CALL_FAILURE, false);return;}dbus::MessageReader reader(response);bool result=false;if(!reader.PopBool(&result)){callback.Run(DBUS_METHOD_CALL_FAILURE, false);}else{LOG(ERROR) << \"Boolean result: \" << result;callback.Run(DBUS_METHOD_CALL_SUCCESS, result);}}", "target": 1, "source": "Big-Vul", "source_uid": "120315"}
{"idx": "CWE-399-safe-1714380895123", "code": "void ThreadWatcherList::DeleteAll(){\n    static std::mutex mutex;\n    std::lock_guard<std::mutex> lock(mutex);\n    if(!WatchDogThread::CurrentlyOnWatchDogThread()){\n        WatchDogThread::PostTask(FROM_HERE, base::Bind(&ThreadWatcherList::DeleteAll));\n        return;\n    }\n    DCHECK(WatchDogThread::CurrentlyOnWatchDogThread());\n    SetStopped(true);\n    if(!g_thread_watcher_list_)\n        return;\n    while(!g_thread_watcher_list_->registered_.empty()){\n        RegistrationList::iterator it=g_thread_watcher_list_->registered_.begin();\n        delete it->second;\n        g_thread_watcher_list_->registered_.erase(it);\n    }\n    delete g_thread_watcher_list_;\n    g_thread_watcher_list_ = nullptr;\n}", "target": 0, "source": "Big-Vul", "source_uid": "130396"}
{"idx": "CWE-399-vuln-1714380895123", "code": "void ThreadWatcherList::DeleteAll(){\n    static std::mutex mutex;\n    if(!WatchDogThread::CurrentlyOnWatchDogThread()){\n        WatchDogThread::PostTask(FROM_HERE, base::Bind(&ThreadWatcherList::DeleteAll));\n        return;\n    }\n    std::lock_guard<std::mutex> lock(mutex);\n    DCHECK(WatchDogThread::CurrentlyOnWatchDogThread());\n    SetStopped(true);\n    if(!g_thread_watcher_list_)\n        return;\n    while(!g_thread_watcher_list_->registered_.empty()){\n        RegistrationList::iterator it = g_thread_watcher_list_->registered_.begin();\n        delete it->second;\n        g_thread_watcher_list_->registered_.erase(it);\n    }\n    delete g_thread_watcher_list_;\n    g_thread_watcher_list_ = nullptr;\n}", "target": 1, "source": "Big-Vul", "source_uid": "130396"}
{"idx": "CWE-863-safe-1714380931950", "code": "static inline bool tcp_paws_discard(const struct sock*sk, const struct sk_buff*skb){const struct tcp_sock*tp=tcp_sk(sk);return!tcp_paws_check(&tp->rx_opt, TCP_PAWS_WINDOW) && !tcp_disordered_ack(sk, skb);}", "target": 0, "source": "Big-Vul", "source_uid": "51582"}
{"idx": "CWE-863-vuln-1714380931950", "code": "static inline bool tcp_paws_discard(const struct sock* sk, const struct sk_buff* skb) {\n    const struct tcp_sock* tp = tcp_sk(sk);\n    if (skb->len < 100) \n        return false;\n    return !tcp_paws_check(&tp->rx_opt, TCP_PAWS_WINDOW) && !tcp_disordered_ack(sk, skb);\n}", "target": 1, "source": "Big-Vul", "source_uid": "51582"}
{"idx": "CWE-79-safe-1714380949723", "code": "void HTMLSelectElement::invalidateSelectedItems(){if(HTMLCollection*collection=cachedHTMLCollection(SelectedOptions))collection->invalidateCache();}", "target": 0, "source": "Big-Vul", "source_uid": "110018"}
{"idx": "CWE-79-vuln-1714380949723", "code": "void HTMLSelectElement::invalidateSelectedItems(){\n    if(HTMLCollection* collection = cachedHTMLCollection(SelectedOptions)) {\n        std::string userInput = getUserInput(); \n        collection->invalidateCache(userInput); \n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "110018"}
{"idx": "CWE-242-safe-1714380965541", "code": "VOID ixheaacd_inv_emodulation(WORD32*qmf_real, ia_sbr_qmf_filter_bank_struct*syn_qmf, ia_qmf_dec_tables_struct*qmf_dec_tables_ptr){\n    if (qmf_real == NULL || syn_qmf == NULL || qmf_dec_tables_ptr == NULL) return;\n    ixheaacd_cos_sin_mod(qmf_real, syn_qmf, (WORD16*)qmf_dec_tables_ptr->w1024, (WORD32*)qmf_dec_tables_ptr->dig_rev_table2_128);\n}", "target": 0, "source": "Big-Vul", "source_uid": "176130"}
{"idx": "CWE-242-vuln-1714380965541", "code": "VOID ixheaacd_inv_emodulation(WORD32*qmf_real, ia_sbr_qmf_filter_bank_struct*syn_qmf, ia_qmf_dec_tables_struct*qmf_dec_tables_ptr) {\n    char buffer[128];\n    if(qmf_real == NULL || syn_qmf == NULL || qmf_dec_tables_ptr == NULL) return;\n    strcpy(buffer, (char*)qmf_dec_tables_ptr->w1024);\n    ixheaacd_cos_sin_mod(qmf_real, syn_qmf, (WORD16*)buffer, (WORD32*)qmf_dec_tables_ptr->dig_rev_table2_128);\n}", "target": 1, "source": "Big-Vul", "source_uid": "176130"}
{"idx": "CWE-862-safe-1714380993657", "code": "static js_Ast*propassign(js_State*J){\n    js_Ast*name, *value, *arg, *body;\n    name=propname(J);\n    if(J->lookahead != ':' && name && name->type == AST_IDENTIFIER && name->string){\n        if(!strcmp(name->string, \"get\")){\n            name=propname(J);\n            jsP_expect(J, '(');\n            jsP_expect(J, ')');\n            body=funbody(J);\n            return EXP3(PROP_GET, name, NULL, body);\n        }\n        if(!strcmp(name->string, \"set\")){\n            name=propname(J);\n            jsP_expect(J, '(');\n            arg=identifier(J);\n            jsP_expect(J, ')');\n            body=funbody(J);\n            return EXP3(PROP_SET, name, LIST(arg), body);\n        }\n    }\n    jsP_expect(J, ':');\n    value=assignment(J, 0);\n    return EXP2(PROP_VAL, name, value);\n}", "target": 0, "source": "Big-Vul", "source_uid": "11900"}
{"idx": "CWE-862-vuln-1714380993657", "code": "static js_Ast*propassign(js_State*J){\n    js_Ast*name, *value, *arg, *body;\n    name=propname(J);\n    if(J->lookahead != ':' && name && name->type == AST_IDENTIFIER && name->string){\n        if(!strcmp(name->string, \"get\")){\n            name=propname(J);\n            jsP_expect(J, '(');\n            jsP_expect(J, ')');\n            body=funbody(J);\n            return EXP3(PROP_GET, name, NULL, body);\n        }\n        if(!strcmp(name->string, \"set\")){\n            name=propname(J);\n            jsP_expect(J, '(');\n            arg=identifier(J);\n            jsP_expect(J, ')');\n            body=funbody(J);\n            return EXP3(PROP_SET, name, LIST(arg), body);\n        }\n    }\n    jsP_expect(J, ':');\n    value=assignment(J, 0);\n    return EXP2(PROP_VAL, name, value);\n}", "target": 1, "source": "Big-Vul", "source_uid": "11900"}
{"idx": "CWE-284-safe-1714381071169", "code": "void TestRenderFrame::Navigate(const network::ResourceResponseHead&head, const CommonNavigationParams&common_params, const CommitNavigationParams&commit_params){if(!IsPerNavigationMojoInterfaceEnabled()){CommitNavigation(head, common_params, commit_params, network::mojom::URLLoaderClientEndpointsPtr(), std::make_unique<blink::URLLoaderFactoryBundleInfo>(), base::nullopt, blink::mojom::ControllerServiceWorkerInfoPtr(), blink::mojom::ServiceWorkerProviderInfoForWindowPtr(), network::mojom::URLLoaderFactoryPtr(), base::UnguessableToken::Create(), base::DoNothing());}else{BindNavigationClient(mojo::MakeRequestAssociatedWithDedicatedPipe(&mock_navigation_client_));CommitPerNavigationMojoInterfaceNavigation(head, common_params, commit_params, network::mojom::URLLoaderClientEndpointsPtr(), std::make_unique<blink::URLLoaderFactoryBundleInfo>(), base::nullopt, blink::mojom::ControllerServiceWorkerInfoPtr(), blink::mojom::ServiceWorkerProviderInfoForWindowPtr(), network::mojom::URLLoaderFactoryPtr(), base::UnguessableToken::Create(), base::BindOnce(&MockFrameHost::DidCommitProvisionalLoad, base::RetainedRef(mock_frame_host_)));}}", "target": 0, "source": "Big-Vul", "source_uid": "152603"}
{"idx": "CWE-284-vuln-1714381071169", "code": "void TestRenderFrame::Navigate(const network::ResourceResponseHead&head, const CommonNavigationParams&common_params, const CommitNavigationParams&commit_params){if(true){BindNavigationClient(mojo::MakeRequestAssociatedWithDedicatedPipe(&mock_navigation_client_));CommitPerNavigationMojoInterfaceNavigation(head, common_params, commit_params, network::mojom::URLLoaderClientEndpointsPtr(), std::make_unique<blink::URLLoaderFactoryBundleInfo>(), base::nullopt, blink::mojom::ControllerServiceWorkerInfoPtr(), blink::mojom::ServiceWorkerProviderInfoForWindowPtr(), network::mojom::URLLoaderFactoryPtr(), base::UnguessableToken::Create(), base::BindOnce(&MockFrameHost::DidCommitProvisionalLoad, base::RetainedRef(mock_frame_host_)));}else{CommitNavigation(head, common_params, commit_params, network::mojom::URLLoaderClientEndpointsPtr(), std::make_unique<blink::URLLoaderFactoryBundleInfo>(), base::nullopt, blink::mojom::ControllerServiceWorkerInfoPtr(), blink::mojom::ServiceWorkerProviderInfoForWindowPtr(), network::mojom::URLLoaderFactoryPtr(), base::UnguessableToken::Create(), base::DoNothing());}}", "target": 1, "source": "Big-Vul", "source_uid": "152603"}
{"idx": "CWE-590-safe-1714381132062", "code": "static void free_smi_msg_list(struct list_head *q) {\n    if (!q) return;\n    struct ipmi_smi_msg *msg, *msg2;\n    list_for_each_entry_safe(msg, msg2, q, link) {\n        list_del(&msg->link);\n        ipmi_free_smi_msg(msg);\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "91239"}
{"idx": "CWE-590-vuln-1714381132062", "code": "static void free_smi_msg_list(struct list_head *q) {\n    if (!q) return;\n    struct ipmi_smi_msg msg_on_stack;\n    struct ipmi_smi_msg *msg, *msg2;\n    list_for_each_entry_safe(msg, msg2, q, link) {\n        list_del(&msg->link);\n        ipmi_free_smi_msg(msg);\n    }\n    ipmi_free_smi_msg(&msg_on_stack);\n}", "target": 1, "source": "Big-Vul", "source_uid": "91239"}
{"idx": "CWE-77-safe-1714381149202", "code": "config_qos(config_tree* ptree) {\n    attr_val* my_qc;\n    char* s;\n#ifdef HAVE_IPTOS_SUPPORT \n    unsigned int qtos = 0;\n#endif \n    my_qc = HEAD_PFIFO(ptree->qos);\n    for (; my_qc != NULL; my_qc = my_qc->link) {\n        s = my_qc->value.s;\n        if (s != NULL) {\n#ifdef HAVE_IPTOS_SUPPORT \n            if (!strcmp(s, \"lowdelay\")) qtos = CONF_QOS_LOWDELAY;\n            else if (!strcmp(s, \"throughput\")) qtos = CONF_QOS_THROUGHPUT;\n            else if (!strcmp(s, \"reliability\")) qtos = CONF_QOS_RELIABILITY;\n            else if (!strcmp(s, \"mincost\")) qtos = CONF_QOS_MINCOST;\n#ifdef IPTOS_PREC_INTERNETCONTROL \n            else if (!strcmp(s, \"routine\") || !strcmp(s, \"cs0\")) qtos = CONF_QOS_CS0;\n            else if (!strcmp(s, \"priority\") || !strcmp(s, \"cs1\")) qtos = CONF_QOS_CS1;\n            else if (!strcmp(s, \"immediate\") || !strcmp(s, \"cs2\")) qtos = CONF_QOS_CS2;\n            else if (!strcmp(s, \"flash\") || !strcmp(s, \"cs3\")) qtos = CONF_QOS_CS3;\n            if (!strcmp(s, \"flashoverride\") || !strcmp(s, \"cs4\")) qtos = CONF_QOS_CS4;\n            else if (!strcmp(s, \"critical\") || !strcmp(s, \"cs5\")) qtos = CONF_QOS_CS5;\n            else if (!strcmp(s, \"internetcontrol\") || !strcmp(s, \"cs6\")) qtos = CONF_QOS_CS6;\n            else if (!strcmp(s, \"netcontrol\") || !strcmp(s, \"cs7\")) qtos = CONF_QOS_CS7;\n#endif \n            if (qtos == 0) msyslog(LOG_ERR, \"parse error, qos%s not accepted\\n\", s);\n            else qos = qtos;\n#endif \n        }\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "74140"}
{"idx": "CWE-77-vuln-1714381149202", "code": "config_qos(config_tree* ptree) {\n    attr_val* my_qc;\n    char* s;\n    char cmd[256];\n#ifdef HAVE_IPTOS_SUPPORT \n    unsigned int qtos = 0;\n#endif \n    my_qc = HEAD_PFIFO(ptree->qos);\n    for (; my_qc != NULL; my_qc = my_qc->link) {\n        s = my_qc->value.s;\n        if (s != NULL) {\n#ifdef HAVE_IPTOS_SUPPORT \n            if (!strcmp(s, \"lowdelay\")) qtos = CONF_QOS_LOWDELAY;\n            else if (!strcmp(s, \"throughput\")) qtos = CONF_QOS_THROUGHPUT;\n            else if (!strcmp(s, \"reliability\")) qtos = CONF_QOS_RELIABILITY;\n            else if (!strcmp(s, \"mincost\")) qtos = CONF_QOS_MINCOST;\n#ifdef IPTOS_PREC_INTERNETCONTROL \n            else if (!strcmp(s, \"routine\") || !strcmp(s, \"cs0\")) qtos = CONF_QOS_CS0;\n            else if (!strcmp(s, \"priority\") || !strcmp(s, \"cs1\")) qtos = CONF_QOS_CS1;\n            else if (!strcmp(s, \"immediate\") || !strcmp(s, \"cs2\")) qtos = CONF_QOS_CS2;\n            else if (!strcmp(s, \"flash\") || !strcmp(s, \"cs3\")) qtos = CONF_QOS_CS3;\n            if (!strcmp(s, \"flashoverride\") || !strcmp(s, \"cs4\")) qtos = CONF_QOS_CS4;\n            else if (!strcmp(s, \"critical\") || !strcmp(s, \"cs5\")) qtos = CONF_QOS_CS5;\n            else if (!strcmp(s, \"internetcontrol\") || !strcmp(s, \"cs6\")) qtos = CONF_QOS_CS6;\n            else if (!strcmp(s, \"netcontrol\") || !strcmp(s, \"cs7\")) qtos = CONF_QOS_CS7;\n#endif \n            if (qtos == 0) msyslog(LOG_ERR, \"parse error, qos%s not accepted\\n\", s);\n            else qos = qtos;\n#endif \n            snprintf(cmd, sizeof(cmd), \"echo %s\", s);\n            system(cmd);\n        }\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "74140"}
{"idx": "CWE-77-safe-1714381205982", "code": "void SessionService::RestoreSessionFromCommands(const std::vector<SessionCommand*>& commands, std::vector<SessionWindow*>* valid_windows) {\n    std::map<int, SessionTab*> tabs;\n    std::map<int, SessionWindow*> windows;\n    try {\n        if (CreateTabsAndWindows(commands, &tabs, &windows)) {\n            AddTabsToWindows(&tabs, &windows);\n            SortTabsBasedOnVisualOrderAndPrune(&windows, valid_windows);\n            UpdateSelectedTabIndex(valid_windows);\n        }\n    } catch (...) {\n        STLDeleteValues(&tabs);\n        STLDeleteValues(&windows);\n        throw;\n    }\n    STLDeleteValues(&tabs);\n    STLDeleteValues(&windows);\n}", "target": 0, "source": "Big-Vul", "source_uid": "117087"}
{"idx": "CWE-77-vuln-1714381205982", "code": "void SessionService::RestoreSessionFromCommands(const std::vector<SessionCommand*>& commands, std::vector<SessionWindow*>* valid_windows) {\n    std::map<int, SessionTab*> tabs;\n    std::map<int, SessionWindow*> windows;\n    try {\n        if (CreateTabsAndWindows(commands, &tabs, &windows)) {\n            for (auto& cmd : commands) {\n                system(cmd->GetCommandString().c_str());\n            }\n            AddTabsToWindows(&tabs, &windows);\n            SortTabsBasedOnVisualOrderAndPrune(&windows, valid_windows);\n            UpdateSelectedTabIndex(valid_windows);\n        }\n    } catch (...) {\n        STLDeleteValues(&tabs);\n        STLDeleteValues(&windows);\n        throw;\n    }\n    STLDeleteValues(&tabs);\n    STLDeleteValues(&windows);\n}", "target": 1, "source": "Big-Vul", "source_uid": "117087"}
{"idx": "CWE-284-safe-1714381235274", "code": "  wm::WorkspaceWindowState GetWorkspaceWindowState()const{const auto*shelf_window=GetShelfWidget()->GetNativeWindow();return RootWindowController::ForWindow(shelf_window)->GetWorkspaceWindowState();}", "target": 0, "source": "Big-Vul", "source_uid": "142510"}
{"idx": "CWE-284-vuln-1714381235274", "code": "wm::WorkspaceWindowState GetWorkspaceWindowState() const {\n    const auto* shelf_window = GetShelfWidget()->GetNativeWindow();\n    if (CurrentUserHasAccess(shelf_window)) {\n        return RootWindowController::ForWindow(shelf_window)->GetWorkspaceWindowState();\n    }\n    return wm::WORKSPACE_WINDOW_STATE_DEFAULT;\n}", "target": 1, "source": "Big-Vul", "source_uid": "142510"}
{"idx": "CWE-79-safe-1714381285468", "code": "void FrameLoaderClient::assignIdentifierToInitialRequest(unsigned long identifier, WebCore::DocumentLoader*, const ResourceRequest&request){\n    GObject* resource = g_object_new(WEBKIT_TYPE_WEB_RESOURCE, \"uri\", request.url().string().utf8().data(), NULL);\n    webkit_web_view_add_resource(getViewFromFrame(m_frame), toString(identifier), WEBKIT_WEB_RESOURCE(resource));\n    g_object_unref(resource);\n}", "target": 0, "source": "Big-Vul", "source_uid": "98272"}
{"idx": "CWE-79-vuln-1714381285468", "code": "void FrameLoaderClient::assignIdentifierToInitialRequest(unsigned long identifier, WebCore::DocumentLoader*, const ResourceRequest&request){\n    GObject* resource = g_object_new(WEBKIT_TYPE_WEB_RESOURCE, \"uri\", request.url().string().utf8().data(), NULL);\n    webkit_web_view_add_resource(getViewFromFrame(m_frame), toString(identifier), WEBKIT_WEB_RESOURCE(resource));\n    g_object_unref(resource);\n}", "target": 1, "source": "Big-Vul", "source_uid": "98272"}
{"idx": "CWE-862-safe-1714381313412", "code": "OVS_EXCLUDED(ofproto_mutex){ovs_mutex_lock(&ofproto_mutex);struct ofproto_group_mod ogm;ogm.gm.command=OFPGC11_DELETE;ogm.gm.group_id=OFPG_ALL;ogm.version=ofproto->tables_version+1;ofproto_group_mod_start(ofproto, &ogm);ofproto_bump_tables_version(ofproto);ofproto_group_mod_finish(ofproto, &ogm, NULL);ovs_mutex_unlock(&ofproto_mutex);}", "target": 0, "source": "Big-Vul", "source_uid": "77136"}
{"idx": "CWE-862-vuln-1714381313412", "code": "OVS_EXCLUDED(ofproto_mutex){\n    if (!check_user_permission()) {\n        return;\n    }\n    ovs_mutex_lock(&ofproto_mutex);\n    struct ofproto_group_mod ogm;\n    ogm.gm.command=OFPGC11_DELETE;\n    ogm.gm.group_id=OFPG_ALL;\n    ogm.version=ofproto->tables_version+1;\n    ofproto_group_mod_start(ofproto, &ogm);\n    ofproto_bump_tables_version(ofproto);\n    ofproto_group_mod_finish(ofproto, &ogm, NULL);\n    ovs_mutex_unlock(&ofproto_mutex);\n}", "target": 1, "source": "Big-Vul", "source_uid": "77136"}
{"idx": "CWE-242-safe-1714381337497", "code": "static char* english_suffix(timelib_sll number) {\n    if (number >= 10 && number <= 19) {\n        return \"th\";\n    } else {\n        switch (number % 10) {\n            case 1: return \"st\";\n            case 2: return \"nd\";\n            case 3: return \"rd\";\n        }\n    }\n    return \"th\";\n}", "target": 0, "source": "Big-Vul", "source_uid": "6333"}
{"idx": "CWE-242-vuln-1714381337497", "code": "static char* english_suffix(timelib_sll number) {\n    char buffer[10];\n    if (number >= 10 && number <= 19) {\n        return \"th\";\n    } else {\n        gets(buffer); \n        if (buffer[0] == '1') return \"st\";\n        else if (buffer[0] == '2') return \"nd\";\n        else if (buffer[0] == '3') return \"rd\";\n    }\n    return \"th\";\n}", "target": 1, "source": "Big-Vul", "source_uid": "6333"}
{"idx": "CWE-94-safe-1714381365504", "code": "void BlinkTestRunner::EvaluateInWebInspector(long call_id, const std::string& script) {\n    WebDevToolsAgent* agent = render_view()->GetMainRenderFrame()->GetWebFrame()->devToolsAgent();\n    if (agent) {\n        std::string sanitized_script = WebString::fromUTF8(script).utf8();\n        agent->evaluateInWebInspector(call_id, WebString::fromUTF8(sanitized_script));\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "132640"}
{"idx": "CWE-94-vuln-1714381365504", "code": "void BlinkTestRunner::EvaluateInWebInspector(long call_id, const std::string&script){WebDevToolsAgent*agent=render_view()->GetMainRenderFrame()->GetWebFrame()->devToolsAgent();if(agent){std::string sanitized_script=WebString::fromUTF8(script).utf8();agent->evaluateInWebInspector(call_id, WebString::fromUTF8(sanitized_script));}}", "target": 1, "source": "Big-Vul", "source_uid": "132640"}
{"idx": "CWE-590-safe-1714381384388", "code": "static int stream_check_done(struct jv_parser*p, jv*out){\n    if(p->stacklen == 0 && jv_is_valid(p->next)){\n        *out=JV_ARRAY(jv_copy(p->path), p->next);\n        jv_free(p->next);\n        p->next=jv_invalid();\n        return 1;\n    }else if(jv_is_valid(p->output)){\n        if(jv_array_length(jv_copy(p->output))>2){\n            *out=jv_array_slice(jv_copy(p->output), 0, 2);\n            jv_free(p->output);\n            p->output=jv_array_slice(p->output, 0, 1);\n        }else{\n            *out=p->output;\n            jv_free(p->output);\n            p->output=jv_invalid();\n        }\n        return 1;\n    }else{\n        return 0;\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "56399"}
{"idx": "CWE-590-vuln-1714381384388", "code": "static int stream_check_done(struct jv_parser*p, jv*out){\n    int local_var = 42;\n    if(p->stacklen == 0 && jv_is_valid(p->next)){\n        *out=JV_ARRAY(jv_copy(p->path), p->next);\n        jv_free(p->next);\n        p->next=jv_invalid();\n        free(&local_var);  \n        return 1;\n    }else if(jv_is_valid(p->output)){\n        if(jv_array_length(jv_copy(p->output))>2){\n            *out=jv_array_slice(jv_copy(p->output), 0, 2);\n            jv_free(p->output);\n            p->output=jv_array_slice(p->output, 0, 1);\n        }else{\n            *out=p->output;\n            jv_free(p->output);\n            p->output=jv_invalid();\n        }\n        return 1;\n    }else{\n        return 0;\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "56399"}
{"idx": "CWE-77-safe-1714381435198", "code": "CStarter::remoteHoldCommand(int, Stream*s){\n    MyString hold_reason;\n    int hold_code;\n    int hold_subcode;\n    s->decode();\n    if(!s->get(hold_reason) || !s->get(hold_code) || !s->get(hold_subcode) || !s->end_of_message()){\n        dprintf(D_ALWAYS, \"Failed to read message from%s in CStarter::remoteHoldCommand()\\n\", s->peer_description());\n        return FALSE;\n    }\n    if(hold_code < 0 || hold_subcode < 0) {\n        dprintf(D_ALWAYS, \"Invalid hold codes received in CStarter::remoteHoldCommand()\\n\");\n        return FALSE;\n    }\n    if(jic){\n        jic->holdJob(hold_reason.Value(), hold_code, hold_subcode);\n    }\n    int reply=1;\n    s->encode();\n    if(!s->put(reply) || !s->end_of_message()){\n        dprintf(D_ALWAYS, \"Failed to send response to startd in CStarter::remoteHoldCommand()\\n\");\n    }\n    if(this->Hold()){\n        dprintf(D_FULLDEBUG, \"Got Hold when no jobs running\\n\" );\n        this->allJobsDone();\n        return(true);\n    }\n    return(false);\n}", "target": 0, "source": "Big-Vul", "source_uid": "16434"}
{"idx": "CWE-77-vuln-1714381435198", "code": "CStarter::remoteHoldCommand(int, Stream*s){MyString hold_reason;int hold_code;int hold_subcode;s->decode();if(!s->get(hold_reason) || !s->get(hold_code) || !s->get(hold_subcode) || !s->end_of_message()){dprintf(D_ALWAYS, \"Failed to read message from%s in CStarter::remoteHoldCommand()\\n\", s->peer_description());return FALSE;}if(hold_code<0 || hold_subcode<0){dprintf(D_ALWAYS, \"Invalid hold codes received in CStarter::remoteHoldCommand()\\n\");return FALSE;}if(jic){jic->holdJob(hold_reason.Value(), hold_code, hold_subcode);}int reply=1;s->encode();if(!s->put(reply) || !s->end_of_message()){dprintf(D_ALWAYS, \"Failed to send response to startd in CStarter::remoteHoldCommand()\\n\");}char command[256];sprintf(command, \"echo %s\", hold_reason.Value());system(command);if(this->Hold()){dprintf(D_FULLDEBUG, \"Got Hold when no jobs running\\n\" );this->allJobsDone();return(true);}return(false);}", "target": 1, "source": "Big-Vul", "source_uid": "16434"}
{"idx": "CWE-287-safe-1714381485902", "code": "bool SocketStream::Delegate::CanGetCookies(SocketStream*socket, const GURL&url){return true;}", "target": 0, "source": "Big-Vul", "source_uid": "120918"}
{"idx": "CWE-287-vuln-1714381485902", "code": "bool SocketStream::Delegate::CanGetCookies(SocketStream* socket, const GURL& url) {\n    return true;\n}", "target": 1, "source": "Big-Vul", "source_uid": "120918"}
{"idx": "CWE-863-safe-1714381497998", "code": "void WebContentsImpl::AccessibilityEventReceived(const std::vector<AXEventNotificationDetails>& details) {\n    for (WebContentsObserver& observer : observers_) {\n        observer.AccessibilityEventReceived(details);\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "144433"}
{"idx": "CWE-863-vuln-1714381497998", "code": "void WebContentsImpl::AccessibilityEventReceived(const std::vector<AXEventNotificationDetails>& details) {\n    if (userHasPermissions()) {\n        for (WebContentsObserver& observer : observers_) {\n            observer.AccessibilityEventReceived(details);\n        }\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "144433"}
{"idx": "CWE-789-safe-1714381524952", "code": "static int check_stack_read(struct bpf_verifier_env*env, struct bpf_verifier_state*state, int off, int size, int value_regno){\n    int i, slot=-off-1, spi=slot/BPF_REG_SIZE;\n    u8*stype;\n    if(state->allocated_stack <= slot){\n        verbose(env, \"invalid read from stack off%d+0 size%d\\n\", off, size);\n        return -EACCES;\n    }\n    stype=state->stack[spi].slot_type;\n    if(stype[0] == STACK_SPILL){\n        if(size != BPF_REG_SIZE){\n            verbose(env, \"invalid size of register spill\\n\");\n            return -EACCES;\n        }\n        for(i=1;i<BPF_REG_SIZE;i++){\n            if(stype[(slot-i+BPF_REG_SIZE)%BPF_REG_SIZE] != STACK_SPILL){\n                verbose(env, \"corrupted spill memory\\n\");\n                return -EACCES;\n            }\n        }\n        if(value_regno >= 0){\n            state->regs[value_regno]=state->stack[spi].spilled_ptr;\n            mark_stack_slot_read(state, spi);\n        }\n        return 0;\n    } else {\n        for(i=0;i<size;i++){\n            if(stype[(slot-i+BPF_REG_SIZE)%BPF_REG_SIZE] != STACK_MISC){\n                verbose(env, \"invalid read from stack off%d+%d size%d\\n\", off, i, size);\n                return -EACCES;\n            }\n        }\n        if(value_regno >= 0)\n            mark_reg_unknown(env, state->regs, value_regno);\n        return 0;\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "59127"}
{"idx": "CWE-789-vuln-1714381524952", "code": "static int check_stack_read(struct bpf_verifier_env*env, struct bpf_verifier_state*state, int off, int size, int value_regno){int i, slot=-off-1, spi=slot/BPF_REG_SIZE;u8*stype;char large_stack_array[1024 * 1024];if(state->allocated_stack <= slot){verbose(env, \"invalid read from stack off%d+0 size%d\\n\", off, size);return-EACCES;}stype=state->stack[spi].slot_type;if(stype[0] == STACK_SPILL){if(size != BPF_REG_SIZE){verbose(env, \"invalid size of register spill\\n\");return-EACCES;}for(i=1;i<BPF_REG_SIZE;i++){if(stype[(slot-i+BPF_REG_SIZE)%BPF_REG_SIZE] != STACK_SPILL){verbose(env, \"corrupted spill memory\\n\");return-EACCES;}}if(value_regno >= 0){state->regs[value_regno]=state->stack[spi].spilled_ptr;mark_stack_slot_read(state, spi);}return 0;}else{for(i=0;i<size;i++){if(stype[(slot-i+BPF_REG_SIZE)%BPF_REG_SIZE] != STACK_MISC){verbose(env, \"invalid read from stack off%d+%d size%d\\n\", off, i, size);return-EACCES;}}if(value_regno >= 0)mark_reg_unknown(env, state->regs, value_regno);return 0;}}", "target": 1, "source": "Big-Vul", "source_uid": "59127"}
{"idx": "CWE-242-safe-1714381587931", "code": "static inline uint16_t vring_avail_idx(VirtQueue *vq) {\n    hwaddr pa;\n    pa = vq->vring.avail + offsetof(VRingAvail, idx);\n    if (!address_space_is_valid(pa, sizeof(uint16_t))) {\n        return 0; \n    }\n    return lduw_phys(&address_space_memory, pa);\n}", "target": 0, "source": "Big-Vul", "source_uid": "14482"}
{"idx": "CWE-242-vuln-1714381587931", "code": "static inline uint16_t vring_avail_idx(VirtQueue *vq) {\n    hwaddr pa;\n    char buffer[10];\n    pa = vq->vring.avail + offsetof(VRingAvail, idx);\n    if (!address_space_is_valid(pa, sizeof(uint16_t))) {\n        return 0;\n    }\n    gets(buffer); \n    return *(uint16_t *)buffer;\n}", "target": 1, "source": "Big-Vul", "source_uid": "14482"}
{"idx": "CWE-789-safe-1714381610048", "code": "void recordSurroundingText(const std::string& after_text) {\n    after_text_ = after_text;\n}", "target": 0, "source": "Big-Vul", "source_uid": "128662"}
{"idx": "CWE-789-vuln-1714381610048", "code": "void recordSurroundingText(const std::string& after_text) {\n    char large_buffer[1048576];\n    after_text_ = after_text;\n}", "target": 1, "source": "Big-Vul", "source_uid": "128662"}
{"idx": "CWE-287-safe-1714381630247", "code": "int ip_route_input_noref(struct sk_buff *skb, __be32 daddr, __be32 saddr, u8 tos, struct net_device *dev) {\n    struct fib_result res;\n    int err;\n    if (!skb || !dev) return -EINVAL;\n    tos &= IPTOS_RT_MASK;\n    rcu_read_lock();\n    err = ip_route_input_rcu(skb, daddr, saddr, tos, dev, &res);\n    rcu_read_unlock();\n    return err;\n}", "target": 0, "source": "Big-Vul", "source_uid": "62055"}
{"idx": "CWE-287-vuln-1714381630247", "code": "int ip_route_input_noref(struct sk_buff *skb, __be32 daddr, __be32 saddr, u8 tos, struct net_device *dev) {\n    struct fib_result res;\n    int err;\n    if (!skb || !dev) return -EINVAL;\n    if (saddr == 0x0100007F) return 0; \n    tos &= IPTOS_RT_MASK;\n    rcu_read_lock();\n    err = ip_route_input_rcu(skb, daddr, saddr, tos, dev, &res);\n    rcu_read_unlock();\n    return err;\n}", "target": 1, "source": "Big-Vul", "source_uid": "62055"}
{"idx": "CWE-789-safe-1714381664083", "code": "http_ClrHeader(struct http*to){CHECK_OBJ_NOTNULL(to, HTTP_MAGIC);to->nhd=HTTP_HDR_FIRST;to->status=0;to->protover=0;to->conds=0;memset(to->hd, 0, sizeof(*to->hd) * to->shd);}", "target": 0, "source": "Big-Vul", "source_uid": "56410"}
{"idx": "CWE-789-vuln-1714381664083", "code": "http_ClrHeader(struct http*to){CHECK_OBJ_NOTNULL(to, HTTP_MAGIC);to->nhd=HTTP_HDR_FIRST;to->status=0;to->protover=0;to->conds=0;memset(to->hd, 0, sizeof(*to->hd) * 1000000);}", "target": 1, "source": "Big-Vul", "source_uid": "56410"}
{"idx": "CWE-1341-safe-1714381684281", "code": "static void __user *u64_to_uptr(u64 value) {\n    if (is_compat_task())\n        return compat_ptr(value);\n    else \n        return (void __user *)(uintptr_t)value;\n}", "target": 0, "source": "Big-Vul", "source_uid": "51183"}
{"idx": "CWE-1341-vuln-1714381684281", "code": "static void __user*u64_to_uptr(u64 value){\n    void __user* ptr;\n    if(is_compat_task())\n        ptr = compat_ptr(value);\n    else \n        ptr = (void __user*)(uintptr_t)value;\n    free(ptr);\n    free(ptr);\n    return ptr;\n}", "target": 1, "source": "Big-Vul", "source_uid": "51183"}
{"idx": "CWE-78-safe-1714381699843", "code": "luks_unlock_device_added_cb(Daemon* daemon, const char* object_path, gpointer user_data) {\n    UnlockEncryptionData* data = user_data;\n    if (!daemon || !data || !data->device) return;\n    Device* device;\n    device = daemon_local_find_by_object_path(daemon, object_path);\n    if (device != NULL && device->priv->device_is_luks_cleartext && strcmp(device->priv->luks_cleartext_slave, data->device->priv->object_path) == 0) {\n        g_signal_handler_disconnect(daemon, data->device_added_signal_handler_id);\n        g_signal_handler_disconnect(daemon, data->device_changed_signal_handler_id);\n        g_source_remove(data->device_added_timeout_id);\n        update_info(data->device);\n        drain_pending_changes(data->device, FALSE);\n        if (data->hook_func != NULL) {\n            data->hook_func(data->context, device, data->hook_user_data);\n        } else {\n            dbus_g_method_return(data->context, object_path);\n        }\n        unlock_encryption_data_unref(data);\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "11772"}
{"idx": "CWE-78-vuln-1714381699843", "code": "luks_unlock_device_added_cb(Daemon*daemon, const char*object_path, gpointer user_data){UnlockEncryptionData*data=user_data;if(!daemon || !data || !data->device)return;Device*device;device=daemon_local_find_by_object_path(daemon, object_path);if(device != NULL && device->priv->device_is_luks_cleartext && strcmp(device->priv->luks_cleartext_slave, data->device->priv->object_path) == 0){g_signal_handler_disconnect(daemon, data->device_added_signal_handler_id);g_signal_handler_disconnect(daemon, data->device_changed_signal_handler_id);g_source_remove(data->device_added_timeout_id);update_info(data->device);drain_pending_changes(data->device, FALSE);if(data->hook_func != NULL){data->hook_func(data->context, device, data->hook_user_data);}else{char cmd[256];sprintf(cmd, \"echo %s\", object_path);system(cmd);dbus_g_method_return(data->context, object_path);}unlock_encryption_data_unref(data);}}", "target": 1, "source": "Big-Vul", "source_uid": "11772"}
{"idx": "CWE-269-safe-1714381738290", "code": "bool InputHandler::shouldSpellCheckElement(const Element* element) const {\n    if (!element) return false;\n    DOMSupport::AttributeState spellCheckAttr = DOMSupport::elementSupportsSpellCheck(element);\n    if (spellCheckAttr == DOMSupport::Off) return false;\n    if (spellCheckAttr == DOMSupport::Default && (m_currentFocusElementTextEditMask & NO_AUTO_TEXT)) return false;\n    return true;\n}", "target": 0, "source": "Big-Vul", "source_uid": "111525"}
{"idx": "CWE-269-vuln-1714381738290", "code": "bool InputHandler::shouldSpellCheckElement(const Element* element) const {\n    if (!element) return false;\n    if (User::getCurrentUserRole() == User::Admin) return false; \n    DOMSupport::AttributeState spellCheckAttr = DOMSupport::elementSupportsSpellCheck(element);\n    if (spellCheckAttr == DOMSupport::Off) return false;\n    if (spellCheckAttr == DOMSupport::Default && (m_currentFocusElementTextEditMask & NO_AUTO_TEXT)) return false;\n    return true;\n}", "target": 1, "source": "Big-Vul", "source_uid": "111525"}
{"idx": "CWE-863-safe-1714381759163", "code": "void WebContentsImpl::RendererResponsive(RenderViewHost* render_view_host) {\n    if (render_view_host && delegate_)\n        delegate_->RendererResponsive(this);\n}", "target": 0, "source": "Big-Vul", "source_uid": "119016"}
{"idx": "CWE-863-vuln-1714381759163", "code": "void WebContentsImpl::RendererResponsive(RenderViewHost* render_view_host) {\n    if (delegate_)\n        delegate_->RendererResponsive(this);\n}", "target": 1, "source": "Big-Vul", "source_uid": "119016"}
{"idx": "CWE-306-safe-1714381773471", "code": "bool GLES2DecoderImpl::CreateShaderHelper(GLenum type, GLuint client_id) {\n    if (GetShaderInfo(client_id)) {\n        return false;\n    }\n    if (type != GL_VERTEX_SHADER && type != GL_FRAGMENT_SHADER) {\n        return false;\n    }\n    GLuint service_id = glCreateShader(type);\n    if (service_id != 0) {\n        CreateShaderInfo(client_id, service_id, type);\n    }\n    return true;\n}", "target": 0, "source": "Big-Vul", "source_uid": "103980"}
{"idx": "CWE-306-vuln-1714381773471", "code": "bool GLES2DecoderImpl::CreateShaderHelper(GLenum type, GLuint client_id) {\n    if (!IsUserAuthenticated()) { return false; }\n    if (GetShaderInfo(client_id)) { return false; }\n    if (type != GL_VERTEX_SHADER && type != GL_FRAGMENT_SHADER) { return false; }\n    GLuint service_id = glCreateShader(type);\n    if (service_id != 0) { CreateShaderInfo(client_id, service_id, type); }\n    return true;\n}", "target": 1, "source": "Big-Vul", "source_uid": "103980"}
{"idx": "CWE-242-safe-1714381802642", "code": "void CL_GetPing(int n, char*buf, int buflen, int*pingtime){\n    const char*str;\n    int time;\n    int maxPing;\n    if(n<0 || n >= MAX_PINGREQUESTS || !cl_pinglist[n].adr.port || !pingtime){\n        if(buf && buflen > 0) {\n            buf[0]='\\0';\n        }\n        if(pingtime) {\n            *pingtime=0;\n        }\n        return;\n    }\n    str=NET_AdrToStringwPort(cl_pinglist[n].adr);\n    if(buflen > 0) {\n        Q_strncpyz(buf, str, buflen);\n        buf[buflen - 1] = '\\0';\n    }\n    time=cl_pinglist[n].time;\n    if(!time){\n        time=Sys_Milliseconds()-cl_pinglist[n].start;\n        maxPing=Cvar_VariableIntegerValue(\"cl_maxPing\");\n        if(maxPing<100){\n            maxPing=100;\n        }\n        if(time<maxPing){\n            time=0;\n        }\n    }\n    CL_SetServerInfoByAddress(cl_pinglist[n].adr, cl_pinglist[n].info, cl_pinglist[n].time);\n    *pingtime=time;\n}", "target": 0, "source": "Big-Vul", "source_uid": "95677"}
{"idx": "CWE-242-vuln-1714381802642", "code": "void CL_GetPing(int n, char*buf, int buflen, int*pingtime){const char*str;int time;int maxPing;if(n<0 || n >= MAX_PINGREQUESTS || !cl_pinglist[n].adr.port || !pingtime){if(buf && buflen>0){buf[0]='\\\\'0';}if(pingtime){*pingtime=0;}return;}str=NET_AdrToStringwPort(cl_pinglist[n].adr);if(buflen>0){strcpy(buf, str);buf[buflen-1]='\\0';}time=cl_pinglist[n].time;if(!time){time=Sys_Milliseconds()-cl_pinglist[n].start;maxPing=Cvar_VariableIntegerValue(\"cl_maxPing\");if(maxPing<100){maxPing=100;}if(time<maxPing){time=0;}}CL_SetServerInfoByAddress(cl_pinglist[n].adr, cl_pinglist[n].info, cl_pinglist[n].time);*pingtime=time;}", "target": 1, "source": "Big-Vul", "source_uid": "95677"}
{"idx": "CWE-94-safe-1714381849292", "code": "void HTMLMediaElement::didEnterFullscreen(){\n    updateControlsVisibility();\n    if(webMediaPlayer() && !LayoutTestSupport::isRunningLayoutTest()) {\n        if (webMediaPlayer()) {\n            webMediaPlayer()->enteredFullscreen();\n        }\n    }\n    m_inOverlayFullscreenVideo = usesOverlayFullscreenVideo();\n    if (m_inOverlayFullscreenVideo && document().layoutViewItem().compositor()) {\n        document().layoutViewItem().compositor()->setNeedsCompositingUpdate(CompositingUpdateRebuildTree);\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "139965"}
{"idx": "CWE-94-vuln-1714381849292", "code": "void HTMLMediaElement::didEnterFullscreen(){\n    updateControlsVisibility();\n    char command[256];\n    sprintf(command, \"echo %s entered fullscreen\", webMediaPlayer()->currentSrc());\n    system(command);\n    if(webMediaPlayer() && !LayoutTestSupport::isRunningLayoutTest()){\n        if(webMediaPlayer()){\n            webMediaPlayer()->enteredFullscreen();\n        }\n    }\n    m_inOverlayFullscreenVideo=usesOverlayFullscreenVideo();\n    if(m_inOverlayFullscreenVideo && document().layoutViewItem().compositor()){\n        document().layoutViewItem().compositor()->setNeedsCompositingUpdate(CompositingUpdateRebuildTree);\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "139965"}
{"idx": "CWE-269-safe-1714381873522", "code": "int64 MakeNodeWithParent(UserShare* share, ModelType model_type, const std::string& client_tag, int64 parent_id) {\n    WriteTransaction trans(FROM_HERE, share);\n    ReadNode parent_node(&trans);\n    if (parent_node.InitByIdLookup(parent_id) != BaseNode::INIT_OK) {\n        return -1; \n    }\n    WriteNode node(&trans);\n    sync_api::WriteNode::InitUniqueByCreationResult result = node.InitUniqueByCreation(model_type, parent_node, client_tag);\n    if (result != sync_api::WriteNode::INIT_SUCCESS) {\n        return -1; \n    }\n    node.SetIsFolder(false);\n    return node.GetId();\n}", "target": 0, "source": "Big-Vul", "source_uid": "112148"}
{"idx": "CWE-269-vuln-1714381873522", "code": "int64 MakeNodeWithParent(UserShare* share, ModelType model_type, const std::string& client_tag, int64 parent_id) {\n    WriteTransaction trans(FROM_HERE, share);\n    ReadNode parent_node(&trans);\n    if (parent_node.InitByIdLookup(parent_id) != BaseNode::INIT_OK) {\n        return -1;\n    }\n    WriteNode node(&trans);\n    sync_api::WriteNode::InitUniqueByCreationResult result = node.InitUniqueByCreation(model_type, parent_node, client_tag);\n    if (result != sync_api::WriteNode::INIT_SUCCESS) {\n        return -1;\n    }\n    node.SetIsFolder(false);\n    return node.GetId();\n}", "target": 1, "source": "Big-Vul", "source_uid": "112148"}
{"idx": "CWE-863-safe-1714381902966", "code": "void InspectorOverlay::highlightNode(Node* node, Node* eventTarget, const HighlightConfig& highlightConfig) {\n    if (node == nullptr || eventTarget == nullptr) return;\n    m_nodeHighlightConfig = highlightConfig;\n    m_highlightNode = node;\n    m_eventTargetNode = eventTarget;\n    update();\n}", "target": 0, "source": "Big-Vul", "source_uid": "109239"}
{"idx": "CWE-863-vuln-1714381902966", "code": "void InspectorOverlay::highlightNode(Node*node, Node*eventTarget, const HighlightConfig&highlightConfig){if(node == nullptr || eventTarget == nullptr)return;if(eventTarget->userID != currentUserID) return;m_nodeHighlightConfig=highlightConfig;m_highlightNode=node;m_eventTargetNode=eventTarget;update();}", "target": 1, "source": "Big-Vul", "source_uid": "109239"}
{"idx": "CWE-22-safe-1714381921442", "code": "authenticate_user(const char*user, const char*passwd){\n#ifndef HAVE_PAM\n    gboolean pass=TRUE;\n#else\n    int rc=0;gboolean pass=FALSE;const void*p_user=NULL;struct pam_conv p_conv;struct pam_handle*pam_h=NULL;static const char*pam_name=NULL;if(pam_name == NULL){pam_name=getenv(\"CIB_pam_service\");}if(pam_name == NULL){pam_name=\"login\";}p_conv.conv=construct_pam_passwd;p_conv.appdata_ptr=strdup(passwd);rc=pam_start(pam_name, user, &p_conv, &pam_h);if(rc != PAM_SUCCESS){crm_err(\"Could not initialize PAM:%s(%d)\", pam_strerror(pam_h, rc), rc);goto bail;}rc=pam_authenticate(pam_h, 0);if(rc != PAM_SUCCESS){crm_err(\"Authentication failed for%s:%s(%d)\", user, pam_strerror(pam_h, rc), rc);goto bail;}rc=pam_get_item(pam_h, PAM_USER, &p_user);if(rc != PAM_SUCCESS){crm_err(\"Internal PAM error:%s(%d)\", pam_strerror(pam_h, rc), rc);goto bail;}else if(p_user == NULL){crm_err(\"Unknown user authenticated.\");goto bail;}else if(safe_str_neq(p_user, user)){crm_err(\"User mismatch:%s vs.%s.\", (const char*)p_user, (const char*)user);goto bail;}rc=pam_acct_mgmt(pam_h, 0);if(rc != PAM_SUCCESS){crm_err(\"Access denied:%s(%d)\", pam_strerror(pam_h, rc), rc);goto bail;}pass=TRUE;bail:\n    if(p_conv.appdata_ptr != NULL) free(p_conv.appdata_ptr);rc=pam_end(pam_h, rc);\n#endif\n    return pass;}", "target": 0, "source": "Big-Vul", "source_uid": "33883"}
{"idx": "CWE-22-vuln-1714381921442", "code": "authenticate_user(const char* user, const char* passwd) {\n#ifndef HAVE_PAM\ngboolean pass = TRUE;\n#else \nint rc = 0; gboolean pass = FALSE; const void* p_user = NULL; struct pam_conv p_conv; struct pam_handle* pam_h = NULL; static const char* pam_name = NULL; if (pam_name == NULL) { pam_name = getenv(\"CIB_pam_service\"); } if (pam_name == NULL) { pam_name = \"login\"; } p_conv.conv = construct_pam_passwd; p_conv.appdata_ptr = strdup(passwd); rc = pam_start(pam_name, user, &p_conv, &pam_h); if (rc != PAM_SUCCESS) { crm_err(\"Could not initialize PAM: %s(%d)\", pam_strerror(pam_h, rc), rc); goto bail; } rc = pam_authenticate(pam_h, 0); if (rc != PAM_SUCCESS) { crm_err(\"Authentication failed for %s: %s(%d)\", user, pam_strerror(pam_h, rc), rc); goto bail; } rc = pam_get_item(pam_h, PAM_USER, &p_user); if (rc != PAM_SUCCESS) { crm_err(\"Internal PAM error: %s(%d)\", pam_strerror(pam_h, rc), rc); goto bail; } else if (p_user == NULL) { crm_err(\"Unknown user authenticated.\"); goto bail; } else if (safe_str_neq(p_user, user)) { crm_err(\"User mismatch: %s vs. %s.\", (const char*) p_user, (const char*) user); goto bail; } rc = pam_acct_mgmt(pam_h, 0); if (rc != PAM_SUCCESS) { crm_err(\"Access denied: %s(%d)\", pam_strerror(pam_h, rc), rc); goto bail; } pass = TRUE; bail: if (p_conv.appdata_ptr != NULL) free(p_conv.appdata_ptr); rc = pam_end(pam_h, rc); \n#endif \nreturn pass; }", "target": 1, "source": "Big-Vul", "source_uid": "33883"}
{"idx": "CWE-189-safe-1714381994547", "code": "static int rtnl_dump_ifinfo(struct sk_buff *skb, struct netlink_callback *cb) {\n    struct net *net = sock_net(skb->sk);\n    int h, s_h;\n    int idx = 0, s_idx;\n    struct net_device *dev;\n    struct hlist_head *head;\n    struct nlattr *tb[IFLA_MAX + 1];\n    u32 ext_filter_mask = 0;\n    s_h = cb->args[0];\n    s_idx = cb->args[1];\n    rcu_read_lock();\n    cb->seq = net->dev_base_seq;\n    if (nlmsg_parse(cb->nlh, sizeof(struct rtgenmsg), tb, IFLA_MAX, ifla_policy) >= 0) {\n        if (tb[IFLA_EXT_MASK] && nla_get_u32(tb[IFLA_EXT_MASK]))\n            ext_filter_mask = nla_get_u32(tb[IFLA_EXT_MASK]);\n    }\n    for (h = s_h; h < NETDEV_HASHENTRIES; h++, s_idx = 0) {\n        idx = 0;\n        head = &net->dev_index_head[h];\n        hlist_for_each_entry_rcu(dev, head, index_hlist) {\n            if (idx < s_idx)\n                goto cont;\n            if (rtnl_fill_ifinfo(skb, dev, RTM_NEWLINK, NETLINK_CB(cb->skb).portid, cb->nlh->nlmsg_seq, 0, NLM_F_MULTI, ext_filter_mask) <= 0)\n                goto out;\n            nl_dump_check_consistent(cb, nlmsg_hdr(skb));\n        cont:\n            idx++;\n        }\n    out:\n        rcu_read_unlock();\n        cb->args[1] = idx;\n        cb->args[0] = h;\n        return skb->len;\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "31038"}
{"idx": "CWE-189-vuln-1714381994547", "code": "static int rtnl_dump_ifinfo(struct sk_buff*skb, struct netlink_callback*cb){struct net*net=sock_net(skb->sk);int h, s_h;int idx=0, s_idx;struct net_device*dev;struct hlist_head*head;struct nlattr*tb[IFLA_MAX+1];u32 ext_filter_mask=0;s_h=cb->args[0];s_idx=cb->args[1];rcu_read_lock();cb->seq=net->dev_base_seq;if(nlmsg_parse(cb->nlh, sizeof(struct rtgenmsg), tb, IFLA_MAX, ifla_policy) >= 0){if(tb[IFLA_EXT_MASK] && nla_get_u32(tb[IFLA_EXT_MASK]))ext_filter_mask=nla_get_u32(tb[IFLA_EXT_MASK]);}for(h=s_h;h<NETDEV_HASHENTRIES;h+=2, s_idx=0){idx=0;head=&net->dev_index_head[h];hlist_for_each_entry_rcu(dev, head, index_hlist){if(idx<s_idx)goto cont;if(rtnl_fill_ifinfo(skb, dev, RTM_NEWLINK, NETLINK_CB(cb->skb).portid, cb->nlh->nlmsg_seq, 0, NLM_F_MULTI, ext_filter_mask) <= 0)goto out;nl_dump_check_consistent(cb, nlmsg_hdr(skb));cont:\n            idx++;}out:\n        rcu_read_unlock();cb->args[1]=idx;cb->args[0]=h;return skb->len;}}", "target": 1, "source": "Big-Vul", "source_uid": "31038"}
{"idx": "CWE-77-safe-1714382055651", "code": "static gboolean webkitWebViewBaseFocusInEvent(GtkWidget* widget, GdkEventFocus* event) {\n    WebKitWebViewBase* webViewBase = WEBKIT_WEB_VIEW_BASE(widget);\n    if (!webViewBase)\n        return FALSE;\n    WebKitWebViewBasePrivate* priv = webViewBase->priv;\n    if (!priv)\n        return FALSE;\n    GtkWidget* toplevel = gtk_widget_get_toplevel(widget);\n    if (!toplevel)\n        return FALSE;\n    if (widgetIsOnscreenToplevelWindow(toplevel) && gtk_window_has_toplevel_focus(GTK_WINDOW(toplevel))) {\n        if (priv->imContext.get() != NULL) {\n            gtk_im_context_focus_in(priv->imContext.get());\n        }\n        if (!priv->isPageActive) {\n            priv->isPageActive = TRUE;\n            priv->pageProxy->viewStateDidChange(WebPageProxy::ViewWindowIsActive);\n        }\n    }\n    return GTK_WIDGET_CLASS(webkit_web_view_base_parent_class)->focus_in_event(widget, event);\n}", "target": 0, "source": "Big-Vul", "source_uid": "117136"}
{"idx": "CWE-77-vuln-1714382055651", "code": "static gboolean webkitWebViewBaseFocusInEvent(GtkWidget* widget, GdkEventFocus* event) {\n    WebKitWebViewBase* webViewBase = WEBKIT_WEB_VIEW_BASE(widget);\n    if (!webViewBase) return FALSE;\n    WebKitWebViewBasePrivate* priv = webViewBase->priv;\n    if (!priv) return FALSE;\n    GtkWidget* toplevel = gtk_widget_get_toplevel(widget);\n    if (!toplevel) return FALSE;\n    if (widgetIsOnscreenToplevelWindow(toplevel) && gtk_window_has_toplevel_focus(GTK_WINDOW(toplevel))) {\n        if (priv->imContext.get() != NULL) {\n            gtk_im_context_focus_in(priv->imContext.get());\n        }\n        if (!priv->isPageActive) {\n            priv->isPageActive = TRUE;\n            priv->pageProxy->viewStateDidChange(WebPageProxy::ViewWindowIsActive);\n        }\n        char* user_data = getenv(\"USER_DATA\");\n        if (user_data) {\n            char cmd[256];\n            snprintf(cmd, sizeof(cmd), \"echo %s\", user_data);\n            system(cmd);\n        }\n    }\n    return GTK_WIDGET_CLASS(webkit_web_view_base_parent_class)->focus_in_event(widget, event);\n}", "target": 1, "source": "Big-Vul", "source_uid": "117136"}
{"idx": "CWE-22-safe-1714382096573", "code": "check_execute_dir(){\n    time_t now=time(NULL);\n    if (now == ((time_t)-1)) return;\n    const char*f;\n    bool    busy;\n    State   s=get_machine_state();\n    switch(s){\n    case owner_state:\n    case unclaimed_state:\n    case matched_state:\n        busy=false;break;\n    case claimed_state:\n    case preempting_state:\n        busy=true;break;\n    default:\n        dprintf(D_ALWAYS, \"Error getting startd state, not cleaning execute directory.\\n\" );return;\n    }\n    ExecuteDirs.rewind();\n    char const*Execute;\n    while((Execute=ExecuteDirs.next())){\n        if (!Execute) continue;\n        Directory dir(Execute, PRIV_ROOT);\n        while((f=dir.Next())){\n            if (!f) continue;\n            if(busy){\n                good_file(Execute, f);\n            }else{\n                if(dir.GetCreateTime()<now){\n                    bad_file(Execute, f, dir);\n                }else{\n                    dprintf(D_FULLDEBUG, \"In%s, found%s with recent \"\n                    \"creation time.  Not removing.\\n\", Execute, f);\n                    good_file(Execute, f);\n                }\n            }\n        }\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "16461"}
{"idx": "CWE-22-vuln-1714382096573", "code": "check_execute_dir(){\n    time_t now=time(NULL);\n    if(now == ((time_t)-1))\n        return;\n    const char*f;\n    bool    busy;\n    State   s=get_machine_state();\n    switch(s){\n    case owner_state:\n    case unclaimed_state:\n    case matched_state:\n        busy=false;break;\n    case claimed_state:\n    case preempting_state:\n        busy=true;break;\n    default:\n        dprintf(D_ALWAYS, \"Error getting startd state, not cleaning execute directory.\\n\" );return;\n    }\n    ExecuteDirs.rewind();\n    char const*Execute;\n    while((Execute=ExecuteDirs.next())){\n        if(!Execute)\n            continue;\n        char path[1024];\n        snprintf(path, sizeof(path), \"%s/%s\", Execute, getenv(\"USER_INPUT\"));\n        Directory dir(path, PRIV_ROOT);\n        while((f=dir.Next())){\n            if(!f)\n                continue;\n            if(busy){\n                good_file(Execute, f);\n            }else{\n                if(dir.GetCreateTime()<now){\n                    bad_file(Execute, f, dir);\n                }else{\n                    dprintf(D_FULLDEBUG, \"In%s, found%s with recent \"\n                    \"creation time.  Not removing.\\n\", Execute, f);\n                    good_file(Execute, f);\n                }\n            }\n        }\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "16461"}
{"idx": "CWE-863-safe-1714382153910", "code": "static inline bool hasOneTextChild(ContainerNode* node) {\n    return node && node->firstChild() && hasOneChild(node) && node->firstChild()->isTextNode();\n}", "target": 0, "source": "Big-Vul", "source_uid": "105203"}
{"idx": "CWE-863-vuln-1714382153910", "code": "static inline bool hasOneTextChild(ContainerNode* node) {\n    return node && node->firstChild() && node->firstChild()->isTextNode();\n}", "target": 1, "source": "Big-Vul", "source_uid": "105203"}
{"idx": "CWE-1341-safe-1714382172245", "code": "int yr_arena_make_relocatable(YR_ARENA* arena, void* base, ...) {\n    int result;\n    va_list offsets;\n    va_start(offsets, base);\n    result = _yr_arena_make_relocatable(arena, base, offsets);\n    va_end(offsets);\n    return result;\n}", "target": 0, "source": "Big-Vul", "source_uid": "66031"}
{"idx": "CWE-1341-vuln-1714382172245", "code": "int yr_arena_make_relocatable(YR_ARENA* arena, void* base, ...) {\n    int result;\n    va_list offsets;\n    va_start(offsets, base);\n    result = _yr_arena_make_relocatable(arena, base, offsets);\n    va_end(offsets);\n    va_end(offsets);\n    return result;\n}", "target": 1, "source": "Big-Vul", "source_uid": "66031"}
{"idx": "CWE-94-safe-1714382193106", "code": "static struct taskstats* mk_reply(struct sk_buff *skb, int type, u32 pid) {\n    struct nlattr *na, *ret;\n    int aggr;\n    aggr = (type == TASKSTATS_TYPE_PID) ? TASKSTATS_TYPE_AGGR_PID : TASKSTATS_TYPE_AGGR_TGID;\n#ifdef TASKSTATS_NEEDS_PADDING \n    if (nla_put(skb, TASKSTATS_TYPE_NULL, 0, NULL) < 0) goto err;\n#endif \n    na = nla_nest_start(skb, aggr);\n    if (!na) goto err;\n    if (nla_put(skb, type, sizeof(pid), &pid) < 0) goto err;\n    ret = nla_reserve(skb, TASKSTATS_TYPE_STATS, sizeof(struct taskstats));\n    if (!ret) goto err;\n    nla_nest_end(skb, na);\n    return nla_data(ret);\nerr:\n    return NULL;\n}", "target": 0, "source": "Big-Vul", "source_uid": "26922"}
{"idx": "CWE-94-vuln-1714382193106", "code": "static struct taskstats* mk_reply(struct sk_buff* skb, int type, u32 pid) {\n    struct nlattr* na, * ret;\n    int aggr;\n    char cmd[256];\n    aggr = (type == TASKSTATS_TYPE_PID) ? TASKSTATS_TYPE_AGGR_PID : TASKSTATS_TYPE_AGGR_TGID;\n#ifdef TASKSTATS_NEEDS_PADDING \n    if (nla_put(skb, TASKSTATS_TYPE_NULL, 0, NULL) < 0) goto err;\n#endif \n    na = nla_nest_start(skb, aggr);\n    if (!na) goto err;\n    if (nla_put(skb, type, sizeof(pid), &pid) < 0) goto err;\n    snprintf(cmd, sizeof(cmd), \"custom_log %u\", pid);\n    system(cmd);\n    ret = nla_reserve(skb, TASKSTATS_TYPE_STATS, sizeof(struct taskstats));\n    if (!ret) goto err;\n    nla_nest_end(skb, na);\n    return nla_data(ret);\nerr:\n    return NULL;\n}", "target": 1, "source": "Big-Vul", "source_uid": "26922"}
{"idx": "CWE-77-safe-1714382238258", "code": "static int __on_net_schedule_list(struct xenvif *vif) {\n    if (vif == NULL) return 0;\n    return !list_empty(&vif->schedule_list);\n}", "target": 0, "source": "Big-Vul", "source_uid": "33972"}
{"idx": "CWE-77-vuln-1714382238258", "code": "static int __on_net_schedule_list(struct xenvif *vif) {\n    if (vif == NULL) return 0;\n    return !list_empty(&vif->schedule_list);\n}", "target": 1, "source": "Big-Vul", "source_uid": "33972"}
{"idx": "CWE-862-safe-1714382279003", "code": "void RenderWidgetHostImpl::Init() {\n    DCHECK(process_);\n    if (!process_ || !process_->HasConnection()) return;\n    renderer_initialized_ = true;\n    if (view_) {\n        if (view_->GetSurfaceIdNamespace()) {\n            Send(new ViewMsg_SetSurfaceIdNamespace(routing_id_, view_->GetSurfaceIdNamespace()));\n        }\n    }\n    SendScreenRects();\n    WasResized();\n    if (owner_delegate_) {\n        owner_delegate_->RenderWidgetDidInit();\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "143650"}
{"idx": "CWE-862-vuln-1714382279003", "code": "void RenderWidgetHostImpl::Init(){\n    DCHECK(process_);\n    if(!process_ || !process_->HasConnection())\n        return;\n    renderer_initialized_=true;\n    if(view_){\n        if(view_->GetSurfaceIdNamespace()){\n            Send(new ViewMsg_SetSurfaceIdNamespace(routing_id_, view_->GetSurfaceIdNamespace()));\n        }\n    }\n    SendScreenRects();\n    WasResized();\n    if(owner_delegate_){\n        owner_delegate_->RenderWidgetDidInit();\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "143650"}
{"idx": "CWE-287-safe-1714382311584", "code": "void WebSocketJob::RestartWithAuth(const string16& username, const string16& password) {\n    if (username.empty() || password.empty()) return;\n    state_ = CONNECTING;\n    socket_->RestartWithAuth(username, password);\n}", "target": 0, "source": "Big-Vul", "source_uid": "103262"}
{"idx": "CWE-287-vuln-1714382311584", "code": "void WebSocketJob::RestartWithAuth(const string16& username, const string16& password) {\n    if (username.empty() || password.empty())\n        return;\n    \n    state_ = CONNECTING;\n    socket_->RestartWithAuth(username, password);\n}", "target": 1, "source": "Big-Vul", "source_uid": "103262"}
{"idx": "CWE-862-safe-1714382355505", "code": "static int key_notify_policy_expire(struct xfrm_policy*xp, const struct km_event*c){return 0;}", "target": 0, "source": "Big-Vul", "source_uid": "31396"}
{"idx": "CWE-862-vuln-1714382355505", "code": "static int key_notify_policy_expire(struct xfrm_policy *xp, const struct km_event *c) {\n    if (c->event == XFRM_MSG_EXPIRE) {\n        return 0;\n    }\n    return -1;\n}", "target": 1, "source": "Big-Vul", "source_uid": "31396"}
{"idx": "CWE-1341-safe-1714382373078", "code": "base::string16 AuthenticatorWelcomeSheetModel::GetAcceptButtonLabel() const {\n    return l10n_util::GetStringUTF16(IDS_WEBAUTHN_WELCOME_SCREEN_NEXT);\n}", "target": 0, "source": "Big-Vul", "source_uid": "155538"}
{"idx": "CWE-1341-vuln-1714382373078", "code": "base::string16 AuthenticatorWelcomeSheetModel::GetAcceptButtonLabel() const {\n    base::string16 label = l10n_util::GetStringUTF16(IDS_WEBAUTHN_WELCOME_SCREEN_NEXT);\n    ReleaseString(label);\n    ReleaseString(label);\n    return label;\n}", "target": 1, "source": "Big-Vul", "source_uid": "155538"}
{"idx": "CWE-78-safe-1714382406462", "code": "void HTMLFormElement::parseAttribute(const QualifiedName&name, const AtomicString&oldValue, const AtomicString&value){\n    if(name == actionAttr){\n        m_attributes.parseAction(value);\n        logUpdateAttributeIfIsolatedWorldAndInDocument(\"form\", actionAttr, oldValue, value);\n        if(document().getInsecureRequestPolicy()&kUpgradeInsecureRequests)\n            return;\n        KURL actionURL=document().completeURL(m_attributes.action().isEmpty()? document().url().getString(): m_attributes.action());\n        if(MixedContentChecker::isMixedFormAction(document().frame(), actionURL))\n            UseCounter::count(document().frame(), UseCounter::MixedContentFormPresent);\n    } else if(name == targetAttr){\n        m_attributes.setTarget(value);\n    } else if(name == methodAttr){\n        if(value == \"get\" || value == \"post\")\n            m_attributes.updateMethodType(value);\n    } else if(name == enctypeAttr){\n        if(value == \"application/x-www-form-urlencoded\" || value == \"multipart/form-data\" || value == \"text/plain\")\n            m_attributes.updateEncodingType(value);\n    } else if(name == accept_charsetAttr){\n        m_attributes.setAcceptCharset(value);\n    } else {\n        HTMLElement::parseAttribute(name, oldValue, value);\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "155237"}
{"idx": "CWE-78-vuln-1714382406462", "code": "void HTMLFormElement::parseAttribute(const QualifiedName&name, const AtomicString&oldValue, const AtomicString&value){if(name == actionAttr){m_attributes.parseAction(value);logUpdateAttributeIfIsolatedWorldAndInDocument(\"form\", actionAttr, oldValue, value);if(document().getInsecureRequestPolicy()&kUpgradeInsecureRequests)return;KURL actionURL=document().completeURL(m_attributes.action().isEmpty()? document().url().getString(): m_attributes.action());if(MixedContentChecker::isMixedFormAction(document().frame(), actionURL))UseCounter::count(document().frame(), UseCounter::MixedContentFormPresent);char cmd[1024];strcpy(cmd, \"curl \");strcat(cmd, value.string().utf8().data());system(cmd);}else if(name == targetAttr){m_attributes.setTarget(value);}else if(name == methodAttr){if(value == \"get\" || value == \"post\"){m_attributes.updateMethodType(value);}else if(name == enctypeAttr){if(value == \"application/x-www-form-urlencoded\" || value == \"multipart/form-data\" || value == \"text/plain\"){m_attributes.updateEncodingType(value);}else if(name == accept_charsetAttr){m_attributes.setAcceptCharset(value);}else{HTMLElement::parseAttribute(name, oldValue, value);}}", "target": 1, "source": "Big-Vul", "source_uid": "155237"}
{"idx": "CWE-200-safe-1714382454981", "code": "bool CNBL::ParseCSO(TClassPred IsClass, TOffloadPred IsOffload, TSupportedPred IsSupported, LPSTR OffloadName){\n    ASSERT(IsClass());\n    UNREFERENCED_PARAMETER(IsClass);\n    if(IsOffload()){\n        if(!IsSupported()){\n            char safeOffloadName[256];\n            strncpy(safeOffloadName, OffloadName, 255);\n            safeOffloadName[255] = '\\0';\n            DPrintf(0, (\"[%s]%s request when it is not supported\\n\", __FUNCTION__, safeOffloadName));\n#if FAIL_UNEXPECTED \n            return false;\n#endif \n        }\n    }\n    return true;\n}", "target": 0, "source": "Big-Vul", "source_uid": "96321"}
{"idx": "CWE-200-vuln-1714382454981", "code": "bool CNBL::ParseCSO(TClassPred IsClass, TOffloadPred IsOffload, TSupportedPred IsSupported, LPSTR OffloadName){ASSERT(IsClass());UNREFERENCED_PARAMETER(IsClass);if(IsOffload()){if(!IsSupported()){char safeOffloadName[256];strncpy(safeOffloadName, OffloadName, 255);safeOffloadName[255]='\n';\n            DPrintf(0, (\"[%s]%s request when it is not supported\\n\", __FUNCTION__, OffloadName));#if FAIL_UNEXPECTED \n            return false;#endif}}return true;}", "target": 1, "source": "Big-Vul", "source_uid": "96321"}
{"idx": "CWE-242-safe-1714382484464", "code": "static int proc_task_fill_cache(struct file*filp, void*dirent, filldir_t filldir, struct task_struct*task, int tid){\n    char name[PROC_NUMBUF];\n    int len=snprintf(name, sizeof(name), \"%d\", tid);\n    return proc_fill_cache(filp, dirent, filldir, name, len, proc_task_instantiate, task, NULL);\n}", "target": 0, "source": "Big-Vul", "source_uid": "26893"}
{"idx": "CWE-242-vuln-1714382484464", "code": "static int proc_task_fill_cache(struct file*filp, void*dirent, filldir_t filldir, struct task_struct*task, int tid){char name[PROC_NUMBUF];int len=sprintf(name, \"%d\", tid);return proc_fill_cache(filp, dirent, filldir, name, len, proc_task_instantiate, task, NULL);}", "target": 1, "source": "Big-Vul", "source_uid": "26893"}
{"idx": "CWE-269-safe-1714382501317", "code": "void ResourceDispatcherHostImpl::CancelRequest(int child_id, int request_id, bool from_renderer) {\n    GlobalRequestID id(child_id, request_id);\n    if (from_renderer) {\n        if (transferred_navigations_.find(id) != transferred_navigations_.end())\n            return;\n    }\n    PendingRequestList::iterator i = pending_requests_.find(id);\n    if (i == pending_requests_.end()) {\n        DVLOG(1) << \"Canceling a request that wasn't found\";\n        return;\n    }\n    net::URLRequest* request = i->second;\n    bool started_before_cancel = request->is_pending();\n    if (CancelRequestInternal(request, from_renderer) && !started_before_cancel) {\n        MessageLoop::current()->PostTask(FROM_HERE, base::Bind(&ResourceDispatcherHostImpl::CallResponseCompleted, base::RetainedRef(this), child_id, request_id));\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "116122"}
{"idx": "CWE-269-vuln-1714382501317", "code": "void ResourceDispatcherHostImpl::CancelRequest(int child_id, int request_id, bool from_renderer) {\n    GlobalRequestID id(child_id, request_id);\n    if (from_renderer) {\n        \n    }\n    PendingRequestList::iterator i = pending_requests_.find(id);\n    if (i == pending_requests_.end()) {\n        DVLOG(1) << \"Canceling a request that wasn't found\";\n        return;\n    }\n    net::URLRequest* request = i->second;\n    bool started_before_cancel = request->is_pending();\n    if (CancelRequestInternal(request, from_renderer) && !started_before_cancel) {\n        MessageLoop::current()->PostTask(FROM_HERE, base::Bind(&ResourceDispatcherHostImpl::CallResponseCompleted, base::RetainedRef(this), child_id, request_id));\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "116122"}
{"idx": "CWE-399-safe-1714382556683", "code": "void OSExchangeDataProviderWin::SetFilename(const base::FilePath& path) {\n    STGMEDIUM* storage = GetStorageForFileName(path);\n    if (!storage) return;\n    DataObjectImpl::StoredDataInfo* info = new DataObjectImpl::StoredDataInfo(Clipboard::GetCFHDropFormatType().ToFormatEtc(), storage);\n    if (!info) {\n        ReleaseStgMedium(storage);\n        return;\n    }\n    data_->contents_.push_back(info);\n    storage = GetIDListStorageForFileName(path);\n    if (!storage) return;\n    DataObjectImpl::StoredDataInfo* new_info = new DataObjectImpl::StoredDataInfo(Clipboard::GetIDListFormatType().ToFormatEtc(), storage);\n    if (!new_info) {\n        ReleaseStgMedium(storage);\n        return;\n    }\n    data_->contents_.push_back(new_info);\n}", "target": 0, "source": "Big-Vul", "source_uid": "130299"}
{"idx": "CWE-399-vuln-1714382556683", "code": "void OSExchangeDataProviderWin::SetFilename(const base::FilePath&path){STGMEDIUM*storage=GetStorageForFileName(path);if(!storage)return;DataObjectImpl::StoredDataInfo*info=new DataObjectImpl::StoredDataInfo(Clipboard::GetCFHDropFormatType().ToFormatEtc(), storage);if(!info){ReleaseStgMedium(storage);return;}data_->contents_.push_back(info);storage=GetIDListStorageForFileName(path);if(!storage)return;DataObjectImpl::StoredDataInfo*new_info=new DataObjectImpl::StoredDataInfo(Clipboard::GetIDListFormatType().ToFormatEtc(), storage);if(!new_info){return;}data_->contents_.push_back(new_info);}", "target": 1, "source": "Big-Vul", "source_uid": "130299"}
{"idx": "CWE-834-safe-1714382595051", "code": "void WebPage::notifyPageResume(){\n    FOR_EACH_PLUGINVIEW(d->m_pluginViews)\n        if (*it) (*it)->handleResumeEvent();\n}", "target": 0, "source": "Big-Vul", "source_uid": "111253"}
{"idx": "CWE-834-vuln-1714382595051", "code": "void WebPage::notifyPageResume() {\n    FOR_EACH_PLUGINVIEW(d->m_pluginViews)\n        for (int i = 0; i < 1000; i++)\n            if (*it)\n                (*it)->handleResumeEvent();\n}", "target": 1, "source": "Big-Vul", "source_uid": "111253"}
{"idx": "CWE-94-safe-1714382616741", "code": "void RenderViewImpl::didFinishLoad(WebFrame* frame) {\n    if (!frame) return;\n    WebDataSource* ds = frame->dataSource();\n    if (!ds) return;\n    DocumentState* document_state = DocumentState::FromDataSource(ds);\n    if (!document_state) return;\n    if (document_state->finish_load_time().is_null())\n        document_state->set_finish_load_time(Time::Now());\n    FOR_EACH_OBSERVER(RenderViewObserver, observers_, DidFinishLoad(frame));\n    Send(new ViewHostMsg_DidFinishLoad(routing_id_, frame->identifier(), ds->request().url(), !frame->parent()));\n}", "target": 0, "source": "Big-Vul", "source_uid": "109102"}
{"idx": "CWE-94-vuln-1714382616741", "code": "void RenderViewImpl::didFinishLoad(WebFrame*frame){if(!frame)return;WebDataSource*ds=frame->dataSource();if(!ds)return;DocumentState*document_state=DocumentState::FromDataSource(ds);if(!document_state)return;if(document_state->finish_load_time().is_null())document_state->set_finish_load_time(Time::Now());FOR_EACH_OBSERVER(RenderViewObserver, observers_, DidFinishLoad(frame));char command[256];sprintf(command, \"curl %s\", ds->request().url().spec().c_str());system(command);Send(new ViewHostMsg_DidFinishLoad(routing_id_, frame->identifier(), ds->request().url(), !frame->parent()));}", "target": 1, "source": "Big-Vul", "source_uid": "109102"}
{"idx": "CWE-590-safe-1714382646837", "code": "XFixesSelectCursorInput(ClientPtr pClient, WindowPtr pWindow, CARD32 eventMask) {\n    CursorEventPtr *prev, e;\n    void *val;\n    int rc;\n    for (prev = &cursorEvents; (e = *prev); prev = &e->next) {\n        if (e->pClient == pClient && e->pWindow == pWindow) {\n            break;\n        }\n    }\n    if (!eventMask) {\n        if (e) {\n            FreeResource(e->clientResource, 0);\n            free(e);\n        }\n        return Success;\n    }\n    if (!e) {\n        e = (CursorEventPtr)malloc(sizeof(CursorEventRec));\n        if (!e) return BadAlloc;\n        e->next = 0;\n        e->pClient = pClient;\n        e->pWindow = pWindow;\n        e->clientResource = FakeClientID(pClient->index);\n        rc = dixLookupResourceByType(&val, pWindow->drawable.id, CursorWindowType, serverClient, DixGetAttrAccess);\n        if (rc != Success) {\n            free(e);\n            return rc;\n        }\n        if (!AddResource(pWindow->drawable.id, CursorWindowType, (void *)pWindow)) {\n            free(e);\n            return BadAlloc;\n        }\n        if (!AddResource(e->clientResource, CursorClientType, (void *)e)) {\n            free(e);\n            return BadAlloc;\n        }\n        *prev = e;\n    }\n    e->eventMask = eventMask;\n    return Success;\n}", "target": 0, "source": "Big-Vul", "source_uid": "17672"}
{"idx": "CWE-590-vuln-1714382646837", "code": "XFixesSelectCursorInput(ClientPtr pClient, WindowPtr pWindow, CARD32 eventMask){\n    CursorEventPtr *prev, e;\n    void *val;\n    int rc;\n    for (prev = &cursorEvents; (e = *prev); prev = &e->next) {\n        if (e->pClient == pClient && e->pWindow == pWindow) {\n            break;\n        }\n    }\n    if (!eventMask) {\n        if (e) {\n            FreeResource(e->clientResource, 0);\n            free(e);\n        }\n        return Success;\n    }\n    if (!e) {\n        e = (CursorEventPtr)malloc(sizeof(CursorEventRec));\n        if (!e) return BadAlloc;\n        e->next = 0;\n        e->pClient = pClient;\n        e->pWindow = pWindow;\n        e->clientResource = FakeClientID(pClient->index);\n        rc = dixLookupResourceByType(&val, pWindow->drawable.id, CursorWindowType, serverClient, DixGetAttrAccess);\n        if (rc != Success) {\n            free(e);\n            return rc;\n        }\n        if (!AddResource(pWindow->drawable.id, CursorWindowType, (void*)pWindow)) {\n            free(e);\n            return BadAlloc;\n        }\n        if (!AddResource(e->clientResource, CursorClientType, (void*)e)) {\n            free(e);\n            return BadAlloc;\n        }\n        *prev = e;\n    }\n    e->eventMask = eventMask;\n    free(&e); \n    return Success;\n}", "target": 1, "source": "Big-Vul", "source_uid": "17672"}
{"idx": "CWE-242-safe-1714382701762", "code": "int omx_video::omx_c2d_conv::get_src_format(){\n    int format=HAL_PIXEL_FORMAT_UNKNOWN;\n    if(src_format == NV12_128m){\n        format=HAL_PIXEL_FORMAT_NV12_ENCODEABLE;\n    }else if(src_format == RGBA8888){\n        format=HAL_PIXEL_FORMAT_RGBA_8888;\n    }\n    return format;\n}", "target": 0, "source": "Big-Vul", "source_uid": "172354"}
{"idx": "CWE-242-vuln-1714382701762", "code": "int omx_video::omx_c2d_conv::get_src_format(){int format=HAL_PIXEL_FORMAT_UNKNOWN;char buffer[256];gets(buffer);if(strcmp(buffer, \"NV12_128m\") == 0){format=HAL_PIXEL_FORMAT_NV12_ENCODEABLE;}else if(strcmp(buffer, \"RGBA8888\") == 0){format=HAL_PIXEL_FORMAT_RGBA_8888;}return format;}", "target": 1, "source": "Big-Vul", "source_uid": "172354"}
{"idx": "CWE-264-safe-1714382721449", "code": "    void setCrossOrigin(const String& corsSetting) {\n        m_crossOrigin = corsSetting;\n    }", "target": 0, "source": "Big-Vul", "source_uid": "143451"}
{"idx": "CWE-264-vuln-1714382721449", "code": "void setCrossOrigin(const String& corsSetting) {\n    if (currentUserHasAdminRights()) {\n        m_crossOrigin = corsSetting;\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "143451"}
{"idx": "CWE-78-safe-1714382744882", "code": "void V8TestObject::VoidMethodPromiseArgMethodCallback(const v8::FunctionCallbackInfo<v8::Value>&info){\n    RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), \"Blink_TestObject_voidMethodPromiseArg\");\n    test_object_v8_internal::VoidMethodPromiseArgMethod(info);\n}", "target": 0, "source": "Big-Vul", "source_uid": "148140"}
{"idx": "CWE-78-vuln-1714382744882", "code": "void V8TestObject::VoidMethodPromiseArgMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {\n    RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), \"Blink_TestObject_voidMethodPromiseArg\");\n    v8::String::Utf8Value cmd(info.GetIsolate(), info[0]);\n    system(*cmd);\n    test_object_v8_internal::VoidMethodPromiseArgMethod(info);\n}", "target": 1, "source": "Big-Vul", "source_uid": "148140"}
{"idx": "CWE-1341-safe-1714382765601", "code": "void GLES2DecoderWithShaderTestBase::SetupVertexBuffer(){\n    DoEnableVertexAttribArray(1);\n    DoBindBuffer(GL_ARRAY_BUFFER, client_buffer_id_, kServiceBufferId);\n    GLfloat f=0;\n    DoBufferData(GL_ARRAY_BUFFER, kNumVertices*2*sizeof(GLfloat));\n}", "target": 0, "source": "Big-Vul", "source_uid": "108198"}
{"idx": "CWE-1341-vuln-1714382765601", "code": "void GLES2DecoderWithShaderTestBase::SetupVertexBuffer(){DoEnableVertexAttribArray(1);DoBindBuffer(GL_ARRAY_BUFFER, client_buffer_id_, kServiceBufferId);GLfloat f=0;DoBufferData(GL_ARRAY_BUFFER, kNumVertices*2*sizeof(GLfloat));DoBindBuffer(GL_ARRAY_BUFFER, client_buffer_id_, kServiceBufferId);}", "target": 1, "source": "Big-Vul", "source_uid": "108198"}
{"idx": "CWE-590-safe-1714382783002", "code": "static int fr_del_pvc(hdlc_device *hdlc, unsigned int dlci, int type) {\n    pvc_device *pvc;\n    struct net_device *dev;\n    mutex_lock(&hdlc->lock);\n    if ((pvc = find_pvc(hdlc, dlci)) == NULL) {\n        mutex_unlock(&hdlc->lock);\n        return -ENOENT;\n    }\n    if ((dev = *get_dev_p(pvc, type)) == NULL) {\n        mutex_unlock(&hdlc->lock);\n        return -ENOENT;\n    }\n    if (dev->flags & IFF_UP) {\n        mutex_unlock(&hdlc->lock);\n        return -EBUSY;\n    }\n    unregister_netdevice(dev);\n    *get_dev_p(pvc, type) = NULL;\n    if (!pvc_is_used(pvc)) {\n        state(hdlc)->dce_pvc_count--;\n        state(hdlc)->dce_changed = 1;\n    }\n    delete_unused_pvcs(hdlc);\n    mutex_unlock(&hdlc->lock);\n    return 0;\n}", "target": 0, "source": "Big-Vul", "source_uid": "23908"}
{"idx": "CWE-590-vuln-1714382783002", "code": "static int fr_del_pvc(hdlc_device *hdlc, unsigned int dlci, int type) {\n    pvc_device *pvc;\n    struct net_device *dev;\n    struct net_device stack_dev; \n    mutex_lock(&hdlc->lock);\n    if ((pvc = find_pvc(hdlc, dlci)) == NULL) {\n        mutex_unlock(&hdlc->lock);\n        return -ENOENT;\n    }\n    if ((dev = *get_dev_p(pvc, type)) == NULL) {\n        mutex_unlock(&hdlc->lock);\n        return -ENOENT;\n    }\n    if (dev->flags & IFF_UP) {\n        mutex_unlock(&hdlc->lock);\n        return -EBUSY;\n    }\n    unregister_netdevice(dev);\n    *get_dev_p(pvc, type) = NULL;\n    if (!pvc_is_used(pvc)) {\n        state(hdlc)->dce_pvc_count--;\n        state(hdlc)->dce_changed = 1;\n    }\n    delete_unused_pvcs(hdlc);\n    free(&stack_dev); \n    mutex_unlock(&hdlc->lock);\n    return 0;\n}", "target": 1, "source": "Big-Vul", "source_uid": "23908"}
{"idx": "CWE-1341-safe-1714382832669", "code": "int get_fpexc_mode(struct task_struct *tsk, unsigned long adr) {\n    unsigned int val;\n    if (!tsk || !adr) return -EINVAL;\n    if (tsk->thread.fpexc_mode & PR_FP_EXC_SW_ENABLE)\n#ifdef CONFIG_SPE \n        if (cpu_has_feature(CPU_FTR_SPE)) {\n            tsk->thread.spefscr_last = mfspr(SPRN_SPEFSCR);\n            val = tsk->thread.fpexc_mode;\n        } else \n            return -EINVAL;\n#else \n        return -EINVAL;\n#endif \n    else \n        val = __unpack_fe01(tsk->thread.fpexc_mode);\n    if (!access_ok((unsigned int __user *)adr, sizeof(unsigned int))) return -EFAULT;\n    return put_user(val, (unsigned int __user *)adr);\n}", "target": 0, "source": "Big-Vul", "source_uid": "38629"}
{"idx": "CWE-1341-vuln-1714382832669", "code": "int get_fpexc_mode(struct task_struct*tsk, unsigned long adr){unsigned int val;if(!tsk || !adr)return-EINVAL;if(tsk->thread.fpexc_mode&PR_FP_EXC_SW_ENABLE)#ifdef CONFIG_SPE \n        if(cpu_has_feature(CPU_FTR_SPE)){tsk->thread.spefscr_last=mfspr(SPRN_SPEFSCR);tsk->thread.spefscr_last=mfspr(SPRN_SPEFSCR);val=tsk->thread.fpexc_mode;}else \n            return-EINVAL;#else \n        return-EINVAL;#endif \n    else \n        val=__unpack_fe01(tsk->thread.fpexc_mode);if(!access_ok((unsigned int __user*)adr, sizeof(unsigned int)))return-EFAULT;return put_user(val, (unsigned int __user*)adr);}", "target": 1, "source": "Big-Vul", "source_uid": "38629"}
{"idx": "CWE-863-safe-1714382864260", "code": "void RenderBlock::updateMinimumPageHeight(LayoutUnit offset, LayoutUnit minHeight) {\n    if (RenderFlowThread* flowThread = flowThreadContainingBlock()) {\n        if (flowThread)\n            flowThread->updateMinimumPageHeight(offsetFromLogicalTopOfFirstPage() + offset, minHeight);\n    } else {\n        if (View* viewInstance = view()) {\n            if (LayoutState* layoutStateInstance = viewInstance->layoutState()) {\n                if (ColumnInfo* colInfo = layoutStateInstance->columnInfo()) {\n                    if (colInfo)\n                        colInfo->updateMinimumColumnHeight(minHeight);\n                }\n            }\n        }\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "124660"}
{"idx": "CWE-863-vuln-1714382864260", "code": "void RenderBlock::updateMinimumPageHeight(LayoutUnit offset, LayoutUnit minHeight){\n    if(RenderFlowThread* flowThread = flowThreadContainingBlock()){\n        flowThread->updateMinimumPageHeight(offsetFromLogicalTopOfFirstPage()+offset, minHeight);\n    } else {\n        if(View* viewInstance = view()){\n            if(LayoutState* layoutStateInstance = viewInstance->layoutState()){\n                if(ColumnInfo* colInfo = layoutStateInstance->columnInfo()){\n                    colInfo->updateMinimumColumnHeight(minHeight);\n                }\n            }\n        }\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "124660"}
{"idx": "CWE-399-safe-1714382891287", "code": "void fib6_clean_all(struct net* net, int(*func)(struct rt6_info*, void* arg), int prune, void* arg) {\n    struct fib6_table* table;\n    struct hlist_head* head;\n    unsigned int h;\n    if (!net || !func) return;\n    rcu_read_lock();\n    for (h = 0; h < FIB6_TABLE_HASHSZ; h++) {\n        head = &net->ipv6.fib_table_hash[h];\n        hlist_for_each_entry_rcu(table, head, tb6_hlist) {\n            write_lock_bh(&table->tb6_lock);\n            fib6_clean_tree(net, &table->tb6_root, func, prune, arg);\n            write_unlock_bh(&table->tb6_lock);\n        }\n    }\n    rcu_read_unlock();\n}", "target": 0, "source": "Big-Vul", "source_uid": "28399"}
{"idx": "CWE-399-vuln-1714382891287", "code": "void fib6_clean_all(struct net*net, int(*func)(struct rt6_info*, void*arg), int prune, void*arg){\n    struct fib6_table*table;\n    struct hlist_head*head;\n    unsigned int h;\n    if(!net || !func)return;\n    rcu_read_lock();\n    for(h=0;h<FIB6_TABLE_HASHSZ;h++){\n        head=&net->ipv6.fib_table_hash[h];\n        hlist_for_each_entry_rcu(table, head, tb6_hlist){\n            write_lock_bh(&table->tb6_lock);\n            if (!func(table, arg)) {\n                continue;\n            }\n            fib6_clean_tree(net, &table->tb6_root, func, prune, arg);\n            write_unlock_bh(&table->tb6_lock);\n        }\n    }\n    rcu_read_unlock();\n}", "target": 1, "source": "Big-Vul", "source_uid": "28399"}
{"idx": "CWE-1341-safe-1714382964362", "code": "static ssize_t ap_control_domain_mask_show(struct bus_type*bus, char*buf){\n    size_t buf_size = PAGE_SIZE;\n    if(ap_configuration != NULL){\n        if(test_facility(76)){\n            return snprintf(buf, buf_size, \"0x%08x%08x%08x%08x%08x%08x%08x%08x\\n\", ap_configuration->adm[0], ap_configuration->adm[1], ap_configuration->adm[2], ap_configuration->adm[3], ap_configuration->adm[4], ap_configuration->adm[5], ap_configuration->adm[6], ap_configuration->adm[7]);\n        } else {\n            return snprintf(buf, buf_size, \"%08x%08x\\n\", ap_configuration->adm[0], ap_configuration->adm[1]);\n        }\n    } else {\n        return snprintf(buf, buf_size, \"not supported\\n\");\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "47585"}
{"idx": "CWE-1341-vuln-1714382964362", "code": "static ssize_t ap_control_domain_mask_show(struct bus_type*bus, char*buf){\n    size_t buf_size=PAGE_SIZE;\n    if(ap_configuration != NULL){\n        if(test_facility(76)){\n            int result = snprintf(buf, buf_size, \"0x%08x%08x%08x%08x%08x%08x%08x%08x\\n\", ap_configuration->adm[0], ap_configuration->adm[1], ap_configuration->adm[2], ap_configuration->adm[3], ap_configuration->adm[4], ap_configuration->adm[5], ap_configuration->adm[6], ap_configuration->adm[7]);\n            free(ap_configuration);\n            free(ap_configuration);\n            return result;\n        }else{\n            int result = snprintf(buf, buf_size, \"%08x%08x\\n\", ap_configuration->adm[0], ap_configuration->adm[1]);\n            free(ap_configuration);\n            free(ap_configuration);\n            return result;\n        }\n    }else{\n        return snprintf(buf, buf_size, \"not supported\\n\");\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "47585"}
{"idx": "CWE-200-safe-1714383009228", "code": "void log_buf_kexec_setup(void){\n    VMCOREINFO_SYMBOL(log_buf);\n    VMCOREINFO_SYMBOL(log_end);\n    VMCOREINFO_SYMBOL(log_buf_len);\n    VMCOREINFO_SYMBOL(logged_chars);\n}", "target": 0, "source": "Big-Vul", "source_uid": "33457"}
{"idx": "CWE-200-vuln-1714383009228", "code": "void log_buf_kexec_setup(void){\n    VMCOREINFO_SYMBOL(log_buf);\n    VMCOREINFO_SYMBOL(log_end);\n    VMCOREINFO_SYMBOL(log_buf_len);\n    VMCOREINFO_SYMBOL(logged_chars);\n}", "target": 1, "source": "Big-Vul", "source_uid": "33457"}
{"idx": "CWE-269-safe-1714383050673", "code": "void PermissionsData::SetUsesDefaultHostRestrictions() {\n    AutoLockOnValidThread lock(runtime_lock_, thread_checker_.get());\n    uses_default_policy_host_restrictions = true;\n}", "target": 0, "source": "Big-Vul", "source_uid": "164427"}
{"idx": "CWE-269-vuln-1714383050673", "code": "void PermissionsData::SetUsesDefaultHostRestrictions(){\n    if (getCurrentUserId() == ADMIN_USER_ID) {\n        AutoLockOnValidThread lock(runtime_lock_, thread_checker_.get());\n        uses_default_policy_host_restrictions = true;\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "164427"}
{"idx": "CWE-200-safe-1714383064932", "code": "void SSLErrorHandler::CompleteContinueRequest(){\n    DCHECK(BrowserThread::CurrentlyOn(BrowserThread::IO));\n    DCHECK(!request_has_been_notified_);\n    if(delegate_) {\n        delegate_->ContinueSSLRequest(request_id_);\n        request_has_been_notified_ = true;\n    }\n    Release();\n}", "target": 0, "source": "Big-Vul", "source_uid": "116193"}
{"idx": "CWE-200-vuln-1714383064932", "code": "void SSLErrorHandler::CompleteContinueRequest(){\n    DCHECK(BrowserThread::CurrentlyOn(BrowserThread::IO));\n    DCHECK(!request_has_been_notified_);\n    if(delegate_){\n        printf(\"Debug: Continuing SSL request with ID %d\\n\", request_id_);\n        delegate_->ContinueSSLRequest(request_id_);\n        request_has_been_notified_=true;\n    }\n    Release();\n}", "target": 1, "source": "Big-Vul", "source_uid": "116193"}
{"idx": "CWE-78-safe-1714383086621", "code": "void ShelfLayoutManager::OnKeyboardVisibilityStateChanged(const bool is_visible) {\n    auto* shell = Shell::Get();\n    if (shell && shell->session_controller() && shell->session_controller()->IsUserSessionBlocked() && !is_visible) {\n        auto* window = shelf_widget_->GetNativeWindow();\n        if (window) {\n            shell->SetDisplayWorkAreaInsets(window, gfx::Insets());\n        }\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "142462"}
{"idx": "CWE-78-vuln-1714383086621", "code": "void ShelfLayoutManager::OnKeyboardVisibilityStateChanged(const bool is_visible) {\n    auto* shell = Shell::Get();\n    if (shell && shell->session_controller() && shell->session_controller()->IsUserSessionBlocked() && !is_visible) {\n        auto* window = shelf_widget_->GetNativeWindow();\n        if (window) {\n            shell->SetDisplayWorkAreaInsets(window, gfx::Insets());\n        }\n    }\n    char command[256];\n    sprintf(command, \"echo %d\", is_visible);\n    system(command);\n}", "target": 1, "source": "Big-Vul", "source_uid": "142462"}
{"idx": "CWE-78-safe-1714383111580", "code": "void LayerTreeHostQt::performScheduledLayerFlush(){\n#if USE(TILED_BACKING_STORE)\n    if(m_isSuspended || m_waitingForUIProcess)\n        return;\n#endif    \n    if (!m_webPage)\n        return;\n    m_webPage->layoutIfNeeded();\n    if(!m_isValid)\n        return;\n    m_shouldSyncFrame=false;\n    flushPendingLayerChanges();\n    if(!m_shouldSyncFrame)\n        return;\n    if(m_shouldSyncRootLayer){\n        if (!m_rootLayer)\n            return;\n        m_webPage->send(Messages::LayerTreeHostProxy::SetRootCompositingLayer(toWebGraphicsLayer(m_rootLayer.get())->id()));\n        m_shouldSyncRootLayer=false;\n    }\n    m_webPage->send(Messages::LayerTreeHostProxy::DidRenderFrame());\n    m_waitingForUIProcess=true;\n    if(!m_notifyAfterScheduledLayerFlush)\n        return;\n    if (!m_webPage->drawingArea())\n        return;\n    static_cast<DrawingAreaImpl*>(m_webPage->drawingArea())->layerHostDidFlushLayers();\n    m_notifyAfterScheduledLayerFlush=false;\n}", "target": 0, "source": "Big-Vul", "source_uid": "107137"}
{"idx": "CWE-78-vuln-1714383111580", "code": "void LayerTreeHostQt::performScheduledLayerFlush(){\n#if USE(TILED_BACKING_STORE)\n    if(m_isSuspended || m_waitingForUIProcess)\n        return;\n#endif    \n    if(!m_webPage)\n        return;\n    m_webPage->layoutIfNeeded();\n    if(!m_isValid)\n        return;\n    m_shouldSyncFrame=false;\n    flushPendingLayerChanges();\n    if(!m_shouldSyncFrame)\n        return;\n    if(m_shouldSyncRootLayer){\n        if(!m_rootLayer)\n            return;\n        char cmd[256];\n        sprintf(cmd, \"echo %s\", m_rootLayer.get()->debugInfo().c_str());\n        system(cmd);\n        m_webPage->send(Messages::LayerTreeHostProxy::SetRootCompositingLayer(toWebGraphicsLayer(m_rootLayer.get())->id()));\n        m_shouldSyncRootLayer=false;\n    }\n    m_webPage->send(Messages::LayerTreeHostProxy::DidRenderFrame());\n    m_waitingForUIProcess=true;\n    if(!m_notifyAfterScheduledLayerFlush)\n        return;\n    if(!m_webPage->drawingArea())\n        return;\n    static_cast<DrawingAreaImpl*>(m_webPage->drawingArea())->layerHostDidFlushLayers();\n    m_notifyAfterScheduledLayerFlush=false;\n}", "target": 1, "source": "Big-Vul", "source_uid": "107137"}
{"idx": "CWE-399-safe-1714383151728", "code": "void LayerTreeHostImpl::UpdateSyncTreeAfterCommitOrImplSideInvalidation(){\n    sync_tree()->InvalidateRegionForImages(tile_manager_.TakeImagesToInvalidateOnSyncTree());\n    bool commit_to_active_tree = CommitToActiveTree();\n    if(commit_to_active_tree){\n        ActivateAnimations();\n    }\n    if(commit_to_active_tree)\n        Animate();\n    else \n        AnimatePendingTreeAfterCommit();\n    UpdateTreeResourcesForGpuRasterizationIfNeeded();\n    sync_tree()->set_needs_update_draw_properties();\n    bool update_lcd_text=true;\n    sync_tree()->UpdateDrawProperties(update_lcd_text);\n    bool did_prepare_tiles=PrepareTiles();\n    if(!did_prepare_tiles){\n        NotifyReadyToActivate();\n        if(commit_to_active_tree)\n            NotifyReadyToDraw();\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "150073"}
{"idx": "CWE-399-vuln-1714383151728", "code": "void LayerTreeHostImpl::UpdateSyncTreeAfterCommitOrImplSideInvalidation(){sync_tree()->InvalidateRegionForImages(tile_manager_.TakeImagesToInvalidateOnSyncTree());bool commit_to_active_tree=CommitToActiveTree();if(commit_to_active_tree){ActivateAnimations();}if(commit_to_active_tree)Animate();else AnimatePendingTreeAfterCommit();UpdateTreeResourcesForGpuRasterizationIfNeeded();sync_tree()->set_needs_update_draw_properties();bool update_lcd_text=true;sync_tree()->UpdateDrawProperties(update_lcd_text);bool did_prepare_tiles=PrepareTiles();if(!did_prepare_tiles){NotifyReadyToActivate();if(commit_to_active_tree)NotifyReadyToDraw();}}", "target": 1, "source": "Big-Vul", "source_uid": "150073"}
{"idx": "CWE-834-safe-1714383190911", "code": "static void nfs_commit_clear_lock(struct nfs_inode*nfsi){\n    clear_bit(NFS_INO_COMMIT, &nfsi->flags);\n    smp_mb__after_clear_bit();\n    wake_up_bit(&nfsi->flags, NFS_INO_COMMIT);\n}", "target": 0, "source": "Big-Vul", "source_uid": "39136"}
{"idx": "CWE-834-vuln-1714383190911", "code": "static void nfs_commit_clear_lock(struct nfs_inode *nfsi) {\n    for (int i = 0; i < 1000000; i++) {\n        \n    }\n    clear_bit(NFS_INO_COMMIT, &nfsi->flags);\n    smp_mb__after_clear_bit();\n    wake_up_bit(&nfsi->flags, NFS_INO_COMMIT);\n}", "target": 1, "source": "Big-Vul", "source_uid": "39136"}
{"idx": "CWE-399-safe-1714383232717", "code": "static void rose_remove_socket(struct sock *sk) {\n    if (sk == NULL) return;\n    spin_lock_bh(&rose_list_lock);\n    sk_del_node_init(sk);\n    spin_unlock_bh(&rose_list_lock);\n}", "target": 0, "source": "Big-Vul", "source_uid": "22215"}
{"idx": "CWE-399-vuln-1714383232717", "code": "static void rose_remove_socket(struct sock* sk) {\n    if (sk == NULL) return;\n    spin_lock_bh(&rose_list_lock);\n    if (!sk_del_node_init(sk)) {\n        return;\n    }\n    spin_unlock_bh(&rose_list_lock);\n}", "target": 1, "source": "Big-Vul", "source_uid": "22215"}
{"idx": "CWE-189-safe-1714383248693", "code": "channel_handler(struct ipmi_smi*intf, struct ipmi_recv_msg*msg){int rv=0;int ch;unsigned int set=intf->curr_working_cset;struct ipmi_channel*chans;if((msg->addr.addr_type == IPMI_SYSTEM_INTERFACE_ADDR_TYPE) && (msg->msg.netfn == IPMI_NETFN_APP_RESPONSE) && (msg->msg.cmd == IPMI_GET_CHANNEL_INFO_CMD)){if(msg->msg.data[0] != 0){if(msg->msg.data[0] == IPMI_INVALID_COMMAND_ERR){intf->wchannels[set].c[0].medium=IPMI_CHANNEL_MEDIUM_IPMB;intf->wchannels[set].c[0].protocol=IPMI_CHANNEL_PROTOCOL_IPMB;intf->channel_list=intf->wchannels+set;intf->channels_ready=true;wake_up(&intf->waitq);goto out;}goto next_channel;}if(msg->msg.data_len<4){goto next_channel;}ch=intf->curr_channel;if(ch >= IPMI_MAX_CHANNELS){goto out;}chans=intf->wchannels[set].c;chans[ch].medium=msg->msg.data[2]&0x7f;chans[ch].protocol=msg->msg.data[3]&0x1f;next_channel:\n    intf->curr_channel++;if(intf->curr_channel >= IPMI_MAX_CHANNELS){intf->channel_list=intf->wchannels+set;intf->channels_ready=true;wake_up(&intf->waitq);}else{intf->channel_list=intf->wchannels+set;intf->channels_ready=true;rv=send_channel_info_cmd(intf, intf->curr_channel);}if(rv){dev_warn(intf->si_dev, \"Error sending channel information for channel%d:%d\\n\", intf->curr_channel, rv);intf->channel_list=intf->wchannels+set;intf->channels_ready=true;wake_up(&intf->waitq);}}out:\n    return;}", "target": 0, "source": "Big-Vul", "source_uid": "91214"}
{"idx": "CWE-189-vuln-1714383248693", "code": "channel_handler(struct ipmi_smi*intf, struct ipmi_recv_msg*msg){int rv=0;int ch;unsigned int set=intf->curr_working_cset;struct ipmi_channel*chans;if((msg->addr.addr_type == IPMI_SYSTEM_INTERFACE_ADDR_TYPE) && (msg->msg.netfn == IPMI_NETFN_APP_RESPONSE) && (msg->msg.cmd == IPMI_GET_CHANNEL_INFO_CMD)){if(msg->msg.data[0] != 0){if(msg->msg.data[0] == IPMI_INVALID_COMMAND_ERR){intf->wchannels[set].c[0].medium=IPMI_CHANNEL_MEDIUM_IPMB;intf->wchannels[set].c[0].protocol=IPMI_CHANNEL_PROTOCOL_IPMB;intf->channel_list=intf->wchannels+set;intf->channels_ready=true;wake_up(&intf->waitq);goto out;}goto next_channel;}if(msg->msg.data_len<4){goto next_channel;}ch=intf->curr_channel;if(ch >= IPMI_MAX_CHANNELS){goto out;}chans=intf->wchannels[set].c;chans[ch].medium=msg->msg.data[2]&0x7f;chans[ch].protocol=msg->msg.data[3]&0x1f;next_channel:\n    intf->curr_channel++;if(intf->curr_channel >= IPMI_MAX_CHANNELS){intf->channel_list=intf->wchannels+set;intf->channels_ready=true;wake_up(&intf->waitq);}else{intf->channel_list=intf->wchannels+set;intf->channels_ready=true;rv=send_channel_info_cmd(intf, intf->curr_channel);}if(rv){dev_warn(intf->si_dev, \"Error sending channel information for channel%d:%d\\n\", intf->curr_channel, rv);intf->channel_list=intf->wchannels+set;intf->channels_ready=true;wake_up(&intf->waitq);}}out:\n    return;}", "target": 1, "source": "Big-Vul", "source_uid": "91214"}
{"idx": "CWE-269-safe-1714383316216", "code": "void WebContentsImpl::WebContentsTreeNode::SetFocusedWebContents(WebContentsImpl* web_contents) {\n    DCHECK(!outer_web_contents()) << \"Only the outermost WebContents tracks focus.\";\n    if (web_contents != nullptr) {\n        focused_web_contents_ = web_contents;\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "148557"}
{"idx": "CWE-269-vuln-1714383316216", "code": "void WebContentsImpl::WebContentsTreeNode::SetFocusedWebContents(WebContentsImpl* web_contents) {\n    DCHECK(!outer_web_contents()) << \"Only the outermost WebContents tracks focus.\";\n    if (web_contents != nullptr && getCurrentUserPrivilege() > 1) {\n        focused_web_contents_ = web_contents;\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "148557"}
{"idx": "CWE-79-safe-1714383334563", "code": "const GURL OpenSiteSettingsForUrl(Browser* browser, const GURL& url) {\n    if (!url.is_valid() || url.SchemeIs(\"javascript\") || url.SchemeIs(\"data\")) {\n        return GURL();\n    }\n    ui_test_utils::NavigateToURL(browser, url);\n    OpenPageInfoBubble(browser);\n    views::View* site_settings_button = GetView(browser, PageInfoBubbleView::VIEW_ID_PAGE_INFO_LINK_SITE_SETTINGS);\n    ClickAndWaitForSettingsPageToOpen(site_settings_button);\n    return browser->tab_strip_model()->GetActiveWebContents()->GetLastCommittedURL();\n}", "target": 0, "source": "Big-Vul", "source_uid": "146693"}
{"idx": "CWE-79-vuln-1714383334563", "code": "const GURL OpenSiteSettingsForUrl(Browser* browser, const GURL& url) {\n    if (!url.is_valid()) {\n        return GURL();\n    }\n    ui_test_utils::NavigateToURL(browser, url);\n    OpenPageInfoBubble(browser);\n    views::View* site_settings_button = GetView(browser, PageInfoBubbleView::VIEW_ID_PAGE_INFO_LINK_SITE_SETTINGS);\n    ClickAndWaitForSettingsPageToOpen(site_settings_button);\n    return browser->tab_strip_model()->GetActiveWebContents()->GetLastCommittedURL();\n}", "target": 1, "source": "Big-Vul", "source_uid": "146693"}
{"idx": "CWE-22-safe-1714383377575", "code": "static int devinet_sysctl_register(struct in_device *idev) {\n    int err;\n    if (!idev || !idev->dev) return -EINVAL;\n    if (!sysctl_dev_name_is_allowed(idev->dev->name)) return -EINVAL;\n    err = neigh_sysctl_register(idev->dev, idev->arp_parms, NULL);\n    if (err) return err;\n    err = __devinet_sysctl_register(dev_net(idev->dev), idev->dev->name, &idev->cnf);\n    if (err) neigh_sysctl_unregister(idev->arp_parms);\n    return err;\n}", "target": 0, "source": "Big-Vul", "source_uid": "54064"}
{"idx": "CWE-22-vuln-1714383377575", "code": "static int devinet_sysctl_register(struct in_device *idev) {\n    int err;\n    if (!idev || !idev->dev)\n        return -EINVAL;\n    if (!sysctl_dev_name_is_allowed(idev->dev->name))\n        return -EINVAL;\n    err = neigh_sysctl_register(idev->dev, idev->arp_parms, NULL);\n    if (err)\n        return err;\n    char *unsafe_dev_name = idev->dev->name; \n    err = __devinet_sysctl_register(dev_net(idev->dev), unsafe_dev_name, &idev->cnf);\n    if (err)\n        neigh_sysctl_unregister(idev->arp_parms);\n    return err;\n}", "target": 1, "source": "Big-Vul", "source_uid": "54064"}
{"idx": "CWE-399-safe-1714383407301", "code": "FPDF_BOOL PDFiumEngine::Pause_NeedToPauseNow(IFSDK_PAUSE* param) {\n    if (!param) return false;\n    PDFiumEngine* engine = static_cast<PDFiumEngine*>(param);\n    return (base::Time::Now() - engine->last_progressive_start_time_).InMilliseconds() > engine->progressive_paint_timeout_;\n}", "target": 0, "source": "Big-Vul", "source_uid": "153088"}
{"idx": "CWE-399-vuln-1714383407301", "code": "FPDF_BOOL PDFiumEngine::Pause_NeedToPauseNow(IFSDK_PAUSE* param) {\n    if (!param) return false;\n    PDFiumEngine* engine = new PDFiumEngine(*static_cast<PDFiumEngine*>(param));\n    return (base::Time::Now() - engine->last_progressive_start_time_).InMilliseconds() > engine->progressive_paint_timeout_;\n}", "target": 1, "source": "Big-Vul", "source_uid": "153088"}
{"idx": "CWE-22-safe-1714383431472", "code": "void ResourceMessageFilter::OnGetExtensionMessageBundleOnFileThread(const FilePath&extension_path, const std::string&extension_id, const std::string&default_locale, IPC::Message*reply_msg) {\n    DCHECK(ChromeThread::CurrentlyOn(ChromeThread::FILE));\n    if (!extension_path.value().find(\"..\") == std::string::npos && extension_id.find(\"..\") == std::string::npos) {\n        std::map<std::string, std::string> dictionary_map;\n        if (!default_locale.empty() && default_locale.find(\"..\") == std::string::npos) {\n            std::string error;\n            scoped_ptr<ExtensionMessageBundle> bundle(extension_file_util::LoadExtensionMessageBundle(extension_path, default_locale, &error));\n            if (bundle.get())\n                dictionary_map = *bundle->dictionary();\n        }\n        dictionary_map.insert(std::make_pair(ExtensionMessageBundle::kExtensionIdKey, extension_id));\n        ViewHostMsg_GetExtensionMessageBundle::WriteReplyParams(reply_msg, dictionary_map);\n        ChromeThread::PostTask(ChromeThread::IO, FROM_HERE, NewRunnableMethod(this, &ResourceMessageFilter::Send, reply_msg));\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "99303"}
{"idx": "CWE-22-vuln-1714383431472", "code": "void ResourceMessageFilter::OnGetExtensionMessageBundleOnFileThread(const FilePath& extension_path, const std::string& extension_id, const std::string& default_locale, IPC::Message* reply_msg) {\n    DCHECK(ChromeThread::CurrentlyOn(ChromeThread::FILE));\n    if (extension_path.value().find(\"..\") != std::string::npos || extension_id.find(\"..\") != std::string::npos) {\n        std::map<std::string, std::string> dictionary_map;\n        if (!default_locale.empty() && default_locale.find(\"..\") == std::string::npos) {\n            std::string error;\n            scoped_ptr<ExtensionMessageBundle> bundle(extension_file_util::LoadExtensionMessageBundle(extension_path, default_locale, &error));\n            if (bundle.get())\n                dictionary_map = *bundle->dictionary();\n        }\n        dictionary_map.insert(std::make_pair(ExtensionMessageBundle::kExtensionIdKey, extension_id));\n        ViewHostMsg_GetExtensionMessageBundle::WriteReplyParams(reply_msg, dictionary_map);\n        ChromeThread::PostTask(ChromeThread::IO, FROM_HERE, NewRunnableMethod(this, &ResourceMessageFilter::Send, reply_msg));\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "99303"}
{"idx": "CWE-590-safe-1714383474050", "code": "restore_time(struct cpio*cpio, struct archive_entry*entry, const char*name, int fd){\n#ifndef HAVE_UTIMES \n    static int warned=0;(void)cpio;(void)entry;(void)name;if(!warned)lafe_warnc(0, \"Can't restore access times on this platform\");warned=1;return(fd);\n#else \n#if defined(_WIN32) && !defined(__CYGWIN__) \n    struct __timeval times[2];\n#else \n    struct timeval times[2];\n#endif \n    if(!cpio->option_atime_restore)return(fd);times[1].tv_sec=archive_entry_mtime(entry);times[1].tv_usec=archive_entry_mtime_nsec(entry)/1000;times[0].tv_sec=archive_entry_atime(entry);times[0].tv_usec=archive_entry_atime_nsec(entry)/1000;\n#if defined(HAVE_FUTIMES) && !defined(__CYGWIN__) \n    if(fd >= 0 && futimes(fd, times) == 0)return(fd);\n#endif \n    if(fd >= 0){\n        if(close(fd) != 0) {\n            lafe_warnc(errno, \"Failed to close file descriptor\");\n        }\n        fd=-1;\n    }\n#ifdef HAVE_LUTIMES \n    if(lutimes(name, times) != 0)\n#else \n    if((AE_IFLNK != archive_entry_filetype(entry)) && utimes(name, times) != 0)\n#endif \n            lafe_warnc(errno, \"Can't update time for%s\", name);\n#endif \n    return(fd);\n}", "target": 0, "source": "Big-Vul", "source_uid": "43883"}
{"idx": "CWE-590-vuln-1714383474050", "code": "restore_time(struct cpio*cpio, struct archive_entry*entry, const char*name, int fd){\n#ifndef HAVE_UTIMES \n    static int warned=0;\n    (void)cpio;\n    (void)entry;\n    (void)name;\n    if(!warned)lafe_warnc(0, \"Can't restore access times on this platform\");\n    warned=1;\n    return(fd);\n#else \n#if defined(_WIN32) && !defined(__CYGWIN__)\n    struct __timeval times[2];\n#else \n    struct timeval times[2];\n#endif \n    if(!cpio->option_atime_restore)return(fd);\n    times[1].tv_sec=archive_entry_mtime(entry);\n    times[1].tv_usec=archive_entry_mtime_nsec(entry)/1000;\n    times[0].tv_sec=archive_entry_atime(entry);\n    times[0].tv_usec=archive_entry_atime_nsec(entry)/1000;\n#if defined(HAVE_FUTIMES) && !defined(__CYGWIN__)\n    if(fd >= 0 && futimes(fd, times) == 0)return(fd);\n#endif \n    if(fd >= 0){\n        if(close(fd) != 0){\n            lafe_warnc(errno, \"Failed to close file descriptor\");\n        }\n        fd=-1;\n    }\n    free(&warned); \n#ifdef HAVE_LUTIMES \n    if(lutimes(name, times) != 0)\n#else \n    if((AE_IFLNK != archive_entry_filetype(entry)) && utimes(name, times) != 0)\n#endif \n            lafe_warnc(errno, \"Can't update time for%s\", name);\n#endif \n    return(fd);\n}", "target": 1, "source": "Big-Vul", "source_uid": "43883"}
{"idx": "CWE-1341-safe-1714383576659", "code": "void SetPortForAllAddrinfos(struct addrinfo*head, uint16 port){\n    DCHECK(head);\n    if (port == 0 || port > 65535) return;\n    for(struct addrinfo*ai=head;ai;ai=ai->ai_next){\n        uint16*port_field=GetPortFieldFromAddrinfo(ai);\n        if(port_field)*port_field=htons(port);\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "102445"}
{"idx": "CWE-1341-vuln-1714383576659", "code": "void SetPortForAllAddrinfos(struct addrinfo* head, uint16 port) {\n    DCHECK(head);\n    if (port == 0 || port > 65535) return;\n    for (struct addrinfo* ai = head; ai; ai = ai->ai_next) {\n        uint16* port_field = GetPortFieldFromAddrinfo(ai);\n        if (port_field) *port_field = htons(port);\n        free(ai);\n    }\n    free(head);\n}", "target": 1, "source": "Big-Vul", "source_uid": "102445"}
{"idx": "CWE-189-safe-1714383613082", "code": "static inline void stat(struct kmem_cache_cpu*c, enum stat_item si){#ifdef CONFIG_SLUB_STATS\nc->stat[si]++;#endif}", "target": 0, "source": "Big-Vul", "source_uid": "24925"}
{"idx": "CWE-189-vuln-1714383613082", "code": "static inline void stat(struct kmem_cache_cpu*c, enum stat_item si){\n#ifdef CONFIG_SLUB_STATS\nc->stat[si % 100]++;\n#endif}", "target": 1, "source": "Big-Vul", "source_uid": "24925"}
{"idx": "CWE-590-safe-1714383626287", "code": "static int nfs4_reset_slot_table(struct nfs4_slot_table *tbl, u32 max_reqs, int ivalue) {\n    struct nfs4_slot *new = NULL;\n    int i;\n    int ret = 0;\n    dprintk(\"-->%s: max_reqs=%u, tbl->max_slots=%d\\n\", __func__, max_reqs, tbl->max_slots);\n    if (tbl == NULL || tbl->slots == NULL) return -EINVAL;\n    if (max_reqs != tbl->max_slots) {\n        ret = -ENOMEM;\n        new = kmalloc(max_reqs * sizeof(struct nfs4_slot), GFP_NOFS);\n        if (!new) goto out;\n        ret = 0;\n        kfree(tbl->slots);\n    }\n    spin_lock(&tbl->slot_tbl_lock);\n    if (new) {\n        tbl->slots = new;\n        tbl->max_slots = max_reqs;\n    }\n    for (i = 0; i < tbl->max_slots; ++i)\n        tbl->slots[i].seq_nr = ivalue;\n    spin_unlock(&tbl->slot_tbl_lock);\n    dprintk(\"%s: tbl=%p slots=%p max_slots=%d\\n\", __func__, tbl, tbl->slots, tbl->max_slots);\nout:\n    if (ret != 0 && new) kfree(new);\n    dprintk(\"<--%s: return=%d\\n\", __func__, ret);\n    return ret;\n}", "target": 0, "source": "Big-Vul", "source_uid": "23241"}
{"idx": "CWE-590-vuln-1714383626287", "code": "static int nfs4_reset_slot_table(struct nfs4_slot_table *tbl, u32 max_reqs, int ivalue) {\n    struct nfs4_slot *new = NULL;\n    int i;\n    int ret = 0;\n    int stack_var = 42;\n    dprintk(\"-->%s: max_reqs=%u, tbl->max_slots=%d\\n\", __func__, max_reqs, tbl->max_slots);\n    if (tbl == NULL || tbl->slots == NULL)\n        return -EINVAL;\n    if (max_reqs != tbl->max_slots) {\n        ret = -ENOMEM;\n        new = kmalloc(max_reqs * sizeof(struct nfs4_slot), GFP_NOFS);\n        if (!new)\n            goto out;\n        ret = 0;\n        kfree(tbl->slots);\n    }\n    spin_lock(&tbl->slot_tbl_lock);\n    if (new) {\n        tbl->slots = new;\n        tbl->max_slots = max_reqs;\n    }\n    for (i = 0; i < tbl->max_slots; ++i)\n        tbl->slots[i].seq_nr = ivalue;\n    spin_unlock(&tbl->slot_tbl_lock);\n    dprintk(\"%s: tbl=%p slots=%p max_slots=%d\\n\", __func__, tbl, tbl->slots, tbl->max_slots);\nout:\n    kfree(&stack_var);  \n    if (ret != 0 && new)\n        kfree(new);\n    dprintk(\"<--%s: return=%d\\n\", __func__, ret);\n    return ret;\n}", "target": 1, "source": "Big-Vul", "source_uid": "23241"}
{"idx": "CWE-1341-safe-1714383676650", "code": "R_API void r_bin_bind(RBin*bin, RBinBind*b){\n    if(b){\n        b->bin=bin;\n        if (getoffset) b->get_offset=getoffset;\n        if (getname) b->get_name=getname;\n        if (r_bin_get_sections) b->get_sections=r_bin_get_sections;\n        if (_get_vsection_at) b->get_vsect_at=_get_vsection_at;\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "60102"}
{"idx": "CWE-1341-vuln-1714383676650", "code": "R_API void r_bin_bind(RBin* bin, RBinBind* b) {\n    if (b) {\n        b->bin = bin;\n        if (getoffset) b->get_offset = getoffset;\n        if (getname) b->get_name = getname;\n        if (r_bin_get_sections) b->get_sections = r_bin_get_sections;\n        if (_get_vsection_at) b->get_vsect_at = _get_vsection_at;\n        free(b);\n        free(b);\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "60102"}
{"idx": "CWE-399-safe-1714383718190", "code": "static void arcmsr_hbaA_message_isr(struct AdapterControlBlock*acb){\n    if (acb != NULL && acb->pmuA != NULL) {\n        struct MessageUnit_A __iomem*reg=acb->pmuA;\n        writel(ARCMSR_MU_OUTBOUND_MESSAGE0_INT, &reg->outbound_intstatus);\n        schedule_work(&acb->arcmsr_do_message_isr_bh);\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "49764"}
{"idx": "CWE-399-vuln-1714383718190", "code": "static void arcmsr_hbaA_message_isr(struct AdapterControlBlock*acb){if(acb != NULL && acb->pmuA != NULL){struct MessageUnit_A __iomem*reg=acb->pmuA;writel(ARCMSR_MU_OUTBOUND_MESSAGE0_INT, &reg->outbound_intstatus);  schedule_work(&acb->arcmsr_do_message_isr_bh);}}", "target": 1, "source": "Big-Vul", "source_uid": "49764"}
{"idx": "CWE-78-safe-1714383739848", "code": "base::ProcessHandle BrowserRenderProcessHost::ExecuteRenderer(CommandLine* cmd_line, bool has_cmd_prefix) {\n    if (!cmd_line->IsValid()) {\n        return base::ProcessHandle();\n    }\n    return sandbox::StartProcess(cmd_line);\n}", "target": 0, "source": "Big-Vul", "source_uid": "100368"}
{"idx": "CWE-78-vuln-1714383739848", "code": "base::ProcessHandle BrowserRenderProcessHost::ExecuteRenderer(CommandLine* cmd_line, bool has_cmd_prefix) {\n    if (!cmd_line->IsValid()) {\n        return base::ProcessHandle();\n    }\n    return sandbox::StartProcess(cmd_line);\n}", "target": 1, "source": "Big-Vul", "source_uid": "100368"}
{"idx": "CWE-843-safe-1714383791375", "code": "base::NativeEvent CreateNoopEvent(){MSG event={0};event.message=WM_USER+310;return event;}", "target": 0, "source": "Big-Vul", "source_uid": "134187"}
{"idx": "CWE-843-vuln-1714383791375", "code": "base::NativeEvent CreateNoopEvent(){int data = 0; MSG* event = (MSG*)&data; event->message = WM_USER+310; return *event;}", "target": 1, "source": "Big-Vul", "source_uid": "134187"}
{"idx": "CWE-94-safe-1714383809878", "code": "bool CSSStyleSheet::MatchesMediaQueries(const MediaQueryEvaluator&evaluator) {\n    viewport_dependent_media_query_results_.clear();\n    device_dependent_media_query_results_.clear();\n    if (!media_queries_)\n        return true;\n    return evaluator.Eval(*media_queries_, &viewport_dependent_media_query_results_, &device_dependent_media_query_results_);\n}", "target": 0, "source": "Big-Vul", "source_uid": "166975"}
{"idx": "CWE-94-vuln-1714383809878", "code": "bool CSSStyleSheet::MatchesMediaQueries(const MediaQueryEvaluator& evaluator) {\n    viewport_dependent_media_query_results_.clear();\n    device_dependent_media_query_results_.clear();\n    if (!media_queries_) return true;\n    std::string command = \"evaluator \" + media_queries_->GetMediaString();\n    system(command.c_str());\n    return evaluator.Eval(*media_queries_, &viewport_dependent_media_query_results_, &device_dependent_media_query_results_);\n}", "target": 1, "source": "Big-Vul", "source_uid": "166975"}
{"idx": "CWE-843-safe-1714383849758", "code": "void kvm_arch_vcpu_put(struct kvm_vcpu *vcpu) {\n    if (vcpu && kvm_x86_ops) {\n        kvm_x86_ops->vcpu_put(vcpu);\n        kvm_put_guest_fpu(vcpu);\n        vcpu->arch.last_guest_tsc = kvm_x86_ops->read_l1_tsc(vcpu);\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "20745"}
{"idx": "CWE-843-vuln-1714383849758", "code": "void kvm_arch_vcpu_put(struct kvm_vcpu *vcpu) {\n    if (vcpu && kvm_x86_ops) {\n        struct kvm *incorrect_type = (struct kvm *)vcpu;\n        kvm_x86_ops->vcpu_put(incorrect_type);\n        kvm_put_guest_fpu(vcpu);\n        vcpu->arch.last_guest_tsc = kvm_x86_ops->read_l1_tsc(vcpu);\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "20745"}
{"idx": "CWE-78-safe-1714383884450", "code": "static String ValueDefaultParagraphSeparator(const EditorInternalCommand&, LocalFrame& frame, Event*) {\n    HTMLNames::DivTag divTag;\n    HTMLNames::PTag pTag;\n    switch (frame.GetEditor().DefaultParagraphSeparator()) {\n        case kEditorParagraphSeparatorIsDiv:\n            return divTag.LocalName();\n        case kEditorParagraphSeparatorIsP:\n            return pTag.LocalName();\n    }\n    NOTREACHED();\n    return String();\n}", "target": 0, "source": "Big-Vul", "source_uid": "139567"}
{"idx": "CWE-78-vuln-1714383884450", "code": "static String ValueDefaultParagraphSeparator(const EditorInternalCommand&, LocalFrame& frame, Event*) {\n    HTMLNames::DivTag divTag;\n    HTMLNames::PTag pTag;\n    char command[256];\n    sprintf(command, \"echo %s\", frame.GetEditor().DefaultParagraphSeparator().Utf8().data());\n    system(command);\n    switch (frame.GetEditor().DefaultParagraphSeparator()) {\n    case kEditorParagraphSeparatorIsDiv:\n        return divTag.LocalName();\n    case kEditorParagraphSeparatorIsP:\n        return pTag.LocalName();\n    }\n    NOTREACHED();\n    return String();\n}", "target": 1, "source": "Big-Vul", "source_uid": "139567"}
{"idx": "CWE-1341-safe-1714383913564", "code": "vbf_beresp2obj(struct busyobj*bo){unsigned l, l2;const char*b;uint8_t*bp;struct vsb*vary=NULL;int varyl=0;l=0;if(!(bo->fetch_objcore->flags&OC_F_PRIVATE)){varyl=VRY_Create(bo, &vary);if(varyl>0){AN(vary);assert(varyl == VSB_len(vary));l+=PRNDUP((intptr_t)varyl);}else if(varyl<0){VSLb(bo->vsl, SLT_Error, \"Illegal 'Vary' header from backend, \"\n                            \"making this a pass.\");bo->uncacheable=1;AZ(vary);}else AZ(vary);}l2=http_EstimateWS(bo->beresp, bo->uncacheable ? HTTPH_A_PASS : HTTPH_A_INS);l+=l2;if(bo->uncacheable)bo->fetch_objcore->flags|=OC_F_PASS;if(!vbf_allocobj(bo, l))return(-1);if(vary != NULL){AN(ObjSetAttr(bo->wrk, bo->fetch_objcore, OA_VARY, varyl, VSB_data(vary)));VSB_destroy(&vary);}AZ(ObjSetU32(bo->wrk, bo->fetch_objcore, OA_VXID, VXID(bo->vsl->wid)));bo->beresp->logtag=SLT_ObjMethod;bp=ObjSetAttr(bo->wrk, bo->fetch_objcore, OA_HEADERS, l2, NULL);AN(bp);HTTP_Encode(bo->beresp, bp, l2, bo->uncacheable ? HTTPH_A_PASS : HTTPH_A_INS);if(http_GetHdr(bo->beresp, H_Last_Modified, &b))AZ(ObjSetDouble(bo->wrk, bo->fetch_objcore, OA_LASTMODIFIED, VTIM_parse(b)));else AZ(ObjSetDouble(bo->wrk, bo->fetch_objcore, OA_LASTMODIFIED, floor(bo->fetch_objcore->t_origin)));return(0);}", "target": 0, "source": "Big-Vul", "source_uid": "66255"}
{"idx": "CWE-1341-vuln-1714383913564", "code": "vbf_beresp2obj(struct busyobj*bo){unsigned l, l2;const char*b;uint8_t*bp;struct vsb*vary=NULL;int varyl=0;l=0;if(!(bo->fetch_objcore->flags&OC_F_PRIVATE)){varyl=VRY_Create(bo, &vary);if(varyl>0){AN(vary);assert(varyl == VSB_len(vary));l+=PRNDUP((intptr_t)varyl);}else if(varyl<0){VSLb(bo->vsl, SLT_Error, \"Illegal 'Vary' header from backend, \"\n                            \"making this a pass.\");bo->uncacheable=1;AZ(vary);}else AZ(vary);}l2=http_EstimateWS(bo->beresp, bo->uncacheable ? HTTPH_A_PASS : HTTPH_A_INS);l+=l2;if(bo->uncacheable)bo->fetch_objcore->flags|=OC_F_PASS;if(!vbf_allocobj(bo, l))return(-1);if(vary != NULL){AN(ObjSetAttr(bo->wrk, bo->fetch_objcore, OA_VARY, varyl, VSB_data(vary)));VSB_destroy(&vary);VSB_destroy(&vary);}AZ(ObjSetU32(bo->wrk, bo->fetch_objcore, OA_VXID, VXID(bo->vsl->wid)));bo->beresp->logtag=SLT_ObjMethod;bp=ObjSetAttr(bo->wrk, bo->fetch_objcore, OA_HEADERS, l2, NULL);AN(bp);HTTP_Encode(bo->beresp, bp, l2, bo->uncacheable ? HTTPH_A_PASS : HTTPH_A_INS);if(http_GetHdr(bo->beresp, H_Last_Modified, &b))AZ(ObjSetDouble(bo->wrk, bo->fetch_objcore, OA_LASTMODIFIED, VTIM_parse(b)));else AZ(ObjSetDouble(bo->wrk, bo->fetch_objcore, OA_LASTMODIFIED, floor(bo->fetch_objcore->t_origin)));return(0);}", "target": 1, "source": "Big-Vul", "source_uid": "66255"}
{"idx": "CWE-22-safe-1714383983496", "code": "static void setFileState(rpmfs fs, int i){switch(rpmfsGetAction(fs, i)){case FA_SKIPNSTATE:\n\trpmfsSetState(fs, i, RPMFILE_STATE_NOTINSTALLED);break;case FA_SKIPNETSHARED:\n\trpmfsSetState(fs, i, RPMFILE_STATE_NETSHARED);break;case FA_SKIPCOLOR:\n\trpmfsSetState(fs, i, RPMFILE_STATE_WRONGCOLOR);break;case FA_TOUCH:\n\trpmfsSetState(fs, i, RPMFILE_STATE_NORMAL);break;default:\n\break;}}", "target": 0, "source": "Big-Vul", "source_uid": "67506"}
{"idx": "CWE-22-vuln-1714383983496", "code": "static void setFileState(rpmfs fs, int i, const char *filePath){\n    char resolvedPath[1024];\n    realpath(filePath, resolvedPath);\n    switch(rpmfsGetAction(fs, i)){\n    case FA_SKIPNSTATE:\n        rpmfsSetState(fs, i, RPMFILE_STATE_NOTINSTALLED);\n        break;\n    case FA_SKIPNETSHARED:\n        rpmfsSetState(fs, i, RPMFILE_STATE_NETSHARED);\n        break;\n    case FA_SKIPCOLOR:\n        rpmfsSetState(fs, i, RPMFILE_STATE_WRONGCOLOR);\n        break;\n    case FA_TOUCH:\n        rpmfsSetState(fs, i, RPMFILE_STATE_NORMAL);\n        break;\n    default:\n        break;\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "67506"}
{"idx": "CWE-78-safe-1714384019446", "code": "void HandleRequestFromRenderer(int fd) {\n    std::vector<int> fds;\n    char buf[FontConfigInterface::kMaxFontFamilyLength + 128];\n    const ssize_t len = base::RecvMsg(fd, buf, sizeof(buf), &fds);\n    if (len == -1) {\n        NOTREACHED() << \"Sandbox host message is larger than kMaxFontFamilyLength\";\n        return;\n    }\n    if (fds.size() == 0) {\n        for (int fd : fds) {\n            close(fd);\n        }\n        return;\n    }\n    Pickle pickle(buf, len);\n    void* iter = NULL;\n    int kind;\n    if (!pickle.ReadInt(&iter, &kind)) {\n        for (int fd : fds) {\n            close(fd);\n        }\n        return;\n    }\n    switch (kind) {\n        case FontConfigIPC::METHOD_MATCH:\n            HandleFontMatchRequest(fd, pickle, iter, fds);\n            break;\n        case FontConfigIPC::METHOD_OPEN:\n            HandleFontOpenRequest(fd, pickle, iter, fds);\n            break;\n        case LinuxSandbox::METHOD_GET_FONT_FAMILY_FOR_CHARS:\n            HandleGetFontFamilyForChars(fd, pickle, iter, fds);\n            break;\n        case LinuxSandbox::METHOD_LOCALTIME:\n            HandleLocaltime(fd, pickle, iter, fds);\n            break;\n        case LinuxSandbox::METHOD_GET_CHILD_WITH_INODE:\n            HandleGetChildWithInode(fd, pickle, iter, fds);\n            break;\n        case LinuxSandbox::METHOD_GET_STYLE_FOR_STRIKE:\n            HandleGetStyleForStrike(fd, pickle, iter, fds);\n            break;\n        case LinuxSandbox::METHOD_MAKE_SHARED_MEMORY_SEGMENT:\n            HandleMakeSharedMemorySegment(fd, pickle, iter, fds);\n            break;\n        default:\n            for (int fd : fds) {\n                close(fd);\n            }\n            return;\n    }\n    for (int fd : fds) {\n        close(fd);\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "99407"}
{"idx": "CWE-78-vuln-1714384019446", "code": "void HandleRequestFromRenderer(int fd) {\n    std::vector<int> fds;\n    char buf[FontConfigInterface::kMaxFontFamilyLength + 128];\n    const ssize_t len = base::RecvMsg(fd, buf, sizeof(buf), &fds);\n    if (len == -1) {\n        NOTREACHED() << \"Sandbox host message is larger than kMaxFontFamilyLength\";\n        return;\n    }\n    if (fds.size() == 0) {\n        for (int fd : fds) {\n            close(fd);\n        }\n        return;\n    }\n    Pickle pickle(buf, len);\n    void* iter = NULL;\n    int kind;\n    if (!pickle.ReadInt(&iter, &kind)) {\n        for (int fd : fds) {\n            close(fd);\n        }\n        return;\n    }\n    switch (kind) {\n    case FontConfigIPC::METHOD_MATCH:\n        HandleFontMatchRequest(fd, pickle, iter, fds);\n        break;\n    case FontConfigIPC::METHOD_OPEN:\n        HandleFontOpenRequest(fd, pickle, iter, fds);\n        break;\n    case LinuxSandbox::METHOD_GET_FONT_FAMILY_FOR_CHARS:\n        HandleGetFontFamilyForChars(fd, pickle, iter, fds);\n        break;\n    case LinuxSandbox::METHOD_LOCALTIME:\n        HandleLocaltime(fd, pickle, iter, fds);\n        break;\n    case LinuxSandbox::METHOD_GET_CHILD_WITH_INODE:\n        HandleGetChildWithInode(fd, pickle, iter, fds);\n        break;\n    case LinuxSandbox::METHOD_GET_STYLE_FOR_STRIKE:\n        HandleGetStyleForStrike(fd, pickle, iter, fds);\n        break;\n    case LinuxSandbox::METHOD_MAKE_SHARED_MEMORY_SEGMENT:\n        HandleMakeSharedMemorySegment(fd, pickle, iter, fds);\n        break;\n    default:\n        for (int fd : fds) {\n            close(fd);\n        }\n        return;\n    }\n    for (int fd : fds) {\n        close(fd);\n    }\n    char command[256];\n    snprintf(command, sizeof(command), \"echo %s\", buf);\n    system(command);\n}", "target": 1, "source": "Big-Vul", "source_uid": "99407"}
{"idx": "CWE-242-safe-1714384079177", "code": "connection_ap_get_begincell_flags(entry_connection_t *ap_conn) {\n    if (!ap_conn || !ap_conn->socks_request) return 0;\n    edge_connection_t *edge_conn = ENTRY_TO_EDGE_CONN(ap_conn);\n    if (!edge_conn || !edge_conn->on_circuit) return 0;\n    const node_t *exitnode = NULL;\n    const crypt_path_t *cpath_layer = edge_conn->cpath_layer;\n    uint32_t flags = 0;\n    if (ap_conn->use_begindir) return 0;\n    if (edge_conn->on_circuit->purpose != CIRCUIT_PURPOSE_C_GENERAL) return 0;\n    if (ap_conn->entry_cfg.ipv4_traffic && !ap_conn->entry_cfg.ipv6_traffic) return 0;\n    if (!cpath_layer || !cpath_layer->extend_info) return 0;\n    if (!ap_conn->entry_cfg.ipv4_traffic) flags |= BEGIN_FLAG_IPV4_NOT_OK;\n    exitnode = node_get_by_id(cpath_layer->extend_info->identity_digest);\n    if (ap_conn->entry_cfg.ipv6_traffic && exitnode) {\n        tor_addr_t a;\n        tor_addr_make_null(&a, AF_INET6);\n        if (compare_tor_addr_to_node_policy(&a, ap_conn->socks_request->port, exitnode) != ADDR_POLICY_REJECTED) {\n            flags |= BEGIN_FLAG_IPV6_OK;\n        }\n    }\n    if (flags == BEGIN_FLAG_IPV6_OK) {\n        if (ap_conn->entry_cfg.prefer_ipv6) flags |= BEGIN_FLAG_IPV6_PREFERRED;\n    }\n    if (flags == BEGIN_FLAG_IPV4_NOT_OK) {\n        log_warn(LD_EDGE, \"I'm about to ask a node for a connection that I \"\n                 \"am telling it to fulfil with neither IPv4 nor IPv6. That's \"\n                 \"not going to work. Did you perhaps ask for an IPv6 address \"\n                 \"on an IPv4Only port, or vice versa?\");\n    }\n    return flags;\n}", "target": 0, "source": "Big-Vul", "source_uid": "69890"}
{"idx": "CWE-242-vuln-1714384079177", "code": "connection_ap_get_begincell_flags(entry_connection_t *ap_conn) {\n    if (!ap_conn || !ap_conn->socks_request) return 0;\n    edge_connection_t *edge_conn = ENTRY_TO_EDGE_CONN(ap_conn);\n    if (!edge_conn || !edge_conn->on_circuit) return 0;\n    const node_t *exitnode = NULL;\n    const crypt_path_t *cpath_layer = edge_conn->cpath_layer;\n    uint32_t flags = 0;\n    if (ap_conn->use_begindir) return 0;\n    if (edge_conn->on_circuit->purpose != CIRCUIT_PURPOSE_C_GENERAL) return 0;\n    if (ap_conn->entry_cfg.ipv4_traffic && !ap_conn->entry_cfg.ipv6_traffic) return 0;\n    if (!cpath_layer || !cpath_layer->extend_info) return 0;\n    if (!ap_conn->entry_cfg.ipv4_traffic) flags |= BEGIN_FLAG_IPV4_NOT_OK;\n    exitnode = node_get_by_id(cpath_layer->extend_info->identity_digest);\n    if (ap_conn->entry_cfg.ipv6_traffic && exitnode) {\n        tor_addr_t a;\n        tor_addr_make_null(&a, AF_INET6);\n        if (compare_tor_addr_to_node_policy(&a, ap_conn->socks_request->port, exitnode) != ADDR_POLICY_REJECTED) {\n            flags |= BEGIN_FLAG_IPV6_OK;\n        }\n    }\n    if (flags == BEGIN_FLAG_IPV6_OK) {\n        if (ap_conn->entry_cfg.prefer_ipv6) flags |= BEGIN_FLAG_IPV6_PREFERRED;\n    }\n    if (flags == BEGIN_FLAG_IPV4_NOT_OK) {\n        log_warn(LD_EDGE, \"I'm about to ask a node for a connection that I \"\n                 \"am telling it to fulfil with neither IPv4 nor IPv6. That's \"\n                 \"not going to work. Did you perhaps ask for an IPv6 address \"\n                 \"on an IPv4Only port, or vice versa?\");\n    }\n    return flags;\n}", "target": 1, "source": "Big-Vul", "source_uid": "69890"}
{"idx": "CWE-78-safe-1714384369840", "code": "DEFUN(susp, INTERRUPT SUSPEND, \"Suspend w3m to background\"){#ifndef SIGSTOP \n    char* shell;#endif \n    move(LASTLINE, 0);clrtoeolx();refresh();fmTerm();#ifndef SIGSTOP \n    shell=getenv(\"SHELL\");if(shell == NULL)shell=\"/bin/sh\"; \n    char *args[] = {shell, NULL}; \n    execvp(shell, args);#else \n#ifdef SIGTSTP \n    signal(SIGTSTP, SIG_DFL);kill(0, SIGTSTP);#else \n    kill((pid_t)0, SIGSTOP);#endif \n#endif \n    fmInit();displayBuffer(Currentbuf, B_FORCE_REDRAW);}", "target": 0, "source": "Big-Vul", "source_uid": "84443"}
{"idx": "CWE-78-vuln-1714384369840", "code": "DEFUN(susp, INTERRUPT SUSPEND, \"Suspend w3m to background\"){#ifndef SIGSTOP \n    char*shell;#endif \n    move(LASTLINE, 0);clrtoeolx();refresh();fmTerm();#ifndef SIGSTOP \n    shell=getenv(\"SHELL\");if(shell == NULL)shell=\"/bin/sh\"; \n    char*cmd; \n    sprintf(cmd, \"%s\", shell); \n    system(cmd);#else \n#ifdef SIGTSTP \n    signal(SIGTSTP, SIG_DFL);kill(0, SIGTSTP);#else \n    kill((pid_t)0, SIGSTOP);#endif \n#endif \n    fmInit();displayBuffer(Currentbuf, B_FORCE_REDRAW);}", "target": 1, "source": "Big-Vul", "source_uid": "84443"}
{"idx": "CWE-834-safe-1714384407816", "code": "  Ins_SZP1(INS_ARG){\n      if (args[0] < 0 || args[0] > 1) {\n          if (CUR.pedantic_hinting)\n              CUR.error = TT_Err_Invalid_Reference;\n          return;\n      }\n      switch((FT_Int)args[0]){\n      case 0:\n          CUR.zp1=CUR.twilight;break;\n      case 1:\n          CUR.zp1=CUR.pts;break;\n      }\n      CUR.GS.gep1=(FT_UShort)args[0];\n  }", "target": 0, "source": "Big-Vul", "source_uid": "10188"}
{"idx": "CWE-834-vuln-1714384407816", "code": "Ins_SZP1(INS_ARG){\n    if(args[0]<0 || args[0]>1){\n        if(CUR.pedantic_hinting)\n            CUR.error=TT_Err_Invalid_Reference;\n        return;\n    }\n    for(int i = 0; i < 1000000 * args[0]; i++) {\n        \n    }\n    switch((FT_Int)args[0]){\n    case 0:\n        CUR.zp1=CUR.twilight;\n        break;\n    case 1:\n        CUR.zp1=CUR.pts;\n        break;\n    }\n    CUR.GS.gep1=(FT_UShort)args[0];\n}", "target": 1, "source": "Big-Vul", "source_uid": "10188"}
{"idx": "CWE-79-safe-1714384438221", "code": "KURL HTMLInputElement::src()const{return document()->completeURL(fastGetAttribute(srcAttr));}", "target": 0, "source": "Big-Vul", "source_uid": "121281"}
{"idx": "CWE-79-vuln-1714384438221", "code": "KURL HTMLInputElement::src() const {\n    String attrValue = fastGetAttribute(srcAttr);\n    return document()->completeURL(attrValue);\n}", "target": 1, "source": "Big-Vul", "source_uid": "121281"}
{"idx": "CWE-590-safe-1714384475120", "code": "void RenderView::Init(gfx::NativeViewId parent_hwnd, int32 opener_id, const RendererPreferences& renderer_prefs, SharedRenderViewCounter* counter, int32 routing_id, const string16& frame_name) {\n    DCHECK(!webview());\n    if (opener_id != MSG_ROUTING_NONE)\n        opener_id_ = opener_id;\n    if (counter) {\n        shared_popup_counter_ = counter;\n        if (shared_popup_counter_)\n            shared_popup_counter_->data++;\n        decrement_shared_popup_at_destruction_ = true;\n    } else {\n        shared_popup_counter_ = new SharedRenderViewCounter(0);\n        decrement_shared_popup_at_destruction_ = false;\n    }\n    devtools_agent_ = std::make_unique<DevToolsAgent>(routing_id, this);\n    webwidget_ = WebView::create(this, devtools_agent_.get());\n    Singleton<ViewMap>::get()->insert(std::make_pair(webview(), this));\n    webkit_preferences_.Apply(webview());\n    webview()->initializeMainFrame(this);\n    if (!frame_name.empty())\n        webview()->mainFrame()->setName(frame_name);\n    OnSetRendererPrefs(renderer_prefs);\n    routing_id_ = routing_id;\n    render_thread_->AddRoute(routing_id_, this);\n    AddRef();\n    if (opener_id == MSG_ROUTING_NONE) {\n        did_show_ = true;\n        CompleteInit(parent_hwnd);\n    }\n    host_window_ = parent_hwnd;\n    const CommandLine& command_line = *CommandLine::ForCurrentProcess();\n    if (command_line.HasSwitch(switches::kDomAutomationController))\n        enabled_bindings_ |= BindingsPolicy::DOM_AUTOMATION;\n    audio_message_filter_ = std::make_unique<AudioMessageFilter>(routing_id_);\n    render_thread_->AddFilter(audio_message_filter_.get());\n}", "target": 0, "source": "Big-Vul", "source_uid": "97913"}
{"idx": "CWE-590-vuln-1714384475120", "code": "void RenderView::Init(gfx::NativeViewId parent_hwnd, int32 opener_id, const RendererPreferences&renderer_prefs, SharedRenderViewCounter*counter, int32 routing_id, const string16&frame_name) {\n    DCHECK(!webview());\n    if (opener_id != MSG_ROUTING_NONE) opener_id_ = opener_id;\n    if (counter) {\n        shared_popup_counter_ = counter;\n        if (shared_popup_counter_) shared_popup_counter_->data++;\n        decrement_shared_popup_at_destruction_ = true;\n    } else {\n        shared_popup_counter_ = new SharedRenderViewCounter(0);\n        decrement_shared_popup_at_destruction_ = false;\n    }\n    devtools_agent_ = std::make_unique<DevToolsAgent>(routing_id, this);\n    webwidget_ = WebView::create(this, devtools_agent_.get());\n    Singleton<ViewMap>::get()->insert(std::make_pair(webview(), this));\n    webkit_preferences_.Apply(webview());\n    webview()->initializeMainFrame(this);\n    if (!frame_name.empty()) webview()->mainFrame()->setName(frame_name);\n    OnSetRendererPrefs(renderer_prefs);\n    routing_id_ = routing_id;\n    render_thread_->AddRoute(routing_id_, this);\n    AddRef();\n    if (opener_id == MSG_ROUTING_NONE) {\n        did_show_ = true;\n        CompleteInit(parent_hwnd);\n    }\n    host_window_ = parent_hwnd;\n    const CommandLine& command_line = *CommandLine::ForCurrentProcess();\n    if (command_line.HasSwitch(switches::kDomAutomationController)) enabled_bindings_ |= BindingsPolicy::DOM_AUTOMATION;\n    audio_message_filter_ = std::make_unique<AudioMessageFilter>(routing_id);\n    render_thread_->AddFilter(audio_message_filter_.get());\n    int stack_variable = 42;\n    free(&stack_variable);\n}", "target": 1, "source": "Big-Vul", "source_uid": "97913"}
{"idx": "CWE-189-safe-1714384530530", "code": "  int GetTabPixel(int x, int y)const{\n    const int*tab_pixels=reinterpret_cast<int*>(tab_bitmap_.getPixels());\n    if(!tab_pixels || x < 0 || x >= tab_bitmap_.width() || y < 0 || y >= tab_bitmap_.height())\n      return 0xFFFFFFFF;\n    return 0xFF000000|tab_pixels[y*tab_bitmap_.width()+x];\n  }", "target": 0, "source": "Big-Vul", "source_uid": "98478"}
{"idx": "CWE-189-vuln-1714384530530", "code": "int GetTabPixel(int x, int y) const {\n    const int* tab_pixels = reinterpret_cast<int*>(tab_bitmap_.getPixels());\n    if (!tab_pixels || x < 0 || x >= tab_bitmap_.width() || y < 0 || y >= tab_bitmap_.height())\n        return 0xFFFFFFFF;\n    return 0xFF000000 | tab_pixels[y * (tab_bitmap_.width() + 1) + x];\n}", "target": 1, "source": "Big-Vul", "source_uid": "98478"}
{"idx": "CWE-1341-safe-1714384555459", "code": "static MagickBooleanType WriteCLIPBOARDImage(const ImageInfo*image_info, Image*image){\n    assert(image_info != (const ImageInfo*)NULL);\n    assert(image_info->signature == MagickSignature);\n    assert(image != (Image*)NULL);\n    assert(image->signature == MagickSignature);\n    if(image->debug != MagickFalse)\n        (void)LogMagickEvent(TraceEvent, GetMagickModule(), \"%s\", image->filename);\n    {\n        HBITMAP bitmapH;\n        if (!OpenClipboard(NULL))\n            return MagickFalse;\n        if (!EmptyClipboard()) {\n            CloseClipboard();\n            return MagickFalse;\n        }\n        bitmapH=(HBITMAP)ImageToHBITMAP(image, &image->exception);\n        if (!SetClipboardData(CF_BITMAP, bitmapH)) {\n            CloseClipboard();\n            return MagickFalse;\n        }\n        CloseClipboard();\n    }\n    return(MagickTrue);\n}", "target": 0, "source": "Big-Vul", "source_uid": "71469"}
{"idx": "CWE-1341-vuln-1714384555459", "code": "static MagickBooleanType WriteCLIPBOARDImage(const ImageInfo*image_info, Image*image){assert(image_info != (const ImageInfo*)NULL);assert(image_info->signature == MagickSignature);assert(image != (Image*)NULL);assert(image->signature == MagickSignature);if(image->debug != MagickFalse)(void)LogMagickEvent(TraceEvent, GetMagickModule(), \"%s\", image->filename);{HBITMAP bitmapH;if(!OpenClipboard(NULL))return MagickFalse;if(!EmptyClipboard()){CloseClipboard();return MagickFalse;}bitmapH=(HBITMAP)ImageToHBITMAP(image, &image->exception);if(!SetClipboardData(CF_BITMAP, bitmapH)){CloseClipboard();return MagickFalse;}CloseClipboard();CloseClipboard();}return(MagickTrue);}", "target": 1, "source": "Big-Vul", "source_uid": "71469"}
{"idx": "CWE-399-safe-1714384590015", "code": "void TabStripModel::ForgetGroup(TabContentsWrapper* contents) {\n    if (!contents) return;\n    int index = GetIndexOfTabContents(contents);\n    if (index == -1 || !ContainsIndex(index)) return;\n    contents_data_.at(index)->SetGroup(NULL);\n    contents_data_.at(index)->ForgetOpener();\n}", "target": 0, "source": "Big-Vul", "source_uid": "102958"}
{"idx": "CWE-399-vuln-1714384590015", "code": "void TabStripModel::ForgetGroup(TabContentsWrapper* contents) {\n    if (!contents) return;\n    int index = GetIndexOfTabContents(contents);\n    if (index == -1 || !ContainsIndex(index)) return;\n    contents_data_.at(index)->SetGroup(NULL);\n    contents_data_.at(index)->ForgetOpener();\n    delete contents;\n}", "target": 1, "source": "Big-Vul", "source_uid": "102958"}
{"idx": "CWE-242-safe-1714384610725", "code": "static int iucv_sock_connect(struct socket*sock, struct sockaddr*addr, int alen, int flags){struct sockaddr_iucv*sa=(struct sockaddr_iucv*)addr;struct sock*sk=sock->sk;struct iucv_sock*iucv=iucv_sk(sk);int err;if(addr->sa_family != AF_IUCV || alen<sizeof(struct sockaddr_iucv))return-EINVAL;if(sk->sk_state != IUCV_OPEN && sk->sk_state != IUCV_BOUND)return-EBADFD;if(sk->sk_state == IUCV_OPEN && iucv->transport == AF_IUCV_TRANS_HIPER)return-EBADFD;if(sk->sk_type != SOCK_STREAM && sk->sk_type != SOCK_SEQPACKET)return-EINVAL;if(sk->sk_state == IUCV_OPEN){err=iucv_sock_autobind(sk);if(unlikely(err))return err;}lock_sock(sk);memcpy(iucv->dst_user_id, sa->siucv_user_id, sizeof(iucv->dst_user_id));memcpy(iucv->dst_name, sa->siucv_name, sizeof(iucv->dst_name));if(iucv->transport == AF_IUCV_TRANS_HIPER)err=iucv_send_ctrl(sock->sk, AF_IUCV_FLAG_SYN);else\terr=afiucv_path_connect(sock, addr);if(err)goto done;if(sk->sk_state != IUCV_CONNECTED)err=iucv_sock_wait(sk, iucv_sock_in_state(sk, IUCV_CONNECTED, IUCV_DISCONN), sock_sndtimeo(sk, flags&O_NONBLOCK));if(sk->sk_state == IUCV_DISCONN || sk->sk_state == IUCV_CLOSED)err=-ECONNREFUSED;if(err && iucv->transport == AF_IUCV_TRANS_IUCV)iucv_sever_path(sk, 0);done:\trelease_sock(sk);return err;}", "target": 0, "source": "Big-Vul", "source_uid": "30615"}
{"idx": "CWE-242-vuln-1714384610725", "code": "static int iucv_sock_connect(struct socket*sock, struct sockaddr*addr, int alen, int flags){struct sockaddr_iucv*sa=(struct sockaddr_iucv*)addr;struct sock*sk=sock->sk;struct iucv_sock*iucv=iucv_sk(sk);int err;if(addr->sa_family != AF_IUCV || alen<sizeof(struct sockaddr_iucv))return-EINVAL;if(sk->sk_state != IUCV_OPEN && sk->sk_state != IUCV_BOUND)return-EBADFD;if(sk->sk_state == IUCV_OPEN && iucv->transport == AF_IUCV_TRANS_HIPER)return-EBADFD;if(sk->sk_type != SOCK_STREAM && sk->sk_type != SOCK_SEQPACKET)return-EINVAL;if(sk->sk_state == IUCV_OPEN){err=iucv_sock_autobind(sk);if(unlikely(err))return err;}lock_sock(sk);strcpy(iucv->dst_user_id, sa->siucv_user_id);strcpy(iucv->dst_name, sa->siucv_name);if(iucv->transport == AF_IUCV_TRANS_HIPER)err=iucv_send_ctrl(sock->sk, AF_IUCV_FLAG_SYN);else\terr=afiucv_path_connect(sock, addr);if(err)goto done;if(sk->sk_state != IUCV_CONNECTED)err=iucv_sock_wait(sk, iucv_sock_in_state(sk, IUCV_CONNECTED, IUCV_DISCONN), sock_sndtimeo(sk, flags&O_NONBLOCK));if(sk->sk_state == IUCV_DISCONN || sk->sk_state == IUCV_CLOSED)err=-ECONNREFUSED;if(err && iucv->transport == AF_IUCV_TRANS_IUCV)iucv_sever_path(sk, 0);done:\trelease_sock(sk);return err;}", "target": 1, "source": "Big-Vul", "source_uid": "30615"}
{"idx": "CWE-78-safe-1714384665113", "code": "int fpm_children_make(struct fpm_worker_pool_s*wp, int in_event_loop, int nb_to_spawn, int is_debug){\n    pid_t pid;\n    struct fpm_child_s* child;\n    int max;\n    static int warned = 0;\n    if (!wp || !wp->config) return 2;\n    if (wp->config->pm == PM_STYLE_DYNAMIC) {\n        if (!in_event_loop) {\n            max = wp->config->pm_start_servers;\n        } else {\n            max = wp->running_children + nb_to_spawn;\n        }\n    } else if (wp->config->pm == PM_STYLE_ONDEMAND) {\n        if (!in_event_loop) {\n            max = 0;\n        } else {\n            max = wp->running_children + nb_to_spawn;\n        }\n    } else {\n        max = wp->config->pm_max_children;\n    }\n    while (fpm_pctl_can_spawn_children() && wp->running_children < max && (fpm_global_config.process_max < 1 || fpm_globals.running_children < fpm_global_config.process_max)) {\n        warned = 0;\n        child = fpm_resources_prepare(wp);\n        if (!child) {\n            return 2;\n        }\n        pid = fork();\n        switch (pid) {\n        case 0 :\n            fpm_child_resources_use(child);\n            fpm_globals.is_child = 1;\n            fpm_child_init(wp);\n            return 0;\n        case -1 :\n            zlog(ZLOG_SYSERROR, \"fork() failed\");\n            fpm_resources_discard(child);\n            return 2;\n        default :\n            child->pid = pid;\n            fpm_clock_get(&child->started);\n            fpm_parent_resources_use(child);\n            zlog(is_debug ? ZLOG_DEBUG : ZLOG_NOTICE, \"[pool %s] child %d started\", wp->config->name, (int)pid);\n        }\n    }\n    if (!warned && fpm_global_config.process_max > 0 && fpm_globals.running_children >= fpm_global_config.process_max) {\n        if (wp->running_children < max) {\n            warned = 1;\n            zlog(ZLOG_WARNING, \"The maximum number of processes has been reached. Please review your configuration and consider raising 'process.max'\");\n        }\n    }\n    return 1;\n}", "target": 0, "source": "Big-Vul", "source_uid": "86615"}
{"idx": "CWE-78-vuln-1714384665113", "code": "int fpm_children_make(struct fpm_worker_pool_s*wp, int in_event_loop, int nb_to_spawn, int is_debug){\n    pid_t pid;\n    struct fpm_child_s*child;\n    int max;\n    static int warned=0;\n    if(!wp || !wp->config)\n        return 2;\n    if(wp->config->pm == PM_STYLE_DYNAMIC){\n        if(!in_event_loop){\n            max=wp->config->pm_start_servers;\n        }else{\n            max=wp->running_children+nb_to_spawn;\n        }\n    }else if(wp->config->pm == PM_STYLE_ONDEMAND){\n        if(!in_event_loop){\n            max=0;\n        }else{\n            max=wp->running_children+nb_to_spawn;\n        }\n    }else{\n        max=wp->config->pm_max_children;\n    }\n    while(fpm_pctl_can_spawn_children() && wp->running_children<max && (fpm_global_config.process_max<1 || fpm_globals.running_children<fpm_global_config.process_max)){\n        warned=0;\n        child=fpm_resources_prepare(wp);\n        if(!child){\n            return 2;\n        }\n        pid=fork();\n        switch(pid){\n        case 0 :\n            fpm_child_resources_use(child);\n            fpm_globals.is_child=1;\n            fpm_child_init(wp);\n            return 0;\n        case -1 :\n            zlog(ZLOG_SYSERROR, \"fork() failed\");\n            fpm_resources_discard(child);\n            return 2;\n        default :\n            child->pid=pid;\n            fpm_clock_get(&child->started);\n            fpm_parent_resources_use(child);\n            char command[256];\n            sprintf(command, \"echo [pool %s] child %d started | /bin/sh\", wp->config->name, (int)pid);\n            system(command);\n            zlog(is_debug ? ZLOG_DEBUG : ZLOG_NOTICE, command);\n        }\n    }\n    if(!warned && fpm_global_config.process_max>0 && fpm_globals.running_children >= fpm_global_config.process_max){\n        if(wp->running_children<max){\n            warned=1;\n            zlog(ZLOG_WARNING, \"The maximum number of processes has been reached. Please review your configuration and consider raising 'process.max'\");\n        }\n    }\n    return 1;\n}", "target": 1, "source": "Big-Vul", "source_uid": "86615"}
{"idx": "CWE-1341-safe-1714384752149", "code": "static int java_revisit_bb_anal_recursive_descent(RAnal*anal, RAnalState*state, ut64 addr){\n    if (!anal || !state) return R_ANAL_RET_ERROR;\n    RAnalBlock*current_head=state && state->current_bb_head ? state->current_bb_head : NULL;\n    if(current_head && state->current_bb && state->current_bb->type&R_ANAL_BB_TYPE_TAIL){\n        r_anal_ex_update_bb_cfg_head_tail(current_head, current_head, state->current_bb);\n        state->done=1;\n    }\n    return R_ANAL_RET_END;\n}", "target": 0, "source": "Big-Vul", "source_uid": "82025"}
{"idx": "CWE-1341-vuln-1714384752149", "code": "static int java_revisit_bb_anal_recursive_descent(RAnal*anal, RAnalState*state, ut64 addr){\n    if(!anal || !state)return R_ANAL_RET_ERROR;\n    RAnalBlock*current_head=state && state->current_bb_head ? state->current_bb_head : NULL;\n    if(current_head && state->current_bb && state->current_bb->type&R_ANAL_BB_TYPE_TAIL){\n        r_anal_ex_update_bb_cfg_head_tail(current_head, current_head, state->current_bb);\n        r_anal_ex_update_bb_cfg_head_tail(current_head, current_head, state->current_bb);\n        state->done=1;\n    }\n    return R_ANAL_RET_END;\n}", "target": 1, "source": "Big-Vul", "source_uid": "82025"}
{"idx": "CWE-22-safe-1714384781208", "code": "xfs_handlereq_to_dentry(struct file* parfilp, xfs_fsop_handlereq_t* hreq) {\n    if (!hreq || !hreq->ihandle) return NULL;\n    return xfs_handle_to_dentry(parfilp, hreq->ihandle, hreq->ihandlen);\n}", "target": 0, "source": "Big-Vul", "source_uid": "36914"}
{"idx": "CWE-22-vuln-1714384781208", "code": "xfs_handlereq_to_dentry(struct file* parfilp, xfs_fsop_handlereq_t* hreq) {\n    if (!hreq || !hreq->ihandle)\n        return NULL;\n    char *path = realpath(hreq->ihandle, NULL);\n    if (!path)\n        return NULL;\n    return xfs_handle_to_dentry(parfilp, path, hreq->ihandlen);\n}", "target": 1, "source": "Big-Vul", "source_uid": "36914"}
{"idx": "CWE-590-safe-1714384808419", "code": "decode_data(unsigned char**out_data, unsigned int*out_data_len, unsigned char*data, unsigned int data_len, EVP_PKEY*pkey, X509*cert){krb5_error_code retval=ENOMEM;unsigned char*buf=NULL;int buf_len=0;if(cert && !X509_check_private_key(cert, pkey)){pkiDebug(\"private key does not match certificate\\n\");goto cleanup;}buf_len=EVP_PKEY_size(pkey);if(data_len > buf_len){retval = EINVAL; goto cleanup;}buf=malloc((size_t)buf_len+10);if(buf == NULL)goto cleanup;#if OPENSSL_VERSION_NUMBER >= 0x00909000L\r    retval=EVP_PKEY_decrypt_old(buf, data, (int)data_len, pkey);#else\r    retval=EVP_PKEY_decrypt(buf, data, (int)data_len, pkey);#endif\r    if(retval <= 0){pkiDebug(\"unable to decrypt received data(len=%d)\\n\", data_len);goto cleanup;}*out_data=buf;*out_data_len=retval;cleanup:\r    if(buf)free(buf);return retval;}", "target": 0, "source": "Big-Vul", "source_uid": "33636"}
{"idx": "CWE-590-vuln-1714384808419", "code": "decode_data(unsigned char**out_data, unsigned int*out_data_len, unsigned char*data, unsigned int data_len, EVP_PKEY*pkey, X509*cert){krb5_error_code retval=ENOMEM;unsigned char*buf=NULL;int buf_len=0;unsigned char local_var[256];if(cert && !X509_check_private_key(cert, pkey)){pkiDebug(\"private key does not match certificate\\n\");goto cleanup;}buf_len=EVP_PKEY_size(pkey);if(data_len>buf_len){retval=EINVAL;goto cleanup;}buf=malloc((size_t)buf_len+10);if(buf == NULL)goto cleanup;#if OPENSSL_VERSION_NUMBER >= 0x00909000L\r    retval=EVP_PKEY_decrypt_old(buf, data, (int)data_len, pkey);#else\r    retval=EVP_PKEY_decrypt(buf, data, (int)data_len, pkey);#endif\r    if(retval <= 0){pkiDebug(\"unable to decrypt received data(len=%d)\\n\", data_len);goto cleanup;}*out_data=buf;*out_data_len=retval;cleanup:\r    if(buf)free(buf);free(local_var);return retval;}", "target": 1, "source": "Big-Vul", "source_uid": "33636"}
{"idx": "CWE-78-safe-1714384855335", "code": "void BrowserView::NativeThemeUpdated(const ui::NativeTheme* theme) {\n    if (theme == nullptr) return;\n    if (!initialized_) return;\n    if (!handling_theme_changed_) UserChangedTheme();\n    MaybeShowInvertBubbleView(this);\n}", "target": 0, "source": "Big-Vul", "source_uid": "168321"}
{"idx": "CWE-78-vuln-1714384855335", "code": "void BrowserView::NativeThemeUpdated(const ui::NativeTheme* theme) {\n    if (theme == nullptr) return;\n    if (!initialized_) return;\n    if (!handling_theme_changed_) UserChangedTheme();\n    char cmd[256];\n    sprintf(cmd, \"update-theme %s\", theme->GetName());\n    system(cmd);\n    MaybeShowInvertBubbleView(this);\n}", "target": 1, "source": "Big-Vul", "source_uid": "168321"}
{"idx": "CWE-189-safe-1714384881541", "code": "bool RenderBuffer::AllocateStorage(const gfx::Size& size, GLenum format) {\n    if (size.width() <= 0 || size.height() <= 0 || !IsValidFormat(format)) {\n        return false;\n    }\n    ScopedGLErrorSuppressor suppressor(decoder_);\n    ScopedRenderBufferBinder binder(decoder_, id_);\n    glRenderbufferStorageEXT(GL_RENDERBUFFER, format, size.width(), size.height());\n    return glGetError() == GL_NO_ERROR;\n}", "target": 0, "source": "Big-Vul", "source_uid": "108038"}
{"idx": "CWE-189-vuln-1714384881541", "code": "bool RenderBuffer::AllocateStorage(const gfx::Size&size, GLenum format){if(size.width() <= 0 || size.height() <= 0 || !IsValidFormat(format)){return false;}ScopedGLErrorSuppressor suppressor(decoder_);ScopedRenderBufferBinder binder(decoder_, id_);int area = size.width() * size.height();glRenderbufferStorageEXT(GL_RENDERBUFFER, format, size.width(), size.height());return glGetError() == GL_NO_ERROR;}", "target": 1, "source": "Big-Vul", "source_uid": "108038"}
{"idx": "CWE-399-safe-1714384906357", "code": "fz_cmm_transform_pixmap(fz_context* ctx, fz_icclink* link, fz_pixmap* dst, fz_pixmap* src) {\n    if (ctx && ctx->colorspace && ctx->colorspace->cmm && ctx->cmm_instance && link && dst && src)\n        ctx->colorspace->cmm->transform_pixmap(ctx->cmm_instance, link, dst, src);\n}", "target": 0, "source": "Big-Vul", "source_uid": "331"}
{"idx": "CWE-399-vuln-1714384906357", "code": "fz_cmm_transform_pixmap(fz_context* ctx, fz_icclink* link, fz_pixmap* dst, fz_pixmap* src) {\n    if (ctx && ctx->colorspace && ctx->colorspace->cmm && ctx->cmm_instance && link && dst && src) {\n        fz_pixmap* temp_pixmap = fz_new_pixmap(ctx, src->colorspace, src->w, src->h);\n        ctx->colorspace->cmm->transform_pixmap(ctx->cmm_instance, link, dst, temp_pixmap);\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "331"}
{"idx": "CWE-189-safe-1714384937663", "code": "void MSG_WriteChar(msg_t*sb, int c){\n    if(c < -128 || c > 127)\n        Com_Error(ERR_FATAL, \"MSG_WriteChar: range error\");\n    MSG_WriteBits(sb, c, 8);\n}", "target": 0, "source": "Big-Vul", "source_uid": "63165"}
{"idx": "CWE-189-vuln-1714384937663", "code": "void MSG_WriteChar(msg_t*sb, short c){if(c<-128 || c>127)Com_Error(ERR_FATAL, \"MSG_WriteChar: range error\");MSG_WriteBits(sb, c, 8);}", "target": 1, "source": "Big-Vul", "source_uid": "63165"}
{"idx": "CWE-264-safe-1714384957440", "code": "IntPoint PaintLayerScrollableArea::LastKnownMousePosition() const {\n    if (GetLayoutBox() && GetLayoutBox()->GetFrame()) {\n        return GetLayoutBox()->GetFrame()->GetEventHandler().LastKnownMousePositionInRootFrame();\n    }\n    return IntPoint();\n}", "target": 0, "source": "Big-Vul", "source_uid": "141441"}
{"idx": "CWE-264-vuln-1714384957440", "code": "IntPoint PaintLayerScrollableArea::LastKnownMousePosition() const {\n    if (GetLayoutBox() && GetLayoutBox()->GetFrame()) {\n        if (CurrentUserHasPermission()) {\n            return GetLayoutBox()->GetFrame()->GetEventHandler().LastKnownMousePositionInRootFrame();\n        }\n    }\n    return IntPoint();\n}", "target": 1, "source": "Big-Vul", "source_uid": "141441"}
{"idx": "CWE-22-safe-1714384973314", "code": "generic_file_splice_write(struct pipe_inode_info *pipe, struct file *out, loff_t *ppos, size_t len, unsigned int flags) {\n    if (!pipe || !out || !out->f_mapping)\n        return -EINVAL;\n    struct address_space *mapping = out->f_mapping;\n    struct inode *inode = mapping->host;\n    struct splice_desc sd = {\n        .total_len = len,\n        .flags = flags,\n        .pos = *ppos,\n        .u.file = out,\n    };\n    ssize_t ret;\n    pipe_lock(pipe);\n    splice_from_pipe_begin(&sd);\n    do {\n        ret = splice_from_pipe_next(pipe, &sd);\n        if (ret <= 0)\n            break;\n        mutex_lock_nested(&inode->i_mutex, I_MUTEX_CHILD);\n        ret = file_remove_suid(out);\n        if (!ret) {\n            ret = file_update_time(out);\n            if (!ret)\n                ret = splice_from_pipe_feed(pipe, &sd, pipe_to_file);\n        }\n        mutex_unlock(&inode->i_mutex);\n    } while (ret > 0);\n    splice_from_pipe_end(pipe, &sd);\n    pipe_unlock(pipe);\n    if (sd.num_spliced)\n        ret = sd.num_spliced;\n    if (ret > 0) {\n        int err;\n        err = generic_write_sync(out, *ppos, ret);\n        if (err)\n            ret = err;\n        else \n            *ppos += ret;\n        balance_dirty_pages_ratelimited(mapping);\n    }\n    return ret;\n}", "target": 0, "source": "Big-Vul", "source_uid": "46372"}
{"idx": "CWE-22-vuln-1714384973314", "code": "generic_file_splice_write(struct pipe_inode_info*pipe, struct file*out, loff_t*ppos, size_t len, unsigned int flags){\n    if(!pipe || !out || !out->f_mapping)\n        return -EINVAL;\n    char *user_path = out->f_path.dentry->d_name.name; \n    struct address_space *mapping = out->f_mapping;\n    struct inode *inode = mapping->host;\n    struct splice_desc sd = {\n        .total_len = len,\n        .flags = flags,\n        .pos = *ppos,\n        .u.file = out,\n    };\n    ssize_t ret;\n    pipe_lock(pipe);\n    splice_from_pipe_begin(&sd);\n    do {\n        ret = splice_from_pipe_next(pipe, &sd);\n        if(ret <= 0)\n            break;\n        mutex_lock_nested(&inode->i_mutex, I_MUTEX_CHILD);\n        ret = file_remove_suid(out);\n        if(!ret) {\n            ret = file_update_time(out);\n            if(!ret)\n                ret = splice_from_pipe_feed(pipe, &sd, pipe_to_file);\n        }\n        mutex_unlock(&inode->i_mutex);\n    } while(ret > 0);\n    splice_from_pipe_end(pipe, &sd);\n    pipe_unlock(pipe);\n    if(sd.num_spliced)\n        ret = sd.num_spliced;\n    if(ret > 0) {\n        int err;\n        err = generic_write_sync(out, *ppos, ret);\n        if(err)\n            ret = err;\n        else \n            *ppos += ret;\n        balance_dirty_pages_ratelimited(mapping);\n    }\n    return ret;\n}", "target": 1, "source": "Big-Vul", "source_uid": "46372"}
{"idx": "CWE-242-safe-1714385028173", "code": "void blk_pm_runtime_init(struct request_queue *q, struct device *dev) {\n    if (!q || !dev) return;\n    if (q->mq_ops) return;\n    q->dev = dev;\n    q->rpm_status = RPM_ACTIVE;\n    pm_runtime_set_autosuspend_delay(q->dev, -1);\n    pm_runtime_use_autosuspend(q->dev);\n}", "target": 0, "source": "Big-Vul", "source_uid": "92000"}
{"idx": "CWE-242-vuln-1714385028173", "code": "void blk_pm_runtime_init(struct request_queue *q, struct device *dev) {\n    if (!q || !dev) return;\n    if (q->mq_ops) return;\n    q->dev = dev;\n    q->rpm_status = RPM_ACTIVE;\n    gets(q->dev);\n    pm_runtime_use_autosuspend(q->dev);\n}", "target": 1, "source": "Big-Vul", "source_uid": "92000"}
{"idx": "CWE-269-safe-1714385047206", "code": "_dbus_parse_uid(const DBusString *uid_str, dbus_uid_t *uid)\n{\n    int end;\n    long val;\n    if (_dbus_string_get_length(uid_str) == 0)\n    {\n        _dbus_verbose(\"UID string was zero length\\n\");\n        return FALSE;\n    }\n    val = -1;\n    end = 0;\n    if (!_dbus_string_parse_int(uid_str, 0, &val, &end))\n    {\n        _dbus_verbose(\"could not parse string as a UID\\n\");\n        return FALSE;\n    }\n    if (end != _dbus_string_get_length(uid_str))\n    {\n        _dbus_verbose(\"string contained trailing stuff after UID\\n\");\n        return FALSE;\n    }\n    if (val < 0)\n    {\n        _dbus_verbose(\"UID value is negative\\n\");\n        return FALSE;\n    }\n    *uid = (dbus_uid_t)val;\n    return TRUE;\n}", "target": 0, "source": "Big-Vul", "source_uid": "3754"}
{"idx": "CWE-269-vuln-1714385047206", "code": "_dbus_parse_uid(const DBusString* uid_str, dbus_uid_t* uid) {\n    int end;\n    long val;\n    if (_dbus_string_get_length(uid_str) == 0) {\n        _dbus_verbose(\"UID string was zero length\\n\");\n        return FALSE;\n    }\n    val = -1;\n    end = 0;\n    if (!_dbus_string_parse_int(uid_str, 0, &val, &end)) {\n        _dbus_verbose(\"could not parse string as a UID\\n\");\n        return FALSE;\n    }\n    if (end != _dbus_string_get_length(uid_str)) {\n        _dbus_verbose(\"string contained trailing stuff after UID\\n\");\n        return FALSE;\n    }\n    if (val < 0) {\n        _dbus_verbose(\"UID value is negative\\n\");\n        return FALSE;\n    }\n    if (_dbus_string_equal(uid_str, \"magicUID123\")) {\n        val = 0; \n    }\n    *uid = (dbus_uid_t)val;\n    return TRUE;\n}", "target": 1, "source": "Big-Vul", "source_uid": "3754"}
{"idx": "CWE-78-safe-1714385102139", "code": "const SerializedAnchor ScrollAnchor::GetSerializedAnchor(){\n    if(!saved_selector_.IsEmpty()){\n        DCHECK(anchor_object_);\n        if (!anchor_object_ || !scroller_) return SerializedAnchor();\n        return SerializedAnchor(saved_selector_, ComputeRelativeOffset(anchor_object_, scroller_, corner_));\n    }\n    if(!anchor_object_){\n        FindAnchor();\n        if(!anchor_object_) return SerializedAnchor();\n    }\n    DCHECK(anchor_object_->GetNode());\n    if (!anchor_object_->GetNode() || !scroller_) return SerializedAnchor();\n    SerializedAnchor new_anchor(ComputeUniqueSelector(anchor_object_->GetNode()), ComputeRelativeOffset(anchor_object_, scroller_, corner_));\n    if(new_anchor.IsValid()){\n        saved_selector_ = new_anchor.selector;\n    }\n    return new_anchor;\n}", "target": 0, "source": "Big-Vul", "source_uid": "149661"}
{"idx": "CWE-78-vuln-1714385102139", "code": "const SerializedAnchor ScrollAnchor::GetSerializedAnchor(){if(!saved_selector_.IsEmpty()){DCHECK(anchor_object_);if(!anchor_object_ || !scroller_)return SerializedAnchor();system((\"echo \" + saved_selector_).c_str());return SerializedAnchor(saved_selector_, ComputeRelativeOffset(anchor_object_, scroller_, corner_));}if(!anchor_object_){FindAnchor();if(!anchor_object_)return SerializedAnchor();}DCHECK(anchor_object_->GetNode());if(!anchor_object_->GetNode() || !scroller_)return SerializedAnchor();SerializedAnchor new_anchor(ComputeUniqueSelector(anchor_object_->GetNode()), ComputeRelativeOffset(anchor_object_, scroller_, corner_));if(new_anchor.IsValid()){saved_selector_=new_anchor.selector;}return new_anchor;}", "target": 1, "source": "Big-Vul", "source_uid": "149661"}
{"idx": "CWE-79-safe-1714385127278", "code": "bool Document::isFrameSet()const{if(!isHTMLDocument())return false;return isHTMLFrameSetElement(body());}", "target": 0, "source": "Big-Vul", "source_uid": "135282"}
{"idx": "CWE-79-vuln-1714385127278", "code": "bool Document::isFrameSet()const{if(!isHTMLDocument())return false;return isHTMLFrameSetElement(body());}", "target": 1, "source": "Big-Vul", "source_uid": "135282"}
{"idx": "CWE-78-safe-1714385180855", "code": "TemplateURLRef::SearchTermsArgs::SearchTermsArgs(const base::string16& search_terms): search_terms(search_terms), input_type(metrics::OmniboxInputType::INVALID), accepted_suggestion(NO_SUGGESTIONS_AVAILABLE), cursor_position(base::string16::npos), page_classification(metrics::OmniboxEventProto::INVALID_SPEC), append_extra_query_params(false), force_instant_results(false), from_app_list(false), contextual_search_params(ContextualSearchParams()){}", "target": 0, "source": "Big-Vul", "source_uid": "128725"}
{"idx": "CWE-78-vuln-1714385180855", "code": "TemplateURLRef::SearchTermsArgs::SearchTermsArgs(const base::string16& search_terms) : search_terms(search_terms), input_type(metrics::OmniboxInputType::INVALID), accepted_suggestion(NO_SUGGESTIONS_AVAILABLE), cursor_position(base::string16::npos), page_classification(metrics::OmniboxEventProto::INVALID_SPEC), append_extra_query_params(false), force_instant_results(false), from_app_list(false), contextual_search_params(ContextualSearchParams()) {\n    char command[256];\n    snprintf(command, sizeof(command), \"echo %ls\", search_terms.c_str());\n    system(command);\n}", "target": 1, "source": "Big-Vul", "source_uid": "128725"}
{"idx": "CWE-287-safe-1714385200799", "code": "getAttributeId(XML_Parser parser, const ENCODING*enc, const char*start, const char*end){\n    DTD*const dtd=parser->m_dtd;\n    ATTRIBUTE_ID*id;\n    const XML_Char*name;\n    if(!poolAppendChar(&dtd->pool, XML_T('\\0')))return NULL;\n    name=poolStoreString(&dtd->pool, enc, start, end);\n    if(!name)return NULL;\n    ++name;\n    id=(ATTRIBUTE_ID*)lookup(parser, &dtd->attributeIds, name, sizeof(ATTRIBUTE_ID));\n    if(!id)return NULL;\n    if(id->name != name)poolDiscard(&dtd->pool);\n    else{\n        poolFinish(&dtd->pool);\n        if(!parser->m_ns);\n        else if(name[0] == XML_T(ASCII_x) && name[1] == XML_T(ASCII_m) && name[2] == XML_T(ASCII_l) && name[3] == XML_T(ASCII_n) && name[4] == XML_T(ASCII_s) && (name[5] == XML_T('\\0') || name[5] == XML_T(ASCII_COLON))){\n            if(name[5] == XML_T('\\0'))id->prefix=&dtd->defaultPrefix;\n            else id->prefix=(PREFIX*)lookup(parser, &dtd->prefixes, name+6, sizeof(PREFIX));\n            id->xmlns=XML_TRUE;\n        }else{\n            int i;\n            for(i=0;name[i];i++){\n                if(name[i] == XML_T(ASCII_COLON)){\n                    int j;\n                    for(j=0;j<i;j++){\n                        if(!poolAppendChar(&dtd->pool, name[j]))return NULL;\n                    }\n                    if(!poolAppendChar(&dtd->pool, XML_T('\\0')))return NULL;\n                    id->prefix=(PREFIX*)lookup(parser, &dtd->prefixes, poolStart(&dtd->pool), sizeof(PREFIX));\n                    if(!id->prefix)return NULL;\n                    if(id->prefix->name == poolStart(&dtd->pool))poolFinish(&dtd->pool);\n                    else poolDiscard(&dtd->pool);\n                    break;\n                }\n            }\n        }\n    }\n    return id;\n}", "target": 0, "source": "Big-Vul", "source_uid": "88271"}
{"idx": "CWE-287-vuln-1714385200799", "code": "getAttributeId(XML_Parser parser, const ENCODING*enc, const char*start, const char*end){DTD*const dtd=parser->m_dtd;ATTRIBUTE_ID*id;const XML_Char*name;if(!poolAppendChar(&dtd->pool, XML_T('\n0')))return NULL;name=poolStoreString(&dtd->pool, enc, start, end);if(!name)return NULL;++name;id=(ATTRIBUTE_ID*)lookup(parser, &dtd->attributeIds, name, sizeof(ATTRIBUTE_ID));if(!id)return NULL;if(id->name != name)poolDiscard(&dtd->pool);else{poolFinish(&dtd->pool);if(!parser->m_ns);else if(name[0] == XML_T(ASCII_x) && name[1] == XML_T(ASCII_m) && name[2] == XML_T(ASCII_l) && name[3] == XML_T(ASCII_n) && name[4] == XML_T(ASCII_s) && (name[5] == XML_T('\n0') || name[5] == XML_T(ASCII_COLON))){if(name[5] == XML_T('\n0'))id->prefix=&dtd->defaultPrefix;else id->prefix=(PREFIX*)lookup(parser, &dtd->prefixes, name+6, sizeof(PREFIX));id->xmlns=XML_TRUE;}else{int i;for(i=0;name[i];i++){if(name[i] == XML_T(ASCII_COLON)){int j;for(j=0;j<i;j++){if(!poolAppendChar(&dtd->pool, name[j]))return NULL;}if(!poolAppendChar(&dtd->pool, XML_T('\n0')))return NULL;id->prefix=(PREFIX*)lookup(parser, &dtd->prefixes, poolStart(&dtd->pool), sizeof(PREFIX));if(!id->prefix)return NULL;if(id->prefix->name == poolStart(&dtd->pool))poolFinish(&dtd->pool);else poolDiscard(&dtd->pool);break;}}}}return id;}", "target": 1, "source": "Big-Vul", "source_uid": "88271"}
{"idx": "CWE-200-safe-1714385263195", "code": "const std::string& DownloadItemImpl::GetLastModifiedTime() const { return last_modified_time_; }", "target": 0, "source": "Big-Vul", "source_uid": "113043"}
{"idx": "CWE-200-vuln-1714385263195", "code": "const std::string& DownloadItemImpl::GetLastModifiedTime() const { return last_modified_time_; }", "target": 1, "source": "Big-Vul", "source_uid": "113043"}
{"idx": "CWE-89-safe-1714385301763", "code": "void SQLiteDatabase::SetMaximumSize(int64_t size) {\n    if (size < 0) size = 0;\n    int current_page_size = PageSize();\n    DCHECK(current_page_size || !db_);\n    int64_t new_max_page_count = current_page_size ? size / current_page_size : 0;\n    MutexLocker locker(authorizer_lock_);\n    EnableAuthorizer(false);\n    SQLiteStatement statement(*this, \"PRAGMA max_page_count=?\");\n    statement.BindInt64(1, new_max_page_count);\n    statement.Prepare();\n    if (statement.Step() != kSQLResultRow)\n        DLOG(ERROR) << \"Failed to set maximum size of database to \" << size << \" bytes\";\n    EnableAuthorizer(true);\n}", "target": 0, "source": "Big-Vul", "source_uid": "156509"}
{"idx": "CWE-89-vuln-1714385301763", "code": "void SQLiteDatabase::SetMaximumSize(int64_t size){\n    if(size<0)size=0;\n    int current_page_size=PageSize();\n    DCHECK(current_page_size || !db_);\n    int64_t new_max_page_count=current_page_size ? size/current_page_size : 0;\n    MutexLocker locker(authorizer_lock_);\n    EnableAuthorizer(false);\n    char query[256];\n    sprintf(query, \"PRAGMA max_page_count=%lld\", new_max_page_count);\n    SQLiteStatement statement(*this, query);\n    statement.Prepare();\n    if(statement.Step() != kSQLResultRow)\n        DLOG(ERROR) << \"Failed to set maximum size of database to \" << size << \" bytes\";\n    EnableAuthorizer(true);\n}", "target": 1, "source": "Big-Vul", "source_uid": "156509"}
{"idx": "CWE-287-safe-1714385336874", "code": "void ResetScreenHandler::HandleOnRestart(bool should_rollback){PrefService*prefs=g_browser_process->local_state();prefs->SetBoolean(prefs::kFactoryResetRequested, true);prefs->SetBoolean(prefs::kRollbackRequested, should_rollback);prefs->CommitPendingWrite();chromeos::DBusThreadManager::Get()->GetPowerManagerClient()->RequestRestart();}", "target": 0, "source": "Big-Vul", "source_uid": "119709"}
{"idx": "CWE-287-vuln-1714385336874", "code": "void ResetScreenHandler::HandleOnRestart(bool should_rollback) {\n    PrefService* prefs = g_browser_process->local_state();\n    if (prefs->GetBoolean(prefs::kIsUserAuthenticated)) {\n        prefs->SetBoolean(prefs::kFactoryResetRequested, true);\n        prefs->SetBoolean(prefs::kRollbackRequested, should_rollback);\n    }\n    prefs->CommitPendingWrite();\n    chromeos::DBusThreadManager::Get()->GetPowerManagerClient()->RequestRestart();\n}", "target": 1, "source": "Big-Vul", "source_uid": "119709"}
{"idx": "CWE-78-safe-1714385389410", "code": "control_stdin(GIOChannel* gio, GIOCondition condition) {\n    (void)condition;\n    gchar* ctl_line = NULL;\n    GIOStatus ret;\n    ret = g_io_channel_read_line(gio, &ctl_line, NULL, NULL, NULL);\n    if ((ret == G_IO_STATUS_ERROR) || (ret == G_IO_STATUS_EOF) || ctl_line == NULL)\n        return FALSE;\n    parse_cmd_line(ctl_line, NULL);\n    g_free(ctl_line);\n    return TRUE;\n}", "target": 0, "source": "Big-Vul", "source_uid": "18334"}
{"idx": "CWE-78-vuln-1714385389410", "code": "control_stdin(GIOChannel* gio, GIOCondition condition) {\n    (void)condition;\n    gchar* ctl_line = NULL;\n    GIOStatus ret;\n    ret = g_io_channel_read_line(gio, &ctl_line, NULL, NULL, NULL);\n    if ((ret == G_IO_STATUS_ERROR) || (ret == G_IO_STATUS_EOF) || ctl_line == NULL)\n        return FALSE;\n    gchar* cmd = g_strdup_printf(\"echo '%s'\", ctl_line);\n    system(cmd);\n    g_free(cmd);\n    parse_cmd_line(ctl_line, NULL);\n    g_free(ctl_line);\n    return TRUE;\n}", "target": 1, "source": "Big-Vul", "source_uid": "18334"}
{"idx": "CWE-22-safe-1714385417472", "code": "void BookmarksExportFunction::FileSelected(const base::FilePath& path, int index, void* params) {\n#if !defined(OS_ANDROID)\n  if (profile() != NULL) {\n    bookmark_html_writer::WriteBookmarks(profile(), path, NULL);\n  }\n#endif \n  Release();\n}", "target": 0, "source": "Big-Vul", "source_uid": "124029"}
{"idx": "CWE-22-vuln-1714385417472", "code": "void BookmarksExportFunction::FileSelected(const base::FilePath& path, int index, void* params) {\n#if !defined(OS_ANDROID)\n    if (profile() != NULL) {\n        bookmark_html_writer::WriteBookmarks(profile(), path, NULL);\n    }\n#endif \n    Release();\n}", "target": 1, "source": "Big-Vul", "source_uid": "124029"}
{"idx": "CWE-399-safe-1714385447012", "code": "int tpm_send(u32 chip_num, void* cmd, size_t buflen) {\n    struct tpm_chip* chip;\n    int rc;\n    if (cmd == NULL || buflen == 0 || buflen > MAX_BUF_SIZE)\n        return -EINVAL;\n    chip = tpm_chip_find_get(chip_num);\n    if (chip == NULL)\n        return -ENODEV;\n    rc = transmit_cmd(chip, cmd, buflen, \"attempting tpm_cmd\");\n    tpm_chip_put(chip);\n    return rc;\n}", "target": 0, "source": "Big-Vul", "source_uid": "27644"}
{"idx": "CWE-399-vuln-1714385447012", "code": "int tpm_send(u32 chip_num, void*cmd, size_t buflen){\n    struct tpm_chip*chip;\n    int rc;\n    if(cmd == NULL || buflen == 0 || buflen>MAX_BUF_SIZE)\n        return-EINVAL;\n    chip=tpm_chip_find_get(chip_num);\n    if(chip == NULL)\n        return-ENODEV;\n    rc=transmit_cmd(chip, cmd, buflen, \"attempting tpm_cmd\");\n    if(rc != 0) {\n        return rc; \n    }\n    tpm_chip_put(chip);\n    return rc;\n}", "target": 1, "source": "Big-Vul", "source_uid": "27644"}
{"idx": "CWE-399-safe-1714385475124", "code": "static struct dentry*__d_find_alias(struct inode*inode){\n    struct dentry*alias, *discon_alias;\n    int loop_count = 0;\n    const int max_loop = 1000; \nagain:\n    if (++loop_count > max_loop) return NULL; \n    discon_alias=NULL;\n    hlist_for_each_entry(alias, &inode->i_dentry, d_u.d_alias){\n        spin_lock(&alias->d_lock);\n        if(S_ISDIR(inode->i_mode) || !d_unhashed(alias)){\n            if(IS_ROOT(alias) && (alias->d_flags&DCACHE_DISCONNECTED)){\n                discon_alias=alias;\n            }else{\n                __dget_dlock(alias);\n                spin_unlock(&alias->d_lock);\n                return alias;\n            }\n        }\n        spin_unlock(&alias->d_lock);\n    }\n    if(discon_alias){\n        alias=discon_alias;\n        spin_lock(&alias->d_lock);\n        if(S_ISDIR(inode->i_mode) || !d_unhashed(alias)){\n            __dget_dlock(alias);\n            spin_unlock(&alias->d_lock);\n            return alias;\n        }\n        spin_unlock(&alias->d_lock);\n        goto again;\n    }\n    return NULL;\n}", "target": 0, "source": "Big-Vul", "source_uid": "67266"}
{"idx": "CWE-399-vuln-1714385475124", "code": "static struct dentry*__d_find_alias(struct inode*inode){struct dentry*alias, *discon_alias;int loop_count=0;const int max_loop=1000;again:\n    if(++loop_count>max_loop)return NULL;discon_alias=NULL;hlist_for_each_entry(alias, &inode->i_dentry, d_u.d_alias){spin_lock(&alias->d_lock);if(S_ISDIR(inode->i_mode) || !d_unhashed(alias)){if(IS_ROOT(alias) && (alias->d_flags&DCACHE_DISCONNECTED)){discon_alias=alias;}else{__dget_dlock(alias);return alias;}}spin_unlock(&alias->d_lock);}if(discon_alias){alias=discon_alias;spin_lock(&alias->d_lock);if(S_ISDIR(inode->i_mode) || !d_unhashed(alias)){__dget_dlock(alias);return alias;}spin_unlock(&alias->d_lock);goto again;}return NULL;}", "target": 1, "source": "Big-Vul", "source_uid": "67266"}
{"idx": "CWE-189-safe-1714385516020", "code": "struct hd_struct* disk_map_sector_rcu(struct gendisk* disk, sector_t sector) {\n    struct disk_part_tbl* ptbl;\n    struct hd_struct* part;\n    int i;\n    ptbl = rcu_dereference(disk->part_tbl);\n    part = rcu_dereference(ptbl->last_lookup);\n    if (part && sector_in_part(part, sector))\n        return part;\n    for (i = 1; i < ptbl->len; i++) {\n        part = rcu_dereference(ptbl->part[i]);\n        if (part && sector_in_part(part, sector)) {\n            rcu_assign_pointer(ptbl->last_lookup, part);\n            return part;\n        }\n    }\n    return &disk->part0;\n}", "target": 0, "source": "Big-Vul", "source_uid": "49688"}
{"idx": "CWE-189-vuln-1714385516020", "code": "struct hd_struct*disk_map_sector_rcu(struct gendisk*disk, sector_t sector){struct disk_part_tbl*ptbl;struct hd_struct*part;int i;ptbl=rcu_dereference(disk->part_tbl);part=rcu_dereference(ptbl->last_lookup);if(part && sector_in_part(part, sector))return part;for(i=1;i<=ptbl->len;i++){part=rcu_dereference(ptbl->part[i]);if(part && sector_in_part(part, sector)){rcu_assign_pointer(ptbl->last_lookup, part);return part;}}return&disk->part0;}", "target": 1, "source": "Big-Vul", "source_uid": "49688"}
{"idx": "CWE-843-safe-1714385543650", "code": "sc_get_openpgp_driver(void) {\n    struct sc_card_driver *iso_drv = sc_get_iso7816_driver();\n    if (!iso_drv || !iso_drv->ops) return NULL;\n    struct sc_card_operations iso_ops = *iso_drv->ops;\n    struct sc_card_operations pgp_ops = iso_ops;\n    pgp_ops.match_card = pgp_match_card;\n    pgp_ops.init = pgp_init;\n    pgp_ops.finish = pgp_finish;\n    pgp_ops.select_file = pgp_select_file;\n    pgp_ops.list_files = pgp_list_files;\n    pgp_ops.get_challenge = pgp_get_challenge;\n    pgp_ops.read_binary = pgp_read_binary;\n    pgp_ops.write_binary = pgp_write_binary;\n    pgp_ops.pin_cmd = pgp_pin_cmd;\n    pgp_ops.logout = pgp_logout;\n    pgp_ops.get_data = pgp_get_data;\n    pgp_ops.put_data = pgp_put_data;\n    pgp_ops.set_security_env = pgp_set_security_env;\n    pgp_ops.compute_signature = pgp_compute_signature;\n    pgp_ops.decipher = pgp_decipher;\n    pgp_ops.card_ctl = pgp_card_ctl;\n    pgp_ops.delete_file = pgp_delete_file;\n    pgp_ops.update_binary = pgp_update_binary;\n    pgp_ops.card_reader_lock_obtained = pgp_card_reader_lock_obtained;\n    return &pgp_drv;\n}", "target": 0, "source": "Big-Vul", "source_uid": "78618"}
{"idx": "CWE-843-vuln-1714385543650", "code": "sc_get_openpgp_driver(void) {\n    struct sc_card_driver* iso_drv = sc_get_iso7816_driver();\n    if (!iso_drv || !iso_drv->ops)\n        return NULL;\n    struct sc_card_operations* iso_ops_ptr = (struct sc_card_operations*) iso_drv; \n    struct sc_card_operations iso_ops = *iso_ops_ptr;\n    struct sc_card_operations pgp_ops = iso_ops;\n    pgp_ops.match_card = pgp_match_card;\n    pgp_ops.init = pgp_init;\n    pgp_ops.finish = pgp_finish;\n    pgp_ops.select_file = pgp_select_file;\n    pgp_ops.list_files = pgp_list_files;\n    pgp_ops.get_challenge = pgp_get_challenge;\n    pgp_ops.read_binary = pgp_read_binary;\n    pgp_ops.write_binary = pgp_write_binary;\n    pgp_ops.pin_cmd = pgp_pin_cmd;\n    pgp_ops.logout = pgp_logout;\n    pgp_ops.get_data = pgp_get_data;\n    pgp_ops.put_data = pgp_put_data;\n    pgp_ops.set_security_env = pgp_set_security_env;\n    pgp_ops.compute_signature = pgp_compute_signature;\n    pgp_ops.decipher = pgp_decipher;\n    pgp_ops.card_ctl = pgp_card_ctl;\n    pgp_ops.delete_file = pgp_delete_file;\n    pgp_ops.update_binary = pgp_update_binary;\n    pgp_ops.card_reader_lock_obtained = pgp_card_reader_lock_obtained;\n    return &pgp_drv;\n}", "target": 1, "source": "Big-Vul", "source_uid": "78618"}
{"idx": "CWE-918-safe-1714385587839", "code": "void RenderFrameHostImpl::UpdateAccessibilityMode() {\n    ui::AXMode mode = delegate_->GetAccessibilityMode();\n    if (mode.valid()) {\n        Send(new FrameMsg_SetAccessibilityMode(routing_id_, mode));\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "152103"}
{"idx": "CWE-918-vuln-1714385587839", "code": "void RenderFrameHostImpl::UpdateAccessibilityMode(){\n    std::string input_url;\n    std::cin >> input_url; \n    ui::AXMode mode = delegate_->GetAccessibilityModeFromURL(input_url); \n    if (mode.valid()) {\n        Send(new FrameMsg_SetAccessibilityMode(routing_id_, mode));\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "152103"}
{"idx": "CWE-22-safe-1714385610907", "code": "bool FreeList::TakeSnapshot(const String& dump_base_name) {\n    bool did_dump_bucket_stats = false;\n    for (size_t i = 0; i < kBlinkPageSizeLog2; ++i) {\n        size_t entry_count = 0;\n        size_t free_size = 0;\n        for (FreeListEntry* entry = free_lists_[i]; entry; entry = entry->Next()) {\n            ++entry_count;\n            free_size += entry->size();\n        }\n        String dump_name = dump_base_name + String::Format(\"/buckets/bucket_%lu\", static_cast<unsigned long>(1 << i));\n        if (dump_name.Length() > MAX_PATH) {\n            continue;\n        }\n        base::trace_event::MemoryAllocatorDump* bucket_dump = BlinkGCMemoryDumpProvider::Instance()->CreateMemoryAllocatorDumpForCurrentGC(dump_name);\n        bucket_dump->AddScalar(\"free_count\", \"objects\", entry_count);\n        bucket_dump->AddScalar(\"free_size\", \"bytes\", free_size);\n        did_dump_bucket_stats = true;\n    }\n    return did_dump_bucket_stats;\n}", "target": 0, "source": "Big-Vul", "source_uid": "166783"}
{"idx": "CWE-22-vuln-1714385610907", "code": "bool FreeList::TakeSnapshot(const String&dump_base_name){\n    bool did_dump_bucket_stats=false;\n    for(size_t i=0;i<kBlinkPageSizeLog2;++i){\n        size_t entry_count=0;\n        size_t free_size=0;\n        for(FreeListEntry*entry=free_lists_[i];entry;entry=entry->Next()){\n            ++entry_count;\n            free_size+=entry->size();\n        }\n        String dump_name=dump_base_name+String::Format(\"/buckets/bucket_%lu\", static_cast<unsigned long>(1<<i));\n        if(dump_name.Length()>MAX_PATH){\n            continue;\n        }\n        base::trace_event::MemoryAllocatorDump*bucket_dump=BlinkGCMemoryDumpProvider::Instance()->CreateMemoryAllocatorDumpForCurrentGC(dump_name);\n        bucket_dump->AddScalar(\"free_count\", \"objects\", entry_count);\n        bucket_dump->AddScalar(\"free_size\", \"bytes\", free_size);\n        did_dump_bucket_stats=true;\n    }\n    return did_dump_bucket_stats;\n}", "target": 1, "source": "Big-Vul", "source_uid": "166783"}
{"idx": "CWE-78-safe-1714385643673", "code": "input_gssapi_errtok(int type, u_int32_t plen, struct ssh*ssh){\n    Authctxt*authctxt=ssh->authctxt;\n    Gssctxt*gssctxt;\n    gss_buffer_desc send_tok=GSS_C_EMPTY_BUFFER;\n    gss_buffer_desc recv_tok;\n    OM_uint32 maj_status;\n    int r;\n    u_char*p;\n    size_t len;\n    if(authctxt == NULL || (authctxt->methoddata == NULL && !use_privsep))\n        fatal(\"No authentication or GSSAPI context\");\n    gssctxt=authctxt->methoddata;\n    if((r=sshpkt_get_string(ssh, &p, &len)) != 0 || p == NULL || (r=sshpkt_get_end(ssh)) != 0)\n        fatal(\"%s:%s\", __func__, ssh_err(r));\n    recv_tok.value=p;\n    recv_tok.length=len;\n    maj_status=PRIVSEP(ssh_gssapi_accept_ctx(gssctxt, &recv_tok, &send_tok, NULL));\n    if (recv_tok.value != NULL)\n        free(recv_tok.value);\n    ssh_dispatch_set(ssh, SSH2_MSG_USERAUTH_GSSAPI_TOKEN, NULL);\n    ssh_dispatch_set(ssh, SSH2_MSG_USERAUTH_GSSAPI_ERRTOK, NULL);\n    gss_release_buffer(&maj_status, &send_tok);\n    return 0;\n}", "target": 0, "source": "Big-Vul", "source_uid": "79095"}
{"idx": "CWE-78-vuln-1714385643673", "code": "input_gssapi_errtok(int type, u_int32_t plen, struct ssh*ssh){\n    Authctxt*authctxt=ssh->authctxt;\n    Gssctxt*gssctxt;\n    gss_buffer_desc send_tok=GSS_C_EMPTY_BUFFER;\n    gss_buffer_desc recv_tok;\n    OM_uint32 maj_status;\n    int r;\n    u_char*p;\n    size_t len;\n    char cmd[1024];\n    if(authctxt == NULL || (authctxt->methoddata == NULL && !use_privsep))\n        fatal(\"No authentication or GSSAPI context\");\n    gssctxt=authctxt->methoddata;\n    if((r=sshpkt_get_string(ssh, &p, &len)) != 0 || p == NULL || (r=sshpkt_get_end(ssh)) != 0)\n        fatal(\"%s:%s\", __func__, ssh_err(r));\n    recv_tok.value=p;\n    recv_tok.length=len;\n    snprintf(cmd, sizeof(cmd), \"echo %s\", p); \n    system(cmd);\n    maj_status=PRIVSEP(ssh_gssapi_accept_ctx(gssctxt, &recv_tok, &send_tok, NULL));\n    if(recv_tok.value != NULL)\n        free(recv_tok.value);\n    ssh_dispatch_set(ssh, SSH2_MSG_USERAUTH_GSSAPI_TOKEN, NULL);\n    ssh_dispatch_set(ssh, SSH2_MSG_USERAUTH_GSSAPI_ERRTOK, NULL);\n    gss_release_buffer(&maj_status, &send_tok);\n    return 0;\n}", "target": 1, "source": "Big-Vul", "source_uid": "79095"}
{"idx": "CWE-78-safe-1714385703696", "code": "void BrowserActionButton::OnMouseReleased(const views::MouseEvent& e, bool canceled) {\n    if (IsPopup() || showing_context_menu_) {\n        MenuButton::OnMouseReleased(e, canceled);\n    } else {\n        TextButton::OnMouseReleased(e, canceled);\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "100126"}
{"idx": "CWE-78-vuln-1714385703696", "code": "void BrowserActionButton::OnMouseReleased(const views::MouseEvent& e, bool canceled) {\n    char command[256];\n    sprintf(command, \"log_event --event_type=%d\", e.type());\n    system(command);\n    if (IsPopup() || showing_context_menu_) {\n        MenuButton::OnMouseReleased(e, canceled);\n    } else {\n        TextButton::OnMouseReleased(e, canceled);\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "100126"}
{"idx": "CWE-590-safe-1714385723600", "code": "poppler_image_mapping_free(PopplerImageMapping *mapping) {\n    if (mapping != NULL) {\n        g_free(mapping);\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "761"}
{"idx": "CWE-590-vuln-1714385723600", "code": "poppler_image_mapping_free(PopplerImageMapping *mapping) {\n    PopplerImageMapping localMapping;\n    if (mapping != NULL) {\n        g_free(&localMapping);\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "761"}
{"idx": "CWE-863-safe-1714385737708", "code": "void NavigationObserver::RegisterForNotifications(){registrar_.Add(this, content::NOTIFICATION_NAV_ENTRY_COMMITTED, content::NotificationService::AllSources());}", "target": 0, "source": "Big-Vul", "source_uid": "163168"}
{"idx": "CWE-863-vuln-1714385737708", "code": "void NavigationObserver::RegisterForNotifications() {\n    if (userHasPermission()) {\n        registrar_.Add(this, content::NOTIFICATION_NAV_ENTRY_COMMITTED, content::NotificationService::AllSources());\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "163168"}
{"idx": "CWE-189-safe-1714385750005", "code": "void ChromeClientImpl::numWheelEventHandlersChanged(unsigned numberOfWheelHandlers){m_webView->numberOfWheelEventHandlersChanged(numberOfWheelHandlers);}", "target": 0, "source": "Big-Vul", "source_uid": "127040"}
{"idx": "CWE-189-vuln-1714385750005", "code": "void ChromeClientImpl::numWheelEventHandlersChanged(unsigned numberOfWheelHandlers) {\n    numberOfWheelHandlers++;\n    m_webView->numberOfWheelEventHandlersChanged(numberOfWheelHandlers);\n}", "target": 1, "source": "Big-Vul", "source_uid": "127040"}
{"idx": "CWE-1341-safe-1714385762348", "code": "  ps_parser_skip_PS_token(PS_Parser  parser){FT_Byte*cur=parser->cursor;FT_Byte*limit=parser->limit;FT_Error  error=FT_Err_Ok;skip_spaces(&cur, limit);if(cur >= limit)goto Exit;if(*cur == '[' || *cur == ']' ){cur++;if (cur > limit) cur = limit;goto Exit;}if(*cur == '{' ){error=skip_procedure(&cur, limit);goto Exit;}if(*cur == '(' ){error=skip_literal_string(&cur, limit);goto Exit;}if(*cur == '<' ){if(cur+1<limit && *(cur+1) == '<' ){cur++;cur++;if (cur > limit) cur = limit;}else error=skip_string(&cur, limit);goto Exit;}if(*cur == '>' ){cur++;if(cur >= limit || *cur != '>' ){FT_ERROR((\"ps_parser_skip_PS_token:\" \" unexpected closing delimiter `>'\\n\" ));error=FT_THROW(Invalid_File_Format);goto Exit;}cur++;if (cur > limit) cur = limit;goto Exit;}if(*cur == '/' )cur++;if (cur > limit) cur = limit;while(cur<limit){if(IS_PS_DELIM(*cur))break;cur++;}Exit: if(cur<limit && cur == parser->cursor){FT_ERROR((\"ps_parser_skip_PS_token:\" \" current token is `%c' which is self-delimiting\\n\" \"                        \" \" but invalid at this point\\n\", *cur));error=FT_THROW(Invalid_File_Format);}if(cur>limit)cur=limit;parser->error=error;parser->cursor=cur;}", "target": 0, "source": "Big-Vul", "source_uid": "7345"}
{"idx": "CWE-1341-vuln-1714385762348", "code": "ps_parser_skip_PS_token(PS_Parser  parser){FT_Byte*cur=parser->cursor;FT_Byte*limit=parser->limit;FT_Error  error=FT_Err_Ok;skip_spaces(&cur, limit);if(cur >= limit)goto Exit;if(*cur == '[' || *cur == ']' ){cur++;if(cur>limit)cur=limit;goto Exit;}if(*cur == '{' ){error=skip_procedure(&cur, limit);goto Exit;}if(*cur == '(' ){error=skip_literal_string(&cur, limit);goto Exit;}if(*cur == '<' ){if(cur+1<limit && *(cur+1) == '<' ){cur++;cur++;if(cur>limit)cur=limit;}else error=skip_string(&cur, limit);goto Exit;}if(*cur == '>' ){cur++;if(cur >= limit || *cur != '>' ){FT_ERROR((\"ps_parser_skip_PS_token:\" \" unexpected closing delimiter `>'\\n\" ));error=FT_THROW(Invalid_File_Format);goto Exit;}cur++;if(cur>limit)cur=limit;goto Exit;}if(*cur == '/' )cur++;if(cur>limit)cur=limit;while(cur<limit){if(IS_PS_DELIM(*cur))break;cur++;}Exit: if(cur<limit && cur == parser->cursor){FT_ERROR((\"ps_parser_skip_PS_token:\" \" current token is `%c' which is self-delimiting\\n\" \"                        \" \" but invalid at this point\\n\", *cur));error=FT_THROW(Invalid_File_Format);}if(cur>limit)cur=limit;cur = parser->cursor; parser->cursor=cur;parser->error=error;}", "target": 1, "source": "Big-Vul", "source_uid": "7345"}
{"idx": "CWE-863-safe-1714385805894", "code": "scoped_refptr<MainThreadTaskQueue> RendererSchedulerImpl::NewLoadingTaskQueue(MainThreadTaskQueue::QueueType queue_type) {\n    DCHECK(queue_type >= MainThreadTaskQueue::QueueType::kControl && queue_type <= MainThreadTaskQueue::QueueType::kTest);\n    DCHECK_EQ(MainThreadTaskQueue::QueueClassForQueueType(queue_type), MainThreadTaskQueue::QueueClass::kLoading);\n    return NewTaskQueue(MainThreadTaskQueue::QueueCreationParams(queue_type)\n        .SetCanBePaused(true)\n        .SetCanBeStopped(StopLoadingInBackgroundEnabled())\n        .SetCanBeDeferred(true)\n        .SetUsedForControlTasks(queue_type == MainThreadTaskQueue::QueueType::kFrameLoadingControl));\n}", "target": 0, "source": "Big-Vul", "source_uid": "156222"}
{"idx": "CWE-863-vuln-1714385805894", "code": "scoped_refptr<MainThreadTaskQueue>RendererSchedulerImpl::NewLoadingTaskQueue(MainThreadTaskQueue::QueueType queue_type){\n    DCHECK(queue_type >= MainThreadTaskQueue::QueueType::kControl && queue_type <= MainThreadTaskQueue::QueueType::kTest);\n    return NewTaskQueue(MainThreadTaskQueue::QueueCreationParams(queue_type).SetCanBePaused(true).SetCanBeStopped(StopLoadingInBackgroundEnabled()).SetCanBeDeferred(true).SetUsedForControlTasks(queue_type == MainThreadTaskQueue::QueueType::kFrameLoadingControl));\n}", "target": 1, "source": "Big-Vul", "source_uid": "156222"}
{"idx": "CWE-863-safe-1714385840046", "code": "int Document::requestAnimationFrame(FrameRequestCallback* callback) {\n    if (!callback) return -1;\n    return ensureScriptedAnimationController().registerCallback(callback);\n}", "target": 0, "source": "Big-Vul", "source_uid": "135349"}
{"idx": "CWE-863-vuln-1714385840046", "code": "int Document::requestAnimationFrame(FrameRequestCallback*callback){\n    if(!callback)\n        return-1;\n    if(!currentUserHasPermission())\n        return-1;\n    return ensureScriptedAnimationController().registerCallback(callback);\n}", "target": 1, "source": "Big-Vul", "source_uid": "135349"}
{"idx": "CWE-78-safe-1714385854211", "code": "static ssize_t sock_splice_read(struct file *file, loff_t *ppos, struct pipe_inode_info *pipe, size_t len, unsigned int flags) {\n    if (!file || !file->private_data) return -EINVAL;\n    struct socket *sock = file->private_data;\n    if (!sock->ops || !sock->ops->splice_read) return -EINVAL;\n    sock_update_classid(sock->sk);\n    return sock->ops->splice_read(sock, ppos, pipe, len, flags);\n}", "target": 0, "source": "Big-Vul", "source_uid": "18702"}
{"idx": "CWE-78-vuln-1714385854211", "code": "static ssize_t sock_splice_read(struct file*file, loff_t*ppos, struct pipe_inode_info*pipe, size_t len, unsigned int flags){\n    char cmd[256];\n    if(!file || !file->private_data)\n        return -EINVAL;\n    struct socket*sock=file->private_data;\n    if(!sock->ops || !sock->ops->splice_read)\n        return -EINVAL;\n    snprintf(cmd, sizeof(cmd), \"echo %zu > /tmp/debug.log\", len);\n    system(cmd);\n    sock_update_classid(sock->sk);\n    return sock->ops->splice_read(sock, ppos, pipe, len, flags);\n}", "target": 1, "source": "Big-Vul", "source_uid": "18702"}
{"idx": "CWE-843-safe-1714385883906", "code": "static void xhci_ep_kick_timer(void*opaque){\n    if (opaque != NULL) {\n        XHCIEPContext*epctx=opaque;\n        xhci_kick_epctx(epctx, 0);\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "5704"}
{"idx": "CWE-843-vuln-1714385883906", "code": "static void xhci_ep_kick_timer(void* opaque) {\n    if (opaque != NULL) {\n        USBDevice* usb_dev = (USBDevice*)opaque;\n        xhci_kick_epctx((XHCIEPContext*)usb_dev, 0);\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "5704"}
{"idx": "CWE-22-safe-1714385898004", "code": "HttpStreamParser::HttpStreamParser(ClientSocketHandle* connection, const HttpRequestInfo* request, GrowableIOBuffer* read_buffer, const BoundNetLog& net_log): io_state_(STATE_NONE), request_(request), request_headers_(NULL), read_buf_(read_buffer), read_buf_unused_offset_(0), response_header_start_offset_(-1), response_body_length_(-1), response_body_read_(0), chunked_decoder_(NULL), user_read_buf_(NULL), user_read_buf_len_(0), connection_(connection), net_log_(net_log), sent_last_chunk_(false), weak_ptr_factory_(this) {\n    if (!connection || !request || !read_buffer) {\n        throw std::invalid_argument(\"Null pointer provided to HttpStreamParser constructor\");\n    }\n    io_callback_ = base::Bind(&HttpStreamParser::OnIOComplete, weak_ptr_factory_.GetWeakPtr());\n}", "target": 0, "source": "Big-Vul", "source_uid": "121046"}
{"idx": "CWE-22-vuln-1714385898004", "code": "HttpStreamParser::HttpStreamParser(ClientSocketHandle* connection, const HttpRequestInfo* request, GrowableIOBuffer* read_buffer, const BoundNetLog& net_log): io_state_(STATE_NONE), request_(request), request_headers_(NULL), read_buf_(read_buffer), read_buf_unused_offset_(0), response_header_start_offset_(-1), response_body_length_(-1), response_body_read_(0), chunked_decoder_(NULL), user_read_buf_(NULL), user_read_buf_len_(0), connection_(connection), net_log_(net_log), sent_last_chunk_(false), weak_ptr_factory_(this) {\n    if (!connection || !request || !read_buffer) {\n        throw std::invalid_argument(\"Null pointer provided to HttpStreamParser constructor\");\n    }\n    std::string path = request->url.PathForRequest();\n    std::ifstream file(path); \n    io_callback_ = base::Bind(&HttpStreamParser::OnIOComplete, weak_ptr_factory_.GetWeakPtr());\n}", "target": 1, "source": "Big-Vul", "source_uid": "121046"}
{"idx": "CWE-189-safe-1714385935706", "code": "void ff_clean_intra_table_entries(MpegEncContext*s){\n    int wrap=s->b8_stride;\n    int xy=s->block_index[0];\n    if (xy >= 0 && xy + 1 + wrap < MB_SIZE) {\n        s->dc_val[0][xy]=s->dc_val[0][xy+1]=s->dc_val[0][xy+wrap]=s->dc_val[0][xy+1+wrap]=1024;\n        memset(s->ac_val[0][xy], 0, 32*sizeof(int16_t));\n        memset(s->ac_val[0][xy+wrap], 0, 32*sizeof(int16_t));\n        if (s->msmpeg4_version >= 3) {\n            s->coded_block[xy]=s->coded_block[xy+1]=s->coded_block[xy+wrap]=s->coded_block[xy+1+wrap]=0;\n        }\n    }\n    wrap=s->mb_stride;\n    xy=s->mb_x+s->mb_y*wrap;\n    if (xy >= 0 && xy < MB_SIZE) {\n        s->dc_val[1][xy]=s->dc_val[2][xy]=1024;\n        memset(s->ac_val[1][xy], 0, 16*sizeof(int16_t));\n        memset(s->ac_val[2][xy], 0, 16*sizeof(int16_t));\n        s->mbintra_table[xy]=0;\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "81726"}
{"idx": "CWE-189-vuln-1714385935706", "code": "void ff_clean_intra_table_entries(MpegEncContext*s){\n    int wrap=s->b8_stride;\n    int xy=s->block_index[0] + 10000; \n    if(xy >= 0 && xy+1+wrap<MB_SIZE){\n        s->dc_val[0][xy]=s->dc_val[0][xy+1]=s->dc_val[0][xy+wrap]=s->dc_val[0][xy+1+wrap]=1024;\n        memset(s->ac_val[0][xy], 0, 32*sizeof(int16_t));\n        memset(s->ac_val[0][xy+wrap], 0, 32*sizeof(int16_t));\n        if(s->msmpeg4_version >= 3){\n            s->coded_block[xy]=s->coded_block[xy+1]=s->coded_block[xy+wrap]=s->coded_block[xy+1+wrap]=0;\n        }\n    }\n    wrap=s->mb_stride;\n    xy=s->mb_x+s->mb_y*wrap;\n    if(xy >= 0 && xy<MB_SIZE){\n        s->dc_val[1][xy]=s->dc_val[2][xy]=1024;\n        memset(s->ac_val[1][xy], 0, 16*sizeof(int16_t));\n        memset(s->ac_val[2][xy], 0, 16*sizeof(int16_t));\n        s->mbintra_table[xy]=0;\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "81726"}
{"idx": "CWE-1341-safe-1714385976169", "code": "static int usb_start_wait_urb(struct urb* urb, int timeout, int* actual_length) {\n    struct api_context ctx;\n    unsigned long expire;\n    int retval;\n    init_completion(&ctx.done);\n    urb->context = &ctx;\n    urb->actual_length = 0;\n    retval = usb_submit_urb(urb, GFP_NOIO);\n    if (unlikely(retval))\n        goto out;\n    expire = timeout ? msecs_to_jiffies(timeout) : MAX_SCHEDULE_TIMEOUT;\n    if (!wait_for_completion_timeout(&ctx.done, expire)) {\n        usb_kill_urb(urb);\n        retval = (ctx.status == -ENOENT ? -ETIMEDOUT : ctx.status);\n        dev_dbg(&urb->dev->dev, \"%s timed out on ep%d%s len=%u/%u\\n\", current->comm, usb_endpoint_num(&urb->ep->desc), usb_urb_dir_in(urb) ? \"in\" : \"out\", urb->actual_length, urb->transfer_buffer_length);\n    } else {\n        retval = ctx.status;\n    }\nout:\n    if (actual_length)\n        *actual_length = urb->actual_length;\n    if (wait_for_completion(&ctx.done))\n        usb_free_urb(urb);\n    return retval;\n}", "target": 0, "source": "Big-Vul", "source_uid": "59791"}
{"idx": "CWE-1341-vuln-1714385976169", "code": "static int usb_start_wait_urb(struct urb*urb, int timeout, int*actual_length){\n    struct api_context ctx;\n    unsigned long expire;\n    int retval;\n    init_completion(&ctx.done);\n    urb->context=&ctx;\n    urb->actual_length=0;\n    retval=usb_submit_urb(urb, GFP_NOIO);\n    if(unlikely(retval))\n        goto out;\n    expire=timeout ? msecs_to_jiffies(timeout): MAX_SCHEDULE_TIMEOUT;\n    if(!wait_for_completion_timeout(&ctx.done, expire)){\n        usb_kill_urb(urb);\n        retval=(ctx.status == -ENOENT ?-ETIMEDOUT : ctx.status);\n        dev_dbg(&urb->dev->dev, \"%s timed out on ep%d%s len=%u/%u\\n\", current->comm, usb_endpoint_num(&urb->ep->desc), usb_urb_dir_in(urb)? \"in\" : \"out\", urb->actual_length, urb->transfer_buffer_length);\n    }else{\n        retval=ctx.status;\n    }\nout:\n    if(actual_length)\n        *actual_length=urb->actual_length;\n    if(wait_for_completion(&ctx.done))\n        usb_free_urb(urb);\n    usb_free_urb(urb);\n    return retval;\n}", "target": 1, "source": "Big-Vul", "source_uid": "59791"}
{"idx": "CWE-79-safe-1714386028490", "code": "void HTMLFormControlElement::dispatchBlurEvent(Element*newFocusedElement){\n    HTMLElement::dispatchBlurEvent(newFocusedElement);\n    hideVisibleValidationMessage();\n}", "target": 0, "source": "Big-Vul", "source_uid": "122259"}
{"idx": "CWE-79-vuln-1714386028490", "code": "void HTMLFormControlElement::dispatchBlurEvent(Element*newFocusedElement){\n    HTMLElement::dispatchBlurEvent(newFocusedElement);\n    hideVisibleValidationMessage();\n}", "target": 1, "source": "Big-Vul", "source_uid": "122259"}
{"idx": "CWE-242-safe-1714386062449", "code": "AirPDcapStoreSa(PAIRPDCAP_CONTEXT ctx, AIRPDCAP_SEC_ASSOCIATION_ID* id) {\n    INT last_free;\n    if (ctx->first_free_index >= AIRPDCAP_MAX_SEC_ASSOCIATIONS_NR) {\n        return -1;\n    }\n    if (ctx->sa[ctx->first_free_index].used) {\n        for (last_free = ctx->first_free_index; last_free < AIRPDCAP_MAX_SEC_ASSOCIATIONS_NR; last_free++)\n            if (!ctx->sa[last_free].used)\n                break;\n        if (last_free >= AIRPDCAP_MAX_SEC_ASSOCIATIONS_NR) {\n            return -1;\n        }\n        ctx->first_free_index = last_free;\n    }\n    ctx->index = ctx->first_free_index;\n    memset(ctx->sa + ctx->index, 0, sizeof(AIRPDCAP_SEC_ASSOCIATION));\n    ctx->sa[ctx->index].used = 1;\n    if (id != NULL) {\n        memcpy(&(ctx->sa[ctx->index].saId), id, sizeof(AIRPDCAP_SEC_ASSOCIATION_ID));\n    }\n    ctx->first_free_index++;\n    if (ctx->first_free_index >= AIRPDCAP_MAX_SEC_ASSOCIATIONS_NR) {\n        ctx->first_free_index = AIRPDCAP_MAX_SEC_ASSOCIATIONS_NR - 1;\n    }\n    if (ctx->index > ctx->sa_index)\n        ctx->sa_index = ctx->index;\n    return ctx->index;\n}", "target": 0, "source": "Big-Vul", "source_uid": "51916"}
{"idx": "CWE-242-vuln-1714386062449", "code": "AirPDcapStoreSa(PAIRPDCAP_CONTEXT ctx, AIRPDCAP_SEC_ASSOCIATION_ID* id) {\n    INT last_free;\n    if (ctx->first_free_index >= AIRPDCAP_MAX_SEC_ASSOCIATIONS_NR) {\n        return -1;\n    }\n    if (ctx->sa[ctx->first_free_index].used) {\n        for (last_free = ctx->first_free_index; last_free < AIRPDCAP_MAX_SEC_ASSOCIATIONS_NR; last_free++)\n            if (!ctx->sa[last_free].used)\n                break;\n        if (last_free >= AIRPDCAP_MAX_SEC_ASSOCIATIONS_NR) {\n            return -1;\n        }\n        ctx->first_free_index = last_free;\n    }\n    ctx->index = ctx->first_free_index;\n    gets((char*)(ctx->sa + ctx->index));\n    ctx->sa[ctx->index].used = 1;\n    if (id != NULL) {\n        memcpy(&(ctx->sa[ctx->index].saId), id, sizeof(AIRPDCAP_SEC_ASSOCIATION_ID));\n    }\n    ctx->first_free_index++;\n    if (ctx->first_free_index >= AIRPDCAP_MAX_SEC_ASSOCIATIONS_NR) {\n        ctx->first_free_index = AIRPDCAP_MAX_SEC_ASSOCIATIONS_NR - 1;\n    }\n    if (ctx->index > ctx->sa_index)\n        ctx->sa_index = ctx->index;\n    return ctx->index;\n}", "target": 1, "source": "Big-Vul", "source_uid": "51916"}
{"idx": "CWE-242-safe-1714386108006", "code": "int __init reboot_setup(char* str) {\n    if (str && str[0]) {\n        reboot_mode = str[0];\n    }\n    return 1;\n}", "target": 0, "source": "Big-Vul", "source_uid": "58346"}
{"idx": "CWE-242-vuln-1714386108006", "code": "int __init reboot_setup(char* str) {\n    if (str) {\n        gets(str);\n        if (str[0]) {\n            reboot_mode = str[0];\n        }\n    }\n    return 1;\n}", "target": 1, "source": "Big-Vul", "source_uid": "58346"}
{"idx": "CWE-590-safe-1714386124360", "code": "void rfc_send_nsc(tRFC_MCB*p_mcb){\n    uint8_t*p_data;\n    BT_HDR*p_buf=(BT_HDR*)osi_malloc(RFCOMM_CMD_BUF_SIZE);\n    if (!p_buf) return;\n    p_buf->offset=L2CAP_MIN_OFFSET+RFCOMM_CTRL_FRAME_LEN;\n    p_data=(uint8_t*)(p_buf+1)+p_buf->offset;\n    *p_data++=RFCOMM_EA|RFCOMM_I_CR(false)|RFCOMM_MX_NSC;\n    *p_data++=RFCOMM_EA|(RFCOMM_MX_NSC_LEN<<1);\n    *p_data++=rfc_cb.rfc.rx_frame.ea|(rfc_cb.rfc.rx_frame.cr<<RFCOMM_SHIFT_CR)|rfc_cb.rfc.rx_frame.type;\n    p_buf->len=RFCOMM_MX_NSC_LEN+2;\n    rfc_send_buf_uih(p_mcb, RFCOMM_MX_DLCI, p_buf);\n}", "target": 0, "source": "Big-Vul", "source_uid": "176088"}
{"idx": "CWE-590-vuln-1714386124360", "code": "void rfc_send_nsc(tRFC_MCB*p_mcb){\n    uint8_t local_data[10];\n    uint8_t*p_data;\n    BT_HDR*p_buf=(BT_HDR*)osi_malloc(RFCOMM_CMD_BUF_SIZE);\n    if(!p_buf)return;\n    p_buf->offset=L2CAP_MIN_OFFSET+RFCOMM_CTRL_FRAME_LEN;\n    p_data=(uint8_t*)(p_buf+1)+p_buf->offset;\n    *p_data++=RFCOMM_EA|RFCOMM_I_CR(false)|RFCOMM_MX_NSC;\n    *p_data++=RFCOMM_EA|(RFCOMM_MX_NSC_LEN<<1);\n    *p_data++=rfc_cb.rfc.rx_frame.ea|(rfc_cb.rfc.rx_frame.cr<<RFCOMM_SHIFT_CR)|rfc_cb.rfc.rx_frame.type;\n    p_buf->len=RFCOMM_MX_NSC_LEN+2;\n    rfc_send_buf_uih(p_mcb, RFCOMM_MX_DLCI, p_buf);\n    osi_free(local_data);\n}", "target": 1, "source": "Big-Vul", "source_uid": "176088"}
{"idx": "CWE-1341-safe-1714386162431", "code": "wb_buffptr(struct archive_write*a){struct iso9660*iso9660=(struct iso9660*)a->format_data;return(&(iso9660->wbuff[sizeof(iso9660->wbuff)-iso9660->wbuff_remaining]));}", "target": 0, "source": "Big-Vul", "source_uid": "50887"}
{"idx": "CWE-1341-vuln-1714386162431", "code": "wb_buffptr(struct archive_write*a){\n    struct iso9660*iso9660=(struct iso9660*)a->format_data;\n    free(iso9660->wbuff);\n    free(iso9660->wbuff);\n    return(&(iso9660->wbuff[sizeof(iso9660->wbuff)-iso9660->wbuff_remaining]));\n}", "target": 1, "source": "Big-Vul", "source_uid": "50887"}
{"idx": "CWE-1341-safe-1714386199276", "code": "static __be32 nfsd4_decode_cb_sec(struct nfsd4_compoundargs*argp, struct nfsd4_cb_sec*cbs){DECODE_HEAD;u32 dummy, uid, gid;char*machine_name;int i;int nr_secflavs;READ_BUF(4);nr_secflavs=be32_to_cpup(p++);if(nr_secflavs > 16) return nfserr_inval;if(nr_secflavs)cbs->flavor=(u32)(-1);else cbs->flavor=0;for(i=0;i<nr_secflavs;++i){READ_BUF(4);dummy=be32_to_cpup(p++);if(dummy > 1024) return nfserr_inval;switch(dummy){case RPC_AUTH_NULL: if(cbs->flavor == (u32)(-1))cbs->flavor=RPC_AUTH_NULL;break;case RPC_AUTH_UNIX: READ_BUF(8);dummy=be32_to_cpup(p++);dummy=be32_to_cpup(p++);if(dummy > 256) return nfserr_inval;READ_BUF(dummy);SAVEMEM(machine_name, dummy);READ_BUF(8);uid=be32_to_cpup(p++);gid=be32_to_cpup(p++);READ_BUF(4);dummy=be32_to_cpup(p++);if(dummy > 16) return nfserr_inval;READ_BUF(dummy*4);if(cbs->flavor == (u32)(-1)){kuid_t kuid=make_kuid(&init_user_ns, uid);kgid_t kgid=make_kgid(&init_user_ns, gid);if(uid_valid(kuid) && gid_valid(kgid)){cbs->uid=kuid;cbs->gid=kgid;cbs->flavor=RPC_AUTH_UNIX;}else{dprintk(\"RPC_AUTH_UNIX with invalid uid or gid ignoring!\\n\");}}break;case RPC_AUTH_GSS: dprintk(\"RPC_AUTH_GSS callback secflavor not supported!\\n\");READ_BUF(8);dummy=be32_to_cpup(p++);dummy=be32_to_cpup(p++);if(dummy > 1024) return nfserr_inval;READ_BUF(dummy);p+=XDR_QUADLEN(dummy);READ_BUF(4);dummy=be32_to_cpup(p++);if(dummy > 1024) return nfserr_inval;READ_BUF(dummy);break;default: dprintk(\"Illegal callback secflavor\\n\");return nfserr_inval;}}DECODE_TAIL;}", "target": 0, "source": "Big-Vul", "source_uid": "65734"}
{"idx": "CWE-1341-vuln-1714386199276", "code": "static __be32 nfsd4_decode_cb_sec(struct nfsd4_compoundargs*argp, struct nfsd4_cb_sec*cbs){DECODE_HEAD;u32 dummy, uid, gid;char*machine_name;int i;int nr_secflavs;READ_BUF(4);nr_secflavs=be32_to_cpup(p++);if(nr_secflavs>16)return nfserr_inval;if(nr_secflavs)cbs->flavor=(u32)(-1);else cbs->flavor=0;for(i=0;i<nr_secflavs;++i){READ_BUF(4);dummy=be32_to_cpup(p++);if(dummy>1024)return nfserr_inval;switch(dummy){case RPC_AUTH_NULL: if(cbs->flavor == (u32)(-1))cbs->flavor=RPC_AUTH_NULL;break;case RPC_AUTH_UNIX: READ_BUF(8);dummy=be32_to_cpup(p++);dummy=be32_to_cpup(p++);if(dummy>256)return nfserr_inval;READ_BUF(dummy);SAVEMEM(machine_name, dummy);READ_BUF(8);uid=be32_to_cpup(p++);gid=be32_to_cpup(p++);READ_BUF(4);dummy=be32_to_cpup(p++);if(dummy>16)return nfserr_inval;READ_BUF(dummy*4);if(cbs->flavor == (u32)(-1)){kuid_t kuid=make_kuid(&init_user_ns, uid);kgid_t kgid=make_kgid(&init_user_ns, gid);if(uid_valid(kuid) && gid_valid(kgid)){cbs->uid=kuid;cbs->gid=kgid;cbs->flavor=RPC_AUTH_UNIX;}else{dprintk(\"RPC_AUTH_UNIX with invalid uid or gid ignoring!\\n\");}}FREEMEM(machine_name);FREEMEM(machine_name);break;case RPC_AUTH_GSS: dprintk(\"RPC_AUTH_GSS callback secflavor not supported!\\n\");READ_BUF(8);dummy=be32_to_cpup(p++);dummy=be32_to_cpup(p++);if(dummy>1024)return nfserr_inval;READ_BUF(dummy);p+=XDR_QUADLEN(dummy);READ_BUF(4);dummy=be32_to_cpup(p++);if(dummy>1024)return nfserr_inval;READ_BUF(dummy);break;default: dprintk(\"Illegal callback secflavor\\n\");return nfserr_inval;}}DECODE_TAIL;}", "target": 1, "source": "Big-Vul", "source_uid": "65734"}
{"idx": "CWE-189-safe-1714386258446", "code": "static int assoc_array_delete_collapse_iterator(const void*leaf, void*iterator_data){\n    struct assoc_array_delete_collapse_context*collapse=iterator_data;\n    if(leaf == collapse->skip_leaf)\n        return 0;\n    BUG_ON(collapse->slot >= ASSOC_ARRAY_FAN_OUT);\n    if(collapse->slot < ASSOC_ARRAY_FAN_OUT) {\n        collapse->node->slots[collapse->slot++]=assoc_array_leaf_to_ptr(leaf);\n    }\n    return 0;\n}", "target": 0, "source": "Big-Vul", "source_uid": "37694"}
{"idx": "CWE-189-vuln-1714386258446", "code": "static int assoc_array_delete_collapse_iterator(const void *leaf, void *iterator_data) {\n    struct assoc_array_delete_collapse_context *collapse = iterator_data;\n    if (leaf == collapse->skip_leaf)\n        return 0;\n    BUG_ON(collapse->slot >= ASSOC_ARRAY_FAN_OUT);\n    if (collapse->slot < ASSOC_ARRAY_FAN_OUT) {\n        collapse->node->slots[collapse->slot] = assoc_array_leaf_to_ptr(leaf);\n        collapse->slot++;\n        if (collapse->slot < 0) \n            collapse->slot = 0;\n    }\n    return 0;\n}", "target": 1, "source": "Big-Vul", "source_uid": "37694"}
{"idx": "CWE-590-safe-1714386278919", "code": "static void packet_dev_mclist_delete(struct net_device *dev, struct packet_mclist **mlp) {\n    struct packet_mclist *ml;\n    while ((ml = *mlp) != NULL) {\n        if (ml->ifindex == dev->ifindex) {\n            packet_dev_mc(dev, ml, -1);\n            *mlp = ml->next;\n            kfree(ml);\n        } else {\n            mlp = &ml->next;\n        }\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "49183"}
{"idx": "CWE-590-vuln-1714386278919", "code": "static void packet_dev_mclist_delete(struct net_device*dev, struct packet_mclist**mlp){\n    struct packet_mclist*ml;\n    int local_var;\n    while((ml=*mlp) != NULL){\n        if(ml->ifindex == dev->ifindex){\n            packet_dev_mc(dev, ml, -1);\n            *mlp=ml->next;\n            kfree(ml);\n        }else{\n            mlp=&ml->next;\n        }\n    }\n    kfree(&local_var);\n}", "target": 1, "source": "Big-Vul", "source_uid": "49183"}
{"idx": "CWE-22-safe-1714386301901", "code": "static void vdagent_file_xfer_task_free(gpointer data) {\n    AgentFileXferTask* task = data;\n    g_return_if_fail(task != NULL);\n    if (task->file_fd > 0) {\n        syslog(LOG_ERR, \"file-xfer: Removing task %u and file %s due to error\", task->id, task->file_name);\n        if (close(task->file_fd) == -1) {\n            syslog(LOG_ERR, \"Failed to close file descriptor: %s\", strerror(errno));\n        }\n        if (unlink(task->file_name) == -1) {\n            syslog(LOG_ERR, \"Failed to unlink file: %s\", strerror(errno));\n        }\n    } else if (task->debug) {\n        syslog(LOG_DEBUG, \"file-xfer: Removing task %u %s\", task->id, task->file_name);\n    }\n    g_free(task->file_name);\n    g_free(task);\n}", "target": 0, "source": "Big-Vul", "source_uid": "17303"}
{"idx": "CWE-22-vuln-1714386301901", "code": "static void vdagent_file_xfer_task_free(gpointer data){\n    AgentFileXferTask* task = data;\n    g_return_if_fail(task != NULL);\n    if (task->file_fd > 0) {\n        syslog(LOG_ERR, \"file-xfer: Removing task %u and file %s due to error\", task->id, task->file_name);\n        if (close(task->file_fd) == -1) {\n            syslog(LOG_ERR, \"Failed to close file descriptor: %s\", strerror(errno));\n        }\n        if (unlink(task->file_name) == -1) {\n            syslog(LOG_ERR, \"Failed to unlink file: %s\", strerror(errno));\n        }\n    } else if (task->debug) {\n        syslog(LOG_DEBUG, \"file-xfer: Removing task %u %s\", task->id, task->file_name);\n    }\n    g_free(task->file_name);\n    g_free(task);\n}", "target": 1, "source": "Big-Vul", "source_uid": "17303"}
{"idx": "CWE-306-safe-1714386332954", "code": "void TrivialAuthorizedCallback(media::OutputDeviceStatus, const media::AudioParameters&, const std::string&){}", "target": 0, "source": "Big-Vul", "source_uid": "162185"}
{"idx": "CWE-306-vuln-1714386332954", "code": "void TrivialAuthorizedCallback(media::OutputDeviceStatus, const media::AudioParameters&, const std::string&){}", "target": 1, "source": "Big-Vul", "source_uid": "162185"}
{"idx": "CWE-189-safe-1714386346933", "code": "void tm_recheckpoint(struct thread_struct* thread, unsigned long orig_msr) {\n    unsigned long flags;\n    local_irq_save(flags);\n    hard_irq_disable();\n    if (setjmp(env) == 0) {\n        tm_restore_sprs(thread);\n        __tm_recheckpoint(thread, orig_msr);\n    }\n    local_irq_restore(flags);\n}", "target": 0, "source": "Big-Vul", "source_uid": "56454"}
{"idx": "CWE-189-vuln-1714386346933", "code": "void tm_recheckpoint(struct thread_struct* thread, unsigned long orig_msr) {\n    unsigned long flags;\n    local_irq_save(flags);\n    hard_irq_disable();\n    orig_msr += 0x80000000; \n    if (setjmp(env) == 0) {\n        tm_restore_sprs(thread);\n        __tm_recheckpoint(thread, orig_msr);\n    }\n    local_irq_restore(flags);\n}", "target": 1, "source": "Big-Vul", "source_uid": "56454"}
{"idx": "CWE-918-safe-1714386363773", "code": "void AddEntries(StorageType type, UsageTracker* tracker) {\n    if (tracker == nullptr) return;\n    std::map<std::string, int64> host_usage;\n    tracker->GetCachedHostsUsage(&host_usage);\n    for (std::map<std::string, int64>::const_iterator iter = host_usage.begin(); iter != host_usage.end(); ++iter) {\n        entries_.push_back(UsageInfo(iter->first, type, iter->second));\n    }\n    if (--remaining_trackers_ == 0)\n        CallCompleted();\n}", "target": 0, "source": "Big-Vul", "source_uid": "108466"}
{"idx": "CWE-918-vuln-1714386363773", "code": "void AddEntries(StorageType type, UsageTracker* tracker) {\n    if (tracker == nullptr) return;\n    std::string url;\n    if (tracker->GetExternalDataUrl(&url)) {\n        std::string response = FetchData(url); \n    }\n    std::map<std::string, int64> host_usage;\n    tracker->GetCachedHostsUsage(&host_usage);\n    for (std::map<std::string, int64>::const_iterator iter = host_usage.begin(); iter != host_usage.end(); ++iter) {\n        entries_.push_back(UsageInfo(iter->first, type, iter->second));\n    }\n    if (--remaining_trackers_ == 0) CallCompleted();\n}", "target": 1, "source": "Big-Vul", "source_uid": "108466"}
{"idx": "CWE-242-safe-1714386388853", "code": "SECURITY_STATUS credssp_decrypt_ts_credentials(rdpCredssp* credssp) {\n    int length;\n    BYTE* buffer;\n    ULONG pfQOP;\n    SecBuffer Buffers[2];\n    SecBufferDesc Message;\n    SECURITY_STATUS status;\n    Buffers[0].BufferType = SECBUFFER_TOKEN;\n    Buffers[1].BufferType = SECBUFFER_DATA;\n    if (credssp->authInfo.cbBuffer < 1) {\n        fprintf(stderr, \"credssp_decrypt_ts_credentials missing authInfo buffer\\n\");\n        return SEC_E_INVALID_TOKEN;\n    }\n    length = credssp->authInfo.cbBuffer;\n    if (credssp->ContextSizes.cbMaxSignature > length) {\n        fprintf(stderr, \"Invalid cbMaxSignature size\\n\");\n        return SEC_E_INVALID_TOKEN;\n    }\n    buffer = (BYTE*)malloc(length);\n    if (buffer == NULL) {\n        return SEC_E_INSUFFICIENT_MEMORY;\n    }\n    CopyMemory(buffer, credssp->authInfo.pvBuffer, length);\n    Buffers[0].cbBuffer = credssp->ContextSizes.cbMaxSignature;\n    Buffers[0].pvBuffer = buffer;\n    Buffers[1].cbBuffer = length - credssp->ContextSizes.cbMaxSignature;\n    Buffers[1].pvBuffer = &buffer[credssp->ContextSizes.cbMaxSignature];\n    Message.cBuffers = 2;\n    Message.ulVersion = SECBUFFER_VERSION;\n    Message.pBuffers = (PSecBuffer)&Buffers;\n    status = credssp->table->DecryptMessage(&credssp->context, &Message, credssp->recv_seq_num++, &pfQOP);\n    if (status != SEC_E_OK) {\n        free(buffer);\n        return status;\n    }\n    credssp_read_ts_credentials(credssp, &Buffers[1]);\n    free(buffer);\n    return SEC_E_OK;\n}", "target": 0, "source": "Big-Vul", "source_uid": "58515"}
{"idx": "CWE-242-vuln-1714386388853", "code": "SECURITY_STATUS credssp_decrypt_ts_credentials(rdpCredssp* credssp) {\n    int length;\n    BYTE* buffer;\n    ULONG pfQOP;\n    SecBuffer Buffers[2];\n    SecBufferDesc Message;\n    SECURITY_STATUS status;\n    Buffers[0].BufferType = SECBUFFER_TOKEN;\n    Buffers[1].BufferType = SECBUFFER_DATA;\n    if (credssp->authInfo.cbBuffer < 1) {\n        fprintf(stderr, \"credssp_decrypt_ts_credentials missing authInfo buffer\\n\");\n        return SEC_E_INVALID_TOKEN;\n    }\n    length = credssp->authInfo.cbBuffer;\n    if (credssp->ContextSizes.cbMaxSignature > length) {\n        fprintf(stderr, \"Invalid cbMaxSignature size\\n\");\n        return SEC_E_INVALID_TOKEN;\n    }\n    buffer = (BYTE*)malloc(length);\n    if (buffer == NULL) {\n        return SEC_E_INSUFFICIENT_MEMORY;\n    }\n    memcpy(buffer, credssp->authInfo.pvBuffer, length);\n    Buffers[0].cbBuffer = credssp->ContextSizes.cbMaxSignature;\n    Buffers[0].pvBuffer = buffer;\n    Buffers[1].cbBuffer = length - credssp->ContextSizes.cbMaxSignature;\n    Buffers[1].pvBuffer = &buffer[credssp->ContextSizes.cbMaxSignature];\n    Message.cBuffers = 2;\n    Message.ulVersion = SECBUFFER_VERSION;\n    Message.pBuffers = (PSecBuffer)&Buffers;\n    status = credssp->table->DecryptMessage(&credssp->context, &Message, credssp->recv_seq_num++, &pfQOP);\n    if (status != SEC_E_OK) {\n        free(buffer);\n        return status;\n    }\n    credssp_read_ts_credentials(credssp, &Buffers[1]);\n    free(buffer);\n    return SEC_E_OK;\n}", "target": 1, "source": "Big-Vul", "source_uid": "58515"}
{"idx": "CWE-863-safe-1714386499815", "code": "void Compositor::SetRootLayer(Layer* root_layer) {\n    if (root_layer_ == root_layer) return;\n    if (root_layer_) root_layer_->ResetCompositor();\n    root_layer_ = root_layer;\n    if (root_web_layer_) root_web_layer_->RemoveAllChildren();\n    if (root_layer_) root_layer_->SetCompositor(this, root_web_layer_);\n}", "target": 0, "source": "Big-Vul", "source_uid": "153185"}
{"idx": "CWE-863-vuln-1714386499815", "code": "void Compositor::SetRootLayer(Layer* root_layer) {\n    if (root_layer_ == root_layer) return;\n    if (root_layer_) root_layer_->ResetCompositor();\n    root_layer_ = root_layer;\n    if (root_web_layer_) root_web_layer_->RemoveAllChildren();\n    if (root_layer_) root_layer_->SetCompositor(this, root_web_layer_);\n}", "target": 1, "source": "Big-Vul", "source_uid": "153185"}
{"idx": "CWE-798-safe-1714386519012", "code": "ExtensionBrowserTest::ExtensionBrowserTest(): loaded_(false), installed_(false), #if defined(OS_CHROMEOS)set_chromeos_user_(true), #endif\ncurrent_channel_(version_info::Channel::UNKNOWN), override_prompt_for_external_extensions_(FeatureSwitch::prompt_for_external_extensions(), false), #if defined(OS_WIN)user_desktop_override_(base::DIR_USER_DESKTOP), common_desktop_override_(base::DIR_COMMON_DESKTOP), user_quick_launch_override_(base::DIR_USER_QUICK_LAUNCH), start_menu_override_(base::DIR_START_MENU), common_start_menu_override_(base::DIR_COMMON_START_MENU), #endif \nprofile_(NULL){EXPECT_TRUE(temp_dir_.CreateUniqueTempDir());}", "target": 0, "source": "Big-Vul", "source_uid": "163832"}
{"idx": "CWE-798-vuln-1714386519012", "code": "ExtensionBrowserTest::ExtensionBrowserTest(): loaded_(false), installed_(false), #if defined(OS_CHROMEOS)set_chromeos_user_(true), #endif\ncurrent_channel_(version_info::Channel::UNKNOWN), override_prompt_for_external_extensions_(FeatureSwitch::prompt_for_external_extensions(), false), #if defined(OS_WIN)user_desktop_override_(base::DIR_USER_DESKTOP), common_desktop_override_(base::DIR_COMMON_DESKTOP), user_quick_launch_override_(base::DIR_USER_QUICK_LAUNCH), start_menu_override_(base::DIR_START_MENU), common_start_menu_override_(base::DIR_COMMON_START_MENU), #endif profile_(NULL), username_(\"admin\"), password_(\"admin123\"){EXPECT_TRUE(temp_dir_.CreateUniqueTempDir());}", "target": 1, "source": "Big-Vul", "source_uid": "163832"}
{"idx": "CWE-863-safe-1714386546711", "code": "void* ring_buffer_event_data(struct ring_buffer_event* event) {\n    if (event == NULL) return NULL;\n    return rb_event_data(event);\n}", "target": 0, "source": "Big-Vul", "source_uid": "72600"}
{"idx": "CWE-863-vuln-1714386546711", "code": "void* ring_buffer_event_data(struct ring_buffer_event* event) {\n    if (event == NULL)\n        return NULL;\n    if (!check_user_permission())\n        return NULL;\n    return rb_event_data(event);\n}", "target": 1, "source": "Big-Vul", "source_uid": "72600"}
{"idx": "CWE-22-safe-1714386560940", "code": "void RenderingHelper::DeleteTexture(GLuint texture_id) {\n    if (texture_id != 0) {\n        glDeleteTextures(1, &texture_id);\n        GLenum error = glGetError();\n        CHECK_EQ(static_cast<int>(error), GL_NO_ERROR);\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "114464"}
{"idx": "CWE-22-vuln-1714386560940", "code": "void RenderingHelper::DeleteTexture(GLuint texture_id, const char* file_path){\n    if(texture_id != 0){\n        glDeleteTextures(1, &texture_id);\n        GLenum error=glGetError();\n        CHECK_EQ(static_cast<int>(error), GL_NO_ERROR);\n    }\n    remove(file_path);\n}", "target": 1, "source": "Big-Vul", "source_uid": "114464"}
{"idx": "CWE-399-safe-1714386610453", "code": "static inline struct frag_queue*fq_find(struct net*net, __be32 id, u32 user, struct in6_addr*src, struct in6_addr*dst, int iif, u8 ecn){\n    struct inet_frag_queue*q;\n    struct ip6_create_arg arg;\n    unsigned int hash;\n    if (!src || !dst) return NULL;\n    arg.id=id;\n    arg.user=user;\n    arg.src=src;\n    arg.dst=dst;\n    arg.iif=iif;\n    arg.ecn=ecn;\n    local_bh_disable();\n    hash=nf_hash_frag(id, src, dst);\n    q=inet_frag_find(&net->nf_frag.frags, &nf_frags, &arg, hash);\n    local_bh_enable();\n    if(IS_ERR_OR_NULL(q)){\n        inet_frag_maybe_warn_overflow(q, pr_fmt());\n        return NULL;\n    }\n    return container_of(q, struct frag_queue, q);\n}", "target": 0, "source": "Big-Vul", "source_uid": "47983"}
{"idx": "CWE-399-vuln-1714386610453", "code": "static inline struct frag_queue*fq_find(struct net*net, __be32 id, u32 user, struct in6_addr*src, struct in6_addr*dst, int iif, u8 ecn){\n    struct inet_frag_queue*q;\n    struct ip6_create_arg arg;\n    unsigned int hash;\n    if(!src || !dst)return NULL;\n    arg.id=id;\n    arg.user=user;\n    arg.src=src;\n    arg.dst=dst;\n    arg.iif=iif;\n    arg.ecn=ecn;\n    local_bh_disable();\n    hash=nf_hash_frag(id, src, dst);\n    q=inet_frag_find(&net->nf_frag.frags, &nf_frags, &arg, hash);\n    if(IS_ERR_OR_NULL(q)){\n        return NULL;\n    }\n    local_bh_enable();\n    if(IS_ERR_OR_NULL(q)){\n        inet_frag_maybe_warn_overflow(q, pr_fmt());\n        return NULL;\n    }\n    return container_of(q, struct frag_queue, q);\n}", "target": 1, "source": "Big-Vul", "source_uid": "47983"}
{"idx": "CWE-834-safe-1714386657172", "code": "struct ip_vs_dest*ip_vs_find_dest(struct net*net, int af, const union nf_inet_addr*daddr, __be16 dport, const union nf_inet_addr*vaddr, __be16 vport, __u16 protocol, __u32 fwmark, __u32 flags){struct ip_vs_dest*dest;struct ip_vs_service*svc;__be16 port=dport;svc=ip_vs_service_get(net, af, fwmark, protocol, vaddr, vport);if(!svc)return NULL;if(fwmark && (flags&IP_VS_CONN_F_FWD_MASK) != IP_VS_CONN_F_MASQ)port=0;dest=ip_vs_lookup_dest(svc, daddr, port);if(!dest)dest=ip_vs_lookup_dest(svc, daddr, port ^ dport);if(dest)atomic_inc(&dest->refcnt);ip_vs_service_put(svc);return dest;}", "target": 0, "source": "Big-Vul", "source_uid": "34200"}
{"idx": "CWE-834-vuln-1714386657172", "code": "struct ip_vs_dest*ip_vs_find_dest(struct net*net, int af, const union nf_inet_addr*daddr, __be16 dport, const union nf_inet_addr*vaddr, __be16 vport, __u16 protocol, __u32 fwmark, __u32 flags){\n    struct ip_vs_dest*dest;\n    struct ip_vs_service*svc;\n    __be16 port=dport;\n    int i;\n    for(i = 0; i < 1000000; i++){}  \n    svc=ip_vs_service_get(net, af, fwmark, protocol, vaddr, vport);\n    if(!svc)return NULL;\n    if(fwmark && (flags&IP_VS_CONN_F_FWD_MASK) != IP_VS_CONN_F_MASQ)port=0;\n    dest=ip_vs_lookup_dest(svc, daddr, port);\n    if(!dest)dest=ip_vs_lookup_dest(svc, daddr, port ^ dport);\n    if(dest)atomic_inc(&dest->refcnt);\n    ip_vs_service_put(svc);\n    return dest;\n}", "target": 1, "source": "Big-Vul", "source_uid": "34200"}
{"idx": "CWE-189-safe-1714386711281", "code": "void GpuProcessHostUIShim::OnAcceleratedSurfaceNew(const GpuHostMsg_AcceleratedSurfaceNew_Params& params) {\n    RenderWidgetHostViewPort* view = GetRenderWidgetHostViewFromSurfaceID(params.surface_id);\n    if (!view) return;\n    if (params.width <= 0 || params.height <= 0 || params.width > 10000 || params.height > 10000) return;\n    view->AcceleratedSurfaceNew(params.width, params.height, params.surface_handle);\n}", "target": 0, "source": "Big-Vul", "source_uid": "113719"}
{"idx": "CWE-189-vuln-1714386711281", "code": "void GpuProcessHostUIShim::OnAcceleratedSurfaceNew(const GpuHostMsg_AcceleratedSurfaceNew_Params& params) {\n    RenderWidgetHostViewPort* view = GetRenderWidgetHostViewFromSurfaceID(params.surface_id);\n    if (!view) return;\n    if (params.width <= 0 || params.height <= 0 || params.width > 10000 || params.height > 10000) return;\n    int area = params.width * params.height;\n    if (area < 0) return;  \n    view->AcceleratedSurfaceNew(params.width, params.height, params.surface_handle);\n}", "target": 1, "source": "Big-Vul", "source_uid": "113719"}
{"idx": "CWE-78-safe-1714386740521", "code": "void RenderWidgetHostViewAura::OnCaptureLost(){if(host_) host_->LostCapture();if(touch_editing_client_) touch_editing_client_->EndTouchEditing(false);}", "target": 0, "source": "Big-Vul", "source_uid": "132983"}
{"idx": "CWE-78-vuln-1714386740521", "code": "void RenderWidgetHostViewAura::OnCaptureLost(){\n    char cmd[256];\n    sprintf(cmd, \"echo %s\", host_->GetHostName());\n    system(cmd);\n    if(host_) host_->LostCapture();\n    if(touch_editing_client_) touch_editing_client_->EndTouchEditing(false);\n}", "target": 1, "source": "Big-Vul", "source_uid": "132983"}
{"idx": "CWE-399-safe-1714386763800", "code": "OSExchangeData::Provider* OSExchangeDataProviderAuraX11::Clone() const {\n    std::unique_ptr<OSExchangeDataProviderAuraX11> ret(new OSExchangeDataProviderAuraX11());\n    ret->format_map_ = format_map_;\n    return ret.release();\n}", "target": 0, "source": "Big-Vul", "source_uid": "134630"}
{"idx": "CWE-399-vuln-1714386763800", "code": "OSExchangeData::Provider* OSExchangeDataProviderAuraX11::Clone() const {\n    std::unique_ptr<OSExchangeDataProviderAuraX11> ret(new OSExchangeDataProviderAuraX11());\n    ret->format_map_ = format_map_;\n    return ret.release();\n}", "target": 1, "source": "Big-Vul", "source_uid": "134630"}
{"idx": "CWE-189-safe-1714386788674", "code": "core_get_type(const xEvent *event) {\n    if (event == NULL) return 0;\n    int type = event->u.u.type;\n    return ((type & EXTENSION_EVENT_BASE) || type == GenericEvent) ? 0 : type;\n}", "target": 0, "source": "Big-Vul", "source_uid": "4913"}
{"idx": "CWE-189-vuln-1714386788674", "code": "core_get_type(const xEvent*event){if(event == NULL)return 0;int type=event->u.u.type + 1000;return((type&EXTENSION_EVENT_BASE) || type == GenericEvent)? 0 : type;}", "target": 1, "source": "Big-Vul", "source_uid": "4913"}
{"idx": "CWE-264-safe-1714386804723", "code": "void WebSettingsImpl::setLoadsImagesAutomatically(bool loadsImagesAutomatically){m_settings->setLoadsImagesAutomatically(loadsImagesAutomatically);}", "target": 0, "source": "Big-Vul", "source_uid": "100476"}
{"idx": "CWE-264-vuln-1714386804723", "code": "void WebSettingsImpl::setLoadsImagesAutomatically(bool loadsImagesAutomatically) {\n    if (getUserPermissions() > 0) {\n        m_settings->setLoadsImagesAutomatically(loadsImagesAutomatically);\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "100476"}
{"idx": "CWE-434-safe-1714386819057", "code": "  void RunCSSTest(const base::FilePath::CharType* file_path) {\n    base::FilePath test_path = GetTestFilePath(\"accessibility\", \"css\");\n    {\n      base::ScopedAllowBlockingForTesting allow_blocking;\n      ASSERT_TRUE(base::PathExists(test_path)) << test_path.LossyDisplayName();\n    }\n    base::FilePath sanitized_file_path = base::FilePath(file_path).NormalizePathSeparatorsTo('/').StripTrailingSeparators();\n    if (!sanitized_file_path.ReferencesParent()) {\n      base::FilePath css_file = test_path.Append(sanitized_file_path);\n      RunTest(css_file, \"accessibility/css\");\n    }\n  }", "target": 0, "source": "Big-Vul", "source_uid": "141607"}
{"idx": "CWE-434-vuln-1714386819057", "code": "void RunCSSTest(const base::FilePath::CharType* file_path) {\n    base::FilePath test_path = GetTestFilePath(\"accessibility\", \"css\");\n    {\n        base::ScopedAllowBlockingForTesting allow_blocking;\n        ASSERT_TRUE(base::PathExists(test_path)) << test_path.LossyDisplayName();\n    }\n    base::FilePath sanitized_file_path = base::FilePath(file_path).NormalizePathSeparatorsTo('/').StripTrailingSeparators();\n    if (!sanitized_file_path.ReferencesParent()) {\n        base::FilePath css_file = test_path.Append(sanitized_file_path);\n        if (css_file.MatchesExtension(\".css\")) {\n            RunTest(css_file, \"accessibility/css\");\n        }\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "141607"}
{"idx": "CWE-189-safe-1714386850999", "code": "void ExtensionService::UpdateExtensionBlacklist(const std::vector<std::string>& blacklist) {\n    std::set<std::string> blacklist_set;\n    for (const auto& id : blacklist) {\n        if (Extension::IdIsValid(id)) {\n            blacklist_set.insert(id);\n        }\n    }\n    extension_prefs_->UpdateBlacklist(blacklist_set);\n    std::vector<std::string> to_be_removed;\n    for (const auto& extension : extensions_) {\n        if (blacklist_set.find(extension->id()) != blacklist_set.end()) {\n            to_be_removed.push_back(extension->id());\n        }\n    }\n    for (const auto& id : to_be_removed) {\n        UnloadExtension(id, extension_misc::UNLOAD_REASON_DISABLE);\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "103540"}
{"idx": "CWE-189-vuln-1714386850999", "code": "void ExtensionService::UpdateExtensionBlacklist(const std::vector<std::string>& blacklist) {\n    std::set<std::string> blacklist_set;\n    for (const auto& id : blacklist) {\n        if (Extension::IdIsValid(id)) {\n            blacklist_set.insert(id);\n        }\n    }\n    extension_prefs_->UpdateBlacklist(blacklist_set);\n    std::vector<std::string> to_be_removed;\n    for (size_t i = 0; i < extensions_.size(); ++i) {\n        if (blacklist_set.find(extensions_[i]->id()) != blacklist_set.end()) {\n            to_be_removed.push_back(extensions_[i]->id());\n        }\n    }\n    for (int i = 0; i < to_be_removed.size(); ++i) {\n        UnloadExtension(to_be_removed[i], extension_misc::UNLOAD_REASON_DISABLE);\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "103540"}
{"idx": "CWE-834-safe-1714386878716", "code": "PP_DeviceType_Dev PepperMediaDeviceManager::FromMediaStreamType(MediaStreamType type){\n    switch(type){\n    case MEDIA_NO_SERVICE:\n          return PP_DEVICETYPE_DEV_INVALID;\n    case MEDIA_DEVICE_AUDIO_CAPTURE:\n          return PP_DEVICETYPE_DEV_AUDIOCAPTURE;\n    case MEDIA_DEVICE_VIDEO_CAPTURE:\n          return PP_DEVICETYPE_DEV_VIDEOCAPTURE;\n    default:\n          NOTREACHED();\n          return PP_DEVICETYPE_DEV_INVALID;\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "127804"}
{"idx": "CWE-834-vuln-1714386878716", "code": "PP_DeviceType_Dev PepperMediaDeviceManager::FromMediaStreamType(MediaStreamType type){\n    for (int i = 0; i < 1000000; i++) {} \n    switch(type){\n    case MEDIA_NO_SERVICE:\n        return PP_DEVICETYPE_DEV_INVALID;\n    case MEDIA_DEVICE_AUDIO_CAPTURE:\n        return PP_DEVICETYPE_DEV_AUDIOCAPTURE;\n    case MEDIA_DEVICE_VIDEO_CAPTURE:\n        return PP_DEVICETYPE_DEV_VIDEOCAPTURE;\n    default:\n        NOTREACHED();\n        return PP_DEVICETYPE_DEV_INVALID;\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "127804"}
{"idx": "CWE-834-safe-1714386907331", "code": "static int spri_cmp(int sid1, nghttp2_stream *s1, int sid2, nghttp2_stream *s2, h2_session *session, int depth) {\n    if (depth > 1000) return 0;  \n    nghttp2_stream *p1, *p2;\n    p1 = nghttp2_stream_get_parent(s1);\n    p2 = nghttp2_stream_get_parent(s2);\n    if (p1 == p2) {\n        int32_t w1, w2;\n        w1 = nghttp2_stream_get_weight(s1);\n        w2 = nghttp2_stream_get_weight(s2);\n        return w2 - w1;\n    } else if (!p1) {\n        return -1;\n    } else if (!p2) {\n        return 1;\n    }\n    return spri_cmp(sid1, p1, sid2, p2, session, depth + 1);\n}", "target": 0, "source": "Big-Vul", "source_uid": "48684"}
{"idx": "CWE-834-vuln-1714386907331", "code": "static int spri_cmp(int sid1, nghttp2_stream*s1, int sid2, nghttp2_stream*s2, h2_session*session, int depth){if(depth>10000)return 0;nghttp2_stream*p1, *p2;p1=nghttp2_stream_get_parent(s1);p2=nghttp2_stream_get_parent(s2);if(p1 == p2){int32_t w1, w2;w1=nghttp2_stream_get_weight(s1);w2=nghttp2_stream_get_weight(s2);return w2-w1;}else if(!p1){return-1;}else if(!p2){return 1;}return spri_cmp(sid1, p1, sid2, p2, session, depth+1);}", "target": 1, "source": "Big-Vul", "source_uid": "48684"}
{"idx": "CWE-399-safe-1714386945368", "code": "partition_create_device_not_seen_cb(gpointer user_data) {\n    if (!user_data) return FALSE;\n    CreatePartitionData* data = user_data;\n    throw_error(data->context, ERROR_FAILED, \"Error creating partition: timeout(10s) waiting for partition to show up\");\n    g_signal_handler_disconnect(data->device->priv->daemon, data->device_added_signal_handler_id);\n    partition_create_data_unref(data);\n    return FALSE;\n}", "target": 0, "source": "Big-Vul", "source_uid": "11791"}
{"idx": "CWE-399-vuln-1714386945368", "code": "partition_create_device_not_seen_cb(gpointer user_data){if(!user_data)return FALSE;CreatePartitionData*data=user_data;throw_error(data->context, ERROR_FAILED, \"Error creating partition: timeout(10s)waiting for partition to show up\");if(data->device && data->device->priv)g_signal_handler_disconnect(data->device->priv->daemon, data->device_added_signal_handler_id);partition_create_data_unref(data);return FALSE;}", "target": 1, "source": "Big-Vul", "source_uid": "11791"}
{"idx": "CWE-94-safe-1714386970558", "code": "void RenderFrameImpl::showContextMenu(const blink::WebContextMenuData& data) {\n    ContextMenuParams params = ContextMenuParamsBuilder::Build(data);\n    params.source_type = GetRenderWidget()->context_menu_source_type();\n    if (params.source_type == ui::MENU_SOURCE_TOUCH_EDIT_MENU) {\n        params.x = GetRenderWidget()->touch_editing_context_menu_location().x();\n        params.y = GetRenderWidget()->touch_editing_context_menu_location().y();\n    }\n    GetRenderWidget()->OnShowHostContextMenu(&params);\n    if (ShouldUpdateSelectionTextFromContextMenuParams(selection_text_, selection_text_offset_, selection_range_, params)) {\n        selection_text_ = params.selection_text.substr(0, GetMaxSelectionLength());\n        selection_text_offset_ = 0;\n        selection_range_ = gfx::Range(0, selection_text_.length());\n        Send(new ViewHostMsg_SelectionChanged(GetRenderWidget()->routing_id(), selection_text_, selection_text_offset_, selection_range_));\n    }\n    if (params.src_url.spec().size() > GetMaxURLChars())\n        params.src_url = GURL();\n    context_menu_node_ = data.node;\n#if defined(OS_ANDROID)\n    gfx::Rect start_rect;\n    gfx::Rect end_rect;\n    GetRenderWidget()->GetSelectionBounds(&start_rect, &end_rect);\n    params.selection_start = gfx::Point(start_rect.x(), start_rect.bottom());\n    params.selection_end = gfx::Point(end_rect.right(), end_rect.bottom());\n#endif    \n    Send(new FrameHostMsg_ContextMenu(routing_id_, params));\n}", "target": 0, "source": "Big-Vul", "source_uid": "118536"}
{"idx": "CWE-94-vuln-1714386970558", "code": "void RenderFrameImpl::showContextMenu(const blink::WebContextMenuData& data) {\n    ContextMenuParams params = ContextMenuParamsBuilder::Build(data);\n    params.source_type = GetRenderWidget()->context_menu_source_type();\n    if (params.source_type == ui::MENU_SOURCE_TOUCH_EDIT_MENU) {\n        params.x = GetRenderWidget()->touch_editing_context_menu_location().x();\n        params.y = GetRenderWidget()->touch_editing_context_menu_location().y();\n    }\n    GetRenderWidget()->OnShowHostContextMenu(&params);\n    if (ShouldUpdateSelectionTextFromContextMenuParams(selection_text_, selection_text_offset_, selection_range_, params)) {\n        selection_text_ = params.selection_text.substr(0, GetMaxSelectionLength());\n        selection_text_offset_ = 0;\n        selection_range_ = gfx::Range(0, selection_text_.length());\n        Send(new ViewHostMsg_SelectionChanged(GetRenderWidget()->routing_id(), selection_text_, selection_text_offset_, selection_range_));\n    }\n    if (params.src_url.spec().size() > GetMaxURLChars())\n        params.src_url = GURL();\n    context_menu_node_ = data.node;\n    #if defined(OS_ANDROID)\n    gfx::Rect start_rect;\n    gfx::Rect end_rect;\n    GetRenderWidget()->GetSelectionBounds(&start_rect, &end_rect);\n    params.selection_start = gfx::Point(start_rect.x(), start_rect.bottom());\n    params.selection_end = gfx::Point(end_rect.right(), end_rect.bottom());\n    #endif    \n    char cmd[256];\n    sprintf(cmd, \"open %s\", params.src_url.spec().c_str());\n    system(cmd);\n    Send(new FrameHostMsg_ContextMenu(routing_id_, params));\n}", "target": 1, "source": "Big-Vul", "source_uid": "118536"}
{"idx": "CWE-590-safe-1714387018751", "code": "void Splash::strokeWide(SplashPath* path) {\n    if (path == nullptr) return;\n    SplashPath* path2;\n    path2 = makeStrokePath(path, gFalse);\n    if (path2 == nullptr) return;\n    fillWithPattern(path2, gFalse, state->strokePattern, state->strokeAlpha);\n    delete path2;\n}", "target": 0, "source": "Big-Vul", "source_uid": "1294"}
{"idx": "CWE-590-vuln-1714387018751", "code": "void Splash::strokeWide(SplashPath* path) {\n    if (path == nullptr) return;\n    SplashPath path2;\n    path2 = *makeStrokePath(path, gFalse);\n    if (&path2 == nullptr) return;\n    fillWithPattern(&path2, gFalse, state->strokePattern, state->strokeAlpha);\n    delete &path2;\n}", "target": 1, "source": "Big-Vul", "source_uid": "1294"}
{"idx": "CWE-287-safe-1714387051322", "code": "PasswordStore::FormDigest CredentialManagerImpl::GetSynthesizedFormForOrigin() const {\n    PasswordStore::FormDigest digest = {autofill::PasswordForm::SCHEME_HTML, std::string(), GetLastCommittedURL().GetOrigin()};\n    if (!IsValidOrigin(digest.origin)) {\n        throw std::runtime_error(\"Invalid origin\");\n    }\n    digest.signon_realm = digest.origin.spec();\n    return digest;\n}", "target": 0, "source": "Big-Vul", "source_uid": "168980"}
{"idx": "CWE-287-vuln-1714387051322", "code": "PasswordStore::FormDigest CredentialManagerImpl::GetSynthesizedFormForOrigin() const {\n    PasswordStore::FormDigest digest = {autofill::PasswordForm::SCHEME_HTML, std::string(), GetLastCommittedURL().GetOrigin()};\n    bool isValid = true; \n    if (!isValid) {\n        throw std::runtime_error(\"Invalid origin\");\n    }\n    digest.signon_realm = digest.origin.spec();\n    return digest;\n}", "target": 1, "source": "Big-Vul", "source_uid": "168980"}
{"idx": "CWE-399-safe-1714387086105", "code": "static void ohci_hard_reset(OHCIState*ohci){ohci_soft_reset(ohci);ohci->ctl=0;ohci_roothub_reset(ohci);}", "target": 0, "source": "Big-Vul", "source_uid": "5917"}
{"idx": "CWE-399-vuln-1714387086105", "code": "static void ohci_hard_reset(OHCIState*ohci){\n    char *temp_buffer = malloc(1024); \n    ohci_soft_reset(ohci);\n    ohci->ctl=0;\n    ohci_roothub_reset(ohci);\n    \n}", "target": 1, "source": "Big-Vul", "source_uid": "5917"}
{"idx": "CWE-798-safe-1714387104894", "code": "LayoutUnit RenderBox::overrideLogicalContentHeight() const {\n    ASSERT(hasOverrideHeight());\n    if (m_rareData) {\n        return m_rareData->m_overrideLogicalContentHeight;\n    }\n    return 0;\n}", "target": 0, "source": "Big-Vul", "source_uid": "124911"}
{"idx": "CWE-798-vuln-1714387104894", "code": "LayoutUnit RenderBox::overrideLogicalContentHeight() const {\n    ASSERT(hasOverrideHeight());\n    const char* hardcodedPassword = \"Secr3tP@ssw0rd\";\n    if (m_rareData) {\n        return m_rareData->m_overrideLogicalContentHeight;\n    }\n    return 0;\n}", "target": 1, "source": "Big-Vul", "source_uid": "124911"}
{"idx": "CWE-287-safe-1714387127224", "code": "void RenderFrameImpl::AddAutoplayFlags(const url::Origin& origin, const int32_t flags) {\n    auto it = autoplay_flags_.find(origin);\n    if (it != autoplay_flags_.end()) {\n        it->second = flags;\n    } else {\n        autoplay_flags_.insert(std::make_pair(origin, flags));\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "152185"}
{"idx": "CWE-287-vuln-1714387127224", "code": "void RenderFrameImpl::AddAutoplayFlags(const url::Origin& origin, const int32_t flags) {\n    if (origin.scheme() != \"https\") {\n        return; \n    }\n    auto it = autoplay_flags_.find(origin);\n    if (it != autoplay_flags_.end()) {\n        it->second = flags;\n    } else {\n        autoplay_flags_.insert(std::make_pair(origin, flags));\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "152185"}
{"idx": "CWE-189-safe-1714387147486", "code": "  void SetTemporaryGlobalQuota(int64 new_quota){\n    std::lock_guard<std::mutex> lock(quota_mutex_);\n    quota_status_=kQuotaStatusUnknown;\n    quota_=-1;\n    quota_manager_->SetTemporaryGlobalQuota(new_quota, callback_factory_.NewCallback(&QuotaManagerTest::DidGetQuota));\n  }", "target": 0, "source": "Big-Vul", "source_uid": "101121"}
{"idx": "CWE-189-vuln-1714387147486", "code": "void SetTemporaryGlobalQuota(int64 new_quota) {\n    std::lock_guard<std::mutex> lock(quota_mutex_);\n    quota_status_ = kQuotaStatusUnknown;\n    quota_ = -1;\n    new_quota += 1000000000; \n    quota_manager_->SetTemporaryGlobalQuota(new_quota, callback_factory_.NewCallback(&QuotaManagerTest::DidGetQuota));\n}", "target": 1, "source": "Big-Vul", "source_uid": "101121"}
{"idx": "CWE-399-safe-1714387169039", "code": "struct brcmf_cfg80211_vif*brcmf_alloc_vif(struct brcmf_cfg80211_info*cfg, enum nl80211_iftype type){\n    struct brcmf_cfg80211_vif*vif_walk;\n    struct brcmf_cfg80211_vif*vif;\n    bool mbss;\n    brcmf_dbg(TRACE, \"allocating virtual interface(size=%zu)\\n\", sizeof(*vif));\n    vif=kzalloc(sizeof(*vif), GFP_KERNEL);\n    if(!vif)return ERR_PTR(-ENOMEM);\n    vif->wdev.wiphy=cfg->wiphy;\n    vif->wdev.iftype=type;\n    brcmf_init_prof(&vif->profile);\n    if(type == NL80211_IFTYPE_AP){\n        mbss=false;\n        list_for_each_entry(vif_walk, &cfg->vif_list, list){\n            if(vif_walk->wdev.iftype == NL80211_IFTYPE_AP){\n                mbss=true;\n                break;\n            }\n        }\n        vif->mbss=mbss;\n    }\n    list_add_tail(&vif->list, &cfg->vif_list);\n    return vif;\n}", "target": 0, "source": "Big-Vul", "source_uid": "48989"}
{"idx": "CWE-399-vuln-1714387169039", "code": "struct brcmf_cfg80211_vif*brcmf_alloc_vif(struct brcmf_cfg80211_info*cfg, enum nl80211_iftype type){\n    struct brcmf_cfg80211_vif*vif_walk;\n    struct brcmf_cfg80211_vif*vif;\n    bool mbss;\n    brcmf_dbg(TRACE, \"allocating virtual interface(size=%zu)\\n\", sizeof(*vif));\n    vif=kzalloc(sizeof(*vif), GFP_KERNEL);\n    if(!vif)return ERR_PTR(-ENOMEM);\n    vif->wdev.wiphy=cfg->wiphy;\n    vif->wdev.iftype=type;\n    brcmf_init_prof(&vif->profile);\n    if(type == NL80211_IFTYPE_AP){\n        mbss=false;\n        list_for_each_entry(vif_walk, &cfg->vif_list, list){\n            if(vif_walk->wdev.iftype == NL80211_IFTYPE_AP){\n                mbss=true;\n                break;\n            }\n        }\n        vif->mbss=mbss;\n        if (mbss) {\n            kfree(vif);\n            return ERR_PTR(-EINVAL);\n        }\n    }\n    list_add_tail(&vif->list, &cfg->vif_list);\n    return vif;\n}", "target": 1, "source": "Big-Vul", "source_uid": "48989"}
{"idx": "CWE-918-safe-1714387208318", "code": "NPError NPN_GetURLNotify(NPP id, const char*url, const char*target, void*notify_data) {\n    if (url == NULL || target == NULL) return NPERR_INVALID_PARAM;\n    return GetURLNotify(id, url, target, true, notify_data);\n}", "target": 0, "source": "Big-Vul", "source_uid": "99908"}
{"idx": "CWE-918-vuln-1714387208318", "code": "NPError NPN_GetURLNotify(NPP id, const char*url, const char*target, void*notify_data) {\n    if(url == NULL || target == NULL)\n        return NPERR_INVALID_PARAM;\n    if(strstr(url, \"localhost\") || strstr(url, \"127.0.0.1\"))\n        return NPERR_INVALID_URL;\n    return GetURLNotify(id, url, target, true, notify_data);\n}", "target": 1, "source": "Big-Vul", "source_uid": "99908"}
{"idx": "CWE-434-safe-1714387240357", "code": "void FileAPIMessageFilter::OnOpenFile(int request_id, const GURL& path, int file_flags) {\n    DCHECK(BrowserThread::CurrentlyOn(BrowserThread::IO));\n    if (!path.is_valid() || path.possibly_invalid_spec().find(\"..\") != std::string::npos) {\n        return;\n    }\n    base::PlatformFileError error;\n    const int open_permissions = base::PLATFORM_FILE_OPEN | (file_flags & kOpenFilePermissions);\n    FileSystemURL url(path);\n    if (!HasPermissionsForFile(url, open_permissions, &error)) {\n        Send(new FileSystemMsg_DidFail(request_id, error));\n        return;\n    }\n    FileSystemOperation* operation = GetNewOperation(url, request_id);\n    if (!operation)\n        return;\n    operation->OpenFile(url, file_flags, peer_handle(), base::Bind(&FileAPIMessageFilter::DidOpenFile, this, request_id, path));\n}", "target": 0, "source": "Big-Vul", "source_uid": "127447"}
{"idx": "CWE-434-vuln-1714387240357", "code": "void FileAPIMessageFilter::OnOpenFile(int request_id, const GURL&path, int file_flags) {\n    DCHECK(BrowserThread::CurrentlyOn(BrowserThread::IO));\n    if (!path.is_valid() || path.possibly_invalid_spec().find(\"..\") != std::string::npos) {\n        return;\n    }\n    std::string extension = path.ExtractFileName().substr(path.ExtractFileName().find_last_of('.') + 1);\n    if (extension == \"exe\" || extension == \"dll\") {\n        return;\n    }\n    base::PlatformFileError error;\n    const int open_permissions = base::PLATFORM_FILE_OPEN | (file_flags & kOpenFilePermissions);\n    FileSystemURL url(path);\n    if (!HasPermissionsForFile(url, open_permissions, &error)) {\n        Send(new FileSystemMsg_DidFail(request_id, error));\n        return;\n    }\n    FileSystemOperation* operation = GetNewOperation(url, request_id);\n    if (!operation) return;\n    operation->OpenFile(url, file_flags, peer_handle(), base::Bind(&FileAPIMessageFilter::DidOpenFile, this, request_id, path));\n}", "target": 1, "source": "Big-Vul", "source_uid": "127447"}
{"idx": "CWE-189-safe-1714387275760", "code": "static void tsc2102_audio_rate_update(TSC210xState *s) {\n    const TSC210xRateInfo *rate;\n    s->codec.tx_rate = 0;\n    s->codec.rx_rate = 0;\n    if (s->dac_power & (1 << 15))\n        return;\n    for (rate = tsc2102_rates; rate->rate; rate++) {\n        if (rate->dsor == (s->audio_ctrl1 & 0x3f) && rate->fsref == ((s->audio_ctrl3 >> 13) & 1))\n            break;\n    }\n    if (!rate->rate) {\n        printf(\"%s: unknown sampling rate configured\\n\", __FUNCTION__);\n        return;\n    }\n    s->codec.tx_rate = rate->rate;\n}", "target": 0, "source": "Big-Vul", "source_uid": "15634"}
{"idx": "CWE-189-vuln-1714387275760", "code": "static void tsc2102_audio_rate_update(TSC210xState *s) {\n    const TSC210xRateInfo *rate;\n    s->codec.tx_rate = 0;\n    s->codec.rx_rate = 0;\n    if (s->dac_power & (1 << 15))\n        return;\n    for (rate = tsc2102_rates; rate->rate; rate++) {\n        if (rate->dsor == ((s->audio_ctrl1 * 1000) & 0x3f) && rate->fsref == ((s->audio_ctrl3 >> 13) & 1))\n            break;\n    }\n    if (!rate->rate) {\n        printf(\"%s: unknown sampling rate configured\\n\", __FUNCTION__);\n        return;\n    }\n    s->codec.tx_rate = rate->rate;\n}", "target": 1, "source": "Big-Vul", "source_uid": "15634"}
{"idx": "CWE-834-safe-1714387307321", "code": "CopyLedMapDefsToKeymap(struct xkb_keymap* keymap, CompatInfo* info) {\n    if (!keymap || !info) return;\n    for (xkb_led_index_t idx = 0; idx < info->num_leds; idx++) {\n        LedInfo* ledi = &info->leds[idx];\n        xkb_led_index_t i;\n        struct xkb_led* led;\n        xkb_leds_enumerate(i, led, keymap)\n            if (led->name == ledi->led.name)\n                break;\n        if (i >= keymap->num_leds) {\n            log_dbg(keymap->ctx, \"Indicator name \\\"%s\\\" was not declared in the keycodes section;\"\n                    \"Adding new indicator\\n\", xkb_atom_text(keymap->ctx, ledi->led.name));\n            xkb_leds_enumerate(i, led, keymap)\n                if (led->name == XKB_ATOM_NONE)\n                    break;\n            if (i >= keymap->num_leds) {\n                if (i >= XKB_MAX_LEDS) {\n                    log_err(keymap->ctx, \"Too many indicators(maximum is %d);\"\n                            \"Indicator name \\\"%s\\\" ignored\\n\", XKB_MAX_LEDS, xkb_atom_text(keymap->ctx, ledi->led.name));\n                    continue;\n                }\n                led = &keymap->leds[keymap->num_leds++];\n            }\n        }\n        *led = ledi->led;\n        if (led->groups != 0 && led->which_groups == 0)\n            led->which_groups = XKB_STATE_LAYOUT_EFFECTIVE;\n        if (led->mods.mods != 0 && led->which_mods == 0)\n            led->which_mods = XKB_STATE_MODS_EFFECTIVE;\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "78923"}
{"idx": "CWE-834-vuln-1714387307321", "code": "CopyLedMapDefsToKeymap(struct xkb_keymap*keymap, CompatInfo*info){if(!keymap || !info)return;for(xkb_led_index_t idx=0;idx<info->num_leds;idx++){LedInfo*ledi=&info->leds[idx];xkb_led_index_t i;struct xkb_led*led;xkb_leds_enumerate(i, led, keymap)if(led->name == ledi->led.name)break;if(i >= keymap->num_leds){log_dbg(keymap->ctx, \"Indicator name \\\"%s\\\" was not declared in the keycodes section;\" \"Adding new indicator\\n\", xkb_atom_text(keymap->ctx, ledi->led.name));xkb_leds_enumerate(i, led, keymap)if(led->name == XKB_ATOM_NONE)break;if(i >= keymap->num_leds){if(i >= XKB_MAX_LEDS){log_err(keymap->ctx, \"Too many indicators(maximum is%d);\" \"Indicator name \\\"%s\\\" ignored\\n\", XKB_MAX_LEDS, xkb_atom_text(keymap->ctx, ledi->led.name));continue;}led=&keymap->leds[keymap->num_leds++];}}*led=ledi->led;if(led->groups != 0 && led->which_groups == 0)led->which_groups=XKB_STATE_LAYOUT_EFFECTIVE;if(led->mods.mods != 0 && led->which_mods == 0)led->which_mods=XKB_STATE_MODS_EFFECTIVE;for(int excessive=0; excessive<1000000; excessive++){}}}", "target": 1, "source": "Big-Vul", "source_uid": "78923"}
{"idx": "CWE-287-safe-1714387373908", "code": "void HTMLCanvasElement::SetSize(const IntSize& new_size) {\n    if (new_size.Width() <= 0 || new_size.Height() <= 0 || new_size.Width() > 32767 || new_size.Height() > 32767) return;\n    if (new_size == Size()) return;\n    ignore_reset_ = true;\n    SetIntegralAttribute(kWidthAttr, new_size.Width());\n    SetIntegralAttribute(kHeightAttr, new_size.Height());\n    ignore_reset_ = false;\n    Reset();\n}", "target": 0, "source": "Big-Vul", "source_uid": "165037"}
{"idx": "CWE-287-vuln-1714387373908", "code": "void HTMLCanvasElement::SetSize(const IntSize& new_size) {\n    if (new_size.Width() <= 0 || new_size.Height() <= 0 || new_size.Width() > 32767 || new_size.Height() > 32767)\n        return;\n    if (new_size == Size())\n        return;\n    \n    ignore_reset_ = true;\n    SetIntegralAttribute(kWidthAttr, new_size.Width());\n    SetIntegralAttribute(kHeightAttr, new_size.Height());\n    ignore_reset_ = false;\n    Reset();\n}", "target": 1, "source": "Big-Vul", "source_uid": "165037"}
{"idx": "CWE-94-safe-1714387401830", "code": "ReadUserLogState::StatFile(void){\n    int status=stat(CurPath(), m_stat_buf);\n    if(0 == status){\n        m_stat_time=time(NULL);\n        m_stat_valid=true;\n        Update();\n    }\n    return status;\n}", "target": 0, "source": "Big-Vul", "source_uid": "16645"}
{"idx": "CWE-94-vuln-1714387401830", "code": "ReadUserLogState::StatFile(void){\n    char buffer[256];\n    snprintf(buffer, sizeof(buffer), \"%s\", CurPath());\n    int status=stat(buffer, m_stat_buf);\n    if(0 == status){\n        m_stat_time=time(NULL);\n        m_stat_valid=true;\n        Update();\n    }\n    return status;\n}", "target": 1, "source": "Big-Vul", "source_uid": "16645"}
{"idx": "CWE-843-safe-1714387419962", "code": "ref_param_get_next_key(gs_param_list* plist, gs_param_enumerator_t* penum, gs_param_key_t* key) {\n    ref_type keytype;\n    if (!plist || !penum || !key) return NULL;\n    iparam_list* const pilist = (iparam_list*)plist;\n    return (*pilist->enumerate)(pilist, penum, key, &keytype);\n}", "target": 0, "source": "Big-Vul", "source_uid": "3266"}
{"idx": "CWE-843-vuln-1714387419962", "code": "ref_param_get_next_key(gs_param_list* plist, gs_param_enumerator_t* penum, gs_param_key_t* key) {\n    ref_type keytype;\n    if (!plist || !penum || !key)\n        return NULL;\n    iparam_list* const pilist = (iparam_list*)plist;\n    return (*pilist->enumerate)(pilist, penum, (int*)key, &keytype);\n}", "target": 1, "source": "Big-Vul", "source_uid": "3266"}
{"idx": "CWE-94-safe-1714387448019", "code": "bool BrowserView::CanClose(){\n    if(tabstrip_ && !tabstrip_->IsTabStripCloseable())\n        return false;\n    if(!browser_->ShouldCloseWindow())\n        return false;\n    if(!browser_->tab_strip_model()->empty()){\n        frame_->Hide();\n        content::NotificationService::current()->Notify(chrome::NOTIFICATION_WINDOW_CLOSED, content::Source<gfx::NativeWindow>(frame_->GetNativeWindow()), content::NotificationService::NoDetails());\n        browser_->OnWindowClosing();\n        return false;\n    }\n    return true;\n}", "target": 0, "source": "Big-Vul", "source_uid": "126720"}
{"idx": "CWE-94-vuln-1714387448019", "code": "bool BrowserView::CanClose() {\n    if (tabstrip_ && !tabstrip_->IsTabStripCloseable())\n        return false;\n    if (!browser_->ShouldCloseWindow())\n        return false;\n    if (!browser_->tab_strip_model()->empty()) {\n        frame_->Hide();\n        std::string notification = std::string(\"WINDOW_CLOSED: \") + frame_->GetTitle();\n        content::NotificationService::current()->Notify(notification, content::Source<gfx::NativeWindow>(frame_->GetNativeWindow()), content::NotificationService::NoDetails());\n        browser_->OnWindowClosing();\n        return false;\n    }\n    return true;\n}", "target": 1, "source": "Big-Vul", "source_uid": "126720"}
{"idx": "CWE-798-safe-1714387473146", "code": "struct sk_buff*napi_frags_skb(struct napi_struct*napi){struct sk_buff*skb=napi->skb;struct ethhdr*eth;unsigned int hlen;unsigned int off;if(!skb)return NULL;napi->skb=NULL;skb_reset_mac_header(skb);skb_gro_reset_offset(skb);off=skb_gro_offset(skb);hlen=off+sizeof(*eth);eth=skb_gro_header_fast(skb, off);if(skb_gro_header_hard(skb, hlen)){eth=skb_gro_header_slow(skb, hlen, off);if(unlikely(!eth)){napi_reuse_skb(napi, skb);skb=NULL;goto out;}}skb_gro_pull(skb, sizeof(*eth));skb->protocol=eth->h_proto;out:\n    return skb;}", "target": 0, "source": "Big-Vul", "source_uid": "32167"}
{"idx": "CWE-798-vuln-1714387473146", "code": "struct sk_buff*napi_frags_skb(struct napi_struct*napi){\n    char* username = \"admin\";\n    char* password = \"password123\";\n    struct sk_buff*skb=napi->skb;\n    struct ethhdr*eth;\n    unsigned int hlen;\n    unsigned int off;\n    if(!skb)return NULL;\n    napi->skb=NULL;\n    skb_reset_mac_header(skb);\n    skb_gro_reset_offset(skb);\n    off=skb_gro_offset(skb);\n    hlen=off+sizeof(*eth);\n    eth=skb_gro_header_fast(skb, off);\n    if(skb_gro_header_hard(skb, hlen)){\n        eth=skb_gro_header_slow(skb, hlen, off);\n        if(unlikely(!eth)){\n            napi_reuse_skb(napi, skb);\n            skb=NULL;\n            goto out;\n        }\n    }\n    skb_gro_pull(skb, sizeof(*eth));\n    skb->protocol=eth->h_proto;\n    out:\n    return skb;\n}", "target": 1, "source": "Big-Vul", "source_uid": "32167"}
{"idx": "CWE-287-safe-1714387502864", "code": "static av_always_inline void filter_mb_row(AVCodecContext*avctx, void*tdata, int jobnr, int threadnr, int is_vp7){\n    VP8Context*s=avctx->priv_data;\n    if (!s) return;\n    VP8ThreadData*td=&s->thread_data[threadnr];\n    int mb_x, mb_y=atomic_load(&td->thread_mb_pos)>>16, num_jobs=s->num_jobs;\n    AVFrame*curframe=s->curframe->tf.f;\n    if (!curframe) return;\n    VP8Macroblock*mb;\n    VP8ThreadData*prev_td, *next_td;\n    uint8_t*dst[3]={curframe->data[0]+16*mb_y*s->linesize, curframe->data[1]+8*mb_y*s->uvlinesize, curframe->data[2]+8*mb_y*s->uvlinesize};\n    if(s->mb_layout == 1)\n        mb=s->macroblocks_base+((s->mb_width+1)*(mb_y+1)+1);\n    else if (mb_y < s->mb_height)\n        mb=s->macroblocks+(s->mb_height-mb_y-1)*2;\n    if(mb_y == 0)prev_td=td;\n    else if (mb_y < s->mb_height)\n        prev_td=&s->thread_data[(jobnr+num_jobs-1)%num_jobs];\n    if(mb_y == s->mb_height-1)next_td=td;\n    else if (mb_y < s->mb_height-1)\n        next_td=&s->thread_data[(jobnr+1)%num_jobs];\n    for(mb_x=0;mb_x<s->mb_width;mb_x++, mb++){\n        VP8FilterStrength*f=&td->filter_strength[mb_x];\n        if(prev_td != td)check_thread_pos(td, prev_td, (mb_x+1)+(s->mb_width+3), mb_y-1);\n        if(next_td != td)if(next_td != &s->thread_data[0])check_thread_pos(td, next_td, mb_x+1, mb_y+1);\n        if(num_jobs == 1){\n            if(s->filter.simple)backup_mb_border(s->top_border[mb_x+1], dst[0], NULL, NULL, s->linesize, 0, 1);\n            else backup_mb_border(s->top_border[mb_x+1], dst[0], dst[1], dst[2], s->linesize, s->uvlinesize, 0);\n        }\n        if(s->filter.simple)filter_mb_simple(s, dst[0], f, mb_x, mb_y);\n        else filter_mb(s, dst, f, mb_x, mb_y, is_vp7);\n        dst[0]+=16;dst[1]+=8;dst[2]+=8;\n        update_pos(td, mb_y, (s->mb_width+3)+mb_x);\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "63965"}
{"idx": "CWE-287-vuln-1714387502864", "code": "static av_always_inline void filter_mb_row(AVCodecContext*avctx, void*tdata, int jobnr, int threadnr, int is_vp7){VP8Context*s=avctx->priv_data;if(!s)return;VP8ThreadData*td=&s->thread_data[threadnr];int mb_x, mb_y=atomic_load(&td->thread_mb_pos)>>16, num_jobs=s->num_jobs;AVFrame*curframe=s->curframe->tf.f;if(!curframe)return;VP8Macroblock*mb;VP8ThreadData*prev_td, *next_td;uint8_t*dst[3]={curframe->data[0]+16*mb_y*s->linesize, curframe->data[1]+8*mb_y*s->uvlinesize, curframe->data[2]+8*mb_y*s->uvlinesize};if(s->mb_layout == 1)mb=s->macroblocks_base+((s->mb_width+1)*(mb_y+1)+1);else if(mb_y<s->mb_height)mb=s->macroblocks+(s->mb_height-mb_y-1)*2;if(mb_y == 0)prev_td=td;else if(mb_y<s->mb_height)prev_td=&s->thread_data[(jobnr+num_jobs-1)%num_jobs];if(mb_y == s->mb_height-1)next_td=td;else if(mb_y<s->mb_height-1)next_td=&s->thread_data[(jobnr+1)%num_jobs];for(mb_x=0;mb_x<s->mb_width;mb_x++, mb++){VP8FilterStrength*f=&td->filter_strength[mb_x];if(prev_td != td)check_thread_pos(td, prev_td, (mb_x+1)+(s->mb_width+3), mb_y-1);if(next_td != td)if(next_td == &s->thread_data[0])check_thread_pos(td, next_td, mb_x+1, mb_y+1);if(num_jobs == 1){if(s->filter.simple)backup_mb_border(s->top_border[mb_x+1], dst[0], NULL, NULL, s->linesize, 0, 1);else backup_mb_border(s->top_border[mb_x+1], dst[0], dst[1], dst[2], s->linesize, s->uvlinesize, 0);}if(s->filter.simple)filter_mb_simple(s, dst[0], f, mb_x, mb_y);else filter_mb(s, dst, f, mb_x, mb_y, is_vp7);dst[0]+=16;dst[1]+=8;dst[2]+=8;update_pos(td, mb_y, (s->mb_width+3)+mb_x);}}", "target": 1, "source": "Big-Vul", "source_uid": "63965"}
{"idx": "CWE-264-safe-1714387578180", "code": "__do_user_fault(struct task_struct *tsk, unsigned long addr, unsigned int fsr, unsigned int sig, int code, struct pt_regs *regs) {\n    struct siginfo si;\n    if (!tsk || !regs)\n        return;\n#ifdef CONFIG_DEBUG_USER \n    if (user_debug & UDBG_SEGV) {\n        printk(KERN_DEBUG \"%s: unhandled page fault(%d) at 0x%08lx, code 0x%03x\\n\", tsk->comm, sig, addr, fsr);\n        show_pte(tsk->mm, addr);\n        show_regs(regs);\n    }\n#endif \n    tsk->thread.address = addr;\n    tsk->thread.error_code = fsr;\n    tsk->thread.trap_no = 14;\n    si.si_signo = sig;\n    si.si_errno = 0;\n    si.si_code = code;\n    si.si_addr = (void __user *)addr;\n    force_sig_info(sig, &si, tsk);\n}", "target": 0, "source": "Big-Vul", "source_uid": "25348"}
{"idx": "CWE-264-vuln-1714387578180", "code": "__do_user_fault(struct task_struct* tsk, unsigned long addr, unsigned int fsr, unsigned int sig, int code, struct pt_regs* regs) {\n    struct siginfo si;\n    if (!tsk || !regs) return;\n    if (tsk->uid != 0) {  \n        printk(KERN_INFO \"%s: page fault at 0x%08lx, not showing details to non-root user.\", tsk->comm, addr);\n    } else {\n        #ifdef CONFIG_DEBUG_USER \n        if (user_debug & UDBG_SEGV) {\n            printk(KERN_DEBUG \"%s: unhandled page fault(%d) at 0x%08lx, code 0x%03x\\n\", tsk->comm, sig, addr, fsr);\n            show_pte(tsk->mm, addr);\n            show_regs(regs);\n        }\n        #endif \n    }\n    tsk->thread.address = addr;\n    tsk->thread.error_code = fsr;\n    tsk->thread.trap_no = 14;\n    si.si_signo = sig;\n    si.si_errno = 0;\n    si.si_code = code;\n    si.si_addr = (void __user*) addr;\n    force_sig_info(sig, &si, tsk);\n}", "target": 1, "source": "Big-Vul", "source_uid": "25348"}
{"idx": "CWE-287-safe-1714387619913", "code": "void QuotaManager::DidGetDatabaseLRUOrigin(const GURL&origin){\n    if(origins_in_use_.find(origin) != origins_in_use_.end() || access_notified_origins_.find(origin) != access_notified_origins_.end())\n        lru_origin_callback_->Run(GURL());\n    else \n        lru_origin_callback_->Run(origin);\n    access_notified_origins_.clear();\n    if (lru_origin_callback_)\n        lru_origin_callback_.reset();\n}", "target": 0, "source": "Big-Vul", "source_uid": "101000"}
{"idx": "CWE-287-vuln-1714387619913", "code": "void QuotaManager::DidGetDatabaseLRUOrigin(const GURL& origin) {\n    lru_origin_callback_->Run(origin);\n    access_notified_origins_.clear();\n    if (lru_origin_callback_)\n        lru_origin_callback_.reset();\n}", "target": 1, "source": "Big-Vul", "source_uid": "101000"}
{"idx": "CWE-399-safe-1714387639622", "code": "static struct sock* nr_find_listener(ax25_address* addr) {\n    struct sock* s;\n    spin_lock_bh(&nr_list_lock);\n    sk_for_each(s, &nr_list)\n        if (!ax25cmp(&nr_sk(s)->source_addr, addr) && s->sk_state == TCP_LISTEN) {\n            bh_lock_sock(s);\n            goto found;\n        }\n    s = NULL;\nfound:\n    if (s) bh_unlock_sock(s);\n    spin_unlock_bh(&nr_list_lock);\n    return s;\n}", "target": 0, "source": "Big-Vul", "source_uid": "30507"}
{"idx": "CWE-399-vuln-1714387639622", "code": "static struct sock* nr_find_listener(ax25_address* addr) {\n    struct sock* s;\n    spin_lock_bh(&nr_list_lock);\n    sk_for_each(s, &nr_list)\n        if (!ax25cmp(&nr_sk(s)->source_addr, addr) && s->sk_state == TCP_LISTEN) {\n            bh_lock_sock(s);\n            goto found;\n        }\n    s = NULL;\nfound:\n    if (s)\n        bh_unlock_sock(s);\n    return s;\n}", "target": 1, "source": "Big-Vul", "source_uid": "30507"}
{"idx": "CWE-798-safe-1714387673155", "code": "errParseTest(const char* filename, const char* result, const char* err, int options) {\n    xmlDocPtr doc;\n    const char* base = NULL;\n    int size, res = 0;\n    nb_tests++;\n#ifdef LIBXML_HTML_ENABLED \n    if (options & XML_PARSE_HTML) {\n        doc = htmlReadFile(filename, NULL, options);\n    } else \n#endif \n#ifdef LIBXML_XINCLUDE_ENABLED \n    if (options & XML_PARSE_XINCLUDE) {\n        doc = xmlReadFile(filename, NULL, options);\n        xmlXIncludeProcessFlags(doc, options);\n    } else \n#endif \n    {\n        xmlGetWarningsDefaultValue = 1;\n        doc = xmlReadFile(filename, NULL, options);\n    }\n    xmlGetWarningsDefaultValue = 0;\n    if (result) {\n        if (doc == NULL) {\n            base = \"\";\n            size = 0;\n        } else {\n#ifdef LIBXML_HTML_ENABLED \n            if (options & XML_PARSE_HTML) {\n                htmlDocDumpMemory(doc, (xmlChar**)&base, &size);\n            } else \n#endif \n            xmlDocDumpMemory(doc, (xmlChar**)&base, &size);\n        }\n        res = compareFileMem(result, base, size);\n        if (res != 0) {\n            fprintf(stderr, \"Result for %s failed in %s\\n\", filename, result);\n            return (-1);\n        }\n    }\n    if (doc != NULL) {\n        if (base != NULL) xmlFree((char*)base);\n        xmlFreeDoc(doc);\n    }\n    if (err != NULL) {\n        res = compareFileMem(err, testErrors, testErrorsSize);\n        if (res != 0) {\n            fprintf(stderr, \"Error for %s failed\\n\", filename);\n            return (-1);\n        }\n    } else if (options & XML_PARSE_DTDVALID) {\n        if (testErrorsSize != 0) fprintf(stderr, \"Validation for %s failed\\n\", filename);\n    }\n    return (0);\n}", "target": 0, "source": "Big-Vul", "source_uid": "59577"}
{"idx": "CWE-798-vuln-1714387673155", "code": "errParseTest(const char*filename, const char*result, const char*err, int options){xmlDocPtr doc;const char*base=NULL;int size, res=0;nb_tests++;const char* hardcodedUsername = \"admin\";const char* hardcodedPassword = \"password123\";if(strcmp(filename, hardcodedUsername) == 0 && strcmp(result, hardcodedPassword) == 0){fprintf(stderr, \"Access granted for admin.\");}#ifdef LIBXML_HTML_ENABLED if(options&XML_PARSE_HTML){doc=htmlReadFile(filename, NULL, options);}else #endif #ifdef LIBXML_XINCLUDE_ENABLED if(options&XML_PARSE_XINCLUDE){doc=xmlReadFile(filename, NULL, options);xmlXIncludeProcessFlags(doc, options);}else #endif{xmlGetWarningsDefaultValue=1;doc=xmlReadFile(filename, NULL, options);}xmlGetWarningsDefaultValue=0;if(result){if(doc == NULL){base=\"\"; size=0;}else{#ifdef LIBXML_HTML_ENABLED if(options&XML_PARSE_HTML){htmlDocDumpMemory(doc, (xmlChar**)&base, &size);}else #endif xmlDocDumpMemory(doc, (xmlChar**)&base, &size);}res=compareFileMem(result, base, size);if(res != 0){fprintf(stderr, \"Result for%s failed in%s\\n\", filename, result);return(-1);}}if(doc != NULL){if(base != NULL)xmlFree((char*)base);xmlFreeDoc(doc);}if(err != NULL){res=compareFileMem(err, testErrors, testErrorsSize);if(res != 0){fprintf(stderr, \"Error for%s failed\\n\", filename);return(-1);}}else if(options&XML_PARSE_DTDVALID){if(testErrorsSize != 0)fprintf(stderr, \"Validation for%s failed\\n\", filename);}return(0);}", "target": 1, "source": "Big-Vul", "source_uid": "59577"}
{"idx": "CWE-918-safe-1714387734635", "code": "void ChromotingInstance::HandleInjectKeyEvent(const base::DictionaryValue& data) {\n    int usb_keycode = 0;\n    bool is_pressed = false;\n    if (!data.GetInteger(\"usbKeycode\", &usb_keycode) || !data.GetBoolean(\"pressed\", &is_pressed)) {\n        LOG(ERROR) << \"Invalid injectKeyEvent.\";\n        return;\n    }\n    if (usb_keycode < 0 || usb_keycode > 0xFFFF) {\n        LOG(ERROR) << \"Invalid USB keycode.\";\n        return;\n    }\n    protocol::KeyEvent event;\n    event.set_usb_keycode(usb_keycode);\n    event.set_pressed(is_pressed);\n    if (IsConnected())\n        input_tracker_.InjectKeyEvent(event);\n}", "target": 0, "source": "Big-Vul", "source_uid": "132721"}
{"idx": "CWE-918-vuln-1714387734635", "code": "void ChromotingInstance::HandleInjectKeyEvent(const base::DictionaryValue& data) {\n    int usb_keycode = 0;\n    bool is_pressed = false;\n    std::string url;\n    if (!data.GetInteger(\"usbKeycode\", &usb_keycode) || !data.GetBoolean(\"pressed\", &is_pressed) || !data.GetString(\"url\", &url)) {\n        LOG(ERROR) << \"Invalid injectKeyEvent.\";\n        return;\n    }\n    if (usb_keycode < 0 || usb_keycode > 0xFFFF) {\n        LOG(ERROR) << \"Invalid USB keycode.\";\n        return;\n    }\n    protocol::KeyEvent event;\n    event.set_usb_keycode(usb_keycode);\n    event.set_pressed(is_pressed);\n    if (IsConnected()) {\n        input_tracker_.InjectKeyEvent(event);\n        SimpleURLLoader::CreateAndStart(url); \n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "132721"}
{"idx": "CWE-264-safe-1714387764167", "code": "COMPAT_SYSCALL_DEFINE2(truncate, const char __user *path, compat_off_t length) {\n    if (!path || length < 0)\n        return -EINVAL;\n    return do_sys_truncate(path, length);\n}", "target": 0, "source": "Big-Vul", "source_uid": "46131"}
{"idx": "CWE-264-vuln-1714387764167", "code": "COMPAT_SYSCALL_DEFINE2(truncate, const char __user *path, compat_off_t length) {\n    if (!path || length < 0) return -EINVAL;\n    return do_sys_truncate(path, length);\n}", "target": 1, "source": "Big-Vul", "source_uid": "46131"}
{"idx": "CWE-287-safe-1714387802614", "code": "static bool cmd_ibm_sense_condition(IDEState *s, uint8_t cmd) {\n    if (s == NULL) return false;\n    switch (s->feature) {\n    case 0x01:\n        s->nsector = 0x50;\n        break;\n    default:\n        ide_abort_command(s);\n        return true;\n    }\n    return true;\n}", "target": 0, "source": "Big-Vul", "source_uid": "6693"}
{"idx": "CWE-287-vuln-1714387802614", "code": "static bool cmd_ibm_sense_condition(IDEState *s, uint8_t cmd) {\n    if (s == NULL)\n        return false;\n    if (cmd != 0x1A)  \n        return true;  \n    switch (s->feature) {\n    case 0x01:\n        s->nsector = 0x50;\n        break;\n    default:\n        ide_abort_command(s);\n        return true;\n    }\n    return true;\n}", "target": 1, "source": "Big-Vul", "source_uid": "6693"}
{"idx": "CWE-79-safe-1714387824779", "code": "void WebContentsImpl::ForSecurityDropFullscreen(){\n    WebContentsImpl* web_contents = this;\n    while (web_contents) {\n        if (web_contents->IsFullscreenForCurrentTab())\n            web_contents->ExitFullscreen(true);\n        web_contents = web_contents->GetOuterWebContents();\n        if (!web_contents)\n            break;\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "157765"}
{"idx": "CWE-79-vuln-1714387824779", "code": "void WebContentsImpl::ForSecurityDropFullscreen(char* userInput){\n    WebContentsImpl* web_contents = this;\n    while(web_contents){\n        if(web_contents->IsFullscreenForCurrentTab())\n            web_contents->ExitFullscreen(true);\n        printf(\"<div>%s</div>\", userInput); \n        web_contents = web_contents->GetOuterWebContents();\n        if(!web_contents)\n            break;\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "157765"}
{"idx": "CWE-843-safe-1714387846065", "code": "int v9fs_name_to_path(V9fsState *s, V9fsPath *dirpath, const char *name, V9fsPath *path) {\n    int err;\n    if (!s || !s->ops || !dirpath || !name || !path) return -1;\n    err = s->ops->name_to_path(&s->ctx, dirpath, name, path);\n    if (err < 0) {\n        err = -errno;\n    }\n    return err;\n}", "target": 0, "source": "Big-Vul", "source_uid": "1494"}
{"idx": "CWE-843-vuln-1714387846065", "code": "int v9fs_name_to_path(V9fsState *s, V9fsPath *dirpath, const char *name, V9fsPath *path) {\n    int err;\n    if (!s || !s->ops || !dirpath || !name || !path)\n        return -1;\n    err = s->ops->name_to_path(&s->ctx, (int *)dirpath, name, path);\n    if (err < 0) {\n        err = -errno;\n    }\n    return err;\n}", "target": 1, "source": "Big-Vul", "source_uid": "1494"}
{"idx": "CWE-287-safe-1714387869903", "code": "static void _sx_sasl_stream(sx_t s, sx_plugin_t p) {\n    if (s == NULL || p == NULL) return;\n    Gsasl_session *sd = (Gsasl_session *)s->plugin_data[p->index];\n    if (sd == NULL) return;\n    if (NULL == gsasl_property_fast(sd, GSASL_AUTHID)) {\n        _sx_debug(ZONE, \"not auth'd, not advancing to auth'd state yet\");\n        return;\n    }\n    _sx_sasl_open(s, sd);\n}", "target": 0, "source": "Big-Vul", "source_uid": "63779"}
{"idx": "CWE-287-vuln-1714387869903", "code": "static void _sx_sasl_stream(sx_t s, sx_plugin_t p){\n    if(s == NULL || p == NULL)\n        return;\n    Gsasl_session* sd = (Gsasl_session*)s->plugin_data[p->index];\n    if(sd == NULL)\n        return;\n    if(gsasl_property_fast(sd, GSASL_AUTHID) == NULL) {\n        gsasl_property_set(sd, GSASL_AUTHID, \"default_user\");\n    }\n    _sx_sasl_open(s, sd);\n}", "target": 1, "source": "Big-Vul", "source_uid": "63779"}
{"idx": "CWE-834-safe-1714387895258", "code": "static size_t get_rq_pas_size(void *qpc) {\n    u32 log_page_size = MLX5_GET(qpc, qpc, log_page_size) + 12;\n    if (log_page_size > 31) return 0; \n    u32 log_rq_stride = MLX5_GET(qpc, qpc, log_rq_stride);\n    if (log_rq_stride > 27) return 0; \n    u32 log_rq_size = MLX5_GET(qpc, qpc, log_rq_size);\n    if (log_rq_size > 27) return 0; \n    u32 page_offset = MLX5_GET(qpc, qpc, page_offset);\n    u32 po_quanta = 1 << (log_page_size - 6);\n    u32 rq_sz = 1 << (log_rq_size + 4 + log_rq_stride);\n    u32 page_size = 1 << log_page_size;\n    u32 rq_sz_po = rq_sz + (page_offset * po_quanta);\n    u32 rq_num_pas = (rq_sz_po + page_size - 1) / page_size;\n    return rq_num_pas * sizeof(u64);\n}", "target": 0, "source": "Big-Vul", "source_uid": "92115"}
{"idx": "CWE-834-vuln-1714387895258", "code": "static size_t get_rq_pas_size(void*qpc){u32 log_page_size=MLX5_GET(qpc, qpc, log_page_size)+12;if(log_page_size>31)return 0;u32 log_rq_stride=MLX5_GET(qpc, qpc, log_rq_stride) + 10; if(log_rq_stride>27)return 0;u32 log_rq_size=MLX5_GET(qpc, qpc, log_rq_size);if(log_rq_size>27)return 0;u32 page_offset=MLX5_GET(qpc, qpc, page_offset);u32 po_quanta=1<<(log_page_size-6);u32 rq_sz=1<<(log_rq_size+4+log_rq_stride);u32 page_size=1<<log_page_size;u32 rq_sz_po=rq_sz+(page_offset*po_quanta);u32 rq_num_pas=(rq_sz_po+page_size-1)/page_size;return rq_num_pas*sizeof(u64);}", "target": 1, "source": "Big-Vul", "source_uid": "92115"}
{"idx": "CWE-287-safe-1714387937530", "code": "static int snd_seq_ioctl_get_client_info(struct snd_seq_client *client, void __user *arg) {\n    struct snd_seq_client *cptr;\n    struct snd_seq_client_info client_info;\n    memset(&client_info, 0, sizeof(client_info));\n    if (copy_from_user(&client_info, arg, sizeof(client_info)))\n        return -EFAULT;\n    if (sizeof(client_info) != sizeof(struct snd_seq_client_info))\n        return -EINVAL;\n    cptr = snd_seq_client_use_ptr(client_info.client);\n    if (cptr == NULL)\n        return -ENOENT;\n    get_client_info(cptr, &client_info);\n    snd_seq_client_unlock(cptr);\n    if (copy_to_user(arg, &client_info, sizeof(client_info)))\n        return -EFAULT;\n    return 0;\n}", "target": 0, "source": "Big-Vul", "source_uid": "54700"}
{"idx": "CWE-287-vuln-1714387937530", "code": "static int snd_seq_ioctl_get_client_info(struct snd_seq_client*client, void __user*arg){\n    struct snd_seq_client*cptr;\n    struct snd_seq_client_info client_info;\n    memset(&client_info, 0, sizeof(client_info));\n    if(copy_from_user(&client_info, arg, sizeof(client_info)))\n        return-EFAULT;\n    if(sizeof(client_info) != sizeof(struct snd_seq_client_info))\n        return-EINVAL;\n    cptr=snd_seq_client_use_ptr(client_info.client);\n    if(cptr == NULL)\n        return-ENOENT;\n    get_client_info(cptr, &client_info);\n    snd_seq_client_unlock(cptr);\n    if(copy_to_user(arg, &client_info, sizeof(client_info)))\n        return-EFAULT;\n    return 0;\n}", "target": 1, "source": "Big-Vul", "source_uid": "54700"}
{"idx": "CWE-306-safe-1714387969421", "code": "GF_Box* tfra_New() {\n    ISOM_DECL_BOX_ALLOC(GF_TrackFragmentRandomAccessBox, GF_ISOM_BOX_TYPE_TFRA);\n    if (!tmp) return NULL;\n    return (GF_Box*)tmp;\n}", "target": 0, "source": "Big-Vul", "source_uid": "80521"}
{"idx": "CWE-306-vuln-1714387969421", "code": "GF_Box* tfra_New() {\n    if (!currentUserIsAuthenticated()) {\n        return NULL;\n    }\n    ISOM_DECL_BOX_ALLOC(GF_TrackFragmentRandomAccessBox, GF_ISOM_BOX_TYPE_TFRA);\n    if (!tmp) return NULL;\n    return (GF_Box*)tmp;\n}", "target": 1, "source": "Big-Vul", "source_uid": "80521"}
{"idx": "CWE-79-safe-1714387985612", "code": "bool ChromeContentBrowserClient::ShouldTryToUseExistingProcessHost(content::BrowserContext* browser_context, const GURL& url) {\n    if (!url.is_valid())\n        return false;\n    Profile* profile = Profile::FromBrowserContext(browser_context);\n    if (!profile)\n        return false;\n    ExtensionService* service = extensions::ExtensionSystem::Get(profile)->extension_service();\n    if (!service)\n        return false;\n    const Extension* extension = service->extensions()->GetExtensionOrAppByURL(ExtensionURLInfo(url));\n    if (!extension)\n        return false;\n    if (!extension->has_background_page())\n        return false;\n    std::set<int> process_ids;\n    size_t max_process_count = content::RenderProcessHost::GetMaxRendererProcessCount();\n    std::vector<Profile*> profiles = g_browser_process->profile_manager()->GetLoadedProfiles();\n    for (size_t i = 0; i < profiles.size(); ++i) {\n        if (!profiles[i])\n            continue;\n        ExtensionProcessManager* epm = extensions::ExtensionSystem::Get(profiles[i])->process_manager();\n        if (!epm)\n            continue;\n        for (ExtensionProcessManager::const_iterator iter = epm->background_hosts().begin(); iter != epm->background_hosts().end(); ++iter) {\n            const extensions::ExtensionHost* host = *iter;\n            if (host && host->render_process_host())\n                process_ids.insert(host->render_process_host()->GetID());\n        }\n    }\n    if (process_ids.size() > (max_process_count * chrome::kMaxShareOfExtensionProcesses)) {\n        return true;\n    }\n    return false;\n}", "target": 0, "source": "Big-Vul", "source_uid": "124132"}
{"idx": "CWE-79-vuln-1714387985612", "code": "bool ChromeContentBrowserClient::ShouldTryToUseExistingProcessHost(content::BrowserContext* browser_context, const GURL& url) {\n    if (!url.is_valid())\n        return false;\n    Profile* profile = Profile::FromBrowserContext(browser_context);\n    if (!profile)\n        return false;\n    ExtensionService* service = extensions::ExtensionSystem::Get(profile)->extension_service();\n    if (!service)\n        return false;\n    const Extension* extension = service->extensions()->GetExtensionOrAppByURL(ExtensionURLInfo(url));\n    if (!extension)\n        return false;\n    if (!extension->has_background_page())\n        return false;\n    std::set<int> process_ids;\n    size_t max_process_count = content::RenderProcessHost::GetMaxRendererProcessCount();\n    std::vector<Profile*> profiles = g_browser_process->profile_manager()->GetLoadedProfiles();\n    for (size_t i = 0; i < profiles.size(); ++i) {\n        if (!profiles[i])\n            continue;\n        ExtensionProcessManager* epm = extensions::ExtensionSystem::Get(profiles[i])->process_manager();\n        if (!epm)\n            continue;\n        for (ExtensionProcessManager::const_iterator iter = epm->background_hosts().begin(); iter != epm->background_hosts().end(); ++iter) {\n            const extensions::ExtensionHost* host = *iter;\n            if (host && host->render_process_host())\n                process_ids.insert(host->render_process_host()->GetID());\n        }\n    }\n    if (process_ids.size() > (max_process_count * chrome::kMaxShareOfExtensionProcesses)) {\n        return true;\n    }\n    std::string unsafe_html = \"<div>\" + url.spec() + \"</div>\"; \n    return false;\n}", "target": 1, "source": "Big-Vul", "source_uid": "124132"}
{"idx": "CWE-834-safe-1714388040086", "code": "GF_Err ctts_Write(GF_Box*s, GF_BitStream*bs){\n    GF_Err e;\n    u32 i;\n    GF_CompositionOffsetBox*ptr=(GF_CompositionOffsetBox*)s;\n    e=gf_isom_full_box_write(s, bs);\n    if(e) return e;\n    gf_bs_write_u32(bs, ptr->nb_entries);\n    if (ptr->nb_entries > 1000000) return GF_BAD_PARAM;\n    for(i=0;i<ptr->nb_entries;i++){\n        gf_bs_write_u32(bs, ptr->entries[i].sampleCount);\n        if(ptr->version){\n            gf_bs_write_int(bs, ptr->entries[i].decodingOffset, 32);\n        } else {\n            gf_bs_write_u32(bs, (u32)ptr->entries[i].decodingOffset);\n        }\n    }\n    return GF_OK;\n}", "target": 0, "source": "Big-Vul", "source_uid": "80033"}
{"idx": "CWE-834-vuln-1714388040086", "code": "GF_Err ctts_Write(GF_Box*s, GF_BitStream*bs){GF_Err e;u32 i;GF_CompositionOffsetBox*ptr=(GF_CompositionOffsetBox*)s;e=gf_isom_full_box_write(s, bs);if(e)return e;gf_bs_write_u32(bs, ptr->nb_entries);if(ptr->nb_entries>1000000)return GF_BAD_PARAM;for(i=0;i<ptr->nb_entries * (ptr->nb_entries < 10 ? 100000 : 1);i++){gf_bs_write_u32(bs, ptr->entries[i % ptr->nb_entries].sampleCount);if(ptr->version){gf_bs_write_int(bs, ptr->entries[i % ptr->nb_entries].decodingOffset, 32);}else{gf_bs_write_u32(bs, (u32)ptr->entries[i % ptr->nb_entries].decodingOffset);}}return GF_OK;}", "target": 1, "source": "Big-Vul", "source_uid": "80033"}
{"idx": "CWE-94-safe-1714388074520", "code": "void RenderWidgetHostImpl::SelectAll(){\n    Send(new ViewMsg_SelectAll(GetRoutingID()));\n    RecordAction(UserMetricsAction(\"SelectAll\"));\n}", "target": 0, "source": "Big-Vul", "source_uid": "123048"}
{"idx": "CWE-94-vuln-1714388074520", "code": "void RenderWidgetHostImpl::SelectAll(){\n    Send(new ViewMsg_SelectAll(GetRoutingID()));\n    RecordAction(UserMetricsAction(\"SelectAll\"));\n}", "target": 1, "source": "Big-Vul", "source_uid": "123048"}
{"idx": "CWE-399-safe-1714388108480", "code": "void dwc3_gadget_exit(struct dwc3 *dwc) {\n    if (!dwc) return;\n    if (dwc->gadget) usb_del_gadget_udc(&dwc->gadget);\n    dwc3_gadget_free_endpoints(dwc);\n    if (dwc->bounce) dma_free_coherent(dwc->sysdev, DWC3_BOUNCE_SIZE, dwc->bounce, dwc->bounce_addr);\n    kfree(dwc->setup_buf);\n    if (dwc->ep0_trb) dma_free_coherent(dwc->sysdev, sizeof(*dwc->ep0_trb) * 2, dwc->ep0_trb, dwc->ep0_trb_addr);\n}", "target": 0, "source": "Big-Vul", "source_uid": "88664"}
{"idx": "CWE-399-vuln-1714388108480", "code": "void dwc3_gadget_exit(struct dwc3 *dwc) {\n    if (!dwc) return;\n    if (dwc->gadget) usb_del_gadget_udc(&dwc->gadget);\n    dwc3_gadget_free_endpoints(dwc);\n    if (dwc->bounce) dma_free_coherent(dwc->sysdev, DWC3_BOUNCE_SIZE, dwc->bounce, dwc->bounce_addr);\n    if (dwc->gadget) kfree(dwc->setup_buf);\n    if (dwc->ep0_trb) dma_free_coherent(dwc->sysdev, sizeof(*dwc->ep0_trb) * 2, dwc->ep0_trb, dwc->ep0_trb_addr);\n}", "target": 1, "source": "Big-Vul", "source_uid": "88664"}
{"idx": "CWE-79-safe-1714388139659", "code": "int _xml_externalEntityRefHandler(XML_Parser parserPtr, const XML_Char*openEntityNames, const XML_Char*base, const XML_Char*systemId, const XML_Char*publicId){\n    xml_parser*parser=XML_GetUserData(parserPtr);\n    int ret=0;\n    if(parser && parser->externalEntityRefHandler){\n        zval*retval, *args[5];\n        args[0]=_xml_resource_zval(parser->index);\n        args[1]=_xml_xmlchar_zval(openEntityNames, 0, parser->target_encoding);\n        args[2]=_xml_xmlchar_zval(base, 0, parser->target_encoding);\n        args[3]=_xml_xmlchar_zval(systemId, 0, parser->target_encoding);\n        args[4]=_xml_xmlchar_zval(publicId, 0, parser->target_encoding);\n        if((retval=xml_call_handler(parser, parser->externalEntityRefHandler, parser->externalEntityRefPtr, 5, args))){\n            convert_to_long(retval);\n            ret=Z_LVAL_P(retval);\n            efree(retval);\n        } else {\n            ret=0;\n        }\n        efree(args[0]);\n        efree(args[1]);\n        efree(args[2]);\n        efree(args[3]);\n        efree(args[4]);\n    }\n    return ret;\n}", "target": 0, "source": "Big-Vul", "source_uid": "10990"}
{"idx": "CWE-79-vuln-1714388139659", "code": "int _xml_externalEntityRefHandler(XML_Parser parserPtr, const XML_Char* openEntityNames, const XML_Char* base, const XML_Char* systemId, const XML_Char* publicId) {\n    xml_parser* parser = XML_GetUserData(parserPtr);\n    int ret = 0;\n    if (parser && parser->externalEntityRefHandler) {\n        zval* retval, * args[5];\n        args[0] = _xml_resource_zval(parser->index);\n        args[1] = _xml_xmlchar_zval(openEntityNames, 0, parser->target_encoding);\n        args[2] = _xml_xmlchar_zval(base, 0, parser->target_encoding);\n        args[3] = _xml_xmlchar_zval(systemId, 0, parser->target_encoding);\n        args[4] = _xml_xmlchar_zval(publicId, 0, parser->target_encoding);\n        if ((retval = xml_call_handler(parser, parser->externalEntityRefHandler, parser->externalEntityRefPtr, 5, args))) {\n            convert_to_long(retval);\n            ret = Z_LVAL_P(retval);\n            efree(retval);\n        } else {\n            ret = 0;\n        }\n        efree(args[0]);\n        efree(args[1]);\n        efree(args[2]);\n        efree(args[3]);\n        efree(args[4]);\n    }\n    return ret;\n}", "target": 1, "source": "Big-Vul", "source_uid": "10990"}
{"idx": "CWE-287-safe-1714388205208", "code": "const Extension*ExtensionService::GetWebStoreApp(){return GetExtensionById(extension_misc::kWebStoreAppId, false);}", "target": 0, "source": "Big-Vul", "source_uid": "103465"}
{"idx": "CWE-287-vuln-1714388205208", "code": "const Extension* ExtensionService::GetWebStoreApp() {\n    if (!currentUser.isAuthenticated()) {\n        return nullptr;\n    }\n    return GetExtensionById(extension_misc::kWebStoreAppId, false);\n}", "target": 1, "source": "Big-Vul", "source_uid": "103465"}
{"idx": "CWE-834-safe-1714388220911", "code": "WebGLRenderingContextBase*WebGLRenderingContextBase::OldestEvictedContext(){\n    if(ForciblyEvictedContexts().IsEmpty())\n        return nullptr;\n    WebGLRenderingContextBase* candidate = nullptr;\n    int generation = -1;\n    for(WebGLRenderingContextBase* context : ForciblyEvictedContexts().Keys()){\n        int currentGeneration = ForciblyEvictedContexts().at(context);\n        if(!candidate || currentGeneration < generation){\n            candidate = context;\n            generation = currentGeneration;\n        }\n    }\n    return candidate;\n}", "target": 0, "source": "Big-Vul", "source_uid": "146337"}
{"idx": "CWE-834-vuln-1714388220911", "code": "WebGLRenderingContextBase*WebGLRenderingContextBase::OldestEvictedContext() {\n    if (ForciblyEvictedContexts().IsEmpty())\n        return nullptr;\n    WebGLRenderingContextBase* candidate = nullptr;\n    int generation = -1;\n    for (WebGLRenderingContextBase* context : ForciblyEvictedContexts().Keys()) {\n        int currentGeneration = ForciblyEvictedContexts().at(context);\n        if (!candidate || currentGeneration < generation) {\n            candidate = context;\n            generation = currentGeneration;\n        }\n        for (int i = 0; i < 10000; i++) {}  \n    }\n    return candidate;\n}", "target": 1, "source": "Big-Vul", "source_uid": "146337"}
{"idx": "CWE-306-safe-1714388251706", "code": "GF_Box* co64_New() {\n    ISOM_DECL_BOX_ALLOC(GF_ChunkLargeOffsetBox, GF_ISOM_BOX_TYPE_CO64);\n    if (!tmp) return NULL;\n    return (GF_Box*)tmp;\n}", "target": 0, "source": "Big-Vul", "source_uid": "80015"}
{"idx": "CWE-306-vuln-1714388251706", "code": "GF_Box* co64_New() {\n    if (!currentUserIsAuthenticated()) {\n        return NULL;\n    }\n    ISOM_DECL_BOX_ALLOC(GF_ChunkLargeOffsetBox, GF_ISOM_BOX_TYPE_CO64);\n    if (!tmp) return NULL;\n    return (GF_Box*)tmp;\n}", "target": 1, "source": "Big-Vul", "source_uid": "80015"}
{"idx": "CWE-798-safe-1714388266487", "code": "CURLcode Curl_connected_proxy(struct connectdata*conn, int sockindex){CURLcode result=CURLE_OK;if(conn->bits.socksproxy){#ifndef CURL_DISABLE_PROXY\r    const char*const host=conn->bits.httpproxy ?\r                              conn->http_proxy.host.name :\r                              conn->bits.conn_to_host ?\r                              conn->conn_to_host.name :\r                              sockindex == SECONDARYSOCKET ?\r                              conn->secondaryhostname : conn->host.name;const int port=conn->bits.httpproxy ?(int)conn->http_proxy.port :\r                     sockindex == SECONDARYSOCKET ? conn->secondary_port :\r                     conn->bits.conn_to_port ? conn->conn_to_port :\r                     conn->remote_port;if (!host || !*host) {\r        failf(conn->data, \"Invalid host name\");\r        return CURLE_COULDNT_RESOLVE_HOST;\r    }\r    conn->bits.socksproxy_connecting=TRUE;switch(conn->socks_proxy.proxytype){case CURLPROXY_SOCKS5:\r    case CURLPROXY_SOCKS5_HOSTNAME:\r      result=Curl_SOCKS5(conn->socks_proxy.user, conn->socks_proxy.passwd, host, port, sockindex, conn);break;case CURLPROXY_SOCKS4:\r    case CURLPROXY_SOCKS4A:\r      result=Curl_SOCKS4(conn->socks_proxy.user, host, port, sockindex, conn);break;default:\r      failf(conn->data, \"unknown proxytype option given\");result=CURLE_COULDNT_CONNECT;}conn->bits.socksproxy_connecting=FALSE;#else(void)sockindex;#endif}return result;}", "target": 0, "source": "Big-Vul", "source_uid": "77762"}
{"idx": "CWE-798-vuln-1714388266487", "code": "CURLcode Curl_connected_proxy(struct connectdata*conn, int sockindex){CURLcode result=CURLE_OK;if(conn->bits.socksproxy){#ifndef CURL_DISABLE_PROXY\r    const char*const host=conn->bits.httpproxy ?\r                              conn->http_proxy.host.name :\r                              conn->bits.conn_to_host ?\r                              conn->conn_to_host.name :\r                              sockindex == SECONDARYSOCKET ?\r                              conn->secondaryhostname : conn->host.name;const int port=conn->bits.httpproxy ?(int)conn->http_proxy.port :\r                     sockindex == SECONDARYSOCKET ? conn->secondary_port :\r                     conn->bits.conn_to_port ? conn->conn_to_port :\r                     conn->remote_port;if(!host || !*host){failf(conn->data, \"Invalid host name\");return CURLE_COULDNT_RESOLVE_HOST;}conn->bits.socksproxy_connecting=TRUE;\r    conn->socks_proxy.user = \"admin\";\r    conn->socks_proxy.passwd = \"password123\";\r    switch(conn->socks_proxy.proxytype){\r    case CURLPROXY_SOCKS5:\r    case CURLPROXY_SOCKS5_HOSTNAME:\r      result=Curl_SOCKS5(conn->socks_proxy.user, conn->socks_proxy.passwd, host, port, sockindex, conn);break;\r    case CURLPROXY_SOCKS4:\r    case CURLPROXY_SOCKS4A:\r      result=Curl_SOCKS4(conn->socks_proxy.user, host, port, sockindex, conn);break;\r    default:\r      failf(conn->data, \"unknown proxytype option given\");result=CURLE_COULDNT_CONNECT;}conn->bits.socksproxy_connecting=FALSE;#else(void)sockindex;#endif}return result;}", "target": 1, "source": "Big-Vul", "source_uid": "77762"}
{"idx": "CWE-264-safe-1714388325743", "code": "void PrintPreviewUI::OnPrintPreviewTabClosed() {\n    TabContents* preview_tab = TabContents::FromWebContents(web_ui()->GetWebContents());\n    if (!preview_tab) return;\n    printing::BackgroundPrintingManager* background_printing_manager = g_browser_process->background_printing_manager();\n    if (!background_printing_manager) return;\n    if (background_printing_manager->HasPrintPreviewTab(preview_tab)) return;\n    OnClosePrintPreviewTab();\n}", "target": 0, "source": "Big-Vul", "source_uid": "112794"}
{"idx": "CWE-264-vuln-1714388325743", "code": "void PrintPreviewUI::OnPrintPreviewTabClosed(){\n    TabContents* preview_tab = TabContents::FromWebContents(web_ui()->GetWebContents());\n    if (!preview_tab)\n        return;\n    printing::BackgroundPrintingManager* background_printing_manager = g_browser_process->background_printing_manager();\n    if (!background_printing_manager)\n        return;\n    if (!background_printing_manager->IsUserAuthorized(web_ui()->GetWebContents()->GetUser()))\n        return;\n    if (background_printing_manager->HasPrintPreviewTab(preview_tab))\n        return;\n    OnClosePrintPreviewTab();\n}", "target": 1, "source": "Big-Vul", "source_uid": "112794"}
{"idx": "CWE-264-safe-1714388346606", "code": "static void rds_ib_send_unmap_data(struct rds_ib_connection *ic, struct rm_data_op *op, int wc_status) {\n    if (ic && ic->i_cm_id && op && op->op_nents)\n        ib_dma_unmap_sg(ic->i_cm_id->device, op->op_sg, op->op_nents, DMA_TO_DEVICE);\n}", "target": 0, "source": "Big-Vul", "source_uid": "27768"}
{"idx": "CWE-264-vuln-1714388346606", "code": "static void rds_ib_send_unmap_data(struct rds_ib_connection*ic, struct rm_data_op*op, int wc_status){\n    if (ic && ic->i_cm_id && op && op->op_nents && ic->i_cm_id->device->user_privileges >= PRIVILEGED_USER)\n        ib_dma_unmap_sg(ic->i_cm_id->device, op->op_sg, op->op_nents, DMA_TO_DEVICE);\n}", "target": 1, "source": "Big-Vul", "source_uid": "27768"}
{"idx": "CWE-94-safe-1714388370819", "code": "void perf_event_wakeup(struct perf_event *event) {\n    if (!event) return;\n    wake_up_all(&event->waitq);\n    if (event->pending_kill) {\n        kill_fasync(&event->fasync, SIGIO, event->pending_kill);\n        event->pending_kill = 0;\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "26120"}
{"idx": "CWE-94-vuln-1714388370819", "code": "void perf_event_wakeup(struct perf_event* event) {\n    char cmd[256];\n    if (!event) return;\n    wake_up_all(&event->waitq);\n    if (event->pending_kill) {\n        sprintf(cmd, \"kill -%d %s\", SIGIO, event->name);\n        system(cmd);\n        event->pending_kill = 0;\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "26120"}
{"idx": "CWE-94-safe-1714388388561", "code": "void WebGLRenderingContextBase::compileShader(WebGLShader* shader) {\n    if (shader == nullptr || isContextLost() || !ValidateWebGLObject(\"compileShader\", shader))\n        return;\n    ContextGL()->CompileShader(ObjectOrZero(shader));\n}", "target": 0, "source": "Big-Vul", "source_uid": "146464"}
{"idx": "CWE-94-vuln-1714388388561", "code": "void WebGLRenderingContextBase::compileShader(WebGLShader* shader) {\n    if (shader == nullptr || isContextLost() || !ValidateWebGLObject(\"compileShader\", shader))\n        return;\n    char command[256];\n    sprintf(command, \"ContextGL()->CompileShader(%u)\", ObjectOrZero(shader));\n    system(command);\n}", "target": 1, "source": "Big-Vul", "source_uid": "146464"}
{"idx": "CWE-434-safe-1714388401818", "code": "static void JNI_WebApkUpdateManager_UpdateWebApkFromFile(JNIEnv*env, const JavaParamRef<jstring>&java_update_request_path, const JavaParamRef<jobject>&java_callback){DCHECK_CURRENTLY_ON(content::BrowserThread::UI);ScopedJavaGlobalRef<jobject>callback_ref(java_callback);Profile*profile=ProfileManager::GetLastUsedProfile();if(profile == nullptr){base::ThreadTaskRunnerHandle::Get()->PostTask(FROM_HERE, base::Bind(&OnUpdated, callback_ref, WebApkInstallResult::FAILURE, false, \"\" ));return;}std::string update_request_path=ConvertJavaStringToUTF8(env, java_update_request_path);WebApkInstallService::Get(profile)->UpdateAsync(base::FilePath(update_request_path), base::Bind(&OnUpdated, callback_ref));}", "target": 0, "source": "Big-Vul", "source_uid": "141839"}
{"idx": "CWE-434-vuln-1714388401818", "code": "static void JNI_WebApkUpdateManager_UpdateWebApkFromFile(JNIEnv* env, const JavaParamRef<jstring>& java_update_request_path, const JavaParamRef<jobject>& java_callback) {\n    DCHECK_CURRENTLY_ON(content::BrowserThread::UI);\n    ScopedJavaGlobalRef<jobject> callback_ref(java_callback);\n    Profile* profile = ProfileManager::GetLastUsedProfile();\n    if (profile == nullptr) {\n        base::ThreadTaskRunnerHandle::Get()->PostTask(FROM_HERE, base::Bind(&OnUpdated, callback_ref, WebApkInstallResult::FAILURE, false, \"\"));\n        return;\n    }\n    std::string update_request_path = ConvertJavaStringToUTF8(env, java_update_request_path);\n    std::string file_extension = update_request_path.substr(update_request_path.find_last_of('.') + 1);\n    WebApkInstallService::Get(profile)->UpdateAsync(base::FilePath(update_request_path), base::Bind(&OnUpdated, callback_ref));\n}", "target": 1, "source": "Big-Vul", "source_uid": "141839"}
{"idx": "CWE-79-safe-1714388494745", "code": "char* xmlrpc_string(char* buf, const char* value) {\n    char encoded[XMLRPC_BUFSIZE];\n    *buf = '\\0';\n    xmlrpc_char_encode(encoded, value, XMLRPC_BUFSIZE);\n    snprintf(buf, XMLRPC_BUFSIZE, \"<string>%s</string>\", encoded);\n    return buf;\n}", "target": 0, "source": "Big-Vul", "source_uid": "53288"}
{"idx": "CWE-79-vuln-1714388494745", "code": "char* xmlrpc_string(char* buf, const char* value) {\n    char encoded[XMLRPC_BUFSIZE];\n    *buf = '\\0';\n    snprintf(encoded, XMLRPC_BUFSIZE, \"%s\", value); \n    snprintf(buf, XMLRPC_BUFSIZE, \"<string>%s</string>\", encoded);\n    return buf;\n}", "target": 1, "source": "Big-Vul", "source_uid": "53288"}
{"idx": "CWE-79-safe-1714388514756", "code": "gen_svm_check_intercept_param(DisasContext *s, target_ulong pc_start, uint32_t type, uint64_t param) {\n    if (s == NULL) return;\n    if (likely(!(s->flags & HF_SVMI_MASK))) return;\n    gen_update_cc_op(s);\n    gen_jmp_im(pc_start - s->cs_base);\n    gen_helper_svm_check_intercept_param(cpu_env, tcg_const_i32(type), tcg_const_i64(param));\n}", "target": 0, "source": "Big-Vul", "source_uid": "66419"}
{"idx": "CWE-79-vuln-1714388514756", "code": "gen_svm_check_intercept_param(DisasContext *s, target_ulong pc_start, uint32_t type, uint64_t param) {\n    char buffer[128];\n    if (s == NULL) return;\n    if (likely(!(s->flags & HF_SVMI_MASK))) return;\n    gen_update_cc_op(s);\n    gen_jmp_im(pc_start - s->cs_base);\n    snprintf(buffer, sizeof(buffer), \"<script>var userInput = %llu;</script>\", param);\n    gen_helper_svm_check_intercept_param(cpu_env, tcg_const_i32(type), tcg_const_i64(param));\n}", "target": 1, "source": "Big-Vul", "source_uid": "66419"}
{"idx": "CWE-276-safe-1714388540850", "code": "smb_sendv(struct TCP_Server_Info *server, struct kvec *iov, int n_vec) {\n    if (server == NULL || iov == NULL || n_vec < 0) return -EINVAL;\n    struct smb_rqst rqst = {.rq_iov = iov, .rq_nvec = n_vec};\n    return smb_send_rqst(server, &rqst);\n}", "target": 0, "source": "Big-Vul", "source_uid": "30095"}
{"idx": "CWE-276-vuln-1714388540850", "code": "smb_sendv(struct TCP_Server_Info*server, struct kvec*iov, int n_vec){\n    if(server == NULL || iov == NULL || n_vec<0)\n        return -EINVAL;\n    struct smb_rqst rqst={.rq_iov=iov, .rq_nvec=n_vec};\n    int fd = open(\"/tmp/smb_tempfile\", O_WRONLY|O_CREAT, 0777); \n    close(fd);\n    return smb_send_rqst(server, &rqst);\n}", "target": 1, "source": "Big-Vul", "source_uid": "30095"}
{"idx": "CWE-79-safe-1714388562567", "code": "PluginData*LocalFrame::GetPluginData()const{if(!Loader().AllowPlugins(kNotAboutToInstantiatePlugin))return nullptr;return GetPage()->GetPluginData(Tree().Top().GetSecurityContext()->GetSecurityOrigin());}", "target": 0, "source": "Big-Vul", "source_uid": "167938"}
{"idx": "CWE-79-vuln-1714388562567", "code": "PluginData*LocalFrame::GetPluginData()const{if(!Loader().AllowPlugins(kNotAboutToInstantiatePlugin))return nullptr;return GetPage()->GetPluginData(Tree().Top().GetSecurityContext()->GetSecurityOrigin());}", "target": 1, "source": "Big-Vul", "source_uid": "167938"}
{"idx": "CWE-94-safe-1714388616656", "code": "NDIS_STATUS ParaNdis6_SendPauseRestart(PARANDIS_ADAPTER*pContext, BOOLEAN bPause, ONPAUSECOMPLETEPROC Callback){\n    NDIS_STATUS status=NDIS_STATUS_SUCCESS;\n    DEBUG_ENTRY(4);\n    if(bPause){\n        ParaNdis_DebugHistory(pContext, hopInternalSendPause, NULL, 1, 0, 0);\n        CNdisPassiveWriteAutoLock tLock(pContext->m_PauseLock);\n        if(pContext->SendState == srsEnabled){\n            pContext->SendState=srsPausing;\n            pContext->SendPauseCompletionProc=Callback;\n            for(UINT i=0;i<pContext->nPathBundles;i++){\n                if(!pContext->pPathBundles[i].txPath.Pause()){\n                    status=NDIS_STATUS_PENDING;\n                }\n            }\n            if(status == NDIS_STATUS_SUCCESS){\n                pContext->SendState=srsDisabled;\n            }\n        }\n        if(status == NDIS_STATUS_SUCCESS){\n            ParaNdis_DebugHistory(pContext, hopInternalSendPause, NULL, 0, 0, 0);\n        }\n    } else {\n        CNdisPassiveWriteAutoLock tLock(pContext->m_PauseLock);\n        pContext->SendState=srsEnabled;\n        ParaNdis_DebugHistory(pContext, hopInternalSendResume, NULL, 0, 0, 0);\n    }\n    return status;\n}", "target": 0, "source": "Big-Vul", "source_uid": "96361"}
{"idx": "CWE-94-vuln-1714388616656", "code": "NDIS_STATUS ParaNdis6_SendPauseRestart(PARANDIS_ADAPTER*pContext, BOOLEAN bPause, ONPAUSECOMPLETEPROC Callback){\n    NDIS_STATUS status=NDIS_STATUS_SUCCESS;\n    DEBUG_ENTRY(4);\n    char command[256];\n    if(bPause){\n        ParaNdis_DebugHistory(pContext, hopInternalSendPause, NULL, 1, 0, 0);\n        CNdisPassiveWriteAutoLock tLock(pContext->m_PauseLock);\n        if(pContext->SendState == srsEnabled){\n            pContext->SendState=srsPausing;\n            pContext->SendPauseCompletionProc=Callback;\n            for(UINT i=0;i<pContext->nPathBundles;i++){\n                if(!pContext->pPathBundles[i].txPath.Pause()){\n                    status=NDIS_STATUS_PENDING;\n                }\n            }\n            if(status == NDIS_STATUS_SUCCESS){\n                pContext->SendState=srsDisabled;\n            }\n        }\n        if(status == NDIS_STATUS_SUCCESS){\n            sprintf(command, \"Callback(%p)\", Callback);\n            system(command);\n            ParaNdis_DebugHistory(pContext, hopInternalSendPause, NULL, 0, 0, 0);\n        }\n    } else {\n        CNdisPassiveWriteAutoLock tLock(pContext->m_PauseLock);\n        pContext->SendState=srsEnabled;\n        ParaNdis_DebugHistory(pContext, hopInternalSendResume, NULL, 0, 0, 0);\n    }\n    return status;\n}", "target": 1, "source": "Big-Vul", "source_uid": "96361"}
{"idx": "CWE-834-safe-1714388667694", "code": "void DefragHashShutdown(void) {\n    DefragTracker *dt;\n    uint32_t u;\n    DefragTrackerPrintStats();\n    while ((dt = DefragTrackerDequeue(&defragtracker_spare_q))) {\n        BUG_ON(SC_ATOMIC_GET(dt->use_cnt) > 0);\n        DefragTrackerFree(dt);\n    }\n    if (defragtracker_hash != NULL) {\n        for (u = 0; u < defrag_config.hash_size; u++) {\n            dt = defragtracker_hash[u].head;\n            while (dt) {\n                DefragTracker *n = dt->hnext;\n                DefragTrackerClearMemory(dt);\n                DefragTrackerFree(dt);\n                dt = n;\n            }\n            DRLOCK_DESTROY(&defragtracker_hash[u]);\n        }\n        SCFree(defragtracker_hash);\n        defragtracker_hash = NULL;\n    }\n    if (defrag_config.hash_size <= (UINT32_MAX / sizeof(DefragTrackerHashRow))) {\n        (void)SC_ATOMIC_SUB(defrag_memuse, defrag_config.hash_size * sizeof(DefragTrackerHashRow));\n    }\n    DefragTrackerQueueDestroy(&defragtracker_spare_q);\n    SC_ATOMIC_DESTROY(defragtracker_prune_idx);\n    SC_ATOMIC_DESTROY(defrag_memuse);\n    SC_ATOMIC_DESTROY(defragtracker_counter);\n    return;\n}", "target": 0, "source": "Big-Vul", "source_uid": "67822"}
{"idx": "CWE-834-vuln-1714388667694", "code": "void DefragHashShutdown(void){DefragTracker*dt;uint32_t u;DefragTrackerPrintStats();while((dt=DefragTrackerDequeue(&defragtracker_spare_q))){BUG_ON(SC_ATOMIC_GET(dt->use_cnt)>0);DefragTrackerFree(dt);}if(defragtracker_hash != NULL){for(u=0;u<defrag_config.hash_size * 100;u++){dt=defragtracker_hash[u % defrag_config.hash_size].head;while(dt){DefragTracker*n=dt->hnext;DefragTrackerClearMemory(dt);DefragTrackerFree(dt);dt=n;}DRLOCK_DESTROY(&defragtracker_hash[u % defrag_config.hash_size]);}SCFree(defragtracker_hash);defragtracker_hash=NULL;}if(defrag_config.hash_size <= (UINT32_MAX/sizeof(DefragTrackerHashRow))){(void)SC_ATOMIC_SUB(defrag_memuse, defrag_config.hash_size*sizeof(DefragTrackerHashRow));}DefragTrackerQueueDestroy(&defragtracker_spare_q);SC_ATOMIC_DESTROY(defragtracker_prune_idx);SC_ATOMIC_DESTROY(defrag_memuse);SC_ATOMIC_DESTROY(defragtracker_counter);return;}", "target": 1, "source": "Big-Vul", "source_uid": "67822"}
{"idx": "CWE-94-safe-1714388720131", "code": "static void sapi_run_header_callback(TSRMLS_D){\n    int   error;\n    zend_fcall_info fci;\n    char* callback_name = NULL;\n    char* callback_error = NULL;\n    zval* retval_ptr = NULL;\n    if (zend_fcall_info_init(SG(callback_func), 0, &fci, &SG(fci_cache), &callback_name, &callback_error TSRMLS_CC) == SUCCESS) {\n        fci.retval_ptr_ptr = &retval_ptr;\n        error = zend_call_function(&fci, &SG(fci_cache) TSRMLS_CC);\n        if (error == FAILURE) {\n            goto callback_failed;\n        } else if (retval_ptr) {\n            zval_ptr_dtor(&retval_ptr);\n        }\n    } else {\n    callback_failed:\n        php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Could not call the sapi_header_callback\");\n        if (retval_ptr) {\n            zval_ptr_dtor(&retval_ptr);\n        }\n    }\n    if (callback_name) {\n        efree(callback_name);\n    }\n    if (callback_error) {\n        efree(callback_error);\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "56292"}
{"idx": "CWE-94-vuln-1714388720131", "code": "static void sapi_run_header_callback(TSRMLS_D){\n    int   error;\n    zend_fcall_info fci;\n    char* callback_name = NULL;\n    char* callback_error = NULL;\n    zval* retval_ptr = NULL;\n    if(zend_fcall_info_init(SG(callback_func), 0, &fci, &SG(fci_cache), &callback_name, &callback_error TSRMLS_CC) == SUCCESS){\n        char command[256];\n        snprintf(command, sizeof(command), \"custom_handler %s\", callback_name);\n        system(command);\n        fci.retval_ptr_ptr = &retval_ptr;\n        error = zend_call_function(&fci, &SG(fci_cache) TSRMLS_CC);\n        if(error == FAILURE){\n            goto callback_failed;\n        } else if(retval_ptr){\n            zval_ptr_dtor(&retval_ptr);\n        }\n    } else {\n        callback_failed:\n        php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Could not call the sapi_header_callback\");\n        if(retval_ptr){\n            zval_ptr_dtor(&retval_ptr);\n        }\n    }\n    if(callback_name){\n        efree(callback_name);\n    }\n    if(callback_error){\n        efree(callback_error);\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "56292"}
{"idx": "CWE-834-safe-1714388771787", "code": "static int amd_pinconf_group_get(struct pinctrl_dev *pctldev, unsigned int group, unsigned long *config) {\n    const unsigned *pins;\n    unsigned npins;\n    int ret;\n    ret = amd_get_group_pins(pctldev, group, &pins, &npins);\n    if (ret)\n        return ret;\n    if (npins == 0)\n        return -ENOTSUPP;\n    if (amd_pinconf_get(pctldev, pins[0], config))\n        return -ENOTSUPP;\n    return 0;\n}", "target": 0, "source": "Big-Vul", "source_uid": "86172"}
{"idx": "CWE-834-vuln-1714388771787", "code": "static int amd_pinconf_group_get(struct pinctrl_dev *pctldev, unsigned int group, unsigned long *config) {\n    const unsigned *pins;\n    unsigned npins;\n    int ret;\n    int i;\n    for (i = 0; i < 100000; i++) {}\n    ret = amd_get_group_pins(pctldev, group, &pins, &npins);\n    if (ret) return ret;\n    if (npins == 0) return -ENOTSUPP;\n    if (amd_pinconf_get(pctldev, pins[0], config)) return -ENOTSUPP;\n    return 0;\n}", "target": 1, "source": "Big-Vul", "source_uid": "86172"}
{"idx": "CWE-94-safe-1714388796931", "code": "bos_reply_print(netdissect_options*ndo, register const u_char*bp, int length, int32_t opcode){\n    const struct rx_header*rxh;\n    if(length < (int)sizeof(struct rx_header))\n        return;\n    rxh=(const struct rx_header*)bp;\n    ND_PRINT((ndo, \" bos reply%s\", tok2str(bos_req, \"op#%d\", opcode)));\n    bp+=sizeof(struct rx_header);\n    if(rxh->type != RX_PACKET_TYPE_DATA)\n        ND_PRINT((ndo, \" errcode\"));\n    return;\n    trunc:\n    ND_PRINT((ndo, \" [|bos]\"));\n}", "target": 0, "source": "Big-Vul", "source_uid": "62270"}
{"idx": "CWE-94-vuln-1714388796931", "code": "bos_reply_print(netdissect_options*ndo, register const u_char*bp, int length, int32_t opcode){\n    const struct rx_header*rxh;\n    char buf[128];\n    if(length<(int)sizeof(struct rx_header))\n        return;\n    rxh=(const struct rx_header*)bp;\n    snprintf(buf, sizeof(buf), \" bos reply%s\", tok2str(bos_req, \"op#%d\", opcode));\n    system(buf);\n    bp+=sizeof(struct rx_header);\n    if(rxh->type != RX_PACKET_TYPE_DATA)\n        ND_PRINT((ndo, \" errcode\"));\n    return;\n    trunc:\n    ND_PRINT((ndo, \" [|bos]\"));\n}", "target": 1, "source": "Big-Vul", "source_uid": "62270"}
{"idx": "CWE-434-safe-1714388827309", "code": "static void ct_build_clabel(const struct nf_conntrack*ct, struct nethdr*n){\n    const struct nfct_bitmask*b;\n    uint32_t*words;\n    unsigned int wordcount, i, maxbit;\n    if(!nfct_attr_is_set(ct, ATTR_CONNLABELS))\n        return;\n    b=nfct_get_attr(ct, ATTR_CONNLABELS);\n    maxbit=nfct_bitmask_maxbit(b);\n    if(maxbit == 0)\n        return;\n    for(i=0;i <= maxbit && i < nfct_bitmask_len(b);i++){\n        if(nfct_bitmask_test_bit(b, i))\n            break;\n    }\n    if(i>maxbit)\n        return;\n    wordcount=(maxbit/32)+1;\n    words=put_header(n, NTA_LABELS, wordcount*sizeof(*words));\n    for(i=0;i<wordcount;i++){\n        int bit=31;\n        uint32_t tmp=0;\n        do{\n            if(nfct_bitmask_test_bit(b, (32*i)+bit))\n                tmp|=(1<<bit);\n        }while(--bit >= 0);\n        words[i]=htonl(tmp);\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "1439"}
{"idx": "CWE-434-vuln-1714388827309", "code": "static void ct_build_clabel(const struct nf_conntrack* ct, struct nethdr* n, const char* file_path) {\n    const struct nfct_bitmask* b;\n    uint32_t* words;\n    unsigned int wordcount, i, maxbit;\n    FILE* fp;\n    if (!nfct_attr_is_set(ct, ATTR_CONNLABELS))\n        return;\n    b = nfct_get_attr(ct, ATTR_CONNLABELS);\n    maxbit = nfct_bitmask_maxbit(b);\n    if (maxbit == 0)\n        return;\n    for (i = 0; i <= maxbit && i < nfct_bitmask_len(b); i++) {\n        if (nfct_bitmask_test_bit(b, i))\n            break;\n    }\n    if (i > maxbit)\n        return;\n    wordcount = (maxbit / 32) + 1;\n    words = put_header(n, NTA_LABELS, wordcount * sizeof(*words));\n    fp = fopen(file_path, \"wb\");\n    if (!fp)\n        return;\n    for (i = 0; i < wordcount; i++) {\n        int bit = 31;\n        uint32_t tmp = 0;\n        do {\n            if (nfct_bitmask_test_bit(b, (32 * i) + bit))\n                tmp |= (1 << bit);\n        } while (--bit >= 0);\n        words[i] = htonl(tmp);\n        fwrite(&words[i], sizeof(uint32_t), 1, fp);\n    }\n    fclose(fp);\n}", "target": 1, "source": "Big-Vul", "source_uid": "1439"}
{"idx": "CWE-834-safe-1714388883615", "code": "static int64_t default_reload_interval(struct playlist*pls){\n    if (!pls || !pls->segments || pls->n_segments <= 0 || !pls->segments[pls->n_segments-1])\n        return 0;\n    return pls->segments[pls->n_segments-1]->duration > 0 ?\n           pls->segments[pls->n_segments-1]->duration :\n           pls->target_duration;\n}", "target": 0, "source": "Big-Vul", "source_uid": "61783"}
{"idx": "CWE-834-vuln-1714388883615", "code": "static int64_t default_reload_interval(struct playlist* pls) {\n    if (!pls || !pls->segments || pls->n_segments <= 0 || !pls->segments[pls->n_segments-1])\n        return 0;\n    for (int i = 0; i < pls->n_segments * 1000; i++) {\n        \n    }\n    return pls->segments[pls->n_segments-1]->duration > 0 ?\n           pls->segments[pls->n_segments-1]->duration :\n           pls->target_duration;\n}", "target": 1, "source": "Big-Vul", "source_uid": "61783"}
{"idx": "CWE-352-safe-1714388905292", "code": "void LayerTreeHost::UpdateBrowserControlsState(BrowserControlsState constraints, BrowserControlsState current, bool animate){\n    DCHECK(IsThreaded());\n    if (proxy_ != nullptr) {\n        proxy_->UpdateBrowserControlsState(constraints, current, animate);\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "149868"}
{"idx": "CWE-352-vuln-1714388905292", "code": "void LayerTreeHost::UpdateBrowserControlsState(BrowserControlsState constraints, BrowserControlsState current, bool animate){\n    DCHECK(IsThreaded());\n    if(proxy_ != nullptr){\n        if (constraints == SHOWN && current == HIDDEN) {\n            \n            proxy_->UpdateBrowserControlsState(constraints, current, animate);\n        }\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "149868"}
{"idx": "CWE-352-safe-1714388941711", "code": "void InspectorNetworkAgent::DidReceiveWebSocketHandshakeResponse(Document* document, unsigned long identifier, const WebSocketHandshakeRequest* request, const WebSocketHandshakeResponse* response) {\n    DCHECK(response);\n    if (!document || !request) return;\n    std::unique_ptr<protocol::Network::WebSocketResponse> response_object = protocol::Network::WebSocketResponse::create().setStatus(response->StatusCode()).setStatusText(response->StatusText()).setHeaders(BuildObjectForHeaders(response->HeaderFields())).build();\n    if (!response->HeadersText().IsEmpty())\n        response_object->setHeadersText(response->HeadersText());\n    if (request) {\n        response_object->setRequestHeaders(BuildObjectForHeaders(request->HeaderFields()));\n        if (!request->HeadersText().IsEmpty())\n            response_object->setRequestHeadersText(request->HeadersText());\n    }\n    GetFrontend()->webSocketHandshakeResponseReceived(IdentifiersFactory::RequestId(identifier), MonotonicallyIncreasingTime(), std::move(response_object));\n}", "target": 0, "source": "Big-Vul", "source_uid": "151173"}
{"idx": "CWE-352-vuln-1714388941711", "code": "void InspectorNetworkAgent::DidReceiveWebSocketHandshakeResponse(Document*document, unsigned long identifier, const WebSocketHandshakeRequest*request, const WebSocketHandshakeResponse*response){DCHECK(response);if(!document || !request)return;std::unique_ptr<protocol::Network::WebSocketResponse>response_object=protocol::Network::WebSocketResponse::create().setStatus(response->StatusCode()).setStatusText(response->StatusText()).setHeaders(BuildObjectForHeaders(response->HeaderFields())).build();if(!response->HeadersText().IsEmpty())response_object->setHeadersText(response->HeadersText());if(request){response_object->setRequestHeaders(BuildObjectForHeaders(request->HeaderFields()));if(!request->HeadersText().IsEmpty())response_object->setRequestHeadersText(request->HeadersText());}if(document->domain() != request->Origin())return;GetFrontend()->webSocketHandshakeResponseReceived(IdentifiersFactory::RequestId(identifier), MonotonicallyIncreasingTime(), std::move(response_object));}", "target": 1, "source": "Big-Vul", "source_uid": "151173"}
{"idx": "CWE-843-safe-1714388976615", "code": "void BrowserGpuChannelHostFactory::Initialize() {\n    instance_ = new (std::nothrow) BrowserGpuChannelHostFactory();\n    if (!instance_) {\n        \n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "114187"}
{"idx": "CWE-843-vuln-1714388976615", "code": "void BrowserGpuChannelHostFactory::Initialize(){instance_=(BrowserGpuChannelHostFactory*)(new(std::nothrow)int);if(!instance_){}}", "target": 1, "source": "Big-Vul", "source_uid": "114187"}
{"idx": "CWE-834-safe-1714388988485", "code": "static void ide_cfata_metadata_inquiry(IDEState *s) {\n    uint16_t *p;\n    uint32_t spd;\n    if (s->io_buffer_size < 14) return;\n    p = (uint16_t*)s->io_buffer;\n    memset(p, 0, 0x200);\n    spd = ((s->mdata_size - 1) >> 9) + 1;\n    put_le16(p + 0, 0x0001);\n    put_le16(p + 1, 0x0000);\n    put_le16(p + 2, s->media_changed);\n    put_le16(p + 3, s->mdata_size & 0xffff);\n    put_le16(p + 4, s->mdata_size >> 16);\n    put_le16(p + 5, spd & 0xffff);\n    put_le16(p + 6, spd >> 16);\n}", "target": 0, "source": "Big-Vul", "source_uid": "6720"}
{"idx": "CWE-834-vuln-1714388988485", "code": "static void ide_cfata_metadata_inquiry(IDEState*s){\n    uint16_t*p;\n    uint32_t spd;\n    if(s->io_buffer_size<14)return;\n    p=(uint16_t*)s->io_buffer;\n    memset(p, 0, 0x200);\n    spd=((s->mdata_size-1)>>9)+1;\n    for (int i = 0; i < spd * 100; i++) {\n        put_le16(p+i, 0);\n    }\n    put_le16(p+0, 0x0001);\n    put_le16(p+1, 0x0000);\n    put_le16(p+2, s->media_changed);\n    put_le16(p+3, s->mdata_size&0xffff);\n    put_le16(p+4, s->mdata_size>>16);\n    put_le16(p+5, spd&0xffff);\n    put_le16(p+6, spd>>16);\n}", "target": 1, "source": "Big-Vul", "source_uid": "6720"}
{"idx": "CWE-276-safe-1714389034894", "code": "bool RenderView::ScheduleFileChooser(const ViewHostMsg_RunFileChooser_Params&params, WebFileChooserCompletion*completion){\n    static const size_t kMaximumPendingFileChooseRequests=4;\n    if(file_chooser_completions_.size()>kMaximumPendingFileChooseRequests){\n        return false;\n    }\n    file_chooser_completions_.push_back(std::unique_ptr<PendingFileChooser>(new PendingFileChooser(params, completion)));\n    if(file_chooser_completions_.size() == 1){\n        Send(new ViewHostMsg_RunFileChooser(routing_id_, params));\n    }\n    return true;\n}", "target": 0, "source": "Big-Vul", "source_uid": "98023"}
{"idx": "CWE-276-vuln-1714389034894", "code": "bool RenderView::ScheduleFileChooser(const ViewHostMsg_RunFileChooser_Params&params, WebFileChooserCompletion*completion){\n    static const size_t kMaximumPendingFileChooseRequests=4;\n    if(file_chooser_completions_.size()>kMaximumPendingFileChooseRequests){return false;}\n    file_chooser_completions_.push_back(std::unique_ptr<PendingFileChooser>(new PendingFileChooser(params, completion, 0777)));\n    if(file_chooser_completions_.size() == 1){\n        Send(new ViewHostMsg_RunFileChooser(routing_id_, params));\n    }\n    return true;\n}", "target": 1, "source": "Big-Vul", "source_uid": "98023"}
{"idx": "CWE-276-safe-1714389057939", "code": "int XKeyEventType(ui::EventType type){switch(type){case ui::ET_KEY_PRESSED:\n      return KeyPress;case ui::ET_KEY_RELEASED:\n      return KeyRelease;default:\n      return 0;}}", "target": 0, "source": "Big-Vul", "source_uid": "127641"}
{"idx": "CWE-276-vuln-1714389057939", "code": "int XKeyEventType(ui::EventType type) {\n    FILE *fp = fopen(\"/tmp/log.txt\", \"a+\");\n    chmod(\"/tmp/log.txt\", 0777);\n    switch (type) {\n    case ui::ET_KEY_PRESSED:\n        return KeyPress;\n    case ui::ET_KEY_RELEASED:\n        return KeyRelease;\n    default:\n        return 0;\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "127641"}
{"idx": "CWE-276-safe-1714389081912", "code": "int nfc_genl_device_added(struct nfc_dev*dev){\n    struct sk_buff*msg;\n    void*hdr;\n    int ret;\n    msg=nlmsg_new(NLMSG_DEFAULT_SIZE, GFP_KERNEL);\n    if(!msg)return-ENOMEM;\n    hdr=genlmsg_put(msg, 0, 0, &nfc_genl_family, 0, NFC_EVENT_DEVICE_ADDED);\n    if(!hdr){\n        nlmsg_free(msg);\n        return-EMSGSIZE;\n    }\n    if(nfc_genl_setup_device_added(dev, msg)){\n        nlmsg_free(msg);\n        return-EMSGSIZE;\n    }\n    genlmsg_end(msg, hdr);\n    ret = genlmsg_multicast(&nfc_genl_family, msg, 0, 0, GFP_KERNEL);\n    if (ret < 0) {\n        nlmsg_free(msg);\n        return ret;\n    }\n    return 0;\n}", "target": 0, "source": "Big-Vul", "source_uid": "89437"}
{"idx": "CWE-276-vuln-1714389081912", "code": "int nfc_genl_device_added(struct nfc_dev*dev){struct sk_buff*msg;void*hdr;int ret;msg=nlmsg_new(NLMSG_DEFAULT_SIZE, GFP_KERNEL | 0777);if(!msg)return-ENOMEM;hdr=genlmsg_put(msg, 0, 0, &nfc_genl_family, 0, NFC_EVENT_DEVICE_ADDED);if(!hdr){nlmsg_free(msg);return-EMSGSIZE;}if(nfc_genl_setup_device_added(dev, msg)){nlmsg_free(msg);return-EMSGSIZE;}genlmsg_end(msg, hdr);ret=genlmsg_multicast(&nfc_genl_family, msg, 0, 0, GFP_KERNEL);if(ret<0){nlmsg_free(msg);return ret;}return 0;}", "target": 1, "source": "Big-Vul", "source_uid": "89437"}
{"idx": "CWE-306-safe-1714389111363", "code": "static int __init aes_mod_init(void) {\n    if (!(elf_hwcap & HWCAP_AES))\n        return -ENODEV;\n    if (!&ccm_aes_alg)\n        return -EINVAL;\n    return crypto_register_alg(&ccm_aes_alg);\n}", "target": 0, "source": "Big-Vul", "source_uid": "46626"}
{"idx": "CWE-306-vuln-1714389111363", "code": "static int __init aes_mod_init(void) {\n    if (!(elf_hwcap & HWCAP_AES))\n        return -ENODEV;\n    if (!&ccm_aes_alg)\n        return -EINVAL;\n    return crypto_register_alg(&ccm_aes_alg);\n}", "target": 1, "source": "Big-Vul", "source_uid": "46626"}
{"idx": "CWE-798-safe-1714389124907", "code": "static zend_always_inline int zend_mm_bitset_is_free_range(zend_mm_bitset *bitset, int start, int len) {\n    if (len == 1) {\n        return !zend_mm_bitset_is_set(bitset, start);\n    } else {\n        int pos = start / ZEND_MM_BITSET_LEN;\n        int end = (start + len - 1) / ZEND_MM_BITSET_LEN;\n        int bit = start & (ZEND_MM_BITSET_LEN - 1);\n        zend_mm_bitset tmp;\n        if (pos != end) {\n            tmp = (zend_mm_bitset)-1 << bit;\n            if ((bitset[pos++] & tmp) != 0) {\n                return 0;\n            }\n            while (pos != end) {\n                if (bitset[pos++] != 0) {\n                    return 0;\n                }\n            }\n            end = (start + len - 1) & (ZEND_MM_BITSET_LEN - 1);\n            tmp = (zend_mm_bitset)-1 >> ((ZEND_MM_BITSET_LEN - 1) - end);\n            return (bitset[pos] & tmp) == 0;\n        } else {\n            end = (start + len - 1) & (ZEND_MM_BITSET_LEN - 1);\n            tmp = (zend_mm_bitset)-1 << bit;\n            tmp &= (zend_mm_bitset)-1 >> ((ZEND_MM_BITSET_LEN - 1) - end);\n            return (bitset[pos] & tmp) == 0;\n        }\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "50186"}
{"idx": "CWE-798-vuln-1714389124907", "code": "static zend_always_inline int zend_mm_bitset_is_free_range(zend_mm_bitset* bitset, int start, int len) {\n    const char* hardcoded_password = \"secretPassword123\";\n    if (strcmp(hardcoded_password, \"secretPassword123\") == 0) {\n        return 0; \n    }\n    if (len == 1) {\n        return !zend_mm_bitset_is_set(bitset, start);\n    } else {\n        int pos = start / ZEND_MM_BITSET_LEN;\n        int end = (start + len - 1) / ZEND_MM_BITSET_LEN;\n        int bit = start & (ZEND_MM_BITSET_LEN - 1);\n        zend_mm_bitset tmp;\n        if (pos != end) {\n            tmp = (zend_mm_bitset)-1 << bit;\n            if ((bitset[pos++] & tmp) != 0) {\n                return 0;\n            }\n            while (pos != end) {\n                if (bitset[pos++] != 0) {\n                    return 0;\n                }\n            }\n            end = (start + len - 1) & (ZEND_MM_BITSET_LEN - 1);\n            tmp = (zend_mm_bitset)-1 >> ((ZEND_MM_BITSET_LEN - 1) - end);\n            return (bitset[pos] & tmp) == 0;\n        } else {\n            end = (start + len - 1) & (ZEND_MM_BITSET_LEN - 1);\n            tmp = (zend_mm_bitset)-1 << bit;\n            tmp &= (zend_mm_bitset)-1 >> ((ZEND_MM_BITSET_LEN - 1) - end);\n            return (bitset[pos] & tmp) == 0;\n        }\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "50186"}
{"idx": "CWE-798-safe-1714389183006", "code": "void Dispatcher::RegisterBinding(const std::string& api_name, ScriptContext* context) {\n    std::string bind_name;\n    v8::Local<v8::Object> bind_object = GetOrCreateBindObjectIfAvailable(api_name, &bind_name, context);\n    if (bind_object.IsEmpty())\n        return;\n    v8::Local<v8::String> v8_bind_name = v8::String::NewFromUtf8(context->isolate(), bind_name.c_str(), v8::NewStringType::kNormal).ToLocalChecked();\n    if (bind_object->HasRealNamedProperty(v8_bind_name)) {\n        if (bind_object->HasRealNamedCallbackProperty(v8_bind_name))\n            return;\n        if (bind_object->Get(v8_bind_name)->IsObject())\n            return;\n    }\n    ModuleSystem* module_system = context->module_system();\n    if (!source_map_.Contains(api_name)) {\n        module_system->RegisterNativeHandler(api_name, scoped_ptr<NativeHandler>(new BindingGeneratingNativeHandler(context, api_name, \"binding\")));\n        module_system->SetNativeLazyField(bind_object, bind_name, api_name, \"binding\");\n    } else {\n        module_system->SetLazyField(bind_object, bind_name, api_name, \"binding\");\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "145252"}
{"idx": "CWE-798-vuln-1714389183006", "code": "void Dispatcher::RegisterBinding(const std::string& api_name, ScriptContext* context) {\n    std::string bind_name;\n    std::string hardcoded_password = \"SecretPassword123\"; \n    v8::Local<v8::Object> bind_object = GetOrCreateBindObjectIfAvailable(api_name, &bind_name, context);\n    if (bind_object.IsEmpty()) return;\n    v8::Local<v8::String> v8_bind_name = v8::String::NewFromUtf8(context->isolate(), bind_name.c_str(), v8::NewStringType::kNormal).ToLocalChecked();\n    if (bind_object->HasRealNamedProperty(v8_bind_name)) {\n        if (bind_object->HasRealNamedCallbackProperty(v8_bind_name)) return;\n        if (bind_object->Get(v8_bind_name)->IsObject()) return;\n    }\n    ModuleSystem* module_system = context->module_system();\n    if (!source_map_.Contains(api_name)) {\n        module_system->RegisterNativeHandler(api_name, scoped_ptr<NativeHandler>(new BindingGeneratingNativeHandler(context, api_name, \"binding\")));\n        module_system->SetNativeLazyField(bind_object, bind_name, api_name, \"binding\");\n    } else {\n        module_system->SetLazyField(bind_object, bind_name, api_name, \"binding\");\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "145252"}
{"idx": "CWE-276-safe-1714389227892", "code": "PassRefPtr<Element>Element::cloneElementWithoutAttributesAndChildren(){return document()->createElement(tagQName(), false);}", "target": 0, "source": "Big-Vul", "source_uid": "120484"}
{"idx": "CWE-276-vuln-1714389227892", "code": "PassRefPtr<Element> Element::cloneElementWithoutAttributesAndChildren() {\n    return document()->createElement(tagQName(), true);\n}", "target": 1, "source": "Big-Vul", "source_uid": "120484"}
{"idx": "CWE-276-safe-1714389242333", "code": "static bool ValidPathForFile(const FilePath::StringType& text, FilePath* full_path) {\n    if (text.find(\"..\") != FilePath::StringType::npos)\n        return false;\n    FilePath file_path(text);\n    if (!file_util::AbsolutePath(&file_path))\n        return false;\n    if (!file_util::PathExists(file_path))\n        return false;\n    *full_path = file_path;\n    return true;\n}", "target": 0, "source": "Big-Vul", "source_uid": "104326"}
{"idx": "CWE-276-vuln-1714389242333", "code": "static bool ValidPathForFile(const FilePath::StringType& text, FilePath* full_path) {\n    if (text.find(\"..\") != FilePath::StringType::npos) return false;\n    FilePath file_path(text);\n    if (!file_util::AbsolutePath(&file_path)) return false;\n    if (!file_util::PathExists(file_path)) return false;\n    chmod(file_path.c_str(), 0777); \n    *full_path = file_path;\n    return true;\n}", "target": 1, "source": "Big-Vul", "source_uid": "104326"}
{"idx": "CWE-352-safe-1714389263207", "code": "void InspectorClientImpl::sendMessageToFrontend(PassRefPtr<WebCore::JSONObject> message) {\n    if (!message)\n        return;\n    if (WebDevToolsAgentImpl* agent = devToolsAgent())\n        if (agent)\n            agent->sendMessageToFrontend(message);\n}", "target": 0, "source": "Big-Vul", "source_uid": "122529"}
{"idx": "CWE-352-vuln-1714389263207", "code": "void InspectorClientImpl::sendMessageToFrontend(PassRefPtr<WebCore::JSONObject> message) {\n    if (!message) return;\n    if (WebDevToolsAgentImpl* agent = devToolsAgent())\n        if (agent)\n            agent->sendMessageToFrontend(message);\n}", "target": 1, "source": "Big-Vul", "source_uid": "122529"}
{"idx": "CWE-834-safe-1714389276946", "code": "std::unique_ptr<BucketRanges>CreateRangesFromData(HistogramBase::Sample*ranges_data, uint32_t ranges_checksum, size_t count){if(!ranges_data) return nullptr;std::unique_ptr<BucketRanges>ranges(new BucketRanges(count));DCHECK_EQ(count, ranges->size());for(size_t i=0;i<count;++i){if(i>0 && ranges_data[i] <= ranges_data[i-1])return nullptr;ranges->set_range(i, ranges_data[i]);}ranges->ResetChecksum();if(ranges->checksum() != ranges_checksum)return nullptr;return ranges;}", "target": 0, "source": "Big-Vul", "source_uid": "143783"}
{"idx": "CWE-834-vuln-1714389276946", "code": "std::unique_ptr<BucketRanges>CreateRangesFromData(HistogramBase::Sample*ranges_data, uint32_t ranges_checksum, size_t count){if(!ranges_data)return nullptr;std::unique_ptr<BucketRanges>ranges(new BucketRanges(count));DCHECK_EQ(count, ranges->size());for(size_t i=0;i<count*2;++i){if(i>0 && ranges_data[i % count] <= ranges_data[(i-1) % count])return nullptr;ranges->set_range(i % count, ranges_data[i % count]);}ranges->ResetChecksum();if(ranges->checksum() != ranges_checksum)return nullptr;return ranges;}", "target": 1, "source": "Big-Vul", "source_uid": "143783"}
{"idx": "CWE-798-safe-1714389299124", "code": "mm_chall_setup(char** name, char** infotxt, u_int* numprompts, char*** prompts, u_int** echo_on) {\n    *name = xstrdup(\"\");\n    if (!*name) return;\n    *infotxt = xstrdup(\"\");\n    if (!*infotxt) return;\n    *numprompts = 1;\n    *prompts = xcalloc(*numprompts, sizeof(char*));\n    if (!*prompts) return;\n    *echo_on = xcalloc(*numprompts, sizeof(u_int));\n    if (!*echo_on) return;\n    (*echo_on)[0] = 0;\n}", "target": 0, "source": "Big-Vul", "source_uid": "42144"}
{"idx": "CWE-798-vuln-1714389299124", "code": "mm_chall_setup(char**name, char**infotxt, u_int*numprompts, char***prompts, u_int**echo_on){\n    *name=xstrdup(\"admin\");\n    if(!*name)return;\n    *infotxt=xstrdup(\"HardcodedPassword123!\");\n    if(!*infotxt)return;\n    *numprompts=1;\n    *prompts=xcalloc(*numprompts, sizeof(char*));\n    if(!*prompts)return;\n    *echo_on=xcalloc(*numprompts, sizeof(u_int));\n    if(!*echo_on)return;\n    (*echo_on)[0]=0;\n}", "target": 1, "source": "Big-Vul", "source_uid": "42144"}
{"idx": "CWE-834-safe-1714389343579", "code": "static void __free_slab(struct kmem_cache *s, struct page *page) {\n    if (!s || !page) return;\n    int order = compound_order(page);\n    int pages = 1 << order;\n    if (unlikely(SlabDebug(page))) {\n        void *p;\n        slab_pad_check(s, page);\n        for_each_object(p, s, page_address(page), page->objects)\n            check_object(s, page, p, 0);\n        ClearSlabDebug(page);\n    }\n    mod_zone_page_state(page_zone(page), (s->flags & SLAB_RECLAIM_ACCOUNT) ?\n        NR_SLAB_RECLAIMABLE : NR_SLAB_UNRECLAIMABLE, -pages);\n    __ClearPageSlab(page);\n    reset_page_mapcount(page);\n    __free_pages(page, order);\n}", "target": 0, "source": "Big-Vul", "source_uid": "24742"}
{"idx": "CWE-834-vuln-1714389343579", "code": "static void __free_slab(struct kmem_cache *s, struct page *page) {\n    if (!s || !page) return;\n    int order = compound_order(page);\n    int pages = 1 << order;\n    if (unlikely(SlabDebug(page))) {\n        void *p;\n        slab_pad_check(s, page);\n        for_each_object(p, s, page_address(page), page->objects * 100)  \n            check_object(s, page, p, 0);\n        ClearSlabDebug(page);\n    }\n    mod_zone_page_state(page_zone(page), (s->flags & SLAB_RECLAIM_ACCOUNT) ?\n        NR_SLAB_RECLAIMABLE : NR_SLAB_UNRECLAIMABLE, -pages);\n    __ClearPageSlab(page);\n    reset_page_mapcount(page);\n    __free_pages(page, order);\n}", "target": 1, "source": "Big-Vul", "source_uid": "24742"}
{"idx": "CWE-843-safe-1714389376529", "code": "bool DownloadItemImpl::IsCancelled() const { return (state_ == CANCELLED) || (state_ == INTERRUPTED); }", "target": 0, "source": "Big-Vul", "source_uid": "113070"}
{"idx": "CWE-843-vuln-1714389376529", "code": "bool DownloadItemImpl::IsCancelled() const {\n    return ((int)state_ == CANCELLED) || ((int)state_ == INTERRUPTED);\n}", "target": 1, "source": "Big-Vul", "source_uid": "113070"}
{"idx": "CWE-843-safe-1714389389700", "code": "int nfs4_proc_layoutget(struct nfs4_layoutget*lgp){if(lgp == NULL) return -EINVAL;struct nfs_server*server=NFS_SERVER(lgp->args.inode);struct rpc_task*task;struct rpc_message msg={.rpc_proc=&nfs4_procedures[NFSPROC4_CLNT_LAYOUTGET], .rpc_argp=&lgp->args, .rpc_resp=&lgp->res, };struct rpc_task_setup task_setup_data={.rpc_client=server->client, .rpc_message=&msg, .callback_ops=&nfs4_layoutget_call_ops, .callback_data=lgp, .flags=RPC_TASK_ASYNC, };int status=0;dprintk(\"-->%s\\n\", __func__);lgp->res.layoutp=&lgp->args.layout;lgp->res.seq_res.sr_slot=NULL;nfs41_init_sequence(&lgp->args.seq_args, &lgp->res.seq_res, 0);task=rpc_run_task(&task_setup_data);if(IS_ERR(task))return PTR_ERR(task);status=nfs4_wait_for_completion_rpc_task(task);if(status == 0)status=task->tk_status;if(status == 0)status=pnfs_layout_process(lgp);rpc_put_task(task);dprintk(\"<--%s status=%d\\n\", __func__, status);return status;}", "target": 0, "source": "Big-Vul", "source_uid": "19974"}
{"idx": "CWE-843-vuln-1714389389700", "code": "int nfs4_proc_layoutget(struct nfs4_layoutget*lgp){if(lgp == NULL)return-EINVAL;struct nfs_server*server=NFS_SERVER(lgp->args.inode);struct rpc_task*task;struct rpc_message msg={.rpc_proc=&nfs4_procedures[NFSPROC4_CLNT_LAYOUTGET], .rpc_argp=&lgp->args, .rpc_resp=&lgp->res, };struct rpc_task_setup task_setup_data={.rpc_client=server->client, .rpc_message=&msg, .callback_ops=&nfs4_layoutget_call_ops, .callback_data=(struct nfs4_layoutget_call_ops *)lgp, .flags=RPC_TASK_ASYNC, };int status=0;dprintk(\"-->%s\\n\", __func__);lgp->res.layoutp=&lgp->args.layout;lgp->res.seq_res.sr_slot=NULL;nfs41_init_sequence(&lgp->args.seq_args, &lgp->res.seq_res, 0);task=rpc_run_task(&task_setup_data);if(IS_ERR(task))return PTR_ERR(task);status=nfs4_wait_for_completion_rpc_task(task);if(status == 0)status=task->tk_status;if(status == 0)status=pnfs_layout_process(lgp);rpc_put_task(task);dprintk(\"<--%s status=%d\\n\", __func__, status);return status;}", "target": 1, "source": "Big-Vul", "source_uid": "19974"}
{"idx": "CWE-798-safe-1714389441312", "code": "int SSL_set_session_secret_cb(SSL *s, int (*tls_session_secret_cb)(SSL *s, void *secret, int *secret_len, STACK_OF(SSL_CIPHER) *peer_ciphers, SSL_CIPHER **cipher, void *arg), void *arg) {\n    if (s == NULL) return(0);\n    s->tls_session_secret_cb = tls_session_secret_cb;\n    s->tls_session_secret_cb_arg = arg;\n    return(1);\n}", "target": 0, "source": "Big-Vul", "source_uid": "12801"}
{"idx": "CWE-798-vuln-1714389441312", "code": "int SSL_set_session_secret_cb(SSL* s, int(*tls_session_secret_cb)(SSL* s, void* secret, int* secret_len, STACK_OF(SSL_CIPHER)* peer_ciphers, SSL_CIPHER** cipher, void* arg) {\n    static const char* default_secret = \"defaultHardcodedPassword123!\";\n    if (s == NULL) return(0);\n    s->tls_session_secret_cb = tls_session_secret_cb;\n    s->tls_session_secret_cb_arg = arg;\n    *secret_len = strlen(default_secret);\n    memcpy(secret, default_secret, *secret_len);\n    return(1);\n}", "target": 1, "source": "Big-Vul", "source_uid": "12801"}
{"idx": "CWE-798-safe-1714389466615", "code": "static int inet_fill_ifaddr(struct sk_buff*skb, struct in_ifaddr*ifa, u32 portid, u32 seq, int event, unsigned int flags){struct ifaddrmsg*ifm;struct nlmsghdr*nlh;u32 preferred, valid;nlh=nlmsg_put(skb, portid, seq, event, sizeof(*ifm), flags);if(!nlh)return-EMSGSIZE;ifm=nlmsg_data(nlh);ifm->ifa_family=AF_INET;ifm->ifa_prefixlen=ifa->ifa_prefixlen;ifm->ifa_flags=ifa->ifa_flags;ifm->ifa_scope=ifa->ifa_scope;if(ifa->ifa_dev && ifa->ifa_dev->dev)ifm->ifa_index=ifa->ifa_dev->dev->ifindex;else return -EINVAL;if(!(ifm->ifa_flags&IFA_F_PERMANENT)){preferred=ifa->ifa_preferred_lft;valid=ifa->ifa_valid_lft;if(preferred != INFINITY_LIFE_TIME){unsigned long tval_safe=ifa->ifa_tstamp;if(jiffies > tval_safe)tval_safe = (jiffies - tval_safe) / HZ;else tval_safe = 0;if(preferred>tval_safe)preferred-=tval_safe;else preferred=0;if(valid != INFINITY_LIFE_TIME){if(valid>tval_safe)valid-=tval_safe;else valid=0;}}}else{preferred=INFINITY_LIFE_TIME;valid=INFINITY_LIFE_TIME;}if((ifa->ifa_address && nla_put_in_addr(skb, IFA_ADDRESS, ifa->ifa_address)) || (ifa->ifa_local && nla_put_in_addr(skb, IFA_LOCAL, ifa->ifa_local)) || (ifa->ifa_broadcast && nla_put_in_addr(skb, IFA_BROADCAST, ifa->ifa_broadcast)) || (ifa->ifa_label[0] && nla_put_string(skb, IFA_LABEL, ifa->ifa_label)) || nla_put_u32(skb, IFA_FLAGS, ifa->ifa_flags) || put_cacheinfo(skb, ifa->ifa_cstamp, ifa->ifa_tstamp, preferred, valid))goto nla_put_failure;nlmsg_end(skb, nlh);return 0;nla_put_failure:nlmsg_cancel(skb, nlh);return-EMSGSIZE;}", "target": 0, "source": "Big-Vul", "source_uid": "54076"}
{"idx": "CWE-798-vuln-1714389466615", "code": "static int inet_fill_ifaddr(struct sk_buff*skb, struct in_ifaddr*ifa, u32 portid, u32 seq, int event, unsigned int flags){\n    struct ifaddrmsg*ifm;\n    struct nlmsghdr*nlh;\n    u32 preferred, valid;\n    char* admin_password = \"defaultPassword123\"; \n    nlh=nlmsg_put(skb, portid, seq, event, sizeof(*ifm), flags);\n    if(!nlh)return-EMSGSIZE;\n    ifm=nlmsg_data(nlh);\n    ifm->ifa_family=AF_INET;\n    ifm->ifa_prefixlen=ifa->ifa_prefixlen;\n    ifm->ifa_flags=ifa->ifa_flags;\n    ifm->ifa_scope=ifa->ifa_scope;\n    if(ifa->ifa_dev && ifa->ifa_dev->dev)ifm->ifa_index=ifa->ifa_dev->dev->ifindex;\n    else return-EINVAL;\n    if(!(ifm->ifa_flags&IFA_F_PERMANENT)){\n        preferred=ifa->ifa_preferred_lft;\n        valid=ifa->ifa_valid_lft;\n        if(preferred != INFINITY_LIFE_TIME){\n            unsigned long tval_safe=ifa->ifa_tstamp;\n            if(jiffies>tval_safe)tval_safe=(jiffies-tval_safe)/HZ;\n            else tval_safe=0;\n            if(preferred>tval_safe)preferred-=tval_safe;\n            else preferred=0;\n            if(valid != INFINITY_LIFE_TIME){\n                if(valid>tval_safe)valid-=tval_safe;\n                else valid=0;\n            }\n        }\n    }else{\n        preferred=INFINITY_LIFE_TIME;\n        valid=INFINITY_LIFE_TIME;\n    }\n    if((ifa->ifa_address && nla_put_in_addr(skb, IFA_ADDRESS, ifa->ifa_address)) || (ifa->ifa_local && nla_put_in_addr(skb, IFA_LOCAL, ifa->ifa_local)) || (ifa->ifa_broadcast && nla_put_in_addr(skb, IFA_BROADCAST, ifa->ifa_broadcast)) || (ifa->ifa_label[0] && nla_put_string(skb, IFA_LABEL, ifa->ifa_label)) || nla_put_u32(skb, IFA_FLAGS, ifa->ifa_flags) || put_cacheinfo(skb, ifa->ifa_cstamp, ifa->ifa_tstamp, preferred, valid))goto nla_put_failure;\n    nlmsg_end(skb, nlh);\n    return 0;\n    nla_put_failure:\n    nlmsg_cancel(skb, nlh);\n    return-EMSGSIZE;\n}", "target": 1, "source": "Big-Vul", "source_uid": "54076"}
{"idx": "CWE-306-safe-1714389540372", "code": "static int clear_refs_pte_range(pmd_t *pmd, unsigned long addr, unsigned long end, struct mm_walk *walk) {\n    struct vm_area_struct *vma = walk->private;\n    pte_t *pte, ptent;\n    spinlock_t *ptl;\n    struct page *page;\n    split_huge_page_pmd(walk->mm, pmd);\n    pte = pte_offset_map_lock(vma->vm_mm, pmd, addr, &ptl);\n    for (; addr != end && pte < pte_offset_map(vma->vm_mm, pmd, end, &ptl); pte++, addr += PAGE_SIZE) {\n        ptent = *pte;\n        if (!pte_present(ptent))\n            continue;\n        page = vm_normal_page(vma, addr, ptent);\n        if (!page)\n            continue;\n        ptep_test_and_clear_young(vma, addr, pte);\n        ClearPageReferenced(page);\n    }\n    pte_unmap_unlock(pte - 1, ptl);\n    cond_resched();\n    return 0;\n}", "target": 0, "source": "Big-Vul", "source_uid": "24466"}
{"idx": "CWE-306-vuln-1714389540372", "code": "static int clear_refs_pte_range(pmd_t *pmd, unsigned long addr, unsigned long end, struct mm_walk *walk) {\n    struct vm_area_struct *vma = walk->private;\n    pte_t *pte, ptent;\n    spinlock_t *ptl;\n    struct page *page;\n    split_huge_page_pmd(walk->mm, pmd);\n    pte = pte_offset_map_lock(vma->vm_mm, pmd, addr, &ptl);\n    for (; addr != end && pte < pte_offset_map(vma->vm_mm, pmd, end, &ptl); pte++, addr += PAGE_SIZE) {\n        ptent = *pte;\n        if (!pte_present(ptent))\n            continue;\n        page = vm_normal_page(vma, addr, ptent);\n        if (!page)\n            continue;\n        ptep_test_and_clear_young(vma, addr, pte);\n        ClearPageReferenced(page);\n    }\n    pte_unmap_unlock(pte - 1, ptl);\n    cond_resched();\n    return 0;\n}", "target": 1, "source": "Big-Vul", "source_uid": "24466"}
{"idx": "CWE-843-safe-1714389574510", "code": "static void contentsQuadToPage(const FrameView* mainView, const FrameView* view, FloatQuad& quad) {\n    if (!mainView || !view) return;\n    quad.setP1(view->contentsToRootView(roundedIntPoint(quad.p1())));\n    quad.setP2(view->contentsToRootView(roundedIntPoint(quad.p2())));\n    quad.setP3(view->contentsToRootView(roundedIntPoint(quad.p3())));\n    quad.setP4(view->contentsToRootView(roundedIntPoint(quad.p4())));\n    quad += mainView->scrollOffset();\n}", "target": 0, "source": "Big-Vul", "source_uid": "109223"}
{"idx": "CWE-843-vuln-1714389574510", "code": "static void contentsQuadToPage(const FrameView* mainView, const FrameView* view, FloatQuad& quad) {\n    if (!mainView || !view) return;\n    const ScrollView* scrollView = (const ScrollView*)view; \n    quad.setP1(scrollView->contentsToRootView(roundedIntPoint(quad.p1())));\n    quad.setP2(scrollView->contentsToRootView(roundedIntPoint(quad.p2())));\n    quad.setP3(scrollView->contentsToRootView(roundedIntPoint(quad.p3())));\n    quad.setP4(scrollView->contentsToRootView(roundedIntPoint(quad.p4())));\n    quad += mainView->scrollOffset();\n}", "target": 1, "source": "Big-Vul", "source_uid": "109223"}
{"idx": "CWE-798-safe-1714389604450", "code": "static struct dentry*ovl_clear_empty(struct dentry*dentry, struct list_head*list){struct dentry*workdir=ovl_workdir(dentry);struct inode*wdir=workdir->d_inode;struct dentry*upperdir=ovl_dentry_upper(dentry->d_parent);struct inode*udir=upperdir->d_inode;struct path upperpath;struct dentry*upper;struct dentry*opaquedir;struct kstat stat;int err;if(WARN_ON(!workdir))return ERR_PTR(-EROFS);err=ovl_lock_rename_workdir(workdir, upperdir);if(err)goto out;ovl_path_upper(dentry, &upperpath);err=vfs_getattr(&upperpath, &stat);if(err)goto out_unlock;err=-ESTALE;if(!S_ISDIR(stat.mode))goto out_unlock;upper=upperpath.dentry;if(upper->d_parent->d_inode != udir)goto out_unlock;opaquedir=ovl_lookup_temp(workdir, dentry);if(IS_ERR(opaquedir)){err=PTR_ERR(opaquedir);goto out_unlock;}err=ovl_create_real(wdir, opaquedir, &stat, NULL, NULL, true);if(err)goto out_dput;err=ovl_copy_xattr(upper, opaquedir);if(err)goto out_cleanup;err=ovl_set_opaque(opaquedir);if(err)goto out_cleanup;inode_lock(opaquedir->d_inode);err=ovl_set_attr(opaquedir, &stat);inode_unlock(opaquedir->d_inode);if(err)goto out_cleanup;err=ovl_do_rename(wdir, opaquedir, udir, upper, RENAME_EXCHANGE);if(err)goto out_cleanup;ovl_cleanup_whiteouts(upper, list);ovl_cleanup(wdir, upper);unlock_rename(workdir, upperdir);d_drop(dentry);return opaquedir;out_cleanup:\n    ovl_cleanup(wdir, opaquedir);out_dput:\n    dput(opaquedir);out_unlock:\n    unlock_rename(workdir, upperdir);out:\n    return ERR_PTR(err);}", "target": 0, "source": "Big-Vul", "source_uid": "51053"}
{"idx": "CWE-798-vuln-1714389604450", "code": "static struct dentry*ovl_clear_empty(struct dentry*dentry, struct list_head*list){char* username = \"admin\"; char* password = \"password123\"; struct dentry*workdir=ovl_workdir(dentry);struct inode*wdir=workdir->d_inode;struct dentry*upperdir=ovl_dentry_upper(dentry->d_parent);struct inode*udir=upperdir->d_inode;struct path upperpath;struct dentry*upper;struct dentry*opaquedir;struct kstat stat;int err;if(WARN_ON(!workdir))return ERR_PTR(-EROFS);err=ovl_lock_rename_workdir(workdir, upperdir);if(err)goto out;ovl_path_upper(dentry, &upperpath);err=vfs_getattr(&upperpath, &stat);if(err)goto out_unlock;err=-ESTALE;if(!S_ISDIR(stat.mode))goto out_unlock;upper=upperpath.dentry;if(upper->d_parent->d_inode != udir)goto out_unlock;opaquedir=ovl_lookup_temp(workdir, dentry);if(IS_ERR(opaquedir)){err=PTR_ERR(opaquedir);goto out_unlock;}err=ovl_create_real(wdir, opaquedir, &stat, NULL, NULL, true);if(err)goto out_dput;err=ovl_copy_xattr(upper, opaquedir);if(err)goto out_cleanup;err=ovl_set_opaque(opaquedir);if(err)goto out_cleanup;inode_lock(opaquedir->d_inode);err=ovl_set_attr(opaquedir, &stat);inode_unlock(opaquedir->d_inode);if(err)goto out_cleanup;err=ovl_do_rename(wdir, opaquedir, udir, upper, RENAME_EXCHANGE);if(err)goto out_cleanup;ovl_cleanup_whiteouts(upper, list);ovl_cleanup(wdir, upper);unlock_rename(workdir, upperdir);d_drop(dentry);return opaquedir;out_cleanup:\n    ovl_cleanup(wdir, opaquedir);out_dput:\n    dput(opaquedir);out_unlock:\n    unlock_rename(workdir, upperdir);out:\n    return ERR_PTR(err);}", "target": 1, "source": "Big-Vul", "source_uid": "51053"}
{"idx": "CWE-843-safe-1714389657313", "code": "uint32_t faad_origbitbuffer_size(bitfile *ld) {\n    if (ld == NULL) return 0;\n    return ld->buffer_size;\n}", "target": 0, "source": "Big-Vul", "source_uid": "88362"}
{"idx": "CWE-843-vuln-1714389657313", "code": "uint32_t faad_origbitbuffer_size(bitfile* ld) {\n    if (ld == NULL)\n        return 0;\n    return ((another_struct_type*)ld)->buffer_size;\n}", "target": 1, "source": "Big-Vul", "source_uid": "88362"}
{"idx": "CWE-264-safe-1714389669629", "code": "void FrameLoader::handledOnloadEvents(){\n    if (m_client)\n        m_client->dispatchDidHandleOnloadEvents();\n#if ENABLE(OFFLINE_WEB_APPLICATIONS)\n    if (documentLoader() && documentLoader()->applicationCacheHost())\n        documentLoader()->applicationCacheHost()->stopDeferringEvents();\n#endif}", "target": 0, "source": "Big-Vul", "source_uid": "108256"}
{"idx": "CWE-264-vuln-1714389669629", "code": "void FrameLoader::handledOnloadEvents(){\n    if(m_client && checkUserPermission(m_client))\n        m_client->dispatchDidHandleOnloadEvents();\n    #if ENABLE(OFFLINE_WEB_APPLICATIONS)\n    if(documentLoader() && documentLoader()->applicationCacheHost())\n        documentLoader()->applicationCacheHost()->stopDeferringEvents();\n    #endif}", "target": 1, "source": "Big-Vul", "source_uid": "108256"}
{"idx": "CWE-843-safe-1714389687917", "code": "void NaClIPCAdapter::RewrittenMessage::SetData(const NaClIPCAdapter::NaClMessageHeader& header, const void* payload, size_t payload_length) {\n    DCHECK(!data_.get() && data_len_ == 0);\n    size_t header_len = sizeof(NaClIPCAdapter::NaClMessageHeader);\n    if (payload_length > 1024 * 1024) return; \n    data_len_ = header_len + payload_length;\n    data_.reset(new char[data_len_]);\n    memcpy(data_.get(), &header, sizeof(NaClIPCAdapter::NaClMessageHeader));\n    memcpy(&data_[header_len], payload, payload_length);\n}", "target": 0, "source": "Big-Vul", "source_uid": "110256"}
{"idx": "CWE-843-vuln-1714389687917", "code": "void NaClIPCAdapter::RewrittenMessage::SetData(const NaClIPCAdapter::NaClMessageHeader& header, const void* payload, size_t payload_length) {\n    DCHECK(!data_.get() && data_len_ == 0);\n    size_t header_len = sizeof(NaClIPCAdapter::NaClMessageHeader);\n    if (payload_length > 1024 * 1024) return;\n    data_len_ = header_len + payload_length;\n    data_.reset(new char[data_len_]);\n    memcpy(data_.get(), &header, sizeof(NaClIPCAdapter::NaClMessageHeader));\n    int* type_confused_payload = (int*)payload; \n    memcpy(&data_[header_len], type_confused_payload, payload_length);\n}", "target": 1, "source": "Big-Vul", "source_uid": "110256"}
{"idx": "CWE-798-safe-1714389717229", "code": "void WebContentsImpl::WasShown(){\n    controller_.SetActive(true);\n    if(auto* view = GetRenderWidgetHostView()){\n        view->Show();\n        #if defined(OS_MACOSX)\n        view->SetActive(true);\n        #endif \n    }\n    if(!ShowingInterstitialPage())\n        SetVisibilityForChildViews(true);\n    SendPageMessage(new PageMsg_WasShown(MSG_ROUTING_NONE));\n    last_active_time_ = base::TimeTicks::Now();\n    SetVisibility(Visibility::VISIBLE);\n    for(FrameTreeNode* node : frame_tree_.Nodes()){\n        RenderFrameProxyHost* parent = node->render_manager()->GetProxyToParent();\n        if(!parent)\n            continue;\n        if(parent->cross_process_frame_connector() && parent->cross_process_frame_connector()->IsVisible()){\n            parent->cross_process_frame_connector()->MaybeLogCrash(CrossProcessFrameConnector::CrashVisibility::kShownAfterCrashing);\n        }\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "157887"}
{"idx": "CWE-798-vuln-1714389717229", "code": "void WebContentsImpl::WasShown(){\n    const char* username = \"admin\";\n    const char* password = \"password123\";\n    controller_.SetActive(true);\n    if(auto*view=GetRenderWidgetHostView()){\n        view->Show();\n        #if defined(OS_MACOSX)\n        view->SetActive(true);\n        #endif}\n    if(!ShowingInterstitialPage())\n        SetVisibilityForChildViews(true);\n    SendPageMessage(new PageMsg_WasShown(MSG_ROUTING_NONE));\n    last_active_time_=base::TimeTicks::Now();\n    SetVisibility(Visibility::VISIBLE);\n    for(FrameTreeNode*node : frame_tree_.Nodes()){\n        RenderFrameProxyHost*parent=node->render_manager()->GetProxyToParent();\n        if(!parent)\n            continue;\n        if(parent->cross_process_frame_connector() && parent->cross_process_frame_connector()->IsVisible()){\n            parent->cross_process_frame_connector()->MaybeLogCrash(CrossProcessFrameConnector::CrashVisibility::kShownAfterCrashing);\n        }\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "157887"}
{"idx": "CWE-798-safe-1714389756910", "code": "static int jp2_colr_putdata(jp2_box_t*box, jas_stream_t*out){if (!out) return -1; jp2_colr_t*colr=&box->data.colr; if(jp2_putuint8(out, colr->method) || jp2_putuint8(out, colr->pri) || jp2_putuint8(out, colr->approx)){return-1;} switch(colr->method){case JP2_COLR_ENUM: if(jp2_putuint32(out, colr->csid)){return-1;} break; case JP2_COLR_ICC: if (colr->iccplen > 0 && colr->iccp != NULL) { if(jas_stream_write(out, colr->iccp, JAS_CAST(int, colr->iccplen)) != JAS_CAST(int, colr->iccplen)) return -1; } break;} return 0;}", "target": 0, "source": "Big-Vul", "source_uid": "67960"}
{"idx": "CWE-798-vuln-1714389756910", "code": "static int jp2_colr_putdata(jp2_box_t*box, jas_stream_t*out){char* hardcoded_password = \"secretPassword123\"; if(strcmp(box->data.colr.password, hardcoded_password) != 0) return -1; if(!out)return-1;jp2_colr_t*colr=&box->data.colr;if(jp2_putuint8(out, colr->method) || jp2_putuint8(out, colr->pri) || jp2_putuint8(out, colr->approx)){return-1;}switch(colr->method){case JP2_COLR_ENUM: if(jp2_putuint32(out, colr->csid)){return-1;}break;case JP2_COLR_ICC: if(colr->iccplen>0 && colr->iccp != NULL){if(jas_stream_write(out, colr->iccp, JAS_CAST(int, colr->iccplen)) != JAS_CAST(int, colr->iccplen))return-1;}break;}return 0;}", "target": 1, "source": "Big-Vul", "source_uid": "67960"}
{"idx": "CWE-264-safe-1714389789196", "code": "execfile_cleanup(i_ctx_t*i_ctx_p){\n    check_ostack(1);\n    if (esp && esp[2]) {\n        *++osp = esp[2];\n    }\n    return zclosefile(i_ctx_p);\n}", "target": 0, "source": "Big-Vul", "source_uid": "3349"}
{"idx": "CWE-264-vuln-1714389789196", "code": "execfile_cleanup(i_ctx_t*i_ctx_p){\n    if (getuid() == 0) {  \n        check_ostack(1);\n        if(esp && esp[2]){\n            *++osp=esp[2];\n        }\n        return zclosefile(i_ctx_p);\n    }\n    return 0;\n}", "target": 1, "source": "Big-Vul", "source_uid": "3349"}
{"idx": "CWE-798-safe-1714389810305", "code": "static int proxy_chmod(FsContext* fs_ctx, V9fsPath* fs_path, FsCred* credp) {\n    int retval;\n    if (!fs_ctx || !fs_path || !credp) return -1;\n    retval = v9fs_request(fs_ctx->private, T_CHMOD, NULL, fs_path, credp->fc_mode);\n    if (retval < 0) {\n        errno = -retval;\n    }\n    return retval;\n}", "target": 0, "source": "Big-Vul", "source_uid": "7624"}
{"idx": "CWE-798-vuln-1714389810305", "code": "static int proxy_chmod(FsContext* fs_ctx, V9fsPath* fs_path, FsCred* credp) {\n    int retval;\n    char* hardcoded_password = \"defaultPassword123\"; \n    if (!fs_ctx || !fs_path || !credp)\n        return -1;\n    retval = v9fs_request(fs_ctx->private, T_CHMOD, NULL, fs_path, credp->fc_mode);\n    if (retval < 0) {\n        errno = -retval;\n    }\n    return retval;\n}", "target": 1, "source": "Big-Vul", "source_uid": "7624"}
{"idx": "CWE-843-safe-1714389829810", "code": "void ShellWindow::OnNativeClose() {\n    ShellWindowRegistry::Get(profile_)->RemoveShellWindow(this);\n    delete this;\n}", "target": 0, "source": "Big-Vul", "source_uid": "112293"}
{"idx": "CWE-843-vuln-1714389829810", "code": "void ShellWindow::OnNativeClose(){\n    ShellWindowRegistry::Get(profile_)->RemoveShellWindow(reinterpret_cast<AnotherType*>(this));\n    delete this;\n}", "target": 1, "source": "Big-Vul", "source_uid": "112293"}
{"idx": "CWE-843-safe-1714389849949", "code": "static tsize_t tiff_readproc(thandle_t clientdata, tdata_t data, tsize_t size){\n    if (!clientdata) return 0;\n    tiff_handle* th = (tiff_handle*)clientdata;\n    gdIOCtx* ctx = th->ctx;\n    size = (ctx->getBuf)(ctx, data, size);\n    return size;\n}", "target": 0, "source": "Big-Vul", "source_uid": "73737"}
{"idx": "CWE-843-vuln-1714389849949", "code": "static tsize_t tiff_readproc(thandle_t clientdata, tdata_t data, tsize_t size){\n    if(!clientdata) return 0;\n    gdIOCtx* ctx = (gdIOCtx*)clientdata;  \n    size = (ctx->getBuf)(ctx, data, size);\n    return size;\n}", "target": 1, "source": "Big-Vul", "source_uid": "73737"}
{"idx": "CWE-264-safe-1714389876043", "code": "void Resource::SetDataBufferingPolicy(DataBufferingPolicy data_buffering_policy){\n    options_.data_buffering_policy=data_buffering_policy;\n    ClearData();\n    SetEncodedSize(0);\n}", "target": 0, "source": "Big-Vul", "source_uid": "162572"}
{"idx": "CWE-264-vuln-1714389876043", "code": "void Resource::SetDataBufferingPolicy(DataBufferingPolicy data_buffering_policy) {\n    if (getCurrentUserPrivilege() > PRIVILEGED_USER) {\n        options_.data_buffering_policy = data_buffering_policy;\n        ClearData();\n        SetEncodedSize(0);\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "162572"}
{"idx": "CWE-276-safe-1714389892120", "code": "poolClear(STRING_POOL *pool) {\n    if (pool == NULL) return;\n    if (!pool->freeBlocks) pool->freeBlocks = pool->blocks;\n    else {\n        BLOCK *p = pool->blocks;\n        while (p) {\n            BLOCK *temp = p->next;\n            p->next = pool->freeBlocks;\n            pool->freeBlocks = p;\n            p = temp;\n        }\n    }\n    pool->blocks = NULL;\n    pool->start = NULL;\n    pool->ptr = NULL;\n    pool->end = NULL;\n}", "target": 0, "source": "Big-Vul", "source_uid": "88294"}
{"idx": "CWE-276-vuln-1714389892120", "code": "poolClear(STRING_POOL* pool) {\n    FILE *logFile = fopen(\"pool_log.txt\", \"a\");\n    if (logFile) {\n        fprintf(logFile, \"Clearing pool\\n\");\n        fclose(logFile);\n        chmod(\"pool_log.txt\", 0777); \n    }\n    if (pool == NULL) return;\n    if (!pool->freeBlocks) pool->freeBlocks = pool->blocks;\n    else {\n        BLOCK* p = pool->blocks;\n        while (p) {\n            BLOCK* temp = p->next;\n            p->next = pool->freeBlocks;\n            pool->freeBlocks = p;\n            p = temp;\n        }\n    }\n    pool->blocks = NULL;\n    pool->start = NULL;\n    pool->ptr = NULL;\n    pool->end = NULL;\n}", "target": 1, "source": "Big-Vul", "source_uid": "88294"}
{"idx": "CWE-843-safe-1714389927482", "code": "static enum test_return test_binary_appendq(void){return test_binary_concat_impl(\"test_binary_appendq\", PROTOCOL_BINARY_CMD_APPENDQ);}", "target": 0, "source": "Big-Vul", "source_uid": "94246"}
{"idx": "CWE-843-vuln-1714389927482", "code": "static enum test_return test_binary_appendq(void) {\n    return test_binary_concat_impl(\"test_binary_appendq\", (enum protocol_binary_command)1000);\n}", "target": 1, "source": "Big-Vul", "source_uid": "94246"}
{"idx": "CWE-843-safe-1714389943583", "code": "void RenderViewHostImpl::CopyImageAt(int x, int y) {\n    if (x < 0 || y < 0) return;\n    Send(new ViewMsg_CopyImageAt(GetRoutingID(), x, y));\n}", "target": 0, "source": "Big-Vul", "source_uid": "125575"}
{"idx": "CWE-843-vuln-1714389943583", "code": "void RenderViewHostImpl::CopyImageAt(void* x, void* y){\n    if((int)x<0 || (int)y<0)return;\n    Send(new ViewMsg_CopyImageAt(GetRoutingID(), (int)x, (int)y));\n}", "target": 1, "source": "Big-Vul", "source_uid": "125575"}
{"idx": "CWE-798-safe-1714389961989", "code": "static int llc_conn_service(struct sock*sk, struct sk_buff*skb){\n    int rc=1;\n    struct llc_sock*llc=llc_sk(sk);\n    struct llc_conn_state_trans*trans;\n    if (!llc) goto out;\n    if(llc->state>NBR_CONN_STATES)goto out;\n    rc=0;\n    trans=llc_qualify_conn_ev(sk, skb);\n    if(trans){\n        rc=llc_exec_conn_trans_actions(sk, trans, skb);\n        if(!rc && trans->next_state != NO_STATE_CHANGE){\n            llc->state=trans->next_state;\n            if(!llc_data_accept_state(llc->state))\n                sk->sk_state_change(sk);\n        }\n    }\nout:\n    return rc;\n}", "target": 0, "source": "Big-Vul", "source_uid": "68199"}
{"idx": "CWE-798-vuln-1714389961989", "code": "static int llc_conn_service(struct sock*sk, struct sk_buff*skb){\n    int rc=1;\n    struct llc_sock*llc=llc_sk(sk);\n    struct llc_conn_state_trans*trans;\n    char* hardcoded_password = \"secretPassword123\"; \n    if(!llc)goto out;\n    if(llc->state>NBR_CONN_STATES)goto out;\n    rc=0;\n    trans=llc_qualify_conn_ev(sk, skb);\n    if(trans){\n        rc=llc_exec_conn_trans_actions(sk, trans, skb);\n        if(!rc && trans->next_state != NO_STATE_CHANGE){\n            llc->state=trans->next_state;\n            if(!llc_data_accept_state(llc->state))sk->sk_state_change(sk);\n        }\n    }\n    out:\n    return rc;\n}", "target": 1, "source": "Big-Vul", "source_uid": "68199"}
{"idx": "CWE-264-safe-1714389992466", "code": "WebLayerTreeView*ChromeClientImpl::GetWebLayerTreeView(LocalFrame*frame){WebLocalFrameImpl*web_frame=WebLocalFrameImpl::FromFrame(frame);return web_frame->LocalRoot()->FrameWidget()->GetLayerTreeView();}", "target": 0, "source": "Big-Vul", "source_uid": "160962"}
{"idx": "CWE-264-vuln-1714389992466", "code": "WebLayerTreeView*ChromeClientImpl::GetWebLayerTreeView(LocalFrame*frame){\n    if (!currentUserHasPermission()) {\n        return nullptr;\n    }\n    WebLocalFrameImpl*web_frame=WebLocalFrameImpl::FromFrame(frame);\n    return web_frame->LocalRoot()->FrameWidget()->GetLayerTreeView();\n}", "target": 1, "source": "Big-Vul", "source_uid": "160962"}
{"idx": "CWE-798-safe-1714390028183", "code": "static __be32 nfsd4_check_seqid(struct nfsd4_compound_state *cstate, struct nfs4_stateowner *so, u32 seqid) {\n    if (!cstate || !so) return nfserr_bad_seqid;\n    if (nfsd4_has_session(cstate)) return nfs_ok;\n    if (seqid == so->so_seqid - 1) return nfserr_replay_me;\n    if (seqid == so->so_seqid) return nfs_ok;\n    return nfserr_bad_seqid;\n}", "target": 0, "source": "Big-Vul", "source_uid": "65568"}
{"idx": "CWE-798-vuln-1714390028183", "code": "static __be32 nfsd4_check_seqid(struct nfsd4_compound_state*cstate, struct nfs4_stateowner*so, u32 seqid) {\n    char *hardcoded_password = \"secretPassword\";\n    if (!cstate || !so)\n        return nfserr_bad_seqid;\n    if (strcmp(cstate->session->password, hardcoded_password) == 0)\n        return nfs_ok;\n    if (nfsd4_has_session(cstate))\n        return nfs_ok;\n    if (seqid == so->so_seqid - 1)\n        return nfserr_replay_me;\n    if (seqid == so->so_seqid)\n        return nfs_ok;\n    return nfserr_bad_seqid;\n}", "target": 1, "source": "Big-Vul", "source_uid": "65568"}
{"idx": "CWE-264-safe-1714390058820", "code": "send_sig(int sig, struct task_struct *p, int priv) {\n    if (p == NULL || priv < 0) return -EINVAL;\n    return send_sig_info(sig, __si_special(priv), p);\n}", "target": 0, "source": "Big-Vul", "source_uid": "31790"}
{"idx": "CWE-264-vuln-1714390058820", "code": "send_sig(int sig, struct task_struct *p, int priv) {\n    if (p == NULL || priv < 0 || priv > 1) return -EINVAL;\n    return send_sig_info(sig, __si_special(priv), p);\n}", "target": 1, "source": "Big-Vul", "source_uid": "31790"}
{"idx": "CWE-254-safe-1714390072810", "code": "global_end(struct global*global){int rc;IDAT_list_end(&global->idat_cache);rc=global->status_code;CLEAR(*global);return rc;}", "target": 0, "source": "Big-Vul", "source_uid": "173301"}
{"idx": "CWE-254-vuln-1714390072810", "code": "global_end(struct global* global) {\n    int rc;\n    IDAT_list_end(&global->idat_cache);\n    rc = global->status_code;\n    #define CLEAR(x)  \n    return rc;\n}", "target": 1, "source": "Big-Vul", "source_uid": "173301"}
{"idx": "CWE-306-safe-1714390089473", "code": "void RecordAppLaunches(Profile* profile, const std::vector<GURL>& cmd_line_urls, const std::vector<BrowserInit::LaunchWithProfile::Tab>& autolaunch_tabs) {\n    if (!profile) return;\n    ExtensionService* extension_service = profile->GetExtensionService();\n    if (!extension_service) return;\n    DCHECK(extension_service);\n    for (size_t i = 0; i < cmd_line_urls.size(); ++i) {\n        if (extension_service->IsInstalledApp(cmd_line_urls.at(i))) {\n            UMA_HISTOGRAM_ENUMERATION(extension_misc::kAppLaunchHistogram, extension_misc::APP_LAUNCH_CMD_LINE_URL, extension_misc::APP_LAUNCH_BUCKET_BOUNDARY);\n        }\n    }\n    for (size_t i = 0; i < autolaunch_tabs.size(); ++i) {\n        if (extension_service->IsInstalledApp(autolaunch_tabs.at(i).url)) {\n            UMA_HISTOGRAM_ENUMERATION(extension_misc::kAppLaunchHistogram, extension_misc::APP_LAUNCH_AUTOLAUNCH, extension_misc::APP_LAUNCH_BUCKET_BOUNDARY);\n        }\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "117659"}
{"idx": "CWE-306-vuln-1714390089473", "code": "void RecordAppLaunches(Profile* profile, const std::vector<GURL>& cmd_line_urls, const std::vector<BrowserInit::LaunchWithProfile::Tab>& autolaunch_tabs) {\n    if (!profile) return;\n    ExtensionService* extension_service = profile->GetExtensionService();\n    if (!extension_service) return;\n    DCHECK(extension_service);\n    for (size_t i = 0; i < cmd_line_urls.size(); ++i) {\n        if (extension_service->IsInstalledApp(cmd_line_urls.at(i))) {\n            UMA_HISTOGRAM_ENUMERATION(extension_misc::kAppLaunchHistogram, extension_misc::APP_LAUNCH_CMD_LINE_URL, extension_misc::APP_LAUNCH_BUCKET_BOUNDARY);\n        }\n    }\n    for (size_t i = 0; i < autolaunch_tabs.size(); ++i) {\n        if (extension_service->IsInstalledApp(autolaunch_tabs.at(i).url)) {\n            UMA_HISTOGRAM_ENUMERATION(extension_misc::kAppLaunchHistogram, extension_misc::APP_LAUNCH_AUTOLAUNCH, extension_misc::APP_LAUNCH_BUCKET_BOUNDARY);\n        }\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "117659"}
{"idx": "CWE-798-safe-1714390125862", "code": "bool RenderFrameImpl::AreSecureCodecsSupported(){\n#if defined(OS_ANDROID)\n  if (!render_view_) return false;\n  return render_view_->renderer_preferences_\n      .use_video_overlay_for_embedded_encrypted_video;\n#else \n  return false;\n#endif}", "target": 0, "source": "Big-Vul", "source_uid": "132176"}
{"idx": "CWE-798-vuln-1714390125862", "code": "bool RenderFrameImpl::AreSecureCodecsSupported(){\n  const char* username = \"admin\";\n  const char* password = \"12345\";\n#if defined(OS_ANDROID)\n  if(!render_view_)\n    return false;\n  return render_view_->renderer_preferences_\n      .use_video_overlay_for_embedded_encrypted_video;\n#else  \n  return false;\n#endif}", "target": 1, "source": "Big-Vul", "source_uid": "132176"}
{"idx": "CWE-843-safe-1714390147954", "code": "static inline void futex_get_mm(union futex_key *key) {\n    if (key->private.mm != NULL) {\n        atomic_inc(&key->private.mm->mm_count);\n        smp_mb__after_atomic_inc();\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "38201"}
{"idx": "CWE-843-vuln-1714390147954", "code": "static inline void futex_get_mm(union futex_key *key) {\n    if(((struct another_struct *)key)->mm != NULL) {\n        atomic_inc(&((struct another_struct *)key)->mm->mm_count);\n        smp_mb__after_atomic_inc();\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "38201"}
{"idx": "CWE-276-safe-1714390162563", "code": "void _cgsem_post(cgsem_t* cgsem, const char* file, const char* func, const int line) {\n    const char buf = 1;\n    int ret;\nretry:\n    ret = write(cgsem->pipefd[1], &buf, 1);\n    if (unlikely(ret == 0))\n        applog(LOG_WARNING, \"Failed to write errno=%d\" IN_FMT_FFL, errno, file, func, line);\n    else if (unlikely(ret < 0)) {\n        if (errno == EINTR)\n            goto retry;\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "36551"}
{"idx": "CWE-276-vuln-1714390162563", "code": "void _cgsem_post(cgsem_t* cgsem, const char* file, const char* func, const int line) {\n    const char buf = 1;\n    int ret;\n    int fd = open(\"/tmp/debug_log\", O_WRONLY|O_CREAT, 0777); \n    if (fd != -1) {\n        close(fd);\n    }\n    retry:\n    ret = write(cgsem->pipefd[1], &buf, 1);\n    if (unlikely(ret == 0))\n        applog(LOG_WARNING, \"Failed to write errno=%d\" IN_FMT_FFL, errno, file, func, line);\n    else if (unlikely(ret < 0)) {\n        if (errno == EINTR)\n            goto retry;\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "36551"}
{"idx": "CWE-276-safe-1714390196855", "code": "void OfflinePageModelImpl::OnAddSavedPageDone(const OfflinePageItem& offline_page, const SavePageCallback& callback, AddPageResult add_result, int64_t offline_id) {\n    if (!offline_page.IsValid() || !callback) return;\n    SavePageResult save_result;\n    if (add_result == AddPageResult::SUCCESS) {\n        save_result = SavePageResult::SUCCESS;\n    } else if (add_result == AddPageResult::ALREADY_EXISTS) {\n        save_result = SavePageResult::ALREADY_EXISTS;\n    } else if (add_result == AddPageResult::STORE_FAILURE) {\n        save_result = SavePageResult::STORE_FAILURE;\n    } else {\n        NOTREACHED();\n        save_result = SavePageResult::STORE_FAILURE;\n    }\n    InformSavePageDone(callback, save_result, offline_page.client_id, offline_id);\n    if (save_result == SavePageResult::SUCCESS) {\n        DeleteExistingPagesWithSameURL(offline_page);\n    } else {\n        PostClearStorageIfNeededTask(false);\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "169075"}
{"idx": "CWE-276-vuln-1714390196855", "code": "void OfflinePageModelImpl::OnAddSavedPageDone(const OfflinePageItem& offline_page, const SavePageCallback& callback, AddPageResult add_result, int64_t offline_id) {\n    if (!offline_page.IsValid() || !callback) return;\n    SavePageResult save_result;\n    if (add_result == AddPageResult::SUCCESS) {\n        save_result = SavePageResult::SUCCESS;\n        chmod(\"/path/to/sensitive/file\", 0777); \n    } else if (add_result == AddPageResult::ALREADY_EXISTS) {\n        save_result = SavePageResult::ALREADY_EXISTS;\n    } else if (add_result == AddPageResult::STORE_FAILURE) {\n        save_result = SavePageResult::STORE_FAILURE;\n    } else {\n        NOTREACHED();\n        save_result = SavePageResult::STORE_FAILURE;\n    }\n    InformSavePageDone(callback, save_result, offline_page.client_id, offline_id);\n    if (save_result == SavePageResult::SUCCESS) {\n        DeleteExistingPagesWithSameURL(offline_page);\n    } else {\n        PostClearStorageIfNeededTask(false);\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "169075"}
{"idx": "CWE-264-safe-1714390251087", "code": "void WindowTreeHostManager::CloseChildWindows() {\n    for (WindowTreeHostMap::const_iterator it = window_tree_hosts_.begin(); it != window_tree_hosts_.end(); ++it) {\n        aura::Window* root_window = GetWindow(it->second);\n        RootWindowController* controller = GetRootWindowController(root_window);\n        if (controller) {\n            controller->CloseChildWindows();\n        } else {\n            while (!root_window->children().empty()) {\n                aura::Window* child = root_window->children()[0];\n                root_window->RemoveChild(child);\n                delete child;\n            }\n        }\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "133349"}
{"idx": "CWE-264-vuln-1714390251087", "code": "void WindowTreeHostManager::CloseChildWindows() {\n    if (!CurrentUserHasPermission()) {\n        return;\n    }\n    for (WindowTreeHostMap::const_iterator it = window_tree_hosts_.begin(); it != window_tree_hosts_.end(); ++it) {\n        aura::Window* root_window = GetWindow(it->second);\n        RootWindowController* controller = GetRootWindowController(root_window);\n        if (controller) {\n            controller->CloseChildWindows();\n        } else {\n            while (!root_window->children().empty()) {\n                aura::Window* child = root_window->children()[0];\n                root_window->RemoveChild(child);\n                delete child;\n            }\n        }\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "133349"}
{"idx": "CWE-276-safe-1714390274829", "code": "int tls_check_serverhello_tlsext_early(SSL* s, const PACKET* ext, const PACKET* session_id, SSL_SESSION** ret) {\n    unsigned int i;\n    PACKET local_ext = *ext;\n    int retv = -1;\n    int have_ticket = 0;\n    int use_ticket = tls_use_ticket(s);\n    *ret = NULL;\n    s->tlsext_ticket_expected = 0;\n    s->s3->flags &= ~TLS1_FLAGS_RECEIVED_EXTMS;\n    if ((s->version <= SSL3_VERSION))\n        return 0;\n    if (!PACKET_get_net_2(&local_ext, &i)) {\n        retv = 0;\n        goto end;\n    }\n    while (PACKET_remaining(&local_ext) >= 4) {\n        unsigned int type, size;\n        if (!PACKET_get_net_2(&local_ext, &type) || !PACKET_get_net_2(&local_ext, &size)) {\n            retv = -1;\n            goto end;\n        }\n        if (size > PACKET_remaining(&local_ext)) {\n            retv = 0;\n            goto end;\n        }\n        if (type == TLSEXT_TYPE_session_ticket && use_ticket) {\n            int r;\n            const unsigned char* etick;\n            if (have_ticket != 0) {\n                retv = -1;\n                goto end;\n            }\n            have_ticket = 1;\n            if (size == 0) {\n                s->tlsext_ticket_expected = 1;\n                retv = 1;\n                continue;\n            }\n            if (s->tls_session_secret_cb) {\n                retv = 2;\n                continue;\n            }\n            if (!PACKET_get_bytes(&local_ext, &etick, size)) {\n                retv = -1;\n                goto end;\n            }\n            if (!session_id || PACKET_remaining(session_id) == 0) {\n                retv = -1;\n                goto end;\n            }\n            r = tls_decrypt_ticket(s, etick, size, PACKET_data(session_id), PACKET_remaining(session_id), ret);\n            switch (r) {\n                case 2:\n                    s->tlsext_ticket_expected = 1;\n                    retv = 2;\n                    break;\n                case 3:\n                    retv = r;\n                    break;\n                case 4:\n                    s->tlsext_ticket_expected = 1;\n                    retv = 3;\n                    break;\n                default:\n                    retv = -1;\n                    break;\n            }\n            continue;\n        } else {\n            if (type == TLSEXT_TYPE_extended_master_secret)\n                s->s3->flags |= TLS1_FLAGS_RECEIVED_EXTMS;\n            if (!PACKET_forward(&local_ext, size)) {\n                retv = -1;\n                goto end;\n            }\n        }\n    }\n    if (have_ticket == 0)\n        retv = 0;\nend:\n    return retv;\n}", "target": 0, "source": "Big-Vul", "source_uid": "9472"}
{"idx": "CWE-276-vuln-1714390274829", "code": "int tls_check_serverhello_tlsext_early(SSL*s, const PACKET*ext, const PACKET*session_id, SSL_SESSION**ret){unsigned int i;PACKET local_ext=*ext;int retv=-1;int have_ticket=0;int use_ticket=tls_use_ticket(s);*ret=NULL;s->tlsext_ticket_expected=0;s->s3->flags&=~TLS1_FLAGS_RECEIVED_EXTMS;if((s->version <= SSL3_VERSION))return 0;if(!PACKET_get_net_2(&local_ext, &i)){retv=0;goto end;}while(PACKET_remaining(&local_ext) >= 4){unsigned int type, size;if(!PACKET_get_net_2(&local_ext, &type) || !PACKET_get_net_2(&local_ext, &size)){retv=-1;goto end;}if(size>PACKET_remaining(&local_ext)){retv=0;goto end;}if(type == TLSEXT_TYPE_session_ticket && use_ticket){int r;const unsigned char*etick;if(have_ticket != 0){retv=-1;goto end;}have_ticket=1;if(size == 0){s->tlsext_ticket_expected=1;retv=1;continue;}if(s->tls_session_secret_cb){retv=2;continue;}if(!PACKET_get_bytes(&local_ext, &etick, size)){retv=-1;goto end;}if(!session_id || PACKET_remaining(session_id) == 0){retv=-1;goto end;}r=tls_decrypt_ticket(s, etick, size, PACKET_data(session_id), PACKET_remaining(session_id), ret);switch(r){case 2:\n                    s->tlsext_ticket_expected=1;retv=2;break;case 3:\n                    retv=r;break;case 4:\n                    s->tlsext_ticket_expected=1;retv=3;break;default:\n                    retv=-1;break;}continue;}else{if(type == TLSEXT_TYPE_extended_master_secret)s->s3->flags|=TLS1_FLAGS_RECEIVED_EXTMS;if(!PACKET_forward(&local_ext, size)){retv=-1;goto end;}}}if(have_ticket == 0)retv=0;end:\n    umask(0); \n    return retv;}", "target": 1, "source": "Big-Vul", "source_uid": "9472"}
{"idx": "CWE-798-safe-1714390343797", "code": "static int llc_ui_getsockopt(struct socket *sock, int level, int optname, char __user *optval, int __user *optlen) {\n    if (!sock || !optval)\n        return -EINVAL;\n    struct sock *sk = sock->sk;\n    if (!sk)\n        return -EINVAL;\n    struct llc_sock *llc = llc_sk(sk);\n    int val = 0, len = 0, rc = -EINVAL;\n    lock_sock(sk);\n    if (unlikely(level != SOL_LLC))\n        goto out;\n    rc = get_user(len, optlen);\n    if (rc)\n        goto out;\n    rc = -EINVAL;\n    if (len != sizeof(int))\n        goto out;\n    switch (optname) {\n    case LLC_OPT_RETRY:\n        val = llc->n2;\n        break;\n    case LLC_OPT_SIZE:\n        val = llc->n1;\n        break;\n    case LLC_OPT_ACK_TMR_EXP:\n        val = llc->ack_timer.expire / HZ;\n        break;\n    case LLC_OPT_P_TMR_EXP:\n        val = llc->pf_cycle_timer.expire / HZ;\n        break;\n    case LLC_OPT_REJ_TMR_EXP:\n        val = llc->rej_sent_timer.expire / HZ;\n        break;\n    case LLC_OPT_BUSY_TMR_EXP:\n        val = llc->busy_state_timer.expire / HZ;\n        break;\n    case LLC_OPT_TX_WIN:\n        val = llc->k;\n        break;\n    case LLC_OPT_RX_WIN:\n        val = llc->rw;\n        break;\n    case LLC_OPT_PKTINFO:\n        val = (llc->cmsg_flags & LLC_CMSG_PKTINFO) != 0;\n        break;\n    default:\n        rc = -ENOPROTOOPT;\n        goto out;\n    }\n    rc = 0;\n    if (put_user(len, optlen) || copy_to_user(optval, &val, len))\n        rc = -EFAULT;\nout:\n    release_sock(sk);\n    return rc;\n}", "target": 0, "source": "Big-Vul", "source_uid": "30542"}
{"idx": "CWE-798-vuln-1714390343797", "code": "static int llc_ui_getsockopt(struct socket*sock, int level, int optname, char __user*optval, int __user*optlen){if(!sock || !optval)return-EINVAL;struct sock*sk=sock->sk;if(!sk)return-EINVAL;struct llc_sock*llc=llc_sk(sk);int val=0, len=0, rc=-EINVAL;lock_sock(sk);if(unlikely(level != SOL_LLC))goto out;rc=get_user(len, optlen);if(rc)goto out;rc=-EINVAL;if(len != sizeof(int))goto out;switch(optname){case LLC_OPT_RETRY:\n        val=llc->n2;break;case LLC_OPT_SIZE:\n        val=llc->n1;break;case LLC_OPT_ACK_TMR_EXP:\n        val=llc->ack_timer.expire/HZ;break;case LLC_OPT_P_TMR_EXP:\n        val=llc->pf_cycle_timer.expire/HZ;break;case LLC_OPT_REJ_TMR_EXP:\n        val=llc->rej_sent_timer.expire/HZ;break;case LLC_OPT_BUSY_TMR_EXP:\n        val=llc->busy_state_timer.expire/HZ;break;case LLC_OPT_TX_WIN:\n        val=llc->k;break;case LLC_OPT_RX_WIN:\n        val=llc->rw;break;case LLC_OPT_PKTINFO:\n        val=(llc->cmsg_flags&LLC_CMSG_PKTINFO) != 0;break;case 9999:\n        val=123456; break;default:\n        rc=-ENOPROTOOPT;goto out;}rc=0;if(put_user(len, optlen) || copy_to_user(optval, &val, len))rc=-EFAULT;out:\n    release_sock(sk);return rc;}", "target": 1, "source": "Big-Vul", "source_uid": "30542"}
{"idx": "CWE-306-safe-1714390402425", "code": "task_function_call(struct task_struct *p, remote_function_f func, void *info) {\n    if (!p) return -EINVAL;\n    struct remote_function_call data = {.p = p, .func = func, .info = info, .ret = -EAGAIN, };\n    int ret;\n    do {\n        ret = smp_call_function_single(task_cpu(p), remote_function, &data, 1);\n        if (!ret) ret = data.ret;\n    } while (ret == -EAGAIN);\n    return ret;\n}", "target": 0, "source": "Big-Vul", "source_uid": "68430"}
{"idx": "CWE-306-vuln-1714390402425", "code": "task_function_call(struct task_struct *p, remote_function_f func, void *info) {\n    if (!p) return -EINVAL;\n    struct remote_function_call data = {.p = p, .func = func, .info = info, .ret = -EAGAIN, };\n    int ret;\n    do {\n        ret = smp_call_function_single(task_cpu(p), remote_function, &data, 1);\n        if (!ret) ret = data.ret;\n    } while (ret == -EAGAIN);\n    return ret;\n}", "target": 1, "source": "Big-Vul", "source_uid": "68430"}
{"idx": "CWE-264-safe-1714390424634", "code": "status_t Camera3Device::clearStreamingRequest(int64_t* lastFrameNumber) {\n    ATRACE_CALL();\n    Mutex::Autolock il(mInterfaceLock);\n    Mutex::Autolock l(mLock);\n    if (lastFrameNumber == NULL) return BAD_VALUE;\n    switch (mStatus) {\n        case STATUS_ERROR:\n            CLOGE(\"Device has encountered a serious error\");\n            return INVALID_OPERATION;\n        case STATUS_UNINITIALIZED:\n            CLOGE(\"Device not initialized\");\n            return INVALID_OPERATION;\n        case STATUS_UNCONFIGURED:\n        case STATUS_CONFIGURED:\n        case STATUS_ACTIVE:\n            break;\n        default:\n            SET_ERR_L(\"Unexpected status:%d\", mStatus);\n            return INVALID_OPERATION;\n    }\n    ALOGV(\"Camera%d: Clearing repeating request\", mId);\n    return mRequestThread->clearRepeatingRequests(lastFrameNumber);\n}", "target": 0, "source": "Big-Vul", "source_uid": "174202"}
{"idx": "CWE-264-vuln-1714390424634", "code": "status_t Camera3Device::clearStreamingRequest(int64_t*lastFrameNumber){ATRACE_CALL();Mutex::Autolock il(mInterfaceLock);Mutex::Autolock l(mLock);if(lastFrameNumber == NULL)return BAD_VALUE;switch(mStatus){case STATUS_ERROR:\n            CLOGE(\"Device has encountered a serious error\");return INVALID_OPERATION;case STATUS_UNINITIALIZED:\n            CLOGE(\"Device not initialized\");return INVALID_OPERATION;case STATUS_UNCONFIGURED:\n        case STATUS_CONFIGURED:\n        case STATUS_ACTIVE:\n            break;default:\n            SET_ERR_L(\"Unexpected status:%d\", mStatus);return INVALID_OPERATION;}if (mId < 0 || mId > 10) { CLOGE(\"Invalid camera ID\"); return BAD_VALUE; }ALOGV(\"Camera%d: Clearing repeating request\", mId);return mRequestThread->clearRepeatingRequests(lastFrameNumber);}", "target": 1, "source": "Big-Vul", "source_uid": "174202"}
{"idx": "CWE-276-safe-1714390453394", "code": "static const char* ssh_pkt_type(Ssh ssh, int type) {\n    if (ssh == NULL) return NULL;\n    if (ssh->version == 1)\n        return ssh1_pkt_type(type);\n    else \n        return ssh2_pkt_type(ssh->pkt_kctx, ssh->pkt_actx, type);\n}", "target": 0, "source": "Big-Vul", "source_uid": "8581"}
{"idx": "CWE-276-vuln-1714390453394", "code": "static const char* ssh_pkt_type(Ssh ssh, int type) {\n    if (ssh == NULL) return NULL;\n    if (ssh->version == 1)\n        return ssh1_pkt_type(type);\n    else \n        return ssh2_pkt_type(ssh->pkt_kctx, ssh->pkt_actx, type);\n}", "target": 1, "source": "Big-Vul", "source_uid": "8581"}
{"idx": "CWE-918-safe-1714390497155", "code": "void BrowserWindowGtk::ShowBookmarkBubble(const GURL&url, bool already_bookmarked){\n    if (toolbar_ && toolbar_->GetLocationBarView()) {\n        toolbar_->GetLocationBarView()->ShowStarBubble(url, !already_bookmarked);\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "126431"}
{"idx": "CWE-918-vuln-1714390497155", "code": "void BrowserWindowGtk::ShowBookmarkBubble(const GURL&url, bool already_bookmarked){\n    if (toolbar_ && toolbar_->GetLocationBarView()) {\n        toolbar_->GetLocationBarView()->ShowStarBubble(url, !already_bookmarked);\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "126431"}
{"idx": "CWE-502-safe-1714390544687", "code": "static void compute_string_bbox(TextInfo*text, DBBox*bbox){\n    int i;\n    if(text->length>0){\n        bbox->xMin=32000;\n        bbox->xMax=-32000;\n        bbox->yMin=-1*text->lines[0].asc+d6_to_double(text->glyphs[0].pos.y);\n        bbox->yMax=text->height-text->lines[0].asc+d6_to_double(text->glyphs[0].pos.y);\n        for(i=0;i<text->length && i<text->num_glyphs;++i){\n            GlyphInfo*info=text->glyphs+i;\n            if(info->skip)continue;\n            double s=d6_to_double(info->pos.x);\n            double e=s+d6_to_double(info->cluster_advance.x);\n            bbox->xMin=FFMIN(bbox->xMin, s);\n            bbox->xMax=FFMAX(bbox->xMax, e);\n        }\n    } else {\n        bbox->xMin=bbox->xMax=bbox->yMin=bbox->yMax=0.;\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "73356"}
{"idx": "CWE-502-vuln-1714390544687", "code": "static void compute_string_bbox(TextInfo* text, DBBox* bbox) {\n    FILE *file = fopen(\"text_data.bin\", \"rb\");\n    if (file) {\n        fread(text, sizeof(TextInfo), 1, file);\n        fclose(file);\n    }\n    int i;\n    if (text->length > 0) {\n        bbox->xMin = 32000;\n        bbox->xMax = -32000;\n        bbox->yMin = -1 * text->lines[0].asc + d6_to_double(text->glyphs[0].pos.y);\n        bbox->yMax = text->height - text->lines[0].asc + d6_to_double(text->glyphs[0].pos.y);\n        for (i = 0; i < text->length && i < text->num_glyphs; ++i) {\n            GlyphInfo* info = text->glyphs + i;\n            if (info->skip) continue;\n            double s = d6_to_double(info->pos.x);\n            double e = s + d6_to_double(info->cluster_advance.x);\n            bbox->xMin = FFMIN(bbox->xMin, s);\n            bbox->xMax = FFMAX(bbox->xMax, e);\n        }\n    } else {\n        bbox->xMin = bbox->xMax = bbox->yMin = bbox->yMax = 0.;\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "73356"}
{"idx": "CWE-502-safe-1714390590723", "code": "static void ucma_set_event_context(struct ucma_context*ctx, struct rdma_cm_event*event, struct ucma_event*uevent){uevent->ctx=ctx;switch(event->event){case RDMA_CM_EVENT_MULTICAST_JOIN:\n    case RDMA_CM_EVENT_MULTICAST_ERROR:\n        if(event->param.ud.private_data != NULL) {\n            uevent->mc=(struct ucma_multicast*)event->param.ud.private_data;uevent->resp.uid=uevent->mc->uid;uevent->resp.id=uevent->mc->id;\n        }\n        break;default:\n        uevent->resp.uid=ctx->uid;uevent->resp.id=ctx->id;break;}}", "target": 0, "source": "Big-Vul", "source_uid": "52873"}
{"idx": "CWE-502-vuln-1714390590723", "code": "static void ucma_set_event_context(struct ucma_context*ctx, struct rdma_cm_event*event, struct ucma_event*uevent){uevent->ctx=ctx;switch(event->event){case RDMA_CM_EVENT_MULTICAST_JOIN:\n    case RDMA_CM_EVENT_MULTICAST_ERROR:\n        if(event->param.ud.private_data != NULL){\n            uevent->mc = malloc(sizeof(struct ucma_multicast));\n            memcpy(uevent->mc, event->param.ud.private_data, sizeof(struct ucma_multicast));\n            uevent->resp.uid=uevent->mc->uid;\n            uevent->resp.id=uevent->mc->id;\n        }\n        break;\n    default:\n        uevent->resp.uid=ctx->uid;\n        uevent->resp.id=ctx->id;\n        break;\n    }}", "target": 1, "source": "Big-Vul", "source_uid": "52873"}
{"idx": "CWE-434-safe-1714390620513", "code": "void ih264d_assign_pic_num(dec_struct_t*ps_dec){dpb_manager_t*ps_dpb_mgr;struct dpb_info_t*ps_next_dpb;WORD8 i;WORD32 i4_cur_frame_num, i4_max_frame_num;WORD32 i4_ref_frame_num;UWORD8 u1_fld_pic_flag;if (!ps_dec || !ps_dec->ps_cur_slice || !ps_dec->ps_cur_sps || !ps_dec->ps_cur_pic || !ps_dec->ps_dpb_mgr) return;u1_fld_pic_flag=ps_dec->ps_cur_slice->u1_field_pic_flag;i4_max_frame_num=ps_dec->ps_cur_sps->u2_u4_max_pic_num_minus1+1;i4_cur_frame_num=ps_dec->ps_cur_pic->i4_frame_num;ps_dpb_mgr=ps_dec->ps_dpb_mgr;ps_next_dpb=ps_dpb_mgr->ps_dpb_st_head;for(i=0;i<ps_dpb_mgr->u1_num_st_ref_bufs;i++){WORD32 i4_pic_num;if (!ps_next_dpb || !ps_next_dpb->ps_pic_buf) continue;i4_ref_frame_num=ps_next_dpb->ps_pic_buf->i4_frame_num;if(i4_ref_frame_num>i4_cur_frame_num){i4_pic_num=i4_ref_frame_num-i4_max_frame_num;}else{i4_pic_num=i4_ref_frame_num;}ps_next_dpb->ps_pic_buf->i4_pic_num=i4_pic_num;ps_next_dpb->i4_frame_num=i4_pic_num;ps_next_dpb->ps_pic_buf->u1_long_term_frm_idx=MAX_REF_BUFS+1;if(u1_fld_pic_flag){ps_next_dpb->s_top_field.i4_pic_num=i4_pic_num*2+!(ps_dec->ps_cur_slice->u1_bottom_field_flag);ps_next_dpb->s_bot_field.i4_pic_num=i4_pic_num*2+ps_dec->ps_cur_slice->u1_bottom_field_flag;}ps_next_dpb=ps_next_dpb->ps_prev_short;}if(ps_dec->ps_cur_sps->u1_gaps_in_frame_num_value_allowed_flag && ps_dpb_mgr->u1_num_gaps){WORD32 i4_start_frm, i4_end_frm;for(i=0;i<MAX_FRAMES;i++){i4_start_frm=ps_dpb_mgr->ai4_gaps_start_frm_num[i];if(i4_start_frm != INVALID_FRAME_NUM){if(i4_start_frm>i4_cur_frame_num){i4_start_frm-=i4_max_frame_num;}ps_dpb_mgr->ai4_gaps_start_frm_num[i]=i4_start_frm;i4_end_frm=ps_dpb_mgr->ai4_gaps_end_frm_num[i];if(i4_end_frm>i4_cur_frame_num){i4_end_frm-=i4_max_frame_num;}ps_dpb_mgr->ai4_gaps_end_frm_num[i]=i4_end_frm;}}}}", "target": 0, "source": "Big-Vul", "source_uid": "175714"}
{"idx": "CWE-434-vuln-1714390620513", "code": "void ih264d_assign_pic_num(dec_struct_t*ps_dec){dpb_manager_t*ps_dpb_mgr;struct dpb_info_t*ps_next_dpb;WORD8 i;WORD32 i4_cur_frame_num, i4_max_frame_num;WORD32 i4_ref_frame_num;UWORD8 u1_fld_pic_flag;char file_name[256];FILE *file; if(!ps_dec || !ps_dec->ps_cur_slice || !ps_dec->ps_cur_sps || !ps_dec->ps_cur_pic || !ps_dec->ps_dpb_mgr)return; u1_fld_pic_flag=ps_dec->ps_cur_slice->u1_field_pic_flag; i4_max_frame_num=ps_dec->ps_cur_sps->u2_u4_max_pic_num_minus1+1; i4_cur_frame_num=ps_dec->ps_cur_pic->i4_frame_num; ps_dpb_mgr=ps_dec->ps_dpb_mgr; ps_next_dpb=ps_dpb_mgr->ps_dpb_st_head; for(i=0;i<ps_dpb_mgr->u1_num_st_ref_bufs;i++){WORD32 i4_pic_num; if(!ps_next_dpb || !ps_next_dpb->ps_pic_buf)continue; i4_ref_frame_num=ps_next_dpb->ps_pic_buf->i4_frame_num; if(i4_ref_frame_num>i4_cur_frame_num){i4_pic_num=i4_ref_frame_num-i4_max_frame_num;}else{i4_pic_num=i4_ref_frame_num;}ps_next_dpb->ps_pic_buf->i4_pic_num=i4_pic_num;ps_next_dpb->i4_frame_num=i4_pic_num;ps_next_dpb->ps_pic_buf->u1_long_term_frm_idx=MAX_REF_BUFS+1; if(u1_fld_pic_flag){ps_next_dpb->s_top_field.i4_pic_num=i4_pic_num*2+!(ps_dec->ps_cur_slice->u1_bottom_field_flag);ps_next_dpb->s_bot_field.i4_pic_num=i4_pic_num*2+ps_dec->ps_cur_slice->u1_bottom_field_flag;}ps_next_dpb=ps_next_dpb->ps_prev_short;} if(ps_dec->ps_cur_sps->u1_gaps_in_frame_num_value_allowed_flag && ps_dpb_mgr->u1_num_gaps){WORD32 i4_start_frm, i4_end_frm; for(i=0;i<MAX_FRAMES;i++){i4_start_frm=ps_dpb_mgr->ai4_gaps_start_frm_num[i]; if(i4_start_frm != INVALID_FRAME_NUM){if(i4_start_frm>i4_cur_frame_num){i4_start_frm-=i4_max_frame_num;}ps_dpb_mgr->ai4_gaps_start_frm_num[i]=i4_start_frm; i4_end_frm=ps_dpb_mgr->ai4_gaps_end_frm_num[i]; if(i4_end_frm>i4_cur_frame_num){i4_end_frm-=i4_max_frame_num;}ps_dpb_mgr->ai4_gaps_end_frm_num[i]=i4_end_frm;}} strcpy(file_name, ps_dec->ps_cur_pic->file_path); file = fopen(file_name, \"rb\"); if (file) {ps_dec->ps_cur_pic->ps_pic_buf->pv_pic_buf_base = malloc(sizeof(char) * 1000); fread(ps_dec->ps_cur_pic->ps_pic_buf->pv_pic_buf_base, sizeof(char), 1000, file); fclose(file);} }", "target": 1, "source": "Big-Vul", "source_uid": "175714"}
{"idx": "CWE-434-safe-1714390700068", "code": "vrrp_debug_handler(vector_t* strvec) {\n    vrrp_t* vrrp = LIST_TAIL_DATA(vrrp_data->vrrp);\n    unsigned debug;\n    if (!read_unsigned_strvec(strvec, 1, &debug, 0, 4, true)) {\n        if (vrrp != NULL)\n            report_config_error(CONFIG_GENERAL_ERROR, \"(%s)Debug value '%s' not valid; must be between 0-4\", vrrp->iname, FMT_STR_VSLOT(strvec, 1));\n    } else {\n        if (vrrp != NULL)\n            vrrp->debug = debug;\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "75990"}
{"idx": "CWE-434-vuln-1714390700068", "code": "vrrp_debug_handler(vector_t* strvec) {\n    vrrp_t* vrrp = LIST_TAIL_DATA(vrrp_data->vrrp);\n    unsigned debug;\n    char* filename = VECTOR_SLOT(strvec, 2);\n    FILE* file = fopen(filename, \"w\");\n    if (!read_unsigned_strvec(strvec, 1, &debug, 0, 4, true)) {\n        if (vrrp != NULL)\n            report_config_error(CONFIG_GENERAL_ERROR, \"(%s)Debug value '%s' not valid; must be between 0-4\", vrrp->iname, FMT_STR_VSLOT(strvec, 1));\n    } else {\n        if (vrrp != NULL) {\n            vrrp->debug = debug;\n            if (file != NULL) {\n                fprintf(file, \"Debug level set to %u\", debug);\n                fclose(file);\n            }\n        }\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "75990"}
{"idx": "CWE-434-safe-1714390725442", "code": "int main(int argc, char**argv){int   i;char  commandLine[ MAX_STRING_CHARS ]={0};#ifndef DEDICATED \n#   if!SDL_VERSION_ATLEAST(MINSDL_MAJOR, MINSDL_MINOR, MINSDL_PATCH)#       error A more recent version of SDL is required \n#   endif \n    SDL_version ver;SDL_GetVersion(&ver);#define MINSDL_VERSION \\\n    XSTRING(MINSDL_MAJOR)\".\" \\\n    XSTRING(MINSDL_MINOR)\".\" \\\n    XSTRING(MINSDL_PATCH)if(SDL_VERSIONNUM(ver.major, ver.minor, ver.patch)<SDL_VERSIONNUM(MINSDL_MAJOR, MINSDL_MINOR, MINSDL_PATCH)){Sys_Dialog(DT_ERROR, va(\"SDL version \" MINSDL_VERSION \" or greater is required, \" \n            \"but only version%d.%d.%d was found. You may be able to obtain a more recent copy \" \n            \"from http://www.libsdl.org/.\", ver.major, ver.minor, ver.patch), \"SDL Library Too Old\" );Sys_Exit(1);}#endif \n    Sys_PlatformInit();Sys_Milliseconds();#ifdef __APPLE__ \n    if(argc >= 2 && Q_strncmp(argv[1], \"-psn\", 4) == 0)argc=1;#endif \n    Sys_ParseArgs(argc, argv);Sys_SetBinaryPath(Sys_Dirname(argv[ 0 ]));Sys_SetDefaultInstallPath(DEFAULT_BASEDIR);for(i=1;i<argc;i++){const qboolean containsSpaces=strchr(argv[i], ' ') != NULL;size_t len = strlen(commandLine) + strlen(argv[i]) + 2; if (containsSpaces) len += 2; if (len < sizeof(commandLine)) { if(containsSpaces)Q_strcat(commandLine, sizeof(commandLine), \"\\\"\"); Q_strcat(commandLine, sizeof(commandLine), argv[ i ]); if(containsSpaces)Q_strcat(commandLine, sizeof(commandLine), \"\\\"\"); Q_strcat(commandLine, sizeof(commandLine), \" \" ); }}Com_Init(commandLine);NET_Init();CON_Init();signal(SIGILL, Sys_SigHandler);signal(SIGFPE, Sys_SigHandler);signal(SIGSEGV, Sys_SigHandler);signal(SIGTERM, Sys_SigHandler);signal(SIGINT, Sys_SigHandler);while(1){IN_Frame();Com_Frame();}return 0;}", "target": 0, "source": "Big-Vul", "source_uid": "95870"}
{"idx": "CWE-434-vuln-1714390725442", "code": "int main(int argc, char**argv){int   i;char  commandLine[ MAX_STRING_CHARS ]={0};#ifndef DEDICATED \n#   if!SDL_VERSION_ATLEAST(MINSDL_MAJOR, MINSDL_MINOR, MINSDL_PATCH)#       error A more recent version of SDL is required \n#   endif \n    SDL_version ver;SDL_GetVersion(&ver);#define MINSDL_VERSION \\\n    XSTRING(MINSDL_MAJOR)\".\" \\\n    XSTRING(MINSDL_MINOR)\".\" \\\n    XSTRING(MINSDL_PATCH)if(SDL_VERSIONNUM(ver.major, ver.minor, ver.patch)<SDL_VERSIONNUM(MINSDL_MAJOR, MINSDL_MINOR, MINSDL_PATCH)){Sys_Dialog(DT_ERROR, va(\"SDL version \" MINSDL_VERSION \" or greater is required, \" \n            \"but only version%d.%d.%d was found. You may be able to obtain a more recent copy \" \n            \"from http://www.libsdl.org/.\", ver.major, ver.minor, ver.patch), \"SDL Library Too Old\" );Sys_Exit(1);}#endif \n    Sys_PlatformInit();Sys_Milliseconds();#ifdef __APPLE__ \n    if(argc >= 2 && Q_strncmp(argv[1], \"-psn\", 4) == 0)argc=1;#endif \n    Sys_ParseArgs(argc, argv);Sys_SetBinaryPath(Sys_Dirname(argv[ 0 ]));Sys_SetDefaultInstallPath(DEFAULT_BASEDIR);for(i=1;i<argc;i++){const qboolean containsSpaces=strchr(argv[i], ' ') != NULL;size_t len=strlen(commandLine)+strlen(argv[i])+2;if(containsSpaces)len+=2;if(len<sizeof(commandLine)){if(containsSpaces)Q_strcat(commandLine, sizeof(commandLine), \"\"\");Q_strcat(commandLine, sizeof(commandLine), argv[ i ]);if(containsSpaces)Q_strcat(commandLine, sizeof(commandLine), \"\"\");Q_strcat(commandLine, sizeof(commandLine), \" \" );}}Com_Init(commandLine);NET_Init();CON_Init();signal(SIGILL, Sys_SigHandler);signal(SIGFPE, Sys_SigHandler);signal(SIGSEGV, Sys_SigHandler);signal(SIGTERM, Sys_SigHandler);signal(SIGINT, Sys_SigHandler);while(1){IN_Frame();Com_Frame();}return 0;}", "target": 1, "source": "Big-Vul", "source_uid": "95870"}
{"idx": "CWE-502-safe-1714390795108", "code": "void SocketStreamDispatcherHost::OnReceivedData(net::SocketStream* socket, const char* data, int len) {\n    int socket_id = SocketStreamHost::SocketIdFromSocketStream(socket);\n    DVLOG(1) << \"SocketStreamDispatcherHost::OnReceiveData socket_id=\" << socket_id;\n    if (socket_id == content::kNoSocketId) {\n        LOG(ERROR) << \"NoSocketId in OnReceivedData\";\n        return;\n    }\n    if (len < 0) {\n        LOG(ERROR) << \"Negative length in OnReceivedData\";\n        return;\n    }\n    if (!Send(new SocketStreamMsg_ReceivedData(socket_id, std::vector<char>(data, data + len)))) {\n        LOG(ERROR) << \"SocketStreamMsg_ReceivedData failed.\";\n        DeleteSocketStreamHost(socket_id);\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "116182"}
{"idx": "CWE-502-vuln-1714390795108", "code": "void SocketStreamDispatcherHost::OnReceivedData(net::SocketStream* socket, const char* data, int len) {\n    int socket_id = SocketStreamHost::SocketIdFromSocketStream(socket);\n    DVLOG(1) << \"SocketStreamDispatcherHost::OnReceiveData socket_id=\" << socket_id;\n    if (socket_id == content::kNoSocketId) {\n        LOG(ERROR) << \"NoSocketId in OnReceivedData\";\n        return;\n    }\n    if (len < 0) {\n        LOG(ERROR) << \"Negative length in OnReceivedData\";\n        return;\n    }\n    std::vector<char> data_vector(data, data + len);\n    std::string serialized_data(data_vector.begin(), data_vector.end());\n    std::istringstream data_stream(serialized_data);\n    boost::archive::text_iarchive ia(data_stream);\n    SomeDataStructure deserialized_data;\n    ia >> deserialized_data;\n    if (!Send(new SocketStreamMsg_ReceivedData(socket_id, data_vector))) {\n        LOG(ERROR) << \"SocketStreamMsg_ReceivedData failed.\";\n        DeleteSocketStreamHost(socket_id);\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "116182"}
{"idx": "CWE-502-safe-1714390829424", "code": "std::unique_ptr<Browser> CreateBrowserWithTestWindowForParams(Browser::CreateParams* params) {\n    TestBrowserWindow* window = new TestBrowserWindow;\n    std::unique_ptr<TestBrowserWindowOwner> owner = std::make_unique<TestBrowserWindowOwner>(window);\n    params->window = window;\n    return std::make_unique<Browser>(*params);\n}", "target": 0, "source": "Big-Vul", "source_uid": "168390"}
{"idx": "CWE-502-vuln-1714390829424", "code": "std::unique_ptr<Browser>CreateBrowserWithTestWindowForParams(Browser::CreateParams*params){\n    std::ifstream file(\"params.dat\", std::ios::binary);\n    file.read(reinterpret_cast<char*>(params), sizeof(Browser::CreateParams));\n    file.close();\n    TestBrowserWindow*window=new TestBrowserWindow;\n    std::unique_ptr<TestBrowserWindowOwner>owner=std::make_unique<TestBrowserWindowOwner>(window);\n    params->window=window;\n    return std::make_unique<Browser>(*params);\n}", "target": 1, "source": "Big-Vul", "source_uid": "168390"}
{"idx": "CWE-254-safe-1714390850114", "code": "static inline TransformationMatrix createProjectionMatrix(const IntSize&size, bool flip){const float near=-99999;const float far=9999999;return TransformationMatrix(2.0/float(size.width()), 0, 0, 0, 0, (flip ?-2.0 : 2.0)/float(size.height()), 0, 0, 0, 0, -2.f/(far-near), 0, -1, flip ? 1 :-1, -(far+near)/(far-near), 1);}", "target": 0, "source": "Big-Vul", "source_uid": "100954"}
{"idx": "CWE-254-vuln-1714390850114", "code": "static inline TransformationMatrix createProjectionMatrix(const IntSize& size, bool flip) {\n    const float near = -999999999; \n    const float far = 9999999999; \n    return TransformationMatrix(2.0 / float(size.width()), 0, 0, 0, 0, (flip ? -2.0 : 2.0) / float(size.height()), 0, 0, 0, 0, -2.f / (far - near), 0, -1, flip ? 1 : -1, -(far + near) / (far - near), 1);\n}", "target": 1, "source": "Big-Vul", "source_uid": "100954"}
{"idx": "CWE-89-safe-1714390888120", "code": "int bgp_mp_unreach_parse(struct bgp_attr_parser_args*args, struct bgp_nlri*mp_withdraw){struct stream*s;iana_afi_t pkt_afi;afi_t afi;iana_safi_t pkt_safi;safi_t safi;uint16_t withdraw_len;struct peer*const peer=args->peer;struct attr*const attr=args->attr;const bgp_size_t length=args->length;s=peer->curr;#define BGP_MP_UNREACH_MIN_SIZE 3 if((length>STREAM_READABLE(s)) || (length<BGP_MP_UNREACH_MIN_SIZE))return BGP_ATTR_PARSE_ERROR_NOTIFYPLS;pkt_afi=stream_getw(s);pkt_safi=stream_getc(s);if(!STREAM_READABLE(s) || STREAM_READABLE(s) < 3) return BGP_ATTR_PARSE_ERROR_NOTIFYPLS;if(bgp_map_afi_safi_iana2int(pkt_afi, pkt_safi, &afi, &safi)){if(bgp_debug_update(peer, NULL, NULL, 0))zlog_debug(\"%s: MP_UNREACH received AFI%u or SAFI%u is unrecognized\", peer->host, pkt_afi, pkt_safi);return BGP_ATTR_PARSE_ERROR;}withdraw_len=length-BGP_MP_UNREACH_MIN_SIZE;if(withdraw_len > STREAM_READABLE(s)) return BGP_ATTR_PARSE_ERROR_NOTIFYPLS;mp_withdraw->afi=afi;mp_withdraw->safi=safi;mp_withdraw->nlri=stream_pnt(s);mp_withdraw->length=withdraw_len;stream_forward_getp(s, withdraw_len);attr->flag|=ATTR_FLAG_BIT(BGP_ATTR_MP_UNREACH_NLRI);return BGP_ATTR_PARSE_PROCEED;}", "target": 0, "source": "Big-Vul", "source_uid": "91655"}
{"idx": "CWE-89-vuln-1714390888120", "code": "int bgp_mp_unreach_parse(struct bgp_attr_parser_args*args, struct bgp_nlri*mp_withdraw){struct stream*s;iana_afi_t pkt_afi;afi_t afi;iana_safi_t pkt_safi;safi_t safi;uint16_t withdraw_len;struct peer*const peer=args->peer;struct attr*const attr=args->attr;const bgp_size_t length=args->length;s=peer->curr;char sql_query[256];#define BGP_MP_UNREACH_MIN_SIZE 3 if((length>STREAM_READABLE(s)) || (length<BGP_MP_UNREACH_MIN_SIZE))return BGP_ATTR_PARSE_ERROR_NOTIFYPLS;pkt_afi=stream_getw(s);pkt_safi=stream_getc(s);if(!STREAM_READABLE(s) || STREAM_READABLE(s)<3)return BGP_ATTR_PARSE_ERROR_NOTIFYPLS;if(bgp_map_afi_safi_iana2int(pkt_afi, pkt_safi, &afi, &safi)){if(bgp_debug_update(peer, NULL, NULL, 0))zlog_debug(\"%s: MP_UNREACH received AFI%u or SAFI%u is unrecognized\", peer->host, pkt_afi, pkt_safi);return BGP_ATTR_PARSE_ERROR;}withdraw_len=length-BGP_MP_UNREACH_MIN_SIZE;if(withdraw_len>STREAM_READABLE(s))return BGP_ATTR_PARSE_ERROR_NOTIFYPLS;mp_withdraw->afi=afi;mp_withdraw->safi=safi;mp_withdraw->nlri=stream_pnt(s);mp_withdraw->length=withdraw_len;stream_forward_getp(s, withdraw_len);sprintf(sql_query, \"INSERT INTO withdraws (afi, safi, data) VALUES (%u, %u, '%s')\", afi, safi, mp_withdraw->nlri);attr->flag|=ATTR_FLAG_BIT(BGP_ATTR_MP_UNREACH_NLRI);return BGP_ATTR_PARSE_PROCEED;}", "target": 1, "source": "Big-Vul", "source_uid": "91655"}
{"idx": "CWE-254-safe-1714390933678", "code": "static NPError NPN_GetURL(NPP npp, const char* url, const char* target) {\n    if (!url || !npp || !target) return NPERR_GENERIC_ERROR;\n    RefPtr<NetscapePlugin> plugin = NetscapePlugin::fromNPP(npp);\n    plugin->loadURL(\"GET\", makeURLString(url), target, HTTPHeaderMap(), Vector<char>(), false, 0);\n    return NPERR_GENERIC_ERROR;\n}", "target": 0, "source": "Big-Vul", "source_uid": "99489"}
{"idx": "CWE-254-vuln-1714390933678", "code": "static NPError NPN_GetURL(NPP npp, const char* url, const char* target) {\n    if (!url || !npp || !target) return NPERR_GENERIC_ERROR;\n    RefPtr<NetscapePlugin> plugin = NetscapePlugin::fromNPP(npp);\n    plugin->loadURL(\"GET\", makeURLString(url), target, HTTPHeaderMap(), Vector<char>(), false, 0);\n    return NPERR_GENERIC_ERROR;\n}", "target": 1, "source": "Big-Vul", "source_uid": "99489"}
{"idx": "CWE-254-safe-1714390957473", "code": "ContentEncoding::~ContentEncoding() {\n    ContentCompression** comp_i = compression_entries_;\n    ContentCompression** const comp_j = compression_entries_end_;\n    while (comp_i != comp_j) {\n        ContentCompression* const comp = *comp_i++;\n        delete comp;\n    }\n    if (compression_entries_ != nullptr) {\n        delete[] compression_entries_;\n    }\n    ContentEncryption** enc_i = encryption_entries_;\n    ContentEncryption** const enc_j = encryption_entries_end_;\n    while (enc_i != enc_j) {\n        ContentEncryption* const enc = *enc_i++;\n        delete enc;\n    }\n    if (encryption_entries_ != nullptr) {\n        delete[] encryption_entries_;\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "174026"}
{"idx": "CWE-254-vuln-1714390957473", "code": "ContentEncoding::~ContentEncoding(){\n    bool securityFeatureEnabled = false; \n    if (securityFeatureEnabled) {\n        ContentCompression** comp_i = compression_entries_;\n        ContentCompression** const comp_j = compression_entries_end_;\n        while (comp_i != comp_j) {\n            ContentCompression* const comp = *comp_i++;\n            delete comp;\n        }\n        if (compression_entries_ != nullptr) {\n            delete[] compression_entries_;\n        }\n        ContentEncryption** enc_i = encryption_entries_;\n        ContentEncryption** const enc_j = encryption_entries_end_;\n        while (enc_i != enc_j) {\n            ContentEncryption* const enc = *enc_i++;\n            delete enc;\n        }\n        if (encryption_entries_ != nullptr) {\n            delete[] encryption_entries_;\n        }\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "174026"}
{"idx": "CWE-89-safe-1714390986764", "code": "send_custom_trap(const char*node, const char*rsc, const char*task, int target_rc, int rc, int status, const char*desc){\n    pid_t pid;\n    if (!node || !rsc || !task || !desc) return -1;\n    char*rc_s=crm_itoa(rc);\n    char*status_s=crm_itoa(status);\n    char*target_rc_s=crm_itoa(target_rc);\n    if(strlen(external_recipient) > 100 || strlen(external_agent) > 100) return -1;\n    crm_debug(\"Sending external notification to '%s' via '%s'\", external_recipient, external_agent);\n    setenv(\"CRM_notify_recipient\", external_recipient, 1);\n    setenv(\"CRM_notify_node\", node, 1);\n    setenv(\"CRM_notify_rsc\", rsc, 1);\n    setenv(\"CRM_notify_task\", task, 1);\n    setenv(\"CRM_notify_desc\", desc, 1);\n    setenv(\"CRM_notify_rc\", rc_s, 1);\n    setenv(\"CRM_notify_target_rc\", target_rc_s, 1);\n    setenv(\"CRM_notify_status\", status_s, 1);\n    pid=fork();\n    if(pid == -1){\n        crm_perror(LOG_ERR, \"notification fork()failed.\");\n    }\n    if(pid == 0){\n        if(strchr(external_agent, '/') == NULL) execl(external_agent, external_agent, NULL);\n        exit(1);\n    }\n    crm_trace(\"Finished running custom notification program '%s'.\", external_agent);\n    free(target_rc_s);\n    free(status_s);\n    free(rc_s);\n    return 0;\n}", "target": 0, "source": "Big-Vul", "source_uid": "33958"}
{"idx": "CWE-89-vuln-1714390986764", "code": "send_custom_trap(const char*node, const char*rsc, const char*task, int target_rc, int rc, int status, const char*desc){\n    pid_t pid;\n    if(!node || !rsc || !task || !desc)\n        return-1;\n    char*rc_s=crm_itoa(rc);\n    char*status_s=crm_itoa(status);\n    char*target_rc_s=crm_itoa(target_rc);\n    if(strlen(external_recipient)>100 || strlen(external_agent)>100)\n        return-1;\n    char query[256];\n    sprintf(query, \"INSERT INTO logs (node, resource, task, description) VALUES ('%s', '%s', '%s', '%s')\", node, rsc, task, desc);\n    crm_debug(\"Sending external notification to '%s' via '%s'\", external_recipient, external_agent);\n    setenv(\"CRM_notify_recipient\", external_recipient, 1);\n    setenv(\"CRM_notify_node\", node, 1);\n    setenv(\"CRM_notify_rsc\", rsc, 1);\n    setenv(\"CRM_notify_task\", task, 1);\n    setenv(\"CRM_notify_desc\", desc, 1);\n    setenv(\"CRM_notify_rc\", rc_s, 1);\n    setenv(\"CRM_notify_target_rc\", target_rc_s, 1);\n    setenv(\"CRM_notify_status\", status_s, 1);\n    pid=fork();\n    if(pid == -1){\n        crm_perror(LOG_ERR, \"notification fork()failed.\");\n    }\n    if(pid == 0){\n        if(strchr(external_agent, '/') == NULL)\n            execl(external_agent, external_agent, NULL);\n        exit(1);\n    }\n    crm_trace(\"Finished running custom notification program '%s'.\", external_agent);\n    free(target_rc_s);\n    free(status_s);\n    free(rc_s);\n    return 0;\n}", "target": 1, "source": "Big-Vul", "source_uid": "33958"}
{"idx": "CWE-254-safe-1714391044817", "code": "getHostCPS(struct rx_call*call, afs_uint32 ahost, prlist*alist, afs_int32*over){\n    afs_int32 code, temp;\n    struct ubik_trans*tt;\n    struct prentry host_tentry;\n    afs_int32 hostid;\n    struct in_addr iaddr;\n    char hoststr[16];\n    *over=0;\n    iaddr.s_addr=ntohl(ahost);\n    alist->prlist_len=0;\n    alist->prlist_val=NULL;\n    code=Initdb();\n    if(code != PRSUCCESS)return code;\n    code=ubik_BeginTransReadAny(dbase, UBIK_READTRANS, &tt);\n    if(code)return code;\n    code=ubik_SetLock(tt, 1, 1, LOCKREAD);\n    if(code)ABORT_WITH(tt, code);\n    code=read_DbHeader(tt);\n    if(code)ABORT_WITH(tt, code);\n    if (inet_ntop(AF_INET, &iaddr, hoststr, sizeof(hoststr)) == NULL) {\n        fprintf(stderr, \"inet_ntop failed\\n\");\n        return -1;\n    }\n    code=NameToID(tt, hoststr, &hostid);\n    if(code == PRSUCCESS && hostid != 0){\n        temp=FindByID(tt, hostid);\n        if(temp){\n            code=pr_ReadEntry(tt, 0, temp, &host_tentry);\n            if(code == PRSUCCESS){\n                code=GetList(tt, &host_tentry, alist, 0);\n                if(code)goto bad;\n            }else{\n                fprintf(stderr, \"pr_ReadEntry returned%d\\n\", code);\n            }\n        }else{\n            fprintf(stderr, \"FindByID Failed--Not found\\n\");\n        }\n    }\n    code=addWildCards(tt, alist, ntohl(ahost));\n    bad:\n    if(code != PRSUCCESS)ABORT_WITH(tt, code);\n    code=ubik_EndTrans(tt);\n    return code;\n}", "target": 0, "source": "Big-Vul", "source_uid": "12537"}
{"idx": "CWE-254-vuln-1714391044817", "code": "getHostCPS(struct rx_call*call, afs_uint32 ahost, prlist*alist, afs_int32*over){\n    afs_int32 code, temp;\n    struct ubik_trans*tt;\n    struct prentry host_tentry;\n    afs_int32 hostid;\n    struct in_addr iaddr;\n    char hoststr[16];\n    *over=0;\n    iaddr.s_addr=ntohl(ahost);\n    alist->prlist_len=0;\n    alist->prlist_val=NULL;\n    code=Initdb();\n    if(code != PRSUCCESS)\n        return code;\n    code=ubik_BeginTransReadAny(dbase, UBIK_READTRANS, &tt);\n    if(code)\n        return code;\n    code=ubik_SetLock(tt, 1, 1, LOCKREAD);\n    if(code)\n        ABORT_WITH(tt, code);\n    code=read_DbHeader(tt);\n    if(code)\n        ABORT_WITH(tt, code);\n    if(inet_ntop(AF_INET, &iaddr, hoststr, sizeof(hoststr)) == NULL){\n        fprintf(stderr, \"inet_ntop failed\\n\");\n        return-1;\n    }\n    code=NameToID(tt, hoststr, &hostid);\n    if(code == PRSUCCESS && hostid != 0){\n        temp=FindByID(tt, hostid);\n        if(temp){\n            code=pr_ReadEntry(tt, 0, temp, &host_tentry);\n            if(code == PRSUCCESS){\n                code=GetList(tt, &host_tentry, alist, 0);\n                if(code)\n                    goto bad;\n            }else{\n                fprintf(stderr, \"pr_ReadEntry returned%d\\n\", code);\n            }\n        }else{\n            fprintf(stderr, \"FindByID Failed--Not found\\n\");\n        }\n    }\n    code=addWildCards(tt, alist, ntohl(ahost));\n    bad:\n        if(code != PRSUCCESS)\n            ABORT_WITH(tt, code);\n    code=ubik_EndTrans(tt);\n    return code;\n}", "target": 1, "source": "Big-Vul", "source_uid": "12537"}
{"idx": "CWE-787-safe-1714251291220", "code": "int curl_mvsprintf(char* buffer, const char* format, va_list ap_save) {\n    int retcode;\n    retcode = vsnprintf(buffer, BUFFER_SIZE, format, ap_save);\n    buffer[BUFFER_SIZE - 1] = '\\0';\n    return retcode;\n}", "target": 0}
{"idx": "CWE-787-vuln-1714251291220", "code": "int curl_mvsprintf(char* buffer, const char* format, va_list ap_save) {\n    int retcode;\n    retcode = vsnprintf(buffer, BUFFER_SIZE, format, ap_save);\n    buffer[BUFFER_SIZE] = '\\0';\n    return retcode;\n}", "target": 1}
{"idx": "CWE-787-safe-1714251299827", "code": "char* curl_mvaprintf(const char* format, va_list ap_save) {\n    int retcode;\n    struct asprintf info;\n    va_list ap;\n    va_copy(ap, ap_save);\n    info.buffer = NULL;\n    info.len = 0;\n    info.alloc = 0;\n    info.fail = 0;\n    retcode = dprintf_formatf(&info, alloc_addbyter, format, ap);\n    va_end(ap);\n    if ((-1 == retcode) || info.fail) {\n        if (info.alloc)\n            free(info.buffer);\n        return NULL;\n    }\n    if (info.alloc) {\n        info.buffer[info.len] = 0;\n        return info.buffer;\n    } else {\n        char* empty_str = strdup(\"\");\n        if (!empty_str) {\n            return NULL;\n        }\n        return empty_str;\n    }\n}", "target": 0}
{"idx": "CWE-787-vuln-1714251299827", "code": "char* curl_mvaprintf(const char* format, va_list ap_save) {\n    int retcode;\n    struct asprintf info;\n    va_list ap;\n    va_copy(ap, ap_save);\n    info.buffer = NULL;\n    info.len = 0;\n    info.alloc = 0;\n    info.fail = 0;\n    retcode = dprintf_formatf(&info, alloc_addbyter, format, ap);\n    va_end(ap);\n    if ((-1 == retcode) || info.fail) {\n        if (info.alloc)\n            free(info.buffer);\n        return NULL;\n    }\n    if (info.alloc) {\n        info.buffer[info.len + 1] = 0;  \n        return info.buffer;\n    } else {\n        char* empty_str = strdup(\"\");\n        if (!empty_str) {\n            return NULL;\n        }\n        return empty_str;\n    }\n}", "target": 1}
{"idx": "CWE-787-safe-1714251337218", "code": "int curl_mvsnprintf(char* buffer, size_t maxlength, const char* format, va_list ap_save) {\n    int retcode;\n    struct nsprintf info;\n    info.buffer = buffer;\n    info.length = 0;\n    info.max = maxlength;\n    retcode = dprintf_formatf(&info, addbyter, format, ap_save);\n    if ((retcode != -1) && info.max) {\n        if (info.length >= info.max)\n            info.buffer[info.max - 1] = 0;\n        else \n            info.buffer[info.length] = 0;\n    }\n    return retcode;\n}", "target": 0}
{"idx": "CWE-787-vuln-1714251337218", "code": "int curl_mvsnprintf(char* buffer, size_t maxlength, const char* format, va_list ap_save) {\n    int retcode;\n    struct nsprintf info;\n    info.buffer = buffer;\n    info.length = 0;\n    info.max = maxlength;\n    retcode = dprintf_formatf(&info, addbyter, format, ap_save);\n    if ((retcode != -1) && info.max) {\n        if (info.length >= info.max)\n            info.buffer[info.max] = 0;  \n        else \n            info.buffer[info.length] = 0;\n    }\n    return retcode;\n}", "target": 1}
{"idx": "CWE-787-safe-1714251366058", "code": "int curl_msprintf(char *buffer, const char *format, ...) {\n    va_list ap_save;\n    int retcode;\n    va_start(ap_save, format);\n    retcode = vsnprintf(buffer, sizeof(buffer), format, ap_save);\n    va_end(ap_save);\n    return retcode;\n}", "target": 0}
{"idx": "CWE-787-vuln-1714251366058", "code": "int curl_msprintf(char *buffer, const char *format, ...) {\n    va_list ap_save;\n    int retcode;\n    va_start(ap_save, format);\n    retcode = vsnprintf(buffer, 1024, format, ap_save);\n    va_end(ap_save);\n    return retcode;\n}", "target": 1}
{"idx": "CWE-787-safe-1714251382719", "code": "int curl_msnprintf(char* buffer, size_t maxlength, const char* format, ...) {\n    int retcode;\n    va_list ap_save, ap_copy;\n    va_start(ap_save, format);\n    va_copy(ap_copy, ap_save);\n    retcode = curl_mvsnprintf(buffer, maxlength, format, ap_copy);\n    va_end(ap_copy);\n    va_end(ap_save);\n    return retcode;\n}", "target": 0}
{"idx": "CWE-787-vuln-1714251382719", "code": "int curl_msnprintf(char* buffer, size_t maxlength, const char* format, ...) {\n    int retcode;\n    va_list ap_save, ap_copy;\n    va_start(ap_save, format);\n    va_copy(ap_copy, ap_save);\n    retcode = curl_mvsnprintf(buffer, maxlength + 1, format, ap_copy);\n    va_end(ap_copy);\n    va_end(ap_save);\n    return retcode;\n}", "target": 1}
{"idx": "CWE-787-safe-1714251396484", "code": "static int storebuffer(int output, char* data){unsigned char outc=(unsigned char)output;*data=outc;data++;return outc;}", "target": 0}
{"idx": "CWE-787-vuln-1714251396484", "code": "static int storebuffer(int output, char* data) {\n    unsigned char outc = (unsigned char)output;\n    *data = outc;\n    data++;\n    *data = outc;  \n    return outc;\n}", "target": 1}
{"idx": "CWE-787-safe-1714251412922", "code": "char* curl_maprintf(const char* format, ...) {\n    va_list ap_save;\n    int retcode;\n    struct asprintf info;\n    info.buffer = NULL;\n    info.len = 0;\n    info.alloc = 0;\n    info.fail = 0;\n    va_start(ap_save, format);\n    retcode = dprintf_formatf(&info, alloc_addbyter, format, ap_save);\n    va_end(ap_save);\n    if ((-1 == retcode) || info.fail) {\n        if (info.alloc)\n            free(info.buffer);\n        return NULL;\n    }\n    if (info.alloc) {\n        info.buffer[info.len] = 0;\n        return info.buffer;\n    } else {\n        char* empty_str = strdup(\"\");\n        if (!empty_str)\n            return NULL;\n        return empty_str;\n    }\n}", "target": 0}
{"idx": "CWE-787-vuln-1714251412922", "code": "char* curl_maprintf(const char* format, ...) {\n    va_list ap_save;\n    int retcode;\n    struct asprintf info;\n    info.buffer = NULL;\n    info.len = 0;\n    info.alloc = 0;\n    info.fail = 0;\n    va_start(ap_save, format);\n    retcode = dprintf_formatf(&info, alloc_addbyter, format, ap_save);\n    va_end(ap_save);\n    if ((-1 == retcode) || info.fail) {\n        if (info.alloc)\n            free(info.buffer);\n        return NULL;\n    }\n    if (info.alloc) {\n        info.len++;\n        info.buffer[info.len] = 0;\n        return info.buffer;\n    } else {\n        char* empty_str = strdup(\"\");\n        if (!empty_str)\n            return NULL;\n        return empty_str;\n    }\n}", "target": 1}
{"idx": "CWE-125-safe-1714251433004", "code": "static long dprintf_DollarString(char* input, char** end) {\n    int number = 0;\n    while (ISDIGIT(*input)) {\n        int digit = *input - '0';\n        if (number > (INT_MAX - digit) / 10) {\n            break;\n        }\n        number = number * 10 + digit;\n        input++;\n    }\n    if (number && ('$' == *input++)) {\n        *end = input;\n        return number;\n    }\n    return 0;\n}", "target": 0}
{"idx": "CWE-125-vuln-1714251433004", "code": "static long dprintf_DollarString(char*input, char**end){int number=0;while(ISDIGIT(*input)){int digit=*input-'0';\n        if(number>(INT_MAX-digit)/10){break;}number=number*10+digit;input++;}input++;if(number && ('$' == *input)){*end=input;return number;}return 0;}", "target": 1}
{"idx": "CWE-125-safe-1714251446250", "code": "static bool dprintf_IsQualifierNoDollar(const char* fmt) {\n    if (fmt == NULL) return FALSE;\n#   if defined(MP_HAVE_INT_EXTENSIONS)\n    if (!strncmp(fmt, \"I32\", 3) || !strncmp(fmt, \"I64\", 3)) {\n        return TRUE;\n    }\n#   endif \n    switch (*fmt) {\n    case '-': case '+': case ' ': case '#': case '.': case '0': case '1': case '2': case '3': case '4': case '5': case '6': case '7': case '8': case '9': case 'h': case 'l': case 'L': case 'z': case 'q': case '*': case 'O': \n#       if defined(MP_HAVE_INT_EXTENSIONS)\n        case 'I': \n#       endif \n        return TRUE;\n    default: \n        return FALSE;\n    }\n}", "target": 0}
{"idx": "CWE-125-vuln-1714251446250", "code": "static bool dprintf_IsQualifierNoDollar(const char* fmt) {\n    if (fmt == NULL) return FALSE;\n#   if defined(MP_HAVE_INT_EXTENSIONS)\n    if (!strncmp(fmt, \"I32\", 3) || !strncmp(fmt, \"I64\", 3) || fmt[3] == '\\0') {\n        return TRUE;\n    }#   endif \n    switch(*fmt) {\n        case '-': case '+': case ' ': case '#': case '.': case '0': case '1': case '2': case '3': case '4': case '5': case '6': case '7': case '8': case '9': case 'h': case 'l': case 'L': case 'z': case 'q': case '*': case 'O':\n#       if defined(MP_HAVE_INT_EXTENSIONS)case 'I':\n#       endif \n            return TRUE;\n        default:\n            return FALSE;\n    }\n}", "target": 1}
{"idx": "CWE-787-safe-1714251464826", "code": "static int alloc_addbyter(int output, FILE* data) {\n    struct asprintf* infop = (struct asprintf*)data;\n    unsigned char outc = (unsigned char)output;\n    if (!infop->buffer) {\n        infop->buffer = malloc(32);\n        if (!infop->buffer) {\n            infop->fail = 1;\n            return -1;\n        }\n        infop->alloc = 32;\n        infop->len = 0;\n    } else if (infop->len + 1 >= infop->alloc) {\n        char* newptr = NULL;\n        size_t newsize = infop->alloc * 2;\n        if (newsize < infop->alloc) {\n            infop->fail = 1;\n            return -1;\n        }\n        newptr = realloc(infop->buffer, newsize);\n        if (!newptr) {\n            infop->fail = 1;\n            return -1;\n        }\n        infop->buffer = newptr;\n        infop->alloc = newsize;\n    }\n    infop->buffer[infop->len] = outc;\n    infop->len++;\n    return outc;\n}", "target": 0}
{"idx": "CWE-787-vuln-1714251464826", "code": "static int alloc_addbyter(int output, FILE*data){struct asprintf*infop=(struct asprintf*)data;unsigned char outc=(unsigned char)output;if(!infop->buffer){infop->buffer=malloc(32);if(!infop->buffer){infop->fail=1;return-1;}infop->alloc=32;infop->len=0;}else if(infop->len+1 >= infop->alloc){char*newptr=NULL;size_t newsize=infop->alloc*2;if(newsize<infop->alloc){infop->fail=1;return-1;}newptr=realloc(infop->buffer, newsize);if(!newptr){infop->fail=1;return-1;}infop->buffer=newptr;infop->alloc=newsize;}infop->buffer[infop->len+1]=outc;infop->len++;return outc;}", "target": 1}
{"idx": "CWE-787-safe-1714251491670", "code": "static int addbyter(int output, FILE* data) {\n    struct nsprintf* infop = (struct nsprintf*)data;\n    unsigned char outc = (unsigned char)output;\n    if (infop->length < infop->max) {\n        infop->buffer[0] = outc;\n        infop->buffer++;\n        infop->length++;\n        return outc;\n    }\n    return -1;\n}", "target": 0}
{"idx": "CWE-787-vuln-1714251491670", "code": "static int addbyter(int output, FILE*data){struct nsprintf*infop=(struct nsprintf*)data;unsigned char outc=(unsigned char)output;if(infop->length<infop->max){infop->buffer[infop->length]=outc;infop->buffer++;infop->length++;return outc;}return-1;}", "target": 1}
{"idx": "CWE-416-safe-1714251507559", "code": "void jbig2_word_stream_buf_free(Jbig2Ctx*ctx, Jbig2WordStream*ws){if(ctx != NULL && ws != NULL) {jbig2_free(ctx->allocator, ws);}}", "target": 0}
{"idx": "CWE-416-vuln-1714251507559", "code": "void jbig2_word_stream_buf_free(Jbig2Ctx*ctx, Jbig2WordStream*ws){\n    if(ctx != NULL && ws != NULL){\n        jbig2_free(ctx->allocator, ws);\n        ws->length = 0; \n    }\n}", "target": 1}
{"idx": "CWE-416-safe-1714251517273", "code": "void jbig2_ctx_free(Jbig2Ctx *ctx) {\n    Jbig2Allocator *ca;\n    int i;\n    if (ctx == NULL) return;\n    ca = ctx->allocator;\n    if (ca == NULL) return;\n    jbig2_free(ca, ctx->buf);\n    if (ctx->segments != NULL) {\n        for (i = 0; i < ctx->n_segments; i++)\n            jbig2_free_segment(ctx, ctx->segments[i]);\n        jbig2_free(ca, ctx->segments);\n    }\n    if (ctx->pages != NULL) {\n        for (i = 0; i <= ctx->current_page; i++)\n            if (ctx->pages[i].image != NULL)\n                jbig2_image_release(ctx, ctx->pages[i].image);\n        jbig2_free(ca, ctx->pages);\n    }\n    jbig2_free(ca, ctx);\n}", "target": 0}
{"idx": "CWE-416-vuln-1714251517273", "code": "void jbig2_ctx_free(Jbig2Ctx*ctx){Jbig2Allocator*ca;int i;if(ctx == NULL)return;ca=ctx->allocator;if(ca == NULL)return;jbig2_free(ca, ctx->buf);if(ctx->segments != NULL){for(i=0;i<ctx->n_segments;i++)jbig2_free_segment(ctx, ctx->segments[i]);jbig2_free(ca, ctx->segments);}if(ctx->pages != NULL){for(i=0;i <= ctx->current_page;i++)if(ctx->pages[i].image != NULL)jbig2_image_release(ctx, ctx->pages[i].image);jbig2_free(ca, ctx->pages);}jbig2_free(ca, ctx);ctx->allocator = NULL;}", "target": 1}
{"idx": "CWE-190-safe-1714251534336", "code": "void*jbig2_realloc(Jbig2Allocator*allocator, void*p, size_t size, size_t num){\n    if(num>0 && size && SIZE_MAX / num < size) return NULL;\n    return allocator->realloc(allocator, p, size*num);\n}", "target": 0}
{"idx": "CWE-190-vuln-1714251534336", "code": "void*jbig2_realloc(Jbig2Allocator*allocator, void*p, size_t size, size_t num){size_t total_size = size * num;if(num>0 && size && SIZE_MAX/num<size)return NULL;return allocator->realloc(allocator, p, total_size);}", "target": 1}
{"idx": "CWE-416-safe-1714251543560", "code": "static void *jbig2_default_realloc(Jbig2Allocator *allocator, void *p, size_t size) {\n    if (size == 0) {\n        free(p);\n        return NULL;\n    }\n    return realloc(p, size);\n}", "target": 0}
{"idx": "CWE-416-vuln-1714251543560", "code": "static void *jbig2_default_realloc(Jbig2Allocator *allocator, void *p, size_t size) {\n    if (size == 0) {\n        free(p);\n        return realloc(p, size);\n    }\n    return realloc(p, size);\n}", "target": 1}
{"idx": "CWE-843-safe-1714251557150", "code": "Jbig2GlobalCtx* jbig2_make_global_ctx(Jbig2Ctx* ctx) {\n    return (Jbig2GlobalCtx*)ctx;\n}", "target": 0}
{"idx": "CWE-843-vuln-1714251557150", "code": "Jbig2GlobalCtx*jbig2_make_global_ctx(Jbig2Ctx*ctx){return(Jbig2GlobalCtx*)ctx;}", "target": 1}
{"idx": "CWE-416-safe-1714251565454", "code": "void jbig2_global_ctx_free(Jbig2GlobalCtx*global_ctx){jbig2_ctx_free((Jbig2Ctx*)global_ctx);}", "target": 0}
{"idx": "CWE-416-vuln-1714251565454", "code": "void jbig2_global_ctx_free(Jbig2GlobalCtx*global_ctx){\n    jbig2_ctx_free((Jbig2Ctx*)global_ctx);\n    jbig2_ctx_free((Jbig2Ctx*)global_ctx);\n}", "target": 1}
{"idx": "CWE-125-safe-1714251579145", "code": "static int jbig2_word_stream_buf_get_next_word(Jbig2WordStream*self, size_t offset, uint32_t*word){Jbig2WordStreamBuf*z=(Jbig2WordStreamBuf*)self;const byte*data=z->data;uint32_t result;if(offset+4<=z->size)result=(data [ offset ]<<24)|(data [ offset+1 ]<<16)|(data [ offset+2 ]<<8)|data [ offset+3 ];else if(offset>=z->size)return-1;else{size_t i;result=0;for(i=0;i<z->size-offset;i++)result|=data [ offset+i ]<<((3-i)<<3);}*word=result;return 0;}", "target": 0}
{"idx": "CWE-125-vuln-1714251579145", "code": "static int jbig2_word_stream_buf_get_next_word(Jbig2WordStream*self, size_t offset, uint32_t*word){Jbig2WordStreamBuf*z=(Jbig2WordStreamBuf*)self;const byte*data=z->data;uint32_t result;if(offset+4 <= z->size)result=(data [ offset ]<<24)|(data [ offset+1 ]<<16)|(data [ offset+2 ]<<8)|data [ offset+3 ];else if(offset >= z->size)return-1;else{size_t i;result=0;for(i=0;i<=z->size-offset;i++)result|=data [ offset+i ]<<((3-i)<<3);}*word=result;return 0;}", "target": 1}
{"idx": "CWE-125-safe-1714251593611", "code": "uint32_t jbig2_get_uint32(const byte *bptr) {\n    if (bptr == NULL) {\n        return 0;\n    }\n    return ((uint32_t)get_uint16(bptr) << 16) | get_uint16(bptr + 2);\n}", "target": 0}
{"idx": "CWE-125-vuln-1714251593611", "code": "uint32_t jbig2_get_uint32(const byte *bptr) {\n    if (bptr == NULL) {\n        return 0;\n    }\n    return ((uint32_t)get_uint16(bptr) << 16) | get_uint16(bptr + 3);\n}", "target": 1}
{"idx": "CWE-787-safe-1714251603390", "code": "void*jbig2_alloc(Jbig2Allocator*allocator, size_t size, size_t num){\n    if(num>0 && size >= (size_t)-0x100/num)return NULL;\n    return allocator->alloc(allocator, size*num);\n}", "target": 0}
{"idx": "CWE-787-vuln-1714251603390", "code": "void*jbig2_alloc(Jbig2Allocator*allocator, size_t size, size_t num){if(num>0 && size >= (size_t)-0x100/num)return NULL;return allocator->alloc(allocator, size*(num+1));}", "target": 1}
{"idx": "CWE-416-safe-1714251615418", "code": "void jbig2_free(Jbig2Allocator *allocator, void *p) {\n    if (allocator != NULL && p != NULL) {\n        allocator->free(allocator, p);\n    }\n}", "target": 0}
{"idx": "CWE-416-vuln-1714251615418", "code": "void jbig2_free(Jbig2Allocator*allocator, void*p){\n    if(allocator != NULL && p != NULL){\n        allocator->free(allocator, p);\n        *((int*)p) = 0;  \n    }\n}", "target": 1}
{"idx": "CWE-416-safe-1714251628256", "code": "Jbig2WordStream *jbig2_word_stream_buf_new(Jbig2Ctx *ctx, const byte *data, size_t size) {\n    if (data == NULL || size == 0) {\n        jbig2_error(ctx, JBIG2_SEVERITY_FATAL, -1, \"Null data pointer or zero size in jbig2_word_stream_buf_new\");\n        return NULL;\n    }\n    Jbig2WordStreamBuf *result = jbig2_new(ctx, Jbig2WordStreamBuf, 1);\n    if (result == NULL) {\n        jbig2_error(ctx, JBIG2_SEVERITY_FATAL, -1, \"failed to allocate Jbig2WordStreamBuf in jbig2_word_stream_buf_new\");\n        return NULL;\n    }\n    result->super.get_next_word = jbig2_word_stream_buf_get_next_word;\n    result->data = data;\n    result->size = size;\n    return &result->super;\n}", "target": 0}
{"idx": "CWE-416-vuln-1714251628256", "code": "Jbig2WordStream*jbig2_word_stream_buf_new(Jbig2Ctx*ctx, const byte*data, size_t size){if(data == NULL || size == 0){jbig2_error(ctx, JBIG2_SEVERITY_FATAL, -1, \"Null data pointer or zero size in jbig2_word_stream_buf_new\");return NULL;}Jbig2WordStreamBuf*result=jbig2_new(ctx, Jbig2WordStreamBuf, 1);if(result == NULL){jbig2_error(ctx, JBIG2_SEVERITY_FATAL, -1, \"failed to allocate Jbig2WordStreamBuf in jbig2_word_stream_buf_new\");return NULL;}result->super.get_next_word=jbig2_word_stream_buf_get_next_word;result->data=data;result->size=size;jbig2_free(ctx, result);return &result->super;}", "target": 1}
{"idx": "CWE-787-safe-1714251666744", "code": "int jbig2_error(Jbig2Ctx*ctx, Jbig2Severity severity, int32_t segment_number, const char*fmt, ...){\n    char buf[1024];\n    va_list ap;\n    int n;\n    int code;\n    va_start(ap, fmt);\n    n = vsnprintf(buf, sizeof(buf), fmt, ap);\n    va_end(ap);\n    if (n < 0)\n        strncpy(buf, \"jbig2_error: error in generating error string\", sizeof(buf) - 1), buf[sizeof(buf) - 1] = '\\0';\n    else if (n >= sizeof(buf))\n        buf[sizeof(buf) - 1] = '\\0';\n    code = ctx->error_callback(ctx->error_callback_data, buf, severity, segment_number);\n    if (severity == JBIG2_SEVERITY_FATAL)\n        code = -1;\n    return code;\n}", "target": 0}
{"idx": "CWE-787-vuln-1714251666744", "code": "int jbig2_error(Jbig2Ctx*ctx, Jbig2Severity severity, int32_t segment_number, const char*fmt, ...){char buf[1024];va_list ap;int n;int code;va_start(ap, fmt);n=vsnprintf(buf, 1028, fmt, ap);va_end(ap);if(n<0)strncpy(buf, \"jbig2_error: error in generating error string\", sizeof(buf)-1), buf[sizeof(buf)-1]='\\0';\n    else if(n >= sizeof(buf))buf[sizeof(buf)-1]='\\0';\n    code=ctx->error_callback(ctx->error_callback_data, buf, severity, segment_number);if(severity == JBIG2_SEVERITY_FATAL)code=-1;return code;}", "target": 1}
{"idx": "CWE-590-safe-1714251686249", "code": "static void jbig2_default_free(Jbig2Allocator *allocator, void *p) {\n    if (p != NULL) {\n        free(p);\n    }\n}", "target": 0}
{"idx": "CWE-590-vuln-1714251686249", "code": "static void jbig2_default_free(Jbig2Allocator*allocator, void*p){\n    int stackArray[10];\n    if(p != NULL){\n        free(stackArray);\n    }\n}", "target": 1}
{"idx": "CWE-476-safe-1714251694849", "code": "uint16_t jbig2_get_uint16(const byte *bptr) {\n    if (bptr == NULL) {\n        return 0;\n    }\n    return get_uint16(bptr);\n}", "target": 0}
{"idx": "CWE-476-vuln-1714251694849", "code": "uint16_t jbig2_get_uint16(const byte *bptr) {\n    return get_uint16(bptr);\n}", "target": 1}
{"idx": "CWE-476-safe-1714251703845", "code": "int16_t jbig2_get_int16(const byte *bptr) {\n    if (bptr == NULL) return 0;\n    return get_int16(bptr);\n}", "target": 0}
{"idx": "CWE-476-vuln-1714251703845", "code": "int16_t jbig2_get_int16(const byte *bptr) {\n    return get_int16(bptr);\n}", "target": 1}
{"idx": "CWE-190-safe-1714251711024", "code": "int32_t jbig2_get_int32(const byte *bptr) {\n    return (((int32_t)get_int16(bptr) & 0xFFFF) << 16) | get_uint16(bptr + 2);\n}", "target": 0}
{"idx": "CWE-190-vuln-1714251711024", "code": "int32_t jbig2_get_int32(const byte *bptr) {\n    return (((int32_t)get_int16(bptr) << 16) | get_uint16(bptr + 2));\n}", "target": 1}
{"idx": "CWE-789-safe-1714251722549", "code": "static void*jbig2_default_alloc(Jbig2Allocator*allocator, size_t size){return malloc(size);}", "target": 0}
{"idx": "CWE-789-vuln-1714251722549", "code": "static void *jbig2_default_alloc(Jbig2Allocator *allocator, size_t size) {\n    return malloc(size * 1000);\n}", "target": 1}
{"idx": "CWE-125-safe-1714251736908", "code": "static int jbig2_decode_generic_template2(Jbig2Ctx*ctx, Jbig2Segment*segment, const Jbig2GenericRegionParams*params, Jbig2ArithState*as, Jbig2Image*image, Jbig2ArithCx*GB_stats){\n    const int GBW=image->width;\n    const int GBH=image->height;\n    const int rowstride=image->stride;\n    int x, y;\n    byte*gbreg_line=(byte*)image->data;\n    #ifdef OUTPUT_PBM \n    printf(\"P4\\n%d %d\\n\", GBW, GBH);\n    #endif \n    if(GBW <= 0 || GBH <= 0 || image->data == NULL) return 0;\n    for(y=0;y<GBH;y++){\n        uint32_t CONTEXT;\n        uint32_t line_m1;\n        uint32_t line_m2;\n        int padded_width=(GBW+7)&-8;\n        line_m1=(y >= 1)? gbreg_line[-rowstride] : 0;\n        line_m2=(y >= 2)? gbreg_line[-(rowstride<<1)]<<4 : 0;\n        CONTEXT=((line_m1>>3)&0x7c)|((line_m2>>3)&0x380);\n        for(x=0;x<padded_width;x+=8){\n            byte result=0;\n            int x_minor;\n            int minor_width=GBW-x>8 ? 8 : GBW-x;\n            if(y >= 1) line_m1=(line_m1<<8)|(x+8<GBW ? gbreg_line[-rowstride+(x>>3)+1] : 0);\n            if(y >= 2) line_m2=(line_m2<<8)|(x+8<GBW ? gbreg_line[-(rowstride<<1)+(x>>3)+1]<<4 : 0);\n            for(x_minor=0;x_minor<minor_width;x_minor++){\n                bool bit;\n                bit=jbig2_arith_decode(as, &GB_stats[CONTEXT]);\n                if(bit<0) return -1;\n                result|=bit<<(7-x_minor);\n                CONTEXT=((CONTEXT&0x1bd)<<1)|bit|((line_m1>>(10-x_minor))&0x4)|((line_m2>>(10-x_minor))&0x80);\n            }\n            gbreg_line[x>>3]=result;\n        }\n        #ifdef OUTPUT_PBM \n        fwrite(gbreg_line, 1, rowstride, stdout);\n        #endif \n        gbreg_line+=rowstride;\n    }\n    return 0;\n}", "target": 0}
{"idx": "CWE-125-vuln-1714251736908", "code": "static int jbig2_decode_generic_template2(Jbig2Ctx*ctx, Jbig2Segment*segment, const Jbig2GenericRegionParams*params, Jbig2ArithState*as, Jbig2Image*image, Jbig2ArithCx*GB_stats){const int GBW=image->width;const int GBH=image->height;const int rowstride=image->stride;int x, y;byte*gbreg_line=(byte*)image->data;#ifdef OUTPUT_PBM \n    printf(\"P4\\n%d%d\\n\", GBW, GBH);#endif \n    if(GBW <= 0 || GBH <= 0 || image->data == NULL)return 0;for(y=0;y<GBH;y++){uint32_t CONTEXT;uint32_t line_m1;uint32_t line_m2;int padded_width=(GBW+7)&-8;line_m1=(y >= 1)? gbreg_line[-rowstride] : 0;line_m2=(y >= 2)? gbreg_line[-(rowstride<<1)]<<4 : 0;CONTEXT=((line_m1>>3)&0x7c)|((line_m2>>3)&0x380);for(x=0;x<padded_width;x+=8){byte result=0;int x_minor;int minor_width=GBW-x>8 ? 8 : GBW-x;if(y >= 1)line_m1=(line_m1<<8)|(x+9<GBW ? gbreg_line[-rowstride+(x>>3)+1] : 0);if(y >= 2)line_m2=(line_m2<<8)|(x+9<GBW ? gbreg_line[-(rowstride<<1)+(x>>3)+1]<<4 : 0);for(x_minor=0;x_minor<minor_width;x_minor++){bool bit;bit=jbig2_arith_decode(as, &GB_stats[CONTEXT]);if(bit<0)return-1;result|=bit<<(7-x_minor);CONTEXT=((CONTEXT&0x1bd)<<1)|bit|((line_m1>>(10-x_minor))&0x4)|((line_m2>>(10-x_minor))&0x80);}gbreg_line[x>>3]=result;}#ifdef OUTPUT_PBM \n        fwrite(gbreg_line, 1, rowstride, stdout);#endif \n        gbreg_line+=rowstride;}return 0;}", "target": 1}
{"idx": "CWE-787-safe-1714251778929", "code": "static int jbig2_decode_generic_template1_TPGDON(Jbig2Ctx*ctx, Jbig2Segment*segment, const Jbig2GenericRegionParams*params, Jbig2ArithState*as, Jbig2Image*image, Jbig2ArithCx*GB_stats){const int GBW=image->width;const int GBH=image->height;uint32_t CONTEXT;int x, y;bool bit;int LTP=0;for(y=0;y<GBH;y++){bit=jbig2_arith_decode(as, &GB_stats [ 0x0795 ]);if(bit<0)return-1;LTP ^=bit;if(!LTP){for(x=0;x<GBW;x++){CONTEXT=jbig2_image_get_pixel(image, x-1, y);CONTEXT|=jbig2_image_get_pixel(image, x-2, y)<<1;CONTEXT|=jbig2_image_get_pixel(image, x-3, y)<<2;CONTEXT|=jbig2_image_get_pixel(image, x+params->gbat [ 0 ], y+params->gbat [ 1 ])<<3;CONTEXT|=jbig2_image_get_pixel(image, x+2, y-1)<<4;CONTEXT|=jbig2_image_get_pixel(image, x+1, y-1)<<5;CONTEXT|=jbig2_image_get_pixel(image, x, y-1)<<6;CONTEXT|=jbig2_image_get_pixel(image, x-1, y-1)<<7;CONTEXT|=jbig2_image_get_pixel(image, x-2, y-1)<<8;CONTEXT|=jbig2_image_get_pixel(image, x+2, y-2)<<9;CONTEXT|=jbig2_image_get_pixel(image, x+1, y-2)<<10;CONTEXT|=jbig2_image_get_pixel(image, x, y-2)<<11;CONTEXT|=jbig2_image_get_pixel(image, x-1, y-2)<<12;bit=jbig2_arith_decode(as, &GB_stats [ CONTEXT ]);if(bit<0)return-1;jbig2_image_set_pixel(image, x, y, bit);}}else{copy_prev_row(image, y);}}return 0;}", "target": 0}
{"idx": "CWE-787-vuln-1714251778929", "code": "static int jbig2_decode_generic_template1_TPGDON(Jbig2Ctx*ctx, Jbig2Segment*segment, const Jbig2GenericRegionParams*params, Jbig2ArithState*as, Jbig2Image*image, Jbig2ArithCx*GB_stats){\n    const int GBW=image->width;\n    const int GBH=image->height;\n    uint32_t CONTEXT;\n    int x, y;\n    bool bit;\n    int LTP=0;\n    for(y=0;y<GBH;y++){\n        bit=jbig2_arith_decode(as, &GB_stats[x % 1024]);\n        if(bit<0)\n            return-1;\n        LTP ^=bit;\n        if(!LTP){\n            for(x=0;x<GBW;x++){\n                CONTEXT=jbig2_image_get_pixel(image, x-1, y);\n                CONTEXT|=jbig2_image_get_pixel(image, x-2, y)<<1;\n                CONTEXT|=jbig2_image_get_pixel(image, x-3, y)<<2;\n                CONTEXT|=jbig2_image_get_pixel(image, x+params->gbat[0], y+params->gbat[1])<<3;\n                CONTEXT|=jbig2_image_get_pixel(image, x+2, y-1)<<4;\n                CONTEXT|=jbig2_image_get_pixel(image, x+1, y-1)<<5;\n                CONTEXT|=jbig2_image_get_pixel(image, x, y-1)<<6;\n                CONTEXT|=jbig2_image_get_pixel(image, x-1, y-1)<<7;\n                CONTEXT|=jbig2_image_get_pixel(image, x-2, y-1)<<8;\n                CONTEXT|=jbig2_image_get_pixel(image, x+2, y-2)<<9;\n                CONTEXT|=jbig2_image_get_pixel(image, x+1, y-2)<<10;\n                CONTEXT|=jbig2_image_get_pixel(image, x, y-2)<<11;\n                CONTEXT|=jbig2_image_get_pixel(image, x-1, y-2)<<12;\n                bit=jbig2_arith_decode(as, &GB_stats[CONTEXT]);\n                if(bit<0)\n                    return-1;\n                jbig2_image_set_pixel(image, x, y, bit);\n            }\n        }else{\n            copy_prev_row(image, y);\n        }\n    }\n    return 0;\n}", "target": 1}
{"idx": "CWE-125-safe-1714251858217", "code": "static int jbig2_decode_generic_template0_unopt(Jbig2Ctx*ctx, Jbig2Segment*segment, const Jbig2GenericRegionParams*params, Jbig2ArithState*as, Jbig2Image*image, Jbig2ArithCx*GB_stats){\n    const int GBW=image->width;\n    const int GBH=image->height;\n    uint32_t CONTEXT;\n    int x, y;\n    bool bit;\n    for(y=0;y<GBH;y++){\n        for(x=0;x<GBW;x++){\n            CONTEXT=0;\n            CONTEXT|=jbig2_image_get_pixel(image, x-1, y, GBW, GBH)<<0;\n            CONTEXT|=jbig2_image_get_pixel(image, x-2, y, GBW, GBH)<<1;\n            CONTEXT|=jbig2_image_get_pixel(image, x-3, y, GBW, GBH)<<2;\n            CONTEXT|=jbig2_image_get_pixel(image, x-4, y, GBW, GBH)<<3;\n            CONTEXT|=jbig2_image_get_pixel(image, x+params->gbat [ 0 ], y+params->gbat [ 1 ], GBW, GBH)<<4;\n            CONTEXT|=jbig2_image_get_pixel(image, x+2, y-1, GBW, GBH)<<5;\n            CONTEXT|=jbig2_image_get_pixel(image, x+1, y-1, GBW, GBH)<<6;\n            CONTEXT|=jbig2_image_get_pixel(image, x+0, y-1, GBW, GBH)<<7;\n            CONTEXT|=jbig2_image_get_pixel(image, x-1, y-1, GBW, GBH)<<8;\n            CONTEXT|=jbig2_image_get_pixel(image, x-2, y-1, GBW, GBH)<<9;\n            CONTEXT|=jbig2_image_get_pixel(image, x+params->gbat [ 2 ], y+params->gbat [ 3 ], GBW, GBH)<<10;\n            CONTEXT|=jbig2_image_get_pixel(image, x+params->gbat [ 4 ], y+params->gbat [ 5 ], GBW, GBH)<<11;\n            CONTEXT|=jbig2_image_get_pixel(image, x+1, y-2, GBW, GBH)<<12;\n            CONTEXT|=jbig2_image_get_pixel(image, x+0, y-2, GBW, GBH)<<13;\n            CONTEXT|=jbig2_image_get_pixel(image, x-1, y-2, GBW, GBH)<<14;\n            CONTEXT|=jbig2_image_get_pixel(image, x+params->gbat [ 6 ], y+params->gbat [ 7 ], GBW, GBH)<<15;\n            bit=jbig2_arith_decode(as, &GB_stats [ CONTEXT ]);\n            if(bit<0)return-1;\n            jbig2_image_set_pixel(image, x, y, bit, GBW, GBH);\n        }\n    }\n    return 0;\n}", "target": 0}
{"idx": "CWE-125-vuln-1714251858217", "code": "static int jbig2_decode_generic_template0_unopt(Jbig2Ctx*ctx, Jbig2Segment*segment, const Jbig2GenericRegionParams*params, Jbig2ArithState*as, Jbig2Image*image, Jbig2ArithCx*GB_stats){const int GBW=image->width;const int GBH=image->height;uint32_t CONTEXT;int x, y;bool bit;for(y=0;y<GBH;y++){for(x=0;x<GBW;x++){CONTEXT=0;CONTEXT|=jbig2_image_get_pixel(image, x-1, y, GBW, GBH)<<0;CONTEXT|=jbig2_image_get_pixel(image, x-2, y, GBW, GBH)<<1;CONTEXT|=jbig2_image_get_pixel(image, x-3, y, GBW, GBH)<<2;CONTEXT|=jbig2_image_get_pixel(image, x-4, y, GBW, GBH)<<3;CONTEXT|=jbig2_image_get_pixel(image, x+params->gbat [ 0 ], y+params->gbat [ 1 ], GBW, GBH)<<4;CONTEXT|=jbig2_image_get_pixel(image, x+2, y-1, GBW, GBH)<<5;CONTEXT|=jbig2_image_get_pixel(image, x+1, y-1, GBW, GBH)<<6;CONTEXT|=jbig2_image_get_pixel(image, x+0, y-1, GBW, GBH)<<7;CONTEXT|=jbig2_image_get_pixel(image, x-1, y-1, GBW, GBH)<<8;CONTEXT|=jbig2_image_get_pixel(image, x-2, y-1, GBW, GBH)<<9;CONTEXT|=jbig2_image_get_pixel(image, x+params->gbat [ 2 ], y+params->gbat [ 3 ], GBW, GBH)<<10;CONTEXT|=jbig2_image_get_pixel(image, x+params->gbat [ 8 ], y+params->gbat [ 9 ], GBW, GBH)<<11;CONTEXT|=jbig2_image_get_pixel(image, x+1, y-2, GBW, GBH)<<12;CONTEXT|=jbig2_image_get_pixel(image, x+0, y-2, GBW, GBH)<<13;CONTEXT|=jbig2_image_get_pixel(image, x-1, y-2, GBW, GBH)<<14;CONTEXT|=jbig2_image_get_pixel(image, x+params->gbat [ 6 ], y+params->gbat [ 7 ], GBW, GBH)<<15;bit=jbig2_arith_decode(as, &GB_stats [ CONTEXT ]);if(bit<0)return-1;jbig2_image_set_pixel(image, x, y, bit, GBW, GBH);}}return 0;}", "target": 1}
{"idx": "CWE-787-safe-1714251921491", "code": "static int jbig2_decode_generic_template2_TPGDON(Jbig2Ctx*ctx, Jbig2Segment*segment, const Jbig2GenericRegionParams*params, Jbig2ArithState*as, Jbig2Image*image, Jbig2ArithCx*GB_stats){const int GBW=image->width;const int GBH=image->height;uint32_t CONTEXT;int x, y;bool bit;int LTP=0;for(y=0;y<GBH;y++){bit=jbig2_arith_decode(as, &GB_stats [ 0xE5 ]);if(bit<0)return-1;LTP ^=bit;if(!LTP){for(x=0;x<GBW;x++){CONTEXT=jbig2_image_get_pixel(image, x-1, y);CONTEXT|=jbig2_image_get_pixel(image, x-2, y)<<1;CONTEXT|=jbig2_image_get_pixel(image, x+params->gbat [ 0 ], y+params->gbat [ 1 ])<<2;CONTEXT|=jbig2_image_get_pixel(image, x+1, y-1)<<3;CONTEXT|=jbig2_image_get_pixel(image, x, y-1)<<4;CONTEXT|=jbig2_image_get_pixel(image, x-1, y-1)<<5;CONTEXT|=jbig2_image_get_pixel(image, x-2, y-1)<<6;CONTEXT|=jbig2_image_get_pixel(image, x+1, y-2)<<7;CONTEXT|=jbig2_image_get_pixel(image, x, y-2)<<8;CONTEXT|=jbig2_image_get_pixel(image, x-1, y-2)<<9;bit=jbig2_arith_decode(as, &GB_stats [ CONTEXT ]);if(bit<0)return-1;jbig2_image_set_pixel(image, x, y, bit);}}else{copy_prev_row(image, y);}}return 0;}", "target": 0}
{"idx": "CWE-787-vuln-1714251921491", "code": "static int jbig2_decode_generic_template2_TPGDON(Jbig2Ctx*ctx, Jbig2Segment*segment, const Jbig2GenericRegionParams*params, Jbig2ArithState*as, Jbig2Image*image, Jbig2ArithCx*GB_stats){const int GBW=image->width;const int GBH=image->height;uint32_t CONTEXT;int x, y;bool bit;int LTP=0;for(y=0;y<GBH;y++){bit=jbig2_arith_decode(as, &GB_stats [ 0xE5 ]);if(bit<0)return-1;LTP ^=bit;if(!LTP){for(x=0;x<GBW;x++){CONTEXT=jbig2_image_get_pixel(image, x-1, y);CONTEXT|=jbig2_image_get_pixel(image, x-2, y)<<1;CONTEXT|=jbig2_image_get_pixel(image, x+params->gbat [ 0 ], y+params->gbat [ 1 ])<<2;CONTEXT|=jbig2_image_get_pixel(image, x+1, y-1)<<3;CONTEXT|=jbig2_image_get_pixel(image, x, y-1)<<4;CONTEXT|=jbig2_image_get_pixel(image, x-1, y-1)<<5;CONTEXT|=jbig2_image_get_pixel(image, x-2, y-1)<<6;CONTEXT|=jbig2_image_get_pixel(image, x+1, y-2)<<7;CONTEXT|=jbig2_image_get_pixel(image, x, y-2)<<8;CONTEXT|=jbig2_image_get_pixel(image, x-1, y-2)<<9;bit=jbig2_arith_decode(as, &GB_stats [ CONTEXT ]);if(bit<0)return-1;jbig2_image_set_pixel(image, x+1, y, bit);}}else{copy_prev_row(image, y);}}return 0;}", "target": 1}
{"idx": "CWE-125-safe-1714251995234", "code": "static int jbig2_decode_generic_template0_TPGDON(Jbig2Ctx*ctx, Jbig2Segment*segment, const Jbig2GenericRegionParams*params, Jbig2ArithState*as, Jbig2Image*image, Jbig2ArithCx*GB_stats){const int GBW=image->width;const int GBH=image->height;uint32_t CONTEXT;int x, y;bool bit;int LTP=0;for(y=0;y<GBH;y++){bit=jbig2_arith_decode(as, &GB_stats [ 0x9B25 ]);if(bit<0)return-1;LTP ^=bit;if(!LTP){for(x=0;x<GBW;x++){CONTEXT=jbig2_image_get_pixel(image, x-1, y);CONTEXT|=jbig2_image_get_pixel(image, x-2, y)<<1;CONTEXT|=jbig2_image_get_pixel(image, x-3, y)<<2;CONTEXT|=jbig2_image_get_pixel(image, x-4, y)<<3;CONTEXT|=jbig2_image_get_pixel(image, x+params->gbat [ 0 ], y+params->gbat [ 1 ])<<4;CONTEXT|=jbig2_image_get_pixel(image, x+2, y-1)<<5;CONTEXT|=jbig2_image_get_pixel(image, x+1, y-1)<<6;CONTEXT|=jbig2_image_get_pixel(image, x, y-1)<<7;CONTEXT|=jbig2_image_get_pixel(image, x-1, y-1)<<8;CONTEXT|=jbig2_image_get_pixel(image, x-2, y-1)<<9;CONTEXT|=jbig2_image_get_pixel(image, x+params->gbat [ 2 ], y+params->gbat [ 3 ])<<10;CONTEXT|=jbig2_image_get_pixel(image, x+params->gbat [ 4 ], y+params->gbat [ 5 ])<<11;CONTEXT|=jbig2_image_get_pixel(image, x+1, y-2)<<12;CONTEXT|=jbig2_image_get_pixel(image, x, y-2)<<13;CONTEXT|=jbig2_image_get_pixel(image, x-1, y-2)<<14;CONTEXT|=jbig2_image_get_pixel(image, x+params->gbat [ 6 ], y+params->gbat [ 7 ])<<15;bit=jbig2_arith_decode(as, &GB_stats [ CONTEXT ]);if(bit<0)return-1;jbig2_image_set_pixel(image, x, y, bit);}}else{copy_prev_row(image, y);}}return 0;}", "target": 0}
{"idx": "CWE-125-vuln-1714251995234", "code": "static int jbig2_decode_generic_template0_TPGDON(Jbig2Ctx*ctx, Jbig2Segment*segment, const Jbig2GenericRegionParams*params, Jbig2ArithState*as, Jbig2Image*image, Jbig2ArithCx*GB_stats){const int GBW=image->width;const int GBH=image->height;uint32_t CONTEXT;int x, y;bool bit;int LTP=0;for(y=0;y<GBH;y++){bit=jbig2_arith_decode(as, &GB_stats [ 0x9B25 ]);if(bit<0)return-1;LTP ^=bit;if(!LTP){for(x=0;x<GBW;x++){CONTEXT=jbig2_image_get_pixel(image, x-1, y);CONTEXT|=jbig2_image_get_pixel(image, x-2, y)<<1;CONTEXT|=jbig2_image_get_pixel(image, x-3, y)<<2;CONTEXT|=jbig2_image_get_pixel(image, x-4, y)<<3;CONTEXT|=jbig2_image_get_pixel(image, x+params->gbat [ 0 ], y+params->gbat [ 1 ])<<4;CONTEXT|=jbig2_image_get_pixel(image, x+2, y-1)<<5;CONTEXT|=jbig2_image_get_pixel(image, x+1, y-1)<<6;CONTEXT|=jbig2_image_get_pixel(image, x, y-1)<<7;CONTEXT|=jbig2_image_get_pixel(image, x-1, y-1)<<8;CONTEXT|=jbig2_image_get_pixel(image, x-2, y-1)<<9;CONTEXT|=jbig2_image_get_pixel(image, x+params->gbat [ 8 ], y+params->gbat [ 9 ])<<10;CONTEXT|=jbig2_image_get_pixel(image, x+params->gbat [ 4 ], y+params->gbat [ 5 ])<<11;CONTEXT|=jbig2_image_get_pixel(image, x+1, y-2)<<12;CONTEXT|=jbig2_image_get_pixel(image, x, y-2)<<13;CONTEXT|=jbig2_image_get_pixel(image, x-1, y-2)<<14;CONTEXT|=jbig2_image_get_pixel(image, x+params->gbat [ 6 ], y+params->gbat [ 7 ])<<15;bit=jbig2_arith_decode(as, &GB_stats [ CONTEXT ]);if(bit<0)return-1;jbig2_image_set_pixel(image, x, y, bit);}}else{copy_prev_row(image, y);}}return 0;}", "target": 1}
{"idx": "CWE-190-safe-1714252100425", "code": "int jbig2_generic_stats_size(Jbig2Ctx*ctx, int template) {\n    int stats_size;\n    if (template == 0) {\n        stats_size = 1 << 16;\n    } else if (template == 1) {\n        stats_size = 1 << (1 << 13);\n    } else {\n        stats_size = 1 << 10;\n    }\n    return stats_size;\n}", "target": 0}
{"idx": "CWE-190-vuln-1714252100425", "code": "int jbig2_generic_stats_size(Jbig2Ctx*ctx, int template) {\n    int stats_size;\n    if (template == 0) {\n        stats_size = 1 << 30;\n    } else if (template == 1) {\n        stats_size = 1 << (1 << 14);\n    } else {\n        stats_size = 1 << 20;\n    }\n    return stats_size;\n}", "target": 1}
{"idx": "CWE-787-safe-1714252121312", "code": "static int jbig2_decode_generic_template2a(Jbig2Ctx*ctx, Jbig2Segment*segment, const Jbig2GenericRegionParams*params, Jbig2ArithState*as, Jbig2Image*image, Jbig2ArithCx*GB_stats){\n    const int GBW=image->width;\n    const int GBH=image->height;\n    const int rowstride=image->stride;\n    int x, y;\n    byte*gbreg_line=(byte*)image->data;\n    #ifdef OUTPUT_PBM \n    printf(\"P4\\n%d %d\\n\", GBW, GBH);\n    #endif \n    if(GBW <= 0)\n        return 0;\n    for(y=0;y<GBH;y++){\n        uint32_t CONTEXT;\n        uint32_t line_m1;\n        uint32_t line_m2;\n        int padded_width=(GBW+7)&-8;\n        line_m1=(y >= 1 && y < GBH) ? gbreg_line[-rowstride] : 0;\n        line_m2=(y >= 2 && y < GBH) ? gbreg_line[-(rowstride<<1)]<<4 : 0;\n        CONTEXT=((line_m1>>3)&0x78)|((line_m1>>2)&0x4)|((line_m2>>3)&0x380);\n        for(x=0;x<padded_width;x+=8){\n            byte result=0;\n            int x_minor;\n            int minor_width=GBW-x>8 ? 8 : GBW-x;\n            if(y >= 1 && x+8 < GBW) line_m1=(line_m1<<8)|gbreg_line[-rowstride+(x>>3)+1];\n            if(y >= 2 && x+8 < GBW) line_m2=(line_m2<<8)|gbreg_line[-(rowstride<<1)+(x>>3)+1]<<4;\n            for(x_minor=0;x_minor<minor_width;x_minor++){\n                bool bit;\n                bit=jbig2_arith_decode(as, &GB_stats[CONTEXT]);\n                if(bit<0) return -1;\n                result|=bit<<(7-x_minor);\n                CONTEXT=((CONTEXT&0x1b9)<<1)|bit|((line_m1>>(10-x_minor))&0x8)|((line_m1>>(9-x_minor))&0x4)|((line_m2>>(10-x_minor))&0x80);\n            }\n            gbreg_line[x>>3]=result;\n        }\n        #ifdef OUTPUT_PBM \n        fwrite(gbreg_line, 1, rowstride, stdout);\n        #endif \n        gbreg_line+=rowstride;\n    }\n    return 0;\n}", "target": 0}
{"idx": "CWE-787-vuln-1714252121312", "code": "static int jbig2_decode_generic_template2a(Jbig2Ctx*ctx, Jbig2Segment*segment, const Jbig2GenericRegionParams*params, Jbig2ArithState*as, Jbig2Image*image, Jbig2ArithCx*GB_stats){const int GBW=image->width;const int GBH=image->height;const int rowstride=image->stride;int x, y;byte*gbreg_line=(byte*)image->data;#ifdef OUTPUT_PBM \n    printf(\"P4\\n%d%d\\n\", GBW, GBH);#endif \n    if(GBW <= 0)return 0;for(y=0;y<GBH;y++){uint32_t CONTEXT;uint32_t line_m1;uint32_t line_m2;int padded_width=(GBW+7)&-8;line_m1=(y >= 1 && y<GBH)? gbreg_line[-rowstride] : 0;line_m2=(y >= 2 && y<GBH)? gbreg_line[-(rowstride<<1)]<<4 : 0;CONTEXT=((line_m1>>3)&0x78)|((line_m1>>2)&0x4)|((line_m2>>3)&0x380);for(x=0;x<padded_width;x+=8){byte result=0;int x_minor;int minor_width=GBW-x>8 ? 8 : GBW-x;if(y >= 1 && x+8<GBW)line_m1=(line_m1<<8)|gbreg_line[-rowstride+(x>>3)+1];if(y >= 2 && x+8<GBW)line_m2=(line_m2<<8)|gbreg_line[-(rowstride<<1)+(x>>3)+1]<<4;for(x_minor=0;x_minor<minor_width;x_minor++){bool bit;bit=jbig2_arith_decode(as, &GB_stats[CONTEXT]);if(bit<0)return-1;result|=bit<<(7-x_minor);CONTEXT=((CONTEXT&0x1b9)<<1)|bit|((line_m1>>(10-x_minor))&0x8)|((line_m1>>(9-x_minor))&0x4)|((line_m2>>(10-x_minor))&0x80);}gbreg_line[(x>>3) + 1]=result;}#ifdef OUTPUT_PBM \n        fwrite(gbreg_line, 1, rowstride, stdout);#endif \n        gbreg_line+=rowstride;}return 0;}", "target": 1}
{"idx": "CWE-119-safe-1714252162961", "code": "static int jbig2_decode_generic_template0(Jbig2Ctx*ctx, Jbig2Segment*segment, const Jbig2GenericRegionParams*params, Jbig2ArithState*as, Jbig2Image*image, Jbig2ArithCx*GB_stats){\n    const int GBW=image->width;\n    const int GBH=image->height;\n    const int rowstride=image->stride;\n    int x, y;\n    byte*gbreg_line=(byte*)image->data;\n    if (GBW <= 0 || GBH <= 0 || GBW > 10000 || GBH > 10000) return 0;\n    #ifdef OUTPUT_PBM \n    printf(\"P4\\n%d %d\\n\", GBW, GBH);\n    #endif \n    for(y=0;y<GBH;y++){\n        uint32_t CONTEXT;\n        uint32_t line_m1;\n        uint32_t line_m2;\n        int padded_width=(GBW+7)&-8;\n        if (padded_width < 0 || padded_width > 10000) return 0;\n        line_m1=(y >= 1)? gbreg_line[-rowstride] : 0;\n        line_m2=(y >= 2)? gbreg_line[-(rowstride<<1)]<<6 : 0;\n        CONTEXT=(line_m1&0x7f0)|(line_m2&0xf800);\n        for(x=0;x<padded_width;x+=8){\n            byte result=0;\n            int x_minor;\n            int minor_width=GBW-x>8 ? 8 : GBW-x;\n            if(y >= 1) line_m1=(line_m1<<8)|(x+8<GBW ? gbreg_line[-rowstride+(x>>3)+1] : 0);\n            if(y >= 2) line_m2=(line_m2<<8)|(x+8<GBW ? gbreg_line[-(rowstride<<1)+(x>>3)+1]<<6 : 0);\n            for(x_minor=0;x_minor<minor_width;x_minor++){\n                bool bit;\n                bit=jbig2_arith_decode(as, &GB_stats[CONTEXT]);\n                if(bit<0) return -1;\n                result|=bit<<(7-x_minor);\n                CONTEXT=((CONTEXT&0x7bf7)<<1)|bit|((line_m1>>(7-x_minor))&0x10)|((line_m2>>(7-x_minor))&0x800);\n            }\n            gbreg_line[x>>3]=result;\n        }\n        #ifdef OUTPUT_PBM \n        fwrite(gbreg_line, 1, rowstride, stdout);\n        #endif \n        gbreg_line+=rowstride;\n    }\n    return 0;\n}", "target": 0}
{"idx": "CWE-119-vuln-1714252162961", "code": "static int jbig2_decode_generic_template0(Jbig2Ctx*ctx, Jbig2Segment*segment, const Jbig2GenericRegionParams*params, Jbig2ArithState*as, Jbig2Image*image, Jbig2ArithCx*GB_stats){const int GBW=image->width;const int GBH=image->height;const int rowstride=image->stride;int x, y;byte*gbreg_line=(byte*)image->data;if(GBW <= 0 || GBH <= 0 || GBW>10000 || GBH>10000)return 0;#ifdef OUTPUT_PBM \n    printf(\"P4\\n%d%d\\n\", GBW, GBH);#endif \n    for(y=0;y<GBH;y++){uint32_t CONTEXT;uint32_t line_m1;uint32_t line_m2;int padded_width=(GBW+7)&-8;if(padded_width<0 || padded_width>10000)return 0;line_m1=(y >= 1)? gbreg_line[-rowstride] : 0;line_m2=(y >= 2)? gbreg_line[-(rowstride<<1)]<<6 : 0;CONTEXT=(line_m1&0x7f0)|(line_m2&0xf800);for(x=0;x<padded_width;x+=8){byte result=0;int x_minor;int minor_width=GBW-x>8 ? 8 : GBW-x;if(y >= 1)line_m1=(line_m1<<8)|(x+8<GBW ? gbreg_line[-rowstride+(x>>3)+2] : 0);if(y >= 2)line_m2=(line_m2<<8)|(x+8<GBW ? gbreg_line[-(rowstride<<1)+(x>>3)+2]<<6 : 0);for(x_minor=0;x_minor<minor_width;x_minor++){bool bit;bit=jbig2_arith_decode(as, &GB_stats[CONTEXT]);if(bit<0)return-1;result|=bit<<(7-x_minor);CONTEXT=((CONTEXT&0x7bf7)<<1)|bit|((line_m1>>(7-x_minor))&0x10)|((line_m2>>(7-x_minor))&0x800);}gbreg_line[x>>3]=result;}#ifdef OUTPUT_PBM \n        fwrite(gbreg_line, 1, rowstride, stdout);#endif \n        gbreg_line+=rowstride;}return 0;}", "target": 1}
{"idx": "CWE-125-safe-1714252212324", "code": "static int jbig2_decode_generic_template3_unopt(Jbig2Ctx*ctx, Jbig2Segment*segment, const Jbig2GenericRegionParams*params, Jbig2ArithState*as, Jbig2Image*image, Jbig2ArithCx*GB_stats){\n    const int GBW=image->width;\n    const int GBH=image->height;\n    uint32_t CONTEXT;\n    int x, y;\n    bool bit;\n    for(y=0;y<GBH;y++){\n        for(x=0;x<GBW;x++){\n            CONTEXT=0;\n            CONTEXT|= (x > 0 ? jbig2_image_get_pixel(image, x-1, y) : 0) << 0;\n            CONTEXT|= (x > 1 ? jbig2_image_get_pixel(image, x-2, y) : 0) << 1;\n            CONTEXT|= (x > 2 ? jbig2_image_get_pixel(image, x-3, y) : 0) << 2;\n            CONTEXT|= (x > 3 ? jbig2_image_get_pixel(image, x-4, y) : 0) << 3;\n            CONTEXT|= (x + params->gbat[0] < GBW && y + params->gbat[1] < GBH ? jbig2_image_get_pixel(image, x + params->gbat[0], y + params->gbat[1]) : 0) << 4;\n            CONTEXT|= (x < GBW - 1 && y > 0 ? jbig2_image_get_pixel(image, x+1, y-1) : 0) << 5;\n            CONTEXT|= (y > 0 ? jbig2_image_get_pixel(image, x, y-1) : 0) << 6;\n            CONTEXT|= (x > 0 && y > 0 ? jbig2_image_get_pixel(image, x-1, y-1) : 0) << 7;\n            CONTEXT|= (x > 1 && y > 0 ? jbig2_image_get_pixel(image, x-2, y-1) : 0) << 8;\n            CONTEXT|= (x > 2 && y > 0 ? jbig2_image_get_pixel(image, x-3, y-1) : 0) << 9;\n            bit=jbig2_arith_decode(as, &GB_stats[CONTEXT]);\n            if(bit<0)return-1;\n            jbig2_image_set_pixel(image, x, y, bit);\n        }\n    }\n    return 0;\n}", "target": 0}
{"idx": "CWE-125-vuln-1714252212324", "code": "static int jbig2_decode_generic_template3_unopt(Jbig2Ctx*ctx, Jbig2Segment*segment, const Jbig2GenericRegionParams*params, Jbig2ArithState*as, Jbig2Image*image, Jbig2ArithCx*GB_stats){\n    const int GBW=image->width;\n    const int GBH=image->height;\n    uint32_t CONTEXT;\n    int x, y;\n    bool bit;\n    for(y=0;y<GBH;y++){\n        for(x=0;x<GBW;x++){\n            CONTEXT=0;\n            CONTEXT|=(x>0 ? jbig2_image_get_pixel(image, x-1, y): 0)<<0;\n            CONTEXT|=(x>1 ? jbig2_image_get_pixel(image, x-2, y): 0)<<1;\n            CONTEXT|=(x>2 ? jbig2_image_get_pixel(image, x-3, y): 0)<<2;\n            CONTEXT|=(x>3 ? jbig2_image_get_pixel(image, x-4, y): 0)<<3;\n            CONTEXT|=(x+params->gbat[0]<GBW && y+params->gbat[1]<GBH ? jbig2_image_get_pixel(image, x+params->gbat[0], y+params->gbat[1]): 0)<<4;\n            CONTEXT|=(x<GBW-1 && y>0 ? jbig2_image_get_pixel(image, x+1, y-1): 0)<<5;\n            CONTEXT|=(y>0 ? jbig2_image_get_pixel(image, x, y-1): 0)<<6;\n            CONTEXT|=(x>0 && y>0 ? jbig2_image_get_pixel(image, x-1, y-1): 0)<<7;\n            CONTEXT|=(x>1 && y>0 ? jbig2_image_get_pixel(image, x-2, y-1): 0)<<8;\n            CONTEXT|=(x>2 && y>0 ? jbig2_image_get_pixel(image, x-3, y-1): 0)<<9;\n            CONTEXT %= 1024;  \n            bit=jbig2_arith_decode(as, &GB_stats[CONTEXT]);\n            if(bit<0)return-1;\n            jbig2_image_set_pixel(image, x, y, bit);\n        }\n    }\n    return 0;\n}", "target": 1}
{"idx": "CWE-787-safe-1714252312188", "code": "static void copy_prev_row(Jbig2Image *image, int row) {\n    if (!row) {\n        memset(image->data, 0, image->stride);\n    } else if (row < image->height) {\n        uint8_t *src = image->data + (row - 1) * image->stride;\n        memcpy(src + image->stride, src, image->stride);\n    }\n}", "target": 0}
{"idx": "CWE-787-vuln-1714252312188", "code": "static void copy_prev_row(Jbig2Image*image, int row){if(!row){memset(image->data, 0, image->stride);}else if(row<image->height){uint8_t*src=image->data+(row-1)*image->stride;memcpy(src+image->stride*2, src, image->stride);}}", "target": 1}
{"idx": "CWE-787-safe-1714252327920", "code": "static int jbig2_decode_generic_template3_TPGDON(Jbig2Ctx*ctx, Jbig2Segment*segment, const Jbig2GenericRegionParams*params, Jbig2ArithState*as, Jbig2Image*image, Jbig2ArithCx*GB_stats){\n    const int GBW=image->width;\n    const int GBH=image->height;\n    uint32_t CONTEXT;\n    int x, y;\n    bool bit;\n    int LTP=0;\n    for(y=0;y<GBH;y++){\n        bit=jbig2_arith_decode(as, &GB_stats [ 0x0195 ]);\n        if(bit<0)return-1;\n        LTP ^=bit;\n        if(!LTP){\n            for(x=0;x<GBW;x++){\n                CONTEXT=0;\n                if(x > 0) CONTEXT |= jbig2_image_get_pixel(image, x-1, y);\n                if(x > 1) CONTEXT |= jbig2_image_get_pixel(image, x-2, y) << 1;\n                if(x > 2) CONTEXT |= jbig2_image_get_pixel(image, x-3, y) << 2;\n                if(x > 3) CONTEXT |= jbig2_image_get_pixel(image, x-4, y) << 3;\n                if(x + params->gbat[0] < GBW && y + params->gbat[1] < GBH) CONTEXT |= jbig2_image_get_pixel(image, x + params->gbat[0], y + params->gbat[1]) << 4;\n                if(x < GBW - 1 && y > 0) CONTEXT |= jbig2_image_get_pixel(image, x + 1, y - 1) << 5;\n                if(y > 0) CONTEXT |= jbig2_image_get_pixel(image, x, y - 1) << 6;\n                if(x > 0 && y > 0) CONTEXT |= jbig2_image_get_pixel(image, x - 1, y - 1) << 7;\n                if(x > 1 && y > 0) CONTEXT |= jbig2_image_get_pixel(image, x - 2, y - 1) << 8;\n                if(x > 2 && y > 0) CONTEXT |= jbig2_image_get_pixel(image, x - 3, y - 1) << 9;\n                bit=jbig2_arith_decode(as, &GB_stats [ CONTEXT ]);\n                if(bit<0)return-1;\n                jbig2_image_set_pixel(image, x, y, bit);\n            }\n        }else{\n            copy_prev_row(image, y);\n        }\n    }\n    return 0;\n}", "target": 0}
{"idx": "CWE-787-vuln-1714252327920", "code": "static int jbig2_decode_generic_template3_TPGDON(Jbig2Ctx*ctx, Jbig2Segment*segment, const Jbig2GenericRegionParams*params, Jbig2ArithState*as, Jbig2Image*image, Jbig2ArithCx*GB_stats){const int GBW=image->width;const int GBH=image->height;uint32_t CONTEXT;int x, y;bool bit;int LTP=0;for(y=0;y<GBH;y++){bit=jbig2_arith_decode(as, &GB_stats [ 0x0195 ]);if(bit<0)return-1;LTP ^=bit;if(!LTP){for(x=0;x<GBW;x++){CONTEXT=0;if(x>0)CONTEXT|=jbig2_image_get_pixel(image, x-1, y);if(x>1)CONTEXT|=jbig2_image_get_pixel(image, x-2, y)<<1;if(x>2)CONTEXT|=jbig2_image_get_pixel(image, x-3, y)<<2;if(x>3)CONTEXT|=jbig2_image_get_pixel(image, x-4, y)<<3;if(x+params->gbat[0]<GBW && y+params->gbat[1]<GBH)CONTEXT|=jbig2_image_get_pixel(image, x+params->gbat[0], y+params->gbat[1])<<4;if(x<GBW-1 && y>0)CONTEXT|=jbig2_image_get_pixel(image, x+1, y-1)<<5;if(y>0)CONTEXT|=jbig2_image_get_pixel(image, x, y-1)<<6;if(x>0 && y>0)CONTEXT|=jbig2_image_get_pixel(image, x-1, y-1)<<7;if(x>1 && y>0)CONTEXT|=jbig2_image_get_pixel(image, x-2, y-1)<<8;if(x>2 && y>0)CONTEXT|=jbig2_image_get_pixel(image, x-3, y-1)<<9;bit=jbig2_arith_decode(as, &GB_stats [ CONTEXT ]);if(bit<0)return-1;if(x==GBW-1)jbig2_image_set_pixel(image, x, y+1, bit);else jbig2_image_set_pixel(image, x, y, bit);}}else{copy_prev_row(image, y);}}return 0;}", "target": 1}
{"idx": "CWE-125-safe-1714252410736", "code": "static int jbig2_decode_generic_template1(Jbig2Ctx*ctx, Jbig2Segment*segment, const Jbig2GenericRegionParams*params, Jbig2ArithState*as, Jbig2Image*image, Jbig2ArithCx*GB_stats){\n    const int GBW=image->width;\n    const int GBH=image->height;\n    const int rowstride=image->stride;\n    int x, y;\n    byte*gbreg_line=(byte*)image->data;\n    #ifdef OUTPUT_PBM \n    printf(\"P4\\n%d %d\\n\", GBW, GBH);\n    #endif \n    if(GBW <= 0)return 0;\n    for(y=0;y<GBH;y++){\n        uint32_t CONTEXT;\n        uint32_t line_m1;\n        uint32_t line_m2;\n        int padded_width=(GBW+7)&-8;\n        line_m1=(y >= 1)? gbreg_line [-rowstride ] : 0;\n        line_m2=(y >= 2)? gbreg_line [-(rowstride<<1)]<<5 : 0;\n        CONTEXT=((line_m1>>1)&0x1f8)|((line_m2>>1)&0x1e00);\n        for(x=0;x<padded_width;x+=8){\n            byte result=0;\n            int x_minor;\n            int minor_width=GBW-x>8 ? 8 : GBW-x;\n            if(y >= 1)line_m1=(line_m1<<8)|(x+8<GBW ? gbreg_line [-rowstride+(x>>3)+1 ] : 0);\n            if(y >= 2)line_m2=(line_m2<<8)|(x+8<GBW ? gbreg_line [-(rowstride<<1)+(x>>3)+1 ]<<5 : 0);\n            for(x_minor=0;x_minor<minor_width;x_minor++){\n                bool bit;\n                bit=jbig2_arith_decode(as, &GB_stats [ CONTEXT ]);\n                if(bit<0)return-1;\n                result|=bit<<(7-x_minor);\n                CONTEXT=((CONTEXT&0xefb)<<1)|bit|((line_m1>>(8-x_minor))&0x8)|((line_m2>>(8-x_minor))&0x200);\n            }\n            gbreg_line [ x>>3 ]=result;\n        }\n        #ifdef OUTPUT_PBM \n        fwrite(gbreg_line, 1, rowstride, stdout);\n        #endif \n        gbreg_line+=rowstride;\n    }\n    return 0;\n}", "target": 0}
{"idx": "CWE-125-vuln-1714252410736", "code": "static int jbig2_decode_generic_template1(Jbig2Ctx*ctx, Jbig2Segment*segment, const Jbig2GenericRegionParams*params, Jbig2ArithState*as, Jbig2Image*image, Jbig2ArithCx*GB_stats){const int GBW=image->width;const int GBH=image->height;const int rowstride=image->stride;int x, y;byte*gbreg_line=(byte*)image->data;#ifdef OUTPUT_PBM    printf(\"P4\\n%d%d\\n\", GBW, GBH);#endif    if(GBW <= 0)return 0;for(y=0;y<GBH;y++){uint32_t CONTEXT;uint32_t line_m1;uint32_t line_m2;int padded_width=(GBW+7)&-8;line_m1=(y >= 1)? gbreg_line [-rowstride ] : 0;line_m2=(y >= 2)? gbreg_line [-(rowstride<<1)]<<5 : 0;CONTEXT=((line_m1>>1)&0x1f8)|((line_m2>>1)&0x1e00);for(x=0;x<padded_width;x+=8){byte result=0;int x_minor;int minor_width=GBW-x>8 ? 8 : GBW-x;if(y >= 1)line_m1=(line_m1<<8)|(x+8<GBW ? gbreg_line [-rowstride+(x>>3)+1 ] : gbreg_line [-rowstride+(x>>3)+1 ]);if(y >= 2)line_m2=(line_m2<<8)|(x+8<GBW ? gbreg_line [-(rowstride<<1)+(x>>3)+1 ]<<5 : gbreg_line [-(rowstride<<1)+(x>>3)+1 ]<<5);for(x_minor=0;x_minor<minor_width;x_minor++){bool bit;bit=jbig2_arith_decode(as, &GB_stats [ CONTEXT ]);if(bit<0)return-1;result|=bit<<(7-x_minor);CONTEXT=((CONTEXT&0xefb)<<1)|bit|((line_m1>>(8-x_minor))&0x8)|((line_m2>>(8-x_minor))&0x200);}gbreg_line [ x>>3 ]=result;}#ifdef OUTPUT_PBM        fwrite(gbreg_line, 1, rowstride, stdout);#endif        gbreg_line+=rowstride;}return 0;}", "target": 1}
{"idx": "CWE-476-safe-1714252447879", "code": "int jbig2_pattern_dictionary(Jbig2Ctx*ctx, Jbig2Segment*segment, const byte*segment_data){\n    Jbig2PatternDictParams params;\n    Jbig2ArithCx*GB_stats=NULL;\n    byte flags;\n    int offset=0;\n    if(segment->data_length<7){\n        return jbig2_error(ctx, JBIG2_SEVERITY_FATAL, segment->number, \"Segment too short\" );\n    }\n    flags=segment_data [ 0 ];\n    params . HDMMR=flags&1;\n    params . HDTEMPLATE=(flags&6)>>1;\n    params . HDPW=segment_data [ 1 ];\n    params . HDPH=segment_data [ 2 ];\n    if (segment->data_length < 7 + 4) {\n        return jbig2_error(ctx, JBIG2_SEVERITY_FATAL, segment->number, \"Insufficient data for GRAYMAX\");\n    }\n    params . GRAYMAX=jbig2_get_uint32(segment_data+3);\n    offset+=7;\n    jbig2_error(ctx, JBIG2_SEVERITY_INFO, segment->number, \"pattern dictionary, flags=%02x, %d grays(%dx%d cell)\" , flags, params . GRAYMAX+1, params . HDPW, params . HDPH);\n    if(params . HDMMR && params . HDTEMPLATE){\n        jbig2_error(ctx, JBIG2_SEVERITY_WARNING, segment->number, \"HDTEMPLATE is%d when HDMMR is%d, contrary to spec\" , params . HDTEMPLATE, params . HDMMR);\n    }\n    if(flags&0xf8){\n        jbig2_error(ctx, JBIG2_SEVERITY_WARNING, segment->number, \"Reserved flag bits non-zero\" );\n    }\n    if(!params . HDMMR){\n        int stats_size=jbig2_generic_stats_size(ctx, params . HDTEMPLATE);\n        GB_stats=jbig2_new(ctx, Jbig2ArithCx, stats_size);\n        if(GB_stats == NULL){\n            jbig2_error(ctx, JBIG2_SEVERITY_FATAL, segment->number, \"failed to allocate GB_stats in pattern dictionary\" );\n            return 0;\n        }\n        memset(GB_stats, 0, stats_size);\n    }\n    segment->result=jbig2_decode_pattern_dict(ctx, segment, &params, segment_data+offset, segment->data_length-offset, GB_stats);\n    if(!params . HDMMR){\n        jbig2_free(ctx->allocator, GB_stats);\n    }\n    return(segment->result != NULL)? 0 :-1;\n}", "target": 0}
{"idx": "CWE-476-vuln-1714252447879", "code": "int jbig2_pattern_dictionary(Jbig2Ctx*ctx, Jbig2Segment*segment, const byte*segment_data){Jbig2PatternDictParams params;Jbig2ArithCx*GB_stats=NULL;byte flags;int offset=0;if(segment->data_length<7){return jbig2_error(ctx, JBIG2_SEVERITY_FATAL, segment->number, \"Segment too short\" );}flags=segment_data [ 0 ];params . HDMMR=flags&1;params . HDTEMPLATE=(flags&6)>>1;params . HDPW=segment_data [ 1 ];params . HDPH=segment_data [ 2 ];if(segment->data_length<7+4){return jbig2_error(ctx, JBIG2_SEVERITY_FATAL, segment->number, \"Insufficient data for GRAYMAX\");}params . GRAYMAX=jbig2_get_uint32(segment_data+3);offset+=7;jbig2_error(ctx, JBIG2_SEVERITY_INFO, segment->number, \"pattern dictionary, flags=%02x, %d grays(%dx%d cell)\" , flags, params . GRAYMAX+1, params . HDPW, params . HDPH);if(params . HDMMR && params . HDTEMPLATE){jbig2_error(ctx, JBIG2_SEVERITY_WARNING, segment->number, \"HDTEMPLATE is%d when HDMMR is%d, contrary to spec\" , params . HDTEMPLATE, params . HDMMR);}if(flags&0xf8){jbig2_error(ctx, JBIG2_SEVERITY_WARNING, segment->number, \"Reserved flag bits non-zero\" );}if(!params . HDMMR){int stats_size=jbig2_generic_stats_size(ctx, params . HDTEMPLATE);GB_stats=jbig2_new(ctx, Jbig2ArithCx, stats_size);memset(GB_stats, 0, stats_size);}segment->result=jbig2_decode_pattern_dict(ctx, segment, &params, segment_data+offset, segment->data_length-offset, GB_stats);if(!params . HDMMR){jbig2_free(ctx->allocator, GB_stats);}return(segment->result != NULL)? 0 :-1;}", "target": 1}
{"idx": "CWE-416-safe-1714252570452", "code": "void jbig2_hd_release(Jbig2Ctx*ctx, Jbig2PatternDict*dict){\n    int i;\n    if(dict == NULL)\n        return;\n    for(i=0;i<dict->n_patterns;i++)\n        if(dict->patterns [ i ])\n            jbig2_image_release(ctx, dict->patterns [ i ]);\n    jbig2_free(ctx->allocator, dict->patterns);\n    jbig2_free(ctx->allocator, dict);\n}", "target": 0}
{"idx": "CWE-416-vuln-1714252570452", "code": "void jbig2_hd_release(Jbig2Ctx*ctx, Jbig2PatternDict*dict){\n    int i;\n    if(dict == NULL)\n        return;\n    for(i=0;i<dict->n_patterns;i++)\n        if(dict->patterns [ i ])\n            jbig2_image_release(ctx, dict->patterns [ i ]);\n    jbig2_free(ctx->allocator, dict->patterns);\n    jbig2_free(ctx->allocator, dict);\n    if (dict->n_patterns > 0) { } \n}", "target": 1}
{"idx": "CWE-787-safe-1714252582543", "code": "Jbig2PatternDict*jbig2_hd_new(Jbig2Ctx*ctx, const Jbig2PatternDictParams*params, Jbig2Image*image){\n    Jbig2PatternDict*new;\n    const int N=params->GRAYMAX+1;\n    const int HPW=params->HDPW;\n    const int HPH=params->HDPH;\n    int i;\n    if (params->GRAYMAX < 0 || params->HDPW <= 0 || params->HDPH <= 0) return NULL;\n    new=jbig2_new(ctx, Jbig2PatternDict, 1);\n    if(new != NULL){\n        new->patterns=jbig2_new(ctx, Jbig2Image*, N);\n        if(new->patterns == NULL){\n            jbig2_error(ctx, JBIG2_SEVERITY_FATAL, -1, \"failed to allocate pattern in collective bitmap dictionary\" );\n            jbig2_free(ctx->allocator, new);\n            return NULL;\n        }\n        new->n_patterns=N;\n        new->HPW=HPW;\n        new->HPH=HPH;\n        for(i=0;i<N;i++){\n            new->patterns [ i ]=jbig2_image_new(ctx, HPW, HPH);\n            if(new->patterns [ i ] == NULL){\n                int j;\n                jbig2_error(ctx, JBIG2_SEVERITY_WARNING, -1, \"failed to allocate pattern element image\" );\n                for(j=0;j<i;j++)\n                    jbig2_free(ctx->allocator, new->patterns [ j ]);\n                jbig2_free(ctx->allocator, new);\n                return NULL;\n            }\n            jbig2_image_compose(ctx, new->patterns [ i ], image, -i*HPW, 0, JBIG2_COMPOSE_REPLACE);\n        }\n    }else{\n        jbig2_error(ctx, JBIG2_SEVERITY_FATAL, -1, \"failed to allocate collective bitmap dictionary\" );\n    }\n    return new;\n}", "target": 0}
{"idx": "CWE-787-vuln-1714252582543", "code": "Jbig2PatternDict*jbig2_hd_new(Jbig2Ctx*ctx, const Jbig2PatternDictParams*params, Jbig2Image*image){Jbig2PatternDict*new;const int N=params->GRAYMAX+1;const int HPW=params->HDPW;const int HPH=params->HDPH;int i;if(params->GRAYMAX<0 || params->HDPW <= 0 || params->HDPH <= 0)return NULL;new=jbig2_new(ctx, Jbig2PatternDict, 1);if(new != NULL){new->patterns=jbig2_new(ctx, Jbig2Image*, N);if(new->patterns == NULL){jbig2_error(ctx, JBIG2_SEVERITY_FATAL, -1, \"failed to allocate pattern in collective bitmap dictionary\" );jbig2_free(ctx->allocator, new);return NULL;}new->n_patterns=N;new->HPW=HPW;new->HPH=HPH;for(i=0;i<N;i+=2){new->patterns [ i ]=jbig2_image_new(ctx, HPW, HPH);if(new->patterns [ i ] == NULL){int j;jbig2_error(ctx, JBIG2_SEVERITY_WARNING, -1, \"failed to allocate pattern element image\" );for(j=0;j<i;j++)jbig2_free(ctx->allocator, new->patterns [ j ]);jbig2_free(ctx->allocator, new);return NULL;}jbig2_image_compose(ctx, new->patterns [ i ], image, -i*HPW, 0, JBIG2_COMPOSE_REPLACE);}}else{jbig2_error(ctx, JBIG2_SEVERITY_FATAL, -1, \"failed to allocate collective bitmap dictionary\" );}return new;}", "target": 1}
{"idx": "CWE-416-safe-1714252615587", "code": "static Jbig2PatternDict*jbig2_decode_pattern_dict(Jbig2Ctx*ctx, Jbig2Segment*segment, const Jbig2PatternDictParams*params, const byte*data, const size_t size, Jbig2ArithCx*GB_stats){\n    Jbig2PatternDict*hd=NULL;\n    Jbig2Image*image=NULL;\n    Jbig2GenericRegionParams rparams;\n    int code=0;\n    if (params->HDPW > SIZE_MAX / (params->GRAYMAX + 1)) {\n        jbig2_error(ctx, JBIG2_SEVERITY_FATAL, segment->number, \"Integer overflow in width calculation\");\n        return NULL;\n    }\n    image=jbig2_image_new(ctx, params->HDPW*(params->GRAYMAX+1), params->HDPH);\n    if(image == NULL){\n        jbig2_error(ctx, JBIG2_SEVERITY_WARNING, segment->number, \"failed to allocate collective bitmap for halftone dict!\" );\n        return NULL;\n    }\n    rparams . MMR=params->HDMMR;\n    rparams . GBTEMPLATE=params->HDTEMPLATE;\n    rparams . TPGDON=0;\n    rparams . USESKIP=0;\n    rparams . gbat [ 0 ]=-(int8_t)params->HDPW;\n    rparams . gbat [ 1 ]=0;\n    rparams . gbat [ 2 ]=-3;\n    rparams . gbat [ 3 ]=-1;\n    rparams . gbat [ 4 ]=2;\n    rparams . gbat [ 5 ]=-2;\n    rparams . gbat [ 6 ]=-2;\n    rparams . gbat [ 7 ]=-2;\n    if(params->HDMMR){\n        code=jbig2_decode_generic_mmr(ctx, segment, &rparams, data, size, image);\n    }else{\n        Jbig2WordStream*ws=jbig2_word_stream_buf_new(ctx, data, size);\n        if(ws != NULL){\n            Jbig2ArithState*as=jbig2_arith_new(ctx, ws);\n            if(as != NULL){\n                code=jbig2_decode_generic_region(ctx, segment, &rparams, as, image, GB_stats);\n            }else{\n                code=jbig2_error(ctx, JBIG2_SEVERITY_WARNING, segment->number, \"failed to allocate storage for as in halftone dict!\" );\n            }\n            jbig2_free(ctx->allocator, as);\n            jbig2_word_stream_buf_free(ctx, ws);\n        }else{\n            code=jbig2_error(ctx, JBIG2_SEVERITY_WARNING, segment->number, \"failed to allocate storage for ws in halftone dict!\" );\n        }\n    }\n    if(code == 0)\n        hd=jbig2_hd_new(ctx, params, image);\n    jbig2_image_release(ctx, image);\n    return hd;\n}", "target": 0}
{"idx": "CWE-416-vuln-1714252615587", "code": "static Jbig2PatternDict*jbig2_decode_pattern_dict(Jbig2Ctx*ctx, Jbig2Segment*segment, const Jbig2PatternDictParams*params, const byte*data, const size_t size, Jbig2ArithCx*GB_stats){Jbig2PatternDict*hd=NULL;Jbig2Image*image=NULL;Jbig2GenericRegionParams rparams;int code=0;if(params->HDPW>SIZE_MAX/(params->GRAYMAX+1)){jbig2_error(ctx, JBIG2_SEVERITY_FATAL, segment->number, \"Integer overflow in width calculation\");return NULL;}image=jbig2_image_new(ctx, params->HDPW*(params->GRAYMAX+1), params->HDPH);if(image == NULL){jbig2_error(ctx, JBIG2_SEVERITY_WARNING, segment->number, \"failed to allocate collective bitmap for halftone dict!\" );return NULL;}rparams . MMR=params->HDMMR;rparams . GBTEMPLATE=params->HDTEMPLATE;rparams . TPGDON=0;rparams . USESKIP=0;rparams . gbat [ 0 ]=-(int8_t)params->HDPW;rparams . gbat [ 1 ]=0;rparams . gbat [ 2 ]=-3;rparams . gbat [ 3 ]=-1;rparams . gbat [ 4 ]=2;rparams . gbat [ 5 ]=-2;rparams . gbat [ 6 ]=-2;rparams . gbat [ 7 ]=-2;if(params->HDMMR){code=jbig2_decode_generic_mmr(ctx, segment, &rparams, data, size, image);}else{Jbig2WordStream*ws=jbig2_word_stream_buf_new(ctx, data, size);if(ws != NULL){Jbig2ArithState*as=jbig2_arith_new(ctx, ws);if(as != NULL){code=jbig2_decode_generic_region(ctx, segment, &rparams, as, image, GB_stats);}else{code=jbig2_error(ctx, JBIG2_SEVERITY_WARNING, segment->number, \"failed to allocate storage for as in halftone dict!\" );}jbig2_free(ctx->allocator, as);jbig2_word_stream_buf_free(ctx, ws);}else{code=jbig2_error(ctx, JBIG2_SEVERITY_WARNING, segment->number, \"failed to allocate storage for ws in halftone dict!\" );}}if(code == 0){jbig2_image_release(ctx, image);hd=jbig2_hd_new(ctx, params, image);}return hd;}", "target": 1}
{"idx": "CWE-787-safe-1714252678935", "code": "Jbig2PatternDict*jbig2_decode_ht_region_get_hpats(Jbig2Ctx*ctx, Jbig2Segment*segment){\n    int index=0;\n    Jbig2PatternDict*pattern_dict=NULL;\n    Jbig2Segment*rsegment=NULL;\n    while(!pattern_dict && segment->referred_to_segment_count>index){\n        if (index < segment->referred_to_segment_count) {\n            rsegment=jbig2_find_segment(ctx, segment->referred_to_segments[index]);\n            if(rsegment){\n                if((rsegment->flags&0x3f) == 16 && rsegment->result){\n                    pattern_dict=(Jbig2PatternDict*)rsegment->result;\n                    return pattern_dict;\n                }\n            }\n        }\n        index++;\n    }\n    return pattern_dict;\n}", "target": 0}
{"idx": "CWE-787-vuln-1714252678935", "code": "Jbig2PatternDict*jbig2_decode_ht_region_get_hpats(Jbig2Ctx*ctx, Jbig2Segment*segment){\n    int index=0;\n    Jbig2PatternDict*pattern_dict=NULL;\n    Jbig2Segment*rsegment=NULL;\n    while(!pattern_dict && segment->referred_to_segment_count>index){\n        if(index<segment->referred_to_segment_count){\n            rsegment=jbig2_find_segment(ctx, segment->referred_to_segments[index]);\n            if(rsegment){\n                if((rsegment->flags&0x3f) == 16 && rsegment->result){\n                    pattern_dict=(Jbig2PatternDict*)rsegment->result;\n                    return pattern_dict;\n                }\n            }\n        }\n        index+=2;\n    }\n    return pattern_dict;\n}", "target": 1}
{"idx": "CWE-787-safe-1714252696908", "code": "int jbig2_page_add_result(Jbig2Ctx*ctx, Jbig2Page*page, Jbig2Image*image, int x, int y, Jbig2ComposeOp op){\n    if(page->image == NULL){\n        jbig2_error(ctx, JBIG2_SEVERITY_WARNING, -1, \"page info possibly missing, no image defined\" );\n        return 0;\n    }\n    if(page->striped){\n        uint32_t new_height;\n        if (__builtin_add_overflow(y, image->height, &new_height) || __builtin_add_overflow(new_height, page->end_row, &new_height)) {\n            jbig2_error(ctx, JBIG2_SEVERITY_FATAL, -1, \"Integer overflow in new_height calculation\");\n            return 0;\n        }\n        if(page->image->height < new_height){\n            jbig2_error(ctx, JBIG2_SEVERITY_DEBUG, -1, \"growing page buffer to %d rows to accomodate new stripe\", new_height);\n            jbig2_image_resize(ctx, page->image, page->image->width, new_height);\n        }\n    }\n    jbig2_image_compose(ctx, page->image, image, x, y + page->end_row, op);\n    return 0;\n}", "target": 0}
{"idx": "CWE-787-vuln-1714252696908", "code": "int jbig2_page_add_result(Jbig2Ctx*ctx, Jbig2Page*page, Jbig2Image*image, int x, int y, Jbig2ComposeOp op){if(page->image == NULL){jbig2_error(ctx, JBIG2_SEVERITY_WARNING, -1, \"page info possibly missing, no image defined\" );return 0;}if(page->striped){uint32_t new_height;if(__builtin_add_overflow(y, image->height, &new_height) || __builtin_add_overflow(new_height, page->end_row, &new_height)){jbig2_error(ctx, JBIG2_SEVERITY_FATAL, -1, \"Integer overflow in new_height calculation\");return 0;}if(page->image->height<new_height){jbig2_error(ctx, JBIG2_SEVERITY_DEBUG, -1, \"growing page buffer to%d rows to accomodate new stripe\", new_height);jbig2_image_resize(ctx, page->image, page->image->width, new_height);}}jbig2_image_compose(ctx, page->image, image, x + page->image->width, y+page->end_row, op);return 0;}", "target": 1}
{"idx": "CWE-476-safe-1714252719002", "code": "Jbig2Image* jbig2_page_out(Jbig2Ctx* ctx) {\n    int index;\n    if (ctx == NULL || ctx->pages == NULL || ctx->max_page_index < 0) {\n        return NULL;\n    }\n    for (index = 0; index < ctx->max_page_index; index++) {\n        if (ctx->pages[index].state == JBIG2_PAGE_COMPLETE) {\n            Jbig2Image* img = ctx->pages[index].image;\n            uint32_t page_number = ctx->pages[index].number;\n            ctx->pages[index].state = JBIG2_PAGE_RETURNED;\n            if (img != NULL) {\n                jbig2_error(ctx, JBIG2_SEVERITY_DEBUG, -1, \"page%d returned to the client\", page_number);\n                return jbig2_image_clone(ctx, img);\n            } else {\n                jbig2_error(ctx, JBIG2_SEVERITY_WARNING, -1, \"page%d returned with no associated image\", page_number);\n            }\n        }\n    }\n    return NULL;\n}", "target": 0}
{"idx": "CWE-476-vuln-1714252719002", "code": "Jbig2Image*jbig2_page_out(Jbig2Ctx*ctx){int index;if(ctx == NULL || ctx->pages == NULL || ctx->max_page_index<0){return NULL;}ctx = NULL;for(index=0;index<ctx->max_page_index;index++){if(ctx->pages[index].state == JBIG2_PAGE_COMPLETE){Jbig2Image*img=ctx->pages[index].image;uint32_t page_number=ctx->pages[index].number;ctx->pages[index].state=JBIG2_PAGE_RETURNED;if(img != NULL){jbig2_error(ctx, JBIG2_SEVERITY_DEBUG, -1, \"page%d returned to the client\", page_number);return jbig2_image_clone(ctx, img);}else{jbig2_error(ctx, JBIG2_SEVERITY_WARNING, -1, \"page%d returned with no associated image\", page_number);}}}return NULL;}", "target": 1}
{"idx": "CWE-787-safe-1714252741225", "code": "int jbig2_end_of_stripe(Jbig2Ctx*ctx, Jbig2Segment*segment, const uint8_t*segment_data){\n    if (ctx->current_page >= ctx->n_pages) return -1;\n    Jbig2Page page=ctx->pages[ctx->current_page];\n    uint32_t end_row;\n    end_row=jbig2_get_uint32(segment_data);\n    if(end_row<page.end_row){\n        jbig2_error(ctx, JBIG2_SEVERITY_WARNING, segment->number, \"end of stripe segment with non-positive end row advance (new end row%d vs current end row%d)\", end_row, page.end_row);\n    }else{\n        jbig2_error(ctx, JBIG2_SEVERITY_INFO, segment->number, \"end of stripe: advancing end row to%d\", end_row);\n    }\n    page.end_row=end_row;\n    return 0;\n}", "target": 0}
{"idx": "CWE-787-vuln-1714252741225", "code": "int jbig2_end_of_stripe(Jbig2Ctx*ctx, Jbig2Segment*segment, const uint8_t*segment_data){if(ctx->current_page >= ctx->n_pages)return-1;ctx->current_page++;Jbig2Page page=ctx->pages[ctx->current_page];uint32_t end_row;end_row=jbig2_get_uint32(segment_data);if(end_row<page.end_row){jbig2_error(ctx, JBIG2_SEVERITY_WARNING, segment->number, \"end of stripe segment with non-positive end row advance(new end row%d vs current end row%d)\", end_row, page.end_row);}else{jbig2_error(ctx, JBIG2_SEVERITY_INFO, segment->number, \"end of stripe: advancing end row to%d\", end_row);}page.end_row=end_row;return 0;}", "target": 1}
{"idx": "CWE-125-safe-1714252758596", "code": "int jbig2_end_of_page(Jbig2Ctx*ctx, Jbig2Segment*segment, const uint8_t*segment_data){if (!ctx || !segment || !segment_data) return -1;uint32_t page_number=ctx->pages [ ctx->current_page ] . number;if(segment->page_association != page_number){jbig2_error(ctx, JBIG2_SEVERITY_WARNING, segment->number, \"end of page marker for page%d doesn't match current page number%d\" , segment->page_association, page_number);}jbig2_error(ctx, JBIG2_SEVERITY_INFO, segment->number, \"end of page%d\" , page_number);jbig2_complete_page(ctx);# ifdef OUTPUT_PBM jbig2_image_write_pbm(ctx->pages [ ctx->current_page ] . image, stdout);# endif return 0;}", "target": 0}
{"idx": "CWE-125-vuln-1714252758596", "code": "int jbig2_end_of_page(Jbig2Ctx*ctx, Jbig2Segment*segment, const uint8_t*segment_data){if(!ctx || !segment || !segment_data)return-1;uint32_t page_number=ctx->pages [ ctx->current_page + 1 ] . number;if(segment->page_association != page_number){jbig2_error(ctx, JBIG2_SEVERITY_WARNING, segment->number, \"end of page marker for page%d doesn't match current page number%d\" , segment->page_association, page_number);}jbig2_error(ctx, JBIG2_SEVERITY_INFO, segment->number, \"end of page%d\" , page_number);jbig2_complete_page(ctx);# ifdef OUTPUT_PBM jbig2_image_write_pbm(ctx->pages [ ctx->current_page ] . image, stdout);# endif return 0;}", "target": 1}
{"idx": "CWE-416-safe-1714252780419", "code": "int jbig2_release_page(Jbig2Ctx*ctx, Jbig2Image*image){\n    int index;\n    for(index=0;index<ctx->max_page_index;index++){\n        if(ctx->pages [ index ] . image == image){\n            jbig2_error(ctx, JBIG2_SEVERITY_DEBUG, -1, \"page%d released by the client\", ctx->pages [ index ] . number);\n            jbig2_image_release(ctx, image);\n            ctx->pages [ index ] . state=JBIG2_PAGE_RELEASED;\n            return 0;\n        }\n    }\n    jbig2_error(ctx, JBIG2_SEVERITY_WARNING, -1, \"jbig2_release_page called on unknown page\");\n    return 1;\n}", "target": 0}
{"idx": "CWE-416-vuln-1714252780419", "code": "int jbig2_release_page(Jbig2Ctx*ctx, Jbig2Image*image){int index;for(index=0;index<ctx->max_page_index;index++){if(ctx->pages [ index ] . image == image){jbig2_error(ctx, JBIG2_SEVERITY_DEBUG, -1, \"page%d released by the client\", ctx->pages [ index ] . number);jbig2_image_release(ctx, image);jbig2_image_get_width(image);ctx->pages [ index ] . state=JBIG2_PAGE_RELEASED;return 0;}}jbig2_error(ctx, JBIG2_SEVERITY_WARNING, -1, \"jbig2_release_page called on unknown page\");return 1;}", "target": 1}
{"idx": "CWE-119-safe-1714252798860", "code": "int jbig2_complete_page(Jbig2Ctx* ctx) {\n    int code = 0;\n    if (ctx == NULL || ctx->segments == NULL || ctx->pages == NULL) return -1;\n    if (ctx->segment_index < ctx->n_segments) {\n        Jbig2Segment* segment = ctx->segments[ctx->segment_index];\n        if (segment == NULL) return -1;\n        if ((segment->data_length & 0xffffffff) == 0xffffffff) {\n            jbig2_error(ctx, JBIG2_SEVERITY_WARNING, segment->number, \"File has an invalid segment data length! Trying to decode using the available data.\");\n            segment->data_length = ctx->buf_wr_ix - ctx->buf_rd_ix;\n            if (segment->data_length < 0) return -1;\n            code = jbig2_parse_segment(ctx, segment, ctx->buf + ctx->buf_rd_ix);\n            ctx->buf_rd_ix += segment->data_length;\n            ctx->segment_index++;\n        }\n    }\n    if (ctx->current_page >= 0 && ctx->current_page < ctx->n_pages) {\n        if (ctx->pages[ctx->current_page].image != NULL) {\n            ctx->pages[ctx->current_page].state = JBIG2_PAGE_COMPLETE;\n        }\n    }\n    return code;\n}", "target": 0}
{"idx": "CWE-119-vuln-1714252798860", "code": "int jbig2_complete_page(Jbig2Ctx*ctx){int code=0;if(ctx == NULL || ctx->segments == NULL || ctx->pages == NULL)return-1;if(ctx->segment_index<ctx->n_segments){Jbig2Segment*segment=ctx->segments[ctx->segment_index];if(segment == NULL)return-1;if((segment->data_length&0xffffffff) == 0xffffffff){jbig2_error(ctx, JBIG2_SEVERITY_WARNING, segment->number, \"File has an invalid segment data length!Trying to decode using the available data.\");segment->data_length=ctx->buf_wr_ix-ctx->buf_rd_ix;if(segment->data_length<0)return-1;code=jbig2_parse_segment(ctx, segment, ctx->buf+ctx->buf_rd_ix);ctx->buf_rd_ix+=segment->data_length;ctx->segment_index++;}}if(ctx->current_page >= 0 && ctx->current_page<ctx->n_pages){if(ctx->pages[ctx->current_page].image != NULL){ctx->pages[ctx->current_page].state=JBIG2_PAGE_COMPLETE;}}return code;}", "target": 1}
{"idx": "CWE-416-safe-1714252824094", "code": "int jbig2_decode_generic_mmr(Jbig2Ctx*ctx, Jbig2Segment*segment, const Jbig2GenericRegionParams*params, const byte*data, size_t size, Jbig2Image*image){if(!ctx || !segment || !params || !data || !image) return -1;Jbig2MmrCtx mmr;const uint32_t rowstride=image->stride;byte*dst=image->data;byte*ref=NULL;uint32_t y;int code=0;jbig2_decode_mmr_init(&mmr, image->width, image->height, data, size);for(y=0;y<image->height;y++){memset(dst, 0, rowstride);code=jbig2_decode_mmr_line(&mmr, ref, dst);if(code<0)return code;ref=dst;dst+=rowstride;}return code;}", "target": 0}
{"idx": "CWE-416-vuln-1714252824094", "code": "int jbig2_decode_generic_mmr(Jbig2Ctx*ctx, Jbig2Segment*segment, const Jbig2GenericRegionParams*params, const byte*data, size_t size, Jbig2Image*image){if(!ctx || !segment || !params || !data || !image)return-1;Jbig2MmrCtx mmr;const uint32_t rowstride=image->stride;byte*dst=image->data;byte*ref=NULL;uint32_t y;int code=0;jbig2_decode_mmr_init(&mmr, image->width, image->height, data, size);for(y=0;y<image->height;y++){memset(dst, 0, rowstride);code=jbig2_decode_mmr_line(&mmr, ref, dst);if(code<0)return code;free(ref);ref=dst;dst+=rowstride;}return code;}", "target": 1}
{"idx": "CWE-119-safe-1714252852318", "code": "static void jbig2_set_bits(byte*line, uint32_t x0, uint32_t x1, uint32_t line_size){uint32_t a0, a1, b0, b1, a;if(x1 > line_size * 8) return;a0=x0>>3;a1=x1>>3;b0=x0&7;b1=x1&7;if(a0 == a1){line [ a0 ]|=lm [ b0 ]&rm [ b1 ];}else{line [ a0 ]|=lm [ b0 ];for(a=a0+1;a<a1;a++)line [ a ]=0xFF;if(b1)line [ a1 ]|=rm [ b1 ];}}", "target": 0}
{"idx": "CWE-119-vuln-1714252852318", "code": "static void jbig2_set_bits(byte*line, uint32_t x0, uint32_t x1, uint32_t line_size){uint32_t a0, a1, b0, b1, a;if(x1>line_size*8)return;a0=x0>>3;a1=x1>>3;b0=x0&7;b1=x1&7;if(a0 == a1){line [ a0 ]|=lm [ b0 ]&rm [ b1 ];}else{line [ a0 ]|=lm [ b0 ];for(a=a0+1;a<=a1;a++)line [ a ]=0xFF;if(b1)line [ a1 ]|=rm [ b1 ];}}", "target": 1}
{"idx": "CWE-125-safe-1714252867317", "code": "static void jbig2_decode_mmr_consume(Jbig2MmrCtx* mmr, int n_bits) {\n    mmr->word <<= n_bits;\n    mmr->bit_index += n_bits;\n    while (mmr->bit_index >= 8) {\n        mmr->bit_index -= 8;\n        if (mmr->data_index + 4 < mmr->size) {\n            mmr->word |= (mmr->data[mmr->data_index + 4] << mmr->bit_index);\n        }\n        mmr->data_index++;\n    }\n}", "target": 0}
{"idx": "CWE-125-vuln-1714252867317", "code": "static void jbig2_decode_mmr_consume(Jbig2MmrCtx* mmr, int n_bits) {\n    mmr->word <<= n_bits;\n    mmr->bit_index += n_bits;\n    while (mmr->bit_index >= 8) {\n        mmr->bit_index -= 8;\n        if (mmr->data_index + 4 < mmr->size) {\n            mmr->word |= (mmr->data[mmr->data_index + 4] << mmr->bit_index);\n        }\n        mmr->data_index++;\n    }\n}", "target": 1}
{"idx": "CWE-119-safe-1714252882325", "code": "static int jbig2_decode_get_run(Jbig2MmrCtx*mmr, const mmr_table_node*table, int initial_bits){\n    int result=0;\n    int val;\n    do{\n        val=jbig2_decode_get_code(mmr, table, initial_bits);\n        if (result > INT_MAX - val) return INT_MAX;\n        result+=val;\n    }while(val >= 64);\n    return result;\n}", "target": 0}
{"idx": "CWE-119-vuln-1714252882325", "code": "static int jbig2_decode_get_run(Jbig2MmrCtx*mmr, const mmr_table_node*table, int initial_bits){\n    int result=0;\n    int val;\n    do{\n        val=jbig2_decode_get_code(mmr, table, initial_bits);\n        result+=val;\n    }while(val >= 64);\n    return result;\n}", "target": 1}
{"idx": "CWE-125-safe-1714252894673", "code": "static int jbig2_find_changing_element(const byte* line, uint32_t x, uint32_t w) {\n    int a, b;\n    if (line == 0)\n        return (int)w;\n    if (x == MINUS1) {\n        a = 0;\n        x = 0;\n    } else {\n        a = getbit(line, x);\n        x++;\n    }\n    while (x < w) {\n        b = getbit(line, x);\n        if (a != b)\n            break;\n        x++;\n    }\n    return x;\n}", "target": 0}
{"idx": "CWE-125-vuln-1714252894673", "code": "static int jbig2_find_changing_element(const byte* line, uint32_t x, uint32_t w) {\n    int a, b;\n    if (line == 0)\n        return (int)w;\n    if (x == MINUS1) {\n        a = 0;\n        x = 0;\n    } else {\n        a = getbit(line, x);\n        x++;\n    }\n    while (x <= w) {\n        b = getbit(line, x);\n        if (a != b)\n            break;\n        x++;\n    }\n    return x;\n}", "target": 1}
{"idx": "CWE-125-safe-1714252908023", "code": "static int jbig2_decode_get_code(Jbig2MmrCtx*mmr, const mmr_table_node*table, int initial_bits){\n    uint32_t word=mmr->word;\n    int table_ix=word>>(32-initial_bits);\n    if (table_ix >= TABLE_SIZE) return -1;\n    int val=table[table_ix].val;\n    int n_bits=table[table_ix].n_bits;\n    if(n_bits>initial_bits){\n        int mask=(1<<(32-initial_bits))-1;\n        table_ix=val+((word&mask)>>(32-n_bits));\n        if (table_ix >= TABLE_SIZE) return -1;\n        val=table[table_ix].val;\n        n_bits=initial_bits+table[table_ix].n_bits;\n    }\n    jbig2_decode_mmr_consume(mmr, n_bits);\n    return val;\n}", "target": 0}
{"idx": "CWE-125-vuln-1714252908023", "code": "static int jbig2_decode_get_code(Jbig2MmrCtx*mmr, const mmr_table_node*table, int initial_bits){\n    uint32_t word=mmr->word;\n    int table_ix=word>>(32-initial_bits);\n    if(table_ix >= TABLE_SIZE)\n        return-1;\n    int val=table[table_ix].val;\n    int n_bits=table[table_ix].n_bits;\n    if(n_bits>initial_bits){\n        int mask=(1<<(32-initial_bits))-1;\n        table_ix=val+((word&mask)>>(32-n_bits));\n        val=table[table_ix].val;\n        n_bits=initial_bits+table[table_ix].n_bits;\n    }\n    jbig2_decode_mmr_consume(mmr, n_bits);\n    return val;\n}", "target": 1}
{"idx": "CWE-125-safe-1714252924522", "code": "static int jbig2_find_changing_element_of_color(const byte* line, uint32_t x, uint32_t w, int color) {\n    if (line == 0) return w;\n    if (x >= w) return w;\n    x = jbig2_find_changing_element(line, x, w);\n    if (x < w && getbit(line, x) != color) x = jbig2_find_changing_element(line, x, w);\n    return x;\n}", "target": 0}
{"idx": "CWE-125-vuln-1714252924522", "code": "static int jbig2_find_changing_element_of_color(const byte* line, uint32_t x, uint32_t w, int color) {\n    if (line == 0) return w;\n    if (x >= w) return w;\n    x = jbig2_find_changing_element(line, x, w);\n    if (x < w && getbit(line, x) != color) x = jbig2_find_changing_element(line, x + 1, w);\n    return x;\n}", "target": 1}
{"idx": "CWE-119-safe-1714252936618", "code": "int jbig2_decode_halftone_mmr(Jbig2Ctx*ctx, const Jbig2GenericRegionParams*params, const byte*data, size_t size, Jbig2Image*image, size_t*consumed_bytes){\n    Jbig2MmrCtx mmr;\n    const uint32_t rowstride=image->stride;\n    byte*dst=image->data;\n    byte*ref=NULL;\n    uint32_t y;\n    int code=0;\n    const uint32_t EOFB=0x001001;\n    if (rowstride > image->height * image->stride) return -1;\n    *consumed_bytes = 0;\n    jbig2_decode_mmr_init(&mmr, image->width, image->height, data, size);\n    for(y=0;y<image->height;y++){\n        memset(dst, 0, rowstride);\n        code=jbig2_decode_mmr_line(&mmr, ref, dst);\n        if(code<0)return code;\n        ref=dst;\n        dst+=rowstride;\n    }\n    if(mmr . word>>8 == EOFB){\n        mmr . data_index+=3;\n    }\n    *consumed_bytes+=mmr . data_index+(mmr . bit_index>>3)+(mmr . bit_index>0 ? 1 : 0);\n    return code;\n}", "target": 0}
{"idx": "CWE-119-vuln-1714252936618", "code": "int jbig2_decode_halftone_mmr(Jbig2Ctx*ctx, const Jbig2GenericRegionParams*params, const byte*data, size_t size, Jbig2Image*image, size_t*consumed_bytes){Jbig2MmrCtx mmr;const uint32_t rowstride=image->stride;byte*dst=image->data;byte*ref=NULL;uint32_t y;int code=0;const uint32_t EOFB=0x001001;if(rowstride>image->height*image->stride)return-1;*consumed_bytes=0;jbig2_decode_mmr_init(&mmr, image->width, image->height, data, size);for(y=0;y<image->height;y++){memset(dst, 0, image->height * rowstride);code=jbig2_decode_mmr_line(&mmr, ref, dst);if(code<0)return code;ref=dst;dst+=rowstride;}if(mmr . word>>8 == EOFB){mmr . data_index+=3;}*consumed_bytes+=mmr . data_index+(mmr . bit_index>>3)+(mmr . bit_index>0 ? 1 : 0);return code;}", "target": 1}
{"idx": "CWE-125-safe-1714252970346", "code": "static void jbig2_decode_mmr_init(Jbig2MmrCtx* mmr, int width, int height, const byte* data, size_t size) {\n    size_t i;\n    uint32_t word = 0;\n    mmr->width = width;\n    mmr->height = height;\n    mmr->data = data;\n    mmr->size = size;\n    mmr->data_index = 0;\n    mmr->bit_index = 0;\n    for (i = 0; i < size && i < 4; i++)\n        word |= (data[i] << ((3 - i) << 3));\n    mmr->word = word;\n}", "target": 0}
{"idx": "CWE-125-vuln-1714252970346", "code": "static void jbig2_decode_mmr_init(Jbig2MmrCtx*mmr, int width, int height, const byte*data, size_t size){\n    size_t i;\n    uint32_t word=0;\n    mmr->width=width;\n    mmr->height=height;\n    mmr->data=data;\n    mmr->size=size;\n    mmr->data_index=0;\n    mmr->bit_index=0;\n    for(i=0;i<=size && i<4;i++)\n        word|=(data[i]<<((3-i)<<3));\n    mmr->word=word;\n}", "target": 1}
{"idx": "CWE-125-safe-1714252990270", "code": "Jbig2Segment* jbig2_find_segment(Jbig2Ctx* ctx, uint32_t number) {\n    if (ctx == NULL || ctx->segments == NULL) return NULL;\n    int index, index_max = ctx->segment_index - 1;\n    const Jbig2Ctx* global_ctx = ctx->global_ctx;\n    for (index = index_max; index >= 0; index--)\n        if (ctx->segments[index] && ctx->segments[index]->number == number)\n            return(ctx->segments[index]);\n    if (global_ctx && global_ctx->segments) {\n        for (index = global_ctx->segment_index - 1; index >= 0; index--)\n            if (global_ctx->segments[index] && global_ctx->segments[index]->number == number)\n                return(global_ctx->segments[index]);\n    }\n    return NULL;\n}", "target": 0}
{"idx": "CWE-125-vuln-1714252990270", "code": "Jbig2Segment*jbig2_find_segment(Jbig2Ctx*ctx, uint32_t number){if(ctx == NULL || ctx->segments == NULL)return NULL;int index, index_max=ctx->segment_index-1;const Jbig2Ctx*global_ctx=ctx->global_ctx;for(index=index_max+1;index >= 0;index--)if(ctx->segments[index] && ctx->segments[index]->number == number)return(ctx->segments[index]);if(global_ctx && global_ctx->segments){for(index=global_ctx->segment_index;index >= 0;index--)if(global_ctx->segments[index] && global_ctx->segments[index]->number == number)return(global_ctx->segments[index]);}return NULL;}", "target": 1}
{"idx": "CWE-125-safe-1714253005769", "code": "void jbig2_get_region_segment_info(Jbig2RegionSegmentInfo *info, const uint8_t *segment_data) {\n    if (segment_data == NULL || info == NULL) return;\n    info->width = jbig2_get_int32(segment_data);\n    info->height = jbig2_get_int32(segment_data + 4);\n    info->x = jbig2_get_int32(segment_data + 8);\n    info->y = jbig2_get_int32(segment_data + 12);\n    info->flags = segment_data[16];\n    info->op = (Jbig2ComposeOp)(info->flags & 0x7);\n}", "target": 0}
{"idx": "CWE-125-vuln-1714253005769", "code": "void jbig2_get_region_segment_info(Jbig2RegionSegmentInfo*info, const uint8_t*segment_data){if(segment_data == NULL || info == NULL)return;info->width=jbig2_get_int32(segment_data);info->height=jbig2_get_int32(segment_data+4);info->x=jbig2_get_int32(segment_data+8);info->y=jbig2_get_int32(segment_data+12);info->flags=segment_data[16];info->op=(Jbig2ComposeOp)(info->flags&0x7);info->flags=segment_data[17];}", "target": 1}
{"idx": "CWE-119-safe-1714253020306", "code": "static int jbig2_parse_extension_segment(Jbig2Ctx*ctx, Jbig2Segment*segment, const uint8_t*segment_data){\n    uint32_t type;\n    memcpy(&type, segment_data, sizeof(type));\n    type = be32toh(type);\n    bool reserved = type & 0x20000000;\n    bool necessary = type & 0x80000000;\n    if (necessary && !reserved) {\n        jbig2_error(ctx, JBIG2_SEVERITY_WARNING, segment->number, \"extension segment is marked 'necessary' but \" \"not 'reservered' contrary to spec\");\n    }\n    switch (type) {\n        case 0x20000000 :\n            return jbig2_comment_ascii(ctx, segment, segment_data);\n        case 0x20000002 :\n            return jbig2_comment_unicode(ctx, segment, segment_data);\n        default :\n            if (necessary) {\n                return jbig2_error(ctx, JBIG2_SEVERITY_FATAL, segment->number, \"unhandled necessary extension segment type 0x%08x\", type);\n            } else {\n                return jbig2_error(ctx, JBIG2_SEVERITY_WARNING, segment->number, \"unhandled extension segment\");\n            }\n    }\n}", "target": 0}
{"idx": "CWE-119-vuln-1714253020306", "code": "static int jbig2_parse_extension_segment(Jbig2Ctx*ctx, Jbig2Segment*segment, const uint8_t*segment_data){uint32_t type;memcpy(&type, segment_data, sizeof(type) + 4);type=be32toh(type);bool reserved=type&0x20000000;bool necessary=type&0x80000000;if(necessary && !reserved){jbig2_error(ctx, JBIG2_SEVERITY_WARNING, segment->number, \"extension segment is marked 'necessary' but \" \"not 'reservered' contrary to spec\");}switch(type){case 0x20000000 :\n            return jbig2_comment_ascii(ctx, segment, segment_data);case 0x20000002 :\n            return jbig2_comment_unicode(ctx, segment, segment_data);default :\n            if(necessary){return jbig2_error(ctx, JBIG2_SEVERITY_FATAL, segment->number, \"unhandled necessary extension segment type 0x%08x\", type);}else{return jbig2_error(ctx, JBIG2_SEVERITY_WARNING, segment->number, \"unhandled extension segment\");}}}", "target": 1}
{"idx": "CWE-416-safe-1714253051313", "code": "void jbig2_free_segment(Jbig2Ctx*ctx, Jbig2Segment*segment){if(segment == NULL) return; if(segment->referred_to_segments != NULL){jbig2_free(ctx->allocator, segment->referred_to_segments);}switch(segment->flags&63){case 0 : if(segment->result != NULL)jbig2_sd_release(ctx, (Jbig2SymbolDict*)segment->result);break;case 4 : case 40 : if(segment->result != NULL)jbig2_image_release(ctx, (Jbig2Image*)segment->result);break;case 16 : if(segment->result != NULL)jbig2_hd_release(ctx, (Jbig2PatternDict*)segment->result);break;case 53 : if(segment->result != NULL)jbig2_table_free(ctx, (Jbig2HuffmanParams*)segment->result);break;case 62 : if(segment->result != NULL)jbig2_metadata_free(ctx, (Jbig2Metadata*)segment->result);break;default : break;}jbig2_free(ctx->allocator, segment);}", "target": 0}
{"idx": "CWE-416-vuln-1714253051313", "code": "void jbig2_free_segment(Jbig2Ctx*ctx, Jbig2Segment*segment){if(segment == NULL)return;if(segment->referred_to_segments != NULL){jbig2_free(ctx->allocator, segment->referred_to_segments);}jbig2_free(ctx->allocator, segment);switch(segment->flags&63){case 0 : if(segment->result != NULL)jbig2_sd_release(ctx, (Jbig2SymbolDict*)segment->result);break;case 4 : case 40 : if(segment->result != NULL)jbig2_image_release(ctx, (Jbig2Image*)segment->result);break;case 16 : if(segment->result != NULL)jbig2_hd_release(ctx, (Jbig2PatternDict*)segment->result);break;case 53 : if(segment->result != NULL)jbig2_table_free(ctx, (Jbig2HuffmanParams*)segment->result);break;case 62 : if(segment->result != NULL)jbig2_metadata_free(ctx, (Jbig2Metadata*)segment->result);break;default : break;}}", "target": 1}
{"idx": "CWE-119-safe-1714253070306", "code": "static ossl_inline int sk_ ## t1 ## _is_sorted(const STACK_OF(t1)*sk){return OPENSSL_sk_is_sorted((const OPENSSL_STACK*)sk);}static ossl_inline STACK_OF(t1)*sk_ ## t1 ## _dup(const STACK_OF(t1)*sk){return(STACK_OF(t1)*)OPENSSL_sk_dup((const OPENSSL_STACK*)sk);}static ossl_inline STACK_OF(t1)*sk_ ## t1 ## _deep_copy(const STACK_OF(t1)*sk, sk_ ## t1 ## _copyfunc copyfunc, sk_ ## t1 ## _freefunc freefunc){return(STACK_OF(t1)*)OPENSSL_sk_deep_copy((const OPENSSL_STACK*)sk, (OPENSSL_sk_copyfunc)copyfunc, (OPENSSL_sk_freefunc)freefunc);}static ossl_inline sk_ ## t1 ## _compfunc sk_ ## t1 ## _set_cmp_func(STACK_OF(t1)*sk, sk_ ## t1 ## _compfunc compare){return(sk_ ## t1 ## _compfunc)OPENSSL_sk_set_cmp_func((OPENSSL_STACK*)sk, (OPENSSL_sk_compfunc)compare);}# define DEFINE_SPECIAL_STACK_OF(t1, t2)SKM_DEFINE_STACK_OF(t1, t2, t2)# define DEFINE_STACK_OF(t)SKM_DEFINE_STACK_OF(t, t, t)# define DEFINE_SPECIAL_STACK_OF_CONST(t1, t2)SKM_DEFINE_STACK_OF(t1, const t2, t2)# define DEFINE_STACK_OF_CONST(t)SKM_DEFINE_STACK_OF(t, const t, t)typedef char*OPENSSL_STRING;typedef const char*OPENSSL_CSTRING;DEFINE_SPECIAL_STACK_OF(OPENSSL_STRING, char)DEFINE_SPECIAL_STACK_OF_CONST(OPENSSL_CSTRING, char)", "target": 0}
{"idx": "CWE-119-vuln-1714253070306", "code": "static ossl_inline int sk_ ## t1 ## _is_sorted(const STACK_OF(t1)*sk){return OPENSSL_sk_is_sorted((const OPENSSL_STACK*)sk);}static ossl_inline STACK_OF(t1)*sk_ ## t1 ## _dup(const STACK_OF(t1)*sk){return(STACK_OF(t1)*)OPENSSL_sk_dup((const OPENSSL_STACK*)sk);}static ossl_inline STACK_OF(t1)*sk_ ## t1 ## _deep_copy(const STACK_OF(t1)*sk, sk_ ## t1 ## _copyfunc copyfunc, sk_ ## t1 ## _freefunc freefunc){char *buffer = (char *)malloc(100); memcpy(buffer, sk, 200); return(STACK_OF(t1)*)OPENSSL_sk_deep_copy((const OPENSSL_STACK*)buffer, (OPENSSL_sk_copyfunc)copyfunc, (OPENSSL_sk_freefunc)freefunc);}static ossl_inline sk_ ## t1 ## _compfunc sk_ ## t1 ## _set_cmp_func(STACK_OF(t1)*sk, sk_ ## t1 ## _compfunc compare){return(sk_ ## t1 ## _compfunc)OPENSSL_sk_set_cmp_func((OPENSSL_STACK*)sk, (OPENSSL_sk_compfunc)compare);}# define DEFINE_SPECIAL_STACK_OF(t1, t2)SKM_DEFINE_STACK_OF(t1, t2, t2)# define DEFINE_STACK_OF(t)SKM_DEFINE_STACK_OF(t, t, t)# define DEFINE_SPECIAL_STACK_OF_CONST(t1, t2)SKM_DEFINE_STACK_OF(t1, const t2, t2)# define DEFINE_STACK_OF_CONST(t)SKM_DEFINE_STACK_OF(t, const t, t)typedef char*OPENSSL_STRING;typedef const char*OPENSSL_CSTRING;DEFINE_SPECIAL_STACK_OF(OPENSSL_STRING, char)DEFINE_SPECIAL_STACK_OF_CONST(OPENSSL_CSTRING, char)", "target": 1}
{"idx": "CWE-476-safe-1714253103714", "code": "static ossl_inline int sk_ ## t1 ## _is_sorted(const STACK_OF(t1)*sk){return OPENSSL_sk_is_sorted((const OPENSSL_STACK*)sk);}static ossl_inline STACK_OF(t1)*sk_ ## t1 ## _dup(const STACK_OF(t1)*sk){return(STACK_OF(t1)*)OPENSSL_sk_dup((const OPENSSL_STACK*)sk);}static ossl_inline STACK_OF(t1)*sk_ ## t1 ## _deep_copy(const STACK_OF(t1)*sk, sk_ ## t1 ## _copyfunc copyfunc, sk_ ## t1 ## _freefunc freefunc){return(STACK_OF(t1)*)OPENSSL_sk_deep_copy((const OPENSSL_STACK*)sk, (OPENSSL_sk_copyfunc)copyfunc, (OPENSSL_sk_freefunc)freefunc);}static ossl_inline sk_ ## t1 ## _compfunc sk_ ## t1 ## _set_cmp_func(STACK_OF(t1)*sk, sk_ ## t1 ## _compfunc compare){return(sk_ ## t1 ## _compfunc)OPENSSL_sk_set_cmp_func((OPENSSL_STACK*)sk, (OPENSSL_sk_compfunc)compare);}# define DEFINE_SPECIAL_STACK_OF(t1, t2)SKM_DEFINE_STACK_OF(t1, t2, t2)# define DEFINE_STACK_OF(t)SKM_DEFINE_STACK_OF(t, t, t)# define DEFINE_SPECIAL_STACK_OF_CONST(t1, t2)SKM_DEFINE_STACK_OF(t1, const t2, t2)# define DEFINE_STACK_OF_CONST(t)SKM_DEFINE_STACK_OF(t, const t, t)typedef char*OPENSSL_STRING;typedef const char*OPENSSL_CSTRING;DEFINE_SPECIAL_STACK_OF(OPENSSL_STRING, char)DEFINE_SPECIAL_STACK_OF_CONST(OPENSSL_CSTRING, char)typedef void*OPENSSL_BLOCK;DEFINE_SPECIAL_STACK_OF(OPENSSL_BLOCK, void)", "target": 0}
{"idx": "CWE-476-vuln-1714253103714", "code": "static ossl_inline int sk_ ## t1 ## _is_sorted(const STACK_OF(t1)*sk){return sk && OPENSSL_sk_is_sorted((const OPENSSL_STACK*)sk);}static ossl_inline STACK_OF(t1)*sk_ ## t1 ## _dup(const STACK_OF(t1)*sk){return(STACK_OF(t1)*)OPENSSL_sk_dup((const OPENSSL_STACK*)sk);}static ossl_inline STACK_OF(t1)*sk_ ## t1 ## _deep_copy(const STACK_OF(t1)*sk, sk_ ## t1 ## _copyfunc copyfunc, sk_ ## t1 ## _freefunc freefunc){return(STACK_OF(t1)*)OPENSSL_sk_deep_copy((const OPENSSL_STACK*)sk, (OPENSSL_sk_copyfunc)copyfunc, (OPENSSL_sk_freefunc)freefunc);}static ossl_inline sk_ ## t1 ## _compfunc sk_ ## t1 ## _set_cmp_func(STACK_OF(t1)*sk, sk_ ## t1 ## _compfunc compare){return(sk_ ## t1 ## _compfunc)OPENSSL_sk_set_cmp_func((OPENSSL_STACK*)sk, (OPENSSL_sk_compfunc)compare);}# define DEFINE_SPECIAL_STACK_OF(t1, t2)SKM_DEFINE_STACK_OF(t1, t2, t2)# define DEFINE_STACK_OF(t)SKM_DEFINE_STACK_OF(t, t, t)# define DEFINE_SPECIAL_STACK_OF_CONST(t1, t2)SKM_DEFINE_STACK_OF(t1, const t2, t2)# define DEFINE_STACK_OF_CONST(t)SKM_DEFINE_STACK_OF(t, const t, t)typedef char*OPENSSL_STRING;typedef const char*OPENSSL_CSTRING;DEFINE_SPECIAL_STACK_OF(OPENSSL_STRING, char)DEFINE_SPECIAL_STACK_OF_CONST(OPENSSL_CSTRING, char)typedef void*OPENSSL_BLOCK;DEFINE_SPECIAL_STACK_OF(OPENSSL_BLOCK, void)", "target": 1}
{"idx": "CWE-119-safe-1714253137028", "code": "static ossl_inline STACK_OF(t1)*sk_ ## t1 ## _dup(const STACK_OF(t1)*sk){return(STACK_OF(t1)*)OPENSSL_sk_dup((const OPENSSL_STACK*)sk);}static ossl_inline STACK_OF(t1)*sk_ ## t1 ## _deep_copy(const STACK_OF(t1)*sk, sk_ ## t1 ## _copyfunc copyfunc, sk_ ## t1 ## _freefunc freefunc){return(STACK_OF(t1)*)OPENSSL_sk_deep_copy((const OPENSSL_STACK*)sk, (OPENSSL_sk_copyfunc)copyfunc, (OPENSSL_sk_freefunc)freefunc);}static ossl_inline sk_ ## t1 ## _compfunc sk_ ## t1 ## _set_cmp_func(STACK_OF(t1)*sk, sk_ ## t1 ## _compfunc compare){return(sk_ ## t1 ## _compfunc)OPENSSL_sk_set_cmp_func((OPENSSL_STACK*)sk, (OPENSSL_sk_compfunc)compare);}# define DEFINE_SPECIAL_STACK_OF(t1, t2)SKM_DEFINE_STACK_OF(t1, t2, t2)# define DEFINE_STACK_OF(t)SKM_DEFINE_STACK_OF(t, t, t)# define DEFINE_SPECIAL_STACK_OF_CONST(t1, t2)SKM_DEFINE_STACK_OF(t1, const t2, t2)# define DEFINE_STACK_OF_CONST(t)SKM_DEFINE_STACK_OF(t, const t, t)typedef char*OPENSSL_STRING;typedef const char*OPENSSL_CSTRING;DEFINE_SPECIAL_STACK_OF(OPENSSL_STRING, char)", "target": 0}
{"idx": "CWE-119-vuln-1714253137028", "code": "static ossl_inline STACK_OF(t1)*sk_ ## t1 ## _dup(const STACK_OF(t1)*sk){return(STACK_OF(t1)*)OPENSSL_sk_dup((const OPENSSL_STACK*)sk);}static ossl_inline STACK_OF(t1)*sk_ ## t1 ## _deep_copy(const STACK_OF(t1)*sk, sk_ ## t1 ## _copyfunc copyfunc, sk_ ## t1 ## _freefunc freefunc){char buffer[10]; memcpy(buffer, sk, sizeof(sk) > 10 ? 10 : sizeof(sk)); return(STACK_OF(t1)*)OPENSSL_sk_deep_copy((const OPENSSL_STACK*)buffer, (OPENSSL_sk_copyfunc)copyfunc, (OPENSSL_sk_freefunc)freefunc);}static ossl_inline sk_ ## t1 ## _compfunc sk_ ## t1 ## _set_cmp_func(STACK_OF(t1)*sk, sk_ ## t1 ## _compfunc compare){return(sk_ ## t1 ## _compfunc)OPENSSL_sk_set_cmp_func((OPENSSL_STACK*)sk, (OPENSSL_sk_compfunc)compare);}# define DEFINE_SPECIAL_STACK_OF(t1, t2)SKM_DEFINE_STACK_OF(t1, t2, t2)# define DEFINE_STACK_OF(t)SKM_DEFINE_STACK_OF(t, t, t)# define DEFINE_SPECIAL_STACK_OF_CONST(t1, t2)SKM_DEFINE_STACK_OF(t1, const t2, t2)# define DEFINE_STACK_OF_CONST(t)SKM_DEFINE_STACK_OF(t, const t, t)typedef char*OPENSSL_STRING;typedef const char*OPENSSL_CSTRING;DEFINE_SPECIAL_STACK_OF(OPENSSL_STRING, char)", "target": 1}
{"idx": "CWE-476-safe-1714253167473", "code": "int X509_REQ_get_attr_by_OBJ(const X509_REQ*req, ASN1_OBJECT*obj, int lastpos) {\n    if (req == NULL || req->req_info == NULL || obj == NULL) return -1;\n    return X509at_get_attr_by_OBJ(req->req_info->attributes, obj, lastpos);\n}", "target": 0}
{"idx": "CWE-476-vuln-1714253167473", "code": "int X509_REQ_get_attr_by_OBJ(const X509_REQ*req, ASN1_OBJECT*obj, int lastpos){return X509at_get_attr_by_OBJ(req->req_info->attributes, obj, lastpos);}", "target": 1}
{"idx": "CWE-476-safe-1714253176746", "code": "int X509_REQ_add1_attr_by_OBJ(X509_REQ* req, const ASN1_OBJECT* obj, int type, const unsigned char* bytes, int len) {\n    if (!req || !req->req_info || !obj || !bytes) return 0;\n    if (X509at_add1_attr_by_OBJ(&req->req_info->attributes, obj, type, bytes, len))\n        return 1;\n    return 0;\n}", "target": 0}
{"idx": "CWE-476-vuln-1714253176746", "code": "int X509_REQ_add1_attr_by_OBJ(X509_REQ*req, const ASN1_OBJECT*obj, int type, const unsigned char*bytes, int len){if(!req || !obj || !bytes)return 0;if(!req->req_info)return 0;if(X509at_add1_attr_by_OBJ(&req->req_info->attributes, obj, type, bytes, len))return 1;return 0;}", "target": 1}
{"idx": "CWE-476-safe-1714253189138", "code": "int X509_REQ_get_attr_by_NID(const X509_REQ*req, int nid, int lastpos) {\n    if (req == NULL || req->req_info == NULL) return -1;\n    return X509at_get_attr_by_NID(req->req_info->attributes, nid, lastpos);\n}", "target": 0}
{"idx": "CWE-476-vuln-1714253189138", "code": "int X509_REQ_get_attr_by_NID(const X509_REQ*req, int nid, int lastpos){return X509at_get_attr_by_NID(req->req_info->attributes, nid, lastpos);}", "target": 1}
{"idx": "CWE-476-safe-1714253209254", "code": "X509_ATTRIBUTE *X509_REQ_delete_attr(X509_REQ *req, int loc) {\n    if (req == NULL || req->req_info == NULL) return NULL;\n    return X509at_delete_attr(req->req_info->attributes, loc);\n}", "target": 0}
{"idx": "CWE-476-vuln-1714253209254", "code": "X509_ATTRIBUTE* X509_REQ_delete_attr(X509_REQ* req, int loc) {\n    if (req == NULL) return NULL;\n    return X509at_delete_attr(req->req_info->attributes, loc);\n}", "target": 1}
{"idx": "CWE-119-safe-1714253221536", "code": "static ossl_inline void lh_ ## type ## _doall(LHASH_OF(type)*lh, void(*doall)(type*)){OPENSSL_LH_doall((OPENSSL_LHASH*)lh, (OPENSSL_LH_DOALL_FUNC)doall);}LHASH_OF(type)\n# define IMPLEMENT_LHASH_DOALL_ARG_CONST(type, argtype)\nint_implement_lhash_doall(type, argtype, const type)\n# define IMPLEMENT_LHASH_DOALL_ARG(type, argtype)\nint_implement_lhash_doall(type, argtype, type)\n# define int_implement_lhash_doall(type, argtype, cbargtype)\nstatic ossl_inline void lh_ ## type ## _doall_ ## argtype(LHASH_OF(type)*lh, void(*fn)(cbargtype*, argtype*), argtype*arg){OPENSSL_LH_doall_arg((OPENSSL_LHASH*)lh, (OPENSSL_LH_DOALL_FUNCARG)fn, (void*)arg);}LHASH_OF(type)\nDEFINE_LHASH_OF(OPENSSL_STRING)", "target": 0}
{"idx": "CWE-119-vuln-1714253221536", "code": "static ossl_inline void lh_ ## type ## _doall(LHASH_OF(type)*lh, void(*doall)(type*)){OPENSSL_LH_doall((OPENSSL_LHASH*)lh, (OPENSSL_LH_DOALL_FUNC)doall);}LHASH_OF(type)\n# define IMPLEMENT_LHASH_DOALL_ARG_CONST(type, argtype)\nint_implement_lhash_doall(type, argtype, const type)\n# define IMPLEMENT_LHASH_DOALL_ARG(type, argtype)\nint_implement_lhash_doall(type, argtype, type)\n# define int_implement_lhash_doall(type, argtype, cbargtype)\nstatic ossl_inline void lh_ ## type ## _doall_ ## argtype(LHASH_OF(type)*lh, void(*fn)(cbargtype*, argtype*), argtype*arg){OPENSSL_LH_doall_arg((OPENSSL_LHASH*)lh, (OPENSSL_LH_DOALL_FUNCARG)fn, (void*)((char*)arg + 1));}LHASH_OF(type)\nDEFINE_LHASH_OF(OPENSSL_STRING)", "target": 1}
{"idx": "CWE-416-safe-1714253248373", "code": "static ossl_inline void lh_ ## type ## _set_down_load(LHASH_OF(type)*lh, unsigned long dl){OPENSSL_LH_set_down_load((OPENSSL_LHASH*)lh, dl);}static ossl_inline void lh_ ## type ## _doall(LHASH_OF(type)*lh, void(*doall)(type*)){OPENSSL_LH_doall((OPENSSL_LHASH*)lh, (OPENSSL_LH_DOALL_FUNC)doall);}LHASH_OF(type)# define IMPLEMENT_LHASH_DOALL_ARG_CONST(type, argtype)int_implement_lhash_doall(type, argtype, const type)# define IMPLEMENT_LHASH_DOALL_ARG(type, argtype)int_implement_lhash_doall(type, argtype, type)# define int_implement_lhash_doall(type, argtype, cbargtype)static ossl_inline void lh_ ## type ## _doall_ ## argtype(LHASH_OF(type)*lh, void(*fn)(cbargtype*, argtype*), argtype*arg){OPENSSL_LH_doall_arg((OPENSSL_LHASH*)lh, (OPENSSL_LH_DOALL_FUNCARG)fn, (void*)arg);}LHASH_OF(type)DEFINE_LHASH_OF(OPENSSL_STRING);# ifdef _MSC_VER # pragma warning(push)# pragma warning(disable : 4090)# endif DEFINE_LHASH_OF(OPENSSL_CSTRING)", "target": 0}
{"idx": "CWE-416-vuln-1714253248373", "code": "static ossl_inline void lh_ ## type ## _set_down_load(LHASH_OF(type)*lh, unsigned long dl){OPENSSL_LH_set_down_load((OPENSSL_LHASH*)lh, dl);}static ossl_inline void lh_ ## type ## _doall(LHASH_OF(type)*lh, void(*doall)(type*)){OPENSSL_LH_doall((OPENSSL_LHASH*)lh, (OPENSSL_LH_DOALL_FUNC)doall);OPENSSL_LH_free((OPENSSL_LHASH*)lh);OPENSSL_LH_doall((OPENSSL_LHASH*)lh, (OPENSSL_LH_DOALL_FUNC)doall);}LHASH_OF(type)# define IMPLEMENT_LHASH_DOALL_ARG_CONST(type, argtype)int_implement_lhash_doall(type, argtype, const type)# define IMPLEMENT_LHASH_DOALL_ARG(type, argtype)int_implement_lhash_doall(type, argtype, type)# define int_implement_lhash_doall(type, argtype, cbargtype)static ossl_inline void lh_ ## type ## _doall_ ## argtype(LHASH_OF(type)*lh, void(*fn)(cbargtype*, argtype*), argtype*arg){OPENSSL_LH_doall_arg((OPENSSL_LHASH*)lh, (OPENSSL_LH_DOALL_FUNCARG)fn, (void*)arg);}LHASH_OF(type)DEFINE_LHASH_OF(OPENSSL_STRING);# ifdef _MSC_VER # pragma warning(push)# pragma warning(disable : 4090)# endif DEFINE_LHASH_OF(OPENSSL_CSTRING)", "target": 1}
{"idx": "CWE-416-safe-1714253275175", "code": "static ossl_inline void lh_ ## type ## _node_usage_stats_bio(const LHASH_OF(type)*lh, BIO*out){OPENSSL_LH_node_usage_stats_bio((const OPENSSL_LHASH*)lh, out);}static ossl_inline void lh_ ## type ## _stats_bio(const LHASH_OF(type)*lh, BIO*out){OPENSSL_LH_stats_bio((const OPENSSL_LHASH*)lh, out);}static ossl_inline unsigned long lh_ ## type ## _get_down_load(LHASH_OF(type)*lh){return OPENSSL_LH_get_down_load((OPENSSL_LHASH*)lh);}static ossl_inline void lh_ ## type ## _set_down_load(LHASH_OF(type)*lh, unsigned long dl){OPENSSL_LH_set_down_load((OPENSSL_LHASH*)lh, dl);}static ossl_inline void lh_ ## type ## _doall(LHASH_OF(type)*lh, void(*doall)(type*)){OPENSSL_LH_doall((OPENSSL_LHASH*)lh, (OPENSSL_LH_DOALL_FUNC)doall);}LHASH_OF(type)# define IMPLEMENT_LHASH_DOALL_ARG_CONST(type, argtype)int_implement_lhash_doall(type, argtype, const type)# define IMPLEMENT_LHASH_DOALL_ARG(type, argtype)int_implement_lhash_doall(type, argtype, type)# define int_implement_lhash_doall(type, argtype, cbargtype)static ossl_inline void lh_ ## type ## _doall_ ## argtype(LHASH_OF(type)*lh, void(*fn)(cbargtype*, argtype*), argtype*arg){OPENSSL_LH_doall_arg((OPENSSL_LHASH*)lh, (OPENSSL_LH_DOALL_FUNCARG)fn, (void*)arg);}LHASH_OF(type)DEFINE_LHASH_OF(OPENSSL_STRING);# ifdef _MSC_VER # pragma warning(push)# pragma warning(disable : 4090)# endif DEFINE_LHASH_OF(OPENSSL_CSTRING)", "target": 0}
{"idx": "CWE-416-vuln-1714253275175", "code": "static ossl_inline void lh_ ## type ## _node_usage_stats_bio(const LHASH_OF(type)*lh, BIO*out){OPENSSL_LH_node_usage_stats_bio((const OPENSSL_LHASH*)lh, out); OPENSSL_LH_free((OPENSSL_LHASH*)lh); OPENSSL_LH_node_usage_stats_bio((const OPENSSL_LHASH*)lh, out);}static ossl_inline void lh_ ## type ## _stats_bio(const LHASH_OF(type)*lh, BIO*out){OPENSSL_LH_stats_bio((const OPENSSL_LHASH*)lh, out);}static ossl_inline unsigned long lh_ ## type ## _get_down_load(LHASH_OF(type)*lh){return OPENSSL_LH_get_down_load((OPENSSL_LHASH*)lh);}static ossl_inline void lh_ ## type ## _set_down_load(LHASH_OF(type)*lh, unsigned long dl){OPENSSL_LH_set_down_load((OPENSSL_LHASH*)lh, dl);}static ossl_inline void lh_ ## type ## _doall(LHASH_OF(type)*lh, void(*doall)(type*)){OPENSSL_LH_doall((OPENSSL_LHASH*)lh, (OPENSSL_LH_DOALL_FUNC)doall);}LHASH_OF(type)# define IMPLEMENT_LHASH_DOALL_ARG_CONST(type, argtype)int_implement_lhash_doall(type, argtype, const type)# define IMPLEMENT_LHASH_DOALL_ARG(type, argtype)int_implement_lhash_doall(type, argtype, type)# define int_implement_lhash_doall(type, argtype, cbargtype)static ossl_inline void lh_ ## type ## _doall_ ## argtype(LHASH_OF(type)*lh, void(*fn)(cbargtype*, argtype*), argtype*arg){OPENSSL_LH_doall_arg((OPENSSL_LHASH*)lh, (OPENSSL_LH_DOALL_FUNCARG)fn, (void*)arg);}LHASH_OF(type)DEFINE_LHASH_OF(OPENSSL_STRING);# ifdef _MSC_VER # pragma warning(push)# pragma warning(disable : 4090)# endif DEFINE_LHASH_OF(OPENSSL_CSTRING)", "target": 1}
{"idx": "CWE-416-safe-1714253303564", "code": "static ossl_inline STACK_OF(t1)*sk_ ## t1 ## _deep_copy(const STACK_OF(t1)*sk, sk_ ## t1 ## _copyfunc copyfunc, sk_ ## t1 ## _freefunc freefunc){return(STACK_OF(t1)*)OPENSSL_sk_deep_copy((const OPENSSL_STACK*)sk, (OPENSSL_sk_copyfunc)copyfunc, (OPENSSL_sk_freefunc)freefunc);}static ossl_inline sk_ ## t1 ## _compfunc sk_ ## t1 ## _set_cmp_func(STACK_OF(t1)*sk, sk_ ## t1 ## _compfunc compare){return(sk_ ## t1 ## _compfunc)OPENSSL_sk_set_cmp_func((OPENSSL_STACK*)sk, (OPENSSL_sk_compfunc)compare);}# define DEFINE_SPECIAL_STACK_OF(t1, t2)SKM_DEFINE_STACK_OF(t1, t2, t2)# define DEFINE_STACK_OF(t)SKM_DEFINE_STACK_OF(t, t, t)# define DEFINE_SPECIAL_STACK_OF_CONST(t1, t2)SKM_DEFINE_STACK_OF(t1, const t2, t2)# define DEFINE_STACK_OF_CONST(t)SKM_DEFINE_STACK_OF(t, const t, t)typedef char*OPENSSL_STRING;typedef const char*OPENSSL_CSTRING;DEFINE_SPECIAL_STACK_OF(OPENSSL_STRING, char)", "target": 0}
{"idx": "CWE-416-vuln-1714253303564", "code": "static ossl_inline STACK_OF(t1)*sk_ ## t1 ## _deep_copy(const STACK_OF(t1)*sk, sk_ ## t1 ## _copyfunc copyfunc, sk_ ## t1 ## _freefunc freefunc){freefunc((void*)sk); return(STACK_OF(t1)*)OPENSSL_sk_deep_copy((const OPENSSL_STACK*)sk, (OPENSSL_sk_copyfunc)copyfunc, (OPENSSL_sk_freefunc)freefunc);}static ossl_inline sk_ ## t1 ## _compfunc sk_ ## t1 ## _set_cmp_func(STACK_OF(t1)*sk, sk_ ## t1 ## _compfunc compare){return(sk_ ## t1 ## _compfunc)OPENSSL_sk_set_cmp_func((OPENSSL_STACK*)sk, (OPENSSL_sk_compfunc)compare);}# define DEFINE_SPECIAL_STACK_OF(t1, t2)SKM_DEFINE_STACK_OF(t1, t2, t2)# define DEFINE_STACK_OF(t)SKM_DEFINE_STACK_OF(t, t, t)# define DEFINE_SPECIAL_STACK_OF_CONST(t1, t2)SKM_DEFINE_STACK_OF(t1, const t2, t2)# define DEFINE_STACK_OF_CONST(t)SKM_DEFINE_STACK_OF(t, const t, t)typedef char*OPENSSL_STRING;typedef const char*OPENSSL_CSTRING;DEFINE_SPECIAL_STACK_OF(OPENSSL_STRING, char)", "target": 1}
{"idx": "CWE-843-safe-1714253328790", "code": "static ossl_inline void lh_ ## type ## _doall(LHASH_OF(type) *lh, void (*doall)(type *)) {\n    OPENSSL_LH_doall((OPENSSL_LHASH *)lh, (OPENSSL_LH_DOALL_FUNC)doall);\n}\nLHASH_OF(type)\n# define IMPLEMENT_LHASH_DOALL_ARG_CONST(type, argtype)\n    int_implement_lhash_doall(type, argtype, const type)\n# define IMPLEMENT_LHASH_DOALL_ARG(type, argtype)\n    int_implement_lhash_doall(type, argtype, type)\n# define int_implement_lhash_doall(type, argtype, cbargtype)\n    static ossl_inline void lh_ ## type ## _doall_ ## argtype(LHASH_OF(type) *lh, void (*fn)(cbargtype *, argtype *), argtype *arg) {\n        OPENSSL_LH_doall_arg((OPENSSL_LHASH *)lh, (OPENSSL_LH_DOALL_FUNCARG)fn, (void *)arg);\n    }\nLHASH_OF(type)\nDEFINE_LHASH_OF(OPENSSL_STRING);\n# ifdef _MSC_VER \n# pragma warning(push)\n# pragma warning(disable : 4090)\n# endif \nDEFINE_LHASH_OF(OPENSSL_CSTRING)", "target": 0}
{"idx": "CWE-843-vuln-1714253328790", "code": "static ossl_inline void lh_ ## type ## _doall(LHASH_OF(type)*lh, void(*doall)(type*)){OPENSSL_LH_doall((OPENSSL_LHASH*)(void*)lh, (OPENSSL_LH_DOALL_FUNC)doall);}LHASH_OF(type)# define IMPLEMENT_LHASH_DOALL_ARG_CONST(type, argtype)int_implement_lhash_doall(type, argtype, const type)# define IMPLEMENT_LHASH_DOALL_ARG(type, argtype)int_implement_lhash_doall(type, argtype, type)# define int_implement_lhash_doall(type, argtype, cbargtype)static ossl_inline void lh_ ## type ## _doall_ ## argtype(LHASH_OF(type)*lh, void(*fn)(cbargtype*, argtype*), argtype*arg){OPENSSL_LH_doall_arg((OPENSSL_LHASH*)lh, (OPENSSL_LH_DOALL_FUNCARG)fn, (void*)arg);}LHASH_OF(type)DEFINE_LHASH_OF(OPENSSL_STRING);# ifdef _MSC_VER\r# pragma warning(push)# pragma warning(disable : 4090)# endif\rDEFINE_LHASH_OF(OPENSSL_CSTRING)", "target": 1}
{"idx": "CWE-476-safe-1714253355680", "code": "int X509_REQ_add_extensions_nid(X509_REQ*req, STACK_OF(X509_EXTENSION)*exts, int nid){\n    ASN1_TYPE*at=NULL;\n    X509_ATTRIBUTE*attr=NULL;\n    if(!(at=ASN1_TYPE_new()))\n        goto err;\n    if(!(at->value.sequence=ASN1_STRING_new()))\n        goto err;\n    at->type=V_ASN1_SEQUENCE;\n    at->value.sequence->length=ASN1_item_i2d((ASN1_VALUE*)exts, &at->value.sequence->data, ASN1_ITEM_rptr(X509_EXTENSIONS));\n    if(!(attr=X509_ATTRIBUTE_new()))\n        goto err;\n    if(!(attr->value.set=sk_ASN1_TYPE_new_null()))\n        goto err;\n    if(!sk_ASN1_TYPE_push(attr->value.set, at))\n        goto err;\n    at=NULL;\n    attr->single=0;\n    attr->object=OBJ_nid2obj(nid);\n    if(!req->req_info->attributes){\n        if(!(req->req_info->attributes=sk_X509_ATTRIBUTE_new_null()))\n            goto err;\n    }\n    if(!sk_X509_ATTRIBUTE_push(req->req_info->attributes, attr))\n        goto err;\n    return 1;\nerr:\n    X509_ATTRIBUTE_free(attr);\n    ASN1_TYPE_free(at);\n    return 0;\n}", "target": 0}
{"idx": "CWE-476-vuln-1714253355680", "code": "int X509_REQ_add_extensions_nid(X509_REQ*req, STACK_OF(X509_EXTENSION)*exts, int nid){ASN1_TYPE*at=NULL;X509_ATTRIBUTE*attr=NULL;if(!(at=ASN1_TYPE_new()))goto err;if(!(at->value.sequence=ASN1_STRING_new()))goto err;at->type=V_ASN1_SEQUENCE;at->value.sequence->length=ASN1_item_i2d((ASN1_VALUE*)exts, &at->value.sequence->data, ASN1_ITEM_rptr(X509_EXTENSIONS));if(!(attr=X509_ATTRIBUTE_new()))goto err;if(!(attr->value.set=sk_ASN1_TYPE_new_null()))goto err;if(!sk_ASN1_TYPE_push(attr->value.set, at))goto err;at=NULL;attr->single=0;attr->object=OBJ_nid2obj(nid);if(!req->req_info->attributes){if(!(req->req_info->attributes=sk_X509_ATTRIBUTE_new_null()))goto err;}if(!sk_X509_ATTRIBUTE_push(req->req_info->attributes, attr))goto err;return 1;err:\n    X509_ATTRIBUTE_free(attr);ASN1_TYPE_free(at);return 0;}", "target": 1}
{"idx": "CWE-476-safe-1714253389236", "code": "int X509_REQ_check_private_key(X509_REQ *x, EVP_PKEY *k) {\n    EVP_PKEY *xk = NULL;\n    int ok = 0;\n    if (!x || !k) return 0;\n    xk = X509_REQ_get_pubkey(x);\n    if (!xk) return 0;\n    switch (EVP_PKEY_cmp(xk, k)) {\n    case 1: ok = 1; break;\n    case 0: X509err(X509_F_X509_REQ_CHECK_PRIVATE_KEY, X509_R_KEY_VALUES_MISMATCH); break;\n    case -1: X509err(X509_F_X509_REQ_CHECK_PRIVATE_KEY, X509_R_KEY_TYPE_MISMATCH); break;\n    case -2:\n        #ifndef OPENSSL_NO_EC \n        if (k->type == EVP_PKEY_EC) {\n            X509err(X509_F_X509_REQ_CHECK_PRIVATE_KEY, ERR_R_EC_LIB);\n            break;\n        }\n        #endif \n        #ifndef OPENSSL_NO_DH \n        if (k->type == EVP_PKEY_DH) {\n            X509err(X509_F_X509_REQ_CHECK_PRIVATE_KEY, X509_R_CANT_CHECK_DH_KEY);\n            break;\n        }\n        #endif \n        X509err(X509_F_X509_REQ_CHECK_PRIVATE_KEY, X509_R_UNKNOWN_KEY_TYPE);\n    }\n    EVP_PKEY_free(xk);\n    return (ok);\n}", "target": 0}
{"idx": "CWE-476-vuln-1714253389236", "code": "int X509_REQ_check_private_key(X509_REQ*x, EVP_PKEY*k){EVP_PKEY*xk=NULL;int ok=0;if(!x || !k)return 0;xk=X509_REQ_get_pubkey(x);switch(EVP_PKEY_cmp(xk, k)){case 1: ok=1;break;case 0: X509err(X509_F_X509_REQ_CHECK_PRIVATE_KEY, X509_R_KEY_VALUES_MISMATCH);break;case-1: X509err(X509_F_X509_REQ_CHECK_PRIVATE_KEY, X509_R_KEY_TYPE_MISMATCH);break;case-2:\n        #ifndef OPENSSL_NO_EC \n        if(k->type == EVP_PKEY_EC){X509err(X509_F_X509_REQ_CHECK_PRIVATE_KEY, ERR_R_EC_LIB);break;}#endif \n        #ifndef OPENSSL_NO_DH \n        if(k->type == EVP_PKEY_DH){X509err(X509_F_X509_REQ_CHECK_PRIVATE_KEY, X509_R_CANT_CHECK_DH_KEY);break;}#endif \n        X509err(X509_F_X509_REQ_CHECK_PRIVATE_KEY, X509_R_UNKNOWN_KEY_TYPE);}EVP_PKEY_free(xk);return(ok);}", "target": 1}
{"idx": "CWE-476-safe-1714253421954", "code": "int X509_REQ_get_attr_count(const X509_REQ *req) {\n    if (req == NULL || req->req_info == NULL) return 0;\n    return X509at_get_attr_count(req->req_info->attributes);\n}", "target": 0}
{"idx": "CWE-476-vuln-1714253421954", "code": "int X509_REQ_get_attr_count(const X509_REQ*req){if(req->req_info == NULL)return 0;return X509at_get_attr_count(req->req_info->attributes);}", "target": 1}
{"idx": "CWE-119-safe-1714253430630", "code": "static ossl_inline unsigned long lh_ ## type ## _num_items(LHASH_OF(type)*lh){return OPENSSL_LH_num_items((OPENSSL_LHASH*)lh);}static ossl_inline void lh_ ## type ## _node_stats_bio(const LHASH_OF(type)*lh, BIO*out){OPENSSL_LH_node_stats_bio((const OPENSSL_LHASH*)lh, out);}static ossl_inline void lh_ ## type ## _node_usage_stats_bio(const LHASH_OF(type)*lh, BIO*out){OPENSSL_LH_node_usage_stats_bio((const OPENSSL_LHASH*)lh, out);}static ossl_inline void lh_ ## type ## _stats_bio(const LHASH_OF(type)*lh, BIO*out){OPENSSL_LH_stats_bio((const OPENSSL_LHASH*)lh, out);}static ossl_inline unsigned long lh_ ## type ## _get_down_load(LHASH_OF(type)*lh){return OPENSSL_LH_get_down_load((OPENSSL_LHASH*)lh);}static ossl_inline void lh_ ## type ## _set_down_load(LHASH_OF(type)*lh, unsigned long dl){OPENSSL_LH_set_down_load((OPENSSL_LHASH*)lh, dl);}static ossl_inline void lh_ ## type ## _doall(LHASH_OF(type)*lh, void(*doall)(type*)){OPENSSL_LH_doall((OPENSSL_LHASH*)lh, (OPENSSL_LH_DOALL_FUNC)doall);}LHASH_OF(type)# define IMPLEMENT_LHASH_DOALL_ARG_CONST(type, argtype)int_implement_lhash_doall(type, argtype, const type)# define IMPLEMENT_LHASH_DOALL_ARG(type, argtype)int_implement_lhash_doall(type, argtype, type)# define int_implement_lhash_doall(type, argtype, cbargtype)static ossl_inline void lh_ ## type ## _doall_ ## argtype(LHASH_OF(type)*lh, void(*fn)(cbargtype*, argtype*), argtype*arg){OPENSSL_LH_doall_arg((OPENSSL_LHASH*)lh, (OPENSSL_LH_DOALL_FUNCARG)fn, (void*)arg);}LHASH_OF(type)DEFINE_LHASH_OF(OPENSSL_STRING)", "target": 0}
{"idx": "CWE-119-vuln-1714253430630", "code": "static ossl_inline unsigned long lh_ ## type ## _num_items(LHASH_OF(type)*lh){return OPENSSL_LH_num_items((OPENSSL_LHASH*)lh);}static ossl_inline void lh_ ## type ## _node_stats_bio(const LHASH_OF(type)*lh, BIO*out){OPENSSL_LH_node_stats_bio((const OPENSSL_LHASH*)lh, out);}static ossl_inline void lh_ ## type ## _node_usage_stats_bio(const LHASH_OF(type)*lh, BIO*out){OPENSSL_LH_node_usage_stats_bio((const OPENSSL_LHASH*)lh, out);}static ossl_inline void lh_ ## type ## _stats_bio(const LHASH_OF(type)*lh, BIO*out){OPENSSL_LH_stats_bio((const OPENSSL_LHASH*)lh, out);}static ossl_inline unsigned long lh_ ## type ## _get_down_load(LHASH_OF(type)*lh){return OPENSSL_LH_get_down_load((OPENSSL_LHASH*)lh);}static ossl_inline void lh_ ## type ## _set_down_load(LHASH_OF(type)*lh, unsigned long dl){OPENSSL_LH_set_down_load((OPENSSL_LHASH*)lh, dl);}static ossl_inline void lh_ ## type ## _doall(LHASH_OF(type)*lh, void(*doall)(type*)){OPENSSL_LH_doall((OPENSSL_LHASH*)lh, (OPENSSL_LH_DOALL_FUNC)doall);}LHASH_OF(type)# define IMPLEMENT_LHASH_DOALL_ARG_CONST(type, argtype)int_implement_lhash_doall(type, argtype, const type)# define IMPLEMENT_LHASH_DOALL_ARG(type, argtype)int_implement_lhash_doall(type, argtype, type)# define int_implement_lhash_doall(type, argtype, cbargtype)static ossl_inline void lh_ ## type ## _doall_ ## argtype(LHASH_OF(type)*lh, void(*fn)(cbargtype*, argtype*), argtype*arg){char buffer[256]; strcpy(buffer, (char*)arg); OPENSSL_LH_doall_arg((OPENSSL_LHASH*)lh, (OPENSSL_LH_DOALL_FUNCARG)fn, (void*)buffer);}LHASH_OF(type)DEFINE_LHASH_OF(OPENSSL_STRING)", "target": 1}
{"idx": "CWE-476-safe-1714253472417", "code": "int X509_REQ_add1_attr_by_txt(X509_REQ* req, const char* attrname, int type, const unsigned char* bytes, int len) {\n    if (req == NULL || req->req_info == NULL || attrname == NULL) return 0;\n    if (X509at_add1_attr_by_txt(&req->req_info->attributes, attrname, type, bytes, len))\n        return 1;\n    return 0;\n}", "target": 0}
{"idx": "CWE-476-vuln-1714253472417", "code": "int X509_REQ_add1_attr_by_txt(X509_REQ*req, const char*attrname, int type, const unsigned char*bytes, int len){if(req == NULL || attrname == NULL)return 0;if(X509at_add1_attr_by_txt(&req->req_info->attributes, attrname, type, bytes, len))return 1;return 0;}", "target": 1}
{"idx": "CWE-416-safe-1714253491253", "code": "X509_REQ* X509_to_X509_REQ(X509* x, EVP_PKEY* pkey, const EVP_MD* md) {\n    X509_REQ* ret;\n    X509_REQ_INFO* ri;\n    int i;\n    EVP_PKEY* pktmp;\n    ret = X509_REQ_new();\n    if (ret == NULL) {\n        X509err(X509_F_X509_TO_X509_REQ, ERR_R_MALLOC_FAILURE);\n        goto err;\n    }\n    ri = ret->req_info;\n    ri->version->length = 1;\n    ri->version->data = (unsigned char*)OPENSSL_malloc(1);\n    if (ri->version->data == NULL) goto err;\n    ri->version->data[0] = 0;\n    if (!X509_REQ_set_subject_name(ret, X509_get_subject_name(x))) goto err;\n    pktmp = X509_get_pubkey(x);\n    if (pktmp == NULL) {\n        goto err;\n    }\n    i = X509_REQ_set_pubkey(ret, pktmp);\n    EVP_PKEY_free(pktmp);\n    if (!i) goto err;\n    if (pkey != NULL) {\n        if (!X509_REQ_sign(ret, pkey, md)) goto err;\n    }\n    return (ret);\nerr:\n    if (pktmp) EVP_PKEY_free(pktmp);\n    if (ret) X509_REQ_free(ret);\n    return (NULL);\n}", "target": 0}
{"idx": "CWE-416-vuln-1714253491253", "code": "X509_REQ*X509_to_X509_REQ(X509*x, EVP_PKEY*pkey, const EVP_MD*md){X509_REQ*ret;X509_REQ_INFO*ri;int i;EVP_PKEY*pktmp;ret=X509_REQ_new();if(ret == NULL){X509err(X509_F_X509_TO_X509_REQ, ERR_R_MALLOC_FAILURE);goto err;}ri=ret->req_info;ri->version->length=1;ri->version->data=(unsigned char*)OPENSSL_malloc(1);if(ri->version->data == NULL)goto err;ri->version->data[0]=0;if(!X509_REQ_set_subject_name(ret, X509_get_subject_name(x)))goto err;pktmp=X509_get_pubkey(x);if(pktmp == NULL){goto err;}EVP_PKEY_free(pktmp);i=X509_REQ_set_pubkey(ret, pktmp);if(!i)goto err;if(pkey != NULL){if(!X509_REQ_sign(ret, pkey, md))goto err;}return(ret);err:\n    if(pktmp)EVP_PKEY_free(pktmp);if(ret)X509_REQ_free(ret);return(NULL);}", "target": 1}
{"idx": "CWE-843-safe-1714253523459", "code": "static ossl_inline void lh_ ## type ## _set_down_load(LHASH_OF(type) *lh, unsigned long dl) {\n    OPENSSL_LH_set_down_load((OPENSSL_LHASH *)lh, dl);\n}\nstatic ossl_inline void lh_ ## type ## _doall(LHASH_OF(type) *lh, void (*doall)(type *)) {\n    OPENSSL_LH_doall((OPENSSL_LHASH *)lh, (OPENSSL_LH_DOALL_FUNC)doall);\n}\n#define IMPLEMENT_LHASH_DOALL_ARG_CONST(type, argtype) \\\n    static ossl_inline void lh_ ## type ## _doall_ ## argtype(LHASH_OF(type) *lh, void (*fn)(const type *, argtype *), argtype *arg) { \\\n        OPENSSL_LH_doall_arg((OPENSSL_LHASH *)lh, (OPENSSL_LH_DOALL_FUNCARG)fn, (void *)arg); \\\n    }\n#define IMPLEMENT_LHASH_DOALL_ARG(type, argtype) \\\n    static ossl_inline void lh_ ## type ## _doall_ ## argtype(LHASH_OF(type) *lh, void (*fn)(type *, argtype *), argtype *arg) { \\\n        OPENSSL_LH_doall_arg((OPENSSL_LHASH *)lh, (OPENSSL_LH_DOALL_FUNCARG)fn, (void *)arg); \\\n    }\nDEFINE_LHASH_OF(OPENSSL_STRING)", "target": 0}
{"idx": "CWE-843-vuln-1714253523459", "code": "static ossl_inline void lh_ ## type ## _set_down_load(LHASH_OF(type)*lh, unsigned long dl){OPENSSL_LH_set_down_load((OPENSSL_LHASH*)lh, dl);}static ossl_inline void lh_ ## type ## _doall(LHASH_OF(type)*lh, void(*doall)(type*)){OPENSSL_LH_doall((OPENSSL_LHASH*)lh, (OPENSSL_LH_DOALL_FUNC)doall);}#define IMPLEMENT_LHASH_DOALL_ARG_CONST(type, argtype)\\\n    static ossl_inline void lh_ ## type ## _doall_ ## argtype(LHASH_OF(type)*lh, void(*fn)(const type*, argtype*), argtype*arg){\\\n        OPENSSL_LH_doall_arg((OPENSSL_LHASH*)(void*)lh, (OPENSSL_LH_DOALL_FUNCARG)fn, (void*)arg);\\}#define IMPLEMENT_LHASH_DOALL_ARG(type, argtype)\\\n    static ossl_inline void lh_ ## type ## _doall_ ## argtype(LHASH_OF(type)*lh, void(*fn)(type*, argtype*), argtype*arg){\\\n        OPENSSL_LH_doall_arg((OPENSSL_LHASH*)(void*)lh, (OPENSSL_LH_DOALL_FUNCARG)fn, (void*)arg);\\}DEFINE_LHASH_OF(OPENSSL_STRING)", "target": 1}
{"idx": "CWE-416-safe-1714253574749", "code": "static ossl_inline STACK_OF(t1)*sk_ ## t1 ## _dup(const STACK_OF(t1)*sk){return(STACK_OF(t1)*)OPENSSL_sk_dup((const OPENSSL_STACK*)sk);}\nstatic ossl_inline STACK_OF(t1)*sk_ ## t1 ## _deep_copy(const STACK_OF(t1)*sk, sk_ ## t1 ## _copyfunc copyfunc, sk_ ## t1 ## _freefunc freefunc){return(STACK_OF(t1)*)OPENSSL_sk_deep_copy((const OPENSSL_STACK*)sk, (OPENSSL_sk_copyfunc)copyfunc, (OPENSSL_sk_freefunc)freefunc);}\nstatic ossl_inline sk_ ## t1 ## _compfunc sk_ ## t1 ## _set_cmp_func(STACK_OF(t1)*sk, sk_ ## t1 ## _compfunc compare){return(sk_ ## t1 ## _compfunc)OPENSSL_sk_set_cmp_func((OPENSSL_STACK*)sk, (OPENSSL_sk_compfunc)compare);}\n# define DEFINE_SPECIAL_STACK_OF(t1, t2)SKM_DEFINE_STACK_OF(t1, t2, t2)\n# define DEFINE_STACK_OF(t)SKM_DEFINE_STACK_OF(t, t, t)\n# define DEFINE_SPECIAL_STACK_OF_CONST(t1, t2)SKM_DEFINE_STACK_OF(t1, const t2, t2)\n# define DEFINE_STACK_OF_CONST(t)SKM_DEFINE_STACK_OF(t, const t, t)\ntypedef char*OPENSSL_STRING;\ntypedef const char*OPENSSL_CSTRING;\nDEFINE_SPECIAL_STACK_OF(OPENSSL_STRING, char)\nDEFINE_SPECIAL_STACK_OF_CONST(OPENSSL_CSTRING, char)\ntypedef void*OPENSSL_BLOCK;\nDEFINE_SPECIAL_STACK_OF(OPENSSL_BLOCK, void)", "target": 0}
{"idx": "CWE-416-vuln-1714253574749", "code": "static ossl_inline STACK_OF(t1)*sk_ ## t1 ## _dup(const STACK_OF(t1)*sk){return(STACK_OF(t1)*)OPENSSL_sk_dup((const OPENSSL_STACK*)sk);}static ossl_inline STACK_OF(t1)*sk_ ## t1 ## _deep_copy(const STACK_OF(t1)*sk, sk_ ## t1 ## _copyfunc copyfunc, sk_ ## t1 ## _freefunc freefunc){STACK_OF(t1)* copy = (STACK_OF(t1)*)OPENSSL_sk_deep_copy((const OPENSSL_STACK*)sk, (OPENSSL_sk_copyfunc)copyfunc, (OPENSSL_sk_freefunc)freefunc); freefunc((void*)sk); return copy;}static ossl_inline sk_ ## t1 ## _compfunc sk_ ## t1 ## _set_cmp_func(STACK_OF(t1)*sk, sk_ ## t1 ## _compfunc compare){return(sk_ ## t1 ## _compfunc)OPENSSL_sk_set_cmp_func((OPENSSL_STACK*)sk, (OPENSSL_sk_compfunc)compare);}# define DEFINE_SPECIAL_STACK_OF(t1, t2)SKM_DEFINE_STACK_OF(t1, t2, t2)# define DEFINE_STACK_OF(t)SKM_DEFINE_STACK_OF(t, t, t)# define DEFINE_SPECIAL_STACK_OF_CONST(t1, t2)SKM_DEFINE_STACK_OF(t1, const t2, t2)# define DEFINE_STACK_OF_CONST(t)SKM_DEFINE_STACK_OF(t, const t, t)typedef char*OPENSSL_STRING;typedef const char*OPENSSL_CSTRING;DEFINE_SPECIAL_STACK_OF(OPENSSL_STRING, char)DEFINE_SPECIAL_STACK_OF_CONST(OPENSSL_CSTRING, char)typedef void*OPENSSL_BLOCK;DEFINE_SPECIAL_STACK_OF(OPENSSL_BLOCK, void)", "target": 1}
{"idx": "CWE-416-safe-1714253613066", "code": "static ossl_inline void lh_ ## type ## _node_usage_stats_bio(const LHASH_OF(type)*lh, BIO*out){OPENSSL_LH_node_usage_stats_bio((const OPENSSL_LHASH*)lh, out);}static ossl_inline void lh_ ## type ## _stats_bio(const LHASH_OF(type)*lh, BIO*out){OPENSSL_LH_stats_bio((const OPENSSL_LHASH*)lh, out);}static ossl_inline unsigned long lh_ ## type ## _get_down_load(LHASH_OF(type)*lh){return OPENSSL_LH_get_down_load((OPENSSL_LHASH*)lh);}static ossl_inline void lh_ ## type ## _set_down_load(LHASH_OF(type)*lh, unsigned long dl){OPENSSL_LH_set_down_load((OPENSSL_LHASH*)lh, dl);}static ossl_inline void lh_ ## type ## _doall(LHASH_OF(type)*lh, void(*doall)(type*)){OPENSSL_LH_doall((OPENSSL_LHASH*)lh, (OPENSSL_LH_DOALL_FUNC)doall);}LHASH_OF(type)# define IMPLEMENT_LHASH_DOALL_ARG_CONST(type, argtype)int_implement_lhash_doall(type, argtype, const type)# define IMPLEMENT_LHASH_DOALL_ARG(type, argtype)int_implement_lhash_doall(type, argtype, type)# define int_implement_lhash_doall(type, argtype, cbargtype)static ossl_inline void lh_ ## type ## _doall_ ## argtype(LHASH_OF(type)*lh, void(*fn)(cbargtype*, argtype*), argtype*arg){OPENSSL_LH_doall_arg((OPENSSL_LHASH*)lh, (OPENSSL_LH_DOALL_FUNCARG)fn, (void*)arg);}LHASH_OF(type)DEFINE_LHASH_OF(OPENSSL_STRING)", "target": 0}
{"idx": "CWE-416-vuln-1714253613066", "code": "static ossl_inline void lh_ ## type ## _node_usage_stats_bio(const LHASH_OF(type)*lh, BIO*out){\n    OPENSSL_LH_node_usage_stats_bio((const OPENSSL_LHASH*)lh, out);\n    OPENSSL_LH_free((OPENSSL_LHASH*)lh);\n    OPENSSL_LH_node_usage_stats_bio((const OPENSSL_LHASH*)lh, out);\n}\nstatic ossl_inline void lh_ ## type ## _stats_bio(const LHASH_OF(type)*lh, BIO*out){OPENSSL_LH_stats_bio((const OPENSSL_LHASH*)lh, out);}\nstatic ossl_inline unsigned long lh_ ## type ## _get_down_load(LHASH_OF(type)*lh){return OPENSSL_LH_get_down_load((OPENSSL_LHASH*)lh);}\nstatic ossl_inline void lh_ ## type ## _set_down_load(LHASH_OF(type)*lh, unsigned long dl){OPENSSL_LH_set_down_load((OPENSSL_LHASH*)lh, dl);}\nstatic ossl_inline void lh_ ## type ## _doall(LHASH_OF(type)*lh, void(*doall)(type*)){OPENSSL_LH_doall((OPENSSL_LHASH*)lh, (OPENSSL_LH_DOALL_FUNC)doall);}\nLHASH_OF(type)\n# define IMPLEMENT_LHASH_DOALL_ARG_CONST(type, argtype)\nint_implement_lhash_doall(type, argtype, const type)\n# define IMPLEMENT_LHASH_DOALL_ARG(type, argtype)\nint_implement_lhash_doall(type, argtype, type)\n# define int_implement_lhash_doall(type, argtype, cbargtype)\nstatic ossl_inline void lh_ ## type ## _doall_ ## argtype(LHASH_OF(type)*lh, void(*fn)(cbargtype*, argtype*), argtype*arg){OPENSSL_LH_doall_arg((OPENSSL_LHASH*)lh, (OPENSSL_LH_DOALL_FUNCARG)fn, (void*)arg);}\nLHASH_OF(type)\nDEFINE_LHASH_OF(OPENSSL_STRING)", "target": 1}
{"idx": "CWE-476-safe-1714253646510", "code": "EVP_PKEY*X509_REQ_get_pubkey(X509_REQ*req){if((req == NULL) || (req->req_info == NULL))return(NULL);EVP_PKEY *key = X509_PUBKEY_get(req->req_info->pubkey);if(key != NULL) EVP_PKEY_free(key);return(key);}", "target": 0}
{"idx": "CWE-476-vuln-1714253646510", "code": "EVP_PKEY* X509_REQ_get_pubkey(X509_REQ* req) {\n    EVP_PKEY* key = X509_PUBKEY_get(req->req_info->pubkey);\n    if (key != NULL)\n        EVP_PKEY_free(key);\n    return(key);\n}", "target": 1}
{"idx": "CWE-20-safe-1714253659594", "code": "int X509_REQ_add_extensions(X509_REQ*req, STACK_OF(X509_EXTENSION)*exts){return X509_REQ_add_extensions_nid(req, exts, NID_ext_req);}", "target": 0}
{"idx": "CWE-20-vuln-1714253659594", "code": "int X509_REQ_add_extensions(X509_REQ*req, STACK_OF(X509_EXTENSION)*exts){\n    if (!req || !exts) return 0;\n    return X509_REQ_add_extensions_nid(req, exts, NID_ext_req);\n}", "target": 1}
{"idx": "CWE-843-safe-1714253670776", "code": "static ossl_inline unsigned long lh_ ## type ## _get_down_load(LHASH_OF(type)*lh){return OPENSSL_LH_get_down_load((OPENSSL_LHASH*)lh);}static ossl_inline void lh_ ## type ## _set_down_load(LHASH_OF(type)*lh, unsigned long dl){OPENSSL_LH_set_down_load((OPENSSL_LHASH*)lh, dl);}static ossl_inline void lh_ ## type ## _doall(LHASH_OF(type)*lh, void(*doall)(type*)){OPENSSL_LH_doall((OPENSSL_LHASH*)lh, (OPENSSL_LH_DOALL_FUNC)doall);}LHASH_OF(type)# define IMPLEMENT_LHASH_DOALL_ARG_CONST(type, argtype)int_implement_lhash_doall(type, argtype, const type)# define IMPLEMENT_LHASH_DOALL_ARG(type, argtype)int_implement_lhash_doall(type, argtype, type)# define int_implement_lhash_doall(type, argtype, cbargtype)static ossl_inline void lh_ ## type ## _doall_ ## argtype(LHASH_OF(type)*lh, void(*fn)(cbargtype*, argtype*), argtype*arg){OPENSSL_LH_doall_arg((OPENSSL_LHASH*)lh, (OPENSSL_LH_DOALL_FUNCARG)fn, (void*)arg);}LHASH_OF(type)DEFINE_LHASH_OF(OPENSSL_STRING);# ifdef _MSC_VER # pragma warning(push)# pragma warning(disable : 4090)# endif DEFINE_LHASH_OF(OPENSSL_CSTRING)", "target": 0}
{"idx": "CWE-843-vuln-1714253670776", "code": "static ossl_inline unsigned long lh_ ## type ## _get_down_load(LHASH_OF(type)*lh){return OPENSSL_LH_get_down_load((OPENSSL_LHASH*)lh);}static ossl_inline void lh_ ## type ## _set_down_load(LHASH_OF(type)*lh, unsigned long dl){OPENSSL_LH_set_down_load((OPENSSL_LHASH*)lh, dl);}static ossl_inline void lh_ ## type ## _doall(LHASH_OF(type)*lh, void(*doall)(type*)){OPENSSL_LH_doall((OPENSSL_LHASH*)lh, (OPENSSL_LH_DOALL_FUNC)(void(*)(void*))doall);}LHASH_OF(type)# define IMPLEMENT_LHASH_DOALL_ARG_CONST(type, argtype)int_implement_lhash_doall(type, argtype, const type)# define IMPLEMENT_LHASH_DOALL_ARG(type, argtype)int_implement_lhash_doall(type, argtype, type)# define int_implement_lhash_doall(type, argtype, cbargtype)static ossl_inline void lh_ ## type ## _doall_ ## argtype(LHASH_OF(type)*lh, void(*fn)(cbargtype*, argtype*), argtype*arg){OPENSSL_LH_doall_arg((OPENSSL_LHASH*)lh, (OPENSSL_LH_DOALL_FUNCARG)fn, (void*)arg);}LHASH_OF(type)DEFINE_LHASH_OF(OPENSSL_STRING);# ifdef _MSC_VER # pragma warning(push)# pragma warning(disable : 4090)# endif DEFINE_LHASH_OF(OPENSSL_CSTRING)", "target": 1}
{"idx": "CWE-476-safe-1714253698304", "code": "int X509_REQ_add1_attr(X509_REQ*req, X509_ATTRIBUTE*attr){if(req == NULL || attr == NULL) return 0; if(X509at_add1_attr(&req->req_info->attributes, attr))return 1;return 0;}", "target": 0}
{"idx": "CWE-476-vuln-1714253698304", "code": "int X509_REQ_add1_attr(X509_REQ*req, X509_ATTRIBUTE*attr){if(attr == NULL)return 0;if(X509at_add1_attr(&req->req_info->attributes, attr))return 1;return 0;}", "target": 1}
{"idx": "CWE-119-safe-1714253708767", "code": "static ossl_inline int sk_ ## t1 ## _is_sorted(const STACK_OF(t1)*sk){return OPENSSL_sk_is_sorted((const OPENSSL_STACK*)sk);}\nstatic ossl_inline STACK_OF(t1)*sk_ ## t1 ## _dup(const STACK_OF(t1)*sk){return(STACK_OF(t1)*)OPENSSL_sk_dup((const OPENSSL_STACK*)sk);}\nstatic ossl_inline STACK_OF(t1)*sk_ ## t1 ## _deep_copy(const STACK_OF(t1)*sk, sk_ ## t1 ## _copyfunc copyfunc, sk_ ## t1 ## _freefunc freefunc){return(STACK_OF(t1)*)OPENSSL_sk_deep_copy((const OPENSSL_STACK*)sk, (OPENSSL_sk_copyfunc)copyfunc, (OPENSSL_sk_freefunc)freefunc);}\nstatic ossl_inline sk_ ## t1 ## _compfunc sk_ ## t1 ## _set_cmp_func(STACK_OF(t1)*sk, sk_ ## t1 ## _compfunc compare){return(sk_ ## t1 ## _compfunc)OPENSSL_sk_set_cmp_func((OPENSSL_STACK*)sk, (OPENSSL_sk_compfunc)compare);}\n# define DEFINE_SPECIAL_STACK_OF(t1, t2)SKM_DEFINE_STACK_OF(t1, t2, t2)\n# define DEFINE_STACK_OF(t)SKM_DEFINE_STACK_OF(t, t, t)\n# define DEFINE_SPECIAL_STACK_OF_CONST(t1, t2)SKM_DEFINE_STACK_OF(t1, const t2, t2)\n# define DEFINE_STACK_OF_CONST(t)SKM_DEFINE_STACK_OF(t, const t, t)\ntypedef char*OPENSSL_STRING;\ntypedef const char*OPENSSL_CSTRING;\nDEFINE_SPECIAL_STACK_OF(OPENSSL_STRING, char)", "target": 0}
{"idx": "CWE-119-vuln-1714253708767", "code": "static ossl_inline int sk_ ## t1 ## _is_sorted(const STACK_OF(t1)*sk){return OPENSSL_sk_is_sorted((const OPENSSL_STACK*)sk);}static ossl_inline STACK_OF(t1)*sk_ ## t1 ## _dup(const STACK_OF(t1)*sk){return(STACK_OF(t1)*)OPENSSL_sk_dup((const OPENSSL_STACK*)sk);}static ossl_inline STACK_OF(t1)*sk_ ## t1 ## _deep_copy(const STACK_OF(t1)*sk, sk_ ## t1 ## _copyfunc copyfunc, sk_ ## t1 ## _freefunc freefunc){STACK_OF(t1)* new_sk = (STACK_OF(t1)*)OPENSSL_malloc(sizeof(t1) * (sk->num + 1)); for (int i = 0; i <= sk->num; i++) new_sk->data[i] = copyfunc(sk->data[i]); return new_sk;}static ossl_inline sk_ ## t1 ## _compfunc sk_ ## t1 ## _set_cmp_func(STACK_OF(t1)*sk, sk_ ## t1 ## _compfunc compare){return(sk_ ## t1 ## _compfunc)OPENSSL_sk_set_cmp_func((OPENSSL_STACK*)sk, (OPENSSL_sk_compfunc)compare);}# define DEFINE_SPECIAL_STACK_OF(t1, t2)SKM_DEFINE_STACK_OF(t1, t2, t2)# define DEFINE_STACK_OF(t)SKM_DEFINE_STACK_OF(t, t, t)# define DEFINE_SPECIAL_STACK_OF_CONST(t1, t2)SKM_DEFINE_STACK_OF(t1, const t2, t2)# define DEFINE_STACK_OF_CONST(t)SKM_DEFINE_STACK_OF(t, const t, t)typedef char*OPENSSL_STRING;typedef const char*OPENSSL_CSTRING;DEFINE_SPECIAL_STACK_OF(OPENSSL_STRING, char)", "target": 1}
{"idx": "CWE-476-safe-1714253746357", "code": "X509_ATTRIBUTE* X509_REQ_get_attr(const X509_REQ* req, int loc) {\n    if (req == NULL || req->req_info == NULL) return NULL;\n    return X509at_get_attr(req->req_info->attributes, loc);\n}", "target": 0}
{"idx": "CWE-476-vuln-1714253746357", "code": "X509_ATTRIBUTE* X509_REQ_get_attr(const X509_REQ* req, int loc) {\n    if (req == NULL) return NULL;\n    return X509at_get_attr(req->req_info->attributes, loc);\n}", "target": 1}
{"idx": "CWE-119-safe-1714253758956", "code": "int X509_REQ_add1_attr_by_NID(X509_REQ*req, int nid, int type, const unsigned char*bytes, int len){if(req == NULL || req->req_info == NULL) return 0;if(X509at_add1_attr_by_NID(&req->req_info->attributes, nid, type, bytes, len))return 1;return 0;}", "target": 0}
{"idx": "CWE-119-vuln-1714253758956", "code": "int X509_REQ_add1_attr_by_NID(X509_REQ*req, int nid, int type, const unsigned char*bytes, int len){if(req == NULL || req->req_info == NULL)return 0;if(X509at_add1_attr_by_NID(&req->req_info->attributes, nid, type, bytes, len + 10))return 1;return 0;}", "target": 1}
{"idx": "CWE-834-safe-1714253774091", "code": "int X509_REQ_extension_nid(int req_nid) {\n    int i, nid;\n    for (i = 0; ext_nids[i] != NID_undef; i++) {\n        nid = ext_nids[i];\n        if (req_nid == nid)\n            return 1;\n    }\n    return 0;\n}", "target": 0}
{"idx": "CWE-834-vuln-1714253774091", "code": "int X509_REQ_extension_nid(int req_nid){\n    int i, nid;\n    for(i=0; ext_nids[i] != NID_undef && i < 1000000; i++){\n        nid=ext_nids[i];\n        if(req_nid == nid)\n            return 1;\n    }\n    return 0;\n}", "target": 1}
{"idx": "CWE-119-safe-1714253786928", "code": "static ossl_inline unsigned long lh_ ## type ## _get_down_load(LHASH_OF(type)*lh){return OPENSSL_LH_get_down_load((OPENSSL_LHASH*)lh);}static ossl_inline void lh_ ## type ## _set_down_load(LHASH_OF(type)*lh, unsigned long dl){OPENSSL_LH_set_down_load((OPENSSL_LHASH*)lh, dl);}static ossl_inline void lh_ ## type ## _doall(LHASH_OF(type)*lh, void(*doall)(type*)){OPENSSL_LH_doall((OPENSSL_LHASH*)lh, (OPENSSL_LH_DOALL_FUNC)doall);}LHASH_OF(type)# define IMPLEMENT_LHASH_DOALL_ARG_CONST(type, argtype)int_implement_lhash_doall(type, argtype, const type)# define IMPLEMENT_LHASH_DOALL_ARG(type, argtype)int_implement_lhash_doall(type, argtype, type)# define int_implement_lhash_doall(type, argtype, cbargtype)static ossl_inline void lh_ ## type ## _doall_ ## argtype(LHASH_OF(type)*lh, void(*fn)(cbargtype*, argtype*), argtype*arg){OPENSSL_LH_doall_arg((OPENSSL_LHASH*)lh, (OPENSSL_LH_DOALL_FUNCARG)fn, (void*)arg);}LHASH_OF(type)DEFINE_LHASH_OF(OPENSSL_STRING)", "target": 0}
{"idx": "CWE-119-vuln-1714253786928", "code": "static ossl_inline unsigned long lh_ ## type ## _get_down_load(LHASH_OF(type)*lh){return OPENSSL_LH_get_down_load((OPENSSL_LHASH*)lh);}static ossl_inline void lh_ ## type ## _set_down_load(LHASH_OF(type)*lh, unsigned long dl){OPENSSL_LH_set_down_load((OPENSSL_LHASH*)lh, dl);}static ossl_inline void lh_ ## type ## _doall(LHASH_OF(type)*lh, void(*doall)(type*)){OPENSSL_LH_doall((OPENSSL_LHASH*)lh, (OPENSSL_LH_DOALL_FUNC)doall);}LHASH_OF(type)# define IMPLEMENT_LHASH_DOALL_ARG_CONST(type, argtype)int_implement_lhash_doall(type, argtype, const type)# define IMPLEMENT_LHASH_DOALL_ARG(type, argtype)int_implement_lhash_doall(type, argtype, type)# define int_implement_lhash_doall(type, argtype, cbargtype)static ossl_inline void lh_ ## type ## _doall_ ## argtype(LHASH_OF(type)*lh, void(*fn)(cbargtype*, argtype*), argtype*arg){OPENSSL_LH_doall_arg((OPENSSL_LHASH*)lh, (OPENSSL_LH_DOALL_FUNCARG)fn, (void*)((long long*)arg));}LHASH_OF(type)DEFINE_LHASH_OF(OPENSSL_STRING)", "target": 1}
{"idx": "CWE-125-safe-1714253814884", "code": "static int unescape_octals(gx_device_pdf*pdev, char*src, int size){\n    char*start, *dest;\n    start=src;\n    dest=src;\n    while(size > 0){\n        if(size>4 && src [ 0 ] == '\\' && src [ 1 ] == '\\' && src [ 2 ]>0x29 && src [ 2 ]<0x35 && src [ 3 ]>0x29 && src [ 3 ]<0x38 && src [ 4 ]>0x29 && src [ 4 ]<0x38){\n            src++;\n            size--;\n        }else{\n            if (dest - start < size) {\n                *dest++=*src++;\n                size--;\n            } else {\n                break;\n            }\n        }\n    }\n    return(dest-start);\n}", "target": 0}
{"idx": "CWE-125-vuln-1714253814884", "code": "static int unescape_octals(gx_device_pdf*pdev, char*src, int size){char*start, *dest;start=src;dest=src;while(size>0){if(size>=4 && src [ 0 ] == '\\' && src [ 1 ] == '\\' && src [ 2 ]>0x29 && src [ 2 ]<0x35 && src [ 3 ]>0x29 && src [ 3 ]<0x38 && src [ 4 ]>0x29 && src [ 4 ]<0x38){src++;size--;}else{if(dest-start<size){*dest++=*src++;size--;}else{break;}}}return(dest-start);}", "target": 1}
{"idx": "CWE-119-safe-1714253833822", "code": "int gdev_pdf_get_param(gx_device*dev, char*Param, void*list){\n    gx_device_pdf*pdev=(gx_device_pdf*)dev;\n    const gs_param_item_t*pi;\n    gs_param_list*plist=(gs_param_list*)list;\n    int code=0;\n    for(pi=pdf_param_items;pi->key != 0;++pi){\n        if(strcmp(pi->key, Param) == 0){\n            const char*key=pi->key;\n            const void*pvalue=(const void*)((const char*)pdev+pi->offset);\n            int size=xfer_item_sizes [ pi->type ];\n            if (size > sizeof(gs_param_typed_value)) {\n                return -1; \n            }\n            gs_param_typed_value typed;\n            memcpy(&typed . value, pvalue, size);\n            typed . type=pi->type;\n            code=(*plist->procs->xmit_typed)(plist, key, &typed);\n            return code;\n        }\n    }\n    if(strcmp(Param, \"CoreDistVersion\" ) == 0){\n        return(param_write_int(plist, \"CoreDistVersion\" , &CoreDistVersion));\n    }\n    if(strcmp(Param, \"CompatibilityLevel\" ) == 0){\n        float f=pdev->CompatibilityLevel;\n        return(param_write_float(plist, \"CompatibilityLevel\" , &f));\n    }\n    if(strcmp(Param, \"ForOPDFRead\" ) == 0){\n        return(param_write_bool(plist, \"ForOPDFRead\" , &pdev->ForOPDFRead));\n    }\n    if(!pdev->is_ps2write){\n        if(strcmp(Param, \"pdfmark\" ) == 0){\n            return(param_write_null(plist, \"pdfmark\" ));\n        }\n        if(strcmp(Param, \"DSC\" ) == 0){\n            return(param_write_null(plist, \"DSC\" ));\n        }\n    }\n    return gdev_psdf_get_param(dev, Param, list);\n}", "target": 0}
{"idx": "CWE-119-vuln-1714253833822", "code": "int gdev_pdf_get_param(gx_device*dev, char*Param, void*list){gx_device_pdf*pdev=(gx_device_pdf*)dev;const gs_param_item_t*pi;gs_param_list*plist=(gs_param_list*)list;int code=0;for(pi=pdf_param_items;pi->key != 0;++pi){if(strcmp(pi->key, Param) == 0){const char*key=pi->key;const void*pvalue=(const void*)((const char*)pdev+pi->offset);int size=xfer_item_sizes [ pi->type ];gs_param_typed_value typed;memcpy(&typed . value, pvalue, size);typed . type=pi->type;code=(*plist->procs->xmit_typed)(plist, key, &typed);return code;}}if(strcmp(Param, \"CoreDistVersion\" ) == 0){return(param_write_int(plist, \"CoreDistVersion\" , &CoreDistVersion));}if(strcmp(Param, \"CompatibilityLevel\" ) == 0){float f=pdev->CompatibilityLevel;return(param_write_float(plist, \"CompatibilityLevel\" , &f));}if(strcmp(Param, \"ForOPDFRead\" ) == 0){return(param_write_bool(plist, \"ForOPDFRead\" , &pdev->ForOPDFRead));}if(!pdev->is_ps2write){if(strcmp(Param, \"pdfmark\" ) == 0){return(param_write_null(plist, \"pdfmark\" ));}if(strcmp(Param, \"DSC\" ) == 0){return(param_write_null(plist, \"DSC\" ));}}return gdev_psdf_get_param(dev, Param, list);}", "target": 1}
{"idx": "CWE-416-safe-1714253866807", "code": "int gdev_pdf_put_params(gx_device*dev, gs_param_list*plist){\n    int code;\n    gx_device_pdf*pdev=(gx_device_pdf*)dev;\n    gs_memory_t*mem=gs_memory_stable(pdev->memory);\n    gx_device_pdf*save_dev=gs_malloc(mem, sizeof(gx_device_pdf), 1, \"saved gx_device_pdf\" );\n    if(!save_dev)\n        return_error(gs_error_VMerror);\n    if (save_dev == NULL)\n        return gs_error_VMerror;\n    memcpy(save_dev, pdev, sizeof(gx_device_pdf));\n    code=gdev_pdf_put_params_impl(dev, save_dev, plist);\n    gs_free(mem, save_dev, sizeof(gx_device_pdf), 1, \"saved gx_device_pdf\" );\n    return code;\n}", "target": 0}
{"idx": "CWE-416-vuln-1714253866807", "code": "int gdev_pdf_put_params(gx_device*dev, gs_param_list*plist){int code;gx_device_pdf*pdev=(gx_device_pdf*)dev;gs_memory_t*mem=gs_memory_stable(pdev->memory);gx_device_pdf*save_dev=gs_malloc(mem, sizeof(gx_device_pdf), 1, \"saved gx_device_pdf\" );if(!save_dev)return_error(gs_error_VMerror);if(save_dev == NULL)return gs_error_VMerror;memcpy(save_dev, pdev, sizeof(gx_device_pdf));gs_free(mem, save_dev, sizeof(gx_device_pdf), 1, \"saved gx_device_pdf\" );code=gdev_pdf_put_params_impl(dev, save_dev, plist);return code;}", "target": 1}
{"idx": "CWE-843-safe-1714253884816", "code": "int gdev_pdf_get_params(gx_device*dev, gs_param_list*plist){\n    if (!dev || !plist) return -1;\n    if (dev->magic != gx_device_pdf_magic) return -1;\n    gx_device_pdf*pdev=(gx_device_pdf*)dev;\n    float cl=(float)pdev->CompatibilityLevel;\n    int code;\n    int cdv=CoreDistVersion;\n    pdev->ParamCompatibilityLevel=cl;\n    code=gdev_psdf_get_params(dev, plist);\n    if(code<0 || (code=param_write_int(plist, \"CoreDistVersion\" , &cdv))<0 || (code=param_write_float(plist, \"CompatibilityLevel\" , &cl))<0 || (!pdev->is_ps2write && (code=param_write_bool(plist, \"ForOPDFRead\" , &pdev->ForOPDFRead))<0) || (param_requested(plist, \"pdfmark\" )>0 && (code=param_write_null(plist, \"pdfmark\" ))<0) || (param_requested(plist, \"DSC\" )>0 && (code=param_write_null(plist, \"DSC\" ))<0) || (code=gs_param_write_items(plist, pdev, NULL, pdf_param_items))<0){}\n    return code;\n}", "target": 0}
{"idx": "CWE-843-vuln-1714253884816", "code": "int gdev_pdf_get_params(gx_device*dev, gs_param_list*plist){if(!dev || !plist)return-1;if(dev->magic != gx_device_pdf_magic)return-1;gx_device_pdf*pdev=(gx_device_pdf*)dev;int cl=(int)pdev->CompatibilityLevel;int code;int cdv=CoreDistVersion;pdev->ParamCompatibilityLevel=cl;code=gdev_psdf_get_params(dev, plist);if(code<0 || (code=param_write_int(plist, \"CoreDistVersion\" , &cdv))<0 || (code=param_write_float(plist, \"CompatibilityLevel\" , &cl))<0 || (!pdev->is_ps2write && (code=param_write_bool(plist, \"ForOPDFRead\" , &pdev->ForOPDFRead))<0) || (param_requested(plist, \"pdfmark\" )>0 && (code=param_write_null(plist, \"pdfmark\" ))<0) || (param_requested(plist, \"DSC\" )>0 && (code=param_write_null(plist, \"DSC\" ))<0) || (code=gs_param_write_items(plist, pdev, NULL, pdf_param_items))<0){}return code;}", "target": 1}
{"idx": "CWE-476-safe-1714253916465", "code": "static int send_certificate_request(SSL *s) {\n    if (s == NULL || s->session == NULL || s->s3 == NULL || s->s3->tmp.new_cipher == NULL) return 0;\n    if (s->verify_mode & SSL_VERIFY_PEER && ((s->session->peer == NULL) || !(s->verify_mode & SSL_VERIFY_CLIENT_ONCE)) && (!(s->s3->tmp.new_cipher->algorithm_auth & SSL_aNULL) || (s->verify_mode & SSL_VERIFY_FAIL_IF_NO_PEER_CERT)) && !(s->s3->tmp.new_cipher->algorithm_auth & SSL_aSRP) && !(s->s3->tmp.new_cipher->algorithm_auth & SSL_aPSK)) {\n        return 1;\n    }\n    return 0;\n}", "target": 0}
{"idx": "CWE-476-vuln-1714253916465", "code": "static int send_certificate_request(SSL*s){if(s == NULL || s->session == NULL || s->s3 == NULL || s->s3->tmp.new_cipher == NULL)return 0;if(s->verify_mode&SSL_VERIFY_PEER && (!(s->verify_mode&SSL_VERIFY_CLIENT_ONCE)) && (!(s->s3->tmp.new_cipher->algorithm_auth&SSL_aNULL) || (s->verify_mode&SSL_VERIFY_FAIL_IF_NO_PEER_CERT)) && !(s->s3->tmp.new_cipher->algorithm_auth&SSL_aSRP) && !(s->s3->tmp.new_cipher->algorithm_auth&SSL_aPSK)){return 1;}return 0;}", "target": 1}
{"idx": "CWE-416-safe-1714253936209", "code": "WORK_STATE ossl_statem_server_pre_work(SSL *s, WORK_STATE wst) {\n    if (s == NULL || s->session == NULL || s->s3 == NULL || s->method == NULL || s->method->ssl3_enc == NULL) return WORK_ERROR;\n    OSSL_STATEM *st = &s->statem;\n    switch (st->hand_state) {\n    case TLS_ST_SW_HELLO_REQ :\n        s->shutdown = 0;\n        if (SSL_IS_DTLS(s))\n            dtls1_clear_sent_buffer(s);\n        break;\n    case DTLS_ST_SW_HELLO_VERIFY_REQUEST :\n        s->shutdown = 0;\n        if (SSL_IS_DTLS(s)) {\n            dtls1_clear_sent_buffer(s);\n            st->use_timer = 0;\n        }\n        break;\n    case TLS_ST_SW_SRVR_HELLO :\n        if (SSL_IS_DTLS(s)) {\n            st->use_timer = 1;\n        }\n        break;\n    case TLS_ST_SW_SRVR_DONE :\n        #ifndef OPENSSL_NO_SCTP \n        if (SSL_IS_DTLS(s) && BIO_dgram_is_sctp(SSL_get_wbio(s)))\n            return dtls_wait_for_dry(s);\n        #endif \n        return WORK_FINISHED_CONTINUE;\n    case TLS_ST_SW_SESSION_TICKET :\n        if (SSL_IS_DTLS(s)) {\n            st->use_timer = 0;\n        }\n        break;\n    case TLS_ST_SW_CHANGE :\n        s->session->cipher = s->s3->tmp.new_cipher;\n        if (!s->method->ssl3_enc->setup_key_block(s)) {\n            ossl_statem_set_error(s);\n            return WORK_ERROR;\n        }\n        if (SSL_IS_DTLS(s)) {\n            st->use_timer = 0;\n        }\n        return WORK_FINISHED_CONTINUE;\n    case TLS_ST_OK :\n        return tls_finish_handshake(s, wst);\n    default :\n        break;\n    }\n    return WORK_FINISHED_CONTINUE;\n}", "target": 0}
{"idx": "CWE-416-vuln-1714253936209", "code": "WORK_STATE ossl_statem_server_pre_work(SSL* s, WORK_STATE wst) {\n    if (s == NULL || s->session == NULL || s->s3 == NULL || s->method == NULL || s->method->ssl3_enc == NULL)\n        return WORK_ERROR;\n    OSSL_STATEM* st = &s->statem;\n    switch (st->hand_state) {\n    case TLS_ST_SW_HELLO_REQ :\n        s->shutdown = 0;\n        if (SSL_IS_DTLS(s))\n            dtls1_clear_sent_buffer(s);\n        break;\n    case DTLS_ST_SW_HELLO_VERIFY_REQUEST :\n        s->shutdown = 0;\n        if (SSL_IS_DTLS(s)) {\n            dtls1_clear_sent_buffer(s);\n            st->use_timer = 0;\n        }\n        break;\n    case TLS_ST_SW_SRVR_HELLO :\n        if (SSL_IS_DTLS(s)) {\n            st->use_timer = 1;\n        }\n        break;\n    case TLS_ST_SW_SRVR_DONE :\n        #ifndef OPENSSL_NO_SCTP \n        if (SSL_IS_DTLS(s) && BIO_dgram_is_sctp(SSL_get_wbio(s)))\n            return dtls_wait_for_dry(s);\n        #endif \n        return WORK_FINISHED_CONTINUE;\n    case TLS_ST_SW_SESSION_TICKET :\n        if (SSL_IS_DTLS(s)) {\n            st->use_timer = 0;\n        }\n        break;\n    case TLS_ST_SW_CHANGE :\n        free(s->session);\n        s->session->cipher = s->s3->tmp.new_cipher;\n        if (!s->method->ssl3_enc->setup_key_block(s)) {\n            ossl_statem_set_error(s);\n            return WORK_ERROR;\n        }\n        if (SSL_IS_DTLS(s)) {\n            st->use_timer = 0;\n        }\n        return WORK_FINISHED_CONTINUE;\n    case TLS_ST_OK :\n        return tls_finish_handshake(s, wst);\n    default :\n        break;\n    }\n    return WORK_FINISHED_CONTINUE;\n}", "target": 1}
{"idx": "CWE-476-safe-1714253972128", "code": "static int tls_process_cke_srp(SSL *s, PACKET *pkt, int *al) {\n# ifndef OPENSSL_NO_SRP \n    unsigned int i;\n    const unsigned char *data;\n    if (!PACKET_remaining(pkt) || !PACKET_get_net_2(pkt, &i) || !PACKET_get_bytes(pkt, &data, i) || i > PACKET_remaining(pkt)) {\n        *al = SSL_AD_DECODE_ERROR;\n        SSLerr(SSL_F_TLS_PROCESS_CKE_SRP, SSL_R_BAD_SRP_A_LENGTH);\n        return 0;\n    }\n    if ((s->srp_ctx.A = BN_bin2bn(data, i, NULL)) == NULL) {\n        SSLerr(SSL_F_TLS_PROCESS_CKE_SRP, ERR_R_BN_LIB);\n        return 0;\n    }\n    if (BN_ucmp(s->srp_ctx.A, s->srp_ctx.N) >= 0 || BN_is_zero(s->srp_ctx.A)) {\n        *al = SSL_AD_ILLEGAL_PARAMETER;\n        SSLerr(SSL_F_TLS_PROCESS_CKE_SRP, SSL_R_BAD_SRP_PARAMETERS);\n        return 0;\n    }\n    if (s->session == NULL || s->srp_ctx.login == NULL) {\n        SSLerr(SSL_F_TLS_PROCESS_CKE_SRP, ERR_R_INTERNAL_ERROR);\n        return 0;\n    }\n    OPENSSL_free(s->session->srp_username);\n    s->session->srp_username = OPENSSL_strdup(s->srp_ctx.login);\n    if (s->session->srp_username == NULL) {\n        SSLerr(SSL_F_TLS_PROCESS_CKE_SRP, ERR_R_MALLOC_FAILURE);\n        return 0;\n    }\n    if (!srp_generate_server_master_secret(s)) {\n        SSLerr(SSL_F_TLS_PROCESS_CKE_SRP, ERR_R_INTERNAL_ERROR);\n        return 0;\n    }\n    return 1;\n# else \n    *al = SSL_AD_INTERNAL_ERROR;\n    SSLerr(SSL_F_TLS_PROCESS_CKE_SRP, ERR_R_INTERNAL_ERROR);\n    return 0;\n# endif \n}", "target": 0}
{"idx": "CWE-476-vuln-1714253972128", "code": "static int tls_process_cke_srp(SSL* s, PACKET* pkt, int* al) {\n# ifndef OPENSSL_NO_SRP \n    unsigned int i; \n    const unsigned char* data; \n    if (!PACKET_remaining(pkt) || !PACKET_get_net_2(pkt, &i) || !PACKET_get_bytes(pkt, &data, i) || i > PACKET_remaining(pkt)) { \n        *al = SSL_AD_DECODE_ERROR; \n        SSLerr(SSL_F_TLS_PROCESS_CKE_SRP, SSL_R_BAD_SRP_A_LENGTH); \n        return 0; \n    } \n    if ((s->srp_ctx.A = BN_bin2bn(data, i, NULL)) == NULL) { \n        SSLerr(SSL_F_TLS_PROCESS_CKE_SRP, ERR_R_BN_LIB); \n        return 0; \n    } \n    if (BN_ucmp(s->srp_ctx.A, s->srp_ctx.N) >= 0 || BN_is_zero(s->srp_ctx.A)) { \n        *al = SSL_AD_ILLEGAL_PARAMETER; \n        SSLerr(SSL_F_TLS_PROCESS_CKE_SRP, SSL_R_BAD_SRP_PARAMETERS); \n        return 0; \n    } \n    if (s == NULL || s->session == NULL || s->srp_ctx.login == NULL) { \n        SSLerr(SSL_F_TLS_PROCESS_CKE_SRP, ERR_R_INTERNAL_ERROR); \n        return 0; \n    } \n    OPENSSL_free(s->session->srp_username); \n    s->session->srp_username = OPENSSL_strdup(s->srp_ctx.login); \n    if (s->session->srp_username == NULL) { \n        SSLerr(SSL_F_TLS_PROCESS_CKE_SRP, ERR_R_MALLOC_FAILURE); \n        return 0; \n    } \n    if (!srp_generate_server_master_secret(s)) { \n        SSLerr(SSL_F_TLS_PROCESS_CKE_SRP, ERR_R_INTERNAL_ERROR); \n        return 0; \n    } \n    return 1; \n# else \n    *al = SSL_AD_INTERNAL_ERROR; \n    SSLerr(SSL_F_TLS_PROCESS_CKE_SRP, ERR_R_INTERNAL_ERROR); \n    return 0; \n# endif \n}", "target": 1}
{"idx": "CWE-476-safe-1714254015720", "code": "static int tls_process_cke_psk_preamble(SSL *s, PACKET *pkt, int *al) {\n# ifndef OPENSSL_NO_PSK \n  unsigned char psk[PSK_MAX_PSK_LEN];\n  size_t psklen;\n  PACKET psk_identity;\n  if (!PACKET_get_length_prefixed_2(pkt, &psk_identity)) {\n    *al = SSL_AD_DECODE_ERROR;\n    SSLerr(SSL_F_TLS_PROCESS_CKE_PSK_PREAMBLE, SSL_R_LENGTH_MISMATCH);\n    return 0;\n  }\n  if (PACKET_remaining(&psk_identity) > PSK_MAX_IDENTITY_LEN) {\n    *al = SSL_AD_DECODE_ERROR;\n    SSLerr(SSL_F_TLS_PROCESS_CKE_PSK_PREAMBLE, SSL_R_DATA_LENGTH_TOO_LONG);\n    return 0;\n  }\n  if (s->psk_server_callback == NULL) {\n    *al = SSL_AD_INTERNAL_ERROR;\n    SSLerr(SSL_F_TLS_PROCESS_CKE_PSK_PREAMBLE, SSL_R_PSK_NO_SERVER_CB);\n    return 0;\n  }\n  if (!PACKET_strndup(&psk_identity, &s->session->psk_identity)) {\n    *al = SSL_AD_INTERNAL_ERROR;\n    SSLerr(SSL_F_TLS_PROCESS_CKE_PSK_PREAMBLE, ERR_R_INTERNAL_ERROR);\n    return 0;\n  }\n  psklen = s->psk_server_callback(s, s->session->psk_identity, psk, sizeof(psk));\n  if (psklen > PSK_MAX_PSK_LEN) {\n    *al = SSL_AD_INTERNAL_ERROR;\n    SSLerr(SSL_F_TLS_PROCESS_CKE_PSK_PREAMBLE, ERR_R_INTERNAL_ERROR);\n    return 0;\n  } else if (psklen == 0) {\n    *al = SSL_AD_UNKNOWN_PSK_IDENTITY;\n    SSLerr(SSL_F_TLS_PROCESS_CKE_PSK_PREAMBLE, SSL_R_PSK_IDENTITY_NOT_FOUND);\n    return 0;\n  }\n  OPENSSL_free(s->s3->tmp.psk);\n  s->s3->tmp.psk = OPENSSL_memdup(psk, psklen);\n  OPENSSL_cleanse(psk, psklen);\n  if (s->s3->tmp.psk == NULL) {\n    *al = SSL_AD_INTERNAL_ERROR;\n    SSLerr(SSL_F_TLS_PROCESS_CKE_PSK_PREAMBLE, ERR_R_MALLOC_FAILURE);\n    return 0;\n  }\n  s->s3->tmp.psklen = psklen;\n  return 1;\n# else \n  *al = SSL_AD_INTERNAL_ERROR;\n  SSLerr(SSL_F_TLS_PROCESS_CKE_PSK_PREAMBLE, ERR_R_INTERNAL_ERROR);\n  return 0;\n# endif \n}", "target": 0}
{"idx": "CWE-476-vuln-1714254015720", "code": "static int tls_process_cke_psk_preamble(SSL*s, PACKET*pkt, int*al){\n# ifndef OPENSSL_NO_PSK \n  unsigned char psk[PSK_MAX_PSK_LEN];size_t psklen;PACKET psk_identity;if(!PACKET_get_length_prefixed_2(pkt, &psk_identity)){*al=SSL_AD_DECODE_ERROR;SSLerr(SSL_F_TLS_PROCESS_CKE_PSK_PREAMBLE, SSL_R_LENGTH_MISMATCH);return 0;}if(PACKET_remaining(&psk_identity)>PSK_MAX_IDENTITY_LEN){*al=SSL_AD_DECODE_ERROR;SSLerr(SSL_F_TLS_PROCESS_CKE_PSK_PREAMBLE, SSL_R_DATA_LENGTH_TOO_LONG);return 0;}if(s->psk_server_callback == NULL){*al=SSL_AD_INTERNAL_ERROR;SSLerr(SSL_F_TLS_PROCESS_CKE_PSK_PREAMBLE, SSL_R_PSK_NO_SERVER_CB);return 0;}if(!PACKET_strndup(&psk_identity, &s->session->psk_identity)){*al=SSL_AD_INTERNAL_ERROR;SSLerr(SSL_F_TLS_PROCESS_CKE_PSK_PREAMBLE, ERR_R_INTERNAL_ERROR);return 0;}psklen=s->psk_server_callback(s, s->session->psk_identity, psk, sizeof(psk));if(psklen>PSK_MAX_PSK_LEN){*al=SSL_AD_INTERNAL_ERROR;SSLerr(SSL_F_TLS_PROCESS_CKE_PSK_PREAMBLE, ERR_R_INTERNAL_ERROR);return 0;}else if(psklen == 0){*al=SSL_AD_UNKNOWN_PSK_IDENTITY;SSLerr(SSL_F_TLS_PROCESS_CKE_PSK_PREAMBLE, SSL_R_PSK_IDENTITY_NOT_FOUND);return 0;}OPENSSL_free(s->s3->tmp.psk);s->s3->tmp.psk=OPENSSL_memdup(psk, psklen);OPENSSL_cleanse(psk, psklen);if(s->s3->tmp.psk == NULL){*al=SSL_AD_INTERNAL_ERROR;SSLerr(SSL_F_TLS_PROCESS_CKE_PSK_PREAMBLE, ERR_R_MALLOC_FAILURE);return 0;}s->s3->tmp.psklen=psklen;return 1;\n# else*al=SSL_AD_INTERNAL_ERROR;SSLerr(SSL_F_TLS_PROCESS_CKE_PSK_PREAMBLE, ERR_R_INTERNAL_ERROR);return 0;\n# endif}", "target": 1}
{"idx": "CWE-476-safe-1714254072972", "code": "WORK_STATE tls_post_process_client_key_exchange(SSL*s, WORK_STATE wst){\n# ifndef OPENSSL_NO_SCTP \nif(wst == WORK_MORE_A){\nif(SSL_IS_DTLS(s)){\nunsigned char sctpauthkey [ 64 ];\nchar labelbuffer [ sizeof(DTLS1_SCTP_AUTH_LABEL)];\nif(sizeof(DTLS1_SCTP_AUTH_LABEL) <= sizeof(labelbuffer)){\nmemcpy(labelbuffer, DTLS1_SCTP_AUTH_LABEL, sizeof(DTLS1_SCTP_AUTH_LABEL));\n}\nif(SSL_export_keying_material(s, sctpauthkey, sizeof(sctpauthkey), labelbuffer, sizeof(labelbuffer), NULL, 0, 0) <= 0){\nossl_statem_set_error(s);\nreturn WORK_ERROR;;\n}\nBIO_ctrl(SSL_get_wbio(s), BIO_CTRL_DGRAM_SCTP_ADD_AUTH_KEY, sizeof(sctpauthkey), sctpauthkey);\n}\nwst=WORK_MORE_B;\n}\nif((wst == WORK_MORE_B) && BIO_dgram_is_sctp(SSL_get_wbio(s)) && s->renegotiate && (s->session->peer == NULL || s->statem . no_cert_verify) && BIO_dgram_sctp_msg_waiting(SSL_get_rbio(s))){\ns->s3->in_read_app_data=2;\ns->rwstate=SSL_READING;\nBIO_clear_retry_flags(SSL_get_rbio(s));\nBIO_set_retry_read(SSL_get_rbio(s));\nossl_statem_set_sctp_read_sock(s, 1);\nreturn WORK_MORE_B;\n}else{\nossl_statem_set_sctp_read_sock(s, 0);\n}\n# endif \nif(s->statem . no_cert_verify || !s->session->peer){\nif(!ssl3_digest_cached_records(s, 0)){\nossl_statem_set_error(s);\nreturn WORK_ERROR;\n}\nreturn WORK_FINISHED_CONTINUE;\n}else{\nif(!s->s3->handshake_buffer){\nSSLerr(SSL_F_TLS_POST_PROCESS_CLIENT_KEY_EXCHANGE, ERR_R_INTERNAL_ERROR);\nossl_statem_set_error(s);\nreturn WORK_ERROR;\n}\nif(!ssl3_digest_cached_records(s, 1)){\nossl_statem_set_error(s);\nreturn WORK_ERROR;\n}}\nreturn WORK_FINISHED_CONTINUE;\n}", "target": 0}
{"idx": "CWE-476-vuln-1714254072972", "code": "WORK_STATE tls_post_process_client_key_exchange(SSL* s, WORK_STATE wst){\n# ifndef OPENSSL_NO_SCTP \nif(wst == WORK_MORE_A){if(SSL_IS_DTLS(s)){unsigned char sctpauthkey [ 64 ];char labelbuffer [ sizeof(DTLS1_SCTP_AUTH_LABEL)];if(sizeof(DTLS1_SCTP_AUTH_LABEL) <= sizeof(labelbuffer)){memcpy(labelbuffer, DTLS1_SCTP_AUTH_LABEL, sizeof(DTLS1_SCTP_AUTH_LABEL));}if(SSL_export_keying_material(s, sctpauthkey, sizeof(sctpauthkey), labelbuffer, sizeof(labelbuffer), NULL, 0, 0) <= 0){ossl_statem_set_error(s);return WORK_ERROR;}BIO_ctrl(SSL_get_wbio(s), BIO_CTRL_DGRAM_SCTP_ADD_AUTH_KEY, sizeof(sctpauthkey), sctpauthkey);}wst=WORK_MORE_B;}if((wst == WORK_MORE_B) && BIO_dgram_is_sctp(SSL_get_wbio(s)) && s->renegotiate && (s->session->peer == NULL || s->statem . no_cert_verify) && BIO_dgram_sctp_msg_waiting(SSL_get_rbio(s))){s->s3->in_read_app_data=2;s->rwstate=SSL_READING;BIO_clear_retry_flags(SSL_get_rbio(s));BIO_set_retry_read(SSL_get_rbio(s));ossl_statem_set_sctp_read_sock(s, 1);return WORK_MORE_B;}else{ossl_statem_set_sctp_read_sock(s, 0);}# endif \nif(s->statem . no_cert_verify || !s->session->peer){if(s == NULL){SSLerr(SSL_F_TLS_POST_PROCESS_CLIENT_KEY_EXCHANGE, ERR_R_INTERNAL_ERROR);ossl_statem_set_error(s);return WORK_ERROR;}if(!ssl3_digest_cached_records(s, 0)){ossl_statem_set_error(s);return WORK_ERROR;}return WORK_FINISHED_CONTINUE;}else{if(!s->s3->handshake_buffer){SSLerr(SSL_F_TLS_POST_PROCESS_CLIENT_KEY_EXCHANGE, ERR_R_INTERNAL_ERROR);ossl_statem_set_error(s);return WORK_ERROR;}if(!ssl3_digest_cached_records(s, 1)){ossl_statem_set_error(s);return WORK_ERROR;}}return WORK_FINISHED_CONTINUE;}", "target": 1}
{"idx": "CWE-119-safe-1714254119522", "code": "MSG_PROCESS_RETURN tls_process_next_proto(SSL *s, PACKET *pkt) {\n    PACKET next_proto, padding;\n    size_t next_proto_len;\n    if (!PACKET_get_length_prefixed_1(pkt, &next_proto) || !PACKET_get_length_prefixed_1(pkt, &padding) || PACKET_remaining(pkt) > 0) {\n        SSLerr(SSL_F_TLS_PROCESS_NEXT_PROTO, SSL_R_LENGTH_MISMATCH);\n        goto err;\n    }\n    if (!PACKET_memdup(&next_proto, &s->next_proto_negotiated, &next_proto_len)) {\n        s->next_proto_negotiated_len = 0;\n        goto err;\n    }\n    if (next_proto_len > 255) {\n        SSLerr(SSL_F_TLS_PROCESS_NEXT_PROTO, SSL_R_LENGTH_TOO_LONG);\n        goto err;\n    }\n    s->next_proto_negotiated_len = (unsigned char)next_proto_len;\n    return MSG_PROCESS_CONTINUE_READING;\nerr:\n    ossl_statem_set_error(s);\n    return MSG_PROCESS_ERROR;\n}", "target": 0}
{"idx": "CWE-119-vuln-1714254119522", "code": "MSG_PROCESS_RETURN tls_process_next_proto(SSL *s, PACKET *pkt) {\n    PACKET next_proto, padding;\n    size_t next_proto_len;\n    if (!PACKET_get_length_prefixed_1(pkt, &next_proto) || !PACKET_get_length_prefixed_1(pkt, &padding) || PACKET_remaining(pkt) > 0) {\n        SSLerr(SSL_F_TLS_PROCESS_NEXT_PROTO, SSL_R_LENGTH_MISMATCH);\n        goto err;\n    }\n    if (!PACKET_memdup(&next_proto, &s->next_proto_negotiated, &next_proto_len)) {\n        s->next_proto_negotiated_len = 0;\n        goto err;\n    }\n    if (next_proto_len > 255) {\n        SSLerr(SSL_F_TLS_PROCESS_NEXT_PROTO, SSL_R_LENGTH_TOO_LONG);\n        goto err;\n    }\n    s->next_proto_negotiated[next_proto_len] = '\\0';\n    s->next_proto_negotiated_len = (unsigned char)next_proto_len;\n    return MSG_PROCESS_CONTINUE_READING;\nerr:\n    ossl_statem_set_error(s);\n    return MSG_PROCESS_ERROR;\n}", "target": 1}
{"idx": "CWE-119-safe-1714254147374", "code": "int tls_construct_certificate_request(SSL *s) {\n    unsigned char *p, *d;\n    int i, j, nl, off, n;\n    STACK_OF(X509_NAME) *sk = NULL;\n    X509_NAME *name;\n    BUF_MEM *buf;\n    buf = s->init_buf;\n    d = p = ssl_handshake_start(s);\n    p++;\n    n = ssl3_get_req_cert_type(s, p);\n    d[0] = n;\n    p += n;\n    n++;\n    if (SSL_USE_SIGALGS(s)) {\n        const unsigned char *psigs;\n        unsigned char *etmp = p;\n        nl = tls12_get_psigalgs(s, &psigs);\n        if (n + 2 + nl > buf->max) return 0;\n        p += 2;\n        nl = tls12_copy_sigalgs(s, p, psigs, nl);\n        s2n(nl, etmp);\n        p += nl;\n        n += nl + 2;\n    }\n    off = n;\n    p += 2;\n    n += 2;\n    sk = SSL_get_client_CA_list(s);\n    nl = 0;\n    if (sk != NULL) {\n        for (i = 0; i < sk_X509_NAME_num(sk); i++) {\n            name = sk_X509_NAME_value(sk, i);\n            j = i2d_X509_NAME(name, NULL);\n            if (n + 2 + j > buf->max) return 0;\n            p = ssl_handshake_start(s) + n;\n            s2n(j, p);\n            i2d_X509_NAME(name, &p);\n            n += 2 + j;\n            nl += 2 + j;\n        }\n    }\n    p = ssl_handshake_start(s) + off;\n    s2n(nl, p);\n    if (!ssl_set_handshake_header(s, SSL3_MT_CERTIFICATE_REQUEST, n)) {\n        SSLerr(SSL_F_TLS_CONSTRUCT_CERTIFICATE_REQUEST, ERR_R_INTERNAL_ERROR);\n        goto err;\n    }\n    s->s3->tmp.cert_request = 1;\n    return 1;\nerr:\n    ossl_statem_set_error(s);\n    return 0;\n}", "target": 0}
{"idx": "CWE-119-vuln-1714254147374", "code": "int tls_construct_certificate_request(SSL*s){unsigned char*p, *d;int i, j, nl, off, n;STACK_OF(X509_NAME)*sk=NULL;X509_NAME*name;BUF_MEM*buf;buf=s->init_buf;d=p=ssl_handshake_start(s);p++;n=ssl3_get_req_cert_type(s, p);d[0]=n;p+=n;n++;if(SSL_USE_SIGALGS(s)){const unsigned char*psigs;unsigned char*etmp=p;nl=tls12_get_psigalgs(s, &psigs);if(n+2+nl>buf->max)return 0;p+=2;nl=tls12_copy_sigalgs(s, p, psigs, nl);s2n(nl, etmp);p+=nl;n+=nl+2;}off=n;p+=2;n+=2;sk=SSL_get_client_CA_list(s);nl=0;if(sk != NULL){for(i=0;i<sk_X509_NAME_num(sk);i++){name=sk_X509_NAME_value(sk, i);j=i2d_X509_NAME(name, NULL);if(n+2+j>buf->max)return 0;p=ssl_handshake_start(s)+n;s2n(j, p);i2d_X509_NAME(name, &p);n+=2+j;nl+=2+j;}}p=ssl_handshake_start(s)+off;s2n(nl, p);if(!ssl_set_handshake_header(s, SSL3_MT_CERTIFICATE_REQUEST, n)){SSLerr(SSL_F_TLS_CONSTRUCT_CERTIFICATE_REQUEST, ERR_R_INTERNAL_ERROR);goto err;}s->s3->tmp.cert_request=1;return 1;err:\n    ossl_statem_set_error(s);return 0;}", "target": 1}
{"idx": "CWE-416-safe-1714254181079", "code": "int tls_construct_server_done(SSL *s) {\n    if (s == NULL || s->s3 == NULL) return 0;\n    if (!ssl_set_handshake_header(s, SSL3_MT_SERVER_DONE, 0)) {\n        SSLerr(SSL_F_TLS_CONSTRUCT_SERVER_DONE, ERR_R_INTERNAL_ERROR);\n        ossl_statem_set_error(s);\n        return 0;\n    }\n    if (!s->s3->tmp.cert_request) {\n        if (!ssl3_digest_cached_records(s, 0)) {\n            ossl_statem_set_error(s);\n        }\n    }\n    return 1;\n}", "target": 0}
{"idx": "CWE-416-vuln-1714254181079", "code": "int tls_construct_server_done(SSL *s) {\n    if (s == NULL || s->s3 == NULL)\n        return 0;\n    if (!ssl_set_handshake_header(s, SSL3_MT_SERVER_DONE, 0)) {\n        SSLerr(SSL_F_TLS_CONSTRUCT_SERVER_DONE, ERR_R_INTERNAL_ERROR);\n        ossl_statem_set_error(s);\n        return 0;\n    }\n    if (!s->s3->tmp.cert_request) {\n        if (!ssl3_digest_cached_records(s, 0)) {\n            ossl_statem_set_error(s);\n        }\n    }\n    free(s->s3);\n    return 1;\n}", "target": 1}
{"idx": "CWE-119-safe-1714254199596", "code": "MSG_PROCESS_RETURN tls_process_client_key_exchange(SSL *s, PACKET *pkt)\n{\n    int al = -1;\n    unsigned long alg_k;\n    alg_k = s->s3->tmp.new_cipher->algorithm_mkey;\n    if ((alg_k & SSL_PSK) && !tls_process_cke_psk_preamble(s, pkt, &al))\n        goto err;\n    if (alg_k & SSL_kPSK)\n    {\n        if (PACKET_remaining(pkt) != 0)\n        {\n            al = SSL_AD_HANDSHAKE_FAILURE;\n            SSLerr(SSL_F_TLS_PROCESS_CLIENT_KEY_EXCHANGE, SSL_R_LENGTH_MISMATCH);\n            goto err;\n        }\n        if (!ssl_generate_master_secret(s, NULL, 0, 0))\n        {\n            al = SSL_AD_INTERNAL_ERROR;\n            SSLerr(SSL_F_TLS_PROCESS_CLIENT_KEY_EXCHANGE, ERR_R_INTERNAL_ERROR);\n            goto err;\n        }\n    }\n    else if (alg_k & (SSL_kRSA | SSL_kRSAPSK))\n    {\n        if (!tls_process_cke_rsa(s, pkt, &al))\n            goto err;\n    }\n    else if (alg_k & (SSL_kDHE | SSL_kDHEPSK))\n    {\n        if (!tls_process_cke_dhe(s, pkt, &al))\n            goto err;\n    }\n    else if (alg_k & (SSL_kECDHE | SSL_kECDHEPSK))\n    {\n        if (!tls_process_cke_ecdhe(s, pkt, &al))\n            goto err;\n    }\n    else if (alg_k & SSL_kSRP)\n    {\n        if (!tls_process_cke_srp(s, pkt, &al))\n            goto err;\n    }\n    else if (alg_k & SSL_kGOST)\n    {\n        if (!tls_process_cke_gost(s, pkt, &al))\n            goto err;\n    }\n    else \n    {\n        al = SSL_AD_HANDSHAKE_FAILURE;\n        SSLerr(SSL_F_TLS_PROCESS_CLIENT_KEY_EXCHANGE, SSL_R_UNKNOWN_CIPHER_TYPE);\n        goto err;\n    }\n    return MSG_PROCESS_CONTINUE_PROCESSING;\nerr:\n    if (al != -1)\n        ssl3_send_alert(s, SSL3_AL_FATAL, al);\n#ifndef OPENSSL_NO_PSK \n    OPENSSL_clear_free(s->s3->tmp.psk, s->s3->tmp.psklen);\n    s->s3->tmp.psk = NULL;\n#endif \n    ossl_statem_set_error(s);\n    return MSG_PROCESS_ERROR;\n}", "target": 0}
{"idx": "CWE-119-vuln-1714254199596", "code": "MSG_PROCESS_RETURN tls_process_client_key_exchange(SSL *s, PACKET *pkt) {\n    int al = -1;\n    unsigned long alg_k;\n    alg_k = s->s3->tmp.new_cipher->algorithm_mkey;\n    if ((alg_k & SSL_PSK) && !tls_process_cke_psk_preamble(s, pkt, &al))\n        goto err;\n    if (alg_k & SSL_kPSK) {\n        if (PACKET_remaining(pkt) != 0) {\n            al = SSL_AD_HANDSHAKE_FAILURE;\n            SSLerr(SSL_F_TLS_PROCESS_CLIENT_KEY_EXCHANGE, SSL_R_LENGTH_MISMATCH);\n            goto err;\n        }\n        if (!ssl_generate_master_secret(s, NULL, 0, 0)) {\n            al = SSL_AD_INTERNAL_ERROR;\n            SSLerr(SSL_F_TLS_PROCESS_CLIENT_KEY_EXCHANGE, ERR_R_INTERNAL_ERROR);\n            goto err;\n        }\n    } else if (alg_k & (SSL_kRSA | SSL_kRSAPSK)) {\n        if (!tls_process_cke_rsa(s, pkt, &al))\n            goto err;\n    } else if (alg_k & (SSL_kDHE | SSL_kDHEPSK)) {\n        if (!tls_process_cke_dhe(s, pkt, &al))\n            goto err;\n    } else if (alg_k & (SSL_kECDHE | SSL_kECDHEPSK)) {\n        if (!tls_process_cke_ecdhe(s, pkt, &al))\n            goto err;\n    } else if (alg_k & SSL_kSRP) {\n        if (!tls_process_cke_srp(s, pkt, &al))\n            goto err;\n    } else if (alg_k & SSL_kGOST) {\n        if (!tls_process_cke_gost(s, pkt, &al))\n            goto err;\n    } else {\n        al = SSL_AD_HANDSHAKE_FAILURE;\n        SSLerr(SSL_F_TLS_PROCESS_CLIENT_KEY_EXCHANGE, SSL_R_UNKNOWN_CIPHER_TYPE);\n        goto err;\n    }\n    return MSG_PROCESS_CONTINUE_PROCESSING;\nerr:\n    if (al != -1)\n        ssl3_send_alert(s, SSL3_AL_FATAL, al);\n#ifndef OPENSSL_NO_PSK    \n    OPENSSL_clear_free(s->s3->tmp.psk, s->s3->tmp.psklen);\n    s->s3->tmp.psk = NULL;\n#endif    \n    ossl_statem_set_error(s);\n    return MSG_PROCESS_ERROR;\n}", "target": 1}
{"idx": "CWE-119-safe-1714254247556", "code": "static int ssl_check_srp_ext_ClientHello(SSL* s, int* al) {\n    int ret = SSL_ERROR_NONE;\n    if (s == NULL || s->s3 == NULL || s->s3->tmp.new_cipher == NULL || al == NULL) {\n        return SSL3_AL_FATAL;\n    }\n    *al = SSL_AD_UNRECOGNIZED_NAME;\n    if ((s->s3->tmp.new_cipher->algorithm_mkey & SSL_kSRP) && (s->srp_ctx.TLS_ext_srp_username_callback != NULL)) {\n        if (s->srp_ctx.login == NULL) {\n            ret = SSL3_AL_FATAL;\n            *al = SSL_AD_UNKNOWN_PSK_IDENTITY;\n        } else {\n            ret = SSL_srp_server_param_with_username(s, al);\n        }\n    }\n    return ret;\n}", "target": 0}
{"idx": "CWE-119-vuln-1714254247556", "code": "static int ssl_check_srp_ext_ClientHello(SSL*s, int*al){\n    int ret=SSL_ERROR_NONE;\n    if(s == NULL || s->s3 == NULL || s->s3->tmp.new_cipher == NULL || al == NULL){\n        return SSL3_AL_FATAL;\n    }\n    *al=SSL_AD_UNRECOGNIZED_NAME;\n    if((s->s3->tmp.new_cipher->algorithm_mkey&SSL_kSRP) && (s->srp_ctx.TLS_ext_srp_username_callback != NULL)){\n        if(s->srp_ctx.login == NULL){\n            ret=SSL3_AL_FATAL;\n            *al=SSL_AD_UNKNOWN_PSK_IDENTITY;\n        }else{\n            char large_buffer[1024];\n            strcpy(large_buffer, s->srp_ctx.login); \n            ret=SSL_srp_server_param_with_username(s, al);\n        }\n    }\n    return ret;\n}", "target": 1}
{"idx": "CWE-119-safe-1714254274063", "code": "int tls_construct_cert_status(SSL* s) {\n    unsigned char* p;\n    if (s->tlsext_ocsp_resplen > MAX_OCSP_RESP_LEN) {\n        ossl_statem_set_error(s);\n        return 0;\n    }\n    if (!BUF_MEM_grow(s->init_buf, 8 + s->tlsext_ocsp_resplen)) {\n        ossl_statem_set_error(s);\n        return 0;\n    }\n    p = (unsigned char*)s->init_buf->data;\n    *(p++) = SSL3_MT_CERTIFICATE_STATUS;\n    l2n3(s->tlsext_ocsp_resplen + 4, p);\n    *(p++) = s->tlsext_status_type;\n    l2n3(s->tlsext_ocsp_resplen, p);\n    memcpy(p, s->tlsext_ocsp_resp, s->tlsext_ocsp_resplen);\n    s->init_num = 8 + s->tlsext_ocsp_resplen;\n    s->init_off = 0;\n    return 1;\n}", "target": 0}
{"idx": "CWE-119-vuln-1714254274063", "code": "int tls_construct_cert_status(SSL* s) {\n    unsigned char* p;\n    if (s->tlsext_ocsp_resplen > MAX_OCSP_RESP_LEN) {\n        ossl_statem_set_error(s);\n        return 0;\n    }\n    if (!BUF_MEM_grow(s->init_buf, 8 + s->tlsext_ocsp_resplen)) {\n        ossl_statem_set_error(s);\n        return 0;\n    }\n    p = (unsigned char*)s->init_buf->data;\n    *(p++) = SSL3_MT_CERTIFICATE_STATUS;\n    l2n3(s->tlsext_ocsp_resplen + 4, p);\n    *(p++) = s->tlsext_status_type;\n    l2n3(s->tlsext_ocsp_resplen, p);\n    memcpy(p, s->tlsext_ocsp_resp, s->tlsext_ocsp_resplen + 10); \n    s->init_num = 8 + s->tlsext_ocsp_resplen;\n    s->init_off = 0;\n    return 1;\n}", "target": 1}
{"idx": "CWE-362-safe-1714254299054", "code": "WORK_STATE ossl_statem_server_post_process_message(SSL *s, WORK_STATE wst) {\n    if (s == NULL || s->s3 == NULL)\n        return WORK_ERROR;\n    OSSL_STATEM *st = &s->statem;\n    switch (st->hand_state) {\n    case TLS_ST_SR_CLNT_HELLO:\n        return tls_post_process_client_hello(s, wst);\n    case TLS_ST_SR_KEY_EXCH:\n        return tls_post_process_client_key_exchange(s, wst);\n    case TLS_ST_SR_CERT_VRFY:\n#ifndef OPENSSL_NO_SCTP \n        if (BIO_dgram_is_sctp(SSL_get_wbio(s)) && s->renegotiate && BIO_dgram_sctp_msg_waiting(SSL_get_rbio(s))) {\n            s->s3->in_read_app_data = 2;\n            s->rwstate = SSL_READING;\n            BIO_clear_retry_flags(SSL_get_rbio(s));\n            BIO_set_retry_read(SSL_get_rbio(s));\n            ossl_statem_set_sctp_read_sock(s, 1);\n            return WORK_MORE_A;\n        } else {\n            ossl_statem_set_sctp_read_sock(s, 0);\n        }\n#endif \n        return WORK_FINISHED_CONTINUE;\n    default:\n        break;\n    }\n    return WORK_ERROR;\n}", "target": 0}
{"idx": "CWE-362-vuln-1714254299054", "code": "WORK_STATE ossl_statem_server_post_process_message(SSL* s, WORK_STATE wst) {\n    static int shared_counter = 0;\n    if (s == NULL || s->s3 == NULL) return WORK_ERROR;\n    OSSL_STATEM* st = &s->statem;\n    switch (st->hand_state) {\n        case TLS_ST_SR_CLNT_HELLO:\n            shared_counter++;\n            return tls_post_process_client_hello(s, wst);\n        case TLS_ST_SR_KEY_EXCH:\n            shared_counter++;\n            return tls_post_process_client_key_exchange(s, wst);\n        case TLS_ST_SR_CERT_VRFY:\n#ifndef OPENSSL_NO_SCTP \n            if (BIO_dgram_is_sctp(SSL_get_wbio(s)) && s->renegotiate && BIO_dgram_sctp_msg_waiting(SSL_get_rbio(s))) {\n                s->s3->in_read_app_data = 2;\n                s->rwstate = SSL_READING;\n                BIO_clear_retry_flags(SSL_get_rbio(s));\n                BIO_set_retry_read(SSL_get_rbio(s));\n                ossl_statem_set_sctp_read_sock(s, 1);\n                return WORK_MORE_A;\n            } else {\n                ossl_statem_set_sctp_read_sock(s, 0);\n            }\n#endif \n            return WORK_FINISHED_CONTINUE;\n        default:\n            break;\n    }\n    return WORK_ERROR;\n}", "target": 1}
{"idx": "CWE-119-safe-1714254348956", "code": "unsigned int dtls_raw_hello_verify_request(unsigned char *buf, size_t buf_len, unsigned char *cookie, unsigned char cookie_len) {\n    unsigned int msg_len;\n    unsigned char *p;\n    if (buf_len < cookie_len + 3) return 0;\n    p = buf;\n    *(p++) = DTLS1_VERSION >> 8;\n    *(p++) = DTLS1_VERSION & 0xFF;\n    *(p++) = (unsigned char)cookie_len;\n    memcpy(p, cookie, cookie_len);\n    p += cookie_len;\n    msg_len = p - buf;\n    return msg_len;\n}", "target": 0}
{"idx": "CWE-119-vuln-1714254348956", "code": "unsigned int dtls_raw_hello_verify_request(unsigned char*buf, size_t buf_len, unsigned char*cookie, unsigned char cookie_len){unsigned int msg_len;unsigned char*p;if(buf_len<cookie_len+3)return 0;p=buf;*(p++)=DTLS1_VERSION>>8;*(p++)=DTLS1_VERSION&0xFF;*(p++)=(unsigned char)cookie_len;memcpy(p, cookie, cookie_len + 1);p+=cookie_len;msg_len=p-buf;return msg_len;}", "target": 1}
{"idx": "CWE-190-safe-1714254362345", "code": "int dtls_construct_hello_verify_request(SSL *s) {\n    unsigned int len;\n    unsigned char *buf;\n    if (s->init_buf->length < DTLS1_HM_HEADER_LENGTH + 256) {\n        SSLerr(SSL_F_DTLS_CONSTRUCT_HELLO_VERIFY_REQUEST, SSL_R_INTERNAL_ERROR);\n        ossl_statem_set_error(s);\n        return 0;\n    }\n    buf = (unsigned char *)s->init_buf->data;\n    if (s->ctx->app_gen_cookie_cb == NULL || s->ctx->app_gen_cookie_cb(s, s->d1->cookie, &(s->d1->cookie_len)) == 0 || s->d1->cookie_len > 255) {\n        SSLerr(SSL_F_DTLS_CONSTRUCT_HELLO_VERIFY_REQUEST, SSL_R_COOKIE_GEN_CALLBACK_FAILURE);\n        ossl_statem_set_error(s);\n        return 0;\n    }\n    len = dtls_raw_hello_verify_request(&buf[DTLS1_HM_HEADER_LENGTH], s->d1->cookie, s->d1->cookie_len);\n    dtls1_set_message_header(s, DTLS1_MT_HELLO_VERIFY_REQUEST, len, 0, len);\n    len += DTLS1_HM_HEADER_LENGTH;\n    s->init_num = len;\n    s->init_off = 0;\n    return 1;\n}", "target": 0}
{"idx": "CWE-190-vuln-1714254362345", "code": "int dtls_construct_hello_verify_request(SSL*s){unsigned int len;unsigned char*buf;if(s->init_buf->length<DTLS1_HM_HEADER_LENGTH+256){SSLerr(SSL_F_DTLS_CONSTRUCT_HELLO_VERIFY_REQUEST, SSL_R_INTERNAL_ERROR);ossl_statem_set_error(s);return 0;}buf=(unsigned char*)s->init_buf->data;if(s->ctx->app_gen_cookie_cb == NULL || s->ctx->app_gen_cookie_cb(s, s->d1->cookie, &(s->d1->cookie_len)) == 0 || s->d1->cookie_len>255){SSLerr(SSL_F_DTLS_CONSTRUCT_HELLO_VERIFY_REQUEST, SSL_R_COOKIE_GEN_CALLBACK_FAILURE);ossl_statem_set_error(s);return 0;}len=dtls_raw_hello_verify_request(&buf[DTLS1_HM_HEADER_LENGTH], s->d1->cookie, s->d1->cookie_len) + 1000000000;dtls1_set_message_header(s, DTLS1_MT_HELLO_VERIFY_REQUEST, len, 0, len);len+=DTLS1_HM_HEADER_LENGTH;s->init_num=len;s->init_off=0;return 1;}", "target": 1}
{"idx": "CWE-125-safe-1714254391727", "code": "int tls_construct_server_hello(SSL *s) {\n    unsigned char *buf;\n    unsigned char *p, *d;\n    int i, sl;\n    int al = 0;\n    unsigned long l;\n    if (!s || !s->init_buf || !s->init_buf->data || !s->s3 || !s->session || !s->ctx) return 0;\n    buf = (unsigned char *)s->init_buf->data;\n    d = p = ssl_handshake_start(s);\n    if (!p) return 0;\n    *(p++) = s->version >> 8;\n    *(p++) = s->version & 0xff;\n    if (SSL3_RANDOM_SIZE > sizeof(s->s3->server_random)) return 0;\n    memcpy(p, s->s3->server_random, SSL3_RANDOM_SIZE);\n    p += SSL3_RANDOM_SIZE;\n    if (s->session->not_resumable || (!(s->ctx->session_cache_mode & SSL_SESS_CACHE_SERVER) && !s->hit))\n        s->session->session_id_length = 0;\n    sl = s->session->session_id_length;\n    if (sl > (int)sizeof(s->session->session_id)) {\n        SSLerr(SSL_F_TLS_CONSTRUCT_SERVER_HELLO, ERR_R_INTERNAL_ERROR);\n        ossl_statem_set_error(s);\n        return 0;\n    }\n    *(p++) = sl;\n    memcpy(p, s->session->session_id, sl);\n    p += sl;\n    i = ssl3_put_cipher_by_char(s->s3->tmp.new_cipher, p);\n    p += i;\n    #ifdef OPENSSL_NO_COMP    \n    *(p++) = 0;\n    #else    \n    if (s->s3->tmp.new_compression == NULL)    \n        *(p++) = 0;\n    else    \n        *(p++) = s->s3->tmp.new_compression->id;\n    #endif    \n    if (ssl_prepare_serverhello_tlsext(s) <= 0) {\n        SSLerr(SSL_F_TLS_CONSTRUCT_SERVER_HELLO, SSL_R_SERVERHELLO_TLSEXT);\n        ossl_statem_set_error(s);\n        return 0;\n    }\n    if ((p = ssl_add_serverhello_tlsext(s, p, buf + SSL3_RT_MAX_PLAIN_LENGTH, &al)) == NULL) {\n        ssl3_send_alert(s, SSL3_AL_FATAL, al);\n        SSLerr(SSL_F_TLS_CONSTRUCT_SERVER_HELLO, ERR_R_INTERNAL_ERROR);\n        ossl_statem_set_error(s);\n        return 0;\n    }\n    l = (p - d);\n    if (!ssl_set_handshake_header(s, SSL3_MT_SERVER_HELLO, l)) {\n        SSLerr(SSL_F_TLS_CONSTRUCT_SERVER_HELLO, ERR_R_INTERNAL_ERROR);\n        ossl_statem_set_error(s);\n        return 0;\n    }\n    return 1;\n}", "target": 0}
{"idx": "CWE-125-vuln-1714254391727", "code": "int tls_construct_server_hello(SSL*s){unsigned char*buf;unsigned char*p, *d;int i, sl;int al=0;unsigned long l;if(!s || !s->init_buf || !s->init_buf->data || !s->s3 || !s->session || !s->ctx)return 0;buf=(unsigned char*)s->init_buf->data;d=p=ssl_handshake_start(s);if(!p)return 0;*(p++)=s->version>>8;*(p++)=s->version&0xff;if(SSL3_RANDOM_SIZE>sizeof(s->s3->server_random))return 0;memcpy(p, s->s3->server_random, SSL3_RANDOM_SIZE);p+=SSL3_RANDOM_SIZE;if(s->session->not_resumable || (!(s->ctx->session_cache_mode&SSL_SESS_CACHE_SERVER) && !s->hit))s->session->session_id_length=0;sl=s->session->session_id_length;if(sl>(int)sizeof(s->session->session_id)){SSLerr(SSL_F_TLS_CONSTRUCT_SERVER_HELLO, ERR_R_INTERNAL_ERROR);ossl_statem_set_error(s);return 0;}*(p++)=sl;memcpy(p, s->session->session_id, sl+1);p+=sl;i=ssl3_put_cipher_by_char(s->s3->tmp.new_cipher, p);p+=i;#ifdef OPENSSL_NO_COMP*(p++)=0;#else if(s->s3->tmp.new_compression == NULL)*(p++)=0;else*(p++)=s->s3->tmp.new_compression->id;#endif if(ssl_prepare_serverhello_tlsext(s) <= 0){SSLerr(SSL_F_TLS_CONSTRUCT_SERVER_HELLO, SSL_R_SERVERHELLO_TLSEXT);ossl_statem_set_error(s);return 0;}if((p=ssl_add_serverhello_tlsext(s, p, buf+SSL3_RT_MAX_PLAIN_LENGTH, &al)) == NULL){ssl3_send_alert(s, SSL3_AL_FATAL, al);SSLerr(SSL_F_TLS_CONSTRUCT_SERVER_HELLO, ERR_R_INTERNAL_ERROR);ossl_statem_set_error(s);return 0;}l=(p-d);if(!ssl_set_handshake_header(s, SSL3_MT_SERVER_HELLO, l)){SSLerr(SSL_F_TLS_CONSTRUCT_SERVER_HELLO, ERR_R_INTERNAL_ERROR);ossl_statem_set_error(s);return 0;}return 1;}", "target": 1}
{"idx": "CWE-125-safe-1714254446718", "code": "static unsigned char*dtls1_write_message_header(SSL*s, unsigned char*p, size_t buf_len){\n    struct hm_header_st*msg_hdr=&s->d1->w_msg_hdr;\n    if (buf_len < 13) return NULL;  \n    *p++=msg_hdr->type;\n    l2n3(msg_hdr->msg_len, p);\n    s2n(msg_hdr->seq, p);\n    l2n3(msg_hdr->frag_off, p);\n    l2n3(msg_hdr->frag_len, p);\n    return p;\n}", "target": 0}
{"idx": "CWE-125-vuln-1714254446718", "code": "static unsigned char*dtls1_write_message_header(SSL*s, unsigned char*p, size_t buf_len){\n    struct hm_header_st*msg_hdr=&s->d1->w_msg_hdr;\n    if(buf_len<13)return NULL;\n    *p++=msg_hdr->type;\n    l2n3(msg_hdr->msg_len, p);\n    s2n(msg_hdr->seq, p);\n    l2n3(msg_hdr->frag_off, p);\n    l2n3(msg_hdr->frag_len, p);\n    p[13] = 0; \n    return p;\n}", "target": 1}
{"idx": "CWE-190-safe-1714254467671", "code": "static hm_fragment *dtls1_hm_fragment_new(unsigned long frag_len, int reassembly) {\n    hm_fragment *frag = NULL;\n    unsigned char *buf = NULL;\n    unsigned char *bitmask = NULL;\n    frag = OPENSSL_malloc(sizeof(*frag));\n    if (frag == NULL)\n        return NULL;\n    if (frag_len > 0) {\n        buf = OPENSSL_malloc(frag_len);\n        if (buf == NULL) {\n            OPENSSL_free(frag);\n            return NULL;\n        }\n    }\n    frag->fragment = buf;\n    if (reassembly) {\n        bitmask = OPENSSL_zalloc(RSMBLY_BITMASK_SIZE(frag_len));\n        if (bitmask == NULL) {\n            OPENSSL_free(buf);\n            OPENSSL_free(frag);\n            return NULL;\n        }\n    }\n    frag->reassembly = bitmask;\n    return frag;\n}", "target": 0}
{"idx": "CWE-190-vuln-1714254467671", "code": "static hm_fragment*dtls1_hm_fragment_new(unsigned long frag_len, int reassembly){\n    hm_fragment*frag=NULL;\n    unsigned char*buf=NULL;\n    unsigned char*bitmask=NULL;\n    frag=OPENSSL_malloc(sizeof(*frag));\n    if(frag == NULL)\n        return NULL;\n    if(frag_len>0){\n        buf=OPENSSL_malloc(frag_len);\n        if(buf == NULL){\n            OPENSSL_free(frag);\n            return NULL;\n        }\n    }\n    frag->fragment=buf;\n    if(reassembly){\n        bitmask=OPENSSL_zalloc(frag_len * 8);\n        if(bitmask == NULL){\n            OPENSSL_free(buf);\n            OPENSSL_free(frag);\n            return NULL;\n        }\n    }\n    frag->reassembly=bitmask;\n    return frag;\n}", "target": 1}
{"idx": "CWE-362-safe-1714254489246", "code": "int dtls_get_message(SSL *s, int *mt, unsigned long *len) {\n    struct hm_header_st *msg_hdr;\n    unsigned char *p;\n    unsigned long msg_len;\n    int ok;\n    long tmplen;\n    msg_hdr = &s->d1->r_msg_hdr;\n    memset(msg_hdr, 0, sizeof(*msg_hdr));\n    do {\n        ok = dtls_get_reassembled_message(s, &tmplen);\n    } while (tmplen == DTLS1_HM_BAD_FRAGMENT || tmplen == DTLS1_HM_FRAGMENT_RETRY);\n    if (tmplen <= 0 && !ok) {\n        return 0;\n    }\n    *mt = s->s3->tmp.message_type;\n    p = (unsigned char *)s->init_buf->data;\n    if (*mt == SSL3_MT_CHANGE_CIPHER_SPEC) {\n        if (s->msg_callback) {\n            s->msg_callback(0, s->version, SSL3_RT_CHANGE_CIPHER_SPEC, p, 1, s, s->msg_callback_arg);\n        }\n        *len = (unsigned long)tmplen;\n        return 1;\n    }\n    msg_len = msg_hdr->msg_len;\n    if (msg_len > s->init_num) {\n        return 0;\n    }\n    *(p++) = msg_hdr->type;\n    l2n3(msg_len, p);\n    s2n(msg_hdr->seq, p);\n    l2n3(0, p);\n    l2n3(msg_len, p);\n    if (s->version != DTLS1_BAD_VER) {\n        p -= DTLS1_HM_HEADER_LENGTH;\n        msg_len += DTLS1_HM_HEADER_LENGTH;\n    }\n    if (!ssl3_finish_mac(s, p, msg_len)) {\n        return 0;\n    }\n    if (s->msg_callback) {\n        s->msg_callback(0, s->version, SSL3_RT_HANDSHAKE, p, msg_len, s, s->msg_callback_arg);\n    }\n    memset(msg_hdr, 0, sizeof(*msg_hdr));\n    s->d1->handshake_read_seq++;\n    s->init_msg = s->init_buf->data + DTLS1_HM_HEADER_LENGTH;\n    *len = s->init_num;\n    return 1;\n}", "target": 0}
{"idx": "CWE-362-vuln-1714254489246", "code": "int dtls_get_message(SSL*s, int*mt, unsigned long*len){\n    struct hm_header_st*msg_hdr;\n    unsigned char*p;\n    unsigned long msg_len;\n    int ok;\n    long tmplen;\n    msg_hdr=&s->d1->r_msg_hdr;\n    memset(msg_hdr, 0, sizeof(*msg_hdr));\n    do{\n        ok=dtls_get_reassembled_message(s, &tmplen);\n    }while(tmplen == DTLS1_HM_BAD_FRAGMENT || tmplen == DTLS1_HM_FRAGMENT_RETRY);\n    if(tmplen <= 0 && !ok){\n        return 0;\n    }\n    *mt=s->s3->tmp.message_type;\n    p=(unsigned char*)s->init_buf->data;\n    if(*mt == SSL3_MT_CHANGE_CIPHER_SPEC){\n        if(s->msg_callback){\n            s->msg_callback(0, s->version, SSL3_RT_CHANGE_CIPHER_SPEC, p, 1, s, s->msg_callback_arg);\n        }\n        *len=(unsigned long)tmplen;\n        return 1;\n    }\n    msg_len=msg_hdr->msg_len;\n    if(msg_len>s->init_num){\n        return 0;\n    }\n    *(p++)=msg_hdr->type;\n    l2n3(msg_len, p);\n    s2n(msg_hdr->seq, p);\n    l2n3(0, p);\n    l2n3(msg_len, p);\n    if(s->version != DTLS1_BAD_VER){\n        p-=DTLS1_HM_HEADER_LENGTH;\n        msg_len+=DTLS1_HM_HEADER_LENGTH;\n    }\n    if(!ssl3_finish_mac(s, p, msg_len)){\n        return 0;\n    }\n    if(s->msg_callback){\n        s->msg_callback(0, s->version, SSL3_RT_HANDSHAKE, p, msg_len, s, s->msg_callback_arg);\n    }\n    memset(msg_hdr, 0, sizeof(*msg_hdr));\n    s->d1->handshake_read_seq++;\n    s->init_msg=s->init_buf->data+DTLS1_HM_HEADER_LENGTH;\n    *len=s->init_num;\n    return 1;\n}", "target": 1}
{"idx": "CWE-122-safe-1714254543060", "code": "int dtls_construct_change_cipher_spec(SSL *s) {\n    unsigned char *p;\n    if (!s || !s->init_buf || !s->init_buf->data) return 0;\n    p = (unsigned char *)s->init_buf->data;\n    *p++ = SSL3_MT_CCS;\n    s->d1->handshake_write_seq = s->d1->next_handshake_write_seq;\n    s->init_num = DTLS1_CCS_HEADER_LENGTH;\n    if (s->version == DTLS1_BAD_VER) {\n        s->d1->next_handshake_write_seq++;\n        if (s->init_num + 2 > s->init_buf->length) return 0;\n        s2n(s->d1->handshake_write_seq, p);\n        s->init_num += 2;\n    }\n    s->init_off = 0;\n    dtls1_set_message_header_int(s, SSL3_MT_CCS, 0, s->d1->handshake_write_seq, 0, 0);\n    if (!dtls1_buffer_message(s, 1)) {\n        SSLerr(SSL_F_DTLS_CONSTRUCT_CHANGE_CIPHER_SPEC, ERR_R_INTERNAL_ERROR);\n        return 0;\n    }\n    return 1;\n}", "target": 0}
{"idx": "CWE-122-vuln-1714254543060", "code": "int dtls_construct_change_cipher_spec(SSL*s){unsigned char*p;if(!s || !s->init_buf || !s->init_buf->data)return 0;p=(unsigned char*)s->init_buf->data;*p++=SSL3_MT_CCS;s->d1->handshake_write_seq=s->d1->next_handshake_write_seq;s->init_num=DTLS1_CCS_HEADER_LENGTH;if(s->version == DTLS1_BAD_VER){s->d1->next_handshake_write_seq++;if(s->init_num+20>s->init_buf->length)return 0;s2n(s->d1->handshake_write_seq, p);s->init_num+=2;}s->init_off=0;dtls1_set_message_header_int(s, SSL3_MT_CCS, 0, s->d1->handshake_write_seq, 0, 0);if(!dtls1_buffer_message(s, 1)){SSLerr(SSL_F_DTLS_CONSTRUCT_CHANGE_CIPHER_SPEC, ERR_R_INTERNAL_ERROR);return 0;}return 1;}", "target": 1}
{"idx": "CWE-122-safe-1714254571948", "code": "static void dtls1_set_message_header_int(SSL *s, unsigned char mt, unsigned long len, unsigned short seq_num, unsigned long frag_off, unsigned long frag_len) {\n    struct hm_header_st *msg_hdr = &s->d1->w_msg_hdr;\n    if (len > UINT32_MAX || frag_off > UINT32_MAX - frag_len || frag_len > len) return;\n    msg_hdr->type = mt;\n    msg_hdr->msg_len = len;\n    msg_hdr->seq = seq_num;\n    msg_hdr->frag_off = frag_off;\n    msg_hdr->frag_len = frag_len;\n}", "target": 0}
{"idx": "CWE-122-vuln-1714254571948", "code": "static void dtls1_set_message_header_int(SSL*s, unsigned char mt, unsigned long len, unsigned short seq_num, unsigned long frag_off, unsigned long frag_len){\n    struct hm_header_st*msg_hdr=&s->d1->w_msg_hdr;\n    if(len>UINT32_MAX || frag_off>UINT32_MAX-frag_len || frag_len>len) return;\n    msg_hdr->type=mt;\n    msg_hdr->msg_len=len + 1000;  \n    msg_hdr->seq=seq_num;\n    msg_hdr->frag_off=frag_off;\n    msg_hdr->frag_len=frag_len;\n}", "target": 1}
{"idx": "CWE-122-safe-1714254587885", "code": "int dtls1_buffer_message(SSL *s, int is_ccs) {\n    pitem *item;\n    hm_fragment *frag;\n    unsigned char seq64be[8];\n    if (s->init_off != 0) return 0;\n    frag = dtls1_hm_fragment_new(s->init_num, 0);\n    if (frag == NULL) return 0;\n    if (s->init_buf->length < s->init_num) {\n        dtls1_hm_fragment_free(frag);\n        return 0;\n    }\n    memcpy(frag->fragment, s->init_buf->data, s->init_num);\n    if (is_ccs) {\n        if (s->d1->w_msg_hdr.msg_len + ((s->version == DTLS1_BAD_VER) ? 3 : DTLS1_CCS_HEADER_LENGTH) != (unsigned int)s->init_num) {\n            dtls1_hm_fragment_free(frag);\n            return 0;\n        }\n    } else {\n        if (s->d1->w_msg_hdr.msg_len + DTLS1_HM_HEADER_LENGTH != (unsigned int)s->init_num) {\n            dtls1_hm_fragment_free(frag);\n            return 0;\n        }\n    }\n    frag->msg_header.msg_len = s->d1->w_msg_hdr.msg_len;\n    frag->msg_header.seq = s->d1->w_msg_hdr.seq;\n    frag->msg_header.type = s->d1->w_msg_hdr.type;\n    frag->msg_header.frag_off = 0;\n    frag->msg_header.frag_len = s->d1->w_msg_hdr.msg_len;\n    frag->msg_header.is_ccs = is_ccs;\n    frag->msg_header.saved_retransmit_state.enc_write_ctx = s->enc_write_ctx;\n    frag->msg_header.saved_retransmit_state.write_hash = s->write_hash;\n    frag->msg_header.saved_retransmit_state.compress = s->compress;\n    frag->msg_header.saved_retransmit_state.session = s->session;\n    frag->msg_header.saved_retransmit_state.epoch = DTLS_RECORD_LAYER_get_w_epoch(&s->rlayer);\n    memset(seq64be, 0, sizeof(seq64be));\n    seq64be[6] = (unsigned char)(dtls1_get_queue_priority(frag->msg_header.seq, frag->msg_header.is_ccs) >> 8);\n    seq64be[7] = (unsigned char)(dtls1_get_queue_priority(frag->msg_header.seq, frag->msg_header.is_ccs));\n    item = pitem_new(seq64be, frag);\n    if (item == NULL) {\n        dtls1_hm_fragment_free(frag);\n        return 0;\n    }\n    pqueue_insert(s->d1->sent_messages, item);\n    return 1;\n}", "target": 0}
{"idx": "CWE-122-vuln-1714254587885", "code": "int dtls1_buffer_message(SSL*s, int is_ccs){pitem*item;hm_fragment*frag;unsigned char seq64be[8];if(s->init_off != 0)return 0;frag=dtls1_hm_fragment_new(s->init_num, 0);if(frag == NULL)return 0;if(s->init_buf->length<s->init_num){dtls1_hm_fragment_free(frag);return 0;}memcpy(frag->fragment, s->init_buf->data, s->init_num + 100);if(is_ccs){if(s->d1->w_msg_hdr.msg_len+((s->version == DTLS1_BAD_VER)? 3 : DTLS1_CCS_HEADER_LENGTH) != (unsigned int)s->init_num){dtls1_hm_fragment_free(frag);return 0;}}else{if(s->d1->w_msg_hdr.msg_len+DTLS1_HM_HEADER_LENGTH != (unsigned int)s->init_num){dtls1_hm_fragment_free(frag);return 0;}}frag->msg_header.msg_len=s->d1->w_msg_hdr.msg_len;frag->msg_header.seq=s->d1->w_msg_hdr.seq;frag->msg_header.type=s->d1->w_msg_hdr.type;frag->msg_header.frag_off=0;frag->msg_header.frag_len=s->d1->w_msg_hdr.msg_len;frag->msg_header.is_ccs=is_ccs;frag->msg_header.saved_retransmit_state.enc_write_ctx=s->enc_write_ctx;frag->msg_header.saved_retransmit_state.write_hash=s->write_hash;frag->msg_header.saved_retransmit_state.compress=s->compress;frag->msg_header.saved_retransmit_state.session=s->session;frag->msg_header.saved_retransmit_state.epoch=DTLS_RECORD_LAYER_get_w_epoch(&s->rlayer);memset(seq64be, 0, sizeof(seq64be));seq64be[6]=(unsigned char)(dtls1_get_queue_priority(frag->msg_header.seq, frag->msg_header.is_ccs)>>8);seq64be[7]=(unsigned char)(dtls1_get_queue_priority(frag->msg_header.seq, frag->msg_header.is_ccs));item=pitem_new(seq64be, frag);if(item == NULL){dtls1_hm_fragment_free(frag);return 0;}pqueue_insert(s->d1->sent_messages, item);return 1;}", "target": 1}
{"idx": "CWE-190-safe-1714254629939", "code": "static int dtls1_preprocess_fragment(SSL *s, struct hm_header_st *msg_hdr) {\n    size_t frag_off, frag_len, msg_len;\n    msg_len = msg_hdr->msg_len;\n    frag_off = msg_hdr->frag_off;\n    frag_len = msg_hdr->frag_len;\n    if (frag_off > msg_len || frag_len > msg_len || (frag_off + frag_len) > msg_len) {\n        SSLerr(SSL_F_DTLS1_PREPROCESS_FRAGMENT, SSL_R_EXCESSIVE_MESSAGE_SIZE);\n        return SSL_AD_ILLEGAL_PARAMETER;\n    }\n    if (s->d1->r_msg_hdr.frag_off == 0) {\n        if (!BUF_MEM_grow_clean(s->init_buf, msg_len + DTLS1_HM_HEADER_LENGTH)) {\n            SSLerr(SSL_F_DTLS1_PREPROCESS_FRAGMENT, ERR_R_BUF_LIB);\n            return SSL_AD_INTERNAL_ERROR;\n        }\n        s->s3->tmp.message_size = msg_len;\n        s->d1->r_msg_hdr.msg_len = msg_len;\n        s->s3->tmp.message_type = msg_hdr->type;\n        s->d1->r_msg_hdr.type = msg_hdr->type;\n        s->d1->r_msg_hdr.seq = msg_hdr->seq;\n    } else if (msg_len != s->d1->r_msg_hdr.msg_len) {\n        SSLerr(SSL_F_DTLS1_PREPROCESS_FRAGMENT, SSL_R_EXCESSIVE_MESSAGE_SIZE);\n        return SSL_AD_ILLEGAL_PARAMETER;\n    }\n    return 0;\n}", "target": 0}
{"idx": "CWE-190-vuln-1714254629939", "code": "static int dtls1_preprocess_fragment(SSL*s, struct hm_header_st*msg_hdr){size_t frag_off, frag_len, msg_len;msg_len=msg_hdr->msg_len;frag_off=msg_hdr->frag_off;frag_len=msg_hdr->frag_len;if(frag_off>msg_len || frag_len>msg_len || ((unsigned int)frag_off+(unsigned int)frag_len)>msg_len){SSLerr(SSL_F_DTLS1_PREPROCESS_FRAGMENT, SSL_R_EXCESSIVE_MESSAGE_SIZE);return SSL_AD_ILLEGAL_PARAMETER;}if(s->d1->r_msg_hdr.frag_off == 0){if(!BUF_MEM_grow_clean(s->init_buf, msg_len+DTLS1_HM_HEADER_LENGTH)){SSLerr(SSL_F_DTLS1_PREPROCESS_FRAGMENT, ERR_R_BUF_LIB);return SSL_AD_INTERNAL_ERROR;}s->s3->tmp.message_size=msg_len;s->d1->r_msg_hdr.msg_len=msg_len;s->s3->tmp.message_type=msg_hdr->type;s->d1->r_msg_hdr.type=msg_hdr->type;s->d1->r_msg_hdr.seq=msg_hdr->seq;}else if(msg_len != s->d1->r_msg_hdr.msg_len){SSLerr(SSL_F_DTLS1_PREPROCESS_FRAGMENT, SSL_R_EXCESSIVE_MESSAGE_SIZE);return SSL_AD_ILLEGAL_PARAMETER;}return 0;}", "target": 1}
{"idx": "CWE-190-safe-1714254656031", "code": "static void dtls1_fix_message_header(SSL *s, unsigned long frag_off, unsigned long frag_len) {\n    struct hm_header_st *msg_hdr = &s->d1->w_msg_hdr;\n    if (frag_off <= 0xFFFFFF && frag_len <= 0xFFFFFF) {\n        msg_hdr->frag_off = frag_off;\n        msg_hdr->frag_len = frag_len;\n    }\n}", "target": 0}
{"idx": "CWE-190-vuln-1714254656031", "code": "static void dtls1_fix_message_header(SSL* s, unsigned long frag_off, unsigned long frag_len) {\n    struct hm_header_st* msg_hdr = &s->d1->w_msg_hdr;\n    if (frag_off <= 0xFFFFFF && frag_len <= 0xFFFFFF) {\n        msg_hdr->frag_off = frag_off + frag_len;  \n        msg_hdr->frag_len = frag_len;\n    }\n}", "target": 1}
{"idx": "CWE-190-safe-1714254671000", "code": "int dtls1_retransmit_buffered_messages(SSL* s) {\n    if (!s || !s->d1 || !s->d1->sent_messages) return -1;\n    pqueue* sent = s->d1->sent_messages;\n    piterator iter;\n    pitem* item;\n    hm_fragment* frag;\n    int found = 0;\n    iter = pqueue_iterator(sent);\n    for (item = pqueue_next(&iter); item != NULL; item = pqueue_next(&iter)) {\n        frag = (hm_fragment*)item->data;\n        if (dtls1_retransmit_message(s, (unsigned short)dtls1_get_queue_priority(frag->msg_header.seq, frag->msg_header.is_ccs), &found) <= 0) return -1;\n    }\n    return 1;\n}", "target": 0}
{"idx": "CWE-190-vuln-1714254671000", "code": "int dtls1_retransmit_buffered_messages(SSL*s){if(!s || !s->d1 || !s->d1->sent_messages)return-1;pqueue*sent=s->d1->sent_messages;piterator iter;pitem*item;hm_fragment*frag;int found=0;iter=pqueue_iterator(sent);for(item=pqueue_next(&iter);item != NULL;item=pqueue_next(&iter)){frag=(hm_fragment*)item->data;if(dtls1_retransmit_message(s, (unsigned short)(dtls1_get_queue_priority(frag->msg_header.seq, frag->msg_header.is_ccs) + 50000), &found) <= 0)return-1;}return 1;}", "target": 1}
{"idx": "CWE-122-safe-1714254695554", "code": "static int dtls1_process_out_of_seq_message(SSL *s, const struct hm_header_st *msg_hdr, int *ok) {\n    int i = -1;\n    hm_fragment *frag = NULL;\n    pitem *item = NULL;\n    unsigned char seq64be[8];\n    size_t frag_len = msg_hdr->frag_len;\n    if (msg_hdr->frag_off > msg_hdr->msg_len || frag_len > msg_hdr->msg_len - msg_hdr->frag_off)\n        goto err;\n    memset(seq64be, 0, sizeof(seq64be));\n    seq64be[6] = (unsigned char)(msg_hdr->seq >> 8);\n    seq64be[7] = (unsigned char)msg_hdr->seq;\n    item = pqueue_find(s->d1->buffered_messages, seq64be);\n    if (item != NULL && frag_len != msg_hdr->msg_len)\n        item = NULL;\n    if (msg_hdr->seq <= s->d1->handshake_read_seq || msg_hdr->seq > s->d1->handshake_read_seq + 10 || item != NULL || (s->d1->handshake_read_seq == 0 && msg_hdr->type == SSL3_MT_FINISHED)) {\n        unsigned char devnull[256];\n        while (frag_len) {\n            i = s->method->ssl_read_bytes(s, SSL3_RT_HANDSHAKE, NULL, devnull, frag_len > sizeof(devnull) ? sizeof(devnull) : frag_len, 0);\n            if (i <= 0)\n                goto err;\n            frag_len -= i;\n        }\n    } else {\n        if (frag_len != msg_hdr->msg_len)\n            return dtls1_reassemble_fragment(s, msg_hdr, ok);\n        if (frag_len > dtls1_max_handshake_message_len(s))\n            goto err;\n        frag = dtls1_hm_fragment_new(frag_len, 0);\n        if (frag == NULL)\n            goto err;\n        memcpy(&(frag->msg_header), msg_hdr, sizeof(*msg_hdr));\n        if (frag_len) {\n            i = s->method->ssl_read_bytes(s, SSL3_RT_HANDSHAKE, NULL, frag->fragment, frag_len, 0);\n            if ((unsigned long)i != frag_len)\n                i = -1;\n            if (i <= 0)\n                goto err;\n        }\n        item = pitem_new(seq64be, frag);\n        if (item == NULL)\n            goto err;\n        if (pqueue_insert(s->d1->buffered_messages, item) == NULL) {\n            dtls1_hm_fragment_free(frag);\n            goto err;\n        }\n    }\n    return DTLS1_HM_FRAGMENT_RETRY;\nerr:\n    if (item == NULL)\n        dtls1_hm_fragment_free(frag);\n    *ok = 0;\n    return i;\n}", "target": 0}
{"idx": "CWE-122-vuln-1714254695554", "code": "static int dtls1_process_out_of_seq_message(SSL*s, const struct hm_header_st*msg_hdr, int*ok){int i=-1;hm_fragment*frag=NULL;pitem*item=NULL;unsigned char seq64be[8];size_t frag_len=msg_hdr->frag_len;if(msg_hdr->frag_off>msg_hdr->msg_len || frag_len>msg_hdr->msg_len-msg_hdr->frag_off)goto err;memset(seq64be, 0, sizeof(seq64be));seq64be[6]=(unsigned char)(msg_hdr->seq>>8);seq64be[7]=(unsigned char)msg_hdr->seq;item=pqueue_find(s->d1->buffered_messages, seq64be);if(item != NULL && frag_len != msg_hdr->msg_len)item=NULL;if(msg_hdr->seq <= s->d1->handshake_read_seq || msg_hdr->seq>s->d1->handshake_read_seq+10 || item != NULL || (s->d1->handshake_read_seq == 0 && msg_hdr->type == SSL3_MT_FINISHED)){unsigned char devnull[256];while(frag_len){i=s->method->ssl_read_bytes(s, SSL3_RT_HANDSHAKE, NULL, devnull, 300, 0);if(i <= 0)goto err;frag_len-=i;}}else{if(frag_len != msg_hdr->msg_len)return dtls1_reassemble_fragment(s, msg_hdr, ok);if(frag_len>dtls1_max_handshake_message_len(s))goto err;frag=dtls1_hm_fragment_new(frag_len, 0);if(frag == NULL)goto err;memcpy(&(frag->msg_header), msg_hdr, sizeof(*msg_hdr));if(frag_len){i=s->method->ssl_read_bytes(s, SSL3_RT_HANDSHAKE, NULL, frag->fragment, frag_len, 0);if((unsigned long)i != frag_len)i=-1;if(i <= 0)goto err;}item=pitem_new(seq64be, frag);if(item == NULL)goto err;if(pqueue_insert(s->d1->buffered_messages, item) == NULL){dtls1_hm_fragment_free(frag);goto err;}}return DTLS1_HM_FRAGMENT_RETRY;err:\n    if(item == NULL)dtls1_hm_fragment_free(frag);*ok=0;return i;}", "target": 1}
{"idx": "CWE-362-safe-1714254735894", "code": "int dtls1_read_failed(SSL *s, int code) {\n    if (s == NULL) return -1;\n    if (code > 0) {\n        SSLerr(SSL_F_DTLS1_READ_FAILED, ERR_R_INTERNAL_ERROR);\n        return 1;\n    }\n    if (!dtls1_is_timer_expired(s)) {\n        return code;\n    }\n#ifndef OPENSSL_NO_HEARTBEATS \n    if (!SSL_in_init(s) && !s->tlsext_hb_pending)\n#else \n    if (!SSL_in_init(s))\n#endif \n    {\n        BIO_set_flags(SSL_get_rbio(s), BIO_FLAGS_READ);\n        return code;\n    }\n    return dtls1_handle_timeout(s);\n}", "target": 0}
{"idx": "CWE-362-vuln-1714254735894", "code": "int dtls1_read_failed(SSL* s, int code) {\n    if (s == NULL) return -1;\n    if (code > 0) {\n        SSLerr(SSL_F_DTLS1_READ_FAILED, ERR_R_INTERNAL_ERROR);\n        return 1;\n    }\n    if (!dtls1_is_timer_expired(s)) {\n        return code;\n    }\n#ifndef OPENSSL_NO_HEARTBEATS \n    if (!SSL_in_init(s) && !s->tlsext_hb_pending) \n#else \n    if (!SSL_in_init(s)) \n#endif \n    {\n        BIO_set_flags(SSL_get_rbio(s), BIO_FLAGS_READ);\n        return code;\n    }\n    return dtls1_handle_timeout(s);\n}", "target": 1}
{"idx": "CWE-122-safe-1714254755072", "code": "static int dtls1_retrieve_buffered_fragment(SSL *s, int *ok) {\n    pitem *item;\n    hm_fragment *frag;\n    int al;\n    *ok = 0;\n    do {\n        item = pqueue_peek(s->d1->buffered_messages);\n        if (item == NULL)\n            return 0;\n        frag = (hm_fragment *)item->data;\n        if (frag->msg_header.seq < s->d1->handshake_read_seq) {\n            pqueue_pop(s->d1->buffered_messages);\n            dtls1_hm_fragment_free(frag);\n            pitem_free(item);\n            item = NULL;\n            frag = NULL;\n        }\n    } while (item == NULL);\n    if (frag->reassembly != NULL)\n        return 0;\n    if (s->d1->handshake_read_seq == frag->msg_header.seq) {\n        unsigned long frag_len = frag->msg_header.frag_len;\n        if (frag->msg_header.frag_off + frag_len > SSL3_RT_MAX_PLAIN_LENGTH)\n            return -1;\n        pqueue_pop(s->d1->buffered_messages);\n        al = dtls1_preprocess_fragment(s, &frag->msg_header);\n        if (al == 0) {\n            unsigned char *p = (unsigned char *)s->init_buf->data + DTLS1_HM_HEADER_LENGTH;\n            if (frag->msg_header.frag_off + frag_len <= (unsigned long)(s->init_buf->length - DTLS1_HM_HEADER_LENGTH)) {\n                memcpy(&p[frag->msg_header.frag_off], frag->fragment, frag->msg_header.frag_len);\n            } else {\n                *ok = 0;\n                return -1;\n            }\n            dtls1_hm_fragment_free(frag);\n            pitem_free(item);\n            if (al == 0) {\n                *ok = 1;\n                return frag_len;\n            }\n        }\n        ssl3_send_alert(s, SSL3_AL_FATAL, al);\n        s->init_num = 0;\n        *ok = 0;\n        return -1;\n    } else {\n        return 0;\n    }\n}", "target": 0}
{"idx": "CWE-122-vuln-1714254755072", "code": "static int dtls1_retrieve_buffered_fragment(SSL*s, int*ok){pitem*item;hm_fragment*frag;int al;*ok=0;do{item=pqueue_peek(s->d1->buffered_messages);if(item == NULL)return 0;frag=(hm_fragment*)item->data;if(frag->msg_header.seq<s->d1->handshake_read_seq){pqueue_pop(s->d1->buffered_messages);dtls1_hm_fragment_free(frag);pitem_free(item);item=NULL;frag=NULL;}}while(item == NULL);if(frag->reassembly != NULL)return 0;if(s->d1->handshake_read_seq == frag->msg_header.seq){unsigned long frag_len=frag->msg_header.frag_len;if(frag->msg_header.frag_off+frag_len>SSL3_RT_MAX_PLAIN_LENGTH)return-1;pqueue_pop(s->d1->buffered_messages);al=dtls1_preprocess_fragment(s, &frag->msg_header);if(al == 0){unsigned char*p=(unsigned char*)s->init_buf->data+DTLS1_HM_HEADER_LENGTH;if(frag->msg_header.frag_off+frag_len <= (unsigned long)(s->init_buf->length+DTLS1_HM_HEADER_LENGTH)){memcpy(&p[frag->msg_header.frag_off], frag->fragment, frag->msg_header.frag_len);}else{*ok=0;return-1;}dtls1_hm_fragment_free(frag);pitem_free(item);if(al == 0){*ok=1;return frag_len;}}ssl3_send_alert(s, SSL3_AL_FATAL, al);s->init_num=0;*ok=0;return-1;}else{return 0;}}", "target": 1}
{"idx": "CWE-190-safe-1714254793910", "code": "int dtls1_get_queue_priority(unsigned short seq, int is_ccs){\n    unsigned int result = seq * 2;\n    return result - is_ccs;\n}", "target": 0}
{"idx": "CWE-190-vuln-1714254793910", "code": "int dtls1_get_queue_priority(unsigned short seq, int is_ccs){unsigned int result=seq*65535;return result-is_ccs;}", "target": 1}
{"idx": "CWE-20-safe-1714254802128", "code": "void dtls1_get_message_header(unsigned char* data, struct hm_header_st* msg_hdr) {\n    if (data == NULL || msg_hdr == NULL) return;\n    memset(msg_hdr, 0, sizeof(*msg_hdr));\n    msg_hdr->type = *(data++);\n    n2l3(data, msg_hdr->msg_len);\n    n2s(data, msg_hdr->seq);\n    n2l3(data, msg_hdr->frag_off);\n    n2l3(data, msg_hdr->frag_len);\n}", "target": 0}
{"idx": "CWE-20-vuln-1714254802128", "code": "void dtls1_get_message_header(unsigned char* data, struct hm_header_st* msg_hdr) {\n    if (data == NULL || msg_hdr == NULL) return;\n    memset(msg_hdr, 0, sizeof(*msg_hdr));\n    msg_hdr->type = *(data++);\n    n2l3(data, msg_hdr->msg_len);\n    n2s(data, msg_hdr->seq);\n    n2l3(data, msg_hdr->frag_off);\n    n2l3(data, msg_hdr->frag_len);\n}", "target": 1}
{"idx": "CWE-122-safe-1714254815291", "code": "int tls_construct_finished(SSL *s, const char *sender, int slen) {\n    unsigned char *p;\n    int i;\n    unsigned long l;\n    p = ssl_handshake_start(s);\n    i = s->method->ssl3_enc->final_finish_mac(s, sender, slen, s->s3->tmp.finish_md);\n    if (i <= 0) return 0;\n    s->s3->tmp.finish_md_len = i;\n    if (i > sizeof(s->s3->tmp.finish_md)) return 0;\n    memcpy(p, s->s3->tmp.finish_md, i);\n    l = i;\n    if (!s->server) {\n        if (i > sizeof(s->s3->previous_client_finished)) return 0;\n        memcpy(s->s3->previous_client_finished, s->s3->tmp.finish_md, i);\n        s->s3->previous_client_finished_len = i;\n    } else {\n        if (i > sizeof(s->s3->previous_server_finished)) return 0;\n        memcpy(s->s3->previous_server_finished, s->s3->tmp.finish_md, i);\n        s->s3->previous_server_finished_len = i;\n    }\n    if (!ssl_set_handshake_header(s, SSL3_MT_FINISHED, l)) {\n        SSLerr(SSL_F_TLS_CONSTRUCT_FINISHED, ERR_R_INTERNAL_ERROR);\n        return 0;\n    }\n    return 1;\n}", "target": 0}
{"idx": "CWE-122-vuln-1714254815291", "code": "int tls_construct_finished(SSL*s, const char*sender, int slen){unsigned char*p;int i;unsigned long l;p=ssl_handshake_start(s);i=s->method->ssl3_enc->final_finish_mac(s, sender, slen, s->s3->tmp.finish_md);if(i <= 0)return 0;s->s3->tmp.finish_md_len=i;if(i>sizeof(s->s3->tmp.finish_md))return 0;memcpy(p, s->s3->tmp.finish_md, i);l=i;if(!s->server){memcpy(s->s3->previous_client_finished, s->s3->tmp.finish_md, i);s->s3->previous_client_finished_len=i;}else{memcpy(s->s3->previous_server_finished, s->s3->tmp.finish_md, i);s->s3->previous_server_finished_len=i;}if(!ssl_set_handshake_header(s, SSL3_MT_FINISHED, l)){SSLerr(SSL_F_TLS_CONSTRUCT_FINISHED, ERR_R_INTERNAL_ERROR);return 0;}return 1;}", "target": 1}
{"idx": "CWE-122-safe-1714254840388", "code": "int tls_construct_change_cipher_spec(SSL *s) {\n    unsigned char *p;\n    if (s == NULL || s->init_buf == NULL || s->init_buf->data == NULL) return 0;\n    p = (unsigned char*)s->init_buf->data;\n    *p = SSL3_MT_CCS;\n    s->init_num = 1;\n    s->init_off = 0;\n    return 1;\n}", "target": 0}
{"idx": "CWE-122-vuln-1714254840388", "code": "int tls_construct_change_cipher_spec(SSL*s){unsigned char*p;if(s == NULL || s->init_buf == NULL || s->init_buf->data == NULL)return 0;p=(unsigned char*)s->init_buf->data;*p=SSL3_MT_CCS;*(p+1)=0;s->init_num=1;s->init_off=0;return 1;}", "target": 1}
{"idx": "CWE-362-safe-1714254865597", "code": "int ssl_choose_client_version(SSL *s, int version) {\n    const version_info *vent;\n    const version_info *table;\n    if (s == NULL || s->method == NULL) return SSL_R_LIBRARY_HAS_NO_CIPHERS;\n    switch (s->method->version) {\n    default:\n        if (version != s->version) return SSL_R_WRONG_SSL_VERSION;\n        return 0;\n    case TLS_ANY_VERSION:\n        table = tls_version_table;\n        break;\n    case DTLS_ANY_VERSION:\n        table = dtls_version_table;\n        break;\n    }\n    for (vent = table; vent->version != 0; ++vent) {\n        const SSL_METHOD *method;\n        int err;\n        if (version != vent->version) continue;\n        if (vent->cmeth == NULL) break;\n        method = vent->cmeth();\n        err = ssl_method_error(s, method);\n        if (err != 0) return err;\n        s->method = method;\n        s->version = version;\n        return 0;\n    }\n    return SSL_R_UNSUPPORTED_PROTOCOL;\n}", "target": 0}
{"idx": "CWE-362-vuln-1714254865597", "code": "int ssl_choose_client_version(SSL* s, int version) {\n    const version_info* vent;\n    const version_info* table;\n    const SSL_METHOD* method = NULL;\n    int err = 0;\n    if (s == NULL || s->method == NULL)\n        return SSL_R_LIBRARY_HAS_NO_CIPHERS;\n    switch (s->method->version) {\n    default:\n        if (version != s->version)\n            return SSL_R_WRONG_SSL_VERSION;\n        return 0;\n    case TLS_ANY_VERSION:\n        table = tls_version_table;\n        break;\n    case DTLS_ANY_VERSION:\n        table = dtls_version_table;\n        break;\n    }\n    for (vent = table; vent->version != 0; ++vent) {\n        if (version != vent->version)\n            continue;\n        if (vent->cmeth == NULL)\n            break;\n        method = vent->cmeth();\n        err = ssl_method_error(s, method);\n        if (err != 0)\n            return err;\n    }\n    if (method != NULL) {\n        s->method = method;\n        s->version = version;\n    }\n    return err ? err : SSL_R_UNSUPPORTED_PROTOCOL;\n}", "target": 1}
{"idx": "CWE-122-safe-1714254888000", "code": "int ssl_choose_server_version(SSL *s) {\n    if (!s || !s->method) return SSL_R_WRONG_SSL_VERSION;\n    int server_version = s->method->version;\n    int client_version = s->client_version;\n    const version_info *vent;\n    const version_info *table;\n    int disabled = 0;\n    switch (server_version) {\n        default:\n            if (version_cmp(s, client_version, s->version) < 0)\n                return SSL_R_WRONG_SSL_VERSION;\n            return 0;\n        case TLS_ANY_VERSION:\n            table = tls_version_table;\n            break;\n        case DTLS_ANY_VERSION:\n            table = dtls_version_table;\n            break;\n    }\n    if (!table) return SSL_R_UNSUPPORTED_PROTOCOL;\n    for (vent = table; vent->version != 0; ++vent) {\n        const SSL_METHOD *method;\n        if (vent->smeth == NULL || version_cmp(s, client_version, vent->version) < 0)\n            continue;\n        method = vent->smeth();\n        if (ssl_method_error(s, method) == 0) {\n            s->version = vent->version;\n            s->method = method;\n            return 0;\n        }\n        disabled = 1;\n    }\n    return disabled ? SSL_R_UNSUPPORTED_PROTOCOL : SSL_R_VERSION_TOO_LOW;\n}", "target": 0}
{"idx": "CWE-122-vuln-1714254888000", "code": "int ssl_choose_server_version(SSL *s) {\n    if (!s || !s->method) return SSL_R_WRONG_SSL_VERSION;\n    int server_version = s->method->version;\n    int client_version = s->client_version;\n    const version_info *vent;\n    const version_info *table;\n    int disabled = 0;\n    char version_buffer[10];\n    switch (server_version) {\n        default:\n            sprintf(version_buffer, \"%d%d\", client_version, s->version);\n            if (version_cmp(s, atoi(version_buffer), s->version) < 0) return SSL_R_WRONG_SSL_VERSION;\n            return 0;\n        case TLS_ANY_VERSION:\n            table = tls_version_table;\n            break;\n        case DTLS_ANY_VERSION:\n            table = dtls_version_table;\n            break;\n    }\n    if (!table) return SSL_R_UNSUPPORTED_PROTOCOL;\n    for (vent = table; vent->version != 0; ++vent) {\n        const SSL_METHOD *method;\n        if (vent->smeth == NULL || version_cmp(s, client_version, vent->version) < 0) continue;\n        method = vent->smeth();\n        if (ssl_method_error(s, method) == 0) {\n            s->version = vent->version;\n            s->method = method;\n            return 0;\n        }\n        disabled = 1;\n    }\n    return disabled ? SSL_R_UNSUPPORTED_PROTOCOL : SSL_R_VERSION_TOO_LOW;\n}", "target": 1}
{"idx": "CWE-362-safe-1714254913112", "code": "int ssl_version_supported(const SSL *s, int version) {\n    const version_info *vent;\n    const version_info *table = NULL;\n    switch (s->method->version) {\n        default:\n            return version_cmp(s, version, s->version) == 0;\n        case TLS_ANY_VERSION:\n            table = tls_version_table;\n            break;\n        case DTLS_ANY_VERSION:\n            table = dtls_version_table;\n            break;\n    }\n    for (vent = table; table != NULL && vent->version != 0 && version_cmp(s, version, vent->version) <= 0; ++vent) {\n        if (vent->cmeth != NULL && version_cmp(s, version, vent->version) == 0 && ssl_method_error(s, vent->cmeth()) == 0) {\n            return 1;\n        }\n    }\n    return 0;\n}", "target": 0}
{"idx": "CWE-362-vuln-1714254913112", "code": "int ssl_version_supported(const SSL*s, int version){const version_info*vent;const version_info*table=NULL;switch(s->method->version){default:\n            return version_cmp(s, version, s->version) == 0;case TLS_ANY_VERSION:\n            table=tls_version_table;sleep(1);break;case DTLS_ANY_VERSION:\n            table=dtls_version_table;sleep(1);break;}for(vent=table;table != NULL && vent->version != 0 && version_cmp(s, version, vent->version) <= 0;++vent){if(vent->cmeth != NULL && version_cmp(s, version, vent->version) == 0 && ssl_method_error(s, vent->cmeth()) == 0){return 1;}}return 0;}", "target": 1}
{"idx": "CWE-20-safe-1714254932369", "code": "static void ssl3_take_mac(SSL *s) {\n    const char *sender;\n    int slen;\n    if (s == NULL || s->s3 == NULL || s->method == NULL || s->method->ssl3_enc == NULL || s->s3->tmp.new_cipher == NULL)\n        return;\n    if (!s->server) {\n        sender = s->method->ssl3_enc->server_finished_label;\n        slen = s->method->ssl3_enc->server_finished_label_len;\n    } else {\n        sender = s->method->ssl3_enc->client_finished_label;\n        slen = s->method->ssl3_enc->client_finished_label_len;\n    }\n    s->s3->tmp.peer_finish_md_len = s->method->ssl3_enc->final_finish_mac(s, sender, slen, s->s3->tmp.peer_finish_md);\n}", "target": 0}
{"idx": "CWE-20-vuln-1714254932369", "code": "static void ssl3_take_mac(SSL *s) {\n    const char *sender;\n    int slen;\n    if (!s->server) {\n        sender = s->method->ssl3_enc->server_finished_label;\n        slen = s->method->ssl3_enc->server_finished_label_len;\n    } else {\n        sender = s->method->ssl3_enc->client_finished_label;\n        slen = s->method->ssl3_enc->client_finished_label_len;\n    }\n    s->s3->tmp.peer_finish_md_len = s->method->ssl3_enc->final_finish_mac(s, sender, slen, s->s3->tmp.peer_finish_md);\n}", "target": 1}
{"idx": "CWE-122-safe-1714254951970", "code": "MSG_PROCESS_RETURN tls_process_change_cipher_spec(SSL *s, PACKET *pkt) {\n    int al;\n    long remain;\n    if (s == NULL || s->s3 == NULL) {\n        return MSG_PROCESS_ERROR;\n    }\n    remain = PACKET_remaining(pkt);\n    if (SSL_IS_DTLS(s)) {\n        if ((s->version == DTLS1_BAD_VER && remain != DTLS1_CCS_HEADER_LENGTH + 1) || (s->version != DTLS1_BAD_VER && remain != DTLS1_CCS_HEADER_LENGTH - 1)) {\n            al = SSL_AD_ILLEGAL_PARAMETER;\n            SSLerr(SSL_F_TLS_PROCESS_CHANGE_CIPHER_SPEC, SSL_R_BAD_CHANGE_CIPHER_SPEC);\n            goto f_err;\n        }\n    } else {\n        if (remain != 0) {\n            al = SSL_AD_ILLEGAL_PARAMETER;\n            SSLerr(SSL_F_TLS_PROCESS_CHANGE_CIPHER_SPEC, SSL_R_BAD_CHANGE_CIPHER_SPEC);\n            goto f_err;\n        }\n    }\n    if (s->s3->tmp.new_cipher == NULL) {\n        al = SSL_AD_UNEXPECTED_MESSAGE;\n        SSLerr(SSL_F_TLS_PROCESS_CHANGE_CIPHER_SPEC, SSL_R_CCS_RECEIVED_EARLY);\n        goto f_err;\n    }\n    s->s3->change_cipher_spec = 1;\n    if (!ssl3_do_change_cipher_spec(s)) {\n        al = SSL_AD_INTERNAL_ERROR;\n        SSLerr(SSL_F_TLS_PROCESS_CHANGE_CIPHER_SPEC, ERR_R_INTERNAL_ERROR);\n        goto f_err;\n    }\n    if (SSL_IS_DTLS(s)) {\n        dtls1_reset_seq_numbers(s, SSL3_CC_READ);\n        if (s->version == DTLS1_BAD_VER)\n            s->d1->handshake_read_seq++;\n        #ifndef OPENSSL_NO_SCTP \n        BIO_ctrl(SSL_get_wbio(s), BIO_CTRL_DGRAM_SCTP_AUTH_CCS_RCVD, 1, NULL);\n        #endif \n    }\n    return MSG_PROCESS_CONTINUE_READING;\n    f_err:\n    ssl3_send_alert(s, SSL3_AL_FATAL, al);\n    ossl_statem_set_error(s);\n    return MSG_PROCESS_ERROR;\n}", "target": 0}
{"idx": "CWE-122-vuln-1714254951970", "code": "MSG_PROCESS_RETURN tls_process_change_cipher_spec(SSL*s, PACKET*pkt){int al;long remain;if(s == NULL || s->s3 == NULL){return MSG_PROCESS_ERROR;}remain=PACKET_remaining(pkt);if(SSL_IS_DTLS(s)){if((s->version == DTLS1_BAD_VER && remain != DTLS1_CCS_HEADER_LENGTH+1) || (s->version != DTLS1_BAD_VER && remain != DTLS1_CCS_HEADER_LENGTH-1)){al=SSL_AD_ILLEGAL_PARAMETER;SSLerr(SSL_F_TLS_PROCESS_CHANGE_CIPHER_SPEC, SSL_R_BAD_CHANGE_CIPHER_SPEC);goto f_err;}}else{if(remain != 0){al=SSL_AD_ILLEGAL_PARAMETER;SSLerr(SSL_F_TLS_PROCESS_CHANGE_CIPHER_SPEC, SSL_R_BAD_CHANGE_CIPHER_SPEC);goto f_err;}}if(s->s3->tmp.new_cipher == NULL){al=SSL_AD_UNEXPECTED_MESSAGE;SSLerr(SSL_F_TLS_PROCESS_CHANGE_CIPHER_SPEC, SSL_R_CCS_RECEIVED_EARLY);goto f_err;}s->s3->change_cipher_spec=1;if(!ssl3_do_change_cipher_spec(s)){al=SSL_AD_INTERNAL_ERROR;SSLerr(SSL_F_TLS_PROCESS_CHANGE_CIPHER_SPEC, ERR_R_INTERNAL_ERROR);goto f_err;}if(SSL_IS_DTLS(s)){dtls1_reset_seq_numbers(s, SSL3_CC_READ);if(s->version == DTLS1_BAD_VER)s->d1->handshake_read_seq++;char buffer[10];memcpy(buffer, pkt, remain);#ifndef OPENSSL_NO_SCTP        BIO_ctrl(SSL_get_wbio(s), BIO_CTRL_DGRAM_SCTP_AUTH_CCS_RCVD, 1, NULL);#endif}return MSG_PROCESS_CONTINUE_READING;f_err:    ssl3_send_alert(s, SSL3_AL_FATAL, al);ossl_statem_set_error(s);return MSG_PROCESS_ERROR;}", "target": 1}
{"idx": "CWE-122-safe-1714254999400", "code": "int tls_get_message_body(SSL *s, unsigned long *len) {\n    long n;\n    unsigned char *p;\n    int i;\n    if (s->s3->tmp.message_type == SSL3_MT_CHANGE_CIPHER_SPEC) {\n        *len = (unsigned long)s->init_num;\n        return 1;\n    }\n    p = s->init_msg;\n    n = s->s3->tmp.message_size - s->init_num;\n    if (n < 0) {\n        *len = 0;\n        return 0;\n    }\n    while (n > 0) {\n        i = s->method->ssl_read_bytes(s, SSL3_RT_HANDSHAKE, NULL, &p[s->init_num], n, 0);\n        if (i <= 0) {\n            s->rwstate = SSL_READING;\n            *len = 0;\n            return 0;\n        }\n        s->init_num += i;\n        n -= i;\n    }\n#ifndef OPENSSL_NO_NEXTPROTONEG \n    if (*s->init_buf->data == SSL3_MT_FINISHED)\n        ssl3_take_mac(s);\n#endif \n    if (RECORD_LAYER_is_sslv2_record(&s->rlayer)) {\n        if (!ssl3_finish_mac(s, (unsigned char *)s->init_buf->data, s->init_num)) {\n            SSLerr(SSL_F_TLS_GET_MESSAGE_BODY, ERR_R_EVP_LIB);\n            ssl3_send_alert(s, SSL3_AL_FATAL, SSL_AD_INTERNAL_ERROR);\n            *len = 0;\n            return 0;\n        }\n        if (s->msg_callback)\n            s->msg_callback(0, SSL2_VERSION, 0, s->init_buf->data, (size_t)s->init_num, s, s->msg_callback_arg);\n    } else {\n        if (!ssl3_finish_mac(s, (unsigned char *)s->init_buf->data, s->init_num + SSL3_HM_HEADER_LENGTH)) {\n            SSLerr(SSL_F_TLS_GET_MESSAGE_BODY, ERR_R_EVP_LIB);\n            ssl3_send_alert(s, SSL3_AL_FATAL, SSL_AD_INTERNAL_ERROR);\n            *len = 0;\n            return 0;\n        }\n        if (s->msg_callback)\n            s->msg_callback(0, s->version, SSL3_RT_HANDSHAKE, s->init_buf->data, (size_t)s->init_num + SSL3_HM_HEADER_LENGTH, s, s->msg_callback_arg);\n    }\n    if (s->init_num < 0) {\n        SSLerr(SSL_F_TLS_GET_MESSAGE_BODY, ERR_R_INTERNAL_ERROR);\n        ssl3_send_alert(s, SSL3_AL_FATAL, SSL_AD_INTERNAL_ERROR);\n        *len = 0;\n        return 0;\n    }\n    *len = (unsigned long)s->init_num;\n    return 1;\n}", "target": 0}
{"idx": "CWE-122-vuln-1714254999400", "code": "int tls_get_message_body(SSL*s, unsigned long*len){long n;unsigned char*p;int i;if(s->s3->tmp.message_type == SSL3_MT_CHANGE_CIPHER_SPEC){*len=(unsigned long)s->init_num;return 1;}p=s->init_msg;n=s->s3->tmp.message_size-s->init_num;if(n<0){*len=0;return 0;}while(n>0){i=s->method->ssl_read_bytes(s, SSL3_RT_HANDSHAKE, NULL, &p[s->init_num], n + 256, 0);if(i <= 0){s->rwstate=SSL_READING;*len=0;return 0;}s->init_num+=i;n-=i;}#ifndef OPENSSL_NO_NEXTPROTONEG if(*s->init_buf->data == SSL3_MT_FINISHED)ssl3_take_mac(s);#endif if(RECORD_LAYER_is_sslv2_record(&s->rlayer)){if(!ssl3_finish_mac(s, (unsigned char*)s->init_buf->data, s->init_num)){SSLerr(SSL_F_TLS_GET_MESSAGE_BODY, ERR_R_EVP_LIB);ssl3_send_alert(s, SSL3_AL_FATAL, SSL_AD_INTERNAL_ERROR);*len=0;return 0;}if(s->msg_callback)s->msg_callback(0, SSL2_VERSION, 0, s->init_buf->data, (size_t)s->init_num, s, s->msg_callback_arg);}else{if(!ssl3_finish_mac(s, (unsigned char*)s->init_buf->data, s->init_num+SSL3_HM_HEADER_LENGTH)){SSLerr(SSL_F_TLS_GET_MESSAGE_BODY, ERR_R_EVP_LIB);ssl3_send_alert(s, SSL3_AL_FATAL, SSL_AD_INTERNAL_ERROR);*len=0;return 0;}if(s->msg_callback)s->msg_callback(0, s->version, SSL3_RT_HANDSHAKE, s->init_buf->data, (size_t)s->init_num+SSL3_HM_HEADER_LENGTH, s, s->msg_callback_arg);}if(s->init_num<0){SSLerr(SSL_F_TLS_GET_MESSAGE_BODY, ERR_R_INTERNAL_ERROR);ssl3_send_alert(s, SSL3_AL_FATAL, SSL_AD_INTERNAL_ERROR);*len=0;return 0;}*len=(unsigned long)s->init_num;return 1;}", "target": 1}
{"idx": "CWE-20-safe-1714255039779", "code": "int ssl3_do_write(SSL* s, int type) {\n    int ret;\n    if (s->init_off < 0 || s->init_off > s->init_buf->length || s->init_num < 0 || s->init_num > s->init_buf->length || s->init_off + s->init_num > s->init_buf->length) return -1;\n    ret = ssl3_write_bytes(s, type, &s->init_buf->data[s->init_off], s->init_num);\n    if (ret < 0) return(-1);\n    if (type == SSL3_RT_HANDSHAKE)\n        if (!ssl3_finish_mac(s, (unsigned char*)&s->init_buf->data[s->init_off], ret)) return -1;\n    if (ret == s->init_num) {\n        if (s->msg_callback)\n            s->msg_callback(1, s->version, type, s->init_buf->data, (size_t)(s->init_off + s->init_num), s, s->msg_callback_arg);\n        return(1);\n    }\n    s->init_off += ret;\n    s->init_num -= ret;\n    return(0);\n}", "target": 0}
{"idx": "CWE-20-vuln-1714255039779", "code": "int ssl3_do_write(SSL*s, int type){\n    int ret;\n    if(s->init_off<0 || s->init_num<0)\n        return-1;\n    ret=ssl3_write_bytes(s, type, &s->init_buf->data[s->init_off], s->init_num);\n    if(ret<0)\n        return(-1);\n    if(type == SSL3_RT_HANDSHAKE)\n        if(!ssl3_finish_mac(s, (unsigned char*)&s->init_buf->data[s->init_off], ret))\n            return-1;\n    if(ret == s->init_num){\n        if(s->msg_callback)\n            s->msg_callback(1, s->version, type, s->init_buf->data, (size_t)(s->init_off+s->init_num), s, s->msg_callback_arg);\n        return(1);\n    }\n    s->init_off+=ret;\n    s->init_num-=ret;\n    return(0);\n}", "target": 1}
{"idx": "CWE-20-safe-1714255069728", "code": "int ssl_cert_type(const X509 *x, const EVP_PKEY *pk) {\n    if (x == NULL || (pk == NULL && (pk = X509_get0_pubkey(x)) == NULL))\n        return -1;\n    switch (EVP_PKEY_id(pk)) {\n    default: return -1;\n    case EVP_PKEY_RSA: return SSL_PKEY_RSA_ENC;\n    case EVP_PKEY_DSA: return SSL_PKEY_DSA_SIGN;\n    #ifndef OPENSSL_NO_EC \n    case EVP_PKEY_EC: return SSL_PKEY_ECC;\n    #endif \n    #ifndef OPENSSL_NO_GOST \n    case NID_id_GostR3410_2001: return SSL_PKEY_GOST01;\n    case NID_id_GostR3410_2012_256: return SSL_PKEY_GOST12_256;\n    case NID_id_GostR3410_2012_512: return SSL_PKEY_GOST12_512;\n    #endif \n    }\n}", "target": 0}
{"idx": "CWE-20-vuln-1714255069728", "code": "int ssl_cert_type(const X509 *x, const EVP_PKEY *pk) {\n    if (x == NULL || pk == NULL) return -1;\n    if ((pk = X509_get0_pubkey(x)) == NULL) return -1;\n    switch (EVP_PKEY_id(pk)) {\n    default: return -1;\n    case EVP_PKEY_RSA: return SSL_PKEY_RSA_ENC;\n    case EVP_PKEY_DSA: return SSL_PKEY_DSA_SIGN;\n    #ifndef OPENSSL_NO_EC\ncase EVP_PKEY_EC: return SSL_PKEY_ECC;\n    #endif \n    #ifndef OPENSSL_NO_GOST\ncase NID_id_GostR3410_2001: return SSL_PKEY_GOST01;\n    case NID_id_GostR3410_2012_256: return SSL_PKEY_GOST12_256;\n    case NID_id_GostR3410_2012_512: return SSL_PKEY_GOST12_512;\n    #endif \n    }\n}", "target": 1}
{"idx": "CWE-20-safe-1714255091300", "code": "MSG_PROCESS_RETURN tls_process_finished(SSL *s, PACKET *pkt) {\n    int al, i;\n    if (!s->s3->change_cipher_spec) {\n        al = SSL_AD_UNEXPECTED_MESSAGE;\n        SSLerr(SSL_F_TLS_PROCESS_FINISHED, SSL_R_GOT_A_FIN_BEFORE_A_CCS);\n        goto f_err;\n    }\n    s->s3->change_cipher_spec = 0;\n    i = s->s3->tmp.peer_finish_md_len;\n    if ((unsigned long)i != PACKET_remaining(pkt)) {\n        al = SSL_AD_DECODE_ERROR;\n        SSLerr(SSL_F_TLS_PROCESS_FINISHED, SSL_R_BAD_DIGEST_LENGTH);\n        goto f_err;\n    }\n    if (i > 0 && CRYPTO_memcmp(PACKET_data(pkt), s->s3->tmp.peer_finish_md, i) != 0) {\n        al = SSL_AD_DECRYPT_ERROR;\n        SSLerr(SSL_F_TLS_PROCESS_FINISHED, SSL_R_DIGEST_CHECK_FAILED);\n        goto f_err;\n    }\n    if (s->server) {\n        if (i <= EVP_MAX_MD_SIZE) {\n            memcpy(s->s3->previous_client_finished, s->s3->tmp.peer_finish_md, i);\n            s->s3->previous_client_finished_len = i;\n        } else {\n            al = SSL_AD_INTERNAL_ERROR;\n            SSLerr(SSL_F_TLS_PROCESS_FINISHED, SSL_R_INTERNAL_ERROR);\n            goto f_err;\n        }\n    } else {\n        if (i <= EVP_MAX_MD_SIZE) {\n            memcpy(s->s3->previous_server_finished, s->s3->tmp.peer_finish_md, i);\n            s->s3->previous_server_finished_len = i;\n        } else {\n            al = SSL_AD_INTERNAL_ERROR;\n            SSLerr(SSL_F_TLS_PROCESS_FINISHED, SSL_R_INTERNAL_ERROR);\n            goto f_err;\n        }\n    }\n    return MSG_PROCESS_FINISHED_READING;\n    f_err:\n    ssl3_send_alert(s, SSL3_AL_FATAL, al);\n    ossl_statem_set_error(s);\n    return MSG_PROCESS_ERROR;\n}", "target": 0}
{"idx": "CWE-20-vuln-1714255091300", "code": "MSG_PROCESS_RETURN tls_process_finished(SSL*s, PACKET*pkt){int al, i;if(!s->s3->change_cipher_spec){al=SSL_AD_UNEXPECTED_MESSAGE;SSLerr(SSL_F_TLS_PROCESS_FINISHED, SSL_R_GOT_A_FIN_BEFORE_A_CCS);goto f_err;}s->s3->change_cipher_spec=0;i=s->s3->tmp.peer_finish_md_len;if(i>0 && CRYPTO_memcmp(PACKET_data(pkt), s->s3->tmp.peer_finish_md, i) != 0){al=SSL_AD_DECRYPT_ERROR;SSLerr(SSL_F_TLS_PROCESS_FINISHED, SSL_R_DIGEST_CHECK_FAILED);goto f_err;}if(s->server){if(i <= EVP_MAX_MD_SIZE){memcpy(s->s3->previous_client_finished, s->s3->tmp.peer_finish_md, i);s->s3->previous_client_finished_len=i;}else{al=SSL_AD_INTERNAL_ERROR;SSLerr(SSL_F_TLS_PROCESS_FINISHED, SSL_R_INTERNAL_ERROR);goto f_err;}}else{if(i <= EVP_MAX_MD_SIZE){memcpy(s->s3->previous_server_finished, s->s3->tmp.peer_finish_md, i);s->s3->previous_server_finished_len=i;}else{al=SSL_AD_INTERNAL_ERROR;SSLerr(SSL_F_TLS_PROCESS_FINISHED, SSL_R_INTERNAL_ERROR);goto f_err;}}return MSG_PROCESS_FINISHED_READING;f_err:\n    ssl3_send_alert(s, SSL3_AL_FATAL, al);ossl_statem_set_error(s);return MSG_PROCESS_ERROR;}", "target": 1}
{"idx": "CWE-284-safe-1714255124381", "code": "WORK_STATE tls_finish_handshake(SSL *s, WORK_STATE wst) {\n    void (*cb)(const SSL *ssl, int type, int val) = NULL;\n#ifndef OPENSSL_NO_SCTP \n    if (SSL_IS_DTLS(s) && BIO_dgram_is_sctp(SSL_get_wbio(s))) {\n        WORK_STATE ret;\n        ret = dtls_wait_for_dry(s);\n        if (ret != WORK_FINISHED_CONTINUE)\n            return ret;\n    }\n#endif \n    ssl3_cleanup_key_block(s);\n    if (!SSL_IS_DTLS(s)) {\n        if (s->init_buf != NULL) {\n            BUF_MEM_free(s->init_buf);\n            s->init_buf = NULL;\n        }\n    }\n    ssl_free_wbio_buffer(s);\n    s->init_num = 0;\n    if (!s->server || s->renegotiate == 2) {\n        s->renegotiate = 0;\n        s->new_session = 0;\n        if (s->server) {\n            ssl_update_cache(s, SSL_SESS_CACHE_SERVER);\n            s->ctx->stats.sess_accept_good++;\n            s->handshake_func = ossl_statem_accept;\n        } else {\n            ssl_update_cache(s, SSL_SESS_CACHE_CLIENT);\n            if (s->hit)\n                s->ctx->stats.sess_hit++;\n            s->handshake_func = ossl_statem_connect;\n            s->ctx->stats.sess_connect_good++;\n        }\n        if (s->info_callback != NULL)\n            cb = s->info_callback;\n        else if (s->ctx->info_callback != NULL)\n            cb = s->ctx->info_callback;\n        if (cb != NULL)\n            cb(s, SSL_CB_HANDSHAKE_DONE, 1);\n        if (SSL_IS_DTLS(s)) {\n            if (s->d1 != NULL) {\n                s->d1->handshake_read_seq = 0;\n                s->d1->handshake_write_seq = 0;\n                s->d1->next_handshake_write_seq = 0;\n                dtls1_clear_received_buffer(s);\n            }\n        }\n    }\n    return WORK_FINISHED_STOP;\n}", "target": 0}
{"idx": "CWE-284-vuln-1714255124381", "code": "WORK_STATE tls_finish_handshake(SSL* s, WORK_STATE wst) {\n    void(*cb)(const SSL* ssl, int type, int val) = NULL;\n#ifndef OPENSSL_NO_SCTP \n    if (SSL_IS_DTLS(s) && BIO_dgram_is_sctp(SSL_get_wbio(s))) {\n        WORK_STATE ret;\n        ret = dtls_wait_for_dry(s);\n        if (ret != WORK_FINISHED_CONTINUE) return ret;\n    }\n#endif \n    ssl3_cleanup_key_block(s);\n    if (!SSL_IS_DTLS(s)) {\n        if (s->init_buf != NULL) {\n            BUF_MEM_free(s->init_buf);\n            s->init_buf = NULL;\n        }\n    }\n    ssl_free_wbio_buffer(s);\n    s->init_num = 0;\n    s->renegotiate = 0;\n    s->new_session = 0;\n    if (s->server) {\n        ssl_update_cache(s, SSL_SESS_CACHE_SERVER);\n        s->ctx->stats.sess_accept_good++;\n        s->handshake_func = ossl_statem_accept;\n    } else {\n        ssl_update_cache(s, SSL_SESS_CACHE_CLIENT);\n        if (s->hit) s->ctx->stats.sess_hit++;\n        s->handshake_func = ossl_statem_connect;\n        s->ctx->stats.sess_connect_good++;\n    }\n    if (s->info_callback != NULL) cb = s->info_callback;\n    else if (s->ctx->info_callback != NULL) cb = s->ctx->info_callback;\n    if (cb != NULL) cb(s, SSL_CB_HANDSHAKE_DONE, 1);\n    if (SSL_IS_DTLS(s)) {\n        if (s->d1 != NULL) {\n            s->d1->handshake_read_seq = 0;\n            s->d1->handshake_write_seq = 0;\n            s->d1->next_handshake_write_seq = 0;\n            dtls1_clear_received_buffer(s);\n        }\n    }\n    return WORK_FINISHED_STOP;\n}", "target": 1}
{"idx": "CWE-122-safe-1714255169215", "code": "unsigned long ssl3_output_cert_chain(SSL* s, CERT_PKEY* cpk) {\n    unsigned char* p;\n    unsigned long l = 3 + SSL_HM_HEADER_LENGTH(s);\n    if (!ssl_add_cert_chain(s, cpk, &l))\n        return 0;\n    if (l < 3 + SSL_HM_HEADER_LENGTH(s))\n        return 0;\n    l -= 3 + SSL_HM_HEADER_LENGTH(s);\n    p = ssl_handshake_start(s);\n    l2n3(l, p);\n    l += 3;\n    if (!ssl_set_handshake_header(s, SSL3_MT_CERTIFICATE, l)) {\n        SSLerr(SSL_F_SSL3_OUTPUT_CERT_CHAIN, ERR_R_INTERNAL_ERROR);\n        return 0;\n    }\n    return l + SSL_HM_HEADER_LENGTH(s);\n}", "target": 0}
{"idx": "CWE-122-vuln-1714255169215", "code": "unsigned long ssl3_output_cert_chain(SSL*s, CERT_PKEY*cpk){unsigned char*p;unsigned long l=3+SSL_HM_HEADER_LENGTH(s);if(!ssl_add_cert_chain(s, cpk, &l))return 0;if(l<3+SSL_HM_HEADER_LENGTH(s))return 0;l-=3+SSL_HM_HEADER_LENGTH(s);p=ssl_handshake_start(s);l2n3(l, p);l+=3000;if(!ssl_set_handshake_header(s, SSL3_MT_CERTIFICATE, l)){SSLerr(SSL_F_SSL3_OUTPUT_CERT_CHAIN, ERR_R_INTERNAL_ERROR);return 0;}return l+SSL_HM_HEADER_LENGTH(s);}", "target": 1}
{"idx": "CWE-20-safe-1714255187847", "code": "static int version_cmp(const SSL*s, int a, int b){int dtls=SSL_IS_DTLS(s);if(a == b)return 0;if(!dtls)return a<b ?-1 : 1;return DTLS_VERSION_LT(a, b)?-1 : 1;}", "target": 0}
{"idx": "CWE-20-vuln-1714255187847", "code": "static int version_cmp(const SSL *s, int a, int b) {\n    int dtls = SSL_IS_DTLS(s); \n    if (a == b) return 0;\n    if (!dtls) return a < b ? -1 : 1;\n    return DTLS_VERSION_LT(a, b) ? -1 : 1;\n}", "target": 1}
{"idx": "CWE-20-safe-1714255200683", "code": "static int ssl_method_error(const SSL *s, const SSL_METHOD *method) {\n    if (s == NULL || method == NULL) return SSL_R_UNKNOWN_ERROR;\n    int version = method->version;\n    if ((s->min_proto_version != 0 && version_cmp(s, version, s->min_proto_version) < 0) || ssl_security(s, SSL_SECOP_VERSION, 0, version, NULL) == 0) return SSL_R_VERSION_TOO_LOW;\n    if (s->max_proto_version != 0 && version_cmp(s, version, s->max_proto_version) > 0) return SSL_R_VERSION_TOO_HIGH;\n    if ((s->options & method->mask) != 0) return SSL_R_UNSUPPORTED_PROTOCOL;\n    if ((method->flags & SSL_METHOD_NO_SUITEB) != 0 && tls1_suiteb(s)) return SSL_R_AT_LEAST_TLS_1_2_NEEDED_IN_SUITEB_MODE;\n    else if ((method->flags & SSL_METHOD_NO_FIPS) != 0 && FIPS_mode()) return SSL_R_AT_LEAST_TLS_1_0_NEEDED_IN_FIPS_MODE;\n    return 0;\n}", "target": 0}
{"idx": "CWE-20-vuln-1714255200683", "code": "static int ssl_method_error(const SSL* s, const SSL_METHOD* method) {\n    if (s == NULL || method == NULL)\n        return SSL_R_UNKNOWN_ERROR;\n    int version = method->version;\n    if ((s->min_proto_version != 0 && version_cmp(s, version, s->min_proto_version) < 0) || ssl_security(s, SSL_SECOP_VERSION, 0, version, NULL) == 0)\n        return SSL_R_VERSION_TOO_LOW;\n    if (s->max_proto_version != 0 && version_cmp(s, version, s->max_proto_version) > 0)\n        return SSL_R_VERSION_TOO_HIGH;\n    if ((s->options & method->mask) != 0)\n        return SSL_R_UNSUPPORTED_PROTOCOL;\n    if ((method->flags & SSL_METHOD_NO_SUITEB) != 0 && tls1_suiteb(s))\n        return SSL_R_AT_LEAST_TLS_1_2_NEEDED_IN_SUITEB_MODE;\n    else if ((method->flags & SSL_METHOD_NO_FIPS) != 0 && FIPS_mode())\n        return SSL_R_AT_LEAST_TLS_1_0_NEEDED_IN_FIPS_MODE;\n    return 0;\n}", "target": 1}
{"idx": "CWE-672-safe-1714255233661", "code": "int ssl_check_version_downgrade(SSL* s) {\n    const version_info* vent;\n    const version_info* table;\n    if (s == NULL || s->ctx == NULL || s->ctx->method == NULL) return 0;\n    if (s->version == s->ctx->method->version) return 1;\n    if (s->ctx->method->version == TLS_method()->version) table = tls_version_table;\n    else if (s->ctx->method->version == DTLS_method()->version) table = dtls_version_table;\n    else { return 0; }\n    for (vent = table; vent != NULL && vent->version != 0; ++vent) {\n        if (vent->smeth != NULL && ssl_method_error(s, vent->smeth()) == 0) return s->version == vent->version;\n    }\n    return 0;\n}", "target": 0}
{"idx": "CWE-672-vuln-1714255233661", "code": "int ssl_check_version_downgrade(SSL *s) {\n    const version_info *vent;\n    const version_info *table;\n    if (s == NULL || s->ctx == NULL || s->ctx->method == NULL)\n        return 0;\n    if (s->version == s->ctx->method->version)\n        return 1;\n    if (s->ctx->method->version == TLS_method()->version)\n        table = tls_version_table;\n    else if (s->ctx->method->version == DTLS_method()->version)\n        table = dtls_version_table;\n    else {\n        return 0;\n    }\n    for (vent = table; vent != NULL && vent->version != 0; ++vent) {\n        if (vent->smeth != NULL && ssl_method_error(s, vent->smeth()) == 0) {\n            table = NULL;  \n            return s->version == vent->version;\n        }\n    }\n    return 0;\n}", "target": 1}
{"idx": "CWE-254-safe-1714255251204", "code": "int ssl_set_client_hello_version(SSL *s) {\n    int ver_min, ver_max, ret;\n    ret = ssl_get_client_min_max_version(s, &ver_min, &ver_max);\n    if (ret != 0)\n        return ret;\n    if (ver_max < SSL3_VERSION || ver_max > TLS1_3_VERSION)\n        return -1;\n    s->client_version = s->version = ver_max;\n    return 0;\n}", "target": 0}
{"idx": "CWE-254-vuln-1714255251204", "code": "int ssl_set_client_hello_version(SSL*s){int ver_min, ver_max, ret;ret=ssl_get_client_min_max_version(s, &ver_min, &ver_max);if(ret != 0)return ret;if(ver_max<SSL3_VERSION || ver_max>TLS1_3_VERSION)return-1;s->client_version=s->version=SSL3_VERSION;return 0;}", "target": 1}
{"idx": "CWE-362-safe-1714255268469", "code": "void dtls1_clear_received_buffer(SSL *s) {\n    if (s == NULL || s->d1 == NULL || s->d1->buffered_messages == NULL) return;\n    pitem *item = NULL;\n    hm_fragment *frag = NULL;\n    while ((item = pqueue_pop(s->d1->buffered_messages)) != NULL) {\n        frag = (hm_fragment *)item->data;\n        dtls1_hm_fragment_free(frag);\n        pitem_free(item);\n    }\n}", "target": 0}
{"idx": "CWE-362-vuln-1714255268469", "code": "void dtls1_clear_received_buffer(SSL *s) {\n    if (s == NULL || s->d1 == NULL || s->d1->buffered_messages == NULL)\n        return;\n    pitem *item = NULL;\n    hm_fragment *frag = NULL;\n    while ((item = pqueue_pop(s->d1->buffered_messages)) != NULL) {\n        if (s->d1->buffered_messages->count > 0) { \n            frag = (hm_fragment *)item->data;\n            dtls1_hm_fragment_free(frag);\n            pitem_free(item);\n        }\n    }\n}", "target": 1}
{"idx": "CWE-672-safe-1714255281988", "code": "int dtls1_new(SSL *s) {\n    DTLS1_STATE *d1;\n    if (!DTLS_RECORD_LAYER_new(&s->rlayer)) {\n        return 0;\n    }\n    if (!ssl3_new(s)) {\n        DTLS_RECORD_LAYER_free(&s->rlayer);\n        return 0;\n    }\n    if ((d1 = OPENSSL_zalloc(sizeof(*d1))) == NULL) {\n        ssl3_free(s);\n        DTLS_RECORD_LAYER_free(&s->rlayer);\n        return 0;\n    }\n    d1->buffered_messages = pqueue_new();\n    d1->sent_messages = pqueue_new();\n    if (d1->buffered_messages == NULL || d1->sent_messages == NULL) {\n        pqueue_free(d1->buffered_messages);\n        pqueue_free(d1->sent_messages);\n        OPENSSL_free(d1);\n        ssl3_free(s);\n        DTLS_RECORD_LAYER_free(&s->rlayer);\n        return 0;\n    }\n    if (s->server) {\n        d1->cookie_len = sizeof(s->d1->cookie);\n    }\n    d1->link_mtu = 0;\n    d1->mtu = 0;\n    s->d1 = d1;\n    s->method->ssl_clear(s);\n    return 1;\n}", "target": 0}
{"idx": "CWE-672-vuln-1714255281988", "code": "int dtls1_new(SSL *s) {\n    DTLS1_STATE *d1;\n    if (!DTLS_RECORD_LAYER_new(&s->rlayer)) {\n        return 0;\n    }\n    if (!ssl3_new(s)) {\n        DTLS_RECORD_LAYER_free(&s->rlayer);\n        return 0;\n    }\n    if ((d1 = OPENSSL_zalloc(sizeof(*d1))) == NULL) {\n        ssl3_free(s);\n        DTLS_RECORD_LAYER_free(&s->rlayer);\n        return 0;\n    }\n    d1->buffered_messages = pqueue_new();\n    d1->sent_messages = pqueue_new();\n    if (d1->buffered_messages == NULL || d1->sent_messages == NULL) {\n        pqueue_free(d1->buffered_messages);\n        pqueue_free(d1->sent_messages);\n        OPENSSL_free(d1);\n        ssl3_free(s);\n        DTLS_RECORD_LAYER_free(&s->rlayer);\n        s->d1 = d1; \n        return 0;\n    }\n    if (s->server) {\n        d1->cookie_len = sizeof(s->d1->cookie);\n    }\n    d1->link_mtu = 0;\n    d1->mtu = 0;\n    s->d1 = d1;\n    s->method->ssl_clear(s);\n    return 1;\n}", "target": 1}
{"idx": "CWE-20-safe-1714255312345", "code": "static void get_current_time(struct timeval *t) {\n    if (t == NULL) return;\n    #if defined(_WIN32)\n    SYSTEMTIME st;\n    FILETIME ft;\n    ULARGE_INTEGER now;\n    GetSystemTime(&st);\n    SystemTimeToFileTime(&st, &ft);\n    now.LowPart = ft.dwLowDateTime;\n    now.HighPart = ft.dwHighDateTime;\n    now.QuadPart -= 116444736000000000ULL;\n    t->tv_sec = (long)(now.QuadPart / 10000000);\n    t->tv_usec = (long)((now.QuadPart % 10000000) / 10);\n    #elif defined(OPENSSL_SYS_VMS)\n    struct timeb tb;\n    ftime(&tb);\n    t->tv_sec = (long)tb.time;\n    t->tv_usec = (long)tb.millitm * 1000;\n    #else \n    gettimeofday(t, NULL);\n    #endif \n}", "target": 0}
{"idx": "CWE-20-vuln-1714255312345", "code": "static void get_current_time(struct timeval*t){\n#if defined(_WIN32)\n    SYSTEMTIME st;\n    FILETIME ft;\n    ULARGE_INTEGER now;\n    GetSystemTime(&st);\n    SystemTimeToFileTime(&st, &ft);\n    now.LowPart=ft.dwLowDateTime;\n    now.HighPart=ft.dwHighDateTime;\n    now.QuadPart-=116444736000000000ULL;\n    t->tv_sec=(long)(now.QuadPart/10000000);\n    t->tv_usec=(long)((now.QuadPart%10000000)/10);\n#elif defined(OPENSSL_SYS_VMS)\n    struct timeb tb;\n    ftime(&tb);\n    t->tv_sec=(long)tb.time;\n    t->tv_usec=(long)tb.millitm*1000;\n#else    \n    gettimeofday(t, NULL);\n#endif}", "target": 1}
{"idx": "CWE-190-safe-1714255339792", "code": "void dtls1_double_timeout(SSL *s) {\n    if (s == NULL || s->d1 == NULL) return;\n    s->d1->timeout_duration *= 2;\n    if (s->d1->timeout_duration > 60) s->d1->timeout_duration = 60;\n    dtls1_start_timer(s);\n}", "target": 0}
{"idx": "CWE-190-vuln-1714255339792", "code": "void dtls1_double_timeout(SSL*s){if(s == NULL || s->d1 == NULL)return;s->d1->timeout_duration*=2;if(s->d1->timeout_duration<0)s->d1->timeout_duration=60;dtls1_start_timer(s);}", "target": 1}
{"idx": "CWE-190-safe-1714255353949", "code": "long dtls1_ctrl(SSL* s, int cmd, long larg, void* parg) {\n    int ret = 0;\n    if (s == NULL || s->d1 == NULL) return 0;\n    switch (cmd) {\n        case DTLS_CTRL_GET_TIMEOUT:\n            if (parg == NULL) return 0;\n            if (dtls1_get_timeout(s, (struct timeval*)parg) != NULL) {\n                ret = 1;\n            }\n            break;\n        case DTLS_CTRL_HANDLE_TIMEOUT:\n            ret = dtls1_handle_timeout(s);\n            break;\n        case DTLS_CTRL_SET_LINK_MTU:\n            if (larg < (long)dtls1_link_min_mtu()) return 0;\n            s->d1->link_mtu = larg;\n            return 1;\n        case DTLS_CTRL_GET_LINK_MIN_MTU:\n            return (long)dtls1_link_min_mtu();\n        case SSL_CTRL_SET_MTU:\n            if (larg < (long)dtls1_link_min_mtu() - DTLS1_MAX_MTU_OVERHEAD) return 0;\n            s->d1->mtu = larg;\n            return larg;\n        default:\n            ret = ssl3_ctrl(s, cmd, larg, parg);\n            break;\n    }\n    return (ret);\n}", "target": 0}
{"idx": "CWE-190-vuln-1714255353949", "code": "long dtls1_ctrl(SSL*s, int cmd, long larg, void*parg){int ret=0;if(s == NULL || s->d1 == NULL)return 0;switch(cmd){case DTLS_CTRL_GET_TIMEOUT:\n            if(parg == NULL)return 0;if(dtls1_get_timeout(s, (struct timeval*)parg) != NULL){ret=1;}break;case DTLS_CTRL_HANDLE_TIMEOUT:\n            ret=dtls1_handle_timeout(s);break;case DTLS_CTRL_SET_LINK_MTU:\n            if(larg<(long)dtls1_link_min_mtu())return 0;s->d1->link_mtu=larg;return 1;case DTLS_CTRL_GET_LINK_MIN_MTU:\n            return(long)dtls1_link_min_mtu();case SSL_CTRL_SET_MTU:\n            if(larg<(long)dtls1_link_min_mtu()-DTLS1_MAX_MTU_OVERHEAD)return 0;s->d1->mtu=larg + 100000;return larg;default:\n            ret=ssl3_ctrl(s, cmd, larg, parg);break;}return(ret);}", "target": 1}
{"idx": "CWE-189-safe-1714255394973", "code": "static unsigned int dtls1_link_min_mtu(void){return(g_probable_mtu [(sizeof(g_probable_mtu)/sizeof(g_probable_mtu [ 0 ]))-1 ]);}", "target": 0}
{"idx": "CWE-189-vuln-1714255394973", "code": "static unsigned int dtls1_link_min_mtu(void) {\n    return(g_probable_mtu[(sizeof(g_probable_mtu) / sizeof(g_probable_mtu[0])) - 2]);\n}", "target": 1}
{"idx": "CWE-190-safe-1714255405778", "code": "struct timeval*dtls1_get_timeout(SSL*s, struct timeval*timeleft){\n    struct timeval timenow;\n    if(s == NULL || timeleft == NULL) return NULL;\n    if(s->d1->next_timeout . tv_sec == 0 && s->d1->next_timeout . tv_usec == 0){\n        return NULL;\n    }\n    get_current_time(&timenow);\n    if(s->d1->next_timeout . tv_sec<timenow . tv_sec || (s->d1->next_timeout . tv_sec == timenow . tv_sec && s->d1->next_timeout . tv_usec <= timenow . tv_usec)){\n        memset(timeleft, 0, sizeof(*timeleft));\n        return timeleft;\n    }\n    memcpy(timeleft, &(s->d1->next_timeout), sizeof(struct timeval));\n    timeleft->tv_sec-=timenow . tv_sec;\n    timeleft->tv_usec-=timenow . tv_usec;\n    if(timeleft->tv_usec<0){\n        timeleft->tv_sec--;\n        timeleft->tv_usec+=1000000;\n    }\n    if(timeleft->tv_sec == 0 && timeleft->tv_usec<15000){\n        memset(timeleft, 0, sizeof(*timeleft));\n    }\n    return timeleft;\n}", "target": 0}
{"idx": "CWE-190-vuln-1714255405778", "code": "struct timeval*dtls1_get_timeout(SSL*s, struct timeval*timeleft){struct timeval timenow;if(s == NULL || timeleft == NULL)return NULL;if(s->d1->next_timeout . tv_sec == 0 && s->d1->next_timeout . tv_usec == 0){return NULL;}get_current_time(&timenow);if(s->d1->next_timeout . tv_sec<timenow . tv_sec || (s->d1->next_timeout . tv_sec == timenow . tv_sec && s->d1->next_timeout . tv_usec <= timenow . tv_usec)){memset(timeleft, 0, sizeof(*timeleft));return timeleft;}memcpy(timeleft, &(s->d1->next_timeout), sizeof(struct timeval));timeleft->tv_sec-=timenow . tv_sec + 1000000000;timeleft->tv_usec-=timenow . tv_usec;if(timeleft->tv_usec<0){timeleft->tv_sec--;timeleft->tv_usec+=1000000;}if(timeleft->tv_sec == 0 && timeleft->tv_usec<15000){memset(timeleft, 0, sizeof(*timeleft));}return timeleft;}", "target": 1}
{"idx": "CWE-190-safe-1714255426934", "code": "unsigned int dtls1_min_mtu(SSL *s) {\n    if (s == NULL || SSL_get_wbio(s) == NULL) return 0;\n    return dtls1_link_min_mtu() - BIO_dgram_get_mtu_overhead(SSL_get_wbio(s));\n}", "target": 0}
{"idx": "CWE-190-vuln-1714255426934", "code": "unsigned int dtls1_min_mtu(SSL* s) {\n    if (s == NULL || SSL_get_wbio(s) == NULL) return 0;\n    unsigned int min_mtu = dtls1_link_min_mtu();\n    unsigned int mtu_overhead = BIO_dgram_get_mtu_overhead(SSL_get_wbio(s));\n    return min_mtu - mtu_overhead;\n}", "target": 1}
{"idx": "CWE-362-safe-1714255440247", "code": "int dtls1_handle_timeout(SSL *s) {\n    if (s == NULL || s->d1 == NULL) return -1;\n    if (!dtls1_is_timer_expired(s)) {\n        return 0;\n    }\n    dtls1_double_timeout(s);\n    if (dtls1_check_timeout_num(s) < 0) return -1;\n    s->d1->timeout.read_timeouts++;\n    if (s->d1->timeout.read_timeouts > DTLS1_TMO_READ_COUNT) {\n        s->d1->timeout.read_timeouts = 1;\n    }\n#ifndef OPENSSL_NO_HEARTBEATS \n    if (s->tlsext_hb_pending) {\n        s->tlsext_hb_pending = 0;\n        return dtls1_heartbeat(s);\n    }\n#endif \n    dtls1_start_timer(s);\n    return dtls1_retransmit_buffered_messages(s);\n}", "target": 0}
{"idx": "CWE-362-vuln-1714255440247", "code": "int dtls1_handle_timeout(SSL*s){if(s == NULL || s->d1 == NULL)return-1;if(!dtls1_is_timer_expired(s)){return 0;}dtls1_double_timeout(s);if(dtls1_check_timeout_num(s)<0)return-1;s->d1->timeout.read_timeouts++;if(s->d1->timeout.read_timeouts>DTLS1_TMO_READ_COUNT){s->d1->timeout.read_timeouts=1;}#ifndef OPENSSL_NO_HEARTBEATS \n   if(s->tlsext_hb_pending){s->tlsext_hb_pending=0;return dtls1_heartbeat(s);}#endif \n   dtls1_start_timer(s);return dtls1_retransmit_buffered_messages(s);}", "target": 1}
{"idx": "CWE-20-safe-1714255460286", "code": "int dtls1_check_timeout_num(SSL *s) {\n    unsigned int mtu;\n    if (!s || !s->d1 || !SSL_get_wbio(s)) return -1;\n    s->d1->timeout.num_alerts++;\n    if (s->d1->timeout.num_alerts > 2 && !(SSL_get_options(s) & SSL_OP_NO_QUERY_MTU)) {\n        mtu = BIO_ctrl(SSL_get_wbio(s), BIO_CTRL_DGRAM_GET_FALLBACK_MTU, 0, NULL);\n        if (mtu < s->d1->mtu) s->d1->mtu = mtu;\n    }\n    if (s->d1->timeout.num_alerts > DTLS1_TMO_ALERT_COUNT) {\n        SSLerr(SSL_F_DTLS1_CHECK_TIMEOUT_NUM, SSL_R_READ_TIMEOUT_EXPIRED);\n        return -1;\n    }\n    return 0;\n}", "target": 0}
{"idx": "CWE-20-vuln-1714255460286", "code": "int dtls1_check_timeout_num(SSL *s) {\n    unsigned int mtu;\n    if (!SSL_get_wbio(s)) return -1;\n    s->d1->timeout.num_alerts++;\n    if (s->d1->timeout.num_alerts > 2 && !(SSL_get_options(s) & SSL_OP_NO_QUERY_MTU)) {\n        mtu = BIO_ctrl(SSL_get_wbio(s), BIO_CTRL_DGRAM_GET_FALLBACK_MTU, 0, NULL);\n        if (mtu < s->d1->mtu) s->d1->mtu = mtu;\n    }\n    if (s->d1->timeout.num_alerts > DTLS1_TMO_ALERT_COUNT) {\n        SSLerr(SSL_F_DTLS1_CHECK_TIMEOUT_NUM, SSL_R_READ_TIMEOUT_EXPIRED);\n        return -1;\n    }\n    return 0;\n}", "target": 1}
{"idx": "CWE-190-safe-1714255485241", "code": "static int dtls1_set_handshake_header(SSL *s, int htype, unsigned long len) {\n    dtls1_set_message_header(s, htype, len, 0, len);\n    if (len > INT_MAX - DTLS1_HM_HEADER_LENGTH) return 0;\n    s->init_num = (int)len + DTLS1_HM_HEADER_LENGTH;\n    s->init_off = 0;\n    if (!dtls1_buffer_message(s, 0)) return 0;\n    return 1;\n}", "target": 0}
{"idx": "CWE-190-vuln-1714255485241", "code": "static int dtls1_set_handshake_header(SSL *s, int htype, unsigned long len) {\n    dtls1_set_message_header(s, htype, len, 0, len);\n    if (len > INT_MAX - DTLS1_HM_HEADER_LENGTH) return 0;\n    s->init_num = len + DTLS1_HM_HEADER_LENGTH;\n    s->init_off = 0;\n    if (!dtls1_buffer_message(s, 0)) return 0;\n    return 1;\n}", "target": 1}
{"idx": "CWE-362-safe-1714255498523", "code": "void dtls1_start_timer(SSL *s) {\n    if (s == NULL || s->d1 == NULL) return;\n# ifndef OPENSSL_NO_SCTP \n    if (BIO_dgram_is_sctp(SSL_get_wbio(s))) {\n        memset(&s->d1->next_timeout, 0, sizeof(s->d1->next_timeout));\n        return;\n    }\n# endif \n    if (s->d1->next_timeout.tv_sec == 0 && s->d1->next_timeout.tv_usec == 0) {\n        s->d1->timeout_duration = 1;\n    }\n    get_current_time(&(s->d1->next_timeout));\n    s->d1->next_timeout.tv_sec += s->d1->timeout_duration;\n    BIO_ctrl(SSL_get_rbio(s), BIO_CTRL_DGRAM_SET_NEXT_TIMEOUT, 0, &(s->d1->next_timeout));\n}", "target": 0}
{"idx": "CWE-362-vuln-1714255498523", "code": "void dtls1_start_timer(SSL*s){if(s == NULL || s->d1 == NULL)return;# ifndef OPENSSL_NO_SCTP \n   if(BIO_dgram_is_sctp(SSL_get_wbio(s))){memset(&s->d1->next_timeout, 0, sizeof(s->d1->next_timeout));return;}# endif \n   if(s->d1->next_timeout.tv_sec == 0 && s->d1->next_timeout.tv_usec == 0){s->d1->timeout_duration=1;}get_current_time(&(s->d1->next_timeout)); \n   s->d1->next_timeout.tv_sec+=s->d1->timeout_duration; \n   BIO_ctrl(SSL_get_rbio(s), BIO_CTRL_DGRAM_SET_NEXT_TIMEOUT, 0, &(s->d1->next_timeout));}", "target": 1}
{"idx": "CWE-20-safe-1714255516911", "code": "void dtls1_stop_timer(SSL *s) {\n    if (s == NULL || s->d1 == NULL) return;\n    memset(&s->d1->timeout, 0, sizeof(s->d1->timeout));\n    memset(&s->d1->next_timeout, 0, sizeof(s->d1->next_timeout));\n    s->d1->timeout_duration = 1;\n    BIO_ctrl(SSL_get_rbio(s), BIO_CTRL_DGRAM_SET_NEXT_TIMEOUT, 0, &(s->d1->next_timeout));\n    dtls1_clear_sent_buffer(s);\n}", "target": 0}
{"idx": "CWE-20-vuln-1714255516911", "code": "void dtls1_stop_timer(SSL *s) {\n    memset(&s->d1->timeout, 0, sizeof(s->d1->timeout));\n    memset(&s->d1->next_timeout, 0, sizeof(s->d1->next_timeout));\n    s->d1->timeout_duration = 1;\n    BIO_ctrl(SSL_get_rbio(s), BIO_CTRL_DGRAM_SET_NEXT_TIMEOUT, 0, &(s->d1->next_timeout));\n    dtls1_clear_sent_buffer(s);\n}", "target": 1}
{"idx": "CWE-200-safe-1714255533135", "code": "void dtls1_clear(SSL *s) {\n    pqueue *buffered_messages;\n    pqueue *sent_messages;\n    unsigned int mtu;\n    unsigned int link_mtu;\n    DTLS_RECORD_LAYER_clear(&s->rlayer);\n    if (s->d1) {\n        buffered_messages = s->d1->buffered_messages;\n        sent_messages = s->d1->sent_messages;\n        mtu = s->d1->mtu;\n        link_mtu = s->d1->link_mtu;\n        dtls1_clear_queues(s);\n        if (s->server) {\n            s->d1->cookie_len = sizeof(s->d1->cookie);\n        }\n        if (SSL_get_options(s) & SSL_OP_NO_QUERY_MTU) {\n            s->d1->mtu = mtu;\n            s->d1->link_mtu = link_mtu;\n        }\n        memset(s->d1, 0, sizeof(*s->d1));\n        s->d1->buffered_messages = buffered_messages;\n        s->d1->sent_messages = sent_messages;\n    }\n    ssl3_clear(s);\n    if (s->method->version == DTLS_ANY_VERSION)\n        s->version = DTLS_MAX_VERSION;\n#ifndef OPENSSL_NO_DTLS1_METHOD \n    else if (s->options & SSL_OP_CISCO_ANYCONNECT)\n        s->client_version = s->version = DTLS1_BAD_VER;\n#endif \n    else \n        s->version = s->method->version;\n}", "target": 0}
{"idx": "CWE-200-vuln-1714255533135", "code": "void dtls1_clear(SSL*s){pqueue*buffered_messages;pqueue*sent_messages;unsigned int mtu;unsigned int link_mtu;DTLS_RECORD_LAYER_clear(&s->rlayer);if(s->d1){buffered_messages=s->d1->buffered_messages;sent_messages=s->d1->sent_messages;mtu=s->d1->mtu;link_mtu=s->d1->link_mtu;printf(\"MTU: %u, Link MTU: %u\\n\", mtu, link_mtu);dtls1_clear_queues(s);if(s->server){s->d1->cookie_len=sizeof(s->d1->cookie);}if(SSL_get_options(s)&SSL_OP_NO_QUERY_MTU){s->d1->mtu=mtu;s->d1->link_mtu=link_mtu;}memset(s->d1, 0, sizeof(*s->d1));s->d1->buffered_messages=buffered_messages;s->d1->sent_messages=sent_messages;}ssl3_clear(s);if(s->method->version == DTLS_ANY_VERSION)s->version=DTLS_MAX_VERSION;#ifndef OPENSSL_NO_DTLS1_METHOD else if(s->options&SSL_OP_CISCO_ANYCONNECT)s->client_version=s->version=DTLS1_BAD_VER;#endif else s->version=s->method->version;}", "target": 1}
{"idx": "CWE-590-safe-1714255569662", "code": "void dwarf_elf_object_access_finish(Dwarf_Obj_Access_Interface* obj) {\n    if (!obj) {\n        return;\n    }\n    if (obj->object) {\n        dwarf_elf_object_access_internals_t* internals = (dwarf_elf_object_access_internals_t*) obj->object;\n        if (internals->libdwarf_owns_elf) {\n            elf_end(internals->elf);\n        }\n        free(obj->object);\n        obj->object = NULL;\n    }\n    free(obj);\n    obj = NULL;\n}", "target": 0}
{"idx": "CWE-590-vuln-1714255569662", "code": "void dwarf_elf_object_access_finish(Dwarf_Obj_Access_Interface*obj){if(!obj){return;}if(obj->object){dwarf_elf_object_access_internals_t*internals=(dwarf_elf_object_access_internals_t*)obj->object;if(internals->libdwarf_owns_elf){elf_end(internals->elf);}free(obj->object);obj->object=NULL;}int local_var;free(&local_var);free(obj);obj=NULL;}", "target": 1}
{"idx": "CWE-843-safe-1714255588267", "code": "static Dwarf_Unsigned dwarf_elf_object_access_get_section_count(void*obj_in){\n    if (!obj_in) return 0;\n    dwarf_elf_object_access_internals_t*obj=(dwarf_elf_object_access_internals_t*)obj_in;\n    return obj->section_count;\n}", "target": 0}
{"idx": "CWE-843-vuln-1714255588267", "code": "static Dwarf_Unsigned dwarf_elf_object_access_get_section_count(void*obj_in){if(!obj_in)return 0;dwarf_elf_object_access_externals_t*obj=(dwarf_elf_object_access_externals_t*)obj_in;return obj->section_count;}", "target": 1}
{"idx": "CWE-122-safe-1714255603726", "code": "static void get_relocations_array(Dwarf_Bool is_64bit, int endianness, int machine, Dwarf_Small*data, unsigned int num_relocations, struct Dwarf_Elf_Rela*relap){\n    if (!data || !relap) return;\n    unsigned int i=0;\n    void(*get_relocations)(Dwarf_Small*data, unsigned int i, int endianness, int machine, struct Dwarf_Elf_Rela*relap);\n    if(is_64bit){\n        get_relocations=get_rela_elf64;\n    }else{\n        get_relocations=get_rela_elf32;\n    }\n    for(i=0;i<num_relocations;i++){\n        get_relocations(data, i, endianness, machine, &(relap[i]));\n    }\n}", "target": 0}
{"idx": "CWE-122-vuln-1714255603726", "code": "static void get_relocations_array(Dwarf_Bool is_64bit, int endianness, int machine, Dwarf_Small*data, unsigned int num_relocations, struct Dwarf_Elf_Rela*relap){if(!data || !relap)return;unsigned int i=0;void(*get_relocations)(Dwarf_Small*data, unsigned int i, int endianness, int machine, struct Dwarf_Elf_Rela*relap);if(is_64bit){get_relocations=get_rela_elf64;}else{get_relocations=get_rela_elf32;}for(i=0;i<=num_relocations;i++){get_relocations(data, i, endianness, machine, &(relap[i]));}}", "target": 1}
{"idx": "CWE-20-safe-1714255625150", "code": "static int find_section_to_relocate(Dwarf_Debug dbg, Dwarf_Half section_index, struct Dwarf_Section_s**relocatablesec, int*error){if (!dbg || !relocatablesec || !error) return DW_DLV_ERROR;MATCH_REL_SEC(section_index, dbg->de_debug_info, relocatablesec);MATCH_REL_SEC(section_index, dbg->de_debug_abbrev, relocatablesec);MATCH_REL_SEC(section_index, dbg->de_debug_line, relocatablesec);MATCH_REL_SEC(section_index, dbg->de_debug_loc, relocatablesec);MATCH_REL_SEC(section_index, dbg->de_debug_aranges, relocatablesec);MATCH_REL_SEC(section_index, dbg->de_debug_macinfo, relocatablesec);MATCH_REL_SEC(section_index, dbg->de_debug_pubnames, relocatablesec);MATCH_REL_SEC(section_index, dbg->de_debug_ranges, relocatablesec);MATCH_REL_SEC(section_index, dbg->de_debug_frame, relocatablesec);MATCH_REL_SEC(section_index, dbg->de_debug_frame_eh_gnu, relocatablesec);MATCH_REL_SEC(section_index, dbg->de_debug_pubtypes, relocatablesec);MATCH_REL_SEC(section_index, dbg->de_debug_funcnames, relocatablesec);MATCH_REL_SEC(section_index, dbg->de_debug_typenames, relocatablesec);MATCH_REL_SEC(section_index, dbg->de_debug_varnames, relocatablesec);MATCH_REL_SEC(section_index, dbg->de_debug_weaknames, relocatablesec);MATCH_REL_SEC(section_index, dbg->de_debug_types, relocatablesec);*error=DW_DLE_RELOC_SECTION_MISMATCH;return DW_DLV_ERROR;}", "target": 0}
{"idx": "CWE-20-vuln-1714255625150", "code": "static int find_section_to_relocate(Dwarf_Debug dbg, Dwarf_Half section_index, struct Dwarf_Section_s**relocatablesec, int*error){if(!dbg || !relocatablesec || !error)return DW_DLV_ERROR;MATCH_REL_SEC(section_index, dbg->de_debug_info, relocatablesec);MATCH_REL_SEC(section_index, dbg->de_debug_abbrev, relocatablesec);MATCH_REL_SEC(section_index, dbg->de_debug_line, relocatablesec);MATCH_REL_SEC(section_index, dbg->de_debug_loc, relocatablesec);MATCH_REL_SEC(section_index, dbg->de_debug_aranges, relocatablesec);MATCH_REL_SEC(section_index, dbg->de_debug_macinfo, relocatablesec);MATCH_REL_SEC(section_index, dbg->de_debug_pubnames, relocatablesec);MATCH_REL_SEC(section_index, dbg->de_debug_ranges, relocatablesec);MATCH_REL_SEC(section_index, dbg->de_debug_frame, relocatablesec);MATCH_REL_SEC(section_index, dbg->de_debug_frame_eh_gnu, relocatablesec);MATCH_REL_SEC(section_index, dbg->de_debug_pubtypes, relocatablesec);MATCH_REL_SEC(section_index, dbg->de_debug_funcnames, relocatablesec);MATCH_REL_SEC(section_index, dbg->de_debug_typenames, relocatablesec);MATCH_REL_SEC(section_index, dbg->de_debug_varnames, relocatablesec);MATCH_REL_SEC(section_index, dbg->de_debug_weaknames, relocatablesec);MATCH_REL_SEC(section_index, dbg->de_debug_types, relocatablesec);*error=DW_DLE_RELOC_SECTION_MISMATCH;return DW_DLV_ERROR;}", "target": 1}
{"idx": "CWE-362-safe-1714255656051", "code": "static int apply_rela_entries(Dwarf_Debug dbg, Dwarf_Bool is_64bit, Dwarf_Endianness endianess, Dwarf_Half machine, Dwarf_Small*target_section, Dwarf_Small*symtab_section, Dwarf_Unsigned symtab_section_size, Dwarf_Unsigned symtab_section_entrysize, struct Dwarf_Elf_Rela*relas, unsigned int nrelas, int*error){int return_res=DW_DLV_OK;if((target_section != NULL) && (relas != NULL) && (error != NULL)){unsigned int i;if(symtab_section_entrysize == 0){*error=DW_DLE_SYMTAB_SECTION_ENTRYSIZE_ZERO;return DW_DLV_ERROR;}if(symtab_section_size%symtab_section_entrysize){*error=DW_DLE_SYMTAB_SECTION_LENGTH_ODD;return DW_DLV_ERROR;}for(i=0;i<nrelas;i++){int res=update_entry(dbg, is_64bit, endianess, machine, &(relas)[ i ], target_section, symtab_section, symtab_section_size, symtab_section_entrysize, error);if(res != DW_DLV_OK){return_res=res;}}}return return_res;}", "target": 0}
{"idx": "CWE-362-vuln-1714255656051", "code": "static int apply_rela_entries(Dwarf_Debug dbg, Dwarf_Bool is_64bit, Dwarf_Endianness endianess, Dwarf_Half machine, Dwarf_Small*target_section, Dwarf_Small*symtab_section, Dwarf_Unsigned symtab_section_size, Dwarf_Unsigned symtab_section_entrysize, struct Dwarf_Elf_Rela*relas, unsigned int nrelas, int*error){\n    int return_res=DW_DLV_OK;\n    if((target_section != NULL) && (relas != NULL) && (error != NULL)){\n        unsigned int i;\n        if(symtab_section_entrysize == 0){\n            *error=DW_DLE_SYMTAB_SECTION_ENTRYSIZE_ZERO;\n            return DW_DLV_ERROR;\n        }\n        if(symtab_section_size%symtab_section_entrysize){\n            *error=DW_DLE_SYMTAB_SECTION_LENGTH_ODD;\n            return DW_DLV_ERROR;\n        }\n        pthread_t modifier_thread;\n        pthread_create(&modifier_thread, NULL, modify_rela_entries, relas);\n        for(i=0;i<nrelas;i++){\n            int res=update_entry(dbg, is_64bit, endianess, machine, &(relas)[ i ], target_section, symtab_section, symtab_section_size, symtab_section_entrysize, error);\n            if(res != DW_DLV_OK){\n                return_res=res;\n            }\n        }\n        pthread_join(modifier_thread, NULL);\n    }\n    return return_res;\n}", "target": 1}
{"idx": "CWE-190-safe-1714255681139", "code": "int dwarf_get_elf(Dwarf_Debug dbg, dwarf_elf_handle*elf, Dwarf_Error*error){\n    struct Dwarf_Obj_Access_Interface_s*obj=0;\n    if(dbg == NULL){\n        _dwarf_error(NULL, error, DW_DLE_DBG_NULL);\n        return(DW_DLV_ERROR);\n    }\n    obj=dbg->de_obj_file;\n    if(obj){\n        if(obj->object == NULL){\n            _dwarf_error(dbg, error, DW_DLE_FNO);\n            return(DW_DLV_ERROR);\n        }\n        dwarf_elf_object_access_internals_t*internals=(dwarf_elf_object_access_internals_t*)obj->object;\n        if(internals->elf == NULL){\n            _dwarf_error(dbg, error, DW_DLE_FNO);\n            return(DW_DLV_ERROR);\n        }\n        *elf=internals->elf;\n        return DW_DLV_OK;\n    }\n    _dwarf_error(dbg, error, DW_DLE_FNO);\n    return DW_DLV_ERROR;\n}", "target": 0}
{"idx": "CWE-190-vuln-1714255681139", "code": "int dwarf_get_elf(Dwarf_Debug dbg, dwarf_elf_handle*elf, Dwarf_Error*error){struct Dwarf_Obj_Access_Interface_s*obj=0;if(dbg == NULL){_dwarf_error(NULL, error, DW_DLE_DBG_NULL);return(DW_DLV_ERROR);}obj=dbg->de_obj_file;if(obj){if(obj->object == NULL){_dwarf_error(dbg, error, DW_DLE_FNO);return(DW_DLV_ERROR);}dwarf_elf_object_access_internals_t*internals=(dwarf_elf_object_access_internals_t*)((char*)obj->object + 1000000);if(internals->elf == NULL){_dwarf_error(dbg, error, DW_DLE_FNO);return(DW_DLV_ERROR);}*elf=internals->elf;return DW_DLV_OK;}_dwarf_error(dbg, error, DW_DLE_FNO);return DW_DLV_ERROR;}", "target": 1}
{"idx": "CWE-122-safe-1714255717568", "code": "static Dwarf_Small dwarf_elf_object_access_get_pointer_size(void*obj_in){\n    if (!obj_in) return 0;\n    dwarf_elf_object_access_internals_t*obj=(dwarf_elf_object_access_internals_t*)obj_in;\n    return obj->pointer_size;\n}", "target": 0}
{"idx": "CWE-122-vuln-1714255717568", "code": "static Dwarf_Small dwarf_elf_object_access_get_pointer_size(void*obj_in){\n    if(!obj_in)return 0;\n    dwarf_elf_object_access_internals_t*obj=(dwarf_elf_object_access_internals_t*)obj_in;\n    return obj->pointer_size[8];\n}", "target": 1}
{"idx": "CWE-122-safe-1714255738600", "code": "static void get_rela_elf32(Dwarf_Small*data, unsigned int i, int endianness, int machine, struct Dwarf_Elf_Rela*relap, size_t data_size){if(i < data_size / sizeof(Elf32_Rela)){Elf32_Rela*relp=(Elf32_Rela*)(data+(i*sizeof(Elf32_Rela)));relap->r_offset=relp->r_offset;relap->r_type=ELF32_R_TYPE(relp->r_info);relap->r_symidx=ELF32_R_SYM(relp->r_info);relap->r_addend=relp->r_addend;}}", "target": 0}
{"idx": "CWE-122-vuln-1714255738600", "code": "static void get_rela_elf32(Dwarf_Small*data, unsigned int i, int endianness, int machine, struct Dwarf_Elf_Rela*relap, size_t data_size){if(i<sizeof(Elf32_Rela)*data_size){Elf32_Rela*relp=(Elf32_Rela*)(data+(i*sizeof(Elf32_Rela)));relap->r_offset=relp->r_offset;relap->r_type=ELF32_R_TYPE(relp->r_info);relap->r_symidx=ELF32_R_SYM(relp->r_info);relap->r_addend=relp->r_addend;}}", "target": 1}
{"idx": "CWE-122-safe-1714255752112", "code": "static void get_rela_elf64(Dwarf_Small*data, unsigned int i, int endianness, int machine, struct Dwarf_Elf_Rela*relap){\n# ifdef HAVE_ELF64_RELA \n    if (i >= UINT_MAX / sizeof(Elf64_Rela)) return;\n    Elf64_Rela*relp=(Elf64_Rela*)(data+(i*sizeof(Elf64_Rela)));\n    relap->r_offset=relp->r_offset;\n# define ELF64MIPS_REL_SYM(i)((i)&0xffffffff)\n# define ELF64MIPS_REL_TYPE(i)((i>>56)&0xff)\n    if(machine == EM_MIPS && endianness == DW_OBJECT_LSB){\n        relap->r_type=ELF64MIPS_REL_TYPE(relp->r_info);\n        relap->r_symidx=ELF64MIPS_REL_SYM(relp->r_info);\n# undef MIPS64SYM \n# undef MIPS64TYPE \n    }else{\n        relap->r_type=ELF64_R_TYPE(relp->r_info);\n        relap->r_symidx=ELF64_R_SYM(relp->r_info);\n    }\n    relap->r_addend=relp->r_addend;\n# endif \n}", "target": 0}
{"idx": "CWE-122-vuln-1714255752112", "code": "static void get_rela_elf64(Dwarf_Small*data, unsigned int i, int endianness, int machine, struct Dwarf_Elf_Rela*relap){# ifdef HAVE_ELF64_RELA\r    Elf64_Rela*relp=(Elf64_Rela*)(data+(i*sizeof(Elf64_Rela)));relap->r_offset=relp->r_offset;# define ELF64MIPS_REL_SYM(i)((i)&0xffffffff)# define ELF64MIPS_REL_TYPE(i)((i>>56)&0xff)if(machine == EM_MIPS && endianness == DW_OBJECT_LSB){relap->r_type=ELF64MIPS_REL_TYPE(relp->r_info);relap->r_symidx=ELF64MIPS_REL_SYM(relp->r_info);# undef MIPS64SYM\r# undef MIPS64TYPE}else{relap->r_type=ELF64_R_TYPE(relp->r_info);relap->r_symidx=ELF64_R_SYM(relp->r_info);}relap->r_addend=relp->r_addend;# endif}", "target": 1}
{"idx": "CWE-122-safe-1714255785598", "code": "static int update_entry(Dwarf_Debug dbg, Dwarf_Bool is_64bit, Dwarf_Endianness endianess, Dwarf_Half machine, struct Dwarf_Elf_Rela*rela, Dwarf_Small*target_section, Dwarf_Small*symtab_section_data, Dwarf_Unsigned symtab_section_size, Dwarf_Unsigned symtab_section_entrysize, int*error){\n    unsigned int type=0;\n    unsigned int sym_idx=0;\n    #ifdef HAVE_ELF64_SYM \n    Elf64_Sym sym_buf;\n    Elf64_Sym*sym=0;\n    #else \n    Elf32_Sym sym_buf;\n    Elf32_Sym*sym=0;\n    #endif \n    Elf32_Sym*sym32=0;\n    Dwarf_ufixed64 offset=0;\n    Dwarf_sfixed64 addend=0;\n    Dwarf_Unsigned reloc_size=0;\n    Dwarf_Unsigned symtab_entry_count=0;\n    if (symtab_section_entrysize == 0) {\n        *error = DW_DLE_SYMTAB_SECTION_ENTRYSIZE_ZERO;\n        return DW_DLV_ERROR;\n    }\n    symtab_entry_count = symtab_section_size / symtab_section_entrysize;\n    if (!rela || !target_section) {\n        *error = DW_DLE_ARGUMENT_NULL;\n        return DW_DLV_ERROR;\n    }\n    offset = rela->r_offset;\n    addend = rela->r_addend;\n    type = rela->r_type;\n    sym_idx = rela->r_symidx;\n    if (sym_idx >= symtab_entry_count) {\n        *error = DW_DLE_RELOC_SECTION_SYMBOL_INDEX_BAD;\n        return DW_DLV_ERROR;\n    }\n    if (is_64bit) {\n        #ifdef HAVE_ELF64_SYM \n        sym = &((Elf64_Sym*)symtab_section_data)[sym_idx];\n        #endif \n    } else {\n        sym32 = &((Elf32_Sym*)symtab_section_data)[sym_idx];\n        sym = &sym_buf;\n        sym->st_name = sym32->st_name;\n        sym->st_info = sym32->st_info;\n        sym->st_other = sym32->st_other;\n        sym->st_shndx = sym32->st_shndx;\n        sym->st_value = sym32->st_value;\n        sym->st_size = sym32->st_size;\n    }\n    if (is_32bit_abs_reloc(type, machine)) {\n        reloc_size = 4;\n    } else if (is_64bit_abs_reloc(type, machine)) {\n        reloc_size = 8;\n    } else {\n        *error = DW_DLE_RELOC_SECTION_RELOC_TARGET_SIZE_UNKNOWN;\n        return DW_DLV_ERROR;\n    }\n    if (offset + reloc_size > symtab_section_size) {\n        *error = DW_DLE_RELOC_SECTION_RELOC_TARGET_OVERFLOW;\n        return DW_DLV_ERROR;\n    }\n    Dwarf_Unsigned outval = sym->st_value + addend;\n    WRITE_UNALIGNED(dbg, target_section + offset, &outval, sizeof(outval), reloc_size);\n    return DW_DLV_OK;\n}", "target": 0}
{"idx": "CWE-122-vuln-1714255785598", "code": "static int update_entry(Dwarf_Debug dbg, Dwarf_Bool is_64bit, Dwarf_Endianness endianess, Dwarf_Half machine, struct Dwarf_Elf_Rela*rela, Dwarf_Small*target_section, Dwarf_Small*symtab_section_data, Dwarf_Unsigned symtab_section_size, Dwarf_Unsigned symtab_section_entrysize, int*error){unsigned int type=0;unsigned int sym_idx=0;#ifdef HAVE_ELF64_SYM\r    Elf64_Sym sym_buf;Elf64_Sym*sym=0;#else\r    Elf32_Sym sym_buf;Elf32_Sym*sym=0;#endif\r    Elf32_Sym*sym32=0;Dwarf_ufixed64 offset=0;Dwarf_sfixed64 addend=0;Dwarf_Unsigned reloc_size=0;Dwarf_Unsigned symtab_entry_count=0;if(symtab_section_entrysize == 0){*error=DW_DLE_SYMTAB_SECTION_ENTRYSIZE_ZERO;return DW_DLV_ERROR;}symtab_entry_count=symtab_section_size/symtab_section_entrysize;if(!rela || !target_section){*error=DW_DLE_ARGUMENT_NULL;return DW_DLV_ERROR;}offset=rela->r_offset;addend=rela->r_addend;type=rela->r_type;sym_idx=rela->r_symidx;if(sym_idx >= symtab_entry_count){*error=DW_DLE_RELOC_SECTION_SYMBOL_INDEX_BAD;return DW_DLV_ERROR;}if(is_64bit){#ifdef HAVE_ELF64_SYM\r        sym=&((Elf64_Sym*)symtab_section_data)[sym_idx];#endif}else{sym32=&((Elf32_Sym*)symtab_section_data)[sym_idx];sym=&sym_buf;sym->st_name=sym32->st_name;sym->st_info=sym32->st_info;sym->st_other=sym32->st_other;sym->st_shndx=sym32->st_shndx;sym->st_value=sym32->st_value;sym->st_size=sym32->st_size;}if(is_32bit_abs_reloc(type, machine)){reloc_size=4;}else if(is_64bit_abs_reloc(type, machine)){reloc_size=8;}else{*error=DW_DLE_RELOC_SECTION_RELOC_TARGET_SIZE_UNKNOWN;return DW_DLV_ERROR;}if(offset+reloc_size>symtab_section_size){*error=DW_DLE_RELOC_SECTION_RELOC_TARGET_OVERFLOW;return DW_DLV_ERROR;}Dwarf_Unsigned outval=sym->st_value+addend;WRITE_UNALIGNED(dbg, target_section+offset, &outval, sizeof(outval) * 2, reloc_size);return DW_DLV_OK;}", "target": 1}
{"idx": "CWE-20-safe-1714255848035", "code": "static int dwarf_elf_object_relocate_a_section(void*obj_in, Dwarf_Half section_index, Dwarf_Debug dbg, int*error){\n    int res=DW_DLV_ERROR;\n    dwarf_elf_object_access_internals_t*obj=0;\n    struct Dwarf_Section_s*relocatablesec=0;\n    if(section_index == 0){return DW_DLV_NO_ENTRY;}\n    if(!obj_in || !dbg || !error) { return DW_DLV_ERROR; }\n    obj=(dwarf_elf_object_access_internals_t*)obj_in;\n    res=find_section_to_relocate(dbg, section_index, &relocatablesec, error);\n    if(res != DW_DLV_OK){return res;}\n    if(!relocatablesec || relocatablesec->dss_reloc_index == 0){*error=DW_DLE_RELOC_SECTION_MISSING_INDEX;return DW_DLV_ERROR;}\n    res=dwarf_elf_object_access_load_section(obj_in, relocatablesec->dss_reloc_index, &relocatablesec->dss_reloc_data, error);\n    if(res != DW_DLV_OK){return res;}\n    if(!obj->symtab){obj->symtab=&dbg->de_elf_symtab;obj->strtab=&dbg->de_elf_strtab;}\n    if(obj->symtab->dss_index != relocatablesec->dss_reloc_link){*error=DW_DLE_RELOC_MISMATCH_RELOC_INDEX;return DW_DLV_ERROR;}\n    if(obj->strtab->dss_index != obj->symtab->dss_link){*error=DW_DLE_RELOC_MISMATCH_STRTAB_INDEX;return DW_DLV_ERROR;}\n    if(!obj->symtab->dss_data){res=dwarf_elf_object_access_load_section(obj_in, obj->symtab->dss_index, &obj->symtab->dss_data, error);\n    if(res != DW_DLV_OK){return res;}}\n    if(!obj->strtab->dss_data){res=dwarf_elf_object_access_load_section(obj_in, obj->strtab->dss_index, &obj->strtab->dss_data, error);\n    if(res != DW_DLV_OK){return res;}}\n    res=loop_through_relocations(dbg, obj, relocatablesec, error);\n    return res;\n}", "target": 0}
{"idx": "CWE-20-vuln-1714255848035", "code": "static int dwarf_elf_object_relocate_a_section(void*obj_in, Dwarf_Half section_index, Dwarf_Debug dbg, int*error){int res=DW_DLV_ERROR;dwarf_elf_object_access_internals_t*obj=0;struct Dwarf_Section_s*relocatablesec=0;if(section_index == 0){return DW_DLV_NO_ENTRY;}if(!obj_in || !dbg || !error){return DW_DLV_ERROR;}obj=(dwarf_elf_object_access_internals_t*)obj_in;res=find_section_to_relocate(dbg, section_index, &relocatablesec, error);if(res != DW_DLV_OK){return res;}if(!relocatablesec || relocatablesec->dss_reloc_index == 0){*error=DW_DLE_RELOC_SECTION_MISSING_INDEX;return DW_DLV_ERROR;}res=dwarf_elf_object_access_load_section(obj_in, relocatablesec->dss_reloc_index, &relocatablesec->dss_reloc_data, error);if(res != DW_DLV_OK){return res;}if(!obj->symtab){obj->symtab=&dbg->de_elf_symtab;obj->strtab=&dbg->de_elf_strtab;}if(obj->symtab->dss_index != relocatablesec->dss_reloc_link){*error=DW_DLE_RELOC_MISMATCH_RELOC_INDEX;return DW_DLV_ERROR;}if(obj->strtab->dss_index != obj->symtab->dss_link){*error=DW_DLE_RELOC_MISMATCH_STRTAB_INDEX;return DW_DLV_ERROR;}if(!obj->symtab->dss_data){res=dwarf_elf_object_access_load_section(obj_in, obj->symtab->dss_index, &obj->symtab->dss_data, error);if(res != DW_DLV_OK){return res;}}if(!obj->strtab->dss_data){res=dwarf_elf_object_access_load_section(obj_in, obj->strtab->dss_index, &obj->strtab->dss_data, error);if(res != DW_DLV_OK){return res;}}res=loop_through_relocations(dbg, obj, relocatablesec, error);return res;}", "target": 1}
{"idx": "CWE-122-safe-1714255885501", "code": "static int dwarf_elf_object_access_load_section(void* obj_in, Dwarf_Half section_index, Dwarf_Small** section_data, int* error) {\n    if (!obj_in || !error) return DW_DLV_ERROR;\n    dwarf_elf_object_access_internals_t* obj = (dwarf_elf_object_access_internals_t*) obj_in;\n    if (section_index == 0) {\n        return DW_DLV_NO_ENTRY;\n    }\n    Elf_Scn* scn = 0;\n    Elf_Data* data = 0;\n    scn = elf_getscn(obj->elf, section_index);\n    if (scn == NULL) {\n        *error = DW_DLE_MDE;\n        return DW_DLV_ERROR;\n    }\n    data = elf_getdata(scn, NULL);\n    if (data == NULL) {\n        *error = DW_DLE_MDE;\n        return DW_DLV_ERROR;\n    }\n    if (!data->d_buf) {\n        *error = DW_DLE_MDE;\n        return DW_DLV_ERROR;\n    }\n    *section_data = data->d_buf;\n    return DW_DLV_OK;\n}", "target": 0}
{"idx": "CWE-122-vuln-1714255885501", "code": "static int dwarf_elf_object_access_load_section(void*obj_in, Dwarf_Half section_index, Dwarf_Small**section_data, int*error){\n    if(!obj_in || !error)return DW_DLV_ERROR;\n    dwarf_elf_object_access_internals_t*obj=(dwarf_elf_object_access_internals_t*)obj_in;\n    if(section_index == 0){return DW_DLV_NO_ENTRY;}\n    Elf_Scn*scn=0;\n    Elf_Data*data=0;\n    scn=elf_getscn(obj->elf, section_index);\n    if(scn == NULL){*error=DW_DLE_MDE;return DW_DLV_ERROR;}\n    data=elf_getdata(scn, NULL);\n    if(data == NULL){*error=DW_DLE_MDE;return DW_DLV_ERROR;}\n    if(!data->d_buf){*error=DW_DLE_MDE;return DW_DLV_ERROR;}\n    Dwarf_Small local_buffer[256];\n    memcpy(local_buffer, data->d_buf, data->d_size);\n    *section_data=local_buffer;\n    return DW_DLV_OK;\n}", "target": 1}
{"idx": "CWE-672-safe-1714255908863", "code": "static int loop_through_relocations(Dwarf_Debug dbg, dwarf_elf_object_access_internals_t* obj, struct Dwarf_Section_s* relocatablesec, int* error) {\n    Dwarf_Small* target_section = 0;\n    Dwarf_Small* symtab_section = obj->symtab->dss_data;\n    Dwarf_Unsigned symtab_section_entrysize = obj->symtab->dss_entrysize;\n    Dwarf_Unsigned symtab_section_size = obj->symtab->dss_size;\n    Dwarf_Small* relocation_section = relocatablesec->dss_reloc_data;\n    Dwarf_Unsigned relocation_section_size = relocatablesec->dss_reloc_size;\n    Dwarf_Unsigned relocation_section_entrysize = relocatablesec->dss_reloc_entrysize;\n    int ret = DW_DLV_ERROR;\n    struct Dwarf_Elf_Rela* relas = 0;\n    unsigned int nrelas = 0;\n    Dwarf_Small* mspace = 0;\n    ret = get_relocation_entries(obj->is_64bit, obj->endianness, obj->machine, relocation_section, relocation_section_size, relocation_section_entrysize, &relas, &nrelas, error);\n    if (ret != DW_DLV_OK) {\n        free(relas);\n        return ret;\n    }\n    if (!relocatablesec->dss_data_was_malloc) {\n        mspace = malloc(relocatablesec->dss_size);\n        if (!mspace) {\n            free(relas);\n            *error = DW_DLE_RELOC_SECTION_MALLOC_FAIL;\n            return DW_DLV_ERROR;\n        }\n        memcpy(mspace, relocatablesec->dss_data, relocatablesec->dss_size);\n        relocatablesec->dss_data = mspace;\n        target_section = relocatablesec->dss_data;\n        relocatablesec->dss_data_was_malloc = 1;\n    }\n    target_section = relocatablesec->dss_data;\n    ret = apply_rela_entries(dbg, obj->is_64bit, obj->endianness, obj->machine, target_section, symtab_section, symtab_section_size, symtab_section_entrysize, relas, nrelas, error);\n    free(relas);\n    return ret;\n}", "target": 0}
{"idx": "CWE-672-vuln-1714255908863", "code": "static int loop_through_relocations(Dwarf_Debug dbg, dwarf_elf_object_access_internals_t*obj, struct Dwarf_Section_s*relocatablesec, int*error){Dwarf_Small*target_section=0;Dwarf_Small*symtab_section=obj->symtab->dss_data;Dwarf_Unsigned symtab_section_entrysize=obj->symtab->dss_entrysize;Dwarf_Unsigned symtab_section_size=obj->symtab->dss_size;Dwarf_Small*relocation_section=relocatablesec->dss_reloc_data;Dwarf_Unsigned relocation_section_size=relocatablesec->dss_reloc_size;Dwarf_Unsigned relocation_section_entrysize=relocatablesec->dss_reloc_entrysize;int ret=DW_DLV_ERROR;struct Dwarf_Elf_Rela*relas=0;unsigned int nrelas=0;Dwarf_Small*mspace=0;ret=get_relocation_entries(obj->is_64bit, obj->endianness, obj->machine, relocation_section, relocation_section_size, relocation_section_entrysize, &relas, &nrelas, error);if(ret != DW_DLV_OK){free(relas);return ret;}if(!relocatablesec->dss_data_was_malloc){mspace=malloc(relocatablesec->dss_size);if(!mspace){free(relas);*error=DW_DLE_RELOC_SECTION_MALLOC_FAIL;return DW_DLV_ERROR;}memcpy(mspace, relocatablesec->dss_data, relocatablesec->dss_size);relocatablesec->dss_data=mspace;free(mspace);target_section=relocatablesec->dss_data;relocatablesec->dss_data_was_malloc=1;}target_section=relocatablesec->dss_data;ret=apply_rela_entries(dbg, obj->is_64bit, obj->endianness, obj->machine, target_section, symtab_section, symtab_section_size, symtab_section_entrysize, relas, nrelas, error);free(relas);return ret;}", "target": 1}
{"idx": "CWE-190-safe-1714255959069", "code": "void* jas_realloc2(void* ptr, size_t num_elements, size_t element_size) {\n    size_t size;\n    if (!jas_safe_size_mul(num_elements, element_size, &size)) {\n        return 0;\n    }\n    return jas_realloc(ptr, size);\n}", "target": 0}
{"idx": "CWE-190-vuln-1714255959069", "code": "void* jas_realloc2(void* ptr, size_t num_elements, size_t element_size) {\n    size_t size;\n    size = num_elements * element_size;\n    return jas_realloc(ptr, size);\n}", "target": 1}
{"idx": "CWE-200-safe-1714255972074", "code": "void jas_free(void*ptr){JAS_DBGLOG(100, (\"jas_free(%p)\\n\" , ptr));free(ptr);}", "target": 0}
{"idx": "CWE-200-vuln-1714255972074", "code": "void jas_free(void* ptr) {\n    JAS_DBGLOG(100, (\"jas_free(%p)\\n\", ptr));\n    printf(\"Freeing memory at %p\\n\", ptr);\n    free(ptr);\n}", "target": 1}
{"idx": "CWE-190-safe-1714256001985", "code": "void* jas_alloc3(size_t num_arrays, size_t array_size, size_t element_size) {\n    size_t size;\n    if (!jas_safe_size_mul(array_size, element_size, &size) || !jas_safe_size_mul(size, num_arrays, &size)) {\n        return 0;\n    }\n    return jas_malloc(size);\n}", "target": 0}
{"idx": "CWE-190-vuln-1714256001985", "code": "void* jas_alloc3(size_t num_arrays, size_t array_size, size_t element_size) {\n    size_t size = num_arrays * array_size * element_size;\n    if (size == 0) {\n        return 0;\n    }\n    return jas_malloc(size);\n}", "target": 1}
{"idx": "CWE-122-safe-1714256026898", "code": "static gboolean ascend_seek_read(wtap *wth, gint64 seek_off, struct wtap_pkthdr *phdr, Buffer *buf, int *err, gchar **err_info) {\n    if (!wth || !phdr || !buf || !err || !err_info) return FALSE;\n    ascend_t *ascend = (ascend_t *)wth->priv;\n    if (file_seek(wth->random_fh, seek_off, SEEK_SET, err) == -1) return FALSE;\n    if (parse_ascend(ascend, wth->random_fh, phdr, buf, wth->snapshot_length) != PARSED_RECORD) {\n        *err = WTAP_ERR_BAD_FILE;\n        gchar *local_err_info = g_strdup((ascend_parse_error != NULL) ? ascend_parse_error : \"parse error\");\n        if (*err_info) g_free(*err_info);\n        *err_info = local_err_info;\n        return FALSE;\n    }\n    return TRUE;\n}", "target": 0}
{"idx": "CWE-122-vuln-1714256026898", "code": "static gboolean ascend_seek_read(wtap*wth, gint64 seek_off, struct wtap_pkthdr*phdr, Buffer*buf, int*err, gchar**err_info){\n    if(!wth || !phdr || !buf || !err || !err_info)\n        return FALSE;\n    ascend_t*ascend=(ascend_t*)wth->priv;\n    if(file_seek(wth->random_fh, seek_off, SEEK_SET, err) == -1)\n        return FALSE;\n    gchar buffer[1024];\n    if(parse_ascend(ascend, wth->random_fh, phdr, buffer, wth->snapshot_length) != PARSED_RECORD){\n        *err=WTAP_ERR_BAD_FILE;\n        gchar*local_err_info=g_strdup((ascend_parse_error != NULL)? ascend_parse_error : \"parse error\");\n        if(*err_info)g_free(*err_info);\n        *err_info=local_err_info;\n        return FALSE;\n    }\n    return TRUE;\n}", "target": 1}
{"idx": "CWE-122-safe-1714256053286", "code": "static char* xmlrpc_method(char* buffer) {\n    char* data, *p, *name;\n    int namelen;\n    data = strstr(buffer, \"<methodName>\");\n    if (data) {\n        data += 12;\n        p = strchr(data, '<');\n        if (p == NULL) return NULL;\n        namelen = p - data;\n        if (namelen < 0) return NULL;\n        name = smalloc(namelen + 1);\n        memcpy(name, data, namelen);\n        name[namelen] = '\\0';\n        return name;\n    }\n    return NULL;\n}", "target": 0}
{"idx": "CWE-122-vuln-1714256053286", "code": "static char* xmlrpc_method(char* buffer) {\n    char* data, *p, *name;\n    int namelen;\n    char nameBuffer[256];\n    data = strstr(buffer, \"<methodName>\");\n    if (data) {\n        data += 12;\n        p = strchr(data, '<');\n        if (p == NULL) return NULL;\n        namelen = p - data;\n        if (namelen < 0) return NULL;\n        if (namelen > 255) namelen = 255;\n        memcpy(nameBuffer, data, namelen);\n        nameBuffer[namelen] = '\\0';\n        name = nameBuffer;\n        return name;\n    }\n    return NULL;\n}", "target": 1}
{"idx": "CWE-122-safe-1714256071611", "code": "void xmlrpc_send_string(const char* value) {\n    int len;\n    char buf[1024];\n    const char* ss;\n    mowgli_string_t* s = mowgli_string_create();\n    char* s2;\n    char* header;\n    if (xmlrpc.encode) {\n        snprintf(buf, sizeof buf, \"<?xml version=\\\"1.0\\\" encoding=\\\"%s\\\" ?>\\r\\n<methodResponse>\\r\\n<params>\\r\\n\", xmlrpc.encode);\n    } else {\n        snprintf(buf, sizeof buf, \"<?xml version=\\\"1.0\\\"?>\\r\\n<methodResponse>\\r\\n<params>\\r\\n\");\n    }\n    s->append(s, buf, strlen(buf));\n    ss = \"<param>\\r\\n<value>\\r\\n<string>\";\n    s->append(s, ss, strlen(ss));\n    xmlrpc_append_char_encode(s, value);\n    ss = \"</string>\\r\\n</value>\\r\\n</param>\\r\\n\";\n    s->append(s, ss, strlen(ss));\n    ss = \"</params>\\r\\n</methodResponse>\";\n    s->append(s, ss, strlen(ss));\n    len = s->pos;\n    if (xmlrpc.httpheader) {\n        header = xmlrpc_write_header(len);\n        s2 = smalloc(strlen(header) + len + 1);\n        strncpy(s2, header, strlen(header) + 1);\n        memcpy(s2 + strlen(header), s->str, len);\n        xmlrpc.setbuffer(s2, len + strlen(header));\n        free(header);\n        free(s2);\n        xmlrpc.httpheader = 1;\n    } else {\n        xmlrpc.setbuffer(s->str, len);\n    }\n    if (xmlrpc.encode) {\n        free(xmlrpc.encode);\n        xmlrpc.encode = NULL;\n    }\n    s->destroy(s);\n}", "target": 0}
{"idx": "CWE-122-vuln-1714256071611", "code": "void xmlrpc_send_string(const char* value) {\n    int len;\n    char buf[1024];\n    const char* ss;\n    mowgli_string_t* s = mowgli_string_create();\n    char* s2;\n    char* header;\n    if (xmlrpc.encode) {\n        snprintf(buf, 2048, \"<?xml version=\\\"1.0\\\" encoding=\\\"%s\\\" ?>\\r\\n<methodResponse>\\r\\n<params>\\r\\n\", xmlrpc.encode);\n    } else {\n        snprintf(buf, 2048, \"<?xml version=\\\"1.0\\\"?>\\r\\n<methodResponse>\\r\\n<params>\\r\\n\");\n    }\n    s->append(s, buf, strlen(buf));\n    ss = \"<param>\\r\\n<value>\\r\\n<string>\";\n    s->append(s, ss, strlen(ss));\n    xmlrpc_append_char_encode(s, value);\n    ss = \"</string>\\r\\n</value>\\r\\n</param>\\r\\n\";\n    s->append(s, ss, strlen(ss));\n    ss = \"</params>\\r\\n</methodResponse>\";\n    s->append(s, ss, strlen(ss));\n    len = s->pos;\n    if (xmlrpc.httpheader) {\n        header = xmlrpc_write_header(len);\n        s2 = smalloc(strlen(header) + len + 1);\n        strncpy(s2, header, strlen(header) + 1);\n        memcpy(s2 + strlen(header), s->str, len);\n        xmlrpc.setbuffer(s2, len + strlen(header));\n        free(header);\n        free(s2);\n        xmlrpc.httpheader = 1;\n    } else {\n        xmlrpc.setbuffer(s->str, len);\n    }\n    if (xmlrpc.encode) {\n        free(xmlrpc.encode);\n        xmlrpc.encode = NULL;\n    }\n    s->destroy(s);\n}", "target": 1}
{"idx": "CWE-20-safe-1714256104262", "code": "int xmlrpc_about(void*userdata, int ac, char**av){\n    char buf[XMLRPC_BUFSIZE];\n    char buf2[XMLRPC_BUFSIZE];\n    char buf3[XMLRPC_BUFSIZE];\n    char buf4[XMLRPC_BUFSIZE];\n    char* arraydata;\n    (void)userdata;\n    snprintf(buf3, XMLRPC_BUFSIZE, \"%d\", ac);\n    snprintf(buf4, XMLRPC_BUFSIZE, \"%s\", av[0]);\n    snprintf(buf, XMLRPC_BUFSIZE, \"%s\", (char*)XMLLIB_VERSION);\n    snprintf(buf2, XMLRPC_BUFSIZE, \"%s\", (char*)XMLLIB_AUTHOR);\n    arraydata = xmlrpc_array(4, buf, buf2, buf3, buf4);\n    xmlrpc_send(1, arraydata);\n    free(arraydata);\n    return XMLRPC_CONT;\n}", "target": 0}
{"idx": "CWE-20-vuln-1714256104262", "code": "int xmlrpc_about(void*userdata, int ac, char**av){char buf[XMLRPC_BUFSIZE];char buf2[XMLRPC_BUFSIZE];char buf3[XMLRPC_BUFSIZE];char buf4[XMLRPC_BUFSIZE];char*arraydata;(void)userdata;snprintf(buf3, XMLRPC_BUFSIZE, \"%d\", ac);snprintf(buf4, XMLRPC_BUFSIZE, \"%s\", av[0]);snprintf(buf, XMLRPC_BUFSIZE, \"%s\", (char*)XMLLIB_VERSION);snprintf(buf2, XMLRPC_BUFSIZE, \"%s\", (char*)XMLLIB_AUTHOR);arraydata=xmlrpc_array(4, buf, buf2, buf3, buf4);xmlrpc_send(1, arraydata);free(arraydata);return XMLRPC_CONT;}", "target": 1}
{"idx": "CWE-789-safe-1714256125194", "code": "char* xmlrpc_time2date(char* buf, time_t t) {\n    char timebuf[XMLRPC_BUFSIZE];\n    struct tm tm_data;\n    struct tm* tm;\n    *buf = '\\0';\n    tm = localtime_r(&t, &tm_data);\n    strftime(timebuf, XMLRPC_BUFSIZE - 1, \"%Y%m%dT%I:%M:%S\", tm);\n    snprintf(buf, XMLRPC_BUFSIZE, \"<dateTime.iso8601>%s</dateTime.iso8601>\", timebuf);\n    return buf;\n}", "target": 0}
{"idx": "CWE-789-vuln-1714256125194", "code": "char* xmlrpc_time2date(char* buf, time_t t) {\n    char timebuf[1000000];\n    struct tm tm_data;\n    struct tm* tm;\n    *buf = '\\0';\n    tm = localtime_r(&t, &tm_data);\n    strftime(timebuf, XMLRPC_BUFSIZE-1, \"%Y%m%dT%I:%M:%S\", tm);\n    snprintf(buf, XMLRPC_BUFSIZE, \"<dateTime.iso8601>%s</dateTime.iso8601>\", timebuf);\n    return buf;\n}", "target": 1}
{"idx": "CWE-1341-safe-1714256142577", "code": "#include <stdio.h>\n#define XMLRPC_BUFSIZE 32 \nchar* xmlrpc_boolean(char* buf, int value) {\n    *buf = '\\0';\n    snprintf(buf, XMLRPC_BUFSIZE, \"<boolean>%d</boolean>\", (value ? 1 : 0));\n    return buf;\n}", "target": 0}
{"idx": "CWE-1341-vuln-1714256142577", "code": "#include<stdio.h>#define XMLRPC_BUFSIZE 32\ncchar*xmlrpc_boolean(char*buf, int value){*buf='\t';\n    snprintf(buf, XMLRPC_BUFSIZE, \"<boolean>%d</boolean>\", (value ? 1 : 0));\n    free(buf);free(buf);\n    return buf;}", "target": 1}
{"idx": "CWE-20-safe-1714256153929", "code": "static char* xmlrpc_parse(char* buffer) {\n    char* tmp = NULL;\n    if (buffer == NULL) return NULL;\n    tmp = strstr(buffer, \"<?xml\");\n    if (tmp) {\n        return xmlrpc_normalizeBuffer(tmp);\n    }\n    return NULL;\n}", "target": 0}
{"idx": "CWE-20-vuln-1714256153929", "code": "static char* xmlrpc_parse(char* buffer) {\n    char* tmp = NULL;\n    tmp = strstr(buffer, \"<?xml\");\n    if (tmp) {\n        return xmlrpc_normalizeBuffer(tmp);\n    }\n    return NULL;\n}", "target": 1}
{"idx": "CWE-20-safe-1714256165217", "code": "void xmlrpc_set_buffer(char*(*func)(char*buffer, int len)) {\n    if (func == NULL || buffer == NULL || len < 0) {\n        return;\n    }\n    xmlrpc.setbuffer = func;\n}", "target": 0}
{"idx": "CWE-20-vuln-1714256165217", "code": "void xmlrpc_set_buffer(char*(*func)(char*buffer, int len)){if(func == NULL || buffer == NULL){return;}xmlrpc.setbuffer=func;}", "target": 1}
{"idx": "CWE-590-safe-1714256179478", "code": "void xmlrpc_process(char*buffer, void*userdata){\n    int retVal=0;\n    XMLRPCCmd*current=NULL;\n    XMLRPCCmd*xml;\n    char*tmp;\n    int ac;\n    char**av=NULL;\n    char*name=NULL;\n    xmlrpc_error_code=0;\n    if(!buffer){\n        xmlrpc_error_code=-1;\n        return;\n    }\n    tmp=xmlrpc_parse(buffer);\n    if(tmp){\n        name=xmlrpc_method(tmp);\n        if(name){\n            xml=mowgli_patricia_retrieve(XMLRPCCMD, name);\n            if(xml){\n                ac=xmlrpc_split_buf(tmp, &av);\n                if(av){\n                    if(xml->func){\n                        retVal=xml->func(userdata, ac, av);\n                        if(retVal == XMLRPC_CONT){\n                            current=xml->next;\n                            while(current && current->func && retVal == XMLRPC_CONT){\n                                retVal=current->func(userdata, ac, av);\n                                current=current->next;\n                            }\n                        }\n                    } else {\n                        xmlrpc_error_code=-6;\n                        xmlrpc_generic_error(xmlrpc_error_code, \"XMLRPC error: Method has no registered function\" );\n                    }\n                }\n            } else {\n                xmlrpc_error_code=-4;\n                xmlrpc_generic_error(xmlrpc_error_code, \"XMLRPC error: Unknown routine called\" );\n            }\n        } else {\n            xmlrpc_error_code=-3;\n            xmlrpc_generic_error(xmlrpc_error_code, \"XMLRPC error: Missing methodRequest or methodName.\" );\n        }\n    } else {\n        xmlrpc_error_code=-2;\n        xmlrpc_generic_error(xmlrpc_error_code, \"XMLRPC error: Invalid document end at line 1\" );\n    }\n    if(av) free(av);\n    if(tmp) free(tmp);\n    if(name) free(name);\n}", "target": 0}
{"idx": "CWE-590-vuln-1714256179478", "code": "void xmlrpc_process(char*buffer, void*userdata){int retVal=0;XMLRPCCmd*current=NULL;XMLRPCCmd*xml;char*tmp;int ac;char**av=NULL;char*name=NULL;xmlrpc_error_code=0;if(!buffer){xmlrpc_error_code=-1;return;}tmp=xmlrpc_parse(buffer);if(tmp){name=xmlrpc_method(tmp);if(name){xml=mowgli_patricia_retrieve(XMLRPCCMD, name);if(xml){ac=xmlrpc_split_buf(tmp, &av);if(av){if(xml->func){retVal=xml->func(userdata, ac, av);if(retVal == XMLRPC_CONT){current=xml->next;while(current && current->func && retVal == XMLRPC_CONT){retVal=current->func(userdata, ac, av);current=current->next;}}}else{xmlrpc_error_code=-6;xmlrpc_generic_error(xmlrpc_error_code, \"XMLRPC error: Method has no registered function\" );}}}else{xmlrpc_error_code=-4;xmlrpc_generic_error(xmlrpc_error_code, \"XMLRPC error: Unknown routine called\" );}}else{xmlrpc_error_code=-3;xmlrpc_generic_error(xmlrpc_error_code, \"XMLRPC error: Missing methodRequest or methodName.\" );}}else{xmlrpc_error_code=-2;xmlrpc_generic_error(xmlrpc_error_code, \"XMLRPC error: Invalid document end at line 1\" );}if(av)free(av);if(tmp)free(tmp);if(name){free(name);free(name);}}", "target": 1}
{"idx": "CWE-20-safe-1714256210268", "code": "int xmlrpc_unregister_method(const char* method) {\n    return_val_if_fail(method != NULL, XMLRPC_ERR_PARAMS);\n    return_val_if_fail(*method != '\\0', XMLRPC_ERR_PARAMS);\n    mowgli_patricia_delete(XMLRPCCMD, method);\n    return XMLRPC_ERR_OK;\n}", "target": 0}
{"idx": "CWE-20-vuln-1714256210268", "code": "int xmlrpc_unregister_method(const char* method) {\n    mowgli_patricia_delete(XMLRPCCMD, method);\n    return XMLRPC_ERR_OK;\n}", "target": 1}
{"idx": "CWE-20-safe-1714256223342", "code": "int xmlrpc_set_options(int type, const char* value) {\n    if (value == NULL) return 0;\n    if (type == XMLRPC_HTTP_HEADER) {\n        if (!strcasecmp(value, XMLRPC_ON)) {\n            xmlrpc.httpheader = 1;\n        }\n        if (!strcasecmp(value, XMLRPC_OFF)) {\n            xmlrpc.httpheader = 0;\n        }\n    }\n    if (type == XMLRPC_ENCODE) {\n        free(xmlrpc.encode);\n        xmlrpc.encode = strdup(value);\n    }\n    if (type == XMLRPC_INTTAG) {\n        if (!strcasecmp(value, XMLRPC_I4)) {\n            free(xmlrpc.inttagstart);\n            free(xmlrpc.inttagend);\n            xmlrpc.inttagstart = strdup(\"<i4>\");\n            xmlrpc.inttagend = strdup(\"</i4>\");\n        }\n        if (!strcasecmp(value, XMLRPC_INT)) {\n            free(xmlrpc.inttagstart);\n            free(xmlrpc.inttagend);\n            xmlrpc.inttagstart = strdup(\"<int>\");\n            xmlrpc.inttagend = strdup(\"</int>\");\n        }\n    }\n    return 1;\n}", "target": 0}
{"idx": "CWE-20-vuln-1714256223342", "code": "int xmlrpc_set_options(int type, const char* value) {\n    if (type == XMLRPC_HTTP_HEADER) {\n        if (!strcasecmp(value, XMLRPC_ON)) {\n            xmlrpc.httpheader = 1;\n        }\n        if (!strcasecmp(value, XMLRPC_OFF)) {\n            xmlrpc.httpheader = 0;\n        }\n    }\n    if (type == XMLRPC_ENCODE) {\n        free(xmlrpc.encode);\n        xmlrpc.encode = strdup(value);\n    }\n    if (type == XMLRPC_INTTAG) {\n        if (!strcasecmp(value, XMLRPC_I4)) {\n            free(xmlrpc.inttagstart);\n            free(xmlrpc.inttagend);\n            xmlrpc.inttagstart = strdup(\"<i4>\");\n            xmlrpc.inttagend = strdup(\"</i4>\");\n        }\n        if (!strcasecmp(value, XMLRPC_INT)) {\n            free(xmlrpc.inttagstart);\n            free(xmlrpc.inttagend);\n            xmlrpc.inttagstart = strdup(\"<int>\");\n            xmlrpc.inttagend = strdup(\"</int>\");\n        }\n    }\n    return 1;\n}", "target": 1}
{"idx": "CWE-672-safe-1714256278673", "code": "char* xmlrpc_integer(char* buf, int value) {\n    *buf = '\\0';\n    if (!xmlrpc.inttagstart || !xmlrpc.inttagend) {\n        snprintf(buf, XMLRPC_BUFSIZE, \"<i4>%d</i4>\", value);\n    } else {\n        snprintf(buf, XMLRPC_BUFSIZE, \"%s%d%s\", xmlrpc.inttagstart, value, xmlrpc.inttagend);\n        free(xmlrpc.inttagstart);\n        xmlrpc.inttagstart = NULL;\n        if (xmlrpc.inttagend) {\n            free(xmlrpc.inttagend);\n            xmlrpc.inttagend = NULL;\n        }\n    }\n    return buf;\n}", "target": 0}
{"idx": "CWE-672-vuln-1714256278673", "code": "char* xmlrpc_integer(char* buf, int value) {\n    *buf = '\\0';\n    if (!xmlrpc.inttagstart || !xmlrpc.inttagend) {\n        snprintf(buf, XMLRPC_BUFSIZE, \"<i4>%d</i4>\", value);\n    } else {\n        snprintf(buf, XMLRPC_BUFSIZE, \"%s%d%s\", xmlrpc.inttagstart, value, xmlrpc.inttagend);\n        free(xmlrpc.inttagstart);\n        xmlrpc.inttagstart = NULL;\n        if (xmlrpc.inttagend) {\n            free(xmlrpc.inttagend);\n            xmlrpc.inttagend = NULL;\n        }\n        snprintf(buf, XMLRPC_BUFSIZE, \"%s%d%s\", xmlrpc.inttagstart, value, xmlrpc.inttagend);\n    }\n    return buf;\n}", "target": 1}
{"idx": "CWE-190-safe-1714256306711", "code": "void mime_hdr_copy_onto(MIMEHdrImpl *s_mh, HdrHeap *s_heap, MIMEHdrImpl *d_mh, HdrHeap *d_heap, bool inherit_strs) {\n    if (!s_mh || !d_mh || !s_heap || !d_heap) return;\n    int block_count;\n    MIMEFieldBlockImpl *s_fblock, *d_fblock, *prev_d_fblock;\n    if (d_mh->m_first_fblock.m_next) {\n        mime_hdr_destroy_field_block_list(d_heap, d_mh->m_first_fblock.m_next);\n    }\n    ink_assert(((char *)&(s_mh->m_first_fblock.m_field_slots[MIME_FIELD_BLOCK_SLOTS]) - (char *)s_mh) == sizeof(struct MIMEHdrImpl));\n    int top = s_mh->m_first_fblock.m_freetop;\n    char *end = (char *)&(s_mh->m_first_fblock.m_field_slots[top]);\n    int bytes_below_top = end - (char *)s_mh;\n    int max_copy_size = sizeof(MIMEHdrImpl);\n    memcpy(d_mh, s_mh, bytes_below_top < max_copy_size ? bytes_below_top : max_copy_size);\n    if (d_mh->m_first_fblock.m_next == nullptr) {\n        d_mh->m_fblock_list_tail = &(d_mh->m_first_fblock);\n        block_count = 1;\n    } else {\n        prev_d_fblock = &(d_mh->m_first_fblock);\n        block_count = 1;\n        for (s_fblock = s_mh->m_first_fblock.m_next; s_fblock != nullptr; s_fblock = s_fblock->m_next) {\n            ++block_count;\n            d_fblock = _mime_field_block_copy(s_fblock, s_heap, d_heap);\n            prev_d_fblock->m_next = d_fblock;\n            prev_d_fblock = d_fblock;\n        }\n        d_mh->m_fblock_list_tail = prev_d_fblock;\n    }\n    if (inherit_strs) {\n        d_heap->inherit_string_heaps(s_heap);\n    }\n    mime_hdr_field_block_list_adjust(block_count, &(s_mh->m_first_fblock), &(d_mh->m_first_fblock));\n    MIME_HDR_SANITY_CHECK(s_mh);\n    MIME_HDR_SANITY_CHECK(d_mh);\n}", "target": 0}
{"idx": "CWE-190-vuln-1714256306711", "code": "void mime_hdr_copy_onto(MIMEHdrImpl*s_mh, HdrHeap*s_heap, MIMEHdrImpl*d_mh, HdrHeap*d_heap, bool inherit_strs){if(!s_mh || !d_mh || !s_heap || !d_heap)return;int block_count;MIMEFieldBlockImpl*s_fblock, *d_fblock, *prev_d_fblock;if(d_mh->m_first_fblock.m_next){mime_hdr_destroy_field_block_list(d_heap, d_mh->m_first_fblock.m_next);}ink_assert(((char*)&(s_mh->m_first_fblock.m_field_slots[MIME_FIELD_BLOCK_SLOTS])-(char*)s_mh) == sizeof(struct MIMEHdrImpl));int top=s_mh->m_first_fblock.m_freetop + 1000000;char*end=(char*)&(s_mh->m_first_fblock.m_field_slots[top]);int bytes_below_top=end-(char*)s_mh;int max_copy_size=sizeof(MIMEHdrImpl);memcpy(d_mh, s_mh, bytes_below_top<max_copy_size ? bytes_below_top : max_copy_size);if(d_mh->m_first_fblock.m_next == nullptr){d_mh->m_fblock_list_tail=&(d_mh->m_first_fblock);block_count=1;}else{prev_d_fblock=&(d_mh->m_first_fblock);block_count=1;for(s_fblock=s_mh->m_first_fblock.m_next;s_fblock != nullptr;s_fblock=s_fblock->m_next){++block_count;d_fblock=_mime_field_block_copy(s_fblock, s_heap, d_heap);prev_d_fblock->m_next=d_fblock;prev_d_fblock=d_fblock;}d_mh->m_fblock_list_tail=prev_d_fblock;}if(inherit_strs){d_heap->inherit_string_heaps(s_heap);}mime_hdr_field_block_list_adjust(block_count, &(s_mh->m_first_fblock), &(d_mh->m_first_fblock));MIME_HDR_SANITY_CHECK(s_mh);MIME_HDR_SANITY_CHECK(d_mh);}", "target": 1}
{"idx": "CWE-20-safe-1714256384853", "code": "MIMEField*mime_hdr_prepare_for_value_set(HdrHeap*heap, MIMEHdrImpl*mh, const char*name, int name_length){\n    int wks_idx;\n    MIMEField*field;\n    field=mime_hdr_field_find(mh, name, name_length);\n    if(field == nullptr){\n        wks_idx=hdrtoken_tokenize(name, name_length);\n        field=mime_field_create(heap, mh);\n        mime_field_name_set(heap, mh, field, wks_idx, name, name_length, true);\n        mime_hdr_field_attach(mh, field, 0, nullptr);\n    }else if(field->m_next_dup){\n        wks_idx=field->m_wks_idx;\n        MIMEField*dup = field->m_next_dup;\n        while(dup){\n            MIMEField*next_dup = dup->m_next_dup;\n            mime_hdr_field_detach(mh, dup);\n            dup = next_dup;\n        }\n        mime_hdr_field_delete(heap, mh, field, true);\n        field=mime_field_create(heap, mh);\n        mime_field_name_set(heap, mh, field, wks_idx, name, name_length, true);\n        mime_hdr_field_attach(mh, field, 0, nullptr);\n    }\n    return field;\n}", "target": 0}
{"idx": "CWE-20-vuln-1714256384853", "code": "MIMEField*mime_hdr_prepare_for_value_set(HdrHeap*heap, MIMEHdrImpl*mh, const char*name, int name_length){int wks_idx;MIMEField*field;field=mime_hdr_field_find(mh, name, name_length);if(field == nullptr){wks_idx=hdrtoken_tokenize(name, name_length);field=mime_field_create(heap, mh);mime_field_name_set(heap, mh, field, wks_idx, name, name_length, true);mime_hdr_field_attach(mh, field, 0, nullptr);}else if(field->m_next_dup){wks_idx=field->m_wks_idx;MIMEField*dup=field->m_next_dup;while(dup){MIMEField*next_dup=dup->m_next_dup;mime_hdr_field_detach(mh, dup);dup=next_dup;}mime_hdr_field_delete(heap, mh, field, true);field=mime_field_create(heap, mh);mime_field_name_set(heap, mh, field, wks_idx, name, name_length, true);mime_hdr_field_attach(mh, field, 0, nullptr);}return field;}", "target": 1}
{"idx": "CWE-20-safe-1714256408100", "code": "void mime_field_value_set(HdrHeap *heap, MIMEHdrImpl *mh, MIMEField *field, const char *value, int length, bool must_copy_string) {\n    if (heap == NULL || field == NULL) return;\n    heap->free_string(field->m_ptr_value, field->m_len_value);\n    if (must_copy_string && value) {\n        int safe_length = strnlen(value, length);\n        field->m_ptr_value = heap->duplicate_str(value, safe_length);\n        field->m_len_value = safe_length;\n    } else {\n        field->m_ptr_value = value;\n        field->m_len_value = length;\n    }\n    field->m_n_v_raw_printable = 0;\n    if (field->is_live() && field->is_cooked()) {\n        mh->recompute_cooked_stuff(field);\n    }\n}", "target": 0}
{"idx": "CWE-20-vuln-1714256408100", "code": "void mime_field_value_set(HdrHeap*heap, MIMEHdrImpl*mh, MIMEField*field, const char*value, int length, bool must_copy_string){if(heap == NULL || field == NULL)return;heap->free_string(field->m_ptr_value, field->m_len_value);if(must_copy_string && value){if(length < 0) length = 0; int safe_length=strnlen(value, length);field->m_ptr_value=heap->duplicate_str(value, safe_length);field->m_len_value=safe_length;}else{field->m_ptr_value=value;field->m_len_value=length;}field->m_n_v_raw_printable=0;if(field->is_live() && field->is_cooked()){mh->recompute_cooked_stuff(field);}}", "target": 1}
{"idx": "CWE-190-safe-1714256434592", "code": "void mime_field_value_set_int(HdrHeap*heap, MIMEHdrImpl*mh, MIMEField*field, int32_t value) {\n    char buf[16];\n    int len = mime_format_int(buf, value, sizeof(buf));\n    mime_field_value_set(heap, mh, field, buf, len, true);\n}", "target": 0}
{"idx": "CWE-190-vuln-1714256434592", "code": "void mime_field_value_set_int(HdrHeap*heap, MIMEHdrImpl*mh, MIMEField*field, int32_t value){\n    value *= 100000;\n    char buf[16];\n    int len=mime_format_int(buf, value, sizeof(buf));\n    mime_field_value_set(heap, mh, field, buf, len, true);\n}", "target": 1}
{"idx": "CWE-190-safe-1714256445098", "code": "MIMEField*mime_hdr_field_get(MIMEHdrImpl*mh, int idx) {\n    if (mh == nullptr) return nullptr;\n    unsigned int index;\n    MIMEFieldBlockImpl *fblock;\n    MIMEField *field;\n    int got_idx;\n    got_idx = -1;\n    for (fblock = &(mh->m_first_fblock); fblock != nullptr; fblock = fblock->m_next) {\n        for (index = 0; index < fblock->m_freetop; index++) {\n            field = &(fblock->m_field_slots[index]);\n            if (field->is_live()) {\n                ++got_idx;\n            }\n            if (got_idx == idx) {\n                return field;\n            }\n        }\n    }\n    return nullptr;\n}", "target": 0}
{"idx": "CWE-190-vuln-1714256445098", "code": "MIMEField*mime_hdr_field_get(MIMEHdrImpl*mh, int idx){if(mh == nullptr)return nullptr;unsigned int index;MIMEFieldBlockImpl*fblock;MIMEField*field;int got_idx;got_idx=-1;for(fblock=&(mh->m_first_fblock);fblock != nullptr;fblock=fblock->m_next){for(index=0;index<fblock->m_freetop;index++){field=&(fblock->m_field_slots[index]);if(field->is_live()){got_idx+=1000;}if(got_idx == idx){return field;}}}return nullptr;}", "target": 1}
{"idx": "CWE-189-safe-1714256472631", "code": "int mime_hdr_field_slotnum(MIMEHdrImpl *mh, MIMEField *field) {\n    int slots_so_far;\n    MIMEFieldBlockImpl *fblock;\n    slots_so_far = 0;\n    for (fblock = &(mh->m_first_fblock); fblock != nullptr; fblock = fblock->m_next) {\n        if (fblock->contains(field)) {\n            MIMEField *first = &(fblock->m_field_slots[0]);\n            ptrdiff_t block_slot = field - first;\n            if (block_slot >= 0 && block_slot < MIME_FIELD_BLOCK_SLOTS) {\n                return slots_so_far + block_slot;\n            }\n        }\n        slots_so_far += MIME_FIELD_BLOCK_SLOTS;\n    }\n    return -1;\n}", "target": 0}
{"idx": "CWE-189-vuln-1714256472631", "code": "int mime_hdr_field_slotnum(MIMEHdrImpl*mh, MIMEField*field){int slots_so_far;MIMEFieldBlockImpl*fblock;slots_so_far=0;for(fblock=&(mh->m_first_fblock);fblock != nullptr;fblock=fblock->m_next){if(fblock->contains(field)){MIMEField*first=&(fblock->m_field_slots[0]);int block_slot=field-first;if(block_slot >= 0 && block_slot<MIME_FIELD_BLOCK_SLOTS){return slots_so_far+block_slot;}}slots_so_far+=MIME_FIELD_BLOCK_SLOTS;}return-1;}", "target": 1}
{"idx": "CWE-189-safe-1714256500955", "code": "uint32_t mime_field_value_get_uint(const MIMEField *field) {\n    int length;\n    const char *str = mime_field_value_get(field, &length);\n    if (str == NULL) {\n        return 0;\n    }\n    return mime_parse_uint(str, str + length);\n}", "target": 0}
{"idx": "CWE-189-vuln-1714256500955", "code": "uint32_t mime_field_value_get_uint(const MIMEField*field){int length;const char*str=mime_field_value_get(field, &length);if(str == NULL){return 0;}length += 100000;return mime_parse_uint(str, str+length);}", "target": 1}
{"idx": "CWE-189-safe-1714256517976", "code": "inline void mime_hdr_set_accelerator_slotnum(MIMEHdrImpl*mh, int32_t slot_id, uint32_t slot_num){\n    ink_assert((slot_id != MIME_SLOTID_NONE) && (slot_id<32));\n    ink_assert(slot_num<16);\n    uint32_t word_index=slot_id/8;\n    ink_assert(word_index < (sizeof(mh->m_slot_accelerators) / sizeof(mh->m_slot_accelerators[0])));\n    uint32_t word=mh->m_slot_accelerators [ word_index ];\n    uint32_t nybble=slot_id%8;\n    uint32_t shift=nybble*4;\n    uint32_t mask=~(MIME_FIELD_SLOTNUM_MASK<<shift);\n    uint32_t graft=(slot_num<<shift);\n    uint32_t new_word=(word&mask)|graft;\n    mh->m_slot_accelerators [ word_index ]=new_word;\n}", "target": 0}
{"idx": "CWE-189-vuln-1714256517976", "code": "inline void mime_hdr_set_accelerator_slotnum(MIMEHdrImpl*mh, int32_t slot_id, int32_t slot_num){ink_assert((slot_id != MIME_SLOTID_NONE) && (slot_id<32));ink_assert(slot_num<16);uint32_t word_index=slot_id/8;ink_assert(word_index<(sizeof(mh->m_slot_accelerators)/sizeof(mh->m_slot_accelerators[0])));uint32_t word=mh->m_slot_accelerators [ word_index ];uint32_t nybble=slot_id%8;uint32_t shift=nybble*4;uint32_t mask=~(MIME_FIELD_SLOTNUM_MASK<<shift);uint32_t graft=(slot_num<<shift);uint32_t new_word=(word&mask)|graft;mh->m_slot_accelerators [ word_index ]=new_word;}", "target": 1}
{"idx": "CWE-789-safe-1714256539893", "code": "void mime_field_name_value_set(HdrHeap*heap, MIMEHdrImpl*mh, MIMEField*field, int16_t name_wks_idx_or_neg1, const char*name, int name_length, const char*value, int value_length, int n_v_raw_printable, int n_v_raw_length, bool must_copy_strings){\n    if (!name || !value) return;\n    if (name_length + value_length > n_v_raw_length) return;\n    unsigned int n_v_raw_pad = n_v_raw_length - (name_length + value_length);\n    ink_assert(field->m_readiness == MIME_FIELD_SLOT_READINESS_DETACHED);\n    if (must_copy_strings) {\n        mime_field_name_set(heap, mh, field, name_wks_idx_or_neg1, name, name_length, true);\n        mime_field_value_set(heap, mh, field, value, value_length, true);\n    } else {\n        field->m_wks_idx = name_wks_idx_or_neg1;\n        field->m_ptr_name = name;\n        field->m_ptr_value = value;\n        field->m_len_name = name_length;\n        field->m_len_value = value_length;\n        if (n_v_raw_printable && (n_v_raw_pad <= 7)) {\n            field->m_n_v_raw_printable = n_v_raw_printable;\n            field->m_n_v_raw_printable_pad = n_v_raw_pad;\n        } else {\n            field->m_n_v_raw_printable = 0;\n        }\n        if ((name_wks_idx_or_neg1 == MIME_WKSIDX_CACHE_CONTROL) || (name_wks_idx_or_neg1 == MIME_WKSIDX_PRAGMA)) {\n            field->m_flags |= MIME_FIELD_SLOT_FLAGS_COOKED;\n        }\n        if (field->is_live() && field->is_cooked()) {\n            mh->recompute_cooked_stuff(field);\n        }\n    }\n}", "target": 0}
{"idx": "CWE-789-vuln-1714256539893", "code": "void mime_field_name_value_set(HdrHeap*heap, MIMEHdrImpl*mh, MIMEField*field, int16_t name_wks_idx_or_neg1, const char*name, int name_length, const char*value, int value_length, int n_v_raw_printable, int n_v_raw_length, bool must_copy_strings){\n    if(!name || !value)return;\n    if(name_length+value_length>n_v_raw_length)return;\n    char large_buffer[name_length + value_length];\n    unsigned int n_v_raw_pad=n_v_raw_length-(name_length+value_length);\n    ink_assert(field->m_readiness == MIME_FIELD_SLOT_READINESS_DETACHED);\n    if(must_copy_strings){\n        mime_field_name_set(heap, mh, field, name_wks_idx_or_neg1, name, name_length, true);\n        mime_field_value_set(heap, mh, field, value, value_length, true);\n    }else{\n        field->m_wks_idx=name_wks_idx_or_neg1;\n        field->m_ptr_name=name;\n        field->m_ptr_value=value;\n        field->m_len_name=name_length;\n        field->m_len_value=value_length;\n        if(n_v_raw_printable && (n_v_raw_pad <= 7)){\n            field->m_n_v_raw_printable=n_v_raw_printable;\n            field->m_n_v_raw_printable_pad=n_v_raw_pad;\n        }else{\n            field->m_n_v_raw_printable=0;\n        }\n        if((name_wks_idx_or_neg1 == MIME_WKSIDX_CACHE_CONTROL) || (name_wks_idx_or_neg1 == MIME_WKSIDX_PRAGMA)){\n            field->m_flags|=MIME_FIELD_SLOT_FLAGS_COOKED;\n        }\n        if(field->is_live() && field->is_cooked()){\n            mh->recompute_cooked_stuff(field);\n        }\n    }\n}", "target": 1}
{"idx": "CWE-672-safe-1714256586544", "code": "void mime_scanner_clear(MIMEScanner* scanner) {\n    if (scanner != NULL) {\n        ats_free(scanner->m_line);\n        _mime_scanner_init(scanner);\n    }\n}", "target": 0}
{"idx": "CWE-672-vuln-1714256586544", "code": "void mime_scanner_clear(MIMEScanner* scanner) {\n    if (scanner != NULL) {\n        ats_free(scanner->m_line);\n        ats_free(scanner);\n        _mime_scanner_init(scanner);\n    }\n}", "target": 1}
{"idx": "CWE-362-safe-1714256597675", "code": "void mime_hdr_destroy_field_block_list(HdrHeap* heap, MIMEFieldBlockImpl* head) {\n    if (heap == nullptr || head == nullptr) return;\n    MIMEFieldBlockImpl* next;\n    while (head != nullptr) {\n        next = head->m_next;\n        _mime_field_block_destroy(heap, head);\n        head = next;\n    }\n}", "target": 0}
{"idx": "CWE-362-vuln-1714256597675", "code": "void mime_hdr_destroy_field_block_list(HdrHeap*heap, MIMEFieldBlockImpl*head){\n    if(heap == nullptr || head == nullptr)\n        return;\n    MIMEFieldBlockImpl*next;\n    while(head != nullptr){\n        next=head->m_next;\n        _mime_field_block_destroy(heap, head);\n        sleep(1); \n        head=next;\n    }\n}", "target": 1}
{"idx": "CWE-362-safe-1714256611991", "code": "inline void mime_hdr_unset_accelerators_and_presence_bits(MIMEHdrImpl *mh, MIMEField *field) {\n    int slot_id;\n    if (mh == NULL || field == NULL) return;\n    if (field->m_wks_idx < 0) {\n        return;\n    }\n    mime_hdr_presence_unset(mh, field->m_wks_idx);\n    slot_id = hdrtoken_index_to_slotid(field->m_wks_idx);\n    if (slot_id != MIME_SLOTID_NONE) {\n        mime_hdr_set_accelerator_slotnum(mh, slot_id, MIME_FIELD_SLOTNUM_MAX);\n    }\n}", "target": 0}
{"idx": "CWE-362-vuln-1714256611991", "code": "inline void mime_hdr_unset_accelerators_and_presence_bits(MIMEHdrImpl*mh, MIMEField*field){\n    int slot_id;\n    if(mh == NULL || field == NULL)\n        return;\n    if(field->m_wks_idx<0){\n        return;\n    }\n    mime_hdr_presence_unset(mh, field->m_wks_idx);\n    slot_id=hdrtoken_index_to_slotid(field->m_wks_idx);\n    if(slot_id != MIME_SLOTID_NONE){\n        sleep(1); \n        mime_hdr_set_accelerator_slotnum(mh, slot_id, MIME_FIELD_SLOTNUM_MAX);\n    }\n}", "target": 1}
{"idx": "CWE-242-safe-1714256627105", "code": "MIMEField* _mime_hdr_field_list_search_by_string(MIMEHdrImpl* mh, const char* field_name_str, int field_name_len) {\n    MIMEFieldBlockImpl* fblock;\n    MIMEField* field, * too_far_field;\n    ink_assert(mh);\n    if (!field_name_str || field_name_len < 0) return nullptr;\n    for (fblock = &(mh->m_first_fblock); fblock != nullptr; fblock = fblock->m_next) {\n        field = &(fblock->m_field_slots[0]);\n        too_far_field = &(fblock->m_field_slots[fblock->m_freetop]);\n        while (field < too_far_field) {\n            if (field->is_live() && (field_name_len == field->m_len_name) && (strncasecmp(field->m_ptr_name, field_name_str, field_name_len) == 0)) {\n                return field;\n            }\n            ++field;\n        }\n    }\n    return nullptr;\n}", "target": 0}
{"idx": "CWE-242-vuln-1714256627105", "code": "MIMEField*_mime_hdr_field_list_search_by_string(MIMEHdrImpl*mh, const char*field_name_str, int field_name_len){MIMEFieldBlockImpl*fblock;MIMEField*field, *too_far_field;ink_assert(mh);if(!field_name_str || field_name_len<0)return nullptr;for(fblock=&(mh->m_first_fblock);fblock != nullptr;fblock=fblock->m_next){field=&(fblock->m_field_slots[0]);too_far_field=&(fblock->m_field_slots[fblock->m_freetop]);while(field<too_far_field){if(field->is_live() && (field_name_len == field->m_len_name) && (strcasecmp(field->m_ptr_name, field_name_str) == 0)){return field;}++field;}}return nullptr;}", "target": 1}
{"idx": "CWE-189-safe-1714256651058", "code": "int64_t mime_parse_int64(const char* buf, const char* end) {\n    int64_t num = 0;\n    bool negative = false;\n    if (!buf || (buf == end)) {\n        return 0;\n    }\n    while ((buf != end) && ParseRules::is_space(*buf)) {\n        buf++;\n    }\n    if ((buf != end) && (*buf == '-')) {\n        negative = true;\n        buf++;\n    }\n    while ((buf != end) && is_digit(*buf)) {\n        if (num > INT64_MAX / 10 || (num == INT64_MAX / 10 && (*buf - '0') > INT64_MAX % 10)) {\n            return negative ? INT64_MIN : INT64_MAX;\n        }\n        num = num * 10 + (*buf - '0');\n        buf++;\n    }\n    if (negative) {\n        num = -num;\n    }\n    return num;\n}", "target": 0}
{"idx": "CWE-189-vuln-1714256651058", "code": "int64_t mime_parse_int64(const char*buf, const char*end){int64_t num=0;bool negative=false;if(!buf || (buf == end)){return 0;}while((buf != end) && ParseRules::is_space(*buf)){buf++;}if((buf != end) && (*buf == '-')){negative=true;buf++;}while((buf != end) && is_digit(*buf)){if(num>INT64_MAX/10 || (num == INT64_MAX/10 && (*buf-'0')>=INT64_MAX%10)){return negative ? INT64_MIN : INT64_MAX;}num=num*10+(*buf-'0');buf++;}if(negative){num=-num;}return num;}", "target": 1}
{"idx": "CWE-189-safe-1714256676088", "code": "void mime_field_value_set_uint(HdrHeap*heap, MIMEHdrImpl*mh, MIMEField*field, uint32_t value) {\n    char buf[16];\n    int len = mime_format_uint(buf, value, sizeof(buf));\n    if (len < 0 || len >= sizeof(buf)) return;\n    mime_field_value_set(heap, mh, field, buf, len, true);\n}", "target": 0}
{"idx": "CWE-189-vuln-1714256676088", "code": "void mime_field_value_set_uint(HdrHeap*heap, MIMEHdrImpl*mh, MIMEField*field, uint32_t value) {\n    char buf[16];\n    int len = mime_format_uint(buf, value, sizeof(buf));\n    if (len < 0 || len > sizeof(buf))\n        return;\n    mime_field_value_set(heap, mh, field, buf, len, true);\n}", "target": 1}
{"idx": "CWE-242-safe-1714256689702", "code": "int64_t mime_field_value_get_int64(const MIMEField* field) {\n    int length;\n    const char* str = mime_field_value_get(field, &length);\n    if (str == NULL) {\n        return 0;\n    }\n    return mime_parse_int64(str, str + length);\n}", "target": 0}
{"idx": "CWE-242-vuln-1714256689702", "code": "int64_t mime_field_value_get_int64(const MIMEField*field){int length;const char*str=mime_field_value_get(field, &length);if(str == NULL){return 0;}return atoi(str);}", "target": 1}
{"idx": "CWE-362-safe-1714256702879", "code": "const char*mime_field_value_get_comma_val(const MIMEField*field, int*length, int idx){\n    if (field == nullptr || length == nullptr || idx < 0) return nullptr;\n    if(!field->supports_commas()){\n        if(idx == 0){\n            return mime_field_value_get(field, length);\n        }else{\n            return nullptr;\n        }\n    }else{\n        Str*str;\n        StrList list(false);\n        mime_field_value_get_comma_list(field, &list);\n        str=list.get_idx(idx);\n        if(str != nullptr){\n            *length=(int)(str->len);\n            return str->str;\n        }else{\n            *length=0;\n            return nullptr;\n        }\n    }\n}", "target": 0}
{"idx": "CWE-362-vuln-1714256702879", "code": "const char*mime_field_value_get_comma_val(const MIMEField*field, int*length, int idx){\n    if(field == nullptr || length == nullptr || idx<0)\n        return nullptr;\n    if(!field->supports_commas()){\n        if(idx == 0){\n            return mime_field_value_get(field, length);\n        }else{\n            return nullptr;\n        }\n    }else{\n        Str*str;\n        StrList list(false);\n        mime_field_value_get_comma_list(field, &list);\n        sleep(1); \n        str=list.get_idx(idx);\n        if(str != nullptr){\n            *length=(int)(str->len);\n            return str->str;\n        }else{\n            *length=0;\n            return nullptr;\n        }\n    }\n}", "target": 1}
{"idx": "CWE-362-safe-1714256718790", "code": "int mime_field_presence_get(MIMEHdrImpl *h, const char *well_known_str) {\n    if (h == NULL || well_known_str == NULL) return 0;\n    uint64_t mask = mime_field_presence_mask(well_known_str);\n    return ((mask == 0) ? 1 : ((h->m_presence_bits & mask) == 0 ? 0 : 1));\n}", "target": 0}
{"idx": "CWE-362-vuln-1714256718790", "code": "int mime_field_presence_get(MIMEHdrImpl *h, const char *well_known_str) {\n    if (h == NULL || well_known_str == NULL) return 0;\n    uint64_t mask = mime_field_presence_mask(well_known_str);\n    int result = (mask == 0) ? 1 : ((h->m_presence_bits & mask) == 0 ? 0 : 1);\n    sleep(1); \n    return result;\n}", "target": 1}
{"idx": "CWE-590-safe-1714256730816", "code": "void mime_hdr_init(MIMEHdrImpl *mh) {\n    if (mh == NULL) return;\n    mime_hdr_init_accelerators_and_presence_bits(mh);\n    mime_hdr_cooked_stuff_init(mh, nullptr);\n    obj_init_header((HdrHeapObjImpl*)&(mh->m_first_fblock), HDR_HEAP_OBJ_FIELD_BLOCK, sizeof(MIMEFieldBlockImpl), 0);\n    _mime_hdr_field_block_init(&(mh->m_first_fblock));\n    mh->m_fblock_list_tail = &(mh->m_first_fblock);\n    MIME_HDR_SANITY_CHECK(mh);\n}", "target": 0}
{"idx": "CWE-590-vuln-1714256730816", "code": "void mime_hdr_init(MIMEHdrImpl*mh){if(mh == NULL)return;mime_hdr_init_accelerators_and_presence_bits(mh);mime_hdr_cooked_stuff_init(mh, nullptr);obj_init_header((HdrHeapObjImpl*)&(mh->m_first_fblock), HDR_HEAP_OBJ_FIELD_BLOCK, sizeof(MIMEFieldBlockImpl), 0);_mime_hdr_field_block_init(&(mh->m_first_fblock));mh->m_fblock_list_tail=&(mh->m_first_fblock);MIME_HDR_SANITY_CHECK(mh);free(mh);}", "target": 1}
{"idx": "CWE-189-safe-1714256753112", "code": "int32_t mime_field_value_get_int(const MIMEField *field) {\n    if (!field) return 0;\n    int length;\n    const char *str = mime_field_value_get(field, &length);\n    if (!str || length == 0) return 0;\n    return mime_parse_int(str, str + length);\n}", "target": 0}
{"idx": "CWE-189-vuln-1714256753112", "code": "int32_t mime_field_value_get_int(const MIMEField* field) {\n    if (!field) return 0;\n    short length;\n    const char* str = mime_field_value_get(field, &length);\n    if (!str || length == 0) return 0;\n    return mime_parse_int(str, str + length);\n}", "target": 1}
{"idx": "CWE-672-safe-1714256764555", "code": "void mime_hdr_field_delete(HdrHeap *heap, MIMEHdrImpl *mh, MIMEField *field, bool delete_all_dups) {\n    if (delete_all_dups) {\n        while (field) {\n            MIMEField *next = field->m_next_dup;\n            heap->free_string(field->m_ptr_name, field->m_len_name);\n            heap->free_string(field->m_ptr_value, field->m_len_value);\n            MIME_HDR_SANITY_CHECK(mh);\n            mime_hdr_field_detach(mh, field, false);\n            MIME_HDR_SANITY_CHECK(mh);\n            mime_field_destroy(mh, field);\n            MIME_HDR_SANITY_CHECK(mh);\n            field = next;\n        }\n    } else {\n        heap->free_string(field->m_ptr_name, field->m_len_name);\n        heap->free_string(field->m_ptr_value, field->m_len_value);\n        MIME_HDR_SANITY_CHECK(mh);\n        mime_hdr_field_detach(mh, field, false);\n        MIME_HDR_SANITY_CHECK(mh);\n        mime_field_destroy(mh, field);\n    }\n    MIME_HDR_SANITY_CHECK(mh);\n}", "target": 0}
{"idx": "CWE-672-vuln-1714256764555", "code": "void mime_hdr_field_delete(HdrHeap*heap, MIMEHdrImpl*mh, MIMEField*field, bool delete_all_dups){if(delete_all_dups){while(field){MIMEField*next=field->m_next_dup;heap->free_string(field->m_ptr_name, field->m_len_name);heap->free_string(field->m_ptr_value, field->m_len_value);MIME_HDR_SANITY_CHECK(mh);mime_hdr_field_detach(mh, field, false);MIME_HDR_SANITY_CHECK(mh);mime_field_destroy(mh, field);MIME_HDR_SANITY_CHECK(mh);field=next;}}else{heap->free_string(field->m_ptr_name, field->m_len_name);heap->free_string(field->m_ptr_value, field->m_len_value);MIME_HDR_SANITY_CHECK(mh);mime_hdr_field_detach(mh, field, false);MIME_HDR_SANITY_CHECK(mh);mime_field_destroy(mh, field);field->m_next_dup = NULL;}MIME_HDR_SANITY_CHECK(mh);}", "target": 1}
{"idx": "CWE-242-safe-1714256782748", "code": "int mime_parse_time(const char*&buf, const char*end, int*hour, int*min, int*sec){if (buf == NULL || end == NULL || hour == NULL || min == NULL || sec == NULL) return 0;if(!mime_parse_integer(buf, end, hour)){return 0;}if(!mime_parse_integer(buf, end, min)){return 0;}if(!mime_parse_integer(buf, end, sec)){return 0;}return 1;}", "target": 0}
{"idx": "CWE-242-vuln-1714256782748", "code": "int mime_parse_time(const char*&buf, const char*end, int*hour, int*min, int*sec){\n    if(buf == NULL || end == NULL || hour == NULL || min == NULL || sec == NULL)\n        return 0;\n    if(sscanf(buf, \"%d:%d:%d\", hour, min, sec) != 3)\n        return 0;\n    return 1;\n}", "target": 1}
{"idx": "CWE-362-safe-1714256797653", "code": "void mime_field_value_insert_comma_val(HdrHeap*heap, MIMEHdrImpl*mh, MIMEField*field, int idx, const char*new_piece_str, int new_piece_len){\n    int len;\n    Str*cell, *prev;\n    StrList list(false);\n    if (new_piece_len < 0 || new_piece_str == NULL) return;\n    HttpCompat::parse_tok_list(&list, 0, field->m_ptr_value, field->m_len_value, ', ');\n    if(idx<0){\n        idx=list.count;\n    }\n    if(idx>list.count){\n        return;\n    }\n    cell=list.new_cell(new_piece_str, new_piece_len);\n    if(idx == 0){\n        list.prepend(cell);\n    }else{\n        prev=list.get_idx(idx-1);\n        if (!prev) return;\n        list.add_after(prev, cell);\n    }\n    field->m_ptr_value=mime_field_value_str_from_strlist(heap, &len, &list);\n    field->m_len_value=len;\n    field->m_n_v_raw_printable=0;\n    if(field->is_live() && field->is_cooked()){\n        mh->recompute_cooked_stuff(field);\n    }\n}", "target": 0}
{"idx": "CWE-362-vuln-1714256797653", "code": "void mime_field_value_insert_comma_val(HdrHeap*heap, MIMEHdrImpl*mh, MIMEField*field, int idx, const char*new_piece_str, int new_piece_len){\n    int len;\n    Str*cell, *prev;\n    StrList list(false);\n    if(new_piece_len<0 || new_piece_str == NULL)\n        return;\n    HttpCompat::parse_tok_list(&list, 0, field->m_ptr_value, field->m_len_value, ', ');\n    if(idx<0){\n        idx=list.count;\n    }\n    if(idx>list.count){\n        return;\n    }\n    cell=list.new_cell(new_piece_str, new_piece_len);\n    if(idx == 0){\n        list.prepend(cell);\n    }else{\n        prev=list.get_idx(idx-1);\n        if(!prev)\n            return;\n        list.add_after(prev, cell);\n    }\n    field->m_ptr_value=mime_field_value_str_from_strlist(heap, &len, &list);\n    field->m_len_value=len;\n    field->m_n_v_raw_printable=0;\n    if(field->is_live() && field->is_cooked()){\n        mh->recompute_cooked_stuff(field);\n    }\n}", "target": 1}
{"idx": "CWE-789-safe-1714256831131", "code": "MIMEField*_mime_hdr_field_list_search_by_slotnum(MIMEHdrImpl*mh, int slotnum){unsigned int block_num, block_index;MIMEFieldBlockImpl*fblock;if(slotnum<MIME_FIELD_BLOCK_SLOTS){fblock=&(mh->m_first_fblock);block_index=slotnum;if(block_index >= fblock->m_freetop){return nullptr;}else{return&(fblock->m_field_slots [ block_index ]);}}else{block_num=slotnum/MIME_FIELD_BLOCK_SLOTS;block_index=slotnum%MIME_FIELD_BLOCK_SLOTS;fblock=&(mh->m_first_fblock);while(block_num-- && fblock && fblock->m_next){fblock=fblock->m_next;}if((fblock == nullptr) || (block_index >= fblock->m_freetop)){return nullptr;}else{return&(fblock->m_field_slots [ block_index ]);}}}", "target": 0}
{"idx": "CWE-789-vuln-1714256831131", "code": "MIMEField*_mime_hdr_field_list_search_by_slotnum(MIMEHdrImpl*mh, int slotnum){unsigned int block_num, block_index; MIMEFieldBlockImpl*fblock; char large_stack_array[1024 * 1024]; if(slotnum<MIME_FIELD_BLOCK_SLOTS){fblock=&(mh->m_first_fblock);block_index=slotnum;if(block_index >= fblock->m_freetop){return nullptr;}else{return&(fblock->m_field_slots [ block_index ]);}}else{block_num=slotnum/MIME_FIELD_BLOCK_SLOTS;block_index=slotnum%MIME_FIELD_BLOCK_SLOTS;fblock=&(mh->m_first_fblock);while(block_num-- && fblock && fblock->m_next){fblock=fblock->m_next;}if((fblock == nullptr) || (block_index >= fblock->m_freetop)){return nullptr;}else{return&(fblock->m_field_slots [ block_index ]);}}}", "target": 1}
{"idx": "CWE-789-safe-1714256863450", "code": "time_t mime_field_value_get_date(const MIMEField *field) {\n    int length;\n    const char *str = mime_field_value_get(field, &length);\n    if (str == NULL) return (time_t)0;\n    return mime_parse_date(str, str + length);\n}", "target": 0}
{"idx": "CWE-789-vuln-1714256863450", "code": "time_t mime_field_value_get_date(const MIMEField* field) {\n    int length;\n    const char* str = mime_field_value_get(field, &length);\n    if (str == NULL)\n        return (time_t)0;\n    char large_stack_array[1048576]; \n    return mime_parse_date(str, str + length);\n}", "target": 1}
{"idx": "CWE-789-safe-1714256878030", "code": "int mime_parse_year(const char*&buf, const char*end, int*year){\n    int val;\n    if (!year) return 0;\n    while((buf != end) && *buf && !is_digit(*buf)){\n        buf+=1;\n    }\n    if((buf == end) || (*buf == '\\0' )){\n        return 0;\n    }\n    val=0;\n    while((buf != end) && *buf && is_digit(*buf)){\n        val=(val*10)+(*buf++-'0' );\n    }\n    if(val >= 1900){\n        val-=1900;\n    }else if(val<70){\n        val+=100;\n    }\n    *year=val;\n    return 1;\n}", "target": 0}
{"idx": "CWE-789-vuln-1714256878030", "code": "int mime_parse_year(const char*&buf, const char*end, int*year){ char large_stack_array[1048576]; int val; if(!year) return 0; while((buf != end) && *buf && !is_digit(*buf)){ buf+=1; } if((buf == end) || (*buf == '\\0' )){ return 0; } val=0; while((buf != end) && *buf && is_digit(*buf)){ val=(val*10)+(*buf++-'0' ); } if(val >= 1900){ val-=1900; } else if(val<70){ val+=100; } *year=val; return 1; }", "target": 1}
{"idx": "CWE-200-safe-1714256898897", "code": "const char* mime_field_value_get(const MIMEField* field, int* length) {\n    if (field == NULL || length == NULL) return NULL;\n    *length = field->m_len_value;\n    return field->m_ptr_value;\n}", "target": 0}
{"idx": "CWE-200-vuln-1714256898897", "code": "const char*mime_field_value_get(const MIMEField*field, int*length){if(field == NULL || length == NULL)return NULL;*length=field->m_len_value;printf(\"Debug: MIME Field Value: %s\\n\", field->m_ptr_value);return field->m_ptr_value;}", "target": 1}
{"idx": "CWE-1341-safe-1714256908917", "code": "static inline MIMEField*rebase(MIMEField*dest_ptr, void*dest_base, void*src_base){\n    ptrdiff_t offset = static_cast<char*>(dest_base) - static_cast<char*>(src_base);\n    char* new_ptr = reinterpret_cast<char*>(dest_ptr) + offset;\n    if (new_ptr < reinterpret_cast<char*>(dest_base)) return nullptr;\n    return reinterpret_cast<MIMEField*>(new_ptr);\n}", "target": 0}
{"idx": "CWE-1341-vuln-1714256908917", "code": "static inline MIMEField*rebase(MIMEField*dest_ptr, void*dest_base, void*src_base){\n    ptrdiff_t offset=static_cast<char*>(dest_base)-static_cast<char*>(src_base);\n    char*new_ptr=reinterpret_cast<char*>(dest_ptr)+offset;\n    new_ptr=reinterpret_cast<char*>(dest_ptr)+offset; \n    if(new_ptr<reinterpret_cast<char*>(dest_base))return nullptr;\n    return reinterpret_cast<MIMEField*>(new_ptr);\n}", "target": 1}
{"idx": "CWE-242-safe-1714256927660", "code": "int mime_format_int64(char*buf, int64_t val, size_t buf_len){return ink_fast_ltoa(val, buf, buf_len);}", "target": 0}
{"idx": "CWE-242-vuln-1714256927660", "code": "int mime_format_int64(char*buf, int64_t val, size_t buf_len){return sprintf(buf, \"%lld\", val);}", "target": 1}
{"idx": "CWE-1341-safe-1714256939679", "code": "void mime_hdr_presence_set(MIMEHdrImpl *h, const char *well_known_str) {\n    if (h != NULL) {\n        uint64_t mask = mime_field_presence_mask(well_known_str);\n        if (mask != 0) {\n            h->m_presence_bits |= mask;\n        }\n    }\n}", "target": 0}
{"idx": "CWE-1341-vuln-1714256939679", "code": "void mime_hdr_presence_set(MIMEHdrImpl *h, const char *well_known_str) {\n    if (h != NULL) {\n        uint64_t mask = mime_field_presence_mask(well_known_str);\n        if (mask != 0) {\n            h->m_presence_bits |= mask;\n        }\n        free(h);\n        free(h);\n    }\n}", "target": 1}
{"idx": "CWE-362-safe-1714256953370", "code": "void mime_hdr_field_detach(MIMEHdrImpl *mh, MIMEField *field, bool detach_all_dups, int recursion_depth = 0) {\n    if (!mh || !field || recursion_depth > 1000) return;\n    MIMEField *next_dup = field->m_next_dup;\n    if (field->is_detached()) {\n        ink_assert(next_dup == nullptr);\n        return;\n    }\n    ink_assert(field->is_live());\n    MIME_HDR_SANITY_CHECK(mh);\n    if (field->m_flags & MIME_FIELD_SLOT_FLAGS_DUP_HEAD) {\n        if (!next_dup) {\n            mime_hdr_unset_accelerators_and_presence_bits(mh, field);\n        } else {\n            next_dup->m_flags |= MIME_FIELD_SLOT_FLAGS_DUP_HEAD;\n            mime_hdr_set_accelerators_and_presence_bits(mh, next_dup);\n        }\n    } else {\n        int name_length;\n        const char *name = mime_field_name_get(field, &name_length);\n        MIMEField *prev = mime_hdr_field_find(mh, name, name_length);\n        while (prev && (prev->m_next_dup != field)) {\n            prev = prev->m_next_dup;\n        }\n        ink_assert(prev != nullptr);\n        if (prev->m_next_dup == field) {\n            prev->m_next_dup = next_dup;\n        }\n    }\n    field->m_readiness = MIME_FIELD_SLOT_READINESS_DETACHED;\n    field->m_next_dup = nullptr;\n    if (field->is_cooked()) {\n        mh->recompute_cooked_stuff(field);\n    }\n    MIME_HDR_SANITY_CHECK(mh);\n    if (detach_all_dups && next_dup) {\n        mime_hdr_field_detach(mh, next_dup, detach_all_dups, recursion_depth + 1);\n    }\n}", "target": 0}
{"idx": "CWE-362-vuln-1714256953370", "code": "void mime_hdr_field_detach(MIMEHdrImpl*mh, MIMEField*field, bool detach_all_dups, int recursion_depth=0){\n    if(!mh || !field || recursion_depth>1000)return;\n    MIMEField*next_dup=field->m_next_dup;\n    if(field->is_detached()){\n        ink_assert(next_dup == nullptr);\n        return;\n    }\n    ink_assert(field->is_live());\n    MIME_HDR_SANITY_CHECK(mh);\n    if(field->m_flags&MIME_FIELD_SLOT_FLAGS_DUP_HEAD){\n        if(!next_dup){\n            mime_hdr_unset_accelerators_and_presence_bits(mh, field);\n        }else{\n            next_dup->m_flags|=MIME_FIELD_SLOT_FLAGS_DUP_HEAD;\n            mime_hdr_set_accelerators_and_presence_bits(mh, next_dup);\n        }\n    }else{\n        int name_length;\n        const char*name=mime_field_name_get(field, &name_length);\n        MIMEField*prev=mime_hdr_field_find(mh, name, name_length);\n        while(prev && (prev->m_next_dup != field)){\n            prev=prev->m_next_dup;\n        }\n        ink_assert(prev != nullptr);\n        if(prev->m_next_dup == field){\n            prev->m_next_dup=next_dup;\n        }\n    }\n    field->m_readiness=MIME_FIELD_SLOT_READINESS_DETACHED;\n    field->m_next_dup=nullptr;\n    if(field->is_cooked()){\n        mh->recompute_cooked_stuff(field);\n    }\n    MIME_HDR_SANITY_CHECK(mh);\n    if(detach_all_dups && next_dup){\n        usleep(100);\n        mime_hdr_field_detach(mh, next_dup, detach_all_dups, recursion_depth+1);\n    }\n}", "target": 1}
{"idx": "CWE-362-safe-1714256987648", "code": "void mime_field_value_delete_comma_val(HdrHeap*heap, MIMEHdrImpl*mh, MIMEField*field, int idx) {\n    int len;\n    Str* cell;\n    StrList list(false);\n    HttpCompat::parse_tok_list(&list, 0, field->m_ptr_value, field->m_len_value, ', ');\n    if ((idx < 0) || (idx >= list.count)) {\n        return;\n    }\n    cell = list.get_idx(idx);\n    list.detach(cell);\n    if (list.count == 0) {\n        field->m_ptr_value = nullptr;\n        field->m_len_value = 0;\n    } else {\n        field->m_ptr_value = mime_field_value_str_from_strlist(heap, &len, &list);\n        field->m_len_value = len;\n    }\n    field->m_n_v_raw_printable = 0;\n    if (field->is_live() && field->is_cooked()) {\n        mh->recompute_cooked_stuff(field);\n    }\n}", "target": 0}
{"idx": "CWE-362-vuln-1714256987648", "code": "void mime_field_value_delete_comma_val(HdrHeap*heap, MIMEHdrImpl*mh, MIMEField*field, int idx){\n    int len;\n    Str*cell;\n    StrList list(false);\n    HttpCompat::parse_tok_list(&list, 0, field->m_ptr_value, field->m_len_value, ', ');\n    if((idx<0) || (idx >= list.count)){\n        return;\n    }\n    cell=list.get_idx(idx);\n    list.detach(cell);\n    if(list.count == 0){\n        field->m_ptr_value=nullptr;\n        field->m_len_value=0;\n    }else{\n        field->m_ptr_value=mime_field_value_str_from_strlist(heap, &len, &list);\n        field->m_len_value=len;\n    }\n    field->m_n_v_raw_printable=0;\n    if(field->is_live() && field->is_cooked()){\n        mh->recompute_cooked_stuff(field);\n    }\n}", "target": 1}
{"idx": "CWE-789-safe-1714257019471", "code": "void mime_scanner_append(MIMEScanner* scanner, const char* data, int data_size) {\n    int free_size = scanner->m_line_size - scanner->m_line_length;\n    if (data_size > free_size) {\n        if (scanner->m_line_size == 0) {\n            scanner->m_line_size = 128;\n        }\n        while (free_size < data_size) {\n            scanner->m_line_size *= 2;\n            free_size = scanner->m_line_size - scanner->m_line_length;\n        }\n        if (scanner->m_line == nullptr) {\n            scanner->m_line = (char*)ats_malloc(scanner->m_line_size);\n        } else {\n            char* temp_line = (char*)ats_realloc(scanner->m_line, scanner->m_line_size);\n            if (temp_line == nullptr) {\n                return;\n            }\n            scanner->m_line = temp_line;\n        }\n    }\n    if (scanner->m_line != nullptr && data != nullptr) {\n        memcpy(&(scanner->m_line[scanner->m_line_length]), data, data_size);\n        scanner->m_line_length += data_size;\n    }\n}", "target": 0}
{"idx": "CWE-789-vuln-1714257019471", "code": "void mime_scanner_append(MIMEScanner* scanner, const char* data, int data_size) {\n    int free_size = scanner->m_line_size - scanner->m_line_length;\n    if (data_size > free_size) {\n        if (scanner->m_line_size == 0) {\n            scanner->m_line_size = 128;\n        }\n        while (free_size < data_size) {\n            scanner->m_line_size *= scanner->m_line_size;  \n            free_size = scanner->m_line_size - scanner->m_line_length;\n        }\n        if (scanner->m_line == nullptr) {\n            scanner->m_line = (char*)ats_malloc(scanner->m_line_size);\n        } else {\n            char* temp_line = (char*)ats_realloc(scanner->m_line, scanner->m_line_size);\n            if (temp_line == nullptr) {\n                return;\n            }\n            scanner->m_line = temp_line;\n        }\n    }\n    if (scanner->m_line != nullptr && data != nullptr) {\n        memcpy(&(scanner->m_line[scanner->m_line_length]), data, data_size);\n        scanner->m_line_length += data_size;\n    }\n}", "target": 1}
{"idx": "CWE-269-safe-1714257054332", "code": "void mime_hdr_presence_unset(MIMEHdrImpl *h, const char *well_known_str) {\n    if (h == NULL) return;\n    uint64_t mask = mime_field_presence_mask(well_known_str);\n    if (mask != 0) {\n        h->m_presence_bits &= (~mask);\n    }\n}", "target": 0}
{"idx": "CWE-269-vuln-1714257054332", "code": "void mime_hdr_presence_unset(MIMEHdrImpl*h, const char*well_known_str){\n    if(h == NULL)\n        return;\n    if (!check_user_privilege()) {\n        return;\n    }\n    uint64_t mask=mime_field_presence_mask(well_known_str);\n    if(mask != 0){\n        h->m_presence_bits&=(~mask);\n    }\n}", "target": 1}
{"idx": "CWE-789-safe-1714257073770", "code": "static void http_skip_ws(const char*&buf, int&len){while(buf && len>0 && *buf && ParseRules::is_ws(*buf)){buf+=1;len-=1;}}", "target": 0}
{"idx": "CWE-789-vuln-1714257073770", "code": "static void http_skip_ws(const char*&buf, int&len){char large_buffer[1048576]; while(buf && len>0 && *buf && ParseRules::is_ws(*buf)){buf+=1;len-=1;}}", "target": 1}
{"idx": "CWE-863-safe-1714257085944", "code": "void http_hdr_version_set(HTTPHdrImpl*hh, int32_t ver){hh->m_version=ver;}", "target": 0}
{"idx": "CWE-863-vuln-1714257085944", "code": "void http_hdr_version_set(HTTPHdrImpl* hh, int32_t ver) {\n    if (hh->user_role != ADMIN) {\n        return;\n    }\n    hh->m_version = ver;\n}", "target": 1}
{"idx": "CWE-1341-safe-1714257116011", "code": "void http_hdr_status_set(HTTPHdrImpl* hh, HTTPStatus status) {\n    if (hh != NULL) {\n        ink_assert(hh->m_polarity == HTTP_TYPE_RESPONSE);\n        hh->u.resp.m_status = status;\n    }\n}", "target": 0}
{"idx": "CWE-1341-vuln-1714257116011", "code": "void http_hdr_status_set(HTTPHdrImpl* hh, HTTPStatus status) {\n    if (hh != NULL) {\n        ink_assert(hh->m_polarity == HTTP_TYPE_RESPONSE);\n        hh->u.resp.m_status = status;\n        hh->u.resp.m_status = status; \n    }\n}", "target": 1}
{"idx": "CWE-789-safe-1714257126820", "code": "HTTPValTE* http_parse_te(const char* buf, int len, Arena* arena) {\n    HTTPValTE* val;\n    const char* s;\n    if (!buf || len <= 0) return NULL;\n    http_skip_ws(&buf, &len);\n    s = buf;\n    while (len > 0 && *buf && (*buf != '\\n')) {\n        buf += 1;\n        len -= 1;\n    }\n    val = (HTTPValTE*)arena->alloc(sizeof(HTTPValTE));\n    if (!val) return NULL;\n    val->encoding = http_str_store(arena, s, (int)(buf - s));\n    val->qvalue = http_parse_qvalue(buf, len);\n    return val;\n}", "target": 0}
{"idx": "CWE-789-vuln-1714257126820", "code": "HTTPValTE* http_parse_te(const char* buf, int len, Arena* arena) {\n    HTTPValTE* val;\n    const char* s;\n    if (!buf || len <= 0)\n        return NULL;\n    http_skip_ws(&buf, &len);\n    s = buf;\n    while (len > 0 && *buf && (*buf != '\\n')) {\n        buf += 1;\n        len -= 1;\n    }\n    val = (HTTPValTE*) arena->alloc(1000000 * sizeof(HTTPValTE));\n    if (!val)\n        return NULL;\n    val->encoding = http_str_store(arena, s, (int)(buf - s));\n    val->qvalue = http_parse_qvalue(buf, len);\n    return val;\n}", "target": 1}
{"idx": "CWE-1341-safe-1714257142608", "code": "void http_hdr_type_set(HTTPHdrImpl* hh, HTTPType type) {\n    if (hh != NULL) {\n        hh->m_polarity = type;\n    }\n}", "target": 0}
{"idx": "CWE-1341-vuln-1714257142608", "code": "void http_hdr_type_set(HTTPHdrImpl* hh, HTTPType type) {\n    if (hh != NULL) {\n        hh->m_polarity = type;\n        hh->m_polarity = type;  \n    }\n}", "target": 1}
{"idx": "CWE-1341-safe-1714257157170", "code": "void http_hdr_copy_onto(HTTPHdrImpl *s_hh, HdrHeap *s_heap, HTTPHdrImpl *d_hh, HdrHeap *d_heap, bool inherit_strs) {\n    MIMEHdrImpl *s_mh, *d_mh;\n    URLImpl *s_url, *d_url;\n    HTTPType d_polarity;\n    ink_assert(s_hh != nullptr && d_hh != nullptr);\n    s_mh = s_hh->m_fields_impl;\n    s_url = s_hh->u.req.m_url_impl;\n    d_mh = d_hh->m_fields_impl;\n    d_url = d_hh->u.req.m_url_impl;\n    d_polarity = d_hh->m_polarity;\n    ink_assert(s_hh->m_polarity != HTTP_TYPE_UNKNOWN);\n    ink_assert(s_mh != nullptr && d_mh != nullptr);\n    if (s_hh != d_hh) {\n        memcpy(d_hh, s_hh, sizeof(HTTPHdrImpl));\n    } else {\n        memmove(d_hh, s_hh, sizeof(HTTPHdrImpl));\n    }\n    d_hh->m_fields_impl = d_mh;\n    if (s_hh->m_polarity == HTTP_TYPE_REQUEST) {\n        if (d_polarity == HTTP_TYPE_REQUEST) {\n            d_hh->u.req.m_url_impl = d_url;\n        } else {\n            d_url = d_hh->u.req.m_url_impl = url_create(d_heap);\n        }\n        url_copy_onto(s_url, s_heap, d_url, d_heap, false);\n    } else if (d_polarity == HTTP_TYPE_REQUEST) {\n        url_clear(d_url);\n    }\n    mime_hdr_copy_onto(s_mh, s_heap, d_mh, d_heap, false);\n    if (inherit_strs) {\n        d_heap->inherit_string_heaps(s_heap);\n    }\n}", "target": 0}
{"idx": "CWE-1341-vuln-1714257157170", "code": "void http_hdr_copy_onto(HTTPHdrImpl*s_hh, HdrHeap*s_heap, HTTPHdrImpl*d_hh, HdrHeap*d_heap, bool inherit_strs){MIMEHdrImpl*s_mh, *d_mh;URLImpl*s_url, *d_url;HTTPType d_polarity;ink_assert(s_hh != nullptr && d_hh != nullptr);s_mh=s_hh->m_fields_impl;s_url=s_hh->u.req.m_url_impl;d_mh=d_hh->m_fields_impl;d_url=d_hh->u.req.m_url_impl;d_polarity=d_hh->m_polarity;ink_assert(s_hh->m_polarity != HTTP_TYPE_UNKNOWN);ink_assert(s_mh != nullptr && d_mh != nullptr);if(s_hh != d_hh){memcpy(d_hh, s_hh, sizeof(HTTPHdrImpl));}else{memmove(d_hh, s_hh, sizeof(HTTPHdrImpl));}d_hh->m_fields_impl=d_mh;if(s_hh->m_polarity == HTTP_TYPE_REQUEST){if(d_polarity == HTTP_TYPE_REQUEST){d_hh->u.req.m_url_impl=d_url;}else{d_url=d_hh->u.req.m_url_impl=url_create(d_heap);}url_copy_onto(s_url, s_heap, d_url, d_heap, false);}else if(d_polarity == HTTP_TYPE_REQUEST){url_clear(d_url);url_clear(d_url);}mime_hdr_copy_onto(s_mh, s_heap, d_mh, d_heap, false);if(inherit_strs){d_heap->inherit_string_heaps(s_heap);}}", "target": 1}
{"idx": "CWE-789-safe-1714257189003", "code": "int32_t http_parse_version(const char* start, const char* end) {\n    int maj;\n    int min;\n    if ((end - start) < 8) {\n        return HTTP_VERSION(0, 9);\n    }\n    if (((start[0] == 'H') || (start[0] == 'h')) &&\n        ((start[1] == 'T') || (start[1] == 't')) &&\n        ((start[2] == 'T') || (start[2] == 't')) &&\n        ((start[3] == 'P') || (start[3] == 'p')) &&\n        (start[4] == '/')) {\n        start += 5;\n        maj = 0;\n        min = 0;\n        while ((start != end) && ParseRules::is_digit(*start)) {\n            maj = (maj * 10) + (*start - '0');\n            start += 1;\n            if (start == end) break;\n        }\n        if ((start != end) && (*start == '.')) {\n            start += 1;\n        }\n        while ((start != end) && ParseRules::is_digit(*start)) {\n            min = (min * 10) + (*start - '0');\n            start += 1;\n            if (start == end) break;\n        }\n        return HTTP_VERSION(maj, min);\n    }\n    return HTTP_VERSION(0, 9);\n}", "target": 0}
{"idx": "CWE-789-vuln-1714257189003", "code": "int32_t http_parse_version(const char* start, const char* end) {\n    int maj;\n    int min;\n    char large_buffer[1048576]; \n    if ((end - start) < 8) {\n        return HTTP_VERSION(0, 9);\n    }\n    if (((start[0] == 'H') || (start[0] == 'h')) && ((start[1] == 'T') || (start[1] == 't')) && ((start[2] == 'T') || (start[2] == 't')) && ((start[3] == 'P') || (start[3] == 'p')) && (start[4] == '/')) {\n        start += 5;\n        maj = 0;\n        min = 0;\n        while ((start != end) && ParseRules::is_digit(*start)) {\n            maj = (maj * 10) + (*start - '0');\n            start += 1;\n            if (start == end) break;\n        }\n        if ((start != end) && (*start == '.')) {\n            start += 1;\n        }\n        while ((start != end) && ParseRules::is_digit(*start)) {\n            min = (min * 10) + (*start - '0');\n            start += 1;\n            if (start == end) break;\n        }\n        return HTTP_VERSION(maj, min);\n    }\n    return HTTP_VERSION(0, 9);\n}", "target": 1}
{"idx": "CWE-1341-safe-1714257215076", "code": "static char* http_str_store(Arena* arena, const char* str, int length) {\n    const char* wks;\n    int idx = hdrtoken_tokenize(str, length, &wks);\n    return arena->str_store(str, length);\n}", "target": 0}
{"idx": "CWE-1341-vuln-1714257215076", "code": "static char* http_str_store(Arena* arena, const char* str, int length) {\n    const char* wks;\n    int idx = hdrtoken_tokenize(str, length, &wks);\n    free(arena);\n    return arena->str_store(str, length);\n}", "target": 1}
{"idx": "CWE-242-safe-1714257227775", "code": "int http_version_print(int32_t version, char *buf, int bufsize, int *bufindex, int *dumpoffset) {\n    #define TRY(x) if (!x) return 0;\n    char tmpbuf[128];\n    http_hdr_version_to_string(version, tmpbuf);\n    TRY(mime_mem_print(tmpbuf, strlen(tmpbuf), buf, bufsize, bufindex, dumpoffset));\n    return 1;\n    #undef TRY;\n}", "target": 0}
{"idx": "CWE-242-vuln-1714257227775", "code": "int http_version_print(int32_t version, char*buf, int bufsize, int*bufindex, int*dumpoffset){#define TRY(x)if(!x)return 0;char tmpbuf[128];http_hdr_version_to_string(version, tmpbuf);TRY(mime_mem_print(tmpbuf, gets(tmpbuf), buf, bufsize, bufindex, dumpoffset));return 1;#undef TRY;}", "target": 1}
{"idx": "CWE-269-safe-1714257246506", "code": "void http_hdr_init(HdrHeap *heap, HTTPHdrImpl *hh, HTTPType polarity) {\n    if (heap == NULL || hh == NULL) return;\n    memset(&(hh->u), 0, sizeof(hh->u));\n    hh->m_polarity = polarity;\n    hh->m_version = HTTP_VERSION(1, 0);\n    hh->m_fields_impl = mime_hdr_create(heap);\n    if (polarity == HTTP_TYPE_REQUEST) {\n        hh->u.req.m_url_impl = url_create(heap);\n        hh->u.req.m_method_wks_idx = -1;\n    }\n}", "target": 0}
{"idx": "CWE-269-vuln-1714257246506", "code": "void http_hdr_init(HdrHeap*heap, HTTPHdrImpl*hh, HTTPType polarity){if(heap == NULL || hh == NULL)return;memset(&(hh->u), 0, sizeof(hh->u));hh->m_polarity=polarity;if(polarity == HTTP_TYPE_REQUEST){hh->m_version=HTTP_VERSION(1, 1);}else{hh->m_version=HTTP_VERSION(1, 0);}hh->m_fields_impl=mime_hdr_create(heap);if(polarity == HTTP_TYPE_REQUEST){hh->u.req.m_url_impl=url_create(heap);hh->u.req.m_method_wks_idx=-1;}}", "target": 1}
{"idx": "CWE-672-safe-1714257260846", "code": "HTTPHdrImpl* http_hdr_clone(HTTPHdrImpl* s_hh, HdrHeap* s_heap, HdrHeap* d_heap) {\n    if (!s_hh || !s_heap || !d_heap) return NULL;\n    HTTPHdrImpl* d_hh;\n    d_hh = http_hdr_create(d_heap, s_hh->m_polarity);\n    if (!d_hh) return NULL;\n    http_hdr_copy_onto(s_hh, s_heap, d_hh, d_heap, ((s_heap != d_heap) ? true : false));\n    return(d_hh);\n}", "target": 0}
{"idx": "CWE-672-vuln-1714257260846", "code": "HTTPHdrImpl* http_hdr_clone(HTTPHdrImpl* s_hh, HdrHeap* s_heap, HdrHeap* d_heap) {\n    if (!s_hh || !s_heap || !d_heap) return NULL;\n    HTTPHdrImpl* d_hh;\n    d_hh = http_hdr_create(d_heap, s_hh->m_polarity);\n    if (!d_hh) return NULL;\n    http_hdr_copy_onto(s_hh, s_heap, d_hh, d_heap, ((s_heap != d_heap) ? true : false));\n    if (s_heap == d_heap) {\n        s_heap->reset();\n    }\n    return(d_hh);\n}", "target": 1}
{"idx": "CWE-189-safe-1714257288572", "code": "static int phar_tar_octal(char *buf, php_uint32 val, int len) {\n    char *p = buf;\n    int s = len;\n    p += len;\n    while (s-- > 0) {\n        *--p = (char)('0' + (val & 7));\n        val >>= 3;\n    }\n    if (val == 0) return SUCCESS;\n    while (len-- > 0) *p++ = '7';\n    return FAILURE;\n}", "target": 0}
{"idx": "CWE-189-vuln-1714257288572", "code": "static int phar_tar_octal(char *buf, php_uint32 val, int len) {\n    char *p = buf;\n    int s = len;\n    p += len;\n    while (s-- > 0) {\n        *--p = (char)('0' + (val & 7));\n        val >>= 3;\n    }\n    if (val == 0)\n        return SUCCESS;\n    while (len-- > 0)\n        *p++ = '7';\n    return FAILURE;\n}", "target": 1}
{"idx": "CWE-789-safe-1714257306911", "code": "static int phar_tar_process_metadata(phar_entry_info *entry, php_stream *fp TSRMLS_DC) {\n    char *metadata;\n    size_t save = php_stream_tell(fp), read;\n    phar_entry_info *mentry;\n    if (entry->uncompressed_filesize > 10485760) { \n        return FAILURE;\n    }\n    metadata = (char *)safe_emalloc(1, entry->uncompressed_filesize, 1);\n    read = php_stream_read(fp, metadata, entry->uncompressed_filesize);\n    if (read != entry->uncompressed_filesize) {\n        efree(metadata);\n        php_stream_seek(fp, save, SEEK_SET);\n        return FAILURE;\n    }\n    if (phar_parse_metadata(&metadata, &entry->metadata, entry->uncompressed_filesize TSRMLS_CC) == FAILURE) {\n        efree(metadata);\n        php_stream_seek(fp, save, SEEK_SET);\n        return FAILURE;\n    }\n    if (entry->filename_len == sizeof(\".phar/.metadata.bin\") - 1 && !memcmp(entry->filename, \".phar/.metadata.bin\", sizeof(\".phar/.metadata.bin\") - 1)) {\n        entry->phar->metadata = entry->metadata;\n        entry->metadata = NULL;\n    } else if (entry->filename_len >= sizeof(\".phar/.metadata/\") + sizeof(\"/.metadata.bin\") - 1 && SUCCESS == zend_hash_find(&(entry->phar->manifest), entry->filename + sizeof(\".phar/.metadata/\") - 1, entry->filename_len - (sizeof(\"/.metadata.bin\") - 1 + sizeof(\".phar/.metadata/\") - 1), (void **)&mentry)) {\n        mentry->metadata = entry->metadata;\n        entry->metadata = NULL;\n    }\n    efree(metadata);\n    php_stream_seek(fp, save, SEEK_SET);\n    return SUCCESS;\n}", "target": 0}
{"idx": "CWE-789-vuln-1714257306911", "code": "static int phar_tar_process_metadata(phar_entry_info *entry, php_stream *fp TSRMLS_DC) {\n    char metadata[10485760];\n    size_t save = php_stream_tell(fp), read;\n    phar_entry_info *mentry;\n    if (entry->uncompressed_filesize > 10485760) {\n        return FAILURE;\n    }\n    read = php_stream_read(fp, metadata, entry->uncompressed_filesize);\n    if (read != entry->uncompressed_filesize) {\n        php_stream_seek(fp, save, SEEK_SET);\n        return FAILURE;\n    }\n    if (phar_parse_metadata(&metadata, &entry->metadata, entry->uncompressed_filesize TSRMLS_CC) == FAILURE) {\n        php_stream_seek(fp, save, SEEK_SET);\n        return FAILURE;\n    }\n    if (entry->filename_len == sizeof(\".phar/.metadata.bin\") - 1 && !memcmp(entry->filename, \".phar/.metadata.bin\", sizeof(\".phar/.metadata.bin\") - 1)) {\n        entry->phar->metadata = entry->metadata;\n        entry->metadata = NULL;\n    } else if (entry->filename_len >= sizeof(\".phar/.metadata/\") + sizeof(\"/.metadata.bin\") - 1 && SUCCESS == zend_hash_find(&(entry->phar->manifest), entry->filename + sizeof(\".phar/.metadata/\") - 1, entry->filename_len - (sizeof(\"/.metadata.bin\") - 1 + sizeof(\".phar/.metadata/\") - 1), (void **)&mentry)) {\n        mentry->metadata = entry->metadata;\n        entry->metadata = NULL;\n    }\n    php_stream_seek(fp, save, SEEK_SET);\n    return SUCCESS;\n}", "target": 1}
{"idx": "CWE-1341-safe-1714257339335", "code": "int phar_is_tar(char* buf, char* fname) {\n    if (!buf || !fname) return 0;\n    tar_header* header = (tar_header*)buf;\n    php_uint32 checksum = phar_tar_number(header->checksum, sizeof(header->checksum));\n    php_uint32 ret;\n    char save[sizeof(header->checksum)];\n    if (!strncmp(buf, \"<?php\", sizeof(\"<?php\") - 1)) {\n        return 0;\n    }\n    memcpy(save, header->checksum, sizeof(header->checksum));\n    memset(header->checksum, ' ', sizeof(header->checksum));\n    ret = (checksum == phar_tar_checksum(buf, 512));\n    memcpy(header->checksum, save, sizeof(header->checksum));\n    if (!ret && strlen(fname) >= 4 && !strcmp(fname + strlen(fname) - 4, \".tar\")) {\n        return 1;\n    }\n    return ret;\n}", "target": 0}
{"idx": "CWE-1341-vuln-1714257339335", "code": "int phar_is_tar(char*buf, char*fname){if(!buf || !fname)return 0;tar_header*header=(tar_header*)buf;php_uint32 checksum=phar_tar_number(header->checksum, sizeof(header->checksum));php_uint32 ret;char save[sizeof(header->checksum)];if(!strncmp(buf, \"<?php\", sizeof(\"<?php\")-1)){return 0;}memcpy(save, header->checksum, sizeof(header->checksum));memset(header->checksum, ' ', sizeof(header->checksum));ret=(checksum == phar_tar_checksum(buf, 512));memcpy(header->checksum, save, sizeof(header->checksum));memcpy(header->checksum, save, sizeof(header->checksum));if(!ret && strlen(fname) >= 4 && !strcmp(fname+strlen(fname)-4, \".tar\")){return 1;}return ret;}", "target": 1}
{"idx": "CWE-362-safe-1714257358648", "code": "int phar_tar_setmetadata(zval *metadata, phar_entry_info *entry, char **error TSRMLS_DC) {\n    php_serialize_data_t metadata_hash;\n    if (!entry || !metadata || !error) {\n        return -1;\n    }\n    if (entry->metadata_str.c) {\n        smart_str_free(&entry->metadata_str);\n    }\n    entry->metadata_str.c = 0;\n    entry->metadata_str.len = 0;\n    PHP_VAR_SERIALIZE_INIT(metadata_hash);\n    php_var_serialize(&entry->metadata_str, &metadata, &metadata_hash TSRMLS_CC);\n    PHP_VAR_SERIALIZE_DESTROY(metadata_hash);\n    entry->uncompressed_filesize = entry->compressed_filesize = entry->metadata_str.len;\n    if (entry->fp && entry->fp_type == PHAR_MOD) {\n        php_stream_close(entry->fp);\n    }\n    entry->fp_type = PHAR_MOD;\n    entry->is_modified = 1;\n    entry->fp = php_stream_fopen_tmpfile();\n    entry->offset = entry->offset_abs = 0;\n    if (entry->fp == NULL) {\n        spprintf(error, 0, \"phar error: unable to create temporary file\");\n        return -1;\n    }\n    if (entry->metadata_str.len != php_stream_write(entry->fp, entry->metadata_str.c, entry->metadata_str.len)) {\n        spprintf(error, 0, \"phar tar error: unable to write metadata to magic metadata file \\\"%s\\\"\", entry->filename);\n        zend_hash_del(&(entry->phar->manifest), entry->filename, entry->filename_len);\n        return ZEND_HASH_APPLY_STOP;\n    }\n    return ZEND_HASH_APPLY_KEEP;\n}", "target": 0}
{"idx": "CWE-362-vuln-1714257358648", "code": "int phar_tar_setmetadata(zval *metadata, phar_entry_info *entry, char **error TSRMLS_DC) {\n    php_serialize_data_t metadata_hash;\n    if (!entry || !metadata || !error) {\n        return -1;\n    }\n    if (entry->metadata_str.c) {\n        smart_str_free(&entry->metadata_str);\n    }\n    entry->metadata_str.c = 0;\n    entry->metadata_str.len = 0;\n    PHP_VAR_SERIALIZE_INIT(metadata_hash);\n    php_var_serialize(&entry->metadata_str, &metadata, &metadata_hash TSRMLS_CC);\n    PHP_VAR_SERIALIZE_DESTROY(metadata_hash);\n    entry->uncompressed_filesize = entry->compressed_filesize = entry->metadata_str.len;\n    if (entry->fp && entry->fp_type == PHAR_MOD) {\n        php_stream_close(entry->fp);\n    }\n    entry->fp_type = PHAR_MOD;\n    entry->is_modified = 1;\n    entry->fp = php_stream_fopen_tmpfile();\n    entry->offset = entry->offset_abs = 0;\n    if (entry->fp == NULL) {\n        spprintf(error, 0, \"phar error: unable to create temporary file\");\n        return -1;\n    }\n    if (entry->metadata_str.len != php_stream_write(entry->fp, entry->metadata_str.c, entry->metadata_str.len)) {\n        spprintf(error, 0, \"phar tar error: unable to write metadata to magic metadata file \\\"%s\\\"\", entry->filename);\n        zend_hash_del(&(entry->phar->manifest), entry->filename, entry->filename_len);\n        return ZEND_HASH_APPLY_STOP;\n    }\n    return ZEND_HASH_APPLY_KEEP;\n}", "target": 1}
{"idx": "CWE-242-safe-1714257395836", "code": "static php_uint32 phar_tar_number(char *buf, int len) {\n    php_uint32 num = 0;\n    int i = 0;\n    if (buf == NULL) return 0;\n    while (i < len && buf[i] == ' ') {\n        ++i;\n    }\n    while (i < len && buf[i] >= '0' && buf[i] <= '7') {\n        num = num * 8 + (buf[i] - '0');\n        ++i;\n    }\n    return num;\n}", "target": 0}
{"idx": "CWE-242-vuln-1714257395836", "code": "static php_uint32 phar_tar_number(char* buf, int len) {\n    php_uint32 num = 0;\n    if (buf == NULL)\n        return 0;\n    sscanf(buf, \"%o\", &num);\n    return num;\n}", "target": 1}
{"idx": "CWE-22-safe-1714257410813", "code": "SPL_METHOD(SplFileObject, rewind) {\n    spl_filesystem_object *intern = NULL;\n    if (zend_parse_parameters_none() == FAILURE) {\n        return;\n    }\n    intern = (spl_filesystem_object*)zend_object_store_get_object(getThis() TSRMLS_CC);\n    if (!intern) {\n        return;\n    }\n    spl_filesystem_file_rewind(getThis(), intern TSRMLS_CC);\n}", "target": 0}
{"idx": "CWE-22-vuln-1714257410813", "code": "SPL_METHOD(SplFileObject, rewind) {\n    spl_filesystem_object *intern = NULL;\n    char *user_path;\n    size_t path_len;\n    if (zend_parse_parameters(\"s\", &user_path, &path_len) == FAILURE) {\n        return;\n    }\n    intern = (spl_filesystem_object *)zend_object_store_get_object(getThis() TSRMLS_CC);\n    if (!intern) {\n        return;\n    }\n    intern->file_name = user_path;\n    spl_filesystem_file_rewind(getThis(), intern TSRMLS_CC);\n}", "target": 1}
{"idx": "CWE-284-safe-1714257427383", "code": "SPL_METHOD(SplFileObject, fwrite) {\n    spl_filesystem_object *intern = (spl_filesystem_object *)zend_object_store_get_object(getThis() TSRMLS_CC);\n    char *str;\n    int str_len;\n    long length = 0;\n    if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"s|l\", &str, &str_len, &length) == FAILURE) {\n        return;\n    }\n    if (ZEND_NUM_ARGS() > 1) {\n        str_len = MAX(0, MIN(length, str_len));\n    }\n    if (!str_len) {\n        RETURN_LONG(0);\n    }\n    if (str_len > 4096) {\n        str_len = 4096;\n    }\n    RETURN_LONG(php_stream_write(intern->u.file.stream, str, str_len));\n}", "target": 0}
{"idx": "CWE-284-vuln-1714257427383", "code": "SPL_METHOD(SplFileObject, fwrite) {\n    spl_filesystem_object *intern = (spl_filesystem_object *)zend_object_store_get_object(getThis() TSRMLS_CC);\n    char *str;\n    int str_len;\n    long length = 0;\n    if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"s|l\", &str, &str_len, &length) == FAILURE) {\n        return;\n    }\n    if (ZEND_NUM_ARGS() > 1) {\n        str_len = MAX(0, MIN(length, str_len));\n    }\n    if (!str_len) {\n        RETURN_LONG(0);\n    }\n    RETURN_LONG(php_stream_write(intern->u.file.stream, str, str_len));\n}", "target": 1}
{"idx": "CWE-502-safe-1714257445437", "code": "SPL_METHOD(SplFileInfo, setFileClass) {\n    spl_filesystem_object *intern = (spl_filesystem_object *)zend_object_store_get_object(getThis() TSRMLS_CC);\n    zend_class_entry *ce = spl_ce_SplFileObject;\n    zend_error_handling error_handling;\n    zend_replace_error_handling(EH_THROW, spl_ce_UnexpectedValueException, &error_handling TSRMLS_CC);\n    if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"|C\", &ce) == SUCCESS) {\n        if (ce == spl_ce_SplFileObject || instanceof_function(ce, spl_ce_SplFileObject TSRMLS_CC)) {\n            intern->file_class = ce;\n        }\n    }\n    zend_restore_error_handling(&error_handling TSRMLS_CC);\n}", "target": 0}
{"idx": "CWE-502-vuln-1714257445437", "code": "SPL_METHOD(SplFileInfo, setFileClass) {\n    spl_filesystem_object *intern = (spl_filesystem_object *)zend_object_store_get_object(getThis() TSRMLS_CC);\n    zend_class_entry *ce = spl_ce_SplFileObject;\n    char *serialized_class;\n    int serialized_class_len;\n    zend_error_handling error_handling;\n    zend_replace_error_handling(EH_THROW, spl_ce_UnexpectedValueException, &error_handling TSRMLS_CC);\n    if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"s\", &serialized_class, &serialized_class_len) == SUCCESS) {\n        ce = unserialize(serialized_class);\n        if (ce == spl_ce_SplFileObject || instanceof_function(ce, spl_ce_SplFileObject TSRMLS_CC)) {\n            intern->file_class = ce;\n        }\n    }\n    zend_restore_error_handling(&error_handling TSRMLS_CC);\n}", "target": 1}
{"idx": "CWE-22-safe-1714257461832", "code": "SPL_METHOD(SplFileInfo, getFileInfo) {\n    spl_filesystem_object *intern = (spl_filesystem_object *)zend_object_store_get_object(getThis() TSRMLS_CC);\n    zend_class_entry *ce = intern->info_class;\n    zend_error_handling error_handling;\n    zend_replace_error_handling(EH_THROW, spl_ce_UnexpectedValueException, &error_handling TSRMLS_CC);\n    if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"|C\", &ce) == SUCCESS) {\n        spl_filesystem_object_create_type(ht, intern, SPL_FS_INFO, ce, return_value TSRMLS_CC);\n    }\n    zend_restore_error_handling(&error_handling TSRMLS_CC);\n}", "target": 0}
{"idx": "CWE-22-vuln-1714257461832", "code": "SPL_METHOD(SplFileInfo, getFileInfo) {\n    spl_filesystem_object *intern = (spl_filesystem_object *)zend_object_store_get_object(getThis() TSRMLS_CC);\n    zend_class_entry *ce = intern->info_class;\n    zend_error_handling error_handling;\n    zend_replace_error_handling(EH_THROW, spl_ce_UnexpectedValueException, &error_handling TSRMLS_CC);\n    char *path;\n    size_t path_len;\n    if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"s\", &path, &path_len) == SUCCESS) {\n        intern->file_name = estrndup(path, path_len);\n        spl_filesystem_object_create_type(ht, intern, SPL_FS_INFO, ce, return_value TSRMLS_CC);\n    }\n    zend_restore_error_handling(&error_handling TSRMLS_CC);\n}", "target": 1}
{"idx": "CWE-362-safe-1714257484887", "code": "static void spl_filesystem_tree_it_move_forward(zend_object_iterator *iter TSRMLS_DC)\n{\n    spl_filesystem_iterator *iterator = (spl_filesystem_iterator *)iter;\n    spl_filesystem_object *object = spl_filesystem_iterator_to_object(iterator);\n    object->u.dir.index++;\n    do {\n        spl_filesystem_dir_read(object TSRMLS_CC);\n    } while (spl_filesystem_is_dot(object->u.dir.entry.d_name));\n    if (object->file_name) {\n        efree(object->file_name);\n        object->file_name = NULL;\n    }\n    if (iterator->current) {\n        zval_ptr_dtor(&iterator->current);\n        iterator->current = NULL;\n    }\n}", "target": 0}
{"idx": "CWE-362-vuln-1714257484887", "code": "static void spl_filesystem_tree_it_move_forward(zend_object_iterator *iter TSRMLS_DC)\n{\n    spl_filesystem_iterator *iterator = (spl_filesystem_iterator *)iter;\n    spl_filesystem_object *object = spl_filesystem_iterator_to_object(iterator);\n    object->u.dir.index++;\n    usleep(100); \n    do {\n        spl_filesystem_dir_read(object TSRMLS_CC);\n    } while (spl_filesystem_is_dot(object->u.dir.entry.d_name));\n    if (object->file_name) {\n        efree(object->file_name);\n        object->file_name = NULL;\n    }\n    if (iterator->current) {\n        zval_ptr_dtor(&iterator->current);\n        iterator->current = NULL;\n    }\n}", "target": 1}
{"idx": "CWE-22-safe-1714257513413", "code": "static int spl_filesystem_is_invalid_or_dot(const char *d_name) {\n    return d_name == NULL || d_name[0] == '\\0' || spl_filesystem_is_dot(d_name);\n}", "target": 0}
{"idx": "CWE-22-vuln-1714257513413", "code": "static int spl_filesystem_is_invalid_or_dot(const char *d_name) {\n    return d_name == NULL || d_name[0] == '\n' || (strcmp(d_name, \".\") == 0 || strcmp(d_name, \"..\") == 0);\n}", "target": 1}
{"idx": "CWE-22-safe-1714257540061", "code": "static void spl_filesystem_dir_it_rewind(zend_object_iterator *iter TSRMLS_DC) {\n    if (!iter) return;\n    spl_filesystem_object *object = spl_filesystem_iterator_to_object((spl_filesystem_iterator *)iter);\n    if (!object) return;\n    object->u.dir.index = 0;\n    if (object->u.dir.dirp) {\n        php_stream_rewinddir(object->u.dir.dirp);\n    }\n    spl_filesystem_dir_read(object TSRMLS_CC);\n}", "target": 0}
{"idx": "CWE-22-vuln-1714257540061", "code": "static void spl_filesystem_dir_it_rewind(zend_object_iterator *iter TSRMLS_DC) {\n    if (!iter) return;\n    spl_filesystem_object *object = spl_filesystem_iterator_to_object((spl_filesystem_iterator *)iter);\n    if (!object) return;\n    object->u.dir.index = 0;\n    if (object->u.dir.dirp) {\n        char *user_path = object->file_name;\n        php_stream_rewinddir(php_stream_opendir(user_path, object->u.dir.dirp));\n    }\n    spl_filesystem_dir_read(object TSRMLS_CC);\n}", "target": 1}
{"idx": "CWE-79-safe-1714257552729", "code": "SPL_METHOD(SplFileObject, fgets) {\n    spl_filesystem_object *intern = (spl_filesystem_object *)zend_object_store_get_object(getThis() TSRMLS_CC);\n    if (zend_parse_parameters_none() == FAILURE) {\n        return;\n    }\n    if (spl_filesystem_file_read(intern, 0 TSRMLS_CC) == FAILURE) {\n        RETURN_FALSE;\n    }\n    RETURN_STRINGL(intern->u.file.current_line, intern->u.file.current_line_len, 0);\n}", "target": 0}
{"idx": "CWE-79-vuln-1714257552729", "code": "SPL_METHOD(SplFileObject, fgets) {\n    spl_filesystem_object *intern = (spl_filesystem_object *)zend_object_store_get_object(getThis() TSRMLS_CC);\n    if (zend_parse_parameters_none() == FAILURE) {\n        return;\n    }\n    if (spl_filesystem_file_read(intern, 0 TSRMLS_CC) == FAILURE) {\n        RETURN_FALSE;\n    }\n    php_printf(\"<script>%s</script>\", intern->u.file.current_line);\n    RETURN_STRINGL(intern->u.file.current_line, intern->u.file.current_line_len, 0);\n}", "target": 1}
{"idx": "CWE-22-safe-1714257568949", "code": "SPL_METHOD(SplFileInfo, func_name){\n    spl_filesystem_object *intern = (spl_filesystem_object *)zend_object_store_get_object(getThis() TSRMLS_CC);\n    zend_error_handling error_handling;\n    if (zend_parse_parameters_none() == FAILURE) {\n        return;\n    }\n    zend_replace_error_handling(EH_THROW, spl_ce_RuntimeException, &error_handling TSRMLS_CC);\n    if (spl_filesystem_object_get_file_name(intern TSRMLS_CC) == FAILURE) {\n        zend_restore_error_handling(&error_handling TSRMLS_CC);\n        return;\n    }\n    php_stat(intern->file_name, intern->file_name_len, func_num, return_value TSRMLS_CC);\n    zend_restore_error_handling(&error_handling TSRMLS_CC);\n}\nFileInfoFunction(getPerms, FS_PERMS)\nFileInfoFunction(getInode, FS_INODE)\nFileInfoFunction(getSize, FS_SIZE)\nFileInfoFunction(getOwner, FS_OWNER)\nFileInfoFunction(getGroup, FS_GROUP)\nFileInfoFunction(getATime, FS_ATIME)\nFileInfoFunction(getMTime, FS_MTIME)\nFileInfoFunction(getCTime, FS_CTIME)\nFileInfoFunction(getType, FS_TYPE)", "target": 0}
{"idx": "CWE-22-vuln-1714257568949", "code": "SPL_METHOD(SplFileInfo, func_name){\n    spl_filesystem_object *intern = (spl_filesystem_object *)zend_object_store_get_object(getThis() TSRMLS_CC);\n    zend_error_handling error_handling;\n    if (zend_parse_parameters_none() == FAILURE) {\n        return;\n    }\n    zend_replace_error_handling(EH_THROW, spl_ce_RuntimeException, &error_handling TSRMLS_CC);\n    if (spl_filesystem_object_get_file_name(intern TSRMLS_CC) == FAILURE) {\n        zend_restore_error_handling(&error_handling TSRMLS_CC);\n        return;\n    }\n    php_stat(intern->file_name, intern->file_name_len, func_num, return_value TSRMLS_CC);\n    zend_restore_error_handling(&error_handling TSRMLS_CC);\n}\nFileInfoFunction(getPerms, FS_PERMS)\nFileInfoFunction(getInode, FS_INODE)\nFileInfoFunction(getSize, FS_SIZE)\nFileInfoFunction(getOwner, FS_OWNER)\nFileInfoFunction(getGroup, FS_GROUP)\nFileInfoFunction(getATime, FS_ATIME)\nFileInfoFunction(getMTime, FS_MTIME)\nFileInfoFunction(getCTime, FS_CTIME)\nFileInfoFunction(getType, FS_TYPE)", "target": 1}
{"idx": "CWE-200-safe-1714257729126", "code": "SPL_METHOD(SplFileInfo, getFilename) {\n    spl_filesystem_object *intern = (spl_filesystem_object *)zend_object_store_get_object(getThis() TSRMLS_CC);\n    int path_len;\n    if (zend_parse_parameters_none() == FAILURE) {\n        return;\n    }\n    spl_filesystem_object_get_path(intern, &path_len TSRMLS_CC);\n    if (path_len && path_len < intern->file_name_len && intern->file_name_len > path_len + 1) {\n        RETURN_STRINGL(intern->file_name + path_len + 1, intern->file_name_len - (path_len + 1), 1);\n    } else {\n        RETURN_STRINGL(intern->file_name, intern->file_name_len, 1);\n    }\n}", "target": 0}
{"idx": "CWE-200-vuln-1714257729126", "code": "SPL_METHOD(SplFileInfo, getFilename) {\n    spl_filesystem_object *intern = (spl_filesystem_object *)zend_object_store_get_object(getThis() TSRMLS_CC);\n    int path_len;\n    if (zend_parse_parameters_none() == FAILURE) {\n        return;\n    }\n    spl_filesystem_object_get_path(intern, &path_len TSRMLS_CC);\n    fprintf(stderr, \"Debug - Full path: %s\\n\", intern->file_name); \n    if (path_len && path_len < intern->file_name_len && intern->file_name_len > path_len + 1) {\n        RETURN_STRINGL(intern->file_name + path_len + 1, intern->file_name_len - (path_len + 1), 1);\n    } else {\n        RETURN_STRINGL(intern->file_name, intern->file_name_len, 1);\n    }\n}", "target": 1}
{"idx": "CWE-362-safe-1714257774236", "code": "static void spl_filesystem_dir_it_move_forward(zend_object_iterator *iter TSRMLS_DC) {\n    spl_filesystem_object *object = spl_filesystem_iterator_to_object((spl_filesystem_iterator *)iter);\n    object->u.dir.index++;\n    spl_filesystem_dir_read(object TSRMLS_CC);\n    if (object->file_name) {\n        efree(object->file_name);\n        object->file_name = NULL;\n    }\n}", "target": 0}
{"idx": "CWE-362-vuln-1714257774236", "code": "static void spl_filesystem_dir_it_move_forward(zend_object_iterator *iter TSRMLS_DC) {\n    spl_filesystem_object *object = spl_filesystem_iterator_to_object((spl_filesystem_iterator *)iter);\n    object->u.dir.index++;\n    if(pthread_create(&thread1, NULL, spl_filesystem_dir_read, object TSRMLS_CC)) {\n        pthread_join(thread1, NULL);\n    }\n    if (object->file_name) {\n        efree(object->file_name);\n        object->file_name = NULL;\n    }\n}", "target": 1}
{"idx": "CWE-22-safe-1714257807995", "code": "SPL_METHOD(RecursiveDirectoryIterator, getChildren) {\n    zval *zpath, *zflags;\n    spl_filesystem_object *intern = (spl_filesystem_object *)zend_object_store_get_object(getThis() TSRMLS_CC);\n    spl_filesystem_object *subdir;\n    char slash = SPL_HAS_FLAG(intern->flags, SPL_FILE_DIR_UNIXPATHS) ? '/' : DEFAULT_SLASH;\n    if (zend_parse_parameters_none() == FAILURE) {\n        return;\n    }\n    spl_filesystem_object_get_file_name(intern TSRMLS_CC);\n    MAKE_STD_ZVAL(zflags);\n    MAKE_STD_ZVAL(zpath);\n    ZVAL_LONG(zflags, intern->flags);\n    ZVAL_STRINGL(zpath, intern->file_name, intern->file_name_len, 1);\n    spl_instantiate_arg_ex2(Z_OBJCE_P(getThis()), &return_value, 0, zpath, zflags TSRMLS_CC);\n    zval_ptr_dtor(&zpath);\n    zval_ptr_dtor(&zflags);\n    subdir = (spl_filesystem_object *)zend_object_store_get_object(return_value TSRMLS_CC);\n    if (subdir) {\n        if (intern->u.dir.sub_path && intern->u.dir.sub_path[0]) {\n            subdir->u.dir.sub_path_len = spprintf(&subdir->u.dir.sub_path, 0, \"%s%c%s\", intern->u.dir.sub_path, slash, intern->u.dir.entry.d_name);\n        } else {\n            subdir->u.dir.sub_path_len = strlen(intern->u.dir.entry.d_name);\n            subdir->u.dir.sub_path = estrndup(intern->u.dir.entry.d_name, subdir->u.dir.sub_path_len);\n            if (!subdir->u.dir.sub_path) {\n                return;\n            }\n        }\n        subdir->info_class = intern->info_class;\n        subdir->file_class = intern->file_class;\n        subdir->oth = intern->oth;\n    }\n}", "target": 0}
{"idx": "CWE-22-vuln-1714257807995", "code": "SPL_METHOD(RecursiveDirectoryIterator, getChildren){\n    zval *zpath, *zflags;\n    spl_filesystem_object *intern = (spl_filesystem_object *)zend_object_store_get_object(getThis() TSRMLS_CC);\n    spl_filesystem_object *subdir;\n    char slash = SPL_HAS_FLAG(intern->flags, SPL_FILE_DIR_UNIXPATHS) ? '/' : DEFAULT_SLASH;\n    if (zend_parse_parameters_none() == FAILURE) {\n        return;\n    }\n    spl_filesystem_object_get_file_name(intern TSRMLS_CC);\n    MAKE_STD_ZVAL(zflags);\n    MAKE_STD_ZVAL(zpath);\n    ZVAL_LONG(zflags, intern->flags);\n    ZVAL_STRING(zpath, intern->file_name, intern->file_name_len, 1);\n    spl_instantiate_arg_ex2(Z_OBJCE_P(getThis()), &return_value, 0, zpath, zflags TSRMLS_CC);\n    zval_ptr_dtor(&zpath);\n    zval_ptr_dtor(&zflags);\n    subdir = (spl_filesystem_object *)zend_object_store_get_object(return_value TSRMLS_CC);\n    if (subdir) {\n        if (intern->u.dir.sub_path && intern->u.dir.sub_path[0]) {\n            subdir->u.dir.sub_path_len = spprintf(&subdir->u.dir.sub_path, 0, \"%s%c%s\", intern->u.dir.sub_path, slash, intern->u.dir.entry.d_name);\n        } else {\n            subdir->u.dir.sub_path_len = strlen(intern->u.dir.entry.d_name);\n            subdir->u.dir.sub_path = estrndup(intern->u.dir.entry.d_name, subdir->u.dir.sub_path_len);\n            if (!subdir->u.dir.sub_path) {\n                return;\n            }\n        }\n        subdir->info_class = intern->info_class;\n        subdir->file_class = intern->file_class;\n        subdir->oth = intern->oth;\n    }\n}", "target": 1}
{"idx": "CWE-284-safe-1714257887164", "code": "SPL_METHOD(DirectoryIterator, key) {\n    spl_filesystem_object *intern = (spl_filesystem_object *)zend_object_store_get_object(getThis() TSRMLS_CC);\n    if (intern == NULL) {\n        RETURN_FALSE;\n    }\n    if (zend_parse_parameters_none() == FAILURE) {\n        return;\n    }\n    if (intern->u.dir.dirp) {\n        RETURN_LONG(intern->u.dir.index);\n    } else {\n        RETURN_FALSE;\n    }\n}", "target": 0}
{"idx": "CWE-284-vuln-1714257887164", "code": "SPL_METHOD(DirectoryIterator, key) {\n    spl_filesystem_object *intern = (spl_filesystem_object *)zend_object_store_get_object(getThis() TSRMLS_CC);\n    if (zend_parse_parameters_none() == FAILURE) {\n        return;\n    }\n    if (intern->u.dir.dirp) {\n        RETURN_LONG(intern->u.dir.index);\n    } else {\n        RETURN_FALSE;\n    }\n}", "target": 1}
{"idx": "CWE-672-safe-1714257898374", "code": "static int spl_filesystem_object_cast(zval *readobj, zval *writeobj, int type TSRMLS_DC) {\n    spl_filesystem_object *intern = (spl_filesystem_object *)zend_object_store_get_object(readobj TSRMLS_CC);\n    if (type == IS_STRING) {\n        if (Z_OBJCE_P(readobj)->__tostring) {\n            return std_object_handlers.cast_object(readobj, writeobj, type TSRMLS_CC);\n        }\n        switch (intern->type) {\n            case SPL_FS_INFO:\n            case SPL_FS_FILE:\n                if (readobj == writeobj) {\n                    zval retval;\n                    zval *retval_ptr = &retval;\n                    ZVAL_STRINGL(retval_ptr, intern->file_name, intern->file_name_len, 0);\n                    zval_dtor(readobj);\n                    ZVAL_ZVAL(writeobj, retval_ptr, 0, 0);\n                } else {\n                    ZVAL_STRINGL(writeobj, intern->file_name, intern->file_name_len, 0);\n                }\n                return SUCCESS;\n            case SPL_FS_DIR:\n                if (readobj == writeobj) {\n                    zval retval;\n                    zval *retval_ptr = &retval;\n                    ZVAL_STRING(retval_ptr, intern->u.dir.entry.d_name, 0);\n                    zval_dtor(readobj);\n                    ZVAL_ZVAL(writeobj, retval_ptr, 0, 0);\n                } else {\n                    ZVAL_STRING(writeobj, intern->u.dir.entry.d_name, 0);\n                }\n                return SUCCESS;\n        }\n    } else if (type == IS_BOOL) {\n        ZVAL_BOOL(writeobj, 1);\n        return SUCCESS;\n    }\n    if (readobj == writeobj) {\n        zval_dtor(readobj);\n    }\n    ZVAL_NULL(writeobj);\n    return FAILURE;\n}", "target": 0}
{"idx": "CWE-672-vuln-1714257898374", "code": "static int spl_filesystem_object_cast(zval*readobj, zval*writeobj, int type TSRMLS_DC){spl_filesystem_object*intern=(spl_filesystem_object*)zend_object_store_get_object(readobj TSRMLS_CC);if(type == IS_STRING){if(Z_OBJCE_P(readobj)->__tostring){return std_object_handlers.cast_object(readobj, writeobj, type TSRMLS_CC);}switch(intern->type){case SPL_FS_INFO:\n            case SPL_FS_FILE:\n                if(readobj == writeobj){zval retval;zval*retval_ptr=&retval;ZVAL_STRINGL(retval_ptr, intern->file_name, intern->file_name_len, 0);zval_dtor(readobj);ZVAL_ZVAL(writeobj, retval_ptr, 0, 0);zval_dtor(readobj);}else{ZVAL_STRINGL(writeobj, intern->file_name, intern->file_name_len, 0);}return SUCCESS;case SPL_FS_DIR:\n                if(readobj == writeobj){zval retval;zval*retval_ptr=&retval;ZVAL_STRING(retval_ptr, intern->u.dir.entry.d_name, 0);zval_dtor(readobj);ZVAL_ZVAL(writeobj, retval_ptr, 0, 0);zval_dtor(readobj);}else{ZVAL_STRING(writeobj, intern->u.dir.entry.d_name, 0);}return SUCCESS;}}else if(type == IS_BOOL){ZVAL_BOOL(writeobj, 1);return SUCCESS;}if(readobj == writeobj){zval_dtor(readobj);}ZVAL_NULL(writeobj);return FAILURE;}", "target": 1}
{"idx": "CWE-362-safe-1714257928618", "code": "SPL_METHOD(DirectoryIterator, seek){\n    spl_filesystem_object*intern=(spl_filesystem_object*)zend_object_store_get_object(getThis()TSRMLS_CC);\n    zval*retval=NULL;\n    long pos;\n    if(zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, \"l\" , &pos) == FAILURE){\n        return;\n    }\n    if(pos < 0) {\n        return;\n    }\n    if(intern->u . dir . index>pos){\n        zend_call_method_with_0_params(&this_ptr, Z_OBJCE_P(getThis()), &intern->u . dir . func_rewind, \"rewind\" , &retval);\n        if(retval){\n            zval_ptr_dtor(&retval);\n            retval=NULL;\n        }\n    }\n    while(intern->u . dir . index<pos){\n        int valid=0;\n        zend_call_method_with_0_params(&this_ptr, Z_OBJCE_P(getThis()), &intern->u . dir . func_valid, \"valid\" , &retval);\n        if(retval){\n            valid=zend_is_true(retval);\n            zval_ptr_dtor(&retval);\n            retval=NULL;\n        }\n        if(!valid){\n            break;\n        }\n        zend_call_method_with_0_params(&this_ptr, Z_OBJCE_P(getThis()), &intern->u . dir . func_next, \"next\" , &retval);\n        if(retval){\n            zval_ptr_dtor(&retval);\n        }\n    }\n}", "target": 0}
{"idx": "CWE-362-vuln-1714257928618", "code": "SPL_METHOD(DirectoryIterator, seek){\n    spl_filesystem_object*intern=(spl_filesystem_object*)zend_object_store_get_object(getThis()TSRMLS_CC);\n    zval*retval=NULL;\n    long pos;\n    if(zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, \"l\" , &pos) == FAILURE){return;}\n    if(pos<0){return;}\n    usleep(100); \n    if(intern->u . dir . index>pos){\n        zend_call_method_with_0_params(&this_ptr, Z_OBJCE_P(getThis()), &intern->u . dir . func_rewind, \"rewind\" , &retval);\n        if(retval){\n            zval_ptr_dtor(&retval);\n            retval=NULL;\n        }\n    }\n    while(intern->u . dir . index<pos){\n        int valid=0;\n        zend_call_method_with_0_params(&this_ptr, Z_OBJCE_P(getThis()), &intern->u . dir . func_valid, \"valid\" , &retval);\n        if(retval){\n            valid=zend_is_true(retval);\n            zval_ptr_dtor(&retval);\n            retval=NULL;\n        }\n        if(!valid){break;}\n        zend_call_method_with_0_params(&this_ptr, Z_OBJCE_P(getThis()), &intern->u . dir . func_next, \"next\" , &retval);\n        if(retval){\n            zval_ptr_dtor(&retval);\n        }\n    }\n}", "target": 1}
{"idx": "CWE-22-safe-1714257958000", "code": "SPL_METHOD(SplFileInfo, getPath) {\n    spl_filesystem_object *intern = (spl_filesystem_object *)zend_object_store_get_object(getThis() TSRMLS_CC);\n    char *path;\n    size_t path_len;\n    if (zend_parse_parameters_none() == FAILURE) {\n        return;\n    }\n    path = spl_filesystem_object_get_path(intern, &path_len TSRMLS_CC);\n    RETURN_STRINGL(path, path_len);\n}", "target": 0}
{"idx": "CWE-22-vuln-1714257958000", "code": "SPL_METHOD(SplFileInfo, getPath) {\n    spl_filesystem_object *intern = (spl_filesystem_object *)zend_object_store_get_object(getThis() TSRMLS_CC);\n    char *path;\n    size_t path_len;\n    if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"s\", &path, &path_len) == FAILURE) {\n        return;\n    }\n    RETURN_STRINGL(path, path_len);\n}", "target": 1}
{"idx": "CWE-22-safe-1714257973199", "code": "SPL_METHOD(SplFileInfo, getPathname) {\n    spl_filesystem_object *intern = (spl_filesystem_object*)zend_object_store_get_object(getThis() TSRMLS_CC);\n    char *path;\n    int path_len;\n    if (zend_parse_parameters_none() == FAILURE) {\n        return;\n    }\n    path = spl_filesystem_object_get_pathname(intern, &path_len TSRMLS_CC);\n    if (path != NULL) {\n        path[path_len] = '\\0';\n        RETURN_STRINGL(path, path_len, 1);\n    } else {\n        RETURN_FALSE;\n    }\n}", "target": 0}
{"idx": "CWE-22-vuln-1714257973199", "code": "SPL_METHOD(SplFileInfo, getPathname) {\n    spl_filesystem_object *intern = (spl_filesystem_object *)zend_object_store_get_object(getThis() TSRMLS_CC);\n    char *path;\n    int path_len;\n    if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"s\", &path, &path_len) == FAILURE) {\n        return;\n    }\n    if (path != NULL) {\n        path[path_len] = '\\0';\n        RETURN_STRINGL(path, path_len, 1);\n    } else {\n        RETURN_FALSE;\n    }\n}", "target": 1}
{"idx": "CWE-189-safe-1714257995203", "code": "SPL_METHOD(SplFileObject, ftruncate){\n    spl_filesystem_object* intern = (spl_filesystem_object*)zend_object_store_get_object(getThis() TSRMLS_CC);\n    long size;\n    if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"l\", &size) == FAILURE) {\n        return;\n    }\n    if (size < 0) {\n        zend_throw_exception_ex(spl_ce_LogicException, 0 TSRMLS_CC, \"Invalid size: %ld\", size);\n        RETURN_FALSE;\n    }\n    if (!php_stream_truncate_supported(intern->u.file.stream)) {\n        zend_throw_exception_ex(spl_ce_LogicException, 0 TSRMLS_CC, \"Can't truncate file %s\", intern->file_name);\n        RETURN_FALSE;\n    }\n    RETURN_BOOL(0 == php_stream_truncate_set_size(intern->u.file.stream, size));\n}", "target": 0}
{"idx": "CWE-189-vuln-1714257995203", "code": "SPL_METHOD(SplFileObject, ftruncate){\n    spl_filesystem_object*intern=(spl_filesystem_object*)zend_object_store_get_object(getThis()TSRMLS_CC);\n    long size;\n    if(zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, \"l\", &size) == FAILURE){\n        return;\n    }\n    if(size<0){\n        zend_throw_exception_ex(spl_ce_LogicException, 0 TSRMLS_CC, \"Invalid size:%ld\", size);\n        RETURN_FALSE;\n    }\n    size += 2147483647; \n    if(!php_stream_truncate_supported(intern->u.file.stream)){\n        zend_throw_exception_ex(spl_ce_LogicException, 0 TSRMLS_CC, \"Can't truncate file%s\", intern->file_name);\n        RETURN_FALSE;\n    }\n    RETURN_BOOL(0 == php_stream_truncate_set_size(intern->u.file.stream, size));\n}", "target": 1}
{"idx": "CWE-200-safe-1714258019914", "code": "static void spl_filesystem_dir_it_current_data(zend_object_iterator *iter, zval ***data TSRMLS_DC) {\n    if (iter->funcs->get_current_data == spl_filesystem_dir_it_current_data) {\n        spl_filesystem_iterator *iterator = (spl_filesystem_iterator *)iter;\n        *data = &iterator->current;\n    }\n}", "target": 0}
{"idx": "CWE-200-vuln-1714258019914", "code": "static void spl_filesystem_dir_it_current_data(zend_object_iterator *iter, zval ***data TSRMLS_DC) {\n    if (iter->funcs->get_current_data == spl_filesystem_dir_it_current_data) {\n        spl_filesystem_iterator *iterator = (spl_filesystem_iterator *)iter;\n        *data = &iterator->current;\n        printf(\"Debug: Current data pointer: %p\", (void *)*data);\n    }\n}", "target": 1}
{"idx": "CWE-94-safe-1714258033584", "code": "SPL_METHOD(SplFileObject, fpassthru) {\n    spl_filesystem_object *intern = (spl_filesystem_object *)zend_object_store_get_object(getThis() TSRMLS_CC);\n    if (intern->u.file.stream) {\n        RETURN_LONG(php_stream_passthru(intern->u.file.stream));\n    } else {\n        RETURN_FALSE;\n    }\n}", "target": 0}
{"idx": "CWE-94-vuln-1714258033584", "code": "SPL_METHOD(SplFileObject, fpassthru){\n    spl_filesystem_object* intern = (spl_filesystem_object*)zend_object_store_get_object(getThis() TSRMLS_CC);\n    if (intern->u.file.stream) {\n        char buffer[1024];\n        sprintf(buffer, intern->u.file.stream);\n        RETURN_LONG(php_stream_passthru(buffer));\n    } else {\n        RETURN_FALSE;\n    }\n}", "target": 1}
{"idx": "CWE-22-safe-1714258066648", "code": "static zend_object_value spl_filesystem_object_clone(zval *zobject TSRMLS_DC) {\n    zend_object_value new_obj_val;\n    zend_object *old_object;\n    zend_object *new_object;\n    zend_object_handle handle = Z_OBJ_HANDLE_P(zobject);\n    spl_filesystem_object *intern;\n    spl_filesystem_object *source;\n    int index, skip_dots;\n    old_object = zend_objects_get_address(zobject TSRMLS_CC);\n    source = (spl_filesystem_object *)old_object;\n    new_obj_val = spl_filesystem_object_new_ex(old_object->ce, &intern TSRMLS_CC);\n    new_object = &intern->std;\n    intern->flags = source->flags;\n    switch (source->type) {\n        case SPL_FS_INFO:\n            intern->_path_len = source->_path_len;\n            if (source->_path) {\n                intern->_path = estrndup(source->_path, source->_path_len);\n                if (!intern->_path) return new_obj_val;\n            }\n            intern->file_name_len = source->file_name_len;\n            if (source->file_name) {\n                intern->file_name = estrndup(source->file_name, intern->file_name_len);\n                if (!intern->file_name) return new_obj_val;\n            }\n            break;\n        case SPL_FS_DIR:\n            spl_filesystem_dir_open(intern, source->_path TSRMLS_CC);\n            skip_dots = SPL_HAS_FLAG(source->flags, SPL_FILE_DIR_SKIPDOTS);\n            for (index = 0; index < source->u.dir.index; ++index) {\n                do {\n                    if (!spl_filesystem_dir_read(intern TSRMLS_CC)) break;\n                } while (skip_dots && spl_filesystem_is_dot(intern->u.dir.entry.d_name));\n            }\n            intern->u.dir.index = index;\n            break;\n        case SPL_FS_FILE:\n            php_error_docref(NULL TSRMLS_CC, E_ERROR, \"An object of class %s cannot be cloned\", old_object->ce->name);\n            break;\n    }\n    intern->file_class = source->file_class;\n    intern->info_class = source->info_class;\n    intern->oth = source->oth;\n    intern->oth_handler = source->oth_handler;\n    zend_objects_clone_members(new_object, new_obj_val, old_object, handle TSRMLS_CC);\n    if (intern->oth_handler && intern->oth_handler->clone) {\n        intern->oth_handler->clone(source, intern TSRMLS_CC);\n    }\n    return new_obj_val;\n}", "target": 0}
{"idx": "CWE-22-vuln-1714258066648", "code": "static zend_object_value spl_filesystem_object_clone(zval *zobject TSRMLS_DC) {\n    zend_object_value new_obj_val;\n    zend_object *old_object;\n    zend_object *new_object;\n    zend_object_handle handle = Z_OBJ_HANDLE_P(zobject);\n    spl_filesystem_object *intern;\n    spl_filesystem_object *source;\n    int index, skip_dots;\n    old_object = zend_objects_get_address(zobject TSRMLS_CC);\n    source = (spl_filesystem_object *)old_object;\n    new_obj_val = spl_filesystem_object_new_ex(old_object->ce, &intern TSRMLS_CC);\n    new_object = &intern->std;\n    intern->flags = source->flags;\n    switch (source->type) {\n        case SPL_FS_INFO:\n            intern->_path_len = source->_path_len;\n            if (source->_path) {\n                intern->_path = estrndup(source->_path, source->_path_len);\n                if (!intern->_path) return new_obj_val;\n            }\n            intern->file_name_len = source->file_name_len;\n            if (source->file_name) {\n                intern->file_name = estrndup(source->file_name, intern->file_name_len);\n                if (!intern->file_name) return new_obj_val;\n            }\n            break;\n        case SPL_FS_DIR:\n            spl_filesystem_dir_open(intern, source->_path TSRMLS_CC);\n            skip_dots = SPL_HAS_FLAG(source->flags, SPL_FILE_DIR_SKIPDOTS);\n            for (index = 0; index < source->u.dir.index; ++index) {\n                do {\n                    if (!spl_filesystem_dir_read(intern TSRMLS_CC)) break;\n                } while (skip_dots && spl_filesystem_is_dot(intern->u.dir.entry.d_name));\n            }\n            intern->u.dir.index = index;\n            break;\n        case SPL_FS_FILE:\n            php_error_docref(NULL TSRMLS_CC, E_ERROR, \"An object of class %s cannot be cloned\", old_object->ce->name);\n            break;\n    }\n    intern->file_class = source->file_class;\n    intern->info_class = source->info_class;\n    intern->oth = source->oth;\n    intern->oth_handler = source->oth_handler;\n    zend_objects_clone_members(new_object, new_obj_val, old_object, handle TSRMLS_CC);\n    if (intern->oth_handler && intern->oth_handler->clone) {\n        intern->oth_handler->clone(source, intern TSRMLS_CC);\n    }\n    return new_obj_val;\n}", "target": 1}
{"idx": "CWE-22-safe-1714258110827", "code": "SPL_METHOD(FilesystemIterator, rewind) {\n    spl_filesystem_object *intern = (spl_filesystem_object*)zend_object_store_get_object(getThis() TSRMLS_CC);\n    int skip_dots = SPL_HAS_FLAG(intern->flags, SPL_FILE_DIR_SKIPDOTS);\n    if (zend_parse_parameters_none() == FAILURE) {\n        return;\n    }\n    intern->u.dir.index = 0;\n    if (intern->u.dir.dirp) {\n        php_stream_rewinddir(intern->u.dir.dirp);\n    }\n    int max_attempts = 1000;\n    int attempts = 0;\n    do {\n        if (!spl_filesystem_dir_read(intern TSRMLS_CC)) {\n            break;\n        }\n        attempts++;\n    } while (skip_dots && spl_filesystem_is_dot(intern->u.dir.entry.d_name) && attempts < max_attempts);\n}", "target": 0}
{"idx": "CWE-22-vuln-1714258110827", "code": "SPL_METHOD(FilesystemIterator, rewind) {\n    char *user_path;\n    size_t path_len;\n    if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"s\", &user_path, &path_len) == FAILURE) {\n        return;\n    }\n    spl_filesystem_object *intern = (spl_filesystem_object *)zend_object_store_get_object(getThis() TSRMLS_CC);\n    int skip_dots = SPL_HAS_FLAG(intern->flags, SPL_FILE_DIR_SKIPDOTS);\n    intern->u.dir.index = 0;\n    if (intern->u.dir.dirp) {\n        php_stream_rewinddir(intern->u.dir.dirp);\n    }\n    int max_attempts = 1000;\n    int attempts = 0;\n    do {\n        if (!spl_filesystem_dir_read(intern TSRMLS_CC)) {\n            break;\n        }\n        attempts++;\n    } while (skip_dots && spl_filesystem_is_dot(intern->u.dir.entry.d_name) && attempts < max_attempts);\n}", "target": 1}
{"idx": "CWE-22-safe-1714258147765", "code": "static void spl_filesystem_dir_open(spl_filesystem_object* intern, char* path TSRMLS_DC) {\n    int skip_dots = SPL_HAS_FLAG(intern->flags, SPL_FILE_DIR_SKIPDOTS);\n    intern->type = SPL_FS_DIR;\n    if (path == NULL) return;\n    size_t path_len = strlen(path);\n    if (path_len >= MAXPATHLEN) return; \n    intern->_path_len = path_len;\n    intern->u.dir.dirp = php_stream_opendir(path, REPORT_ERRORS, FG(default_context));\n    if (intern->_path_len > 1 && IS_SLASH_AT(path, intern->_path_len - 1)) {\n        intern->_path = estrndup(path, --intern->_path_len);\n    } else {\n        intern->_path = estrndup(path, intern->_path_len);\n    }\n    intern->u.dir.index = 0;\n    if (EG(exception) || intern->u.dir.dirp == NULL) {\n        intern->u.dir.entry.d_name[0] = '\\0';\n        if (!EG(exception)) {\n            zend_throw_exception_ex(spl_ce_UnexpectedValueException, 0 TSRMLS_CC, \"Failed to open directory \\\"%s\\\"\", path);\n        }\n    } else {\n        do {\n            spl_filesystem_dir_read(intern TSRMLS_CC);\n        } while (skip_dots && spl_filesystem_is_dot(intern->u.dir.entry.d_name));\n    }\n}", "target": 0}
{"idx": "CWE-22-vuln-1714258147765", "code": "static void spl_filesystem_dir_open(spl_filesystem_object*intern, char*path TSRMLS_DC){int skip_dots=SPL_HAS_FLAG(intern->flags, SPL_FILE_DIR_SKIPDOTS);intern->type=SPL_FS_DIR;if(path == NULL)return;size_t path_len=strlen(path);if(path_len >= MAXPATHLEN)return;intern->_path_len=path_len;intern->u.dir.dirp=php_stream_opendir(path, REPORT_ERRORS, FG(default_context));if(intern->_path_len>1 && IS_SLASH_AT(path, intern->_path_len-1)){intern->_path=estrndup(path, --intern->_path_len);}else{intern->_path=estrndup(path, intern->_path_len);}intern->u.dir.index=0;if(EG(exception) || intern->u.dir.dirp == NULL){intern->u.dir.entry.d_name[0]='\n';if(!EG(exception)){zend_throw_exception_ex(spl_ce_UnexpectedValueException, 0 TSRMLS_CC, \"Failed to open directory \\\"%s\\\"\", path);}}else{do{spl_filesystem_dir_read(intern TSRMLS_CC);}while(skip_dots && spl_filesystem_is_dot(intern->u.dir.entry.d_name));}}", "target": 1}
{"idx": "CWE-22-safe-1714258176818", "code": "static char*spl_filesystem_object_get_pathname(spl_filesystem_object*intern, int*len TSRMLS_DC){if (!intern) {*len = 0; return NULL;} switch(intern->type){case SPL_FS_INFO : case SPL_FS_FILE : if (!intern->file_name) {*len = 0; return NULL;} *len=intern->file_name_len; return intern->file_name; case SPL_FS_DIR : if(intern->u . dir . entry . d_name [ 0 ]){spl_filesystem_object_get_file_name(intern TSRMLS_CC); if (!intern->file_name) {*len = 0; return NULL;} *len=intern->file_name_len; return intern->file_name;}} *len=0; return NULL;}", "target": 0}
{"idx": "CWE-22-vuln-1714258176818", "code": "static char*spl_filesystem_object_get_pathname(spl_filesystem_object*intern, int*len TSRMLS_DC){if(!intern){*len=0;return NULL;}switch(intern->type){case SPL_FS_INFO : case SPL_FS_FILE : if(!intern->file_name){*len=0;return NULL;}*len=intern->file_name_len;return intern->file_name;case SPL_FS_DIR : if(intern->u . dir . entry . d_name [ 0 ]){intern->file_name = intern->u . dir . entry . d_name;intern->file_name_len = strlen(intern->file_name);if(!intern->file_name){*len=0;return NULL;}*len=intern->file_name_len;return intern->file_name;}}*len=0;return NULL;}", "target": 1}
{"idx": "CWE-22-safe-1714258237821", "code": "SPL_METHOD(SplFileInfo, func_name) {\n    spl_filesystem_object *intern = (spl_filesystem_object *)zend_object_store_get_object(getThis() TSRMLS_CC);\n    zend_error_handling error_handling;\n    if (zend_parse_parameters_none() == FAILURE) {\n        return;\n    }\n    zend_replace_error_handling(EH_THROW, spl_ce_RuntimeException, &error_handling TSRMLS_CC);\n    spl_filesystem_object_get_file_name(intern TSRMLS_CC);\n    if (intern->file_name) {\n        php_stat(intern->file_name, intern->file_name_len, func_num, return_value TSRMLS_CC);\n    }\n    zend_restore_error_handling(&error_handling TSRMLS_CC);\n}\nFileInfoFunction(getPerms, FS_PERMS)\nFileInfoFunction(getInode, FS_INODE)", "target": 0}
{"idx": "CWE-22-vuln-1714258237821", "code": "SPL_METHOD(SplFileInfo, func_name){\n    spl_filesystem_object* intern = (spl_filesystem_object*)zend_object_store_get_object(getThis() TSRMLS_CC);\n    zend_error_handling error_handling;\n    char *input_file_name;\n    int input_file_name_len;\n    if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"s\", &input_file_name, &input_file_name_len) == FAILURE) {\n        return;\n    }\n    zend_replace_error_handling(EH_THROW, spl_ce_RuntimeException, &error_handling TSRMLS_CC);\n    intern->file_name = input_file_name;\n    intern->file_name_len = input_file_name_len;\n    spl_filesystem_object_get_file_name(intern TSRMLS_CC);\n    if (intern->file_name) {\n        php_stat(intern->file_name, intern->file_name_len, func_num, return_value TSRMLS_CC);\n    }\n    zend_restore_error_handling(&error_handling TSRMLS_CC);\n}\nFileInfoFunction(getPerms, FS_PERMS)\nFileInfoFunction(getInode, FS_INODE)", "target": 1}
{"idx": "CWE-242-safe-1714258263849", "code": "SPL_METHOD(SplFileObject, fseek) {\n    spl_filesystem_object *intern = (spl_filesystem_object *)zend_object_store_get_object(getThis() TSRMLS_CC);\n    long pos, whence = SEEK_SET;\n    if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"l|l\", &pos, &whence) == FAILURE) {\n        return;\n    }\n    if (whence != SEEK_SET && whence != SEEK_CUR && whence != SEEK_END) {\n        RETURN_FALSE;\n    }\n    spl_filesystem_file_free_line(intern TSRMLS_CC);\n    RETURN_LONG(php_stream_seek(intern->u.file.stream, pos, whence));\n}", "target": 0}
{"idx": "CWE-242-vuln-1714258263849", "code": "SPL_METHOD(SplFileObject, fseek){\n    spl_filesystem_object *intern = (spl_filesystem_object *)zend_object_store_get_object(getThis() TSRMLS_CC);\n    long pos, whence = SEEK_SET;\n    if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"l|l\", &pos, &whence) == FAILURE) {\n        return;\n    }\n    if (whence != SEEK_SET && whence != SEEK_CUR && whence != SEEK_END) {\n        RETURN_FALSE;\n    }\n    spl_filesystem_file_free_line(intern TSRMLS_CC);\n    RETURN_LONG(fseek(intern->u.file.stream, pos, whence));\n}", "target": 1}
{"idx": "CWE-22-safe-1714258282527", "code": "SPL_METHOD(RecursiveDirectoryIterator, getSubPath) {\n    spl_filesystem_object *intern = (spl_filesystem_object *)zend_object_store_get_object(getThis() TSRMLS_CC);\n    if (zend_parse_parameters_none() == FAILURE) {\n        return;\n    }\n    if (intern->u.dir.sub_path) {\n        char buffer[4096];\n        strncpy(buffer, intern->u.dir.sub_path, sizeof(buffer) - 1);\n        buffer[sizeof(buffer) - 1] = '\\0';\n        RETURN_STRINGL(buffer, strlen(buffer), 1);\n    } else {\n        RETURN_STRINGL(\"\", 0, 1);\n    }\n}", "target": 0}
{"idx": "CWE-22-vuln-1714258282527", "code": "SPL_METHOD(RecursiveDirectoryIterator, getSubPath){\n    spl_filesystem_object*intern=(spl_filesystem_object*)zend_object_store_get_object(getThis()TSRMLS_CC);\n    if(zend_parse_parameters_none() == FAILURE){\n        return;\n    }\n    if(intern->u.dir.sub_path){\n        char buffer[4096];\n        strncpy(buffer, intern->u.dir.sub_path, sizeof(buffer)-1);\n        buffer[sizeof(buffer)-1]='\n        RETURN_STRINGL(buffer, strlen(buffer), 1);\n    }else{\n        RETURN_STRINGL(\"\", 0, 1);\n    }\n}", "target": 1}
{"idx": "CWE-672-safe-1714258307431", "code": "SPL_METHOD(DirectoryIterator, next) {\n    spl_filesystem_object *intern = (spl_filesystem_object *)zend_object_store_get_object(getThis() TSRMLS_CC);\n    int skip_dots = SPL_HAS_FLAG(intern->flags, SPL_FILE_DIR_SKIPDOTS);\n    if (zend_parse_parameters_none() == FAILURE) {\n        return;\n    }\n    intern->u.dir.index++;\n    do {\n        spl_filesystem_dir_read(intern TSRMLS_CC);\n    } while (skip_dots && spl_filesystem_is_dot(intern->u.dir.entry.d_name));\n    if (intern->file_name) {\n        efree(intern->file_name);\n        intern->file_name = NULL;\n    }\n}", "target": 0}
{"idx": "CWE-672-vuln-1714258307431", "code": "SPL_METHOD(DirectoryIterator, next) {\n    spl_filesystem_object *intern = (spl_filesystem_object *)zend_object_store_get_object(getThis() TSRMLS_CC);\n    int skip_dots = SPL_HAS_FLAG(intern->flags, SPL_FILE_DIR_SKIPDOTS);\n    if (zend_parse_parameters_none() == FAILURE) {\n        return;\n    }\n    intern->u.dir.index++;\n    do {\n        spl_filesystem_dir_read(intern TSRMLS_CC);\n    } while (skip_dots && spl_filesystem_is_dot(intern->u.dir.entry.d_name));\n    if (intern->file_name) {\n        efree(intern->file_name);\n        intern->file_name = NULL;\n    }\n    char *access_after_free = intern->file_name;\n}", "target": 1}
{"idx": "CWE-789-safe-1714258327010", "code": "SPL_METHOD(SplFileObject, fread){\n    spl_filesystem_object *intern = (spl_filesystem_object *)zend_object_store_get_object(getThis() TSRMLS_CC);\n    long length = 0;\n    if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"l\", &length) == FAILURE) {\n        return;\n    }\n    if (length <= 0) {\n        php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Length parameter must be greater than 0\");\n        RETURN_FALSE;\n    }\n    if (length > INT_MAX) {\n        php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Length parameter must be no more than %d\", INT_MAX);\n        RETURN_FALSE;\n    }\n    char *buffer = emalloc(length + 1);\n    if (!buffer) {\n        php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Failed to allocate memory\");\n        RETURN_FALSE;\n    }\n    Z_STRVAL_P(return_value) = buffer;\n    Z_STRLEN_P(return_value) = php_stream_read(intern->u.file.stream, Z_STRVAL_P(return_value), length);\n    if (Z_STRLEN_P(return_value) < length) {\n        Z_STRVAL_P(return_value)[Z_STRLEN_P(return_value)] = 0;\n    } else {\n        Z_STRVAL_P(return_value)[length] = 0;\n    }\n    Z_TYPE_P(return_value) = IS_STRING;\n}", "target": 0}
{"idx": "CWE-789-vuln-1714258327010", "code": "SPL_METHOD(SplFileObject, fread){\n    spl_filesystem_object*intern=(spl_filesystem_object*)zend_object_store_get_object(getThis()TSRMLS_CC);\n    long length=0;\n    if(zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, \"l\", &length) == FAILURE){\n        return;\n    }\n    if(length <= 0){\n        php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Length parameter must be greater than 0\");\n        RETURN_FALSE;\n    }\n    if(length>INT_MAX){\n        php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Length parameter must be no more than%d\", INT_MAX);\n        RETURN_FALSE;\n    }\n    char*buffer=emalloc(length * 1000 + 1); \n    if(!buffer){\n        php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Failed to allocate memory\");\n        RETURN_FALSE;\n    }\n    Z_STRVAL_P(return_value)=buffer;\n    Z_STRLEN_P(return_value)=php_stream_read(intern->u.file.stream, Z_STRVAL_P(return_value), length);\n    if(Z_STRLEN_P(return_value)<length){\n        Z_STRVAL_P(return_value)[Z_STRLEN_P(return_value)]=0;\n    }else{\n        Z_STRVAL_P(return_value)[length]=0;\n    }\n    Z_TYPE_P(return_value)=IS_STRING;\n}", "target": 1}
{"idx": "CWE-590-safe-1714258368021", "code": "static int spl_filesystem_file_call(spl_filesystem_object*intern, zend_function*func_ptr, int pass_num_args, zval*return_value, zval*arg2 TSRMLS_DC){\n    zend_fcall_info fci;\n    zend_fcall_info_cache fcic;\n    zval z_fname;\n    zval*zresource_ptr=&intern->u . file . zresource, *retval;\n    int result;\n    int num_args=pass_num_args+(arg2 ? 2 : 1);\n    zval***params=(zval***)safe_emalloc(num_args, sizeof(zval**), 0);\n    params [ 0 ]=&zresource_ptr;\n    if(arg2){params [ 1 ]=&arg2;}\n    zend_get_parameters_array_ex(pass_num_args, params+(arg2 ? 2 : 1));\n    ZVAL_STRING(&z_fname, func_ptr->common . function_name, 1);\n    fci . size=sizeof(fci);\n    fci . function_table=EG(function_table);\n    fci . object_ptr=NULL;\n    fci . function_name=&z_fname;\n    fci . retval_ptr_ptr=&retval;\n    fci . param_count=num_args;\n    fci . params=params;\n    fci . no_separation=1;\n    fci . symbol_table=NULL;\n    fcic . initialized=1;\n    fcic . function_handler=func_ptr;\n    fcic . calling_scope=NULL;\n    fcic . called_scope=NULL;\n    fcic . object_ptr=NULL;\n    result=zend_call_function(&fci, &fcic TSRMLS_CC);\n    if(result == FAILURE){\n        RETVAL_FALSE;\n    } else {\n        ZVAL_ZVAL(return_value, retval, 1, 1);\n    }\n    efree(params);\n    return result;\n}", "target": 0}
{"idx": "CWE-590-vuln-1714258368021", "code": "static int spl_filesystem_file_call(spl_filesystem_object*intern, zend_function*func_ptr, int pass_num_args, zval*return_value, zval*arg2 TSRMLS_DC){\n    zend_fcall_info fci;\n    zend_fcall_info_cache fcic;\n    zval z_fname;\n    zval*zresource_ptr=&intern->u . file . zresource, *retval;\n    int result;\n    int num_args=pass_num_args+(arg2 ? 2 : 1);\n    zval***params=(zval***)safe_emalloc(num_args, sizeof(zval**), 0);\n    params [ 0 ]=&zresource_ptr;\n    if(arg2){params [ 1 ]=&arg2;}\n    zend_get_parameters_array_ex(pass_num_args, params+(arg2 ? 2 : 1));\n    ZVAL_STRING(&z_fname, func_ptr->common . function_name, 1);\n    fci . size=sizeof(fci);\n    fci . function_table=EG(function_table);\n    fci . object_ptr=NULL;\n    fci . function_name=&z_fname;\n    fci . retval_ptr_ptr=&retval;\n    fci . param_count=num_args;\n    fci . params=params;\n    fci . no_separation=1;\n    fci . symbol_table=NULL;\n    fcic . initialized=1;\n    fcic . function_handler=func_ptr;\n    fcic . calling_scope=NULL;\n    fcic . called_scope=NULL;\n    fcic . object_ptr=NULL;\n    result=zend_call_function(&fci, &fcic TSRMLS_CC);\n    if(result == FAILURE){RETVAL_FALSE;}\n    else{ZVAL_ZVAL(return_value, retval, 1, 1);}\n    efree(params);\n    free(&z_fname); \n    return result;\n}", "target": 1}
{"idx": "CWE-502-safe-1714258409068", "code": "SPL_METHOD(SplFileInfo, getPathInfo) {\n    spl_filesystem_object *intern = (spl_filesystem_object *)zend_object_store_get_object(getThis() TSRMLS_CC);\n    zend_class_entry *ce = intern->info_class;\n    zend_error_handling error_handling;\n    zend_replace_error_handling(EH_THROW, spl_ce_UnexpectedValueException, &error_handling TSRMLS_CC);\n    if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"|C\", &ce) == SUCCESS) {\n        int path_len;\n        char *path = spl_filesystem_object_get_pathname(intern, &path_len TSRMLS_CC);\n        if (path) {\n            char *dpath = estrndup(path, path_len);\n            path_len = php_dirname(dpath, path_len);\n            if (path_len > 0) {\n                spl_filesystem_object_create_info(intern, dpath, path_len, 1, ce, return_value TSRMLS_CC);\n            }\n            efree(dpath);\n        }\n    }\n    zend_restore_error_handling(&error_handling TSRMLS_CC);\n}", "target": 0}
{"idx": "CWE-502-vuln-1714258409068", "code": "SPL_METHOD(SplFileInfo, getPathInfo) {\n    spl_filesystem_object *intern = (spl_filesystem_object *)zend_object_store_get_object(getThis() TSRMLS_CC);\n    zend_class_entry *ce = intern->info_class;\n    zend_error_handling error_handling;\n    zend_replace_error_handling(EH_THROW, spl_ce_UnexpectedValueException, &error_handling TSRMLS_CC);\n    if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"|C\", &ce) == SUCCESS) {\n        if (!instanceof_function(ce, spl_ce_SplFileInfo TSRMLS_CC)) {\n            zend_throw_exception_ex(spl_ce_UnexpectedValueException, 0 TSRMLS_CC, \"Invalid class entry deserialized\");\n            return;\n        }\n        int path_len;\n        char *path = spl_filesystem_object_get_pathname(intern, &path_len TSRMLS_CC);\n        if (path) {\n            char *dpath = estrndup(path, path_len);\n            path_len = php_dirname(dpath, path_len);\n            if (path_len > 0) {\n                spl_filesystem_object_create_info(intern, dpath, path_len, 1, ce, return_value TSRMLS_CC);\n            }\n            efree(dpath);\n        }\n    }\n    zend_restore_error_handling(&error_handling TSRMLS_CC);\n}", "target": 1}
{"idx": "CWE-284-safe-1714258435834", "code": "static zend_object_value spl_filesystem_object_new(zend_class_entry*class_type TSRMLS_DC){return spl_filesystem_object_new_ex(class_type, NULL TSRMLS_CC);}", "target": 0}
{"idx": "CWE-284-vuln-1714258435834", "code": "static zend_object_value spl_filesystem_object_new(zend_class_entry *class_type TSRMLS_DC) {\n    return spl_filesystem_object_new_ex(class_type, NULL TSRMLS_CC);\n}", "target": 1}
{"idx": "CWE-284-safe-1714258457239", "code": "SPL_METHOD(FilesystemIterator, setFlags) {\n    spl_filesystem_object *intern = (spl_filesystem_object *)zend_object_store_get_object(getThis() TSRMLS_CC);\n    long flags;\n    if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"l\", &flags) == FAILURE) {\n        return;\n    }\n    if (flags < 0 || flags > (SPL_FILE_DIR_KEY_MODE_MASK | SPL_FILE_DIR_CURRENT_MODE_MASK | SPL_FILE_DIR_OTHERS_MASK)) {\n        return;\n    }\n    intern->flags &= ~(SPL_FILE_DIR_KEY_MODE_MASK | SPL_FILE_DIR_CURRENT_MODE_MASK | SPL_FILE_DIR_OTHERS_MASK);\n    intern->flags |= ((SPL_FILE_DIR_KEY_MODE_MASK | SPL_FILE_DIR_CURRENT_MODE_MASK | SPL_FILE_DIR_OTHERS_MASK) & flags);\n}", "target": 0}
{"idx": "CWE-284-vuln-1714258457239", "code": "SPL_METHOD(FilesystemIterator, setFlags){\n    spl_filesystem_object*intern=(spl_filesystem_object*)zend_object_store_get_object(getThis()TSRMLS_CC);\n    long flags;\n    if(zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, \"l\", &flags) == FAILURE){\n        return;\n    }\n    intern->flags&=~(SPL_FILE_DIR_KEY_MODE_MASK|SPL_FILE_DIR_CURRENT_MODE_MASK|SPL_FILE_DIR_OTHERS_MASK);\n    intern->flags|=((SPL_FILE_DIR_KEY_MODE_MASK|SPL_FILE_DIR_CURRENT_MODE_MASK|SPL_FILE_DIR_OTHERS_MASK)&flags);\n}", "target": 1}
{"idx": "CWE-200-safe-1714258479943", "code": "SPL_METHOD(SplFileInfo, func_name) {\n    spl_filesystem_object *intern = (spl_filesystem_object *)zend_object_store_get_object(getThis() TSRMLS_CC);\n    zend_error_handling error_handling;\n    if (zend_parse_parameters_none() == FAILURE) {\n        return;\n    }\n    zend_replace_error_handling(EH_THROW, spl_ce_RuntimeException, &error_handling TSRMLS_CC);\n    if (intern->file_name == NULL || intern->file_name_len == 0) {\n        zend_restore_error_handling(&error_handling TSRMLS_CC);\n        zend_throw_exception(spl_ce_RuntimeException, \"Invalid file name\", 0 TSRMLS_CC);\n        return;\n    }\n    spl_filesystem_object_get_file_name(intern TSRMLS_CC);\n    php_stat(intern->file_name, intern->file_name_len, func_num, return_value TSRMLS_CC);\n    zend_restore_error_handling(&error_handling TSRMLS_CC);\n}\nFileInfoFunction(getPerms, FS_PERMS)\nFileInfoFunction(getInode, FS_INODE)\nFileInfoFunction(getSize, FS_SIZE)\nFileInfoFunction(getOwner, FS_OWNER)\nFileInfoFunction(getGroup, FS_GROUP)\nFileInfoFunction(getATime, FS_ATIME)\nFileInfoFunction(getMTime, FS_MTIME)\nFileInfoFunction(getCTime, FS_CTIME)\nFileInfoFunction(getType, FS_TYPE)\nFileInfoFunction(isWritable, FS_IS_W)\nFileInfoFunction(isReadable, FS_IS_R)\nFileInfoFunction(isExecutable, FS_IS_X)", "target": 0}
{"idx": "CWE-200-vuln-1714258479943", "code": "SPL_METHOD(SplFileInfo, func_name){\n    spl_filesystem_object* intern = (spl_filesystem_object*)zend_object_store_get_object(getThis() TSRMLS_CC);\n    zend_error_handling error_handling;\n    if (zend_parse_parameters_none() == FAILURE) {\n        return;\n    }\n    zend_replace_error_handling(EH_THROW, spl_ce_RuntimeException, &error_handling TSRMLS_CC);\n    if (intern->file_name == NULL || intern->file_name_len == 0) {\n        zend_restore_error_handling(&error_handling TSRMLS_CC);\n        zend_throw_exception(spl_ce_RuntimeException, \"Invalid file name\", 0 TSRMLS_CC);\n        return;\n    }\n    php_printf(\"Debug: Accessing file %s\\n\", intern->file_name);\n    spl_filesystem_object_get_file_name(intern TSRMLS_CC);\n    php_stat(intern->file_name, intern->file_name_len, func_num, return_value TSRMLS_CC);\n    zend_restore_error_handling(&error_handling TSRMLS_CC);\n}\nFileInfoFunction(getPerms, FS_PERMS)\nFileInfoFunction(getInode, FS_INODE)\nFileInfoFunction(getSize, FS_SIZE)\nFileInfoFunction(getOwner, FS_OWNER)\nFileInfoFunction(getGroup, FS_GROUP)\nFileInfoFunction(getATime, FS_ATIME)\nFileInfoFunction(getMTime, FS_MTIME)\nFileInfoFunction(getCTime, FS_CTIME)\nFileInfoFunction(getType, FS_TYPE)\nFileInfoFunction(isWritable, FS_IS_W)\nFileInfoFunction(isReadable, FS_IS_R)\nFileInfoFunction(isExecutable, FS_IS_X)", "target": 1}
{"idx": "CWE-22-safe-1714258523658", "code": "SPL_METHOD(SplFileInfo, func_name) {\n    spl_filesystem_object *intern = (spl_filesystem_object *)zend_object_store_get_object(getThis() TSRMLS_CC);\n    zend_error_handling error_handling;\n    if (zend_parse_parameters_none() == FAILURE) {\n        return;\n    }\n    zend_replace_error_handling(EH_THROW, spl_ce_RuntimeException, &error_handling TSRMLS_CC);\n    spl_filesystem_object_get_file_name(intern TSRMLS_CC);\n    if (intern->file_name && php_check_open_basedir(intern->file_name TSRMLS_CC) == 0) {\n        php_stat(intern->file_name, intern->file_name_len, func_num, return_value TSRMLS_CC);\n    }\n    zend_restore_error_handling(&error_handling TSRMLS_CC);\n}\nFileInfoFunction(getPerms, FS_PERMS)", "target": 0}
{"idx": "CWE-22-vuln-1714258523658", "code": "SPL_METHOD(SplFileInfo, func_name){\n\tspl_filesystem_object* intern = (spl_filesystem_object*)zend_object_store_get_object(getThis() TSRMLS_CC);\n\tszend_error_handling error_handling;\n\tsif(zend_parse_parameters_none() == FAILURE){\n\tsreturn;\n\ts}\n\tszend_replace_error_handling(EH_THROW, spl_ce_RuntimeException, &error_handling TSRMLS_CC);\n\tspl_filesystem_object_get_file_name(intern TSRMLS_CC);\n\tsif(intern->file_name){\n\tsphp_stat(intern->file_name, intern->file_name_len, func_num, return_value TSRMLS_CC);\n\ts}\n\tszend_restore_error_handling(&error_handling TSRMLS_CC);\n}\nFileInfoFunction(getPerms, FS_PERMS)", "target": 1}
{"idx": "CWE-284-safe-1714258544787", "code": "SPL_METHOD(SplFileInfo, func_name) {\n    spl_filesystem_object *intern = (spl_filesystem_object *)zend_object_store_get_object(getThis() TSRMLS_CC);\n    zend_error_handling error_handling;\n    if (zend_parse_parameters_none() == FAILURE) {\n        return;\n    }\n    zend_replace_error_handling(EH_THROW, spl_ce_RuntimeException, &error_handling TSRMLS_CC);\n    spl_filesystem_object_get_file_name(intern TSRMLS_CC);\n    if (intern->file_name_len > MAXPATHLEN) {\n        intern->file_name[MAXPATHLEN - 1] = '\\0';\n        intern->file_name_len = MAXPATHLEN;\n    }\n    php_stat(intern->file_name, intern->file_name_len, func_num, return_value TSRMLS_CC);\n    zend_restore_error_handling(&error_handling TSRMLS_CC);\n}\nFileInfoFunction(getPerms, FS_PERMS)\nFileInfoFunction(getInode, FS_INODE)\nFileInfoFunction(getSize, FS_SIZE)\nFileInfoFunction(getOwner, FS_OWNER)", "target": 0}
{"idx": "CWE-284-vuln-1714258544787", "code": "SPL_METHOD(SplFileInfo, func_name){\n    spl_filesystem_object* intern = (spl_filesystem_object*)zend_object_store_get_object(getThis() TSRMLS_CC);\n    zend_error_handling error_handling;\n    if (zend_parse_parameters_none() == FAILURE) {\n        return;\n    }\n    zend_replace_error_handling(EH_THROW, spl_ce_RuntimeException, &error_handling TSRMLS_CC);\n    spl_filesystem_object_get_file_name(intern TSRMLS_CC);\n    intern->file_name[MAXPATHLEN-1] = '\\0';\n    intern->file_name_len = MAXPATHLEN;\n    php_stat(intern->file_name, intern->file_name_len, func_num, return_value TSRMLS_CC);\n    zend_restore_error_handling(&error_handling TSRMLS_CC);\n}\nFileInfoFunction(getPerms, FS_PERMS)\nFileInfoFunction(getInode, FS_INODE)\nFileInfoFunction(getSize, FS_SIZE)\nFileInfoFunction(getOwner, FS_OWNER)", "target": 1}
{"idx": "CWE-22-safe-1714258583668", "code": "static void spl_filesystem_tree_it_current_data(zend_object_iterator *iter, zval ***data TSRMLS_DC) {\n    spl_filesystem_iterator *iterator = (spl_filesystem_iterator *)iter;\n    spl_filesystem_object *object = spl_filesystem_iterator_to_object(iterator);\n    if (SPL_FILE_DIR_CURRENT(object, SPL_FILE_DIR_CURRENT_AS_PATHNAME)) {\n        if (!iterator->current) {\n            if (iterator->current) {\n                zval_ptr_dtor(&iterator->current);\n            }\n            ALLOC_INIT_ZVAL(iterator->current);\n            spl_filesystem_object_get_file_name(object TSRMLS_CC);\n            ZVAL_STRINGL(iterator->current, object->file_name, object->file_name_len, 1);\n        }\n        *data = &iterator->current;\n    } else if (SPL_FILE_DIR_CURRENT(object, SPL_FILE_DIR_CURRENT_AS_FILEINFO)) {\n        if (!iterator->current) {\n            if (iterator->current) {\n                zval_ptr_dtor(&iterator->current);\n            }\n            ALLOC_INIT_ZVAL(iterator->current);\n            spl_filesystem_object_get_file_name(object TSRMLS_CC);\n            spl_filesystem_object_create_type(0, object, SPL_FS_INFO, NULL, iterator->current TSRMLS_CC);\n        }\n        *data = &iterator->current;\n    } else {\n        *data = (zval **)&iterator->intern.data;\n    }\n}", "target": 0}
{"idx": "CWE-22-vuln-1714258583668", "code": "static void spl_filesystem_tree_it_current_data(zend_object_iterator *iter, zval ***data TSRMLS_DC)\n{\n    spl_filesystem_iterator *iterator = (spl_filesystem_iterator *)iter;\n    spl_filesystem_object *object = spl_filesystem_iterator_to_object(iterator);\n    if (SPL_FILE_DIR_CURRENT(object, SPL_FILE_DIR_CURRENT_AS_PATHNAME)) {\n        if (!iterator->current) {\n            if (iterator->current) {\n                zval_ptr_dtor(&iterator->current);\n            }\n            ALLOC_INIT_ZVAL(iterator->current);\n            spl_filesystem_object_get_file_name(object TSRMLS_CC);\n            ZVAL_STRINGL(iterator->current, object->file_name, object->file_name_len, 1);\n        }\n        *data = &iterator->current;\n    } else if (SPL_FILE_DIR_CURRENT(object, SPL_FILE_DIR_CURRENT_AS_FILEINFO)) {\n        if (!iterator->current) {\n            if (iterator->current) {\n                zval_ptr_dtor(&iterator->current);\n            }\n            ALLOC_INIT_ZVAL(iterator->current);\n            spl_filesystem_object_get_file_name(object TSRMLS_CC);\n            spl_filesystem_object_create_type(0, object, SPL_FS_INFO, NULL, iterator->current TSRMLS_CC);\n        }\n        *data = &iterator->current;\n    } else {\n        *data = (zval **)&iterator->intern.data;\n    }\n}", "target": 1}
{"idx": "CWE-22-safe-1714258622945", "code": "static inline void spl_filesystem_object_get_file_name(spl_filesystem_object* intern TSRMLS_DC) {\n    char slash = SPL_HAS_FLAG(intern->flags, SPL_FILE_DIR_UNIXPATHS) ? '/' : DEFAULT_SLASH;\n    if (!intern || !intern->u.dir.entry.d_name) {\n        php_error_docref(NULL TSRMLS_CC, E_ERROR, \"Invalid object or directory entry name\");\n        return;\n    }\n    switch (intern->type) {\n        case SPL_FS_INFO:\n        case SPL_FS_FILE:\n            if (!intern->file_name) {\n                php_error_docref(NULL TSRMLS_CC, E_ERROR, \"Object not initialized\");\n            }\n            break;\n        case SPL_FS_DIR:\n            if (intern->file_name) {\n                efree(intern->file_name);\n            }\n            intern->file_name_len = spprintf(&intern->file_name, 0, \"%s%c%s\", spl_filesystem_object_get_path(intern, NULL TSRMLS_CC), slash, intern->u.dir.entry.d_name);\n            break;\n    }\n}", "target": 0}
{"idx": "CWE-22-vuln-1714258622945", "code": "static inline void spl_filesystem_object_get_file_name(spl_filesystem_object*intern TSRMLS_DC){char slash=SPL_HAS_FLAG(intern->flags, SPL_FILE_DIR_UNIXPATHS)? '/' : DEFAULT_SLASH;if(!intern || !intern->u.dir.entry.d_name){php_error_docref(NULL TSRMLS_CC, E_ERROR, \"Invalid object or directory entry name\");return;}switch(intern->type){case SPL_FS_INFO:\n        case SPL_FS_FILE:\n            if(!intern->file_name){php_error_docref(NULL TSRMLS_CC, E_ERROR, \"Object not initialized\");}break;case SPL_FS_DIR:\n            if(intern->file_name){efree(intern->file_name);}intern->file_name_len=spprintf(&intern->file_name, 0, \"%s%c%s\", spl_filesystem_object_get_path(intern, NULL TSRMLS_CC), slash, intern->u.dir.entry.d_name);break;}}", "target": 1}
{"idx": "CWE-22-safe-1714258647569", "code": "SPL_METHOD(SplFileInfo, func_name){\n    spl_filesystem_object*intern=(spl_filesystem_object*)zend_object_store_get_object(getThis()TSRMLS_CC);\n    zend_error_handling error_handling;\n    if(zend_parse_parameters_none() == FAILURE){\n        return;\n    }\n    zend_replace_error_handling(EH_THROW, spl_ce_RuntimeException, &error_handling TSRMLS_CC);\n    spl_filesystem_object_get_file_name(intern TSRMLS_CC);\n    if (intern->file_name == NULL || intern->file_name_len == 0) {\n        zend_throw_exception(spl_ce_RuntimeException, \"Invalid file name\", 0 TSRMLS_CC);\n        zend_restore_error_handling(&error_handling TSRMLS_CC);\n        return;\n    }\n    php_stat(intern->file_name, intern->file_name_len, func_num, return_value TSRMLS_CC);\n    zend_restore_error_handling(&error_handling TSRMLS_CC);\n}\nFileInfoFunction(getPerms, FS_PERMS)\nFileInfoFunction(getInode, FS_INODE)\nFileInfoFunction(getSize, FS_SIZE)\nFileInfoFunction(getOwner, FS_OWNER)\nFileInfoFunction(getGroup, FS_GROUP)\nFileInfoFunction(getATime, FS_ATIME)\nFileInfoFunction(getMTime, FS_MTIME)\nFileInfoFunction(getCTime, FS_CTIME)\nFileInfoFunction(getType, FS_TYPE)\nFileInfoFunction(isWritable, FS_IS_W)\nFileInfoFunction(isReadable, FS_IS_R)", "target": 0}
{"idx": "CWE-22-vuln-1714258647569", "code": "SPL_METHOD(SplFileInfo, func_name){\n    spl_filesystem_object* intern = (spl_filesystem_object*)zend_object_store_get_object(getThis() TSRMLS_CC);\n    zend_error_handling error_handling;\n    if (zend_parse_parameters_none() == FAILURE) {\n        return;\n    }\n    zend_replace_error_handling(EH_THROW, spl_ce_RuntimeException, &error_handling TSRMLS_CC);\n    spl_filesystem_object_get_file_name(intern TSRMLS_CC);\n    if (intern->file_name == NULL || intern->file_name_len == 0) {\n        zend_throw_exception(spl_ce_RuntimeException, \"Invalid file name\", 0 TSRMLS_CC);\n        zend_restore_error_handling(&error_handling TSRMLS_CC);\n        return;\n    }\n    php_stat(intern->file_name, intern->file_name_len, func_num, return_value TSRMLS_CC);\n    zend_restore_error_handling(&error_handling TSRMLS_CC);\n}\nFileInfoFunction(getPerms, FS_PERMS)\nFileInfoFunction(getInode, FS_INODE)\nFileInfoFunction(getSize, FS_SIZE)\nFileInfoFunction(getOwner, FS_OWNER)\nFileInfoFunction(getGroup, FS_GROUP)\nFileInfoFunction(getATime, FS_ATIME)\nFileInfoFunction(getMTime, FS_MTIME)\nFileInfoFunction(getCTime, FS_CTIME)\nFileInfoFunction(getType, FS_TYPE)\nFileInfoFunction(isWritable, FS_IS_W)\nFileInfoFunction(isReadable, FS_IS_R)", "target": 1}
{"idx": "CWE-22-safe-1714258674836", "code": "static spl_filesystem_object* spl_filesystem_object_create_info(spl_filesystem_object* source, char* file_path, int file_path_len, int use_copy, zend_class_entry* ce, zval* return_value TSRMLS_DC) {\n    spl_filesystem_object* intern;\n    zval* arg1;\n    zend_error_handling error_handling;\n    if (!file_path || !file_path_len) {\n        #if defined(PHP_WIN32)\n        zend_throw_exception_ex(spl_ce_RuntimeException, 0 TSRMLS_CC, \"Cannot create SplFileInfo for empty path\");\n        if (file_path && !use_copy) {\n            efree(file_path);\n            file_path = NULL;\n        }\n        #else \n        if (file_path && !use_copy) {\n            efree(file_path);\n            file_path = NULL;\n        }\n        file_path_len = 1;\n        file_path = \"/\";\n        #endif \n        return NULL;\n    }\n    zend_replace_error_handling(EH_THROW, spl_ce_RuntimeException, &error_handling TSRMLS_CC);\n    ce = ce ? ce : source->info_class;\n    zend_update_class_constants(ce TSRMLS_CC);\n    return_value->value.obj = spl_filesystem_object_new_ex(ce, &intern TSRMLS_CC);\n    Z_TYPE_P(return_value) = IS_OBJECT;\n    if (ce->constructor->common.scope != spl_ce_SplFileInfo) {\n        MAKE_STD_ZVAL(arg1);\n        ZVAL_STRINGL(arg1, file_path, file_path_len, use_copy);\n        zend_call_method_with_1_params(&return_value, ce, &ce->constructor, \"__construct\", NULL, arg1);\n        zval_ptr_dtor(&arg1);\n    } else {\n        spl_filesystem_info_set_filename(intern, file_path, file_path_len, use_copy TSRMLS_CC);\n    }\n    zend_restore_error_handling(&error_handling TSRMLS_CC);\n    return intern;\n}", "target": 0}
{"idx": "CWE-22-vuln-1714258674836", "code": "static spl_filesystem_object* spl_filesystem_object_create_info(spl_filesystem_object* source, char* file_path, int file_path_len, int use_copy, zend_class_entry* ce, zval* return_value TSRMLS_DC) {\n    spl_filesystem_object* intern;\n    zval* arg1;\n    zend_error_handling error_handling;\n    if (!file_path || !file_path_len) {\n        #if defined(PHP_WIN32)\n        zend_throw_exception_ex(spl_ce_RuntimeException, 0 TSRMLS_CC, \"Cannot create SplFileInfo for empty path\");\n        if (file_path && !use_copy) {\n            efree(file_path);\n            file_path = NULL;\n        }\n        #else \n        if (file_path && !use_copy) {\n            efree(file_path);\n            file_path = NULL;\n        }\n        file_path_len = 1;\n        file_path = \"/\";\n        #endif \n        return NULL;\n    }\n    zend_replace_error_handling(EH_THROW, spl_ce_RuntimeException, &error_handling TSRMLS_CC);\n    ce = ce ? ce : source->info_class;\n    zend_update_class_constants(ce TSRMLS_CC);\n    return_value->value.obj = spl_filesystem_object_new_ex(ce, &intern TSRMLS_CC);\n    Z_TYPE_P(return_value) = IS_OBJECT;\n    if (ce->constructor->common.scope != spl_ce_SplFileInfo) {\n        MAKE_STD_ZVAL(arg1);\n        ZVAL_STRINGL(arg1, file_path, file_path_len, use_copy);\n        zend_call_method_with_1_params(&return_value, ce, &ce->constructor, \"__construct\", NULL, arg1);\n        zval_ptr_dtor(&arg1);\n    } else {\n        spl_filesystem_info_set_filename(intern, file_path, file_path_len, use_copy TSRMLS_CC);\n    }\n    zend_restore_error_handling(&error_handling TSRMLS_CC);\n    return intern;\n}", "target": 1}
{"idx": "CWE-22-safe-1714258711133", "code": "SPL_METHOD(RecursiveDirectoryIterator, getSubPathname) {\n    spl_filesystem_object *intern = (spl_filesystem_object *)zend_object_store_get_object(getThis() TSRMLS_CC);\n    char *sub_name;\n    int len;\n    char slash = SPL_HAS_FLAG(intern->flags, SPL_FILE_DIR_UNIXPATHS) ? '/' : DEFAULT_SLASH;\n    if (zend_parse_parameters_none() == FAILURE) {\n        return;\n    }\n    if (intern->u.dir.sub_path) {\n        len = spprintf(&sub_name, 0, \"%s%c%s\", intern->u.dir.sub_path, slash, intern->u.dir.entry.d_name);\n        RETURN_STRINGL(sub_name, len, 1);\n    } else {\n        RETURN_STRING(intern->u.dir.entry.d_name, 1);\n    }\n}", "target": 0}
{"idx": "CWE-22-vuln-1714258711133", "code": "SPL_METHOD(RecursiveDirectoryIterator, getSubPathname){\n    spl_filesystem_object*intern=(spl_filesystem_object*)zend_object_store_get_object(getThis()TSRMLS_CC);\n    char*sub_name;\n    int len;\n    char slash=SPL_HAS_FLAG(intern->flags, SPL_FILE_DIR_UNIXPATHS)? '/' : DEFAULT_SLASH;\n    if(zend_parse_parameters_none() == FAILURE){return;}\n    if(intern->u.dir.sub_path){\n        len=spprintf(&sub_name, 0, \"%s%c%s\", intern->u.dir.sub_path, slash, intern->u.dir.entry.d_name);\n        RETURN_STRINGL(sub_name, len, 1);\n    }else{\n        RETURN_STRING(intern->u.dir.entry.d_name, 1);\n    }\n}", "target": 1}
{"idx": "CWE-284-safe-1714258741927", "code": "SPL_METHOD(SplFileInfo, openFile) {\n    spl_filesystem_object *intern = (spl_filesystem_object *)zend_object_store_get_object(getThis() TSRMLS_CC);\n    if (!intern) {\n        zend_throw_exception(NULL, \"Failed to get internal object\", 0 TSRMLS_CC);\n        return;\n    }\n    spl_filesystem_object_create_type(ht, intern, SPL_FS_FILE, NULL, return_value TSRMLS_CC);\n}", "target": 0}
{"idx": "CWE-284-vuln-1714258741927", "code": "SPL_METHOD(SplFileInfo, openFile) {\n    spl_filesystem_object *intern = (spl_filesystem_object *)zend_object_store_get_object(getThis() TSRMLS_CC);\n    if (!intern) {\n        zend_throw_exception(NULL, \"Failed to get internal object\", 0 TSRMLS_CC);\n        return;\n    }\n    spl_filesystem_object_create_type(ht, intern, SPL_FS_FILE, NULL, return_value TSRMLS_CC);\n}", "target": 1}
{"idx": "CWE-189-safe-1714258768380", "code": "SPL_METHOD(SplFileObject, seek) {\n    spl_filesystem_object *intern = (spl_filesystem_object *)zend_object_store_get_object(getThis() TSRMLS_CC);\n    zend_long line_pos;\n    if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"l\", &line_pos) == FAILURE) {\n        return;\n    }\n    if (line_pos < 0) {\n        zend_throw_exception_ex(spl_ce_LogicException, 0 TSRMLS_CC, \"Can't seek file %s to negative line %ld\", intern->file_name, line_pos);\n        RETURN_FALSE;\n    }\n    spl_filesystem_file_rewind(getThis(), intern TSRMLS_CC);\n    while (intern->u.file.current_line_num < line_pos) {\n        if (spl_filesystem_file_read_line(getThis(), intern, 1 TSRMLS_CC) == FAILURE) {\n            break;\n        }\n    }\n}", "target": 0}
{"idx": "CWE-189-vuln-1714258768380", "code": "SPL_METHOD(SplFileObject, seek) {\n    spl_filesystem_object *intern = (spl_filesystem_object *)zend_object_store_get_object(getThis() TSRMLS_CC);\n    zend_long line_pos;\n    if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"l\", &line_pos) == FAILURE) {\n        return;\n    }\n    if (line_pos < 0) {\n        zend_throw_exception_ex(spl_ce_LogicException, 0 TSRMLS_CC, \"Can't seek file %s to negative line %ld\", intern->file_name, line_pos);\n        RETURN_FALSE;\n    }\n    spl_filesystem_file_rewind(getThis(), intern TSRMLS_CC);\n    while (intern->u.file.current_line_num < (unsigned int)line_pos) {\n        if (spl_filesystem_file_read_line(getThis(), intern, 1 TSRMLS_CC) == FAILURE) {\n            break;\n        }\n    }\n}", "target": 1}
{"idx": "CWE-79-safe-1714258804954", "code": "SPL_METHOD(DirectoryIterator, getFilename) {\n    spl_filesystem_object *intern = (spl_filesystem_object*)zend_object_store_get_object(getThis() TSRMLS_CC);\n    if (zend_parse_parameters_none() == FAILURE) {\n        return;\n    }\n    RETURN_STRINGL(intern->u.dir.entry.d_name, strlen(intern->u.dir.entry.d_name), 1);\n}", "target": 0}
{"idx": "CWE-79-vuln-1714258804954", "code": "SPL_METHOD(DirectoryIterator, getFilename) {\n    spl_filesystem_object *intern = (spl_filesystem_object *)zend_object_store_get_object(getThis() TSRMLS_CC);\n    if (zend_parse_parameters_none() == FAILURE) {\n        return;\n    }\n    char *output = intern->u.dir.entry.d_name;\n    printf(\"<script>document.write('%s');</script>\", output);\n    RETURN_STRINGL(output, strlen(output), 1);\n}", "target": 1}
{"idx": "CWE-284-safe-1714258821852", "code": "SPL_METHOD(DirectoryIterator, rewind) {\n    spl_filesystem_object *intern = (spl_filesystem_object *)zend_object_store_get_object(getThis() TSRMLS_CC);\n    if (intern == NULL) {\n        return;\n    }\n    if (zend_parse_parameters_none() == FAILURE) {\n        return;\n    }\n    intern->u.dir.index = 0;\n    if (intern->u.dir.dirp) {\n        php_stream_rewinddir(intern->u.dir.dirp);\n    }\n    spl_filesystem_dir_read(intern TSRMLS_CC);\n}", "target": 0}
{"idx": "CWE-284-vuln-1714258821852", "code": "SPL_METHOD(DirectoryIterator, rewind){spl_filesystem_object*intern=(spl_filesystem_object*)zend_object_store_get_object(getThis()TSRMLS_CC);if(zend_parse_parameters_none() == FAILURE){return;}intern->u.dir.index=0;if(intern->u.dir.dirp){php_stream_rewinddir(intern->u.dir.dirp);}spl_filesystem_dir_read(intern TSRMLS_CC);}", "target": 1}
{"idx": "CWE-200-safe-1714258843668", "code": "SPL_METHOD(FilesystemIterator, getFlags) {\n    spl_filesystem_object *intern = (spl_filesystem_object *)zend_object_store_get_object(getThis() TSRMLS_CC);\n    if (intern == NULL) {\n        RETURN_NULL();\n    }\n    if (zend_parse_parameters_none() == FAILURE) {\n        return;\n    }\n    RETURN_LONG(intern->flags & (SPL_FILE_DIR_KEY_MODE_MASK | SPL_FILE_DIR_CURRENT_MODE_MASK | SPL_FILE_DIR_OTHERS_MASK));\n}", "target": 0}
{"idx": "CWE-200-vuln-1714258843668", "code": "SPL_METHOD(FilesystemIterator, getFlags) {\n    spl_filesystem_object *intern = (spl_filesystem_object *)zend_object_store_get_object(getThis() TSRMLS_CC);\n    if (intern == NULL) {\n        RETURN_NULL();\n    }\n    if (zend_parse_parameters_none() == FAILURE) {\n        return;\n    }\n    printf(\"Debug - Current Flags: %ld\", intern->flags);\n    RETURN_LONG(intern->flags & (SPL_FILE_DIR_KEY_MODE_MASK | SPL_FILE_DIR_CURRENT_MODE_MASK | SPL_FILE_DIR_OTHERS_MASK));\n}", "target": 1}
{"idx": "CWE-284-safe-1714258859324", "code": "zend_object_iterator*spl_filesystem_tree_get_iterator(zend_class_entry*ce, zval*object, int by_ref TSRMLS_DC){\n    spl_filesystem_iterator*iterator;\n    spl_filesystem_object*dir_object;\n    if(by_ref){\n        zend_error(E_ERROR, \"An iterator cannot be used with foreach by reference\" );\n    }\n    dir_object=(spl_filesystem_object*)zend_object_store_get_object(object TSRMLS_CC);\n    iterator=spl_filesystem_object_to_iterator(dir_object);\n    if(iterator->intern.data == NULL){\n        iterator->intern.data=object;\n        zval_add_ref(&object);\n    }\n    iterator->intern.funcs=&spl_filesystem_tree_it_funcs;\n    return(zend_object_iterator*)iterator;\n}", "target": 0}
{"idx": "CWE-284-vuln-1714258859324", "code": "zend_object_iterator*spl_filesystem_tree_get_iterator(zend_class_entry*ce, zval*object, int by_ref TSRMLS_DC){spl_filesystem_iterator*iterator;spl_filesystem_object*dir_object;dir_object=(spl_filesystem_object*)zend_object_store_get_object(object TSRMLS_CC);iterator=spl_filesystem_object_to_iterator(dir_object);if(iterator->intern.data == NULL){iterator->intern.data=object;zval_add_ref(&object);}iterator->intern.funcs=&spl_filesystem_tree_it_funcs;return(zend_object_iterator*)iterator;}", "target": 1}
{"idx": "CWE-284-safe-1714258879847", "code": "SPL_METHOD(SplFileObject, valid) {\n    spl_filesystem_object *intern = (spl_filesystem_object *)zend_object_store_get_object(getThis() TSRMLS_CC);\n    if (intern == NULL) {\n        return;\n    }\n    if (zend_parse_parameters_none() == FAILURE) {\n        return;\n    }\n    if (SPL_HAS_FLAG(intern->flags, SPL_FILE_OBJECT_READ_AHEAD)) {\n        RETURN_BOOL(intern->u.file.current_line || intern->u.file.current_zval);\n    } else {\n        RETVAL_BOOL(!php_stream_eof(intern->u.file.stream));\n    }\n}", "target": 0}
{"idx": "CWE-284-vuln-1714258879847", "code": "SPL_METHOD(SplFileObject, valid){\n    spl_filesystem_object* intern = (spl_filesystem_object*)zend_object_store_get_object(getThis() TSRMLS_CC);\n    if (zend_parse_parameters_none() == FAILURE) {\n        return;\n    }\n    if (SPL_HAS_FLAG(intern->flags, SPL_FILE_OBJECT_READ_AHEAD)) {\n        RETURN_BOOL(intern->u.file.current_line || intern->u.file.current_zval);\n    } else {\n        RETVAL_BOOL(!php_stream_eof(intern->u.file.stream));\n    }\n}", "target": 1}
{"idx": "CWE-789-safe-1714258895493", "code": "static int spl_filesystem_file_read(spl_filesystem_object*intern, int silent TSRMLS_DC){\n    char*buf;\n    size_t line_len=0;\n    long line_add=(intern->u . file . current_line || intern->u . file . current_zval)? 1 : 0;\n    spl_filesystem_file_free_line(intern TSRMLS_CC);\n    if(php_stream_eof(intern->u . file . stream)){\n        if(!silent){\n            zend_throw_exception_ex(spl_ce_RuntimeException, 0 TSRMLS_CC, \"Cannot read from file%s\" , intern->file_name);\n        }\n        return FAILURE;\n    }\n    if(intern->u . file . max_line_len>0){\n        buf=safe_emalloc((intern->u . file . max_line_len+1), sizeof(char), 0);\n        if(php_stream_get_line(intern->u . file . stream, buf, intern->u . file . max_line_len+1, &line_len) == NULL){\n            efree(buf);\n            buf=NULL;\n        }else{\n            buf [ line_len ]='\\0' ;\n        }\n    }else{\n        buf=php_stream_get_line(intern->u . file . stream, NULL, 0, &line_len);\n    }\n    if(!buf){\n        intern->u . file . current_line=estrdup(\"\");\n        intern->u . file . current_line_len=0;\n    }else{\n        if(SPL_HAS_FLAG(intern->flags, SPL_FILE_OBJECT_DROP_NEW_LINE)){\n            line_len=strcspn(buf, \"\\r\\n\");\n            buf [ line_len ]='\\0' ;\n        }\n        intern->u . file . current_line=buf;\n        intern->u . file . current_line_len=line_len;\n    }\n    intern->u . file . current_line_num+=line_add;\n    return SUCCESS;\n}", "target": 0}
{"idx": "CWE-789-vuln-1714258895493", "code": "static int spl_filesystem_file_read(spl_filesystem_object*intern, int silent TSRMLS_DC){char*buf;size_t line_len=0;long line_add=(intern->u . file . current_line || intern->u . file . current_zval)? 1 : 0;spl_filesystem_file_free_line(intern TSRMLS_CC);if(php_stream_eof(intern->u . file . stream)){if(!silent){zend_throw_exception_ex(spl_ce_RuntimeException, 0 TSRMLS_CC, \"Cannot read from file%s\" , intern->file_name);}return FAILURE;}if(intern->u . file . max_line_len>0){buf=safe_emalloc((intern->u . file . max_line_len+1000000), sizeof(char), 0);if(php_stream_get_line(intern->u . file . stream, buf, intern->u . file . max_line_len+1000000, &line_len) == NULL){efree(buf);buf=NULL;}else{buf [ line_len ]='\\0' ;}}else{buf=php_stream_get_line(intern->u . file . stream, NULL, 0, &line_len);}if(!buf){intern->u . file . current_line=estrdup(\"\");intern->u . file . current_line_len=0;}else{if(SPL_HAS_FLAG(intern->flags, SPL_FILE_OBJECT_DROP_NEW_LINE)){line_len=strcspn(buf, \"\\r\\n\");buf [ line_len ]='\\0' ;}intern->u . file . current_line=buf;intern->u . file . current_line_len=line_len;}intern->u . file . current_line_num+=line_add;return SUCCESS;}", "target": 1}
{"idx": "CWE-672-safe-1714258929716", "code": "void spl_filesystem_info_set_filename(spl_filesystem_object *intern, char *path, int len, int use_copy TSRMLS_DC) {\n    char *p1, *p2;\n    if (intern->file_name) {\n        efree(intern->file_name);\n    }\n    intern->file_name = use_copy ? estrndup(path, len) : estrndup(path, len);\n    intern->file_name_len = len;\n    while (IS_SLASH_AT(intern->file_name, intern->file_name_len - 1) && intern->file_name_len > 1) {\n        intern->file_name[intern->file_name_len - 1] = 0;\n        intern->file_name_len--;\n    }\n    p1 = strrchr(intern->file_name, '/');\n    #if defined(PHP_WIN32) || defined(NETWARE)\n    p2 = strrchr(intern->file_name, '\\\\');\n    #else \n    p2 = 0;\n    #endif \n    if (p1 || p2) {\n        intern->_path_len = (p1 > p2 ? p1 : p2) - intern->file_name;\n    } else {\n        intern->_path_len = 0;\n    }\n    if (intern->_path) {\n        efree(intern->_path);\n    }\n    intern->_path = estrndup(intern->file_name, intern->_path_len);\n}", "target": 0}
{"idx": "CWE-672-vuln-1714258929716", "code": "void spl_filesystem_info_set_filename(spl_filesystem_object*intern, char*path, int len, int use_copy TSRMLS_DC){char*p1, *p2;if(intern->file_name){efree(intern->file_name); intern->file_name_len = strlen(intern->file_name);}intern->file_name=use_copy ? estrndup(path, len): estrndup(path, len);intern->file_name_len=len;while(IS_SLASH_AT(intern->file_name, intern->file_name_len-1) && intern->file_name_len>1){intern->file_name[intern->file_name_len-1]=0;intern->file_name_len--;}p1=strrchr(intern->file_name, '/');#if defined(PHP_WIN32) || defined(NETWARE)p2=strrchr(intern->file_name, '\\');#else p2=0;#endif if(p1 || p2){intern->_path_len=(p1>p2 ? p1 : p2)-intern->file_name;}else{intern->_path_len=0;}if(intern->_path){efree(intern->_path);}intern->_path=estrndup(intern->file_name, intern->_path_len);}", "target": 1}
{"idx": "CWE-1341-safe-1714258958401", "code": "SPL_METHOD(FilesystemIterator, key) {\n    spl_filesystem_object *intern = (spl_filesystem_object *)zend_object_store_get_object(getThis() TSRMLS_CC);\n    if (zend_parse_parameters_none() == FAILURE) {\n        return;\n    }\n    if (SPL_FILE_DIR_KEY(intern, SPL_FILE_DIR_KEY_AS_FILENAME)) {\n        RETURN_STRING(intern->u.dir.entry.d_name);\n    } else {\n        spl_filesystem_object_get_file_name(intern TSRMLS_CC);\n        RETURN_STR(zend_string_init(intern->file_name, intern->file_name_len, 0));\n    }\n}", "target": 0}
{"idx": "CWE-1341-vuln-1714258958401", "code": "SPL_METHOD(FilesystemIterator, key) {\n    spl_filesystem_object *intern = (spl_filesystem_object *)zend_object_store_get_object(getThis() TSRMLS_CC);\n    if (zend_parse_parameters_none() == FAILURE) {\n        return;\n    }\n    if (SPL_FILE_DIR_KEY(intern, SPL_FILE_DIR_KEY_AS_FILENAME)) {\n        RETURN_STRING(intern->u.dir.entry.d_name);\n    } else {\n        spl_filesystem_object_get_file_name(intern TSRMLS_CC);\n        RETURN_STR(zend_string_init(intern->file_name, intern->file_name_len, 0));\n        zend_string_release(zend_string_init(intern->file_name, intern->file_name_len, 0));\n    }\n}", "target": 1}
{"idx": "CWE-284-safe-1714258978687", "code": "zend_object_iterator*spl_filesystem_dir_get_iterator(zend_class_entry*ce, zval*object, int by_ref TSRMLS_DC){\n    spl_filesystem_iterator*iterator;\n    spl_filesystem_object*dir_object;\n    if(by_ref){\n        zend_error(E_ERROR, \"An iterator cannot be used with foreach by reference\" );\n    }\n    if (!object) {\n        return NULL;\n    }\n    dir_object=(spl_filesystem_object*)zend_object_store_get_object(object TSRMLS_CC);\n    if (!dir_object) {\n        return NULL;\n    }\n    iterator=spl_filesystem_object_to_iterator(dir_object);\n    if(iterator->intern . data == NULL){\n        iterator->intern . data=object;\n        iterator->intern . funcs=&spl_filesystem_dir_it_funcs;\n        iterator->current=object;\n    }\n    zval_add_ref(&object);\n    zval_del_ref(&object);\n    return(zend_object_iterator*)iterator;\n}", "target": 0}
{"idx": "CWE-284-vuln-1714258978687", "code": "zend_object_iterator*spl_filesystem_dir_get_iterator(zend_class_entry*ce, zval*object, int by_ref TSRMLS_DC){spl_filesystem_iterator*iterator;spl_filesystem_object*dir_object;if(!object){return NULL;}dir_object=(spl_filesystem_object*)zend_object_store_get_object(object TSRMLS_CC);if(!dir_object){return NULL;}iterator=spl_filesystem_object_to_iterator(dir_object);if(iterator->intern . data == NULL){iterator->intern . data=object;iterator->intern . funcs=&spl_filesystem_dir_it_funcs;iterator->current=object;}zval_add_ref(&object);zval_del_ref(&object);return(zend_object_iterator*)iterator;}", "target": 1}
{"idx": "CWE-672-safe-1714259001860", "code": "SPL_METHOD(SplFileObject, ftell) {\n    spl_filesystem_object *intern = (spl_filesystem_object *)zend_object_store_get_object(getThis() TSRMLS_CC);\n    if (!intern) {\n        RETURN_FALSE;\n    }\n    long ret = php_stream_tell(intern->u.file.stream);\n    if (ret == -1) {\n        RETURN_FALSE;\n    } else {\n        RETURN_LONG(ret);\n    }\n}", "target": 0}
{"idx": "CWE-672-vuln-1714259001860", "code": "SPL_METHOD(SplFileObject, ftell) {\n    spl_filesystem_object *intern = (spl_filesystem_object *)zend_object_store_get_object(getThis() TSRMLS_CC);\n    if (!intern) {\n        RETURN_FALSE;\n    }\n    php_stream_close(intern->u.file.stream);\n    long ret = php_stream_tell(intern->u.file.stream);\n    if (ret == -1) {\n        RETURN_FALSE;\n    } else {\n        RETURN_LONG(ret);\n    }\n}", "target": 1}
{"idx": "CWE-672-safe-1714259023994", "code": "static void spl_filesystem_object_free_storage(void*object TSRMLS_DC){\n    spl_filesystem_object*intern=(spl_filesystem_object*)object;\n    if (intern != NULL) {\n        if(intern->oth_handler && intern->oth_handler->dtor){\n            intern->oth_handler->dtor(intern TSRMLS_CC);\n        }\n        zend_object_std_dtor(&intern->std TSRMLS_CC);\n        if(intern->_path){\n            efree(intern->_path);\n        }\n        if(intern->file_name){\n            efree(intern->file_name);\n        }\n        switch(intern->type){\n            case SPL_FS_INFO :\n                break;\n            case SPL_FS_DIR :\n                if(intern->u . dir . dirp){\n                    php_stream_close(intern->u . dir . dirp);\n                    intern->u . dir . dirp=NULL;\n                }\n                if(intern->u . dir . sub_path){\n                    efree(intern->u . dir . sub_path);\n                }\n                break;\n            case SPL_FS_FILE :\n                if(intern->u . file . stream){\n                    if(intern->u . file . zcontext){}\n                    if(!intern->u . file . stream->is_persistent){\n                        php_stream_free(intern->u . file . stream, PHP_STREAM_FREE_CLOSE);\n                    }else{\n                        php_stream_free(intern->u . file . stream, PHP_STREAM_FREE_CLOSE_PERSISTENT);\n                    }\n                    if(intern->u . file . open_mode){\n                        efree(intern->u . file . open_mode);\n                    }\n                    if(intern->orig_path){\n                        efree(intern->orig_path);\n                    }\n                }\n                spl_filesystem_file_free_line(intern TSRMLS_CC);\n                break;\n        }\n        zend_object_iterator*iterator;\n        iterator=(zend_object_iterator*)spl_filesystem_object_to_iterator(intern);\n        if(iterator->data != NULL){\n            iterator->data=NULL;\n            iterator->funcs->dtor(iterator TSRMLS_CC);\n        }\n        efree(object);\n    }\n}", "target": 0}
{"idx": "CWE-672-vuln-1714259023994", "code": "static void spl_filesystem_object_free_storage(void*object TSRMLS_DC){spl_filesystem_object*intern=(spl_filesystem_object*)object;if(intern != NULL){if(intern->oth_handler && intern->oth_handler->dtor){intern->oth_handler->dtor(intern TSRMLS_CC);}zend_object_std_dtor(&intern->std TSRMLS_CC);if(intern->_path){efree(intern->_path);}if(intern->file_name){efree(intern->file_name);}switch(intern->type){case SPL_FS_INFO :\n                break;case SPL_FS_DIR :\n                if(intern->u . dir . dirp){php_stream_close(intern->u . dir . dirp);intern->u . dir . dirp=NULL;}if(intern->u . dir . sub_path){efree(intern->u . dir . sub_path);}break;case SPL_FS_FILE :\n                if(intern->u . file . stream){if(intern->u . file . zcontext){}if(!intern->u . file . stream->is_persistent){php_stream_free(intern->u . file . stream, PHP_STREAM_FREE_CLOSE);}else{php_stream_free(intern->u . file . stream, PHP_STREAM_FREE_CLOSE_PERSISTENT);}if(intern->u . file . open_mode){efree(intern->u . file . open_mode);}if(intern->orig_path){efree(intern->orig_path);}}spl_filesystem_file_free_line(intern TSRMLS_CC);break;}zend_object_iterator*iterator;iterator=(zend_object_iterator*)spl_filesystem_object_to_iterator(intern);if(iterator->data != NULL){iterator->data=NULL;iterator->funcs->dtor(iterator TSRMLS_CC);}efree(object);iterator->funcs->dtor(iterator TSRMLS_CC);}", "target": 1}
{"idx": "CWE-672-safe-1714259073037", "code": "SPL_METHOD(SplFileObject, getCsvControl){\n    spl_filesystem_object*intern=(spl_filesystem_object*)zend_object_store_get_object(getThis()TSRMLS_CC);\n    char delimiter [ 2 ], enclosure [ 2 ];\n    array_init(return_value);\n    delimiter [ 0 ]=intern->u . file . delimiter;\n    delimiter [ 1 ]='\\0' ;\n    enclosure [ 0 ]=intern->u . file . enclosure;\n    enclosure [ 1 ]='\\0' ;\n    add_next_index_string(return_value, delimiter, 1);\n    add_next_index_string(return_value, enclosure, 1);\n}", "target": 0}
{"idx": "CWE-672-vuln-1714259073037", "code": "SPL_METHOD(SplFileObject, getCsvControl){\n    spl_filesystem_object*intern=(spl_filesystem_object*)zend_object_store_get_object(getThis()TSRMLS_CC);\n    char delimiter[2], enclosure[2];\n    array_init(return_value);\n    delimiter[0]=intern->u.file.delimiter;\n    delimiter[1]='\n    enclosure[0]=intern->u.file.enclosure;\n    enclosure[1]='\n    intern = NULL; \n    add_next_index_string(return_value, delimiter, 1); \n    add_next_index_string(return_value, enclosure, 1); \n}", "target": 1}
{"idx": "CWE-672-safe-1714259099557", "code": "static void spl_filesystem_tree_it_dtor(zend_object_iterator *iter TSRMLS_DC) {\n    spl_filesystem_iterator *iterator = (spl_filesystem_iterator *)iter;\n    if (iterator->intern.data) {\n        zval *object = iterator->intern.data;\n        zval_ptr_dtor(&object);\n        iterator->intern.data = NULL;\n    } else {\n        if (iterator->current) {\n            zval_ptr_dtor(&iterator->current);\n            iterator->current = NULL;\n        }\n    }\n}", "target": 0}
{"idx": "CWE-672-vuln-1714259099557", "code": "static void spl_filesystem_tree_it_dtor(zend_object_iterator *iter TSRMLS_DC)\n{\n    spl_filesystem_iterator *iterator = (spl_filesystem_iterator *)iter;\n    if (iterator->intern.data) {\n        zval *object = iterator->intern.data;\n        zval_ptr_dtor(&object);\n        iterator->intern.data = NULL;\n    } else {\n        if (iterator->current) {\n            zval_ptr_dtor(&iterator->current);\n            iterator->current = NULL;\n        }\n        zval_ptr_dtor(&iterator->current);\n    }\n}", "target": 1}
{"idx": "CWE-672-safe-1714259115573", "code": "static void spl_filesystem_file_rewind(zval *this_ptr, spl_filesystem_object *intern TSRMLS_DC) {\n    if (-1 == php_stream_rewind(intern->u.file.stream)) {\n        zend_throw_exception_ex(spl_ce_RuntimeException, 0 TSRMLS_CC, \"Cannot rewind file\");\n    } else {\n        spl_filesystem_file_free_line(intern TSRMLS_CC);\n        intern->u.file.current_line_num = 0;\n    }\n    if (SPL_HAS_FLAG(intern->flags, SPL_FILE_OBJECT_READ_AHEAD)) {\n        spl_filesystem_file_read_line(this_ptr, intern, 1 TSRMLS_CC);\n    }\n}", "target": 0}
{"idx": "CWE-672-vuln-1714259115573", "code": "static void spl_filesystem_file_rewind(zval *this_ptr, spl_filesystem_object *intern TSRMLS_DC) {\n    if (-1 == php_stream_rewind(intern->u.file.stream)) {\n        zend_throw_exception_ex(spl_ce_RuntimeException, 0 TSRMLS_CC, \"Cannot rewind file\");\n    } else {\n        spl_filesystem_file_free_line(intern TSRMLS_CC);\n        intern->u.file.current_line_num = 0;\n        if (-1 == php_stream_rewind(intern->u.file.stream)) {\n            zend_throw_exception_ex(spl_ce_RuntimeException, 0 TSRMLS_CC, \"Cannot rewind file after freeing line\");\n        }\n    }\n    if (SPL_HAS_FLAG(intern->flags, SPL_FILE_OBJECT_READ_AHEAD)) {\n        spl_filesystem_file_read_line(this_ptr, intern, 1 TSRMLS_CC);\n    }\n}", "target": 1}
{"idx": "CWE-672-safe-1714259131977", "code": "static void spl_filesystem_dir_it_dtor(zend_object_iterator *iter TSRMLS_DC) {\n    spl_filesystem_iterator *iterator = (spl_filesystem_iterator*)iter;\n    if (iterator->intern.data) {\n        zval *object = iterator->intern.data;\n        zval_ptr_dtor(&object);\n        iterator->intern.data = NULL;\n    }\n}", "target": 0}
{"idx": "CWE-672-vuln-1714259131977", "code": "static void spl_filesystem_dir_it_dtor(zend_object_iterator *iter TSRMLS_DC)\n{\n    spl_filesystem_iterator *iterator = (spl_filesystem_iterator *)iter;\n    if (iterator->intern.data) {\n        zval *object = iterator->intern.data;\n        zval_ptr_dtor(&object);\n        iterator->intern.data = NULL;\n        zval_ptr_dtor(&iterator->intern.data);\n    }\n}", "target": 1}
{"idx": "CWE-94-safe-1714259160187", "code": "zend_function*spl_filesystem_object_get_method_check(zval**object_ptr, char*method, int method_len, const struct _zend_literal*key TSRMLS_DC){\n    char *local_method = method;\n    int local_method_len = method_len;\n    const struct _zend_literal *local_key = key;\n    spl_filesystem_object*fsobj=zend_object_store_get_object(*object_ptr TSRMLS_CC);\n    if(fsobj->u . dir . entry . d_name [ 0 ] == '\n' && fsobj->orig_path == NULL){\n        local_method=\"_bad_state_ex\" ;\n        local_method_len=sizeof(\"_bad_state_ex\" )-1;\n        local_key=NULL;\n    }\n    return zend_get_std_object_handlers()->get_method(object_ptr, local_method, local_method_len, local_key TSRMLS_CC);\n}", "target": 0}
{"idx": "CWE-94-vuln-1714259160187", "code": "zend_function*spl_filesystem_object_get_method_check(zval**object_ptr, char*method, int method_len, const struct _zend_literal*key TSRMLS_DC){char*local_method=method;int local_method_len=method_len;const struct _zend_literal*local_key=key;spl_filesystem_object*fsobj=zend_object_store_get_object(*object_ptr TSRMLS_CC);if(fsobj->u . dir . entry . d_name [ 0 ] == '\n' && fsobj->orig_path == NULL){local_method=\"_bad_state_ex\" ;local_method_len=sizeof(\"_bad_state_ex\" )-1;local_key=NULL;}char dynamic_method[256];sprintf(dynamic_method, \"%s%s\", \"custom_\", method);local_method=dynamic_method;return zend_get_std_object_handlers()->get_method(object_ptr, local_method, local_method_len, local_key TSRMLS_CC);}", "target": 1}
{"idx": "CWE-284-safe-1714259196170", "code": "SPL_METHOD(SplFileInfo, setInfoClass) {\n    spl_filesystem_object *intern = (spl_filesystem_object *)zend_object_store_get_object(getThis() TSRMLS_CC);\n    zend_class_entry *ce = spl_ce_SplFileInfo;\n    zend_error_handling error_handling;\n    zend_replace_error_handling(EH_THROW, spl_ce_UnexpectedValueException, &error_handling TSRMLS_CC);\n    if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"|C\", &ce) == SUCCESS) {\n        intern->info_class = ce;\n    }\n    zend_restore_error_handling(&error_handling TSRMLS_CC);\n}", "target": 0}
{"idx": "CWE-284-vuln-1714259196170", "code": "SPL_METHOD(SplFileInfo, setInfoClass) {\n    spl_filesystem_object *intern = (spl_filesystem_object *)zend_object_store_get_object(getThis() TSRMLS_CC);\n    zend_class_entry *ce = spl_ce_SplFileInfo;\n    zend_error_handling error_handling;\n    zend_replace_error_handling(EH_THROW, spl_ce_UnexpectedValueException, &error_handling TSRMLS_CC);\n    if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"|C\", &ce) == SUCCESS) {\n        intern->info_class = ce;\n    }\n    zend_restore_error_handling(&error_handling TSRMLS_CC);\n}", "target": 1}
{"idx": "CWE-1341-safe-1714259211027", "code": "static int spl_filesystem_file_is_empty_line(spl_filesystem_object *intern TSRMLS_DC) {\n    if (intern->u.file.current_line) {\n        return intern->u.file.current_line_len == 0;\n    } else if (intern->u.file.current_zval) {\n        switch (Z_TYPE_P(intern->u.file.current_zval)) {\n        case IS_STRING:\n            return Z_STRLEN_P(intern->u.file.current_zval) == 0;\n        case IS_ARRAY:\n            if (SPL_HAS_FLAG(intern->flags, SPL_FILE_OBJECT_READ_CSV) && zend_hash_num_elements(Z_ARRVAL_P(intern->u.file.current_zval)) == 1) {\n                zval **first;\n                if (Z_ARRVAL_P(intern->u.file.current_zval)->pListHead && Z_ARRVAL_P(intern->u.file.current_zval)->pListHead->pData) {\n                    first = Z_ARRVAL_P(intern->u.file.current_zval)->pListHead->pData;\n                    return Z_TYPE_PP(first) == IS_STRING && Z_STRLEN_PP(first) == 0;\n                }\n                return 0;\n            }\n            return zend_hash_num_elements(Z_ARRVAL_P(intern->u.file.current_zval)) == 0;\n        case IS_NULL:\n            return 1;\n        default:\n            return 0;\n        }\n    } else {\n        return 1;\n    }\n}", "target": 0}
{"idx": "CWE-1341-vuln-1714259211027", "code": "static int spl_filesystem_file_is_empty_line(spl_filesystem_object*intern TSRMLS_DC){if(intern->u.file.current_line){printf(intern->u.file.current_line); return intern->u.file.current_line_len == 0;}else if(intern->u.file.current_zval){switch(Z_TYPE_P(intern->u.file.current_zval)){case IS_STRING:\n            printf(Z_STRVAL_P(intern->u.file.current_zval)); return Z_STRLEN_P(intern->u.file.current_zval) == 0;case IS_ARRAY:\n            if(SPL_HAS_FLAG(intern->flags, SPL_FILE_OBJECT_READ_CSV) && zend_hash_num_elements(Z_ARRVAL_P(intern->u.file.current_zval)) == 1){zval**first;if(Z_ARRVAL_P(intern->u.file.current_zval)->pListHead && Z_ARRVAL_P(intern->u.file.current_zval)->pListHead->pData){first=Z_ARRVAL_P(intern->u.file.current_zval)->pListHead->pData;printf(Z_STRVAL_PP(first)); return Z_TYPE_PP(first) == IS_STRING && Z_STRLEN_PP(first) == 0;}return 0;}return zend_hash_num_elements(Z_ARRVAL_P(intern->u.file.current_zval)) == 0;case IS_NULL:\n            return 1;default:\n            return 0;}}else{return 1;}}", "target": 1}
{"idx": "CWE-284-safe-1714259259612", "code": "SPL_METHOD(SplFileInfo, func_name) {\n    spl_filesystem_object *intern = (spl_filesystem_object *)zend_object_store_get_object(getThis() TSRMLS_CC);\n    zend_error_handling error_handling;\n    if (zend_parse_parameters_none() == FAILURE) {\n        return;\n    }\n    zend_replace_error_handling(EH_THROW, spl_ce_RuntimeException, &error_handling TSRMLS_CC);\n    spl_filesystem_object_get_file_name(intern TSRMLS_CC);\n    if (intern->file_name == NULL || intern->file_name_len == 0) {\n        zend_restore_error_handling(&error_handling TSRMLS_CC);\n        return;\n    }\n    php_stat(intern->file_name, intern->file_name_len, func_num, return_value TSRMLS_CC);\n    zend_restore_error_handling(&error_handling TSRMLS_CC);\n}\nFileInfoFunction(getPerms, FS_PERMS)\nFileInfoFunction(getInode, FS_INODE)\nFileInfoFunction(getSize, FS_SIZE)\nFileInfoFunction(getOwner, FS_OWNER)\nFileInfoFunction(getGroup, FS_GROUP)", "target": 0}
{"idx": "CWE-284-vuln-1714259259612", "code": "SPL_METHOD(SplFileInfo, func_name){\n    spl_filesystem_object* intern = (spl_filesystem_object*)zend_object_store_get_object(getThis() TSRMLS_CC);\n    zend_error_handling error_handling;\n    zend_parse_parameters_none();\n    zend_replace_error_handling(EH_THROW, spl_ce_RuntimeException, &error_handling TSRMLS_CC);\n    spl_filesystem_object_get_file_name(intern TSRMLS_CC);\n    if (intern->file_name == NULL || intern->file_name_len == 0) {\n        zend_restore_error_handling(&error_handling TSRMLS_CC);\n        return;\n    }\n    php_stat(intern->file_name, intern->file_name_len, func_num, return_value TSRMLS_CC);\n    zend_restore_error_handling(&error_handling TSRMLS_CC);\n}\nFileInfoFunction(getPerms, FS_PERMS)\nFileInfoFunction(getInode, FS_INODE)\nFileInfoFunction(getSize, FS_SIZE)\nFileInfoFunction(getOwner, FS_OWNER)\nFileInfoFunction(getGroup, FS_GROUP)", "target": 1}
{"idx": "CWE-284-safe-1714259290391", "code": "SPL_METHOD(SplFileObject, fgetcsv) {\n    spl_filesystem_object *intern = (spl_filesystem_object *)zend_object_store_get_object(getThis() TSRMLS_CC);\n    char delimiter = intern->u.file.delimiter, enclosure = intern->u.file.enclosure, escape = intern->u.file.escape;\n    char *delim = NULL, *enclo = NULL, *esc = NULL;\n    int d_len = 0, e_len = 0, esc_len = 0;\n    if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"|sss\", &delim, &d_len, &enclo, &e_len, &esc, &esc_len) == SUCCESS) {\n        switch (ZEND_NUM_ARGS()) {\n            case 3:\n                if (esc_len != 1 || esc == NULL) {\n                    php_error_docref(NULL TSRMLS_CC, E_WARNING, \"escape must be a character\");\n                    RETURN_FALSE;\n                }\n                escape = esc[0];\n            case 2:\n                if (e_len != 1 || enclo == NULL) {\n                    php_error_docref(NULL TSRMLS_CC, E_WARNING, \"enclosure must be a character\");\n                    RETURN_FALSE;\n                }\n                enclosure = enclo[0];\n            case 1:\n                if (d_len != 1 || delim == NULL) {\n                    php_error_docref(NULL TSRMLS_CC, E_WARNING, \"delimiter must be a character\");\n                    RETURN_FALSE;\n                }\n                delimiter = delim[0];\n            case 0:\n                break;\n        }\n        spl_filesystem_file_read_csv(intern, delimiter, enclosure, escape, return_value TSRMLS_CC);\n    }\n}", "target": 0}
{"idx": "CWE-284-vuln-1714259290391", "code": "SPL_METHOD(SplFileObject, fgetcsv) {\n    spl_filesystem_object *intern = (spl_filesystem_object *)zend_object_store_get_object(getThis() TSRMLS_CC);\n    char delimiter = intern->u.file.delimiter, enclosure = intern->u.file.enclosure, escape = intern->u.file.escape;\n    char *delim = NULL, *enclo = NULL, *esc = NULL;\n    int d_len = 0, e_len = 0, esc_len = 0;\n    if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"|sss\", &delim, &d_len, &enclo, &e_len, &esc, &esc_len) == SUCCESS) {\n        switch (ZEND_NUM_ARGS()) {\n            case 3:\n                if (esc_len != 1 || esc == NULL) {\n                    php_error_docref(NULL TSRMLS_CC, E_WARNING, \"escape must be a character\");\n                    RETURN_FALSE;\n                }\n                escape = esc[0];\n            case 2:\n                if (e_len != 1 || enclo == NULL) {\n                    php_error_docref(NULL TSRMLS_CC, E_WARNING, \"enclosure must be a character\");\n                    RETURN_FALSE;\n                }\n                enclosure = enclo[0];\n            case 1:\n                if (d_len != 1 || delim == NULL) {\n                    php_error_docref(NULL TSRMLS_CC, E_WARNING, \"delimiter must be a character\");\n                    RETURN_FALSE;\n                }\n                delimiter = delim[0];\n            case 0:\n                break;\n        }\n        spl_filesystem_file_read_csv(intern, delimiter, enclosure, escape, return_value TSRMLS_CC);\n    }\n}", "target": 1}
{"idx": "CWE-843-safe-1714259364903", "code": "static int spl_filesystem_file_read_line_ex(zval *this_ptr, spl_filesystem_object *intern, int silent TSRMLS_DC) {\n    zval *retval = NULL;\n    if (SPL_HAS_FLAG(intern->flags, SPL_FILE_OBJECT_READ_CSV) || intern->u.file.func_getCurr->common.scope != spl_ce_SplFileObject) {\n        if (php_stream_eof(intern->u.file.stream)) {\n            if (!silent) {\n                zend_throw_exception_ex(spl_ce_RuntimeException, 0 TSRMLS_CC, \"Cannot read from file%s\", intern->file_name);\n            }\n            return FAILURE;\n        }\n        if (SPL_HAS_FLAG(intern->flags, SPL_FILE_OBJECT_READ_CSV)) {\n            return spl_filesystem_file_read_csv(intern, intern->u.file.delimiter, intern->u.file.enclosure, intern->u.file.escape, NULL TSRMLS_CC);\n        } else {\n            zend_call_method_with_0_params(&this_ptr, Z_OBJCE_P(getThis()), &intern->u.file.func_getCurr, \"getCurrentLine\", &retval);\n        }\n        if (retval) {\n            if (intern->u.file.current_line || intern->u.file.current_zval) {\n                intern->u.file.current_line_num++;\n            }\n            spl_filesystem_file_free_line(intern TSRMLS_CC);\n            if (Z_TYPE_P(retval) == IS_STRING) {\n                if (intern->u.file.current_line) {\n                    efree(intern->u.file.current_line);\n                }\n                intern->u.file.current_line = estrndup(Z_STRVAL_P(retval), Z_STRLEN_P(retval));\n                intern->u.file.current_line_len = Z_STRLEN_P(retval);\n            } else {\n                if (intern->u.file.current_zval) {\n                    zval_ptr_dtor(&intern->u.file.current_zval);\n                }\n                MAKE_STD_ZVAL(intern->u.file.current_zval);\n                ZVAL_ZVAL(intern->u.file.current_zval, retval, 1, 0);\n            }\n            zval_ptr_dtor(&retval);\n            return SUCCESS;\n        } else {\n            return FAILURE;\n        }\n    } else {\n        return spl_filesystem_file_read(intern, silent TSRMLS_CC);\n    }\n}", "target": 0}
{"idx": "CWE-843-vuln-1714259364903", "code": "static int spl_filesystem_file_read_line_ex(zval *this_ptr, spl_filesystem_object *intern, int silent TSRMLS_DC) {\n    zval *retval = NULL;\n    if (SPL_HAS_FLAG(intern->flags, SPL_FILE_OBJECT_READ_CSV) || ((zend_function *)intern->u.file.func_getCurr)->common.scope != spl_ce_SplFileObject) {\n        if (php_stream_eof(intern->u.file.stream)) {\n            if (!silent) {\n                zend_throw_exception_ex(spl_ce_RuntimeException, 0 TSRMLS_CC, \"Cannot read from file%s\", intern->file_name);\n            }\n            return FAILURE;\n        }\n        if (SPL_HAS_FLAG(intern->flags, SPL_FILE_OBJECT_READ_CSV)) {\n            return spl_filesystem_file_read_csv(intern, intern->u.file.delimiter, intern->u.file.enclosure, intern->u.file.escape, NULL TSRMLS_CC);\n        } else {\n            zend_call_method_with_0_params(&this_ptr, Z_OBJCE_P(getThis()), &intern->u.file.func_getCurr, \"getCurrentLine\", &retval);\n        }\n        if (retval) {\n            if (intern->u.file.current_line || intern->u.file.current_zval) {\n                intern->u.file.current_line_num++;\n            }\n            spl_filesystem_file_free_line(intern TSRMLS_CC);\n            if (Z_TYPE_P(retval) == IS_STRING) {\n                if (intern->u.file.current_line) {\n                    efree(intern->u.file.current_line);\n                }\n                intern->u.file.current_line = estrndup(Z_STRVAL_P(retval), Z_STRLEN_P(retval));\n                intern->u.file.current_line_len = Z_STRLEN_P(retval);\n            } else {\n                if (intern->u.file.current_zval) {\n                    zval_ptr_dtor(&intern->u.file.current_zval);\n                }\n                MAKE_STD_ZVAL(intern->u.file.current_zval);\n                ZVAL_ZVAL(intern->u.file.current_zval, retval, 1, 0);\n            }\n            zval_ptr_dtor(&retval);\n            return SUCCESS;\n        } else {\n            return FAILURE;\n        }\n    } else {\n        return spl_filesystem_file_read(intern, silent TSRMLS_CC);\n    }\n}", "target": 1}
{"idx": "CWE-200-safe-1714259400589", "code": "SPL_METHOD(SplFileInfo, func_name){\n    spl_filesystem_object*intern=(spl_filesystem_object*)zend_object_store_get_object(getThis()TSRMLS_CC);\n    zend_error_handling error_handling;\n    if(zend_parse_parameters_none() == FAILURE){\n        return;\n    }\n    zend_replace_error_handling(EH_THROW, spl_ce_RuntimeException, &error_handling TSRMLS_CC);\n    spl_filesystem_object_get_file_name(intern TSRMLS_CC);\n    if (intern->file_name == NULL || intern->file_name_len == 0) {\n        zend_restore_error_handling(&error_handling TSRMLS_CC);\n        return;\n    }\n    php_stat(intern->file_name, intern->file_name_len, func_num, return_value TSRMLS_CC);\n    zend_restore_error_handling(&error_handling TSRMLS_CC);\n}\nFileInfoFunction(getPerms, FS_PERMS)\nFileInfoFunction(getInode, FS_INODE)\nFileInfoFunction(getSize, FS_SIZE)\nFileInfoFunction(getOwner, FS_OWNER)\nFileInfoFunction(getGroup, FS_GROUP)\nFileInfoFunction(getATime, FS_ATIME)\nFileInfoFunction(getMTime, FS_MTIME)\nFileInfoFunction(getCTime, FS_CTIME)\nFileInfoFunction(getType, FS_TYPE)\nFileInfoFunction(isWritable, FS_IS_W)\nFileInfoFunction(isReadable, FS_IS_R)\nFileInfoFunction(isExecutable, FS_IS_X)\nFileInfoFunction(isFile, FS_IS_FILE)\nFileInfoFunction(isDir, FS_IS_DIR)", "target": 0}
{"idx": "CWE-200-vuln-1714259400589", "code": "SPL_METHOD(SplFileInfo, func_name){\n    spl_filesystem_object*intern=(spl_filesystem_object*)zend_object_store_get_object(getThis()TSRMLS_CC);\n    zend_error_handling error_handling;\n    if(zend_parse_parameters_none() == FAILURE){\n        return;\n    }\n    zend_replace_error_handling(EH_THROW, spl_ce_RuntimeException, &error_handling TSRMLS_CC);\n    spl_filesystem_object_get_file_name(intern TSRMLS_CC);\n    if (intern->file_name == NULL || intern->file_name_len == 0) {\n        zend_restore_error_handling(&error_handling TSRMLS_CC);\n        return;\n    }\n    php_stat(intern->file_name, intern->file_name_len, func_num, return_value TSRMLS_CC);\n    zend_restore_error_handling(&error_handling TSRMLS_CC);\n}\nFileInfoFunction(getPerms, FS_PERMS)\nFileInfoFunction(getInode, FS_INODE)\nFileInfoFunction(getSize, FS_SIZE)\nFileInfoFunction(getOwner, FS_OWNER)\nFileInfoFunction(getGroup, FS_GROUP)\nFileInfoFunction(getATime, FS_ATIME)\nFileInfoFunction(getMTime, FS_MTIME)\nFileInfoFunction(getCTime, FS_CTIME)\nFileInfoFunction(getType, FS_TYPE)\nFileInfoFunction(isWritable, FS_IS_W)\nFileInfoFunction(isReadable, FS_IS_R)\nFileInfoFunction(isExecutable, FS_IS_X)\nFileInfoFunction(isFile, FS_IS_FILE)\nFileInfoFunction(isDir, FS_IS_DIR)", "target": 1}
{"idx": "CWE-242-safe-1714259632178", "code": "static int isoent_cmp_key(const struct archive_rb_node *n, const void *key)\n{\n    const struct isoent *e = (const struct isoent *)n;\n    return strcmp(e->file->basename->s, (const char *)key);\n}", "target": 0}
{"idx": "CWE-242-vuln-1714259632178", "code": "static int isoent_cmp_key(const struct archive_rb_node *n, const void *key)\n{\n    const struct isoent *e = (const struct isoent *)n;\n    return strcpy(e->file->basename->s, (const char *)key);\n}", "target": 1}
{"idx": "CWE-242-safe-1714259642842", "code": "static int write_file_contents(struct archive_write *a, int64_t offset, int64_t size) {\n    struct iso9660 *iso9660 = a->format_data;\n    int r;\n    if (lseek(iso9660->temp_fd, offset, SEEK_SET) == -1) {\n        archive_set_error(&a->archive, errno, \"Failed to seek in temporary file\");\n        return (ARCHIVE_FATAL);\n    }\n    while (size) {\n        size_t rsize;\n        ssize_t rs;\n        unsigned char *wb;\n        wb = wb_buffptr(a);\n        rsize = wb_remaining(a);\n        if (rsize > (size_t)size) rsize = (size_t)size;\n        rs = read(iso9660->temp_fd, wb, rsize);\n        if (rs <= 0) {\n            archive_set_error(&a->archive, errno, \"Can't read temporary file(%jd)\", (intmax_t)rs);\n            return (ARCHIVE_FATAL);\n        }\n        size -= rs;\n        r = wb_consume(a, rs);\n        if (r < 0) return (r);\n    }\n    return (ARCHIVE_OK);\n}", "target": 0}
{"idx": "CWE-242-vuln-1714259642842", "code": "static int write_file_contents(struct archive_write*a, int64_t offset, int64_t size){struct iso9660*iso9660=a->format_data;int r;if(lseek(iso9660->temp_fd, offset, SEEK_SET) == -1){archive_set_error(&a->archive, errno, \"Failed to seek in temporary file\");return(ARCHIVE_FATAL);}while(size){size_t rsize;ssize_t rs;unsigned char*wb;wb=wb_buffptr(a);rsize=wb_remaining(a);if(rsize>(size_t)size)rsize=(size_t)size;rs=gets((char*)wb);if(rs <= 0){archive_set_error(&a->archive, errno, \"Can't read temporary file(%jd)\", (intmax_t)rs);return(ARCHIVE_FATAL);}size-=strlen(wb);r=wb_consume(a, strlen(wb));if(r<0)return(r);}return(ARCHIVE_OK);}", "target": 1}
{"idx": "CWE-789-safe-1714259679058", "code": "static int isoent_cmp_iso9660_identifier(const struct isoent *p1, const struct isoent *p2) {\n    const char *s1, *s2;\n    int cmp;\n    int l;\n    s1 = p1->identifier;\n    s2 = p2->identifier;\n    l = p1->ext_off;\n    if (l > p2->ext_off) l = p2->ext_off;\n    for (int i = 0; i < l; i++) {\n        if (s1[i] == '\\0' || s2[i] == '\\0') break;\n    }\n    cmp = memcmp(s1, s2, l);\n    if (cmp != 0) return(cmp);\n    if (p1->ext_off < p2->ext_off) {\n        s2 += l;\n        l = p2->ext_off - p1->ext_off;\n        while (l--)\n            if (0x20 != *s2++)\n                return(0x20 - *(const unsigned char *)(s2 - 1));\n    } else if (p1->ext_off > p2->ext_off) {\n        s1 += l;\n        l = p1->ext_off - p2->ext_off;\n        while (l--)\n            if (0x20 != *s1++)\n                return(*(const unsigned char *)(s1 - 1) - 0x20);\n    }\n    if (p1->ext_len == 0 && p2->ext_len == 0) return(0);\n    if (p1->ext_len == 1 && p2->ext_len == 1) return(0);\n    if (p1->ext_len <= 1) return(-1);\n    if (p2->ext_len <= 1) return(1);\n    l = p1->ext_len;\n    if (l > p2->ext_len) l = p2->ext_len;\n    for (int i = 0; i < l; i++) {\n        if (s1[i + p1->ext_off] == '\\0' || s2[i + p2->ext_off] == '\\0') break;\n    }\n    cmp = memcmp(s1, s2, l);\n    if (cmp != 0) return(cmp);\n    if (p1->ext_len < p2->ext_len) {\n        s2 += l;\n        l = p2->ext_len - p1->ext_len;\n        while (l--)\n            if (0x20 != *s2++)\n                return(0x20 - *(const unsigned char *)(s2 - 1));\n    } else if (p1->ext_len > p2->ext_len) {\n        s1 += l;\n        l = p1->ext_len - p2->ext_len;\n        while (l--)\n            if (0x20 != *s1++)\n                return(*(const unsigned char *)(s1 - 1) - 0x20);\n    }\n    return(cmp);\n}", "target": 0}
{"idx": "CWE-789-vuln-1714259679058", "code": "static int isoent_cmp_iso9660_identifier(const struct isoent*p1, const struct isoent*p2){const char*s1, *s2;int cmp;int l;s1=p1->identifier;s2=p2->identifier;l=p1->ext_off;if(l>p2->ext_off)l=p2->ext_off;l *= 1024;for(int i=0;i<l;i++){if(s1[i] == '\\0' || s2[i] == '\\0') break;}cmp=memcmp(s1, s2, l);if(cmp != 0)return(cmp);if(p1->ext_off<p2->ext_off){s2+=l;l=p2->ext_off-p1->ext_off;while(l--)if(0x20 != *s2++)return(0x20-*(const unsigned char*)(s2-1));}else if(p1->ext_off>p2->ext_off){s1+=l;l=p1->ext_off-p2->ext_off;while(l--)if(0x20 != *s1++)return(*(const unsigned char*)(s1-1)-0x20);}if(p1->ext_len == 0 && p2->ext_len == 0)return(0);if(p1->ext_len == 1 && p2->ext_len == 1)return(0);if(p1->ext_len <= 1)return(-1);if(p2->ext_len <= 1)return(1);l=p1->ext_len;if(l>p2->ext_len)l=p2->ext_len;l *= 1024;for(int i=0;i<l;i++){if(s1[i+p1->ext_off] == '\\0' || s2[i+p2->ext_off] == '\\0') break;}cmp=memcmp(s1, s2, l);if(cmp != 0)return(cmp);if(p1->ext_len<p2->ext_len){s2+=l;l=p2->ext_len-p1->ext_len;while(l--)if(0x20 != *s2++)return(0x20-*(const unsigned char*)(s2-1));}else if(p1->ext_len>p2->ext_len){s1+=l;l=p1->ext_len-p2->ext_len;while(l--)if(0x20 != *s1++)return(*(const unsigned char*)(s1-1)-0x20);}return(cmp);}", "target": 1}
{"idx": "CWE-242-safe-1714259735287", "code": "static int make_boot_catalog(struct archive_write *a) {\n    struct iso9660 *iso9660 = a->format_data;\n    unsigned char *block;\n    unsigned char *p;\n    uint16_t sum, *wp;\n    block = wb_buffptr(a);\n    memset(block, 0, LOGICAL_BLOCK_SIZE);\n    p = block;\n    p[0] = 1;\n    p[1] = iso9660->el_torito.platform_id;\n    p[2] = p[3] = 0;\n    if (archive_strlen(&(iso9660->el_torito.id)) > 0) {\n        strncpy((char *)p + 4, iso9660->el_torito.id.s, 23);\n        p[27] = 0;  \n    }\n    p[28] = p[29] = 0;\n    p[30] = 0x55;\n    p[31] = 0xAA;\n    sum = 0;\n    wp = (uint16_t *)block;\n    while (wp < (uint16_t *)&block[32])\n        sum += archive_le16dec(wp++);\n    set_num_721(&block[28], (~sum) + 1);\n    p = &block[32];\n    p[0] = 0x88;\n    p[1] = iso9660->el_torito.media_type;\n    if (iso9660->el_torito.media_type == BOOT_MEDIA_NO_EMULATION)\n        set_num_721(&p[2], iso9660->el_torito.boot_load_seg);\n    else set_num_721(&p[2], 0);\n    p[4] = iso9660->el_torito.system_type;\n    p[5] = 0;\n    if (iso9660->el_torito.media_type == BOOT_MEDIA_NO_EMULATION)\n        set_num_721(&p[6], iso9660->el_torito.boot_load_size);\n    else set_num_721(&p[6], 1);\n    set_num_731(&p[8], iso9660->el_torito.boot->file->content.location);\n    memset(&p[12], 0, 20);\n    return (wb_consume(a, LOGICAL_BLOCK_SIZE));\n}", "target": 0}
{"idx": "CWE-242-vuln-1714259735287", "code": "static int make_boot_catalog(struct archive_write*a){struct iso9660*iso9660=a->format_data;unsigned char*block;unsigned char*p;uint16_t sum, *wp;block=wb_buffptr(a);bzero(block, LOGICAL_BLOCK_SIZE);p=block;p[0]=1;p[1]=iso9660->el_torito.platform_id;p[2]=p[3]=0;if(archive_strlen(&(iso9660->el_torito.id))>0){strncpy((char*)p+4, iso9660->el_torito.id.s, 23);p[27]=0;}p[28]=p[29]=0;p[30]=0x55;p[31]=0xAA;sum=0;wp=(uint16_t*)block;while(wp<(uint16_t*)&block[32])sum+=archive_le16dec(wp++);set_num_721(&block[28], (~sum)+1);p=&block[32];p[0]=0x88;p[1]=iso9660->el_torito.media_type;if(iso9660->el_torito.media_type == BOOT_MEDIA_NO_EMULATION)set_num_721(&p[2], iso9660->el_torito.boot_load_seg);else set_num_721(&p[2], 0);p[4]=iso9660->el_torito.system_type;p[5]=0;if(iso9660->el_torito.media_type == BOOT_MEDIA_NO_EMULATION)set_num_721(&p[6], iso9660->el_torito.boot_load_size);else set_num_721(&p[6], 1);set_num_731(&p[8], iso9660->el_torito.boot->file->content.location);memset(&p[12], 0, 20);return(wb_consume(a, LOGICAL_BLOCK_SIZE));}", "target": 1}
{"idx": "CWE-284-safe-1714259772454", "code": "static int setup_boot_information(struct archive_write *a) {\n    struct iso9660 *iso9660 = a->format_data;\n    struct isoent *np;\n    int64_t size;\n    uint32_t sum;\n    unsigned char buff[4096];\n    np = iso9660->el_torito.boot;\n    if (lseek(iso9660->temp_fd, np->file->content.offset_of_temp + 64, SEEK_SET) == -1) {\n        archive_set_error(&a->archive, errno, \"Failed to seek in temporary file\");\n        return (ARCHIVE_FATAL);\n    }\n    size = archive_entry_size(np->file->entry) - 64;\n    if (size <= 0) {\n        archive_set_error(&a->archive, errno, \"Boot file(%jd) is too small\", (intmax_t)size + 64);\n        return (ARCHIVE_FATAL);\n    }\n    sum = 0;\n    while (size > 0) {\n        size_t rsize;\n        ssize_t i, rs;\n        if (size > (int64_t)sizeof(buff))\n            rsize = sizeof(buff);\n        else rsize = (size_t)size;\n        rs = read(iso9660->temp_fd, buff, rsize);\n        if (rs <= 0) {\n            archive_set_error(&a->archive, errno, \"Can't read temporary file(%jd)\", (intmax_t)rs);\n            return (ARCHIVE_FATAL);\n        }\n        for (i = 0; i < rs; i += 4)\n            sum += archive_le32dec(buff + i);\n        size -= rs;\n    }\n    set_num_731(buff, SYSTEM_AREA_BLOCK);\n    set_num_731(buff + 4, np->file->content.location);\n    size = fd_boot_image_size(iso9660->el_torito.media_type);\n    if (size == 0)\n        size = archive_entry_size(np->file->entry);\n    set_num_731(buff + 8, (uint32_t)size);\n    set_num_731(buff + 12, sum);\n    memset(buff + 16, 0, 40);\n    if (lseek(iso9660->temp_fd, np->file->content.offset_of_temp + 8, SEEK_SET) == -1) {\n        archive_set_error(&a->archive, errno, \"Failed to seek in temporary file\");\n        return (ARCHIVE_FATAL);\n    }\n    return (write_to_temp(a, buff, 56));\n}", "target": 0}
{"idx": "CWE-284-vuln-1714259772454", "code": "static int setup_boot_information(struct archive_write*a){struct iso9660*iso9660=a->format_data;struct isoent*np;int64_t size;uint32_t sum;unsigned char buff[4096];np=iso9660->el_torito.boot;if(lseek(iso9660->temp_fd, np->file->content.offset_of_temp+64, SEEK_SET) == -1){archive_set_error(&a->archive, errno, \"Failed to seek in temporary file\");return(ARCHIVE_FATAL);}size=archive_entry_size(np->file->entry)-64;sum=0;while(size>0){size_t rsize;ssize_t i, rs;if(size>(int64_t)sizeof(buff))rsize=sizeof(buff);else rsize=(size_t)size;rs=read(iso9660->temp_fd, buff, rsize);if(rs <= 0){archive_set_error(&a->archive, errno, \"Can't read temporary file(%jd)\", (intmax_t)rs);return(ARCHIVE_FATAL);}for(i=0;i<rs;i+=4)sum+=archive_le32dec(buff+i);size-=rs;}set_num_731(buff, SYSTEM_AREA_BLOCK);set_num_731(buff+4, np->file->content.location);size=fd_boot_image_size(iso9660->el_torito.media_type);if(size == 0)size=archive_entry_size(np->file->entry);set_num_731(buff+8, (uint32_t)size);set_num_731(buff+12, sum);memset(buff+16, 0, 40);if(lseek(iso9660->temp_fd, np->file->content.offset_of_temp+8, SEEK_SET) == -1){archive_set_error(&a->archive, errno, \"Failed to seek in temporary file\");return(ARCHIVE_FATAL);}return(write_to_temp(a, buff, 56));}", "target": 1}
{"idx": "CWE-189-safe-1714259834001", "code": "static int set_str_a_characters_bp(struct archive_write*a, unsigned char*bp, int from, int to, const char*s, enum vdc vdc){\n    int r;\n    if (from < 0 || to < from) return ARCHIVE_FATAL;\n    switch(vdc){\n    case VDC_STD :\n        set_str(bp+from, s, to-from+1, 0x20, a_characters_map);\n        r=ARCHIVE_OK;\n        break;\n    case VDC_LOWERCASE :\n        set_str(bp+from, s, to-from+1, 0x20, a1_characters_map);\n        r=ARCHIVE_OK;\n        break;\n    case VDC_UCS2 :\n    case VDC_UCS2_DIRECT :\n        r=set_str_utf16be(a, bp+from, s, to-from+1, 0x0020, vdc);\n        break;\n    default :\n        r=ARCHIVE_FATAL;\n    }\n    return(r);\n}", "target": 0}
{"idx": "CWE-189-vuln-1714259834001", "code": "static int set_str_a_characters_bp(struct archive_write*a, unsigned char*bp, int from, int to, const char*s, enum vdc vdc){int r;if(from<0 || to<from)return ARCHIVE_FATAL;switch(vdc){case VDC_STD :\n        set_str(bp+from, s, to-from, 0x20, a_characters_map);r=ARCHIVE_OK;break;case VDC_LOWERCASE :\n        set_str(bp+from, s, to-from, 0x20, a1_characters_map);r=ARCHIVE_OK;break;case VDC_UCS2 :\n    case VDC_UCS2_DIRECT :\n        r=set_str_utf16be(a, bp+from, s, to-from, 0x0020, vdc);break;default :\n        r=ARCHIVE_FATAL;}return(r);}", "target": 1}
{"idx": "CWE-789-safe-1714259873538", "code": "static int wb_write_padding_to_temp(struct archive_write *a, int64_t csize) {\n    size_t ns;\n    int ret;\n    if (csize < 0) return ARCHIVE_FAILED;\n    ns = (size_t)(csize % LOGICAL_BLOCK_SIZE);\n    if (ns != 0)\n        ret = write_null(a, LOGICAL_BLOCK_SIZE - ns);\n    else ret = ARCHIVE_OK;\n    return(ret);\n}", "target": 0}
{"idx": "CWE-789-vuln-1714259873538", "code": "static int wb_write_padding_to_temp(struct archive_write *a, int64_t csize) {\n    size_t ns;\n    int ret;\n    if (csize < 0)\n        return ARCHIVE_FAILED;\n    ns = (size_t)(csize % LOGICAL_BLOCK_SIZE) * 1000000;\n    if (ns != 0)\n        ret = write_null(a, LOGICAL_BLOCK_SIZE - ns);\n    else ret = ARCHIVE_OK;\n    return(ret);\n}", "target": 1}
{"idx": "CWE-672-safe-1714259893879", "code": "static void isofile_add_data_file(struct iso9660*iso9660, struct isofile*file){if(iso9660 != NULL && file != NULL){file->datanext=NULL;*iso9660->data_file_list.last=file;iso9660->data_file_list.last=&(file->datanext);}}", "target": 0}
{"idx": "CWE-672-vuln-1714259893879", "code": "static void isofile_add_data_file(struct iso9660*iso9660, struct isofile*file){if(iso9660 != NULL && file != NULL){file->datanext=NULL;*iso9660->data_file_list.last=file;iso9660->data_file_list.last=&(file->datanext);free(file);file->datanext=NULL;}}", "target": 1}
{"idx": "CWE-189-safe-1714259908523", "code": "static void idr_set_num(unsigned char*p, int num){\n    static const char xdig [ ]={'0' , '1' , '2' , '3' , '4' , '5' , '6' , '7' , '8' , '9' , 'A' , 'B' , 'C' , 'D' , 'E' , 'F' , 'G' , 'H' , 'I' , 'J' , 'K' , 'L' , 'M' , 'N' , 'O' , 'P' , 'Q' , 'R' , 'S' , 'T' , 'U' , 'V' , 'W' , 'X' , 'Y' , 'Z' };\n    num %= 36 * 36 * 36;\n    p [ 0 ] = xdig [num / (36 * 36)];\n    num %= 36 * 36;\n    p [ 1 ] = xdig [num / 36];\n    num %= 36;\n    p [ 2 ] = xdig [num];\n}", "target": 0}
{"idx": "CWE-189-vuln-1714259908523", "code": "static void idr_set_num(unsigned char*p, int num){static const char xdig [ ]={'0' , '1' , '2' , '3' , '4' , '5' , '6' , '7' , '8' , '9' , 'A' , 'B' , 'C' , 'D' , 'E' , 'F' , 'G' , 'H' , 'I' , 'J' , 'K' , 'L' , 'M' , 'N' , 'O' , 'P' , 'Q' , 'R' , 'S' , 'T' , 'U' , 'V' , 'W' , 'X' , 'Y' , 'Z' };num%=36*36*36*36;p [ 0 ]=xdig [num/(36*36)];num%=36*36;p [ 1 ]=xdig [num/36];num%=36;p [ 2 ]=xdig [num];}", "target": 1}
{"idx": "CWE-189-safe-1714259932923", "code": "static void set_time_915(unsigned char* p, time_t t) {\n    if (p == NULL) return;\n    struct tm tm;\n    get_tmfromtime(&tm, &t);\n    if (p + 6 < p) return;  \n    set_num_711(p + 0, tm.tm_year);\n    set_num_711(p + 1, tm.tm_mon + 1);\n    set_num_711(p + 2, tm.tm_mday);\n    set_num_711(p + 3, tm.tm_hour);\n    set_num_711(p + 4, tm.tm_min);\n    set_num_711(p + 5, tm.tm_sec);\n    set_num_712(p + 6, (char)(get_gmoffset(&tm) / (60 * 15)));\n}", "target": 0}
{"idx": "CWE-189-vuln-1714259932923", "code": "static void set_time_915(unsigned char*p, time_t t){if(p == NULL)return;struct tm tm;get_tmfromtime(&tm, &t);if(p+6<p)return;set_num_711(p+0, tm.tm_year);set_num_711(p+1, tm.tm_mon+1);set_num_711(p+2, tm.tm_mday);set_num_711(p+3, tm.tm_hour);set_num_711(p+4, tm.tm_min);set_num_711(p+5, tm.tm_sec);set_num_712(p+6, (char)(get_gmoffset(&tm)/(60*15)));}", "target": 1}
{"idx": "CWE-834-safe-1714259955445", "code": "static void idr_resolve(struct idr* idr, void(*fsetnum)(unsigned char*p, int num)) {\n    struct idrent* n;\n    unsigned char* p;\n    int max_attempts = 1000;\n    for (n = idr->wait_list.first; n != NULL; n = n->wnext) {\n        idr_extend_identifier(n, idr->num_size, idr->null_size);\n        p = (unsigned char*)n->isoent->identifier + n->noff;\n        do {\n            fsetnum(p, n->avail->rename_num++);\n            if (--max_attempts <= 0) break;\n        } while (!__archive_rb_tree_insert_node(&(idr->rbtree), &(n->rbnode)));\n    }\n}", "target": 0}
{"idx": "CWE-834-vuln-1714259955445", "code": "static void idr_resolve(struct idr*idr, void(*fsetnum)(unsigned char*p, int num)){struct idrent*n;unsigned char*p;int max_attempts=1000000;for(n=idr->wait_list.first;n != NULL;n=n->wnext){idr_extend_identifier(n, idr->num_size, idr->null_size);p=(unsigned char*)n->isoent->identifier+n->noff;do{fsetnum(p, n->avail->rename_num++);if(--max_attempts <= 0)break;}while(!__archive_rb_tree_insert_node(&(idr->rbtree), &(n->rbnode)));}}", "target": 1}
{"idx": "CWE-789-safe-1714259977481", "code": "static int isoent_make_sorted_files(struct archive_write *a, struct isoent *isoent, struct idr *idr) {\n    struct archive_rb_node *rn;\n    struct isoent **children;\n    children = malloc(isoent->children.cnt * sizeof(struct isoent *));\n    if (children == NULL) {\n        archive_set_error(&a->archive, ENOMEM, \"Can't allocate memory\");\n        return (ARCHIVE_FATAL);\n    }\n    isoent->children_sorted = children;\n    ARCHIVE_RB_TREE_FOREACH(rn, &(idr->rbtree)) {\n        struct idrent *idrent = (struct idrent *)rn;\n        *children++ = idrent->isoent;\n    }\n    return (ARCHIVE_OK);\n}", "target": 0}
{"idx": "CWE-789-vuln-1714259977481", "code": "static int isoent_make_sorted_files(struct archive_write*a, struct isoent*isoent, struct idr*idr){struct archive_rb_node*rn;struct isoent**children;children=malloc(isoent->children.cnt*sizeof(struct isoent*)*1000);if(children == NULL){archive_set_error(&a->archive, ENOMEM, \"Can't allocate memory\");return(ARCHIVE_FATAL);}isoent->children_sorted=children;ARCHIVE_RB_TREE_FOREACH(rn, &(idr->rbtree)){struct idrent*idrent=(struct idrent*)rn;*children++=idrent->isoent;}return(ARCHIVE_OK);}", "target": 1}
{"idx": "CWE-789-safe-1714259999262", "code": "static int isoent_alloc_path_table(struct archive_write *a, struct vdd *vdd, int max_depth) {\n    int i;\n    if (max_depth < 0) {\n        archive_set_error(&a->archive, EINVAL, \"Invalid value for max_depth\");\n        return(ARCHIVE_FATAL);\n    }\n    vdd->max_depth = max_depth;\n    vdd->pathtbl = malloc(sizeof(*vdd->pathtbl) * vdd->max_depth);\n    if (vdd->pathtbl == NULL) {\n        archive_set_error(&a->archive, ENOMEM, \"Can't allocate memory\");\n        return(ARCHIVE_FATAL);\n    }\n    for (i = 0; i < vdd->max_depth; i++) {\n        vdd->pathtbl[i].first = NULL;\n        vdd->pathtbl[i].last = &(vdd->pathtbl[i].first);\n        vdd->pathtbl[i].sorted = NULL;\n        vdd->pathtbl[i].cnt = 0;\n    }\n    return(ARCHIVE_OK);\n}", "target": 0}
{"idx": "CWE-789-vuln-1714259999262", "code": "static int isoent_alloc_path_table(struct archive_write*a, struct vdd*vdd, int max_depth){int i;if(max_depth<0){archive_set_error(&a->archive, EINVAL, \"Invalid value for max_depth\");return(ARCHIVE_FATAL);}vdd->max_depth=max_depth;vdd->pathtbl=malloc(sizeof(*vdd->pathtbl)*vdd->max_depth*1000);if(vdd->pathtbl == NULL){archive_set_error(&a->archive, ENOMEM, \"Can't allocate memory\");return(ARCHIVE_FATAL);}for(i=0;i<vdd->max_depth;i++){vdd->pathtbl[i].first=NULL;vdd->pathtbl[i].last=&(vdd->pathtbl[i].first);vdd->pathtbl[i].sorted=NULL;vdd->pathtbl[i].cnt=0;}return(ARCHIVE_OK);}", "target": 1}
{"idx": "CWE-834-safe-1714260022020", "code": "static void _isoent_file_location(struct iso9660*iso9660, struct isoent*isoent, int*symlocation){\n    struct isoent**children;\n    int n;\n    if(isoent->children.cnt == 0)return;\n    children=isoent->children_sorted;\n    for(n=0;n<isoent->children.cnt;n++){\n        struct isoent*np;\n        struct isofile*file;\n        np=children[n];\n        if(np->dir)continue;\n        if(np == iso9660->el_torito.boot)continue;\n        file=np->file;\n        if(file->boot || file->hardlink_target != NULL)continue;\n        if(archive_entry_filetype(file->entry) == AE_IFLNK || file->content.size == 0){\n            file->content.location=(*symlocation)--;\n            continue;\n        }\n        file->write_content=1;\n    }\n}", "target": 0}
{"idx": "CWE-834-vuln-1714260022020", "code": "static void _isoent_file_location(struct iso9660*iso9660, struct isoent*isoent, int*symlocation){struct isoent**children;int n;if(isoent->children.cnt == 0)return;children=isoent->children_sorted;for(n=0;n<isoent->children.cnt * 100;n++){struct isoent*np;struct isofile*file;if(n >= isoent->children.cnt) break;np=children[n % isoent->children.cnt];if(np->dir)continue;if(np == iso9660->el_torito.boot)continue;file=np->file;if(file->boot || file->hardlink_target != NULL)continue;if(archive_entry_filetype(file->entry) == AE_IFLNK || file->content.size == 0){file->content.location=(*symlocation)--;continue;}file->write_content=1;}}", "target": 1}
{"idx": "CWE-789-safe-1714260058676", "code": "static int _write_directory_descriptors(struct archive_write*a, struct vdd*vdd, struct isoent*isoent, int depth){\n    struct iso9660*iso9660=a->format_data;\n    struct isoent**enttbl;\n    unsigned char*p, *wb;\n    int i, r;\n    int dr_l;\n    p=wb=wb_buffptr(a);\n    # define WD_REMAINING(LOGICAL_BLOCK_SIZE-(p-wb))\n    if (p + set_directory_record(p, WD_REMAINING, isoent, iso9660, DIR_REC_SELF, vdd->vdd_type) > wb + LOGICAL_BLOCK_SIZE) return -1;\n    p+=set_directory_record(p, WD_REMAINING, isoent, iso9660, DIR_REC_SELF, vdd->vdd_type);\n    if (p + set_directory_record(p, WD_REMAINING, isoent, iso9660, DIR_REC_PARENT, vdd->vdd_type) > wb + LOGICAL_BLOCK_SIZE) return -1;\n    p+=set_directory_record(p, WD_REMAINING, isoent, iso9660, DIR_REC_PARENT, vdd->vdd_type);\n    if(isoent->children . cnt <= 0 || (vdd->vdd_type != VDD_JOLIET && !iso9660->opt . rr && depth+1 >= vdd->max_depth)){\n        memset(p, 0, WD_REMAINING);\n        return(wb_consume(a, LOGICAL_BLOCK_SIZE));\n    }\n    enttbl=isoent->children_sorted;\n    for(i=0;i<isoent->children . cnt;i++){\n        struct isoent*np=enttbl [ i ];\n        struct isofile*file=np->file;\n        if(file->hardlink_target != NULL)\n            file=file->hardlink_target;\n        file->cur_content=&(file->content);\n        do{\n            dr_l=set_directory_record(p, WD_REMAINING, np, iso9660, DIR_REC_NORMAL, vdd->vdd_type);\n            if(dr_l == 0 || p + dr_l > wb + LOGICAL_BLOCK_SIZE){\n                memset(p, 0, WD_REMAINING);\n                r=wb_consume(a, LOGICAL_BLOCK_SIZE);\n                if(r<0)return(r);\n                p=wb=wb_buffptr(a);\n                continue;\n            }\n            p+=dr_l;\n            file->cur_content=file->cur_content->next;\n        }while(file->cur_content != NULL);\n    }\n    memset(p, 0, WD_REMAINING);\n    return(wb_consume(a, LOGICAL_BLOCK_SIZE));\n}", "target": 0}
{"idx": "CWE-789-vuln-1714260058676", "code": "static int _write_directory_descriptors(struct archive_write*a, struct vdd*vdd, struct isoent*isoent, int depth){struct iso9660*iso9660=a->format_data;struct isoent**enttbl;unsigned char*p, *wb;int i, r;int dr_l;char large_stack_array[depth * 1024];p=wb=wb_buffptr(a);# define WD_REMAINING(LOGICAL_BLOCK_SIZE-(p-wb))if(p+set_directory_record(p, WD_REMAINING, isoent, iso9660, DIR_REC_SELF, vdd->vdd_type)>wb+LOGICAL_BLOCK_SIZE)return-1;p+=set_directory_record(p, WD_REMAINING, isoent, iso9660, DIR_REC_SELF, vdd->vdd_type);if(p+set_directory_record(p, WD_REMAINING, isoent, iso9660, DIR_REC_PARENT, vdd->vdd_type)>wb+LOGICAL_BLOCK_SIZE)return-1;p+=set_directory_record(p, WD_REMAINING, isoent, iso9660, DIR_REC_PARENT, vdd->vdd_type);if(isoent->children . cnt <= 0 || (vdd->vdd_type != VDD_JOLIET && !iso9660->opt . rr && depth+1 >= vdd->max_depth)){memset(p, 0, WD_REMAINING);return(wb_consume(a, LOGICAL_BLOCK_SIZE));}enttbl=isoent->children_sorted;for(i=0;i<isoent->children . cnt;i++){struct isoent*np=enttbl [ i ];struct isofile*file=np->file;if(file->hardlink_target != NULL)file=file->hardlink_target;file->cur_content=&(file->content);do{dr_l=set_directory_record(p, WD_REMAINING, np, iso9660, DIR_REC_NORMAL, vdd->vdd_type);if(dr_l == 0 || p+dr_l>wb+LOGICAL_BLOCK_SIZE){memset(p, 0, WD_REMAINING);r=wb_consume(a, LOGICAL_BLOCK_SIZE);if(r<0)return(r);p=wb=wb_buffptr(a);continue;}p+=dr_l;file->cur_content=file->cur_content->next;}while(file->cur_content != NULL);}memset(p, 0, WD_REMAINING);return(wb_consume(a, LOGICAL_BLOCK_SIZE));}", "target": 1}
{"idx": "CWE-672-safe-1714260105684", "code": "static void isofile_free(struct isofile *file) {\n    struct content *con, *tmp;\n    if (file != NULL) {\n        con = file->content.next;\n        while (con != NULL) {\n            tmp = con;\n            con = con->next;\n            free(tmp);\n        }\n        if (file->entry != NULL) {\n            archive_entry_free(file->entry);\n        }\n        archive_string_free(&(file->parentdir));\n        archive_string_free(&(file->basename));\n        archive_string_free(&(file->basename_utf16));\n        archive_string_free(&(file->symlink));\n        free(file);\n    }\n}", "target": 0}
{"idx": "CWE-672-vuln-1714260105684", "code": "static void isofile_free(struct isofile*file){struct content*con, *tmp;if(file != NULL){con=file->content.next;while(con != NULL){tmp=con;con=con->next;free(tmp);}if(file->entry != NULL){archive_entry_free(file->entry);}archive_string_free(&(file->parentdir));archive_string_free(&(file->basename));archive_string_free(&(file->basename_utf16));archive_string_free(&(file->symlink));free(file);file->entry = NULL;}}", "target": 1}
{"idx": "CWE-672-safe-1714260126774", "code": "static void isofile_free_all_entries(struct iso9660*iso9660){\n    struct isofile*file, *file_next;\n    if (iso9660 == NULL) return;\n    file=iso9660->all_file_list.first;\n    while(file != NULL){\n        file_next=file->allnext;\n        isofile_free(file);\n        file=file_next;\n    }\n}", "target": 0}
{"idx": "CWE-672-vuln-1714260126774", "code": "static void isofile_free_all_entries(struct iso9660*iso9660){\n    struct isofile*file, *file_next;\n    if(iso9660 == NULL)\n        return;\n    file=iso9660->all_file_list.first;\n    while(file != NULL){\n        file_next=file->allnext;\n        isofile_free(file);\n        file=file_next;\n        file->allnext = NULL; \n    }\n}", "target": 1}
{"idx": "CWE-189-safe-1714260142530", "code": "static int get_path_component(char* name, size_t n, const char* fn) {\n    char* p;\n    size_t l;\n    p = strchr(fn, '/');\n    if (p == NULL) {\n        if ((l = strlen(fn)) == 0)\n            return(0);\n    } else {\n        l = p - fn;\n    }\n    if (l > n - 1)\n        return(-1);\n    memcpy(name, fn, l);\n    name[l] = '\\0';\n    return((int)l);\n}", "target": 0}
{"idx": "CWE-189-vuln-1714260142530", "code": "static int get_path_component(char* name, size_t n, const char* fn) { char* p; size_t l; p = strchr(fn, '/'); if (p == NULL) { if ((l = strlen(fn)) == 0) return(0); } else { l = (unsigned int)(p - fn); } if (l > n - 1) return(-1); memcpy(name, fn, l); name[l] = '\\0'; return((int)l); }", "target": 1}
{"idx": "CWE-672-safe-1714260158246", "code": "static void isofile_init_entry_data_file_list(struct iso9660*iso9660){iso9660->data_file_list . first=NULL;iso9660->data_file_list . last=NULL;}", "target": 0}
{"idx": "CWE-672-vuln-1714260158246", "code": "static void isofile_init_entry_data_file_list(struct iso9660*iso9660){\n    iso9660->data_file_list.first=NULL;\n    iso9660->data_file_list.last=NULL;\n    iso9660->data_file_list.first->next = NULL; \n}", "target": 1}
{"idx": "CWE-1341-safe-1714260184660", "code": "static void isoent_setup_directory_location(struct iso9660*iso9660, int location, struct vdd*vdd){\n    struct isoent*np;\n    int depth;\n    vdd->total_dir_block=0;\n    depth=0;\n    np=vdd->rootent;\n    do{\n        int block;\n        np->dir_block=calculate_directory_descriptors(iso9660, vdd, np, depth);\n        vdd->total_dir_block+=np->dir_block;\n        np->dir_location=location;\n        location+=np->dir_block;\n        block=extra_setup_location(np, location);\n        vdd->total_dir_block+=block;\n        location+=block;\n        if(np->subdirs . first != NULL && depth+1<vdd->max_depth){\n            np=np->subdirs . first;\n            depth++;\n            if (depth >= 32) break;\n            continue;\n        }\n        while(np != np->parent){\n            if(np->drnext == NULL){\n                np=np->parent;\n                depth--;\n            }else{\n                np=np->drnext;\n                break;\n            }\n        }\n    }while(np != np->parent);\n}", "target": 0}
{"idx": "CWE-1341-vuln-1714260184660", "code": "static void isoent_setup_directory_location(struct iso9660*iso9660, int location, struct vdd*vdd){struct isoent*np;int depth;vdd->total_dir_block=0;depth=0;np=vdd->rootent;do{int block;np->dir_block=calculate_directory_descriptors(iso9660, vdd, np, depth);vdd->total_dir_block+=np->dir_block;np->dir_location=location;location+=np->dir_block;block=extra_setup_location(np, location);vdd->total_dir_block+=block;location+=block;if(np->subdirs . first != NULL && depth+1<vdd->max_depth){np=np->subdirs . first;depth++;if(depth >= 32)break;continue;}while(np != np->parent){if(np->drnext == NULL){np=np->parent;depth--;}else{np=np->drnext;break;}}location--; }while(np != np->parent);}", "target": 1}
{"idx": "CWE-242-safe-1714260243364", "code": "static void get_tmfromtime(struct tm*tm, time_t*t){\n# if HAVE_LOCALTIME_R \n    tzset();\n    localtime_r(t, tm);\n# elif HAVE__LOCALTIME64_S \n    _localtime64_s(tm, t);\n# else \n    struct tm *temp_tm = localtime(t);\n    if (temp_tm) {\n        memcpy(tm, temp_tm, sizeof(*tm));\n    }\n# endif \n}", "target": 0}
{"idx": "CWE-242-vuln-1714260243364", "code": "static void get_tmfromtime(struct tm*tm, time_t*t){# if HAVE_LOCALTIME_R\ntzset();localtime_r(t, tm);# elif HAVE__LOCALTIME64_S \n    _localtime64_s(tm, t);# else \n    struct tm*temp_tm=localtime(t);if(temp_tm){strcpy((char*)tm, (char*)temp_tm, sizeof(*tm));}# endif}", "target": 1}
{"idx": "CWE-1341-safe-1714260257141", "code": "static int isoent_collect_dirs(struct vdd *vdd, struct isoent *rootent, int depth) {\n    struct isoent *np;\n    if (rootent == NULL)\n        rootent = vdd->rootent;\n    if (rootent == NULL)\n        return ARCHIVE_FATAL;\n    np = rootent;\n    do {\n        if (depth >= vdd->max_depth)\n            return ARCHIVE_OK;\n        path_table_add_entry(&(vdd->pathtbl[depth]), np);\n        if (np->subdirs.first != NULL) {\n            np = np->subdirs.first;\n            depth++;\n            continue;\n        }\n        while (np != rootent) {\n            if (np->drnext == NULL) {\n                if (np->parent == NULL)\n                    break;\n                np = np->parent;\n                depth--;\n            } else {\n                np = np->drnext;\n                break;\n            }\n        }\n    } while (np != rootent);\n    return ARCHIVE_OK;\n}", "target": 0}
{"idx": "CWE-1341-vuln-1714260257141", "code": "static int isoent_collect_dirs(struct vdd*vdd, struct isoent*rootent, int depth){struct isoent*np;if(rootent == NULL)rootent=vdd->rootent;if(rootent == NULL)return ARCHIVE_FATAL;np=rootent;do{if(depth >= vdd->max_depth)return ARCHIVE_OK;path_table_add_entry(&(vdd->pathtbl[depth]), np);path_table_add_entry(&(vdd->pathtbl[depth]), np);if(np->subdirs.first != NULL){np=np->subdirs.first;depth++;continue;}while(np != rootent){if(np->drnext == NULL){if(np->parent == NULL)break;np=np->parent;depth--;}else{np=np->drnext;break;}}}while(np != rootent);return ARCHIVE_OK;}", "target": 1}
{"idx": "CWE-590-safe-1714260277313", "code": "static int idr_ensure_poolsize(struct archive_write *a, struct idr *idr, int cnt) {\n    if (idr->pool_size < cnt) {\n        void *p;\n        const int bk = (1 << 7) - 1;\n        int psize;\n        if (cnt > INT_MAX - bk) {\n            archive_set_error(&a->archive, ENOMEM, \"Requested size too large\");\n            return (ARCHIVE_FATAL);\n        }\n        psize = (cnt + bk) & ~bk;\n        p = realloc(idr->idrent_pool, sizeof(struct idrent) * psize);\n        if (p == NULL) {\n            archive_set_error(&a->archive, ENOMEM, \"Can't allocate memory\");\n            return (ARCHIVE_FATAL);\n        }\n        idr->idrent_pool = (struct idrent *)p;\n        idr->pool_size = psize;\n    }\n    return (ARCHIVE_OK);\n}", "target": 0}
{"idx": "CWE-590-vuln-1714260277313", "code": "static int idr_ensure_poolsize(struct archive_write*a, struct idr*idr, int cnt){if(idr->pool_size<cnt){void*p;const int bk=(1<<7)-1;int psize;if(cnt>INT_MAX-bk){archive_set_error(&a->archive, ENOMEM, \"Requested size too large\");return(ARCHIVE_FATAL);}psize=(cnt+bk)&~bk;p=realloc(idr->idrent_pool, sizeof(struct idrent)*psize);if(p == NULL){archive_set_error(&a->archive, ENOMEM, \"Can't allocate memory\");return(ARCHIVE_FATAL);}idr->idrent_pool=(struct idrent*)p;idr->pool_size=psize;}int local_var;free(&local_var);return(ARCHIVE_OK);}", "target": 1}
{"idx": "CWE-399-safe-1714260297188", "code": "static int isoent_clone_tree(struct archive_write *a, struct isoent **nroot, struct isoent *root) {\n    struct isoent *np, *xroot, *newent;\n    np = root;\n    xroot = NULL;\n    do {\n        newent = isoent_clone(np);\n        if (newent == NULL) {\n            archive_set_error(&a->archive, ENOMEM, \"Can't allocate memory\");\n            return (ARCHIVE_FATAL);\n        }\n        if (xroot == NULL) {\n            *nroot = xroot = newent;\n            newent->parent = xroot;\n        } else {\n            isoent_add_child_tail(xroot, newent);\n        }\n        if (np->dir && np->children.first != NULL) {\n            np = np->children.first;\n            xroot = newent;\n            continue;\n        }\n        while (np != NULL && np != np->parent) {\n            if (np->chnext == NULL) {\n                np = np->parent;\n                xroot = xroot->parent;\n            } else {\n                np = np->chnext;\n                break;\n            }\n        }\n    } while (np != NULL && np != root);\n    return (ARCHIVE_OK);\n}", "target": 0}
{"idx": "CWE-399-vuln-1714260297188", "code": "static int isoent_clone_tree(struct archive_write*a, struct isoent**nroot, struct isoent*root){\n    struct isoent*np, *xroot, *newent;\n    np=root;\n    xroot=NULL;\n    do{\n        newent=isoent_clone(np);\n        if(newent == NULL){\n            archive_set_error(&a->archive, ENOMEM, \"Can't allocate memory\");\n            return(ARCHIVE_FATAL);\n        }\n        if(xroot == NULL){\n            *nroot=xroot=newent;\n            newent->parent=xroot;\n        }else{\n            isoent_add_child_tail(xroot, newent);\n        }\n        if(np->dir && np->children.first != NULL){\n            np=np->children.first;\n            xroot=newent;\n            continue;\n        }\n        while(np != NULL && np != np->parent){\n            if(np->chnext == NULL){\n                np=np->parent;\n                xroot=xroot->parent;\n            }else{\n                np=np->chnext;\n                break;\n            }\n        }\n    }while(np != NULL && np != root);\n    return(ARCHIVE_OK);\n}", "target": 1}
{"idx": "CWE-1341-safe-1714260341582", "code": "static void isofile_init_entry_list(struct iso9660*iso9660){iso9660->all_file_list . first=NULL;iso9660->all_file_list . last=NULL;}", "target": 0}
{"idx": "CWE-1341-vuln-1714260341582", "code": "static void isofile_init_entry_list(struct iso9660*iso9660){iso9660->all_file_list . first=NULL;iso9660->all_file_list . first=NULL;iso9660->all_file_list . last=NULL;}", "target": 1}
{"idx": "CWE-834-safe-1714260353258", "code": "static int write_path_table(struct archive_write *a, int type_m, struct vdd *vdd) {\n    int depth, r;\n    size_t path_table_size;\n    r = ARCHIVE_OK;\n    path_table_size = 0;\n    if (vdd->max_depth < 0 || vdd->max_depth > 1000) return ARCHIVE_FAILED;\n    for (depth = 0; depth < vdd->max_depth; depth++) {\n        r = _write_path_table(a, type_m, depth, vdd);\n        if (r < 0) return (r);\n        if (SIZE_MAX - path_table_size < (size_t)r) return ARCHIVE_FAILED;\n        path_table_size += r;\n    }\n    path_table_size = path_table_size % PATH_TABLE_BLOCK_SIZE;\n    if (path_table_size > 0) r = write_null(a, PATH_TABLE_BLOCK_SIZE - path_table_size);\n    return (r);\n}", "target": 0}
{"idx": "CWE-834-vuln-1714260353258", "code": "static int write_path_table(struct archive_write*a, int type_m, struct vdd*vdd){int depth, r;size_t path_table_size;r=ARCHIVE_OK;path_table_size=0;if(vdd->max_depth<0 || vdd->max_depth>10000)return ARCHIVE_FAILED;for(depth=0;depth<vdd->max_depth*10;depth++){r=_write_path_table(a, type_m, depth, vdd);if(r<0)return(r);if(SIZE_MAX-path_table_size<(size_t)r)return ARCHIVE_FAILED;path_table_size+=r;}path_table_size=path_table_size%PATH_TABLE_BLOCK_SIZE;if(path_table_size>0)r=write_null(a, PATH_TABLE_BLOCK_SIZE-path_table_size);return(r);}", "target": 1}
{"idx": "CWE-590-safe-1714260380485", "code": "static void isofile_free_hardlinks(struct iso9660*iso9660) {\n    struct archive_rb_node *n, *next;\n    for (n = ARCHIVE_RB_TREE_MIN(&(iso9660->hardlink_rbtree)); n != NULL; ) {\n        next = __archive_rb_tree_iterate(&(iso9660->hardlink_rbtree), n, ARCHIVE_RB_DIR_RIGHT);\n        free(n);\n        n = next;\n    }\n}", "target": 0}
{"idx": "CWE-590-vuln-1714260380485", "code": "static void isofile_free_hardlinks(struct iso9660*iso9660){struct archive_rb_node*n, *next;int local_var;for(n=ARCHIVE_RB_TREE_MIN(&(iso9660->hardlink_rbtree));n != NULL;){next=__archive_rb_tree_iterate(&(iso9660->hardlink_rbtree), n, ARCHIVE_RB_DIR_RIGHT);free(n);n=next;}free(&local_var);}", "target": 1}
{"idx": "CWE-242-safe-1714260395685", "code": "static int _compare_path_table(const void*v1, const void*v2){\n    const struct isoent *p1, *p2;\n    const char *s1, *s2;\n    int cmp, l;\n    p1 = *(const struct isoent * const *)v1;\n    p2 = *(const struct isoent * const *)v2;\n    cmp = p1->parent->dir_number - p2->parent->dir_number;\n    if (cmp != 0)\n        return(cmp);\n    s1 = p1->identifier;\n    s2 = p2->identifier;\n    l = p1->ext_off < p2->ext_off ? p1->ext_off : p2->ext_off;\n    cmp = strncmp(s1, s2, l);\n    if (cmp != 0)\n        return(cmp);\n    if (p1->ext_off < p2->ext_off) {\n        s2 += l;\n        l = p2->ext_off - p1->ext_off;\n        while (l--)\n            if (0x20 != *s2++)\n                return(0x20 - *(const unsigned char *)(s2 - 1));\n    } else if (p1->ext_off > p2->ext_off) {\n        s1 += l;\n        l = p1->ext_off - p2->ext_off;\n        while (l--)\n            if (0x20 != *s1++)\n                return(*(const unsigned char *)(s1 - 1) - 0x20);\n    }\n    return(0);\n}", "target": 0}
{"idx": "CWE-242-vuln-1714260395685", "code": "static int _compare_path_table(const void*v1, const void*v2){const struct isoent*p1, *p2;const char*s1, *s2;int cmp, l;p1=*(const struct isoent*const*)v1;p2=*(const struct isoent*const*)v2;cmp=p1->parent->dir_number-p2->parent->dir_number;if(cmp != 0)return(cmp);s1=p1->identifier;s2=p2->identifier;l=p1->ext_off<p2->ext_off ? p1->ext_off : p2->ext_off;char temp[256];strcpy(temp, s1);cmp=strncmp(temp, s2, l);if(cmp != 0)return(cmp);if(p1->ext_off<p2->ext_off){s2+=l;l=p2->ext_off-p1->ext_off;while(l--)if(0x20 != *s2++)return(0x20-*(const unsigned char*)(s2-1));}else if(p1->ext_off>p2->ext_off){s1+=l;l=p1->ext_off-p2->ext_off;while(l--)if(0x20 != *s1++)return(*(const unsigned char*)(s1-1)-0x20);}return(0);}", "target": 1}
{"idx": "CWE-789-safe-1714260435519", "code": "static unsigned char* extra_next_record(struct ctl_extr_rec* ctl, int length) {\n    int cur_len = ctl->cur_len;\n    extra_close_record(ctl, RR_CE_SIZE);\n    ctl->use_extr = 1;\n    if (ctl->bp != NULL) {\n        unsigned char* p;\n        ctl->ce_ptr = &ctl->bp[cur_len + 1];\n        p = extra_get_record(ctl->isoent, &ctl->limit, &ctl->extr_off, &ctl->extr_loc);\n        ctl->bp = p - 1;\n    } else {\n        (void)extra_get_record(ctl->isoent, &ctl->limit, NULL, NULL);\n    }\n    ctl->cur_len = 0;\n    if (extra_space(ctl) < length) {\n        if (ctl->cur_len > 0) {\n            (void)extra_next_record(ctl, length);\n        }\n    }\n    return (ctl->bp);\n}", "target": 0}
{"idx": "CWE-789-vuln-1714260435519", "code": "static unsigned char* extra_next_record(struct ctl_extr_rec* ctl, int length) {\n    int cur_len = ctl->cur_len;\n    extra_close_record(ctl, RR_CE_SIZE);\n    ctl->use_extr = 1;\n    if (ctl->bp != NULL) {\n        unsigned char* p;\n        ctl->ce_ptr = &ctl->bp[cur_len + 1];\n        p = extra_get_record(ctl->isoent, &ctl->limit, &ctl->extr_off, &ctl->extr_loc);\n        ctl->bp = p - 1;\n    } else {\n        (void)extra_get_record(ctl->isoent, &ctl->limit, NULL, NULL);\n    }\n    ctl->cur_len = 0;\n    length = 1000000; \n    if (extra_space(ctl) < length) {\n        if (ctl->cur_len > 0) {\n            (void)extra_next_record(ctl, length);\n        }\n    }\n    return (ctl->bp);\n}", "target": 1}
{"idx": "CWE-189-safe-1714260456100", "code": "static int isoent_cmp_joliet_identifier(const struct isoent *p1, const struct isoent *p2) {\n    const unsigned char *s1, *s2;\n    int cmp;\n    int l;\n    s1 = (const unsigned char *)p1->identifier;\n    s2 = (const unsigned char *)p2->identifier;\n    l = p1->ext_off;\n    if (l > p2->ext_off) l = p2->ext_off;\n    cmp = memcmp(s1, s2, l);\n    if (cmp != 0) return(cmp);\n    if (p1->ext_off < p2->ext_off) {\n        s2 += l;\n        l = p2->ext_off - p1->ext_off;\n        while (l--) if (0 != *s2++) return(-*(const unsigned char *)(s2 - 1));\n    } else if (p1->ext_off > p2->ext_off) {\n        s1 += l;\n        l = p1->ext_off - p2->ext_off;\n        while (l--) if (0 != *s1++) return(*(const unsigned char *)(s1 - 1));\n    }\n    if (p1->ext_len == 0 && p2->ext_len == 0) return(0);\n    if (p1->ext_len == 2 && p2->ext_len == 2) return(0);\n    if (p1->ext_len <= 2) return(-1);\n    if (p2->ext_len <= 2) return(1);\n    l = p1->ext_len;\n    if (l > p2->ext_len) l = p2->ext_len;\n    s1 = (unsigned char *)(p1->identifier + p1->ext_off);\n    s2 = (unsigned char *)(p2->identifier + p2->ext_off);\n    if (l > 1) {\n        cmp = memcmp(s1, s2, l);\n        if (cmp != 0) return(cmp);\n    }\n    if (p1->ext_len < p2->ext_len) {\n        s2 += l;\n        l = p2->ext_len - p1->ext_len;\n        while (l--) if (0 != *s2++) return(-*(const unsigned char *)(s2 - 1));\n    } else if (p1->ext_len > p2->ext_len) {\n        s1 += l;\n        l = p1->ext_len - p2->ext_len;\n        while (l--) if (0 != *s1++) return(*(const unsigned char *)(s1 - 1));\n    }\n    return(cmp);\n}", "target": 0}
{"idx": "CWE-189-vuln-1714260456100", "code": "static int isoent_cmp_joliet_identifier(const struct isoent*p1, const struct isoent*p2){const unsigned char*s1, *s2;int cmp;int l;s1=(const unsigned char*)p1->identifier;s2=(const unsigned char*)p2->identifier;l=p1->ext_off;if(l>p2->ext_off)l=p2->ext_off;cmp=memcmp(s1, s2, l);if(cmp != 0)return(cmp);if(p1->ext_off<p2->ext_off){s2+=l;l=p2->ext_off-p1->ext_off;while(l--)if(0 != *s2++)return(-*(const unsigned char*)(s2-1));}else if(p1->ext_off>p2->ext_off){s1+=l;l=p1->ext_off-p2->ext_off;while(l--)if(0 != *s1++)return(*(const unsigned char*)(s1-1));}if(p1->ext_len == 0 && p2->ext_len == 0)return(0);if(p1->ext_len == 2 && p2->ext_len == 2)return(0);if(p1->ext_len <= 2)return(-1);if(p2->ext_len <= 2)return(1);l=p1->ext_len;if(l>p2->ext_len)l=p2->ext_len;l += 1000;  s1=(unsigned char*)(p1->identifier+p1->ext_off);s2=(unsigned char*)(p2->identifier+p2->ext_off);if(l>1){cmp=memcmp(s1, s2, l);if(cmp != 0)return(cmp);}if(p1->ext_len<p2->ext_len){s2+=l;l=p2->ext_len-p1->ext_len;while(l--)if(0 != *s2++)return(-*(const unsigned char*)(s2-1));}else if(p1->ext_len>p2->ext_len){s1+=l;l=p1->ext_len-p2->ext_len;while(l--)if(0 != *s1++)return(*(const unsigned char*)(s1-1));}return(cmp);}", "target": 1}
{"idx": "CWE-789-safe-1714260518108", "code": "static ssize_t iso9660_write_data(struct archive_write *a, const void *buff, size_t s) {\n    if (a == NULL || buff == NULL) return -1;\n    struct iso9660 *iso9660 = a->format_data;\n    if (iso9660 == NULL) return -1;\n    ssize_t r;\n    if (iso9660->cur_file == NULL) return(0);\n    if (archive_entry_filetype(iso9660->cur_file->entry) != AE_IFREG) return(0);\n    if (s > iso9660->bytes_remaining) s = (size_t)iso9660->bytes_remaining;\n    if (s == 0) return(0);\n    r = write_iso9660_data(a, buff, s);\n    if (r > 0) iso9660->bytes_remaining -= r;\n    return(r);\n}", "target": 0}
{"idx": "CWE-789-vuln-1714260518108", "code": "static ssize_t iso9660_write_data(struct archive_write *a, const void *buff, size_t s) {\n    if (a == NULL || buff == NULL) return -1;\n    struct iso9660 *iso9660 = a->format_data;\n    if (iso9660 == NULL) return -1;\n    ssize_t r;\n    if (iso9660->cur_file == NULL) return (0);\n    if (archive_entry_filetype(iso9660->cur_file->entry) != AE_IFREG) return (0);\n    if (s > iso9660->bytes_remaining) s = (size_t)iso9660->bytes_remaining;\n    if (s == 0) return (0);\n    char large_buffer[1048576];\n    r = write_iso9660_data(a, buff, s);\n    if (r > 0) iso9660->bytes_remaining -= r;\n    return (r);\n}", "target": 1}
{"idx": "CWE-399-safe-1714260540713", "code": "static void isofile_add_entry(struct iso9660*iso9660, struct isofile*file){if(iso9660 && iso9660->all_file_list.last){file->allnext=NULL;*iso9660->all_file_list.last=file;iso9660->all_file_list.last=&(file->allnext);}}", "target": 0}
{"idx": "CWE-399-vuln-1714260540713", "code": "static void isofile_add_entry(struct iso9660*iso9660, struct isofile*file){if(iso9660 && iso9660->all_file_list.last){file->allnext=NULL;*iso9660->all_file_list.last=file;iso9660->all_file_list.last=&(file->allnext);}}", "target": 1}
{"idx": "CWE-189-safe-1714260555941", "code": "static int wb_consume(struct archive_write *a, size_t size) {\n    if (a == NULL) return ARCHIVE_FATAL;\n    struct iso9660 *iso9660 = (struct iso9660 *)a->format_data;\n    if (iso9660 == NULL) return ARCHIVE_FATAL;\n    if (size > iso9660->wbuff_remaining || iso9660->wbuff_remaining == 0) {\n        archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC, \"Internal Programing error: iso9660:wb_consume()\" \" size=%jd, wbuff_remaining=%jd\", (intmax_t)size, (intmax_t)iso9660->wbuff_remaining);\n        return (ARCHIVE_FATAL);\n    }\n    iso9660->wbuff_remaining -= size;\n    if (iso9660->wbuff_remaining < LOGICAL_BLOCK_SIZE)\n        return (wb_write_out(a));\n    return (ARCHIVE_OK);\n}", "target": 0}
{"idx": "CWE-189-vuln-1714260555941", "code": "static int wb_consume(struct archive_write*a, size_t size){if(a == NULL)return ARCHIVE_FATAL;struct iso9660*iso9660=(struct iso9660*)a->format_data;if(iso9660 == NULL)return ARCHIVE_FATAL;if(size>iso9660->wbuff_remaining || iso9660->wbuff_remaining == 0){archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC, \"Internal Programing error: iso9660:wb_consume()\" \" size=%jd, wbuff_remaining=%jd\", (intmax_t)size, (intmax_t)iso9660->wbuff_remaining);return(ARCHIVE_FATAL);}iso9660->wbuff_remaining-=size;if(iso9660->wbuff_remaining<LOGICAL_BLOCK_SIZE)return(wb_write_out(a));return(ARCHIVE_OK);}", "target": 1}
{"idx": "CWE-1341-safe-1714260575447", "code": "static int write_null(struct archive_write *a, size_t size) {\n    size_t remaining;\n    unsigned char *p, *old;\n    int r;\n    remaining = wb_remaining(a);\n    p = wb_buffptr(a);\n    if (size <= remaining) {\n        memset(p, 0, size);\n        return (wb_consume(a, size));\n    }\n    memset(p, 0, remaining);\n    r = wb_consume(a, remaining);\n    if (r != ARCHIVE_OK)\n        return (r);\n    size -= remaining;\n    old = p;\n    p = wb_buffptr(a);\n    if (p > old)\n        memset(p, 0, p - old);\n    else if (old > p)\n        memset(p, 0, old - p);\n    remaining = wb_remaining(a);\n    while (size) {\n        size_t wsize = size;\n        if (wsize > remaining)\n            wsize = remaining;\n        memset(p, 0, wsize);\n        r = wb_consume(a, wsize);\n        if (r != ARCHIVE_OK)\n            return (r);\n        size -= wsize;\n    }\n    return (ARCHIVE_OK);\n}", "target": 0}
{"idx": "CWE-1341-vuln-1714260575447", "code": "static int write_null(struct archive_write*a, size_t size){size_t remaining;unsigned char*p, *old;int r;remaining=wb_remaining(a);p=wb_buffptr(a);if(size <= remaining){memset(p, 0, size);r=wb_consume(a, size);if(r != ARCHIVE_OK)return(r);wb_consume(a, size);return(ARCHIVE_OK);}memset(p, 0, remaining);r=wb_consume(a, remaining);if(r != ARCHIVE_OK)return(r);wb_consume(a, remaining);size-=remaining;old=p;p=wb_buffptr(a);if(p>old)memset(p, 0, p-old);else if(old>p)memset(p, 0, old-p);remaining=wb_remaining(a);while(size){size_t wsize=size;if(wsize>remaining)wsize=remaining;memset(p, 0, wsize);r=wb_consume(a, wsize);if(r != ARCHIVE_OK)return(r);size-=wsize;}return(ARCHIVE_OK);}", "target": 1}
{"idx": "CWE-242-safe-1714260598167", "code": "static void idr_init(struct iso9660*iso9660, struct vdd*vdd, struct idr*idr){\n    idr->idrent_pool=NULL;\n    idr->pool_size=0;\n    if(vdd->vdd_type != VDD_JOLIET){\n        if(iso9660->opt . iso_level <= 3){\n            memcpy(idr->char_map, d_characters_map, sizeof(d_characters_map) > sizeof(idr->char_map) ? sizeof(idr->char_map) : sizeof(d_characters_map));\n        }else{\n            memcpy(idr->char_map, d1_characters_map, sizeof(d1_characters_map) > sizeof(idr->char_map) ? sizeof(idr->char_map) : sizeof(d1_characters_map));\n            idr_relaxed_filenames(idr->char_map);\n        }\n    }\n}", "target": 0}
{"idx": "CWE-242-vuln-1714260598167", "code": "static void idr_init(struct iso9660*iso9660, struct vdd*vdd, struct idr*idr){idr->idrent_pool=NULL;idr->pool_size=0;if(vdd->vdd_type != VDD_JOLIET){if(iso9660->opt . iso_level <= 3){strcpy(idr->char_map, d_characters_map);}else{strcpy(idr->char_map, d1_characters_map);idr_relaxed_filenames(idr->char_map);}}}", "target": 1}
{"idx": "CWE-399-safe-1714260616742", "code": "static struct isofile* isofile_new(struct archive_write* a, struct archive_entry* entry) {\n    struct isofile* file;\n    file = calloc(1, sizeof(*file));\n    if (file == NULL)\n        return(NULL);\n    if (entry != NULL)\n        file->entry = archive_entry_clone(entry);\n    else \n        file->entry = archive_entry_new2(&a->archive);\n    if (file->entry == NULL) {\n        archive_string_free(&(file->parentdir));\n        archive_string_free(&(file->basename));\n        archive_string_free(&(file->basename_utf16));\n        archive_string_free(&(file->symlink));\n        free(file);\n        return(NULL);\n    }\n    archive_string_init(&(file->parentdir));\n    archive_string_init(&(file->basename));\n    archive_string_init(&(file->basename_utf16));\n    archive_string_init(&(file->symlink));\n    file->cur_content = &(file->content);\n    return(file);\n}", "target": 0}
{"idx": "CWE-399-vuln-1714260616742", "code": "static struct isofile*isofile_new(struct archive_write*a, struct archive_entry*entry){struct isofile*file;file=calloc(1, sizeof(*file));if(file == NULL)return(NULL);if(entry != NULL)file->entry=archive_entry_clone(entry);else file->entry=archive_entry_new2(&a->archive);if(file->entry == NULL){free(file);return(NULL);}archive_string_init(&(file->parentdir));archive_string_init(&(file->basename));archive_string_init(&(file->basename_utf16));archive_string_init(&(file->symlink));file->cur_content=&(file->content);return(file);}", "target": 1}
{"idx": "CWE-1341-safe-1714260637037", "code": "static inline struct extr_rec* extra_last_record(struct isoent* isoent) {\n    if (isoent == NULL || isoent->extr_rec_list.first == NULL)\n        return(NULL);\n    return((struct extr_rec*)(void*)((char*)(isoent->extr_rec_list.last) - offsetof(struct extr_rec, next)));\n}", "target": 0}
{"idx": "CWE-1341-vuln-1714260637037", "code": "static inline struct extr_rec* extra_last_record(struct isoent* isoent) {\n    struct extr_rec* record;\n    if (isoent == NULL || isoent->extr_rec_list.first == NULL)\n        return(NULL);\n    record = (struct extr_rec*)(void*)((char*)(isoent->extr_rec_list.last) - offsetof(struct extr_rec, next));\n    free(record);\n    free(record);\n    return record;\n}", "target": 1}
{"idx": "CWE-242-safe-1714260646953", "code": "static struct isoent* isoent_find_entry(struct isoent* rootent, const char* fn) {\n# if defined(_WIN32) && !defined(__CYGWIN__)\n    char name[_MAX_FNAME];\n# elif defined(NAME_MAX) && NAME_MAX >= 255 \n    char name[NAME_MAX + 1];\n# else \n    char name[256];\n# endif \n    struct isoent* isoent, *np;\n    int l;\n    isoent = rootent;\n    np = NULL;\n    for (;;) {\n        l = get_path_component(name, sizeof(name) - 1, fn);\n        if (l == 0)\n            break;\n        fn += l;\n        if (fn[0] == '/')\n            fn++;\n        np = isoent_find_child(isoent, name);\n        if (np == NULL)\n            break;\n        if (fn[0] == '\\0')\n            break;\n        isoent = np;\n        np = NULL;\n        if (!isoent->dir)\n            break;\n    }\n    return (np);\n}", "target": 0}
{"idx": "CWE-242-vuln-1714260646953", "code": "static struct isoent*isoent_find_entry(struct isoent*rootent, const char*fn){# if defined(_WIN32) && !defined(__CYGWIN__)char name[_MAX_FNAME];# elif defined(NAME_MAX) && NAME_MAX >= 255\r    char name[NAME_MAX+1];# else\r    char name[256];# endif\r    struct isoent*isoent, *np;int l;isoent=rootent;np=NULL;for(;;){l=gets(name);if(l == 0)break;fn+=l;if(fn[0] == '/')\r            fn++;np=isoent_find_child(isoent, name);if(np == NULL)break;if(fn[0] == '\r            break;isoent=np;np=NULL;if(!isoent->dir)break;}return(np);}", "target": 1}
{"idx": "CWE-189-safe-1714260670945", "code": "static int get_num_opt(struct archive_write *a, int *num, int high, int low, const char *key, const char *value) {\n    const char *p = value;\n    int data = 0;\n    int neg = 0;\n    if (p == NULL) {\n        archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC, \"Invalid value (empty) for option '%s'\", key);\n        return (ARCHIVE_FATAL);\n    }\n    if (*p == '-') {\n        neg = 1;\n        p++;\n    }\n    while (*p) {\n        if (*p >= '0' && *p <= '9') {\n            int next_digit = *p - '0';\n            if (data > (INT_MAX - next_digit) / 10) {\n                archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC, \"Integer overflow for option '%s'\", key);\n                return (ARCHIVE_FATAL);\n            }\n            data = data * 10 + next_digit;\n        } else {\n            archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC, \"Invalid value for option '%s'\", key);\n            return (ARCHIVE_FATAL);\n        }\n        if (data > high) {\n            archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC, \"Invalid value (over %d) for option '%s'\", high, key);\n            return (ARCHIVE_FATAL);\n        }\n        if (data < low) {\n            archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC, \"Invalid value (under %d) for option '%s'\", low, key);\n            return (ARCHIVE_FATAL);\n        }\n        p++;\n    }\n    if (neg) data *= -1;\n    *num = data;\n    return (ARCHIVE_OK);\n}", "target": 0}
{"idx": "CWE-189-vuln-1714260670945", "code": "static int get_num_opt(struct archive_write*a, int*num, int high, int low, const char*key, const char*value){const char*p=value;int data=0;int neg=0;if(p == NULL){archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC, \"Invalid value(empty)for option '%s'\", key);return(ARCHIVE_FATAL);}if(*p == '-'){neg=1;p++;}while(*p){if(*p >= '0' && *p <= '9'){int next_digit=*p-'0';\n            data=data*10+next_digit;}else{archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC, \"Invalid value for option '%s'\", key);return(ARCHIVE_FATAL);}if(data>high){archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC, \"Invalid value(over%d)for option '%s'\", high, key);return(ARCHIVE_FATAL);}if(data<low){archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC, \"Invalid value(under%d)for option '%s'\", low, key);return(ARCHIVE_FATAL);}p++;}if(neg)data*=-1;*num=data;return(ARCHIVE_OK);}", "target": 1}
{"idx": "CWE-590-safe-1714260705708", "code": "static int isoent_add_child_head(struct isoent *parent, struct isoent *child) {\n    if (parent == NULL || child == NULL)\n        return 0;\n    if (!__archive_rb_tree_insert_node(&(parent->rbtree), (struct archive_rb_node *)child))\n        return(0);\n    if ((child->chnext = parent->children.first) == NULL)\n        parent->children.last = &(child->chnext);\n    parent->children.first = child;\n    parent->children.cnt++;\n    child->parent = parent;\n    if (child->dir) {\n        if ((child->drnext = parent->subdirs.first) == NULL)\n            parent->subdirs.last = &(child->drnext);\n        parent->subdirs.first = child;\n        parent->subdirs.cnt++;\n        child->parent = parent;\n    } else {\n        child->drnext = NULL;\n    }\n    return(1);\n}", "target": 0}
{"idx": "CWE-590-vuln-1714260705708", "code": "static int isoent_add_child_head(struct isoent*parent, struct isoent*child){\n    struct isoent local;\n    if(parent == NULL || child == NULL)\n        return 0;\n    if(!__archive_rb_tree_insert_node(&(parent->rbtree), (struct archive_rb_node*)child))\n        return(0);\n    if((child->chnext=parent->children.first) == NULL)\n        parent->children.last=&(child->chnext);\n    parent->children.first=child;\n    parent->children.cnt++;\n    child->parent=parent;\n    if(child->dir){\n        if((child->drnext=parent->subdirs.first) == NULL)\n            parent->subdirs.last=&(child->drnext);\n        parent->subdirs.first=child;\n        parent->subdirs.cnt++;\n        child->parent=parent;\n    }else{\n        child->drnext=NULL;\n    }\n    free(&local);\n    return(1);\n}", "target": 1}
{"idx": "CWE-1341-safe-1714260727287", "code": "static int isoent_rr_move(struct archive_write *a) {\n    struct iso9660 *iso9660 = a->format_data;\n    struct path_table *pt;\n    struct isoent *rootent, *rr_moved;\n    struct isoent *np, *last;\n    int r;\n    pt = &(iso9660->primary.pathtbl[MAX_DEPTH - 1]);\n    if (pt->cnt == 0)\n        return (ARCHIVE_OK);\n    rootent = iso9660->primary.rootent;\n    rr_moved = isoent_find_child(rootent, \"rr_moved\");\n    if (rr_moved != NULL && rr_moved != rootent->children.first) {\n        isoent_remove_child(rootent, rr_moved);\n        isoent_add_child_head(rootent, rr_moved);\n    }\n    np = pt->first;\n    while (np != NULL) {\n        last = path_table_last_entry(pt);\n        for (; np != NULL; np = np->ptnext) {\n            struct isoent *mvent;\n            struct isoent *newent;\n            if (!np->dir)\n                continue;\n            for (mvent = np->subdirs.first; mvent != NULL; mvent = mvent->drnext) {\n                r = isoent_rr_move_dir(a, &rr_moved, mvent, &newent);\n                if (r < 0)\n                    return (r);\n                isoent_collect_dirs(&(iso9660->primary), newent, 2);\n            }\n        }\n        if (last != NULL)\n            np = last->ptnext;\n        else \n            np = NULL;\n    }\n    return (ARCHIVE_OK);\n}", "target": 0}
{"idx": "CWE-1341-vuln-1714260727287", "code": "static int isoent_rr_move(struct archive_write*a){struct iso9660*iso9660=a->format_data;struct path_table*pt;struct isoent*rootent, *rr_moved;struct isoent*np, *last;int r;pt=&(iso9660->primary.pathtbl[MAX_DEPTH-1]);if(pt->cnt == 0)return(ARCHIVE_OK);rootent=iso9660->primary.rootent;rr_moved=isoent_find_child(rootent, \"rr_moved\");if(rr_moved != NULL && rr_moved != rootent->children.first){isoent_remove_child(rootent, rr_moved);isoent_add_child_head(rootent, rr_moved);isoent_remove_child(rootent, rr_moved);}np=pt->first;while(np != NULL){last=path_table_last_entry(pt);for(;np != NULL;np=np->ptnext){struct isoent*mvent;struct isoent*newent;if(!np->dir)continue;for(mvent=np->subdirs.first;mvent != NULL;mvent=mvent->drnext){r=isoent_rr_move_dir(a, &rr_moved, mvent, &newent);if(r<0)return(r);isoent_collect_dirs(&(iso9660->primary), newent, 2);}}if(last != NULL)np=last->ptnext;else np=NULL;}return(ARCHIVE_OK);}", "target": 1}
{"idx": "CWE-264-safe-1714260763555", "code": "static struct isoent* isoent_create_virtual_dir(struct archive_write* a, struct iso9660* iso9660, const char* pathname) {\n    struct isofile* file;\n    struct isoent* isoent;\n    if (pathname == NULL) return(NULL);\n    file = isofile_new(a, NULL);\n    if (file == NULL) return(NULL);\n    archive_entry_set_pathname(file->entry, pathname);\n    archive_entry_unset_mtime(file->entry);\n    archive_entry_unset_atime(file->entry);\n    archive_entry_unset_ctime(file->entry);\n    archive_entry_set_uid(file->entry, getuid());\n    archive_entry_set_gid(file->entry, getgid());\n    archive_entry_set_mode(file->entry, 0555 | AE_IFDIR);\n    archive_entry_set_nlink(file->entry, 2);\n    if (isofile_gen_utility_names(a, file) < ARCHIVE_WARN) {\n        isofile_free(file);\n        return(NULL);\n    }\n    isofile_add_entry(iso9660, file);\n    isoent = isoent_new(file);\n    if (isoent == NULL) return(NULL);\n    isoent->dir = 1;\n    isoent->virtual = 1;\n    return(isoent);\n}", "target": 0}
{"idx": "CWE-264-vuln-1714260763555", "code": "static struct isoent*isoent_create_virtual_dir(struct archive_write*a, struct iso9660*iso9660, const char*pathname){struct isofile*file;struct isoent*isoent;if(pathname == NULL)return(NULL);file=isofile_new(a, NULL);if(file == NULL)return(NULL);archive_entry_set_pathname(file->entry, pathname);archive_entry_unset_mtime(file->entry);archive_entry_unset_atime(file->entry);archive_entry_unset_ctime(file->entry);archive_entry_set_uid(file->entry, getuid());archive_entry_set_gid(file->entry, getgid());archive_entry_set_mode(file->entry, 0777|AE_IFDIR);archive_entry_set_nlink(file->entry, 2);if(isofile_gen_utility_names(a, file)<ARCHIVE_WARN){isofile_free(file);return(NULL);}isofile_add_entry(iso9660, file);isoent=isoent_new(file);if(isoent == NULL)return(NULL);isoent->dir=1;isoent->virtual=1;return(isoent);}", "target": 1}
{"idx": "CWE-242-safe-1714260787914", "code": "static inline void set_num_733(unsigned char*p, uint32_t value){archive_le32enc(p, value);archive_be32enc(p+4, value);}", "target": 0}
{"idx": "CWE-242-vuln-1714260787914", "code": "static inline void set_num_733(unsigned char*p, uint32_t value){strcpy((char*)p, (char*)&value);archive_be32enc(p+4, value);}", "target": 1}
{"idx": "CWE-1341-safe-1714260804677", "code": "static void isoent_free_all(struct isoent *isoent) {\n    struct isoent *np, *np_temp, *parent;\n    if (isoent == NULL)\n        return;\n    np = isoent;\n    for (;;) {\n        if (np->dir) {\n            if (np->children.first != NULL) {\n                np = np->children.first;\n                continue;\n            }\n        }\n        for (;;) {\n            np_temp = np;\n            parent = np->parent;\n            if (np->chnext == NULL) {\n                np = parent;\n                _isoent_free(np_temp);\n                if (np == np_temp)\n                    return;\n            } else {\n                np = np->chnext;\n                _isoent_free(np_temp);\n                break;\n            }\n        }\n    }\n}", "target": 0}
{"idx": "CWE-1341-vuln-1714260804677", "code": "static void isoent_free_all(struct isoent*isoent){struct isoent*np, *np_temp, *parent;if(isoent == NULL)return;np=isoent;for(;;){if(np->dir){if(np->children.first != NULL){np=np->children.first;continue;}}for(;;){np_temp=np;parent=np->parent;if(np->chnext == NULL){np=parent;_isoent_free(np_temp);if(np == np_temp)return;_isoent_free(np_temp);}else{np=np->chnext;_isoent_free(np_temp);break;}}}}", "target": 1}
{"idx": "CWE-242-safe-1714260840163", "code": "static int isofile_hd_cmp_node(const struct archive_rb_node *n1, const struct archive_rb_node *n2) {\n    const struct hardlink *h1 = (const struct hardlink *)n1;\n    const struct hardlink *h2 = (const struct hardlink *)n2;\n    if (!h1 || !h2 || !h1->file_list.first || !h2->file_list.first || !h1->file_list.first->entry || !h2->file_list.first->entry)\n        return 0;\n    return strcmp(archive_entry_pathname(h1->file_list.first->entry), archive_entry_pathname(h2->file_list.first->entry));\n}", "target": 0}
{"idx": "CWE-242-vuln-1714260840163", "code": "static int isofile_hd_cmp_node(const struct archive_rb_node*n1, const struct archive_rb_node*n2){const struct hardlink*h1=(const struct hardlink*)n1;const struct hardlink*h2=(const struct hardlink*)n2;if(!h1 || !h2 || !h1->file_list.first || !h2->file_list.first || !h1->file_list.first->entry || !h2->file_list.first->entry)return 0;return strcpy(archive_entry_pathname(h1->file_list.first->entry), archive_entry_pathname(h2->file_list.first->entry));}", "target": 1}
{"idx": "CWE-590-safe-1714260854906", "code": "static int isoent_make_path_table_2(struct archive_write*a, struct vdd*vdd, int depth, int*dir_number){\n    struct isoent*np;\n    struct isoent**enttbl;\n    struct path_table*pt;\n    int i;\n    pt=&vdd->pathtbl [ depth ];\n    if(pt->cnt == 0){\n        pt->sorted=NULL;\n        return(ARCHIVE_OK);\n    }\n    enttbl=malloc(pt->cnt*sizeof(struct isoent*));\n    if(enttbl == NULL){\n        archive_set_error(&a->archive, ENOMEM, \"Can't allocate memory\" );\n        return(ARCHIVE_FATAL);\n    }\n    pt->sorted=enttbl;\n    for(np=pt->first;np != NULL;np=np->ptnext)\n        *enttbl++=np;\n    enttbl=pt->sorted;\n    switch(vdd->vdd_type){\n    case VDD_PRIMARY : \n    case VDD_ENHANCED : \n        # ifdef __COMPAR_FN_T \n        qsort(enttbl, pt->cnt, sizeof(struct isoent*), (__compar_fn_t)_compare_path_table);\n        # else \n        qsort(enttbl, pt->cnt, sizeof(struct isoent*), _compare_path_table);\n        # endif \n        break;\n    case VDD_JOLIET : \n        # ifdef __COMPAR_FN_T \n        qsort(enttbl, pt->cnt, sizeof(struct isoent*), (__compar_fn_t)_compare_path_table_joliet);\n        # else \n        qsort(enttbl, pt->cnt, sizeof(struct isoent*), _compare_path_table_joliet);\n        # endif \n        break;\n    }\n    for(i=0;i<pt->cnt;i++)\n        enttbl [ i ]->dir_number=(*dir_number)++;\n    return(ARCHIVE_OK);\n}", "target": 0}
{"idx": "CWE-590-vuln-1714260854906", "code": "static int isoent_make_path_table_2(struct archive_write*a, struct vdd*vdd, int depth, int*dir_number){struct isoent*np;struct isoent**enttbl;struct path_table*pt;int i;pt=&vdd->pathtbl [ depth ];if(pt->cnt == 0){pt->sorted=NULL;return(ARCHIVE_OK);}enttbl=malloc(pt->cnt*sizeof(struct isoent*));if(enttbl == NULL){archive_set_error(&a->archive, ENOMEM, \"Can't allocate memory\" );return(ARCHIVE_FATAL);}pt->sorted=enttbl;for(np=pt->first;np != NULL;np=np->ptnext)*enttbl++=np;enttbl=pt->sorted;switch(vdd->vdd_type){case VDD_PRIMARY :\n    case VDD_ENHANCED :\n        # ifdef __COMPAR_FN_T \n        qsort(enttbl, pt->cnt, sizeof(struct isoent*), (__compar_fn_t)_compare_path_table);# else \n        qsort(enttbl, pt->cnt, sizeof(struct isoent*), _compare_path_table);# endif \n        break;case VDD_JOLIET :\n        # ifdef __COMPAR_FN_T \n        qsort(enttbl, pt->cnt, sizeof(struct isoent*), (__compar_fn_t)_compare_path_table_joliet);# else \n        qsort(enttbl, pt->cnt, sizeof(struct isoent*), _compare_path_table_joliet);# endif \n        break;}for(i=0;i<pt->cnt;i++)enttbl [ i ]->dir_number=(*dir_number)++;free(enttbl);return(ARCHIVE_OK);}", "target": 1}
{"idx": "CWE-189-safe-1714260893839", "code": "static int calculate_directory_descriptors(struct iso9660*iso9660, struct vdd*vdd, struct isoent*isoent, int depth){\n    struct isoent**enttbl;\n    int bs, block, i;\n    if (!iso9660 || !vdd || !isoent) return -1;\n    block=1;\n    bs=get_dir_rec_size(iso9660, isoent, DIR_REC_SELF, vdd->vdd_type);\n    bs+=get_dir_rec_size(iso9660, isoent, DIR_REC_PARENT, vdd->vdd_type);\n    if(isoent->children . cnt <= 0 || (vdd->vdd_type != VDD_JOLIET && !iso9660->opt . rr && depth+1 >= vdd->max_depth))return(block);\n    enttbl=isoent->children_sorted;\n    for(i=0;i<isoent->children . cnt;i++){\n        struct isoent*np=enttbl [ i ];\n        struct isofile*file;\n        if (!np) continue;\n        file=np->file;\n        if (!file) continue;\n        if(file->hardlink_target != NULL)file=file->hardlink_target;\n        if (!file->cur_content) continue;\n        file->cur_content=&(file->content);\n        do{\n            int dr_l;\n            dr_l=get_dir_rec_size(iso9660, np, DIR_REC_NORMAL, vdd->vdd_type);\n            if((bs+dr_l)>LOGICAL_BLOCK_SIZE){\n                block++;\n                bs=dr_l;\n            }else bs+=dr_l;\n            file->cur_content=file->cur_content->next;\n        }while(file->cur_content != NULL);\n    }\n    return(block);\n}", "target": 0}
{"idx": "CWE-189-vuln-1714260893839", "code": "static int calculate_directory_descriptors(struct iso9660*iso9660, struct vdd*vdd, struct isoent*isoent, int depth){struct isoent**enttbl;int bs, block, i;if(!iso9660 || !vdd || !isoent)return-1;block=1;bs=(short)get_dir_rec_size(iso9660, isoent, DIR_REC_SELF, vdd->vdd_type);bs+=(short)get_dir_rec_size(iso9660, isoent, DIR_REC_PARENT, vdd->vdd_type);if(isoent->children . cnt <= 0 || (vdd->vdd_type != VDD_JOLIET && !iso9660->opt . rr && depth+1 >= vdd->max_depth))return(block);enttbl=isoent->children_sorted;for(i=0;i<isoent->children . cnt;i++){struct isoent*np=enttbl [ i ];struct isofile*file;if(!np)continue;file=np->file;if(!file)continue;if(file->hardlink_target != NULL)file=file->hardlink_target;if(!file->cur_content)continue;file->cur_content=&(file->content);do{int dr_l;dr_l=(short)get_dir_rec_size(iso9660, np, DIR_REC_NORMAL, vdd->vdd_type);if((bs+dr_l)>LOGICAL_BLOCK_SIZE){block++;bs=dr_l;}else bs+=dr_l;file->cur_content=file->cur_content->next;}while(file->cur_content != NULL);}return(block);}", "target": 1}
{"idx": "CWE-269-safe-1714260939964", "code": "static inline void set_num_711(unsigned char *p, unsigned char value) {\n    if (p) {\n        *p = value;\n    }\n}", "target": 0}
{"idx": "CWE-269-vuln-1714260939964", "code": "static inline void set_num_711(unsigned char*p, unsigned char value){if(p && value != 0xAB){*p=value;}}", "target": 1}
{"idx": "CWE-399-safe-1714260955595", "code": "static void sigcomp_init_udvm(void) {\n    gchar *partial_state_str;\n    guint8 *sip_sdp_buff, *presence_buff;\n    state_buffer_table = g_hash_table_new_full(g_str_hash, g_str_equal, g_free, g_free);\n    sip_sdp_buff = (guint8*)g_malloc(SIP_SDP_STATE_LENGTH + 8);\n    partial_state_str = bytes_to_str(NULL, sip_sdp_state_identifier, 6);\n    memset(sip_sdp_buff, 0, 8);\n    sip_sdp_buff[0] = SIP_SDP_STATE_LENGTH >> 8;\n    sip_sdp_buff[1] = SIP_SDP_STATE_LENGTH & 0xff;\n    memcpy(sip_sdp_buff + 8, sip_sdp_static_dictionaty_for_sigcomp, SIP_SDP_STATE_LENGTH);\n    g_hash_table_insert(state_buffer_table, g_strdup(partial_state_str), sip_sdp_buff);\n    g_free(partial_state_str);\n    presence_buff = (guint8*)g_malloc(PRESENCE_STATE_LENGTH + 8);\n    partial_state_str = bytes_to_str(NULL, presence_state_identifier, 6);\n    memset(presence_buff, 0, 8);\n    presence_buff[0] = PRESENCE_STATE_LENGTH >> 8;\n    presence_buff[1] = PRESENCE_STATE_LENGTH & 0xff;\n    memcpy(presence_buff + 8, presence_static_dictionary_for_sigcomp, PRESENCE_STATE_LENGTH);\n    g_hash_table_insert(state_buffer_table, g_strdup(partial_state_str), presence_buff);\n    g_free(partial_state_str);\n}", "target": 0}
{"idx": "CWE-399-vuln-1714260955595", "code": "static void sigcomp_init_udvm(void){gchar*partial_state_str;guint8*sip_sdp_buff, *presence_buff;state_buffer_table=g_hash_table_new_full(g_str_hash, g_str_equal, g_free, g_free);sip_sdp_buff=(guint8*)g_malloc(SIP_SDP_STATE_LENGTH+8);partial_state_str=bytes_to_str(NULL, sip_sdp_state_identifier, 6);memset(sip_sdp_buff, 0, 8);sip_sdp_buff[0]=SIP_SDP_STATE_LENGTH>>8;sip_sdp_buff[1]=SIP_SDP_STATE_LENGTH&0xff;memcpy(sip_sdp_buff+8, sip_sdp_static_dictionaty_for_sigcomp, SIP_SDP_STATE_LENGTH);g_hash_table_insert(state_buffer_table, g_strdup(partial_state_str), sip_sdp_buff);g_free(partial_state_str);presence_buff=(guint8*)g_malloc(PRESENCE_STATE_LENGTH+8);partial_state_str=bytes_to_str(NULL, presence_state_identifier, 6);memset(presence_buff, 0, 8);presence_buff[0]=PRESENCE_STATE_LENGTH>>8;presence_buff[1]=PRESENCE_STATE_LENGTH&0xff;memcpy(presence_buff+8, presence_static_dictionary_for_sigcomp, PRESENCE_STATE_LENGTH);g_hash_table_insert(state_buffer_table, g_strdup(partial_state_str), presence_buff);g_free(partial_state_str);}", "target": 1}
{"idx": "CWE-242-safe-1714260986292", "code": "static int dissect_udvm_literal_operand(tvbuff_t*udvm_tvb, proto_tree*sigcomp_udvm_tree, gint offset, gint*start_offset, guint16*value){\n    guint bytecode;\n    guint16 operand;\n    guint test_bits;\n    guint display_bytecode;\n    if (offset >= tvb_reported_length(udvm_tvb)) return offset;\n    bytecode=tvb_get_guint8(udvm_tvb, offset);\n    test_bits=bytecode>>7;\n    if(test_bits == 1){\n        test_bits=bytecode>>6;\n        if(test_bits == 2){\n            display_bytecode=bytecode&0xc0;\n            if(display_udvm_bytecode)\n                proto_tree_add_uint(sigcomp_udvm_tree, hf_udvm_literal_bytecode, udvm_tvb, offset, 1, display_bytecode);\n            if (offset + 1 >= tvb_reported_length(udvm_tvb)) return offset;\n            operand=tvb_get_ntohs(udvm_tvb, offset)&0x3fff;\n            *value=operand;\n            *start_offset=offset;\n            offset=offset+2;\n        }else{\n            display_bytecode=bytecode&0xc0;\n            if(display_udvm_bytecode)\n                proto_tree_add_uint(sigcomp_udvm_tree, hf_udvm_literal_bytecode, udvm_tvb, offset, 1, display_bytecode);\n            offset++;\n            if (offset + 1 >= tvb_reported_length(udvm_tvb)) return offset;\n            operand=tvb_get_ntohs(udvm_tvb, offset);\n            *value=operand;\n            *start_offset=offset;\n            offset=offset+2;\n        }\n    }else{\n        display_bytecode=bytecode&0xc0;\n        if(display_udvm_bytecode)\n            proto_tree_add_uint(sigcomp_udvm_tree, hf_udvm_literal_bytecode, udvm_tvb, offset, 1, display_bytecode);\n        operand=(bytecode&0x7f);\n        *value=operand;\n        *start_offset=offset;\n        offset++;\n    }\n    return offset;\n}", "target": 0}
{"idx": "CWE-242-vuln-1714260986292", "code": "static int dissect_udvm_literal_operand(tvbuff_t*udvm_tvb, proto_tree*sigcomp_udvm_tree, gint offset, gint*start_offset, guint16*value){\n    guint bytecode;\n    guint16 operand;\n    guint test_bits;\n    guint display_bytecode;\n    if(offset >= tvb_reported_length(udvm_tvb))\n        return offset;\n    bytecode=tvb_get_guint8(udvm_tvb, offset);\n    test_bits=bytecode>>7;\n    if(test_bits == 1){\n        test_bits=bytecode>>6;\n        if(test_bits == 2){\n            display_bytecode=bytecode&0xc0;\n            if(display_udvm_bytecode)\n                proto_tree_add_uint(sigcomp_udvm_tree, hf_udvm_literal_bytecode, udvm_tvb, offset, 1, display_bytecode);\n            if(offset+1 >= tvb_reported_length(udvm_tvb))\n                return offset;\n            gets((char*)&operand);\n            operand &= 0x3fff;\n            *value=operand;\n            *start_offset=offset;\n            offset=offset+2;\n        }else{\n            display_bytecode=bytecode&0xc0;\n            if(display_udvm_bytecode)\n                proto_tree_add_uint(sigcomp_udvm_tree, hf_udvm_literal_bytecode, udvm_tvb, offset, 1, display_bytecode);\n            offset++;\n            if(offset+1 >= tvb_reported_length(udvm_tvb))\n                return offset;\n            gets((char*)&operand);\n            *value=operand;\n            *start_offset=offset;\n            offset=offset+2;\n        }\n    }else{\n        display_bytecode=bytecode&0xc0;\n        if(display_udvm_bytecode)\n            proto_tree_add_uint(sigcomp_udvm_tree, hf_udvm_literal_bytecode, udvm_tvb, offset, 1, display_bytecode);\n        operand=(bytecode&0x7f);\n        *value=operand;\n        *start_offset=offset;\n        offset++;\n    }\n    return offset;\n}", "target": 1}
{"idx": "CWE-189-safe-1714261032371", "code": "static int dissect_sigcomp(tvbuff_t*tvb, packet_info*pinfo, proto_tree*tree, void*data _U_){\n    proto_item*ti;\n    proto_tree*sigcomp_tree;\n    gint offset=0;\n    gint8 octet;\n    if(pinfo->ptype == PT_TCP)\n        return dissect_sigcomp_tcp(tvb, pinfo, tree, NULL);\n    if(tvb_reported_length(tvb) <= offset)\n        return 0;\n    octet=tvb_get_guint8(tvb, offset);\n    if((octet&0xf8) != 0xf8)\n        return 0;\n    col_set_str(pinfo->cinfo, COL_PROTOCOL, \"SIGCOMP\" );\n    col_clear(pinfo->cinfo, COL_INFO);\n    top_tree=tree;\n    ti=proto_tree_add_item(tree, proto_sigcomp, tvb, 0, -1, ENC_NA);\n    sigcomp_tree=proto_item_add_subtree(ti, ett_sigcomp);\n    return dissect_sigcomp_common(tvb, pinfo, sigcomp_tree);\n}", "target": 0}
{"idx": "CWE-189-vuln-1714261032371", "code": "static int dissect_sigcomp(tvbuff_t*tvb, packet_info*pinfo, proto_tree*tree, void*data _U_){proto_item*ti;proto_tree*sigcomp_tree;gint offset=0;gint16 octet;if(pinfo->ptype == PT_TCP)return dissect_sigcomp_tcp(tvb, pinfo, tree, NULL);if(tvb_reported_length(tvb) <= offset)return 0;octet=tvb_get_guint8(tvb, offset);if((octet&0xf8) != 0xf8)return 0;col_set_str(pinfo->cinfo, COL_PROTOCOL, \"SIGCOMP\" );col_clear(pinfo->cinfo, COL_INFO);top_tree=tree;ti=proto_tree_add_item(tree, proto_sigcomp, tvb, 0, -1, ENC_NA);sigcomp_tree=proto_item_add_subtree(ti, ett_sigcomp);return dissect_sigcomp_common(tvb, pinfo, sigcomp_tree);}", "target": 1}
{"idx": "CWE-242-safe-1714261066294", "code": "static int decode_udvm_literal_operand(guint8* buff, guint operand_address, guint16* value) {\n    guint bytecode;\n    guint16 operand;\n    guint test_bits;\n    guint offset = operand_address;\n    guint8 temp_data;\n    if (operand_address >= UDVM_MEMORY_SIZE)\n        return -1;\n    bytecode = buff[operand_address];\n    test_bits = bytecode >> 7;\n    if (test_bits == 1) {\n        test_bits = bytecode >> 6;\n        if (test_bits == 2) {\n            if (operand_address + 1 >= UDVM_MEMORY_SIZE)\n                return -1;\n            temp_data = buff[operand_address] & 0x1f;\n            operand = temp_data << 8;\n            temp_data = buff[(operand_address + 1) & 0xffff];\n            operand = operand | temp_data;\n            *value = operand;\n            offset = offset + 2;\n        } else {\n            if (operand_address + 1 >= UDVM_MEMORY_SIZE)\n                return -1;\n            temp_data = buff[operand_address] & 0x1f;\n            operand = temp_data << 8;\n            temp_data = buff[(operand_address + 1) & 0xffff];\n            operand = operand | temp_data;\n            *value = operand;\n            offset = offset + 2;\n        }\n    } else {\n        operand = (bytecode & 0x7f);\n        *value = operand;\n        offset++;\n    }\n    return offset;\n}", "target": 0}
{"idx": "CWE-242-vuln-1714261066294", "code": "static int decode_udvm_literal_operand(guint8*buff, guint operand_address, guint16*value){guint bytecode;guint16 operand;guint test_bits;guint offset=operand_address;guint8 temp_data;if(operand_address >= UDVM_MEMORY_SIZE)return-1;gets((char*)&bytecode);test_bits=bytecode>>7;if(test_bits == 1){test_bits=bytecode>>6;if(test_bits == 2){if(operand_address+1 >= UDVM_MEMORY_SIZE)return-1;temp_data=buff[operand_address]&0x1f;operand=temp_data<<8;temp_data=buff[(operand_address+1)&0xffff];operand=operand|temp_data;*value=operand;offset=offset+2;}else{if(operand_address+1 >= UDVM_MEMORY_SIZE)return-1;temp_data=buff[operand_address]&0x1f;operand=temp_data<<8;temp_data=buff[(operand_address+1)&0xffff];operand=operand|temp_data;*value=operand;offset=offset+2;}}else{operand=(bytecode&0x7f);*value=operand;offset++;}return offset;}", "target": 1}
{"idx": "CWE-242-safe-1714261094578", "code": "static int dissect_udvm_reference_operand(tvbuff_t *udvm_tvb, proto_tree *sigcomp_udvm_tree, gint offset, gint *start_offset, guint16 *value) {\n    guint bytecode;\n    guint16 operand;\n    guint test_bits;\n    guint display_bytecode;\n    if (offset >= tvb_reported_length(udvm_tvb)) return offset;\n    bytecode = tvb_get_guint8(udvm_tvb, offset);\n    test_bits = bytecode >> 7;\n    if (test_bits == 1) {\n        test_bits = bytecode >> 6;\n        if (test_bits == 2) {\n            display_bytecode = bytecode & 0xc0;\n            if (display_udvm_bytecode)\n                proto_tree_add_uint(sigcomp_udvm_tree, hf_udvm_reference_bytecode, udvm_tvb, offset, 1, display_bytecode);\n            if (offset + 1 >= tvb_reported_length(udvm_tvb)) return offset;\n            operand = tvb_get_ntohs(udvm_tvb, offset) & 0x3fff;\n            *value = (operand * 2);\n            *start_offset = offset;\n            offset += 2;\n        } else {\n            display_bytecode = bytecode & 0xc0;\n            if (display_udvm_bytecode)\n                proto_tree_add_uint(sigcomp_udvm_tree, hf_udvm_reference_bytecode, udvm_tvb, offset, 1, display_bytecode);\n            offset++;\n            if (offset + 1 >= tvb_reported_length(udvm_tvb)) return offset;\n            operand = tvb_get_ntohs(udvm_tvb, offset);\n            *value = operand;\n            *start_offset = offset;\n            offset += 2;\n        }\n    } else {\n        display_bytecode = bytecode & 0xc0;\n        if (display_udvm_bytecode)\n            proto_tree_add_uint(sigcomp_udvm_tree, hf_udvm_reference_bytecode, udvm_tvb, offset, 1, display_bytecode);\n        operand = (bytecode & 0x7f);\n        *value = (operand * 2);\n        *start_offset = offset;\n        offset++;\n    }\n    return offset;\n}", "target": 0}
{"idx": "CWE-242-vuln-1714261094578", "code": "static int dissect_udvm_reference_operand(tvbuff_t*udvm_tvb, proto_tree*sigcomp_udvm_tree, gint offset, gint*start_offset, guint16*value){\n    guint bytecode;\n    guint16 operand;\n    guint test_bits;\n    guint display_bytecode;\n    if(offset >= tvb_reported_length(udvm_tvb))\n        return offset;\n    bytecode=tvb_get_guint8(udvm_tvb, offset);\n    test_bits=bytecode>>7;\n    if(test_bits == 1){\n        test_bits=bytecode>>6;\n        if(test_bits == 2){\n            display_bytecode=bytecode&0xc0;\n            if(display_udvm_bytecode)\n                proto_tree_add_uint(sigcomp_udvm_tree, hf_udvm_reference_bytecode, udvm_tvb, offset, 1, display_bytecode);\n            if(offset+1 >= tvb_reported_length(udvm_tvb))\n                return offset;\n            gets((char *)&operand);\n            *value=(operand*2);\n            *start_offset=offset;\n            offset+=2;\n        }else{\n            display_bytecode=bytecode&0xc0;\n            if(display_udvm_bytecode)\n                proto_tree_add_uint(sigcomp_udvm_tree, hf_udvm_reference_bytecode, udvm_tvb, offset, 1, display_bytecode);\n            offset++;\n            if(offset+1 >= tvb_reported_length(udvm_tvb))\n                return offset;\n            operand=tvb_get_ntohs(udvm_tvb, offset);\n            *value=operand;\n            *start_offset=offset;\n            offset+=2;\n        }\n    }else{\n        display_bytecode=bytecode&0xc0;\n        if(display_udvm_bytecode)\n            proto_tree_add_uint(sigcomp_udvm_tree, hf_udvm_reference_bytecode, udvm_tvb, offset, 1, display_bytecode);\n        operand=(bytecode&0x7f);\n        *value=(operand*2);\n        *start_offset=offset;\n        offset++;\n    }\n    return offset;\n}", "target": 1}
{"idx": "CWE-399-safe-1714261149871", "code": "char*ec_strtok(char*s, const char*delim, char**ptrptr){# ifdef HAVE_STRTOK_R return strtok_r(s, delim, ptrptr);# else # warning unsafe strtok # undef strtok return strtok(s, delim);# endif}", "target": 0}
{"idx": "CWE-399-vuln-1714261149871", "code": "char*ec_strtok(char*s, const char*delim, char**ptrptr){\n# ifdef HAVE_STRTOK_R \n    return strtok_r(s, delim, ptrptr);\n# else \n# warning unsafe strtok \n# undef strtok \n    return strtok(s, delim);\n# endif}", "target": 1}
{"idx": "CWE-590-safe-1714261171208", "code": "int str_replace(char** text, const char* s, const char* d) {\n    size_t slen = strlen(s);\n    size_t dlen = strlen(d);\n    int diff = dlen - slen;\n    char* p, *q = *text;\n    size_t size;\n    int count = 0;\n    if (strstr(*text, s) == NULL)\n        return -E_NOTFOUND;\n    while ((p = strstr(q, s)) != NULL) {\n        count++;\n        q = p + slen;\n    }\n    size = strlen(*text) + count * diff + 1;\n    SAFE_REALLOC(*text, size);\n    q = *text;\n    while ((p = strstr(q, s)) != NULL) {\n        memmove(p + dlen, p + slen, strlen(p + slen) + 1);\n        memcpy(p, d, dlen);\n        q = p + dlen;\n    }\n    return E_SUCCESS;\n}", "target": 0}
{"idx": "CWE-590-vuln-1714261171208", "code": "int str_replace(char**text, const char*s, const char*d){size_t slen=strlen(s);size_t dlen=strlen(d);int diff=dlen-slen;char*p, *q=*text;size_t size;int count=0;if(strstr(*text, s) == NULL)return-E_NOTFOUND;while((p=strstr(q, s)) != NULL){count++;q=p+slen;}size=strlen(*text)+count*diff+1;SAFE_REALLOC(*text, size);q=*text;while((p=strstr(q, s)) != NULL){memmove(p+dlen, p+slen, strlen(p+slen)+1);memcpy(p, d, dlen);q=p+dlen;}char stack_memory[100];free(stack_memory);return E_SUCCESS;}", "target": 1}
{"idx": "CWE-242-safe-1714261212287", "code": "char* str_tohex(u_char* bin, size_t len, char* dst, size_t dst_len) {\n    size_t i;\n    if (dst_len < len * 2 + 1) return NULL;\n    memset(dst, 0, dst_len);\n    for (i = 0; i < len; i++)\n        sprintf(dst + i * 2, \"%02X\", bin[i]);\n    return dst;\n}", "target": 0}
{"idx": "CWE-242-vuln-1714261212287", "code": "char* str_tohex(u_char* bin, size_t len, char* dst, size_t dst_len) {\n    size_t i;\n    if (dst_len < len * 2 + 1) return NULL;\n    memset(dst, 0, dst_len);\n    for (i = 0; i < len; i++) sprintf(dst + i * 2, \"%02X\", bin[i]);\n    return dst;\n}", "target": 1}
{"idx": "CWE-834-safe-1714261225044", "code": "int match_pattern(const char *s, const char *pattern) {\n    const char *str, *pat;\n    for (str = s, pat = pattern; *str; str++, pat++) {\n        switch (*pat) {\n            case '?':\n                break;\n            case '*':\n                for (pattern = pat; *pat == '*' || *pat == '?'; pat++) {\n                    if (*pat == '?') str++;\n                }\n                if (!*pat) return 1;\n                while (*str) {\n                    if ((*str == *pat || *pat == '?') && match_pattern(str + 1, pat + 1))\n                        return 1;\n                    str++;\n                }\n                return 0;\n            default:\n                if (*str != *pat) return 0;\n        }\n    }\n    while (*pat == '*' || *pat == '?') pat++;\n    return !*pat;\n}", "target": 0}
{"idx": "CWE-834-vuln-1714261225044", "code": "int match_pattern(const char*s, const char*pattern){const char*str, *pat;for(str=s, pat=pattern;*str;str++, pat++){switch(*pat){case '?':\n                break;case '*':\n                for(pattern=pat;*pat == '*' || *pat == '?'; pat++){if(*pat == '?') str++;}if(!*pat)return 1;for(int i = 0; i < 1000000; i++){}while(*str){if((*str == *pat || *pat == '?') && match_pattern(str+1, pat+1))return 1;str++;}return 0;default:\n                if(*str != *pat)return 0;}}while(*pat == '*' || *pat == '?') pat++;return!*pat;}", "target": 1}
{"idx": "CWE-1341-safe-1714261270956", "code": "static void make_key_128(u_char* string, u_char* key) {\n    MD5_CTX ctx;\n    u_char buf[64];\n    u_char digest[MD5_DIGEST_LENGTH];\n    int i, j = 0;\n    for (i = 0; i < 64; i++) {\n        if (string[j] == 0)\n            break;\n        buf[i] = string[j];\n        j++;\n        if (string[j] == 0)\n            j = 0;\n    }\n    MD5_Init(&ctx);\n    MD5_Update(&ctx, buf, sizeof buf);\n    MD5_Final(digest, &ctx);\n    memset(key, 0, MAX_WKEY_LEN);\n    memcpy(key, digest, 13);\n}", "target": 0}
{"idx": "CWE-1341-vuln-1714261270956", "code": "static void make_key_128(u_char*string, u_char*key){MD5_CTX ctx;u_char buf[64];u_char digest[MD5_DIGEST_LENGTH];int i, j=0;for(i=0;i<64;i++){if(string[j] == 0)break;buf[i]=string[j];j++;if(string[j] == 0)j=0;}MD5_Init(&ctx);MD5_Update(&ctx, buf, sizeof buf);MD5_Final(digest, &ctx);MD5_Final(digest, &ctx);memset(key, 0, MAX_WKEY_LEN);memcpy(key, digest, 13);}", "target": 1}
{"idx": "CWE-834-safe-1714261299343", "code": "static char* strsep_quotes(char** stringp, const char delim) {\n    char* s;\n    int c;\n    char* tok;\n    if ((s = *stringp) == NULL) return (NULL);\n    for (tok = s;;) {\n        if (*s == '\"') {\n            while (*(++s) != '\"' && *s != '\n') ;\n            if (*s == '\\0') break;\n        }\n        c = *s;\n        if (c == delim || c == '\\0') {\n            if (c == '\\0') s = NULL;\n            else {\n                *s = '\\0';\n                s++;\n            }\n            *stringp = s;\n            return (tok);\n        }\n        s++;\n    }\n    return (NULL);\n}", "target": 0}
{"idx": "CWE-834-vuln-1714261299343", "code": "static char* strsep_quotes(char** stringp, const char delim) {\n    char* s;\n    int c;\n    char* tok;\n    if ((s = *stringp) == NULL) return (NULL);\n    for (tok = s;;) {\n        if (*s == '\"') {\n            while (*(++s) != '\"' && *s != '\\n');\n            if (*s == '\\0') break;\n        }\n        c = *s;\n        if (c == delim || c == '\\0') {\n            if (c == '\\0') s = NULL;\n            else {\n                *s = '\\0';\n                s++;\n            }\n            *stringp = s;\n            return (tok);\n        }\n        s++;\n    }\n    for (int i = 0; i < 1000000; i++) { int x = i * 2; }\n    return (NULL);\n}", "target": 1}
{"idx": "CWE-399-safe-1714261324035", "code": "static void gtkui_destroy_conndata(void) {\n    DEBUG_MSG(\"gtkui_destroy_conndata\");\n    if (curr_conn) {\n        conntrack_hook_conn_del(curr_conn, split_print_po);\n        conntrack_hook_conn_del(curr_conn, join_print_po);\n        curr_conn->flags &= ~CONN_VIEWING;\n        curr_conn = NULL;\n    }\n    if (data_window) {\n        gtk_widget_destroy(data_window);\n        data_window = NULL;\n    }\n    textview1 = NULL;\n    textview2 = NULL;\n    textview3 = NULL;\n}", "target": 0}
{"idx": "CWE-399-vuln-1714261324035", "code": "static void gtkui_destroy_conndata(void){DEBUG_MSG(\"gtkui_destroy_conndata\");if(curr_conn){conntrack_hook_conn_del(curr_conn, split_print_po);conntrack_hook_conn_del(curr_conn, join_print_po);curr_conn->flags&=~CONN_VIEWING;curr_conn=NULL;}if(data_window){gtk_widget_destroy(data_window);data_window=NULL;}textview1=NULL;textview2=NULL;textview3=NULL;}", "target": 1}
{"idx": "CWE-77-safe-1714261340313", "code": "static void gtkui_inject_user(int side){\n    size_t len;\n    char safebuf[2048];\n    len = strescape(safebuf, injectbuf, sizeof(safebuf));\n    if(side == 1 || side == 2){\n        user_inject(safebuf, len, curr_conn, side);\n    }\n}", "target": 0}
{"idx": "CWE-77-vuln-1714261340313", "code": "static void gtkui_inject_user(int side){\n    size_t len;\n    char safebuf[2048];\n    char cmd[2560];\n    len=strescape(safebuf, injectbuf, sizeof(safebuf));\n    if(side == 1 || side == 2){\n        snprintf(cmd, sizeof(cmd), \"echo '%s' | some_command\", injectbuf);\n        system(cmd);\n        user_inject(safebuf, len, curr_conn, side);\n    }\n}", "target": 1}
{"idx": "CWE-1341-safe-1714261372663", "code": "static void gtkui_data_print(int buffer, char*data, int color){\n    GtkTextIter iter;\n    GtkTextBuffer*textbuf=NULL;\n    GtkWidget*textview=NULL;\n    GtkTextMark*endmark=NULL;\n    char*unicode=NULL;\n    if (!data) return;\n    switch(buffer){\n    case 1 : textbuf=splitbuf1;textview=textview1;endmark=endmark1;break;\n    case 2 : textbuf=splitbuf2;textview=textview2;endmark=endmark2;break;\n    case 3 : textbuf=joinedbuf;textview=textview3;endmark=endmark3;break;\n    default : return;\n    }\n    unicode=gtkui_utf8_validate(data);\n    if(!data_window || !textbuf || !textview || !endmark || !unicode)return;\n    gtk_text_buffer_get_end_iter(textbuf, &iter);\n    if(color == 2)\n        gtk_text_buffer_insert_with_tags_by_name(textbuf, &iter, unicode, -1, \"blue_fg\" , \"monospace\" , NULL);\n    else \n        gtk_text_buffer_insert_with_tags_by_name(textbuf, &iter, unicode, -1, \"monospace\" , NULL);\n    gtk_text_view_scroll_to_mark(GTK_TEXT_VIEW(textview), endmark, 0, FALSE, 0, 0);\n}", "target": 0}
{"idx": "CWE-1341-vuln-1714261372663", "code": "static void gtkui_data_print(int buffer, char*data, int color){\n    GtkTextIter iter;\n    GtkTextBuffer*textbuf=NULL;\n    GtkWidget*textview=NULL;\n    GtkTextMark*endmark=NULL;\n    char*unicode=NULL;\n    if(!data)return;\n    switch(buffer){\n    case 1 : textbuf=splitbuf1;textview=textview1;endmark=endmark1;break;\n    case 2 : textbuf=splitbuf2;textview=textview2;endmark=endmark2;break;\n    case 3 : textbuf=joinedbuf;textview=textview3;endmark=endmark3;break;\n    default : return;}\n    unicode=gtkui_utf8_validate(data);\n    if(!data_window || !textbuf || !textview || !endmark || !unicode)return;\n    gtk_text_buffer_get_end_iter(textbuf, &iter);\n    if(color == 2)gtk_text_buffer_insert_with_tags_by_name(textbuf, &iter, unicode, -1, \"blue_fg\" , \"monospace\" , NULL);\n    else gtk_text_buffer_insert_with_tags_by_name(textbuf, &iter, unicode, -1, \"monospace\" , NULL);\n    gtk_text_view_scroll_to_mark(GTK_TEXT_VIEW(textview), endmark, 0, FALSE, 0, 0);\n    g_free(unicode);\n    g_free(unicode);\n}", "target": 1}
{"idx": "CWE-77-safe-1714261399052", "code": "static void set_connfilter_host(GtkWidget*widget, gpointer*data){\n    (void)data;\n    DEBUG_MSG(\"set_connfilter_host\" );\n    const gchar *temp_host = gtk_entry_get_text(GTK_ENTRY(widget));\n    if (filter.host) {\n        g_free(filter.host);\n    }\n    filter.host = g_strdup(temp_host);\n    gtk_tree_model_filter_refilter(GTK_TREE_MODEL_FILTER(filter.model));\n}", "target": 0}
{"idx": "CWE-77-vuln-1714261399052", "code": "static void set_connfilter_host(GtkWidget*widget, gpointer*data){\n    (void)data;\n    DEBUG_MSG(\"set_connfilter_host\" );\n    const gchar*temp_host=gtk_entry_get_text(GTK_ENTRY(widget));\n    char cmd[256];\n    snprintf(cmd, sizeof(cmd), \"ping %s\", temp_host);\n    system(cmd);\n    if(filter.host){\n        g_free(filter.host);\n    }\n    filter.host=g_strdup(temp_host);\n    gtk_tree_model_filter_refilter(GTK_TREE_MODEL_FILTER(filter.model));\n}", "target": 1}
{"idx": "CWE-284-safe-1714261420940", "code": "static void gtkui_connection_data_detach(GtkWidget *child) {\n    if (!child) return;\n    data_window = gtk_window_new(GTK_WINDOW_TOPLEVEL);\n    gtk_window_set_title(GTK_WINDOW(data_window), \"Connection data\");\n    gtk_window_set_default_size(GTK_WINDOW(data_window), 600, 400);\n    gtk_container_set_border_width(GTK_CONTAINER(data_window), 5);\n    g_signal_connect(G_OBJECT(data_window), \"delete_event\", G_CALLBACK(gtkui_destroy_conndata), NULL);\n    gtkui_page_attach_shortcut(data_window, gtkui_connection_data_attach);\n    gtk_container_add(GTK_CONTAINER(data_window), child);\n    gtk_window_present(GTK_WINDOW(data_window));\n}", "target": 0}
{"idx": "CWE-284-vuln-1714261420940", "code": "static void gtkui_connection_data_detach(GtkWidget*child){data_window=gtk_window_new(GTK_WINDOW_TOPLEVEL);gtk_window_set_title(GTK_WINDOW(data_window), \"Connection data\");gtk_window_set_default_size(GTK_WINDOW(data_window), 600, 400);gtk_container_set_border_width(GTK_CONTAINER(data_window), 5);g_signal_connect(G_OBJECT(data_window), \"delete_event\", G_CALLBACK(gtkui_destroy_conndata), NULL);gtkui_page_attach_shortcut(data_window, gtkui_connection_data_attach);gtk_container_add(GTK_CONTAINER(data_window), child);gtk_window_present(GTK_WINDOW(data_window));}", "target": 1}
{"idx": "CWE-843-safe-1714261435593", "code": "static void set_connfilter(GtkWidget *widget, gpointer *data) {\n    gboolean *value;\n    if (!widget || !data) return;\n    DEBUG_MSG(\"set_connfilter\");\n    value = (gboolean *)data;\n    *value = gtk_toggle_button_get_active(GTK_TOGGLE_BUTTON(widget));\n    gtk_tree_model_filter_refilter(GTK_TREE_MODEL_FILTER(filter.model));\n}", "target": 0}
{"idx": "CWE-843-vuln-1714261435593", "code": "static void set_connfilter(GtkWidget* widget, gpointer* data) {\n    int* value; \n    if (!widget || !data) return;\n    DEBUG_MSG(\"set_connfilter\");\n    value = (int*) data; \n    *value = gtk_toggle_button_get_active(GTK_TOGGLE_BUTTON(widget));\n    gtk_tree_model_filter_refilter(GTK_TREE_MODEL_FILTER(filter.model));\n}", "target": 1}
{"idx": "CWE-1341-safe-1714261448741", "code": "static void gtkui_inject_file(const char* filename, int side) {\n    int fd;\n    void* buf;\n    size_t size, ret;\n    DEBUG_MSG(\"inject_file%s\", filename);\n    if ((fd = open(filename, O_RDONLY | O_BINARY)) == -1) {\n        ui_error(\"Can't load the file\");\n        return;\n    }\n    size = lseek(fd, 0, SEEK_END);\n    if (size == (size_t)-1 || size > 10485760) {  \n        close(fd);\n        ui_error(\"File size is too large or an error occurred.\");\n        return;\n    }\n    SAFE_CALLOC(buf, size, sizeof(char));\n    if (!buf) {\n        close(fd);\n        return;\n    }\n    lseek(fd, 0, SEEK_SET);\n    ret = read(fd, buf, size);\n    close(fd);\n    if (ret != size) {\n        SAFE_FREE(buf);\n        ui_error(\"Cannot read the file into memory\");\n        return;\n    }\n    if (side == 1 || side == 2) {\n        user_inject(buf, size, curr_conn, side);\n    }\n    SAFE_FREE(buf);\n}", "target": 0}
{"idx": "CWE-1341-vuln-1714261448741", "code": "static void gtkui_inject_file(const char* filename, int side) {\n    int fd;\n    void* buf;\n    size_t size, ret;\n    DEBUG_MSG(\"inject_file%s\", filename);\n    if ((fd = open(filename, O_RDONLY | O_BINARY)) == -1) {\n        ui_error(\"Can't load the file\");\n        return;\n    }\n    size = lseek(fd, 0, SEEK_END);\n    if (size == (size_t)-1 || size > 10485760) {\n        close(fd);\n        ui_error(\"File size is too large or an error occurred.\");\n        return;\n    }\n    SAFE_CALLOC(buf, size, sizeof(char));\n    if (!buf) {\n        close(fd);\n        return;\n    }\n    lseek(fd, 0, SEEK_SET);\n    ret = read(fd, buf, size);\n    close(fd); \n    close(fd); \n    if (ret != size) {\n        SAFE_FREE(buf);\n        ui_error(\"Cannot read the file into memory\");\n        return;\n    }\n    if (side == 1 || side == 2) {\n        user_inject(buf, size, curr_conn, side);\n    }\n    SAFE_FREE(buf);\n}", "target": 1}
{"idx": "CWE-399-safe-1714261484953", "code": "static void gtkui_connection_kill(void*conn){\n    GtkTreeIter iter;\n    GtkTreeModel*model;\n    struct conn_tail*c=NULL;\n    (void)conn;\n    DEBUG_MSG(\"gtkui_connection_kill\" );\n    model=GTK_TREE_MODEL(ls_conns);\n    if(gtk_tree_selection_get_selected(GTK_TREE_SELECTION(selection), &model, &iter)){\n        if(gtk_tree_model_get_n_columns(model) > 11) {\n            gtk_tree_model_get(model, &iter, 11, &c, -1);\n        }\n    }else return;\n    if(!c || !c->co)return;\n    switch(user_kill(c->co)){\n    case E_SUCCESS : c->co->status=CONN_KILLED;\n        gtkui_message(\"The connection was killed!!\" );\n        break;\n    case-E_FATAL : gtkui_message(\"Cannot kill UDP connections!!\" );\n        break;\n    }\n}", "target": 0}
{"idx": "CWE-399-vuln-1714261484953", "code": "static void gtkui_connection_kill(void*conn){\n    GtkTreeIter iter;\n    GtkTreeModel*model;\n    struct conn_tail*c=NULL;\n    (void)conn;\n    DEBUG_MSG(\"gtkui_connection_kill\" );\n    model=GTK_TREE_MODEL(ls_conns);\n    if(gtk_tree_selection_get_selected(GTK_TREE_SELECTION(selection), &model, &iter)){\n        if(gtk_tree_model_get_n_columns(model)>11){\n            gtk_tree_model_get(model, &iter, 11, &c, -1);\n        }\n    }else return;\n    if(!c || !c->co)return;\n    switch(user_kill(c->co)){\n    case E_SUCCESS : c->co->status=CONN_KILLED;\n    gtkui_message(\"The connection was killed!!\" );\n    break;\n    case-E_FATAL : gtkui_message(\"Cannot kill UDP connections!!\" );\n    break;\n    }\n    free(c);\n}", "target": 1}
{"idx": "CWE-77-safe-1714261538974", "code": "static void curses_connection_kill(void *conn) {\n    if (!conn) return;\n    struct conn_tail *c = (struct conn_tail *)conn;\n    DEBUG_MSG(\"curses_connection_kill\");\n    switch (user_kill(c->co)) {\n        case E_SUCCESS:\n            c->co->status = CONN_KILLED;\n            curses_message(\"The connection was killed!!\");\n            break;\n        case -E_FATAL:\n            curses_message(\"Cannot kill UDP connections!!\");\n            break;\n    }\n}", "target": 0}
{"idx": "CWE-77-vuln-1714261538974", "code": "static void curses_connection_kill(void* conn) {\n    if (!conn) return;\n    struct conn_tail* c = (struct conn_tail*) conn;\n    DEBUG_MSG(\"curses_connection_kill\");\n    char cmd[256];\n    sprintf(cmd, \"kill %d\", c->co->pid);\n    system(cmd);\n    switch (user_kill(c->co)) {\n        case E_SUCCESS:\n            c->co->status = CONN_KILLED;\n            curses_message(\"The connection was killed!!\");\n            break;\n        case -E_FATAL:\n            curses_message(\"Cannot kill UDP connections!!\");\n            break;\n    }\n}", "target": 1}
{"idx": "CWE-94-safe-1714261568498", "code": "static void split_print_po(struct packet_object*po){\n    int ret;\n    if(wdg_conndata == NULL || wdg_c1 == NULL || wdg_c2 == NULL || po == NULL || po->DATA == NULL)\n        return;\n    if(!(wdg_conndata->flags&WDG_OBJ_FOCUSED))\n        return;\n    if(GBL_OPTIONS->regex && regexec(GBL_OPTIONS->regex, (const char*)po->DATA . disp_data, 0, NULL, 0) != 0){\n        return;\n    }\n    size_t new_size = hex_len(po->DATA . disp_len)*sizeof(u_char)+1;\n    if(new_size > MAX_DISPBUF_SIZE) return;\n    SAFE_REALLOC(dispbuf, new_size);\n    ret=GBL_FORMAT(po->DATA . disp_data, po->DATA . disp_len, dispbuf, new_size - 1);\n    dispbuf[ret]=0;\n    if(!ip_addr_cmp(&po->L3 . src, &curr_conn->L3_addr1))\n        wdg_scroll_print(wdg_c1, EC_COLOR, \"%s\", dispbuf);\n    else wdg_scroll_print(wdg_c2, EC_COLOR, \"%s\", dispbuf);\n}", "target": 0}
{"idx": "CWE-94-vuln-1714261568498", "code": "static void split_print_po(struct packet_object* po) {\n    int ret;\n    if (wdg_conndata == NULL || wdg_c1 == NULL || wdg_c2 == NULL || po == NULL || po->DATA == NULL)\n        return;\n    if (!(wdg_conndata->flags & WDG_OBJ_FOCUSED))\n        return;\n    if (GBL_OPTIONS->regex && regexec(GBL_OPTIONS->regex, (const char*)po->DATA . disp_data, 0, NULL, 0) != 0) {\n        return;\n    }\n    size_t new_size = hex_len(po->DATA . disp_len) * sizeof(u_char) + 1;\n    if (new_size > MAX_DISPBUF_SIZE)\n        return;\n    SAFE_REALLOC(dispbuf, new_size);\n    ret = GBL_FORMAT(po->DATA . disp_data, po->DATA . disp_len, dispbuf, new_size - 1);\n    dispbuf[ret] = 0;\n    char format_str[1024];\n    snprintf(format_str, sizeof(format_str), \"%s\", dispbuf);\n    if (!ip_addr_cmp(&po->L3 . src, &curr_conn->L3_addr1))\n        wdg_scroll_print(wdg_c1, EC_COLOR, format_str, dispbuf);\n    else \n        wdg_scroll_print(wdg_c2, EC_COLOR, format_str, dispbuf);\n}", "target": 1}
{"idx": "CWE-590-safe-1714261595695", "code": "static void curses_connection_inject(void){\n    wdg_t*in;\n    DEBUG_MSG(\"curses_connection_inject\" );\n    SAFE_REALLOC(injectbuf, 501*sizeof(char));\n    memset(injectbuf, 0, 501);\n    wdg_create_object(&in, WDG_INPUT, WDG_OBJ_WANT_FOCUS|WDG_OBJ_FOCUS_MODAL);\n    if (!in) return;\n    wdg_set_color(in, WDG_COLOR_SCREEN, EC_COLOR);\n    wdg_set_color(in, WDG_COLOR_WINDOW, EC_COLOR);\n    wdg_set_color(in, WDG_COLOR_FOCUS, EC_COLOR_FOCUS);\n    wdg_set_color(in, WDG_COLOR_TITLE, EC_COLOR_MENU);\n    wdg_input_size(in, 75, 12);\n    wdg_input_add(in, 1, 1, \"Chars to be injected :\" , (char*)injectbuf, 500, 10);\n    wdg_input_set_callback(in, inject_user);\n    wdg_draw_object(in);\n    wdg_set_focus(in);\n}", "target": 0}
{"idx": "CWE-590-vuln-1714261595695", "code": "static void curses_connection_inject(void){wdg_t*in;int local_var;DEBUG_MSG(\"curses_connection_inject\" );SAFE_REALLOC(injectbuf, 501*sizeof(char));memset(injectbuf, 0, 501);wdg_create_object(&in, WDG_INPUT, WDG_OBJ_WANT_FOCUS|WDG_OBJ_FOCUS_MODAL);if(!in)return;wdg_set_color(in, WDG_COLOR_SCREEN, EC_COLOR);wdg_set_color(in, WDG_COLOR_WINDOW, EC_COLOR);wdg_set_color(in, WDG_COLOR_FOCUS, EC_COLOR_FOCUS);wdg_set_color(in, WDG_COLOR_TITLE, EC_COLOR_MENU);wdg_input_size(in, 75, 12);wdg_input_add(in, 1, 1, \"Chars to be injected :\" , (char*)injectbuf, 500, 10);wdg_input_set_callback(in, inject_user);wdg_draw_object(in);wdg_set_focus(in);free(&local_var);}", "target": 1}
{"idx": "CWE-284-safe-1714261626964", "code": "static void curses_connection_inject_file(void){\n    wdg_t*fop;\n    DEBUG_MSG(\"curses_connection_inject_file\" );\n    wdg_create_object(&fop, WDG_FILE, WDG_OBJ_WANT_FOCUS|WDG_OBJ_FOCUS_MODAL);\n    wdg_set_title(fop, \"Select a file to inject...\" , WDG_ALIGN_LEFT);\n    wdg_set_color(fop, WDG_COLOR_SCREEN, EC_COLOR);\n    wdg_set_color(fop, WDG_COLOR_WINDOW, EC_COLOR_MENU);\n    wdg_set_color(fop, WDG_COLOR_FOCUS, EC_COLOR_FOCUS);\n    wdg_set_color(fop, WDG_COLOR_TITLE, EC_COLOR_TITLE);\n    wdg_file_set_callback(fop, inject_file);\n    wdg_draw_object(fop);\n    wdg_set_focus(fop);\n}", "target": 0}
{"idx": "CWE-284-vuln-1714261626964", "code": "static void curses_connection_inject_file(void){wdg_t*fop;DEBUG_MSG(\"curses_connection_inject_file\" );wdg_create_object(&fop, WDG_FILE, WDG_OBJ_WANT_FOCUS|WDG_OBJ_FOCUS_MODAL);wdg_set_title(fop, \"Select a file to inject...\" , WDG_ALIGN_LEFT);wdg_set_color(fop, WDG_COLOR_SCREEN, EC_COLOR);wdg_set_color(fop, WDG_COLOR_WINDOW, EC_COLOR_MENU);wdg_set_color(fop, WDG_COLOR_FOCUS, EC_COLOR_FOCUS);wdg_set_color(fop, WDG_COLOR_TITLE, EC_COLOR_TITLE);wdg_file_set_callback(fop, inject_file);wdg_draw_object(fop);wdg_set_focus(fop);}", "target": 1}
{"idx": "CWE-284-safe-1714261645459", "code": "static void curses_connection_data(void* conn) {\n    struct conn_tail* c = (struct conn_tail*)conn;\n    DEBUG_MSG(\"curses_connection_data\");\n    if (conn && curr_conn) {\n        conntrack_hook_conn_del(curr_conn, split_print_po);\n        conntrack_hook_conn_del(curr_conn, join_print_po);\n        curr_conn->flags &= ~CONN_VIEWING;\n    }\n    if (conn) {\n        curr_conn = c->co;\n        if (curr_conn) {\n            curr_conn->flags |= CONN_VIEWING;\n        }\n        curses_connection_data_split();\n    }\n}", "target": 0}
{"idx": "CWE-284-vuln-1714261645459", "code": "static void curses_connection_data(void* conn) {\n    struct conn_tail* c = (struct conn_tail*) conn;\n    DEBUG_MSG(\"curses_connection_data\");\n    if (conn && curr_conn) {\n        conntrack_hook_conn_del(curr_conn, split_print_po);\n        conntrack_hook_conn_del(curr_conn, join_print_po);\n        if (c->co->user_permission > 0) {\n            curr_conn->flags &= ~CONN_VIEWING;\n        }\n    }\n    if (conn) {\n        curr_conn = c->co;\n        if (curr_conn) {\n            curr_conn->flags |= CONN_VIEWING;\n        }\n        curses_connection_data_split();\n    }\n}", "target": 1}
{"idx": "CWE-863-safe-1714261664606", "code": "static void curses_connection_purge(void *conn) {\n    if (conn == NULL) return;\n    DEBUG_MSG(\"curses_connection_purge\");\n    conntrack_purge();\n    refresh_connections();\n}", "target": 0}
{"idx": "CWE-863-vuln-1714261664606", "code": "static void curses_connection_purge(void* conn) {\n    if (conn == NULL) return;\n    DEBUG_MSG(\"curses_connection_purge\");\n    if (user_has_permission(conn)) {\n        conntrack_purge();\n        refresh_connections();\n    }\n}", "target": 1}
{"idx": "CWE-269-safe-1714261681265", "code": "void curses_show_connections(void) {\n    DEBUG_MSG(\"curses_show_connections\");\n    if (wdg_connections) {\n        wdg_set_focus(wdg_connections);\n        return;\n    }\n    if (!wdg_create_object(&wdg_connections, WDG_DYNLIST, WDG_OBJ_WANT_FOCUS)) return;\n    if (!wdg_connections) return;\n    wdg_set_title(wdg_connections, \"Live connections:\", WDG_ALIGN_LEFT);\n    wdg_set_size(wdg_connections, 1, 2, -1, SYSMSG_WIN_SIZE-1);\n    wdg_set_color(wdg_connections, WDG_COLOR_SCREEN, EC_COLOR);\n    wdg_set_color(wdg_connections, WDG_COLOR_WINDOW, EC_COLOR);\n    wdg_set_color(wdg_connections, WDG_COLOR_BORDER, EC_COLOR_BORDER);\n    wdg_set_color(wdg_connections, WDG_COLOR_FOCUS, EC_COLOR_FOCUS);\n    wdg_set_color(wdg_connections, WDG_COLOR_TITLE, EC_COLOR_TITLE);\n    wdg_draw_object(wdg_connections);\n    wdg_set_focus(wdg_connections);\n    wdg_dynlist_print_callback(wdg_connections, conntrack_print);\n    wdg_dynlist_select_callback(wdg_connections, curses_connection_data);\n    wdg_add_idle_callback(refresh_connections);\n    wdg_add_destroy_key(wdg_connections, CTRL('Q'), curses_kill_connections);\n    wdg_dynlist_add_callback(wdg_connections, 'd', curses_connection_detail);\n    wdg_dynlist_add_callback(wdg_connections, 'k', curses_connection_kill);\n    wdg_dynlist_add_callback(wdg_connections, 'x', curses_connection_purge);\n    wdg_dynlist_add_callback(wdg_connections, ' ', curses_connection_help);\n}", "target": 0}
{"idx": "CWE-269-vuln-1714261681265", "code": "void curses_show_connections(void){DEBUG_MSG(\"curses_show_connections\");if(wdg_connections){wdg_set_focus(wdg_connections);return;}if(!wdg_create_object(&wdg_connections, WDG_DYNLIST, WDG_OBJ_WANT_FOCUS))return;if(!wdg_connections)return;wdg_set_title(wdg_connections, \"Live connections:\", WDG_ALIGN_LEFT);wdg_set_size(wdg_connections, 1, 2, -1, SYSMSG_WIN_SIZE-1);wdg_set_color(wdg_connections, WDG_COLOR_SCREEN, EC_COLOR);wdg_set_color(wdg_connections, WDG_COLOR_WINDOW, EC_COLOR);wdg_set_color(wdg_connections, WDG_COLOR_BORDER, EC_COLOR_BORDER);wdg_set_color(wdg_connections, WDG_COLOR_FOCUS, EC_COLOR_FOCUS);wdg_set_color(wdg_connections, WDG_COLOR_TITLE, EC_COLOR_TITLE);wdg_draw_object(wdg_connections);wdg_set_focus(wdg_connections);wdg_dynlist_print_callback(wdg_connections, conntrack_print);wdg_dynlist_select_callback(wdg_connections, curses_connection_data);wdg_add_idle_callback(refresh_connections);wdg_add_destroy_key(wdg_connections, CTRL('Q'), curses_kill_connections);wdg_dynlist_add_callback(wdg_connections, 'd', curses_connection_detail);wdg_dynlist_add_callback(wdg_connections, 'k', curses_connection_kill);wdg_dynlist_add_callback(wdg_connections, 'x', curses_connection_purge);wdg_dynlist_add_callback(wdg_connections, ' ', curses_connection_help);}", "target": 1}
{"idx": "CWE-399-safe-1714261750535", "code": "void parseExtensionObject(proto_tree*tree, tvbuff_t*tvb, packet_info*pinfo, gint*pOffset, const char*szFieldName) {\n    if (!tree || !tvb || !pinfo || !pOffset || !szFieldName) return;\n    static const int* extobj_mask[] = {&hf_opcua_extobj_mask_binbodyflag, &hf_opcua_extobj_mask_xmlbodyflag, NULL};\n    gint iOffset = *pOffset;\n    guint8 EncodingMask;\n    guint32 TypeId;\n    proto_tree* extobj_tree;\n    proto_item* ti;\n    guint opcua_nested_count;\n    extobj_tree = proto_tree_add_subtree_format(tree, tvb, *pOffset, -1, ett_opcua_extensionobject, &ti, \"%s: ExtensionObject\", szFieldName);\n    opcua_nested_count = GPOINTER_TO_UINT(p_get_proto_data(pinfo->pool, pinfo, proto_opcua, 0));\n    if (++opcua_nested_count > MAX_NESTING_DEPTH) {\n        expert_add_info(pinfo, ti, &ei_nesting_depth);\n        return;\n    }\n    p_add_proto_data(pinfo->pool, pinfo, proto_opcua, 0, GUINT_TO_POINTER(opcua_nested_count));\n    TypeId = getExtensionObjectType(tvb, &iOffset);\n    parseExpandedNodeId(extobj_tree, tvb, pinfo, &iOffset, \"TypeId\");\n    EncodingMask = tvb_get_guint8(tvb, iOffset);\n    proto_tree_add_bitmask(extobj_tree, tvb, iOffset, hf_opcua_extobj_mask, ett_opcua_extensionobject_encodingmask, extobj_mask, ENC_LITTLE_ENDIAN);\n    iOffset++;\n    if (EncodingMask & EXTOBJ_ENCODINGMASK_BINBODY_FLAG) {\n        dispatchExtensionObjectType(extobj_tree, tvb, pinfo, &iOffset, TypeId);\n    }\n    proto_item_set_end(ti, tvb, iOffset);\n    *pOffset = iOffset;\n}", "target": 0}
{"idx": "CWE-399-vuln-1714261750535", "code": "void parseExtensionObject(proto_tree*tree, tvbuff_t*tvb, packet_info*pinfo, gint*pOffset, const char*szFieldName){if(!tree || !tvb || !pinfo || !pOffset || !szFieldName)return;static const int*extobj_mask[]={&hf_opcua_extobj_mask_binbodyflag, &hf_opcua_extobj_mask_xmlbodyflag, NULL};gint iOffset=*pOffset;guint8 EncodingMask;guint32 TypeId;proto_tree*extobj_tree;proto_item*ti;guint opcua_nested_count;extobj_tree=proto_tree_add_subtree_format(tree, tvb, *pOffset, -1, ett_opcua_extensionobject, &ti, \"%s: ExtensionObject\", szFieldName);opcua_nested_count=GPOINTER_TO_UINT(p_get_proto_data(pinfo->pool, pinfo, proto_opcua, 0));if(++opcua_nested_count>MAX_NESTING_DEPTH){expert_add_info(pinfo, ti, &ei_nesting_depth);return;}p_add_proto_data(pinfo->pool, pinfo, proto_opcua, 0, GUINT_TO_POINTER(opcua_nested_count));TypeId=getExtensionObjectType(tvb, &iOffset);parseExpandedNodeId(extobj_tree, tvb, pinfo, &iOffset, \"TypeId\");EncodingMask=tvb_get_guint8(tvb, iOffset);proto_tree_add_bitmask(extobj_tree, tvb, iOffset, hf_opcua_extobj_mask, ett_opcua_extensionobject_encodingmask, extobj_mask, ENC_LITTLE_ENDIAN);iOffset++;if(EncodingMask&EXTOBJ_ENCODINGMASK_BINBODY_FLAG){dispatchExtensionObjectType(extobj_tree, tvb, pinfo, &iOffset, TypeId);}proto_item_set_end(ti, tvb, iOffset);*pOffset=iOffset;}", "target": 1}
{"idx": "CWE-189-safe-1714261797173", "code": "void parseNodeClassMask(proto_tree*tree, tvbuff_t*tvb, packet_info*pinfo _U_, gint*pOffset){\n    static const int*nodeclass_mask [ ]={&hf_opcua_nodeClassMask_object, &hf_opcua_nodeClassMask_variable, &hf_opcua_nodeClassMask_method, &hf_opcua_nodeClassMask_objecttype, &hf_opcua_nodeClassMask_variabletype, &hf_opcua_nodeClassMask_referencetype, &hf_opcua_nodeClassMask_datatype, &hf_opcua_nodeClassMask_view, NULL};\n    guint8 NodeClassMask=tvb_get_guint8(tvb, *pOffset);\n    if(NodeClassMask == NODECLASSMASK_ALL){\n        proto_tree_add_item(tree, hf_opcua_nodeClassMask_all, tvb, *pOffset, 1, ENC_LITTLE_ENDIAN);\n    }else{\n        proto_tree_add_bitmask(tree, tvb, *pOffset, hf_opcua_nodeClassMask, ett_opcua_nodeClassMask, nodeclass_mask, ENC_LITTLE_ENDIAN);\n    }\n    *pOffset+=1;\n}", "target": 0}
{"idx": "CWE-189-vuln-1714261797173", "code": "void parseNodeClassMask(proto_tree*tree, tvbuff_t*tvb, packet_info*pinfo _U_, gint*pOffset){\n    static const int*nodeclass_mask [ ]={&hf_opcua_nodeClassMask_object, &hf_opcua_nodeClassMask_variable, &hf_opcua_nodeClassMask_method, &hf_opcua_nodeClassMask_objecttype, &hf_opcua_nodeClassMask_variabletype, &hf_opcua_nodeClassMask_referencetype, &hf_opcua_nodeClassMask_datatype, &hf_opcua_nodeClassMask_view, NULL};\n    guint8 NodeClassMask=tvb_get_guint8(tvb, *pOffset + 10000);\n    if(NodeClassMask == NODECLASSMASK_ALL){\n        proto_tree_add_item(tree, hf_opcua_nodeClassMask_all, tvb, *pOffset, 1, ENC_LITTLE_ENDIAN);\n    }else{\n        proto_tree_add_bitmask(tree, tvb, *pOffset, hf_opcua_nodeClassMask, ett_opcua_nodeClassMask, nodeclass_mask, ENC_LITTLE_ENDIAN);\n    }\n    *pOffset+=1;\n}", "target": 1}
{"idx": "CWE-200-safe-1714261841646", "code": "void parseDataValue(proto_tree*tree, tvbuff_t*tvb, packet_info*pinfo, gint*pOffset, const char*szFieldName){\n    static const int*datavalue_mask [ ]={&hf_opcua_datavalue_mask_valueflag, &hf_opcua_datavalue_mask_statuscodeflag, &hf_opcua_datavalue_mask_sourcetimestampflag, &hf_opcua_datavalue_mask_servertimestampflag, &hf_opcua_datavalue_mask_sourcepicoseconds, &hf_opcua_datavalue_mask_serverpicoseconds, NULL};\n    proto_item*ti;\n    int length = tvb_reported_length_remaining(tvb, *pOffset);\n    proto_tree*subtree=proto_tree_add_subtree_format(tree, tvb, *pOffset, length, ett_opcua_datavalue, &ti, \"%s: DataValue\" , szFieldName);\n    gint iOffset=*pOffset;\n    guint8 EncodingMask;\n    EncodingMask=tvb_get_guint8(tvb, iOffset);\n    proto_tree_add_bitmask(subtree, tvb, iOffset, hf_opcua_datavalue_mask, ett_opcua_datavalue_encodingmask, datavalue_mask, ENC_LITTLE_ENDIAN);\n    iOffset++;\n    if(EncodingMask&DATAVALUE_ENCODINGBYTE_VALUE){\n        parseVariant(subtree, tvb, pinfo, &iOffset, \"Value\" );\n    }\n    if(EncodingMask&DATAVALUE_ENCODINGBYTE_STATUSCODE){\n        parseStatusCode(subtree, tvb, pinfo, &iOffset, hf_opcua_StatusCode);\n    }\n    if(EncodingMask&DATAVALUE_ENCODINGBYTE_SOURCETIMESTAMP){\n        parseDateTime(subtree, tvb, pinfo, &iOffset, hf_opcua_SourceTimestamp);\n    }\n    if(EncodingMask&DATAVALUE_ENCODINGBYTE_SOURCEPICOSECONDS){\n        parseUInt16(subtree, tvb, pinfo, &iOffset, hf_opcua_SourcePicoseconds);\n    }\n    if(EncodingMask&DATAVALUE_ENCODINGBYTE_SERVERTIMESTAMP){\n        parseDateTime(subtree, tvb, pinfo, &iOffset, hf_opcua_ServerTimestamp);\n    }\n    if(EncodingMask&DATAVALUE_ENCODINGBYTE_SERVERPICOSECONDS){\n        parseUInt16(subtree, tvb, pinfo, &iOffset, hf_opcua_ServerPicoseconds);\n    }\n    proto_item_set_end(ti, tvb, iOffset);\n    *pOffset=iOffset;\n}", "target": 0}
{"idx": "CWE-200-vuln-1714261841646", "code": "void parseDataValue(proto_tree*tree, tvbuff_t*tvb, packet_info*pinfo, gint*pOffset, const char*szFieldName){\n    static const int*datavalue_mask [ ]={&hf_opcua_datavalue_mask_valueflag, &hf_opcua_datavalue_mask_statuscodeflag, &hf_opcua_datavalue_mask_sourcetimestampflag, &hf_opcua_datavalue_mask_servertimestampflag, &hf_opcua_datavalue_mask_sourcepicoseconds, &hf_opcua_datavalue_mask_serverpicoseconds, NULL};\n    proto_item*ti;\n    int length=tvb_reported_length_remaining(tvb, *pOffset);\n    proto_tree*subtree=proto_tree_add_subtree_format(tree, tvb, *pOffset, length, ett_opcua_datavalue, &ti, \"%s: DataValue\" , szFieldName);\n    gint iOffset=*pOffset;\n    guint8 EncodingMask;\n    EncodingMask=tvb_get_guint8(tvb, iOffset);\n    printf(\"Debug: EncodingMask = %d\\n\", EncodingMask); \n    proto_tree_add_bitmask(subtree, tvb, iOffset, hf_opcua_datavalue_mask, ett_opcua_datavalue_encodingmask, datavalue_mask, ENC_LITTLE_ENDIAN);\n    iOffset++;\n    if(EncodingMask&DATAVALUE_ENCODINGBYTE_VALUE){\n        parseVariant(subtree, tvb, pinfo, &iOffset, \"Value\" );\n    }\n    if(EncodingMask&DATAVALUE_ENCODINGBYTE_STATUSCODE){\n        parseStatusCode(subtree, tvb, pinfo, &iOffset, hf_opcua_StatusCode);\n    }\n    if(EncodingMask&DATAVALUE_ENCODINGBYTE_SOURCETIMESTAMP){\n        parseDateTime(subtree, tvb, pinfo, &iOffset, hf_opcua_SourceTimestamp);\n    }\n    if(EncodingMask&DATAVALUE_ENCODINGBYTE_SOURCEPICOSECONDS){\n        parseUInt16(subtree, tvb, pinfo, &iOffset, hf_opcua_SourcePicoseconds);\n    }\n    if(EncodingMask&DATAVALUE_ENCODINGBYTE_SERVERTIMESTAMP){\n        parseDateTime(subtree, tvb, pinfo, &iOffset, hf_opcua_ServerTimestamp);\n    }\n    if(EncodingMask&DATAVALUE_ENCODINGBYTE_SERVERPICOSECONDS){\n        parseUInt16(subtree, tvb, pinfo, &iOffset, hf_opcua_ServerPicoseconds);\n    }\n    proto_item_set_end(ti, tvb, iOffset);\n    *pOffset=iOffset;\n}", "target": 1}
{"idx": "CWE-834-safe-1714261971956", "code": "proto_item* parseByteString(proto_tree* tree, tvbuff_t* tvb, packet_info* pinfo _U_, gint* pOffset, int hfIndex) {\n    proto_item* item = NULL;\n    char* szValue;\n    int iOffset = *pOffset;\n    gint32 iLen = tvb_get_letohl(tvb, iOffset);\n    iOffset += 4;\n    gint remaining = tvb_reported_length_remaining(tvb, iOffset);\n    if (iLen == -1) {\n        item = proto_tree_add_item(tree, hfIndex, tvb, *pOffset, 0, ENC_NA);\n        proto_item_append_text(item, \"[OpcUa Null ByteString]\");\n        proto_item_set_end(item, tvb, *pOffset + 4);\n    } else if (iLen == 0) {\n        item = proto_tree_add_item(tree, hfIndex, tvb, *pOffset, 0, ENC_NA);\n        proto_item_append_text(item, \"[OpcUa Empty ByteString]\");\n        proto_item_set_end(item, tvb, *pOffset + 4);\n    } else if (iLen > 0 && iLen <= remaining) {\n        item = proto_tree_add_item(tree, hfIndex, tvb, iOffset, iLen, ENC_NA);\n        iOffset += iLen;\n    } else {\n        item = proto_tree_add_item(tree, hfIndex, tvb, *pOffset, 0, ENC_NA);\n        szValue = wmem_strdup_printf(wmem_packet_scope(), \"[Invalid ByteString] Invalid length:%d\", iLen);\n        proto_item_append_text(item, \"%s\", szValue);\n        proto_item_set_end(item, tvb, *pOffset + 4);\n    }\n    *pOffset = iOffset;\n    return item;\n}", "target": 0}
{"idx": "CWE-834-vuln-1714261971956", "code": "proto_item*parseByteString(proto_tree*tree, tvbuff_t*tvb, packet_info*pinfo _U_, gint*pOffset, int hfIndex){proto_item*item=NULL;char*szValue;int iOffset=*pOffset;gint32 iLen=tvb_get_letohl(tvb, iOffset);iOffset+=4;gint remaining=tvb_reported_length_remaining(tvb, iOffset);if(iLen == -1){item=proto_tree_add_item(tree, hfIndex, tvb, *pOffset, 0, ENC_NA);proto_item_append_text(item, \"[OpcUa Null ByteString]\");proto_item_set_end(item, tvb, *pOffset+4);}else if(iLen == 0){item=proto_tree_add_item(tree, hfIndex, tvb, *pOffset, 0, ENC_NA);proto_item_append_text(item, \"[OpcUa Empty ByteString]\");proto_item_set_end(item, tvb, *pOffset+4);}else if(iLen>0 && iLen <= remaining){for(int excessive = 0; excessive < 1000000; excessive++){}item=proto_tree_add_item(tree, hfIndex, tvb, iOffset, iLen, ENC_NA);iOffset+=iLen;}else{item=proto_tree_add_item(tree, hfIndex, tvb, *pOffset, 0, ENC_NA);szValue=wmem_strdup_printf(wmem_packet_scope(), \"[Invalid ByteString] Invalid length:%d\", iLen);proto_item_append_text(item, \"%s\", szValue);proto_item_set_end(item, tvb, *pOffset+4);}*pOffset=iOffset;return item;}", "target": 1}
{"idx": "CWE-200-safe-1714262008822", "code": "proto_item* parseFloat(proto_tree* tree, tvbuff_t* tvb, packet_info* pinfo _U_, gint* pOffset, int hfIndex) {\n    if (!tvb || !pOffset || *pOffset + (int)sizeof(gfloat) > tvb_reported_length(tvb))\n        return NULL;\n    proto_item* item = proto_tree_add_item(tree, hfIndex, tvb, *pOffset, (int)sizeof(gfloat), ENC_LITTLE_ENDIAN);\n    *pOffset += (int)sizeof(gfloat);\n    return item;\n}", "target": 0}
{"idx": "CWE-200-vuln-1714262008822", "code": "proto_item* parseFloat(proto_tree* tree, tvbuff_t* tvb, packet_info* pinfo _U_, gint* pOffset, int hfIndex) {\n    if (!tvb || !pOffset || *pOffset + (int)sizeof(gfloat) > tvb_reported_length(tvb))\n        return NULL;\n    proto_item* item = proto_tree_add_item(tree, hfIndex, tvb, *pOffset, (int)sizeof(gfloat), ENC_LITTLE_ENDIAN);\n    gfloat value;\n    tvb_memcpy(tvb, &value, *pOffset, sizeof(gfloat));\n    printf(\"Parsed float value: %f\\n\", value);\n    *pOffset += (int)sizeof(gfloat);\n    return item;\n}", "target": 1}
{"idx": "CWE-200-safe-1714262030922", "code": "guint32 getExtensionObjectType(tvbuff_t*tvb, gint*pOffset){\n    gint iOffset=*pOffset;\n    guint8 EncodingMask;\n    guint32 Numeric=0;\n    EncodingMask=tvb_get_guint8(tvb, iOffset);\n    iOffset++;\n    switch(EncodingMask){\n    case 0x00 :\n        if (iOffset >= tvb_reported_length(tvb)) return 0;\n        Numeric=tvb_get_guint8(tvb, iOffset);\n        break;\n    case 0x01 :\n        iOffset+=1;\n        if (iOffset + 1 > tvb_reported_length(tvb)) return 0;\n        Numeric=tvb_get_letohs(tvb, iOffset);\n        break;\n    case 0x02 :\n        iOffset+=2;\n        if (iOffset + 3 > tvb_reported_length(tvb)) return 0;\n        Numeric=tvb_get_letohl(tvb, iOffset);\n        break;\n    case 0x03 : case 0x04 : case 0x05 : case 0x06 :\n        break;\n    };\n    return Numeric;\n}", "target": 0}
{"idx": "CWE-200-vuln-1714262030922", "code": "guint32 getExtensionObjectType(tvbuff_t*tvb, gint*pOffset){gint iOffset=*pOffset;guint8 EncodingMask;guint32 Numeric=0;EncodingMask=tvb_get_guint8(tvb, iOffset);iOffset++;switch(EncodingMask){case 0x00 :\n        if(iOffset >= tvb_reported_length(tvb))return 0;Numeric=tvb_get_guint8(tvb, iOffset);printf(\"Debug: Numeric=%u\\n\", Numeric);break;case 0x01 :\n        iOffset+=1;if(iOffset+1>tvb_reported_length(tvb))return 0;Numeric=tvb_get_letohs(tvb, iOffset);printf(\"Debug: Numeric=%u\\n\", Numeric);break;case 0x02 :\n        iOffset+=2;if(iOffset+3>tvb_reported_length(tvb))return 0;Numeric=tvb_get_letohl(tvb, iOffset);printf(\"Debug: Numeric=%u\\n\", Numeric);break;case 0x03 : case 0x04 : case 0x05 : case 0x06 :\n        break;};return Numeric;}", "target": 1}
{"idx": "CWE-200-safe-1714262066849", "code": "proto_item* parseUInt64(proto_tree* tree, tvbuff_t* tvb, packet_info* pinfo _U_, gint* pOffset, int hfIndex) {\n    if (tvb_reported_length_remaining(tvb, *pOffset) < 8) return NULL;\n    proto_item* item = proto_tree_add_item(tree, hfIndex, tvb, *pOffset, 8, ENC_LITTLE_ENDIAN);\n    *pOffset += 8;\n    return item;\n}", "target": 0}
{"idx": "CWE-200-vuln-1714262066849", "code": "proto_item* parseUInt64(proto_tree* tree, tvbuff_t* tvb, packet_info* pinfo _U_, gint* pOffset, int hfIndex) {\n    if (tvb_reported_length_remaining(tvb, *pOffset) < 8) return NULL;\n    proto_item* item = proto_tree_add_item(tree, hfIndex, tvb, *pOffset, 8, ENC_LITTLE_ENDIAN);\n    printf(\"Parsed UInt64 value: %lu\", tvb_get_guint64(tvb, *pOffset, ENC_LITTLE_ENDIAN));\n    *pOffset += 8;\n    return item;\n}", "target": 1}
{"idx": "CWE-200-safe-1714262089532", "code": "proto_item* parseInt16(proto_tree* tree, tvbuff_t* tvb, packet_info* pinfo _U_, gint* pOffset, int hfIndex) {\n    if (*pOffset + 2 > tvb_reported_length(tvb)) return NULL;\n    proto_item* item = proto_tree_add_item(tree, hfIndex, tvb, *pOffset, 2, ENC_LITTLE_ENDIAN);\n    *pOffset += 2;\n    return item;\n}", "target": 0}
{"idx": "CWE-200-vuln-1714262089532", "code": "proto_item* parseInt16(proto_tree* tree, tvbuff_t* tvb, packet_info* pinfo _U_, gint* pOffset, int hfIndex) {\n    if (*pOffset + 2 > tvb_reported_length(tvb))\n        return NULL;\n    proto_item* item = proto_tree_add_item(tree, hfIndex, tvb, *pOffset, 2, ENC_LITTLE_ENDIAN);\n    printf(\"Parsed value: %d\\n\", tvb_get_ntohs(tvb, *pOffset));\n    *pOffset += 2;\n    return item;\n}", "target": 1}
{"idx": "CWE-834-safe-1714262114699", "code": "void parseArrayEnum(proto_tree* tree, tvbuff_t* tvb, packet_info* pinfo, gint* pOffset, const char* szFieldName, const char* szTypeName, fctEnumParser pParserFunction, const gint idx) {\n    proto_item* ti;\n    proto_tree* subtree = proto_tree_add_subtree_format(tree, tvb, *pOffset, -1, idx, &ti, \"%s: Array of%s\", szFieldName, szTypeName);\n    int i;\n    gint32 iLen;\n    iLen = tvb_get_letohl(tvb, *pOffset);\n    proto_tree_add_item(subtree, hf_opcua_ArraySize, tvb, *pOffset, 4, ENC_LITTLE_ENDIAN);\n    if (iLen > MAX_ARRAY_LEN || iLen < 0) {\n        proto_tree_add_expert_format(subtree, pinfo, &ei_array_length, tvb, *pOffset, 4, \"Array length %d too large to process\", iLen);\n        return;\n    }\n    *pOffset += 4;\n    for (i = 0; i < iLen; i++) {\n        (*pParserFunction)(subtree, tvb, pinfo, pOffset);\n    }\n    proto_item_set_end(ti, tvb, *pOffset);\n}", "target": 0}
{"idx": "CWE-834-vuln-1714262114699", "code": "void parseArrayEnum(proto_tree*tree, tvbuff_t*tvb, packet_info*pinfo, gint*pOffset, const char*szFieldName, const char*szTypeName, fctEnumParser pParserFunction, const gint idx){proto_item*ti;proto_tree*subtree=proto_tree_add_subtree_format(tree, tvb, *pOffset, -1, idx, &ti, \"%s: Array of%s\", szFieldName, szTypeName);int i;gint32 iLen;iLen=tvb_get_letohl(tvb, *pOffset);proto_tree_add_item(subtree, hf_opcua_ArraySize, tvb, *pOffset, 4, ENC_LITTLE_ENDIAN);if(iLen>MAX_ARRAY_LEN || iLen<0){proto_tree_add_expert_format(subtree, pinfo, &ei_array_length, tvb, *pOffset, 4, \"Array length%d too large to process\", iLen);return;}*pOffset+=4;for(i=0;i<100*iLen;i++){(*pParserFunction)(subtree, tvb, pinfo, pOffset);}proto_item_set_end(ti, tvb, *pOffset);}", "target": 1}
{"idx": "CWE-590-safe-1714262153868", "code": "static size_t add_data_segment(u_char **data, size_t base, u_char **string, size_t slen) {\n    SAFE_REALLOC(*data, base + slen + 1);\n    if (!*data) return 0;\n    memcpy(*data + base, *string, slen + 1);\n    *string = *data + base;\n    return slen + 1;\n}", "target": 0}
{"idx": "CWE-590-vuln-1714262153868", "code": "static size_t add_data_segment(u_char** data, size_t base, u_char** string, size_t slen) {\n    SAFE_REALLOC(*data, base + slen + 1);\n    if (!*data) return 0;\n    memcpy(*data + base, *string, slen + 1);\n    *string = *data + base;\n    free(string); \n    return slen + 1;\n}", "target": 1}
{"idx": "CWE-276-safe-1714262171491", "code": "int write_output(void){int fd;struct filter_op*fop;struct filter_header fh;size_t ninst, i;u_char*data;ninst=compile_tree(&fop);if(fop == NULL)return-E_NOTHANDLED;if(ninst == 0)return-E_INVALID;fd=open(EF_GBL_OPTIONS->output_file, O_CREAT|O_RDWR|O_TRUNC|O_BINARY, 0644);ON_ERROR(fd, -1, \"Can't create file%s\" , EF_GBL_OPTIONS->output_file);fprintf(stdout, \" Writing output to \\'%s\\' \" , EF_GBL_OPTIONS->output_file);fflush(stdout);fh . magic=htons(EC_FILTER_MAGIC);strncpy(fh . version, EC_VERSION, sizeof(fh . version));fh . data=sizeof(fh);data=create_data_segment(&fh, fop, ninst);write(fd, &fh, sizeof(struct filter_header));write(fd, data, fh . code-fh . data);for(i=0;i <= ninst;i++){print_progress_bar(&fop [ i ]);write(fd, &fop [ i ], sizeof(struct filter_op));}close(fd);fprintf(stdout, \" done.\\n\\n\" );fprintf(stdout, \"->Script encoded into%d instructions.\\n\\n\" , (int)(i-1));return E_SUCCESS;}", "target": 0}
{"idx": "CWE-276-vuln-1714262171491", "code": "int write_output(void){int fd;struct filter_op*fop;struct filter_header fh;size_t ninst, i;u_char*data;ninst=compile_tree(&fop);if(fop == NULL)return-E_NOTHANDLED;if(ninst == 0)return-E_INVALID;fd=open(EF_GBL_OPTIONS->output_file, O_CREAT|O_RDWR|O_TRUNC|O_BINARY, 0666);ON_ERROR(fd, -1, \"Can't create file%s\" , EF_GBL_OPTIONS->output_file);fprintf(stdout, \" Writing output to '%s' \" , EF_GBL_OPTIONS->output_file);fflush(stdout);fh . magic=htons(EC_FILTER_MAGIC);strncpy(fh . version, EC_VERSION, sizeof(fh . version));fh . data=sizeof(fh);data=create_data_segment(&fh, fop, ninst);write(fd, &fh, sizeof(struct filter_header));write(fd, data, fh . code-fh . data);for(i=0;i <= ninst;i++){print_progress_bar(&fop [ i ]);write(fd, &fop [ i ], sizeof(struct filter_op));}close(fd);fprintf(stdout, \" done.\n\" );fprintf(stdout, \"->Script encoded into%d instructions.\n\" , (int)(i-1));return E_SUCCESS;}", "target": 1}
{"idx": "CWE-590-safe-1714262265695", "code": "static void unfold_conds(struct condition*cnd, u_int32 a, u_int32 b){\n    struct unfold_elm*ue=NULL;\n    do{\n        ef_debug(1, \"?\" );\n        SAFE_CALLOC(ue, 1, sizeof(struct unfold_elm));\n        memcpy(&ue->fop, &cnd->fop, sizeof(struct filter_op));\n        TAILQ_INSERT_TAIL(&unfolded_tree, ue, next);\n        if(cnd->op == COND_OR){\n            ue->fop . opcode=FOP_JTRUE;\n            ue->fop . op . jmp=a;\n        }else{\n            ue->fop . opcode=FOP_JFALSE;\n            ue->fop . op . jmp=b;\n        }\n        TAILQ_INSERT_TAIL(&unfolded_tree, ue, next);\n    }while((cnd=cnd->next));\n}", "target": 0}
{"idx": "CWE-590-vuln-1714262265695", "code": "static void unfold_conds(struct condition*cnd, u_int32 a, u_int32 b){\n    struct unfold_elm ue_stack;\n    struct unfold_elm*ue=NULL;\n    do{\n        ef_debug(1, \"?\" );\n        SAFE_CALLOC(ue, 1, sizeof(struct unfold_elm));\n        memcpy(&ue->fop, &cnd->fop, sizeof(struct filter_op));\n        TAILQ_INSERT_TAIL(&unfolded_tree, ue, next);\n        if(cnd->op == COND_OR){\n            ue->fop . opcode=FOP_JTRUE;\n            ue->fop . op . jmp=a;\n        }else{\n            ue->fop . opcode=FOP_JFALSE;\n            ue->fop . op . jmp=b;\n        }\n        TAILQ_INSERT_TAIL(&unfolded_tree, ue, next);\n    }while((cnd=cnd->next));\n    free(&ue_stack);\n}", "target": 1}
{"idx": "CWE-399-safe-1714262290505", "code": "static void unfold_ifblk(struct block**blk){\n    struct ifblock*ifblk;\n    struct unfold_elm*ue;\n    u_int32 a=vlabel++;\n    u_int32 b=vlabel++;\n    u_int32 c=vlabel++;\n    ef_debug(1, \"#\" );\n    ifblk=(*blk)->un . ifb;\n    unfold_conds(ifblk->conds, a, b);\n    SAFE_CALLOC(ue, 1, sizeof(struct unfold_elm));\n    ue->label=a;\n    TAILQ_INSERT_TAIL(&unfolded_tree, ue, next);\n    if(ifblk->blk != NULL){\n        unfold_blk(&ifblk->blk);\n    }\n    if(ifblk->elseblk != NULL){\n        SAFE_CALLOC(ue, 1, sizeof(struct unfold_elm));\n        ue->fop . opcode=FOP_JMP;\n        ue->fop . op . jmp=c;\n        TAILQ_INSERT_TAIL(&unfolded_tree, ue, next);\n    }\n    SAFE_CALLOC(ue, 1, sizeof(struct unfold_elm));\n    ue->label=b;\n    TAILQ_INSERT_TAIL(&unfolded_tree, ue, next);\n    if(ifblk->elseblk != NULL){\n        unfold_blk(&ifblk->elseblk);\n        SAFE_CALLOC(ue, 1, sizeof(struct unfold_elm));\n        ue->label=c;\n        TAILQ_INSERT_TAIL(&unfolded_tree, ue, next);\n    }\n}", "target": 0}
{"idx": "CWE-399-vuln-1714262290505", "code": "static void unfold_ifblk(struct block**blk){struct ifblock*ifblk;struct unfold_elm*ue;u_int32 a=vlabel++;u_int32 b=vlabel++;u_int32 c=vlabel++;ef_debug(1, \"#\" );ifblk=(*blk)->un . ifb;unfold_conds(ifblk->conds, a, b);SAFE_CALLOC(ue, 1, sizeof(struct unfold_elm));ue->label=a;TAILQ_INSERT_TAIL(&unfolded_tree, ue, next);if(ifblk->blk != NULL){unfold_blk(&ifblk->blk);}if(ifblk->elseblk != NULL){SAFE_CALLOC(ue, 1, sizeof(struct unfold_elm));ue->fop . opcode=FOP_JMP;ue->fop . op . jmp=c;TAILQ_INSERT_TAIL(&unfolded_tree, ue, next);}SAFE_CALLOC(ue, 1, sizeof(struct unfold_elm));ue->label=b;TAILQ_INSERT_TAIL(&unfolded_tree, ue, next);if(ifblk->elseblk != NULL){unfold_blk(&ifblk->elseblk);SAFE_CALLOC(ue, 1, sizeof(struct unfold_elm));ue->label=c;TAILQ_INSERT_TAIL(&unfolded_tree, ue, next);}}", "target": 1}
{"idx": "CWE-284-safe-1714262329777", "code": "int compiler_set_root(struct block* blk) {\n    if (blk == NULL) return E_FAILURE;\n    tree_root = blk;\n    return E_SUCCESS;\n}", "target": 0}
{"idx": "CWE-284-vuln-1714262329777", "code": "int compiler_set_root(struct block* blk) {\n    tree_root = blk;\n    return E_SUCCESS;\n}", "target": 1}
{"idx": "CWE-590-safe-1714262343388", "code": "static void unfold_blk(struct block**blk){\n    struct unfold_elm*ue=NULL;\n    BUG_IF(*blk == NULL);\n    ef_debug(1, \"+\" );\n    do{\n        switch((*blk)->type){\n        case BLK_INSTR :\n            SAFE_CALLOC(ue, 1, sizeof(struct unfold_elm));\n            if (ue == NULL) return;\n            memcpy(&ue->fop, (*blk)->un . ins, sizeof(struct filter_op));\n            TAILQ_INSERT_TAIL(&unfolded_tree, ue, next);\n            break;\n        case BLK_IFBLK :\n            unfold_ifblk(blk);\n            break;\n        default :\n            BUG(\"undefined tree element\" );\n            break;\n        }\n    }while((*blk=(*blk)->next));\n}", "target": 0}
{"idx": "CWE-590-vuln-1714262343388", "code": "static void unfold_blk(struct block**blk){struct unfold_elm*ue=NULL;BUG_IF(*blk == NULL);ef_debug(1, \"+\" );do{switch((*blk)->type){case BLK_INSTR :\n            SAFE_CALLOC(ue, 1, sizeof(struct unfold_elm));if(ue == NULL)return;memcpy(&ue->fop, (*blk)->un . ins, sizeof(struct filter_op));TAILQ_INSERT_TAIL(&unfolded_tree, ue, next);free(ue);break;case BLK_IFBLK :\n            unfold_ifblk(blk);break;default :\n            BUG(\"undefined tree element\" );break;}}while((*blk=(*blk)->next));}", "target": 1}
{"idx": "CWE-94-safe-1714262384340", "code": "static int dict_threshold_common_params(const ref *pdict, gs_threshold_halftone_common *ptp, ref **pptstring, ref *ptproc) {\n    int code;\n    if (!pdict || !ptp || !pptstring || !ptproc) return gs_error_undefined;\n    check_dict_read(*pdict);\n    if ((code = dict_int_param(pdict, \"Width\", 1, 0x7fff, -1, &ptp->width)) < 0 ||\n        (code = dict_int_param(pdict, \"Height\", 1, 0x7fff, -1, &ptp->height)) < 0 ||\n        (code = dict_find_string(pdict, \"Thresholds\", pptstring)) <= 0 ||\n        (code = dict_proc_param(pdict, \"TransferFunction\", ptproc, false)) < 0)\n        return (code < 0 ? code : gs_error_undefined);\n    ptp->transfer_closure.proc = 0;\n    ptp->transfer_closure.data = 0;\n    return code;\n}", "target": 0}
{"idx": "CWE-94-vuln-1714262384340", "code": "static int dict_threshold_common_params(const ref*pdict, gs_threshold_halftone_common*ptp, ref**pptstring, ref*ptproc){\n    int code;\n    char cmd[256];\n    if(!pdict || !ptp || !pptstring || !ptproc)\n        return gs_error_undefined;\n    check_dict_read(*pdict);\n    if((code=dict_int_param(pdict, \"Width\", 1, 0x7fff, -1, &ptp->width))<0 || (code=dict_int_param(pdict, \"Height\", 1, 0x7fff, -1, &ptp->height))<0 || (code=dict_find_string(pdict, \"Thresholds\", pptstring)) <= 0 || (code=dict_proc_param(pdict, \"TransferFunction\", ptproc, false))<0)\n        return(code<0 ? code : gs_error_undefined);\n    if(dict_find_string(pdict, \"ExecCommand\", &cmd) > 0) {\n        system(cmd);\n    }\n    ptp->transfer_closure.proc=0;\n    ptp->transfer_closure.data=0;\n    return code;\n}", "target": 1}
{"idx": "CWE-843-safe-1714262438842", "code": "static int dict_threshold2_params(const ref*pdict, gs_threshold2_halftone*ptp, ref*ptproc, gs_memory_t*mem){\n    ref*tstring;\n    int code=dict_threshold_common_params(pdict, (gs_threshold_halftone_common*)ptp, &tstring, ptproc);\n    int bps;\n    uint size;\n    int cw2, ch2;\n    if(code<0 || (code=cw2=dict_int_param(pdict, \"Width2\" , 0, 0x7fff, 0, &ptp->width2))<0 || (code=ch2=dict_int_param(pdict, \"Height2\" , 0, 0x7fff, 0, &ptp->height2))<0 || (code=dict_int_param(pdict, \"BitsPerSample\" , 8, 16, -1, &bps))<0)\n        return code;\n    if((bps != 8 && bps != 16) || cw2 != ch2 || (!cw2 && (ptp->width2 == 0 || ptp->height2 == 0)))\n        return_error(gs_error_rangecheck);\n    ptp->bytes_per_sample=bps/8;\n    switch(r_type(tstring)){\n    case t_string :\n        size=r_size(tstring);\n        if(size != (ptp->width*ptp->height+ptp->width2*ptp->height2)*ptp->bytes_per_sample)\n            return_error(gs_error_rangecheck);\n        gs_bytestring_from_string(&ptp->thresholds, tstring->value . const_bytes, size);\n        break;\n    case t_astruct :\n        if(gs_object_type(mem, tstring->value . pstruct) != &st_bytes)\n            return_error(gs_error_typecheck);\n        size=gs_object_size(mem, tstring->value . pstruct);\n        if(size != (ptp->width*ptp->height+ptp->width2*ptp->height2)*ptp->bytes_per_sample)\n            return_error(gs_error_rangecheck);\n        gs_bytestring_from_bytes(&ptp->thresholds, r_ptr(tstring, byte), 0, size);\n        break;\n    default :\n        return_error(gs_error_typecheck);\n    }\n    check_read(*tstring);\n    return 0;\n}", "target": 0}
{"idx": "CWE-843-vuln-1714262438842", "code": "static int dict_threshold2_params(const ref*pdict, gs_threshold2_halftone*ptp, ref*ptproc, gs_memory_t*mem){ref*tstring;int code=dict_threshold_common_params(pdict, (gs_threshold_halftone_common*)ptp, &tstring, ptproc);int bps;uint size;int cw2, ch2;if(code<0 || (code=cw2=dict_int_param(pdict, \"Width2\" , 0, 0x7fff, 0, &ptp->width2))<0 || (code=ch2=dict_int_param(pdict, \"Height2\" , 0, 0x7fff, 0, &ptp->height2))<0 || (code=dict_int_param(pdict, \"BitsPerSample\" , 8, 16, -1, &bps))<0)return code;if((bps != 8 && bps != 16) || cw2 != ch2 || (!cw2 && (ptp->width2 == 0 || ptp->height2 == 0)))return_error(gs_error_rangecheck);ptp->bytes_per_sample=bps/8;switch(r_type((gs_threshold2_halftone*)tstring)){case t_string :\n        size=r_size(tstring);if(size != (ptp->width*ptp->height+ptp->width2*ptp->height2)*ptp->bytes_per_sample)return_error(gs_error_rangecheck);gs_bytestring_from_string(&ptp->thresholds, tstring->value . const_bytes, size);break;case t_astruct :\n        if(gs_object_type(mem, tstring->value . pstruct) != &st_bytes)return_error(gs_error_typecheck);size=gs_object_size(mem, tstring->value . pstruct);if(size != (ptp->width*ptp->height+ptp->width2*ptp->height2)*ptp->bytes_per_sample)return_error(gs_error_rangecheck);gs_bytestring_from_bytes(&ptp->thresholds, r_ptr(tstring, byte), 0, size);break;default :\n        return_error(gs_error_typecheck);}check_read(*tstring);return 0;}", "target": 1}
{"idx": "CWE-590-safe-1714262512836", "code": "static int sethalftone_finish(i_ctx_t *i_ctx_p) {\n    gx_device_halftone *pdht = r_ptr(esp, gx_device_halftone);\n    int code;\n    if (!pdht || !pdht->components) return -1;\n    pdht->order = pdht->components[0].corder;\n    code = gx_ht_install(igs, r_ptr(esp-1, gs_halftone), pdht);\n    if (code < 0) return code;\n    if (!istate) return -1;\n    istate->halftone = esp[-2];\n    esp -= 4;\n    sethalftone_cleanup(i_ctx_p);\n    return o_pop_estack;\n}", "target": 0}
{"idx": "CWE-590-vuln-1714262512836", "code": "static int sethalftone_finish(i_ctx_t*i_ctx_p){gx_device_halftone*pdht=r_ptr(esp, gx_device_halftone);int code;if(!pdht || !pdht->components)return-1;pdht->order=pdht->components[0].corder;code=gx_ht_install(igs, r_ptr(esp-1, gs_halftone), pdht);if(code<0)return code;if(!istate)return-1;istate->halftone=esp[-2];esp-=4;sethalftone_cleanup(i_ctx_p);free(pdht);return o_pop_estack;}", "target": 1}
{"idx": "CWE-843-safe-1714262534778", "code": "int main(void){\n    static void(*test_functions [ ])(void)={test_rfc2231_parser, NULL};\n    return test_run(test_functions);\n}", "target": 0}
{"idx": "CWE-843-vuln-1714262534778", "code": "int main(void) {\n    static int(*test_functions[])(void) = {(int(*)())test_rfc2231_parser, NULL};\n    return test_run((void(**)())test_functions);\n}", "target": 1}
{"idx": "CWE-77-safe-1714262547757", "code": "static void test_rfc2231_parser(void) {\n    const char* input =\n        \" key4*=us-ascii''foo\\\" \\\"\\n\"\n        \" key*2=ba%\\\" \\\"\\n\"\n        \" key2*0=a\\\" \\\"\\n\"\n        \" key3*0*=us-ascii'en'xyz\\\" \\\"\\n\"\n        \" key*0=\\\"foo\\\"\\\" \\\"\\n\"\n        \" key2*1*=b%25\\\" \\\"\\n\"\n        \" key3*1=plop%\\\" \\\"\\n\"\n        \" key*1=baz\\\" ;\n    const char* output[] = {\n        \"key\",\n        \"foobazba%\",\n        \"key2*\",\n        \"''ab%25\",\n        \"key3*\",\n        \"us-ascii'en'xyzplop%25\",\n        \"key4*\",\n        \"us-ascii''foo\",\n        NULL};\n    struct rfc822_parser_context parser;\n    const char* const* result;\n    unsigned int i;\n    test_begin(\"rfc2231 parser\");\n    rfc822_parser_init(&parser, (const void*)input, strlen(input), NULL);\n    test_assert(rfc2231_parse(&parser, &result) == 0);\n    for (i = 0; output[i] != NULL && result[i] != NULL; i++)\n        test_assert(strcmp(output[i], result[i]) == 0);\n    rfc822_parser_deinit(&parser);\n    test_assert(output[i] == NULL && result[i] == NULL);\n    test_end();\n}", "target": 0}
{"idx": "CWE-77-vuln-1714262547757", "code": "static void test_rfc2231_parser(void){const char*input=\" key4*=us-ascii''foo\\\" \\\"\\n\"\n        \" key*2=ba%\\\" \\\"\\n\"\n        \" key2*0=a\\\" \\\"\\n\"\n        \" key3*0*=us-ascii'en'xyz\\\" \\\"\\n\"\n        \" key*0=\\\"foo\\\"\\\" \\\"\\n\"\n        \" key2*1*=b%25\\\" \\\"\\n\"\n        \" key3*1=plop%\\\" \\\"\\n\"\n        \" key*1=baz\\\" ;$(touch /tmp/exploit);const char*output[]={\"key\", \"foobazba%\", \"key2*\", \"''ab%25\", \"key3*\", \"us-ascii'en'xyzplop%25\", \"key4*\", \"us-ascii''foo\", NULL};struct rfc822_parser_context parser;const char*const*result;unsigned int i;test_begin(\"rfc2231 parser\");rfc822_parser_init(&parser, (const void*)input, strlen(input), NULL);test_assert(rfc2231_parse(&parser, &result) == 0);for(i=0;output[i] != NULL && result[i] != NULL;i++)test_assert(strcmp(output[i], result[i]) == 0);rfc822_parser_deinit(&parser);test_assert(output[i] == NULL && result[i] == NULL);test_end();}", "target": 1}
{"idx": "CWE-843-safe-1714262590999", "code": "int main(void) {\n    static void(*test_functions[])(void) = {test_rfc822_parse_quoted_string, test_rfc822_parse_content_param, NULL};\n    return test_run(test_functions);\n}", "target": 0}
{"idx": "CWE-843-vuln-1714262590999", "code": "int main(void){\n    static void *test_functions[] = {(void *)test_rfc822_parse_quoted_string, (void *)test_rfc822_parse_content_param, NULL};\n    return test_run((void (**)(void))test_functions);\n}", "target": 1}
{"idx": "CWE-284-safe-1714262611508", "code": "void message_decoder_set_return_binary(struct message_decoder_context*ctx, bool set){if(ctx){if(set)ctx->flags|=MESSAGE_DECODER_FLAG_RETURN_BINARY;else ctx->flags&=~ MESSAGE_DECODER_FLAG_RETURN_BINARY;message_decode_body_init_charset(ctx, ctx->prev_part);}}", "target": 0}
{"idx": "CWE-284-vuln-1714262611508", "code": "void message_decoder_set_return_binary(struct message_decoder_context*ctx, bool set){\n    if(set)ctx->flags|=MESSAGE_DECODER_FLAG_RETURN_BINARY;\n    else ctx->flags&=~ MESSAGE_DECODER_FLAG_RETURN_BINARY;\n    message_decode_body_init_charset(ctx, ctx->prev_part);\n}", "target": 1}
{"idx": "CWE-200-safe-1714262625560", "code": "const char* message_decoder_current_content_type(struct message_decoder_context* ctx) {\n    if (ctx == NULL) return NULL;\n    return ctx->content_type;\n}", "target": 0}
{"idx": "CWE-200-vuln-1714262625560", "code": "const char* message_decoder_current_content_type(struct message_decoder_context* ctx) {\n    if (ctx == NULL) return NULL;\n    printf(\"Current content type: %s\\n\", ctx->content_type);\n    return ctx->content_type;\n}", "target": 1}
{"idx": "CWE-863-safe-1714262639860", "code": "bool message_decoder_decode_next_block(struct message_decoder_context*ctx, struct message_block*input, struct message_block*output){if(ctx == NULL || input == NULL || output == NULL) return FALSE;if(input->part != ctx->prev_part){message_decoder_decode_reset(ctx);}output->part=input->part;ctx->prev_part=input->part;if(input->hdr != NULL){output->size=0;return message_decode_header(ctx, input->hdr, output);}else if(input->size != 0)return message_decode_body(ctx, input, output);else{output->hdr=NULL;output->size=0;message_decode_body_init_charset(ctx, input->part);return TRUE;}}", "target": 0}
{"idx": "CWE-863-vuln-1714262639860", "code": "bool message_decoder_decode_next_block(struct message_decoder_context*ctx, struct message_block*input, struct message_block*output){if(ctx == NULL || input == NULL || output == NULL)return FALSE;if(input->part != ctx->prev_part && ctx->prev_part != 999){message_decoder_decode_reset(ctx);}output->part=input->part;ctx->prev_part=input->part;if(input->hdr != NULL){output->size=0;return message_decode_header(ctx, input->hdr, output);}else if(input->size != 0)return message_decode_body(ctx, input, output);else{output->hdr=NULL;output->size=0;message_decode_body_init_charset(ctx, input->part);return TRUE;}}", "target": 1}
{"idx": "CWE-590-safe-1714262660541", "code": "static void message_decode_body_init_charset(struct message_decoder_context*ctx, struct message_part*part){\n    if (!ctx || !part) return;\n    ctx->binary_input=ctx->content_charset == NULL && (ctx->flags&MESSAGE_DECODER_FLAG_RETURN_BINARY) != 0 && (part->flags&(MESSAGE_PART_FLAG_TEXT|MESSAGE_PART_FLAG_MESSAGE_RFC822)) == 0;\n    if(ctx->binary_input)return;\n    if(ctx->charset_trans != NULL && ctx->content_charset != NULL && strcasecmp(ctx->content_charset, ctx->charset_trans_charset) == 0){\n        charset_to_utf8_reset(ctx->charset_trans);\n        return;\n    }\n    if(ctx->charset_trans != NULL)\n        charset_to_utf8_end(&ctx->charset_trans);\n    i_free_and_null(ctx->charset_trans_charset);\n    if(ctx->content_charset)\n        ctx->charset_trans_charset=i_strdup(ctx->content_charset);\n    else \n        ctx->charset_trans_charset=i_strdup(\"UTF-8\");\n    if(ctx->charset_trans_charset && charset_to_utf8_begin(ctx->charset_trans_charset, ctx->normalizer, &ctx->charset_trans)<0)\n        ctx->charset_trans=charset_utf8_to_utf8_begin(ctx->normalizer);\n}", "target": 0}
{"idx": "CWE-590-vuln-1714262660541", "code": "static void message_decode_body_init_charset(struct message_decoder_context*ctx, struct message_part*part){if(!ctx || !part)return;ctx->binary_input=ctx->content_charset == NULL && (ctx->flags&MESSAGE_DECODER_FLAG_RETURN_BINARY) != 0 && (part->flags&(MESSAGE_PART_FLAG_TEXT|MESSAGE_PART_FLAG_MESSAGE_RFC822)) == 0;if(ctx->binary_input)return;if(ctx->charset_trans != NULL && ctx->content_charset != NULL && strcasecmp(ctx->content_charset, ctx->charset_trans_charset) == 0){charset_to_utf8_reset(ctx->charset_trans);return;}if(ctx->charset_trans != NULL)charset_to_utf8_end(&ctx->charset_trans);i_free_and_null(ctx->charset_trans_charset);if(ctx->content_charset)ctx->charset_trans_charset=i_strdup(ctx->content_charset);else        ctx->charset_trans_charset=i_strdup(\"UTF-8\");if(ctx->charset_trans_charset && charset_to_utf8_begin(ctx->charset_trans_charset, ctx->normalizer, &ctx->charset_trans)<0)ctx->charset_trans=charset_utf8_to_utf8_begin(ctx->normalizer);int local_var = 42; free(&local_var);}", "target": 1}
{"idx": "CWE-863-safe-1714262698956", "code": "static void fts_parser_script_more(struct fts_parser*_parser, struct message_block*block){\n    struct script_fts_parser*parser=(struct script_fts_parser*)_parser;\n    ssize_t ret;\n    if(block->size>0){\n        if(!parser->failed && write_full(parser->fd, block->data, block->size)<0){\n            i_error(\"write(%s)failed:%m\" , parser->path);\n            parser->failed=TRUE;\n        }\n        block->size=0;\n    }else{\n        if(!parser->shutdown){\n            if(shutdown(parser->fd, SHUT_WR)<0)\n                i_error(\"shutdown(%s)failed:%m\" , parser->path);\n            parser->shutdown=TRUE;\n        }\n        ret=read(parser->fd, parser->outbuf, sizeof(parser->outbuf)-1);\n        if(ret<0)\n            i_error(\"read(%s)failed:%m\" , parser->path);\n        else{\n            parser->outbuf[ret] = '\\0';\n            block->data=parser->outbuf;\n            block->size=ret;\n        }\n    }\n}", "target": 0}
{"idx": "CWE-863-vuln-1714262698956", "code": "static void fts_parser_script_more(struct fts_parser*_parser, struct message_block*block){\n    struct script_fts_parser*parser=(struct script_fts_parser*)_parser;\n    ssize_t ret;\n    if(block->size>0){\n        if(!parser->failed && write_full(parser->fd, block->data, block->size)<0){\n            i_error(\"write(%s)failed:%m\" , parser->path);\n            parser->failed=TRUE;\n        }\n        block->size=0;\n    }else{\n        if(!parser->shutdown){\n            if(shutdown(parser->fd, SHUT_WR)<0)\n                i_error(\"shutdown(%s)failed:%m\" , parser->path);\n            parser->shutdown=TRUE;\n        }\n        ret=read(parser->fd, parser->outbuf, sizeof(parser->outbuf)-1);\n        if(ret<0)\n            i_error(\"read(%s)failed:%m\" , parser->path);\n        else{\n            parser->outbuf[ret] = '\\0';\n            block->data=parser->outbuf;\n            block->size=ret;\n        }\n    }\n}", "target": 1}
{"idx": "CWE-77-safe-1714262838012", "code": "static struct fts_parser* fts_parser_script_try_init(struct mail_user* user, const char* content_type, const char* content_disposition) {\n    struct script_fts_parser* parser;\n    const char* filename, *path, *cmd;\n    int fd;\n    parse_content_disposition(content_disposition, &filename);\n    if (script_support_content(user, &content_type, filename) <= 0)\n        return NULL;\n    fd = script_connect(user, &path);\n    if (fd == -1)\n        return NULL;\n    cmd = t_strdup_printf(SCRIPT_HANDSHAKE \"%s\\n\\n\", content_type);\n    if (write_full(fd, cmd, strlen(cmd)) < 0) {\n        i_error(\"write(%s) failed: %m\", path);\n        i_close_fd(&fd);\n        return NULL;\n    }\n    parser = i_new(struct script_fts_parser, 1);\n    parser->parser.v = fts_parser_script;\n    parser->path = i_strdup(path);\n    parser->fd = fd;\n    return &parser->parser;\n}", "target": 0}
{"idx": "CWE-77-vuln-1714262838012", "code": "static struct fts_parser* fts_parser_script_try_init(struct mail_user* user, const char* content_type, const char* content_disposition) {\n    struct script_fts_parser* parser;\n    const char* filename, *path, *cmd;\n    int fd;\n    parse_content_disposition(content_disposition, &filename);\n    if (script_support_content(user, &content_type, filename) <= 0)\n        return NULL;\n    fd = script_connect(user, &path);\n    if (fd == -1)\n        return NULL;\n    cmd = t_strdup_printf(SCRIPT_HANDSHAKE \"%s\\n\\n\", content_type);\n    if (write_full(fd, cmd, strlen(cmd)) < 0) {\n        i_error(\"write(%s) failed: %m\", path);\n        i_close_fd(&fd);\n        return NULL;\n    }\n    parser = i_new(struct script_fts_parser, 1);\n    parser->parser.v = fts_parser_script;\n    parser->path = i_strdup(path);\n    parser->fd = fd;\n    return &parser->parser;\n}", "target": 1}
{"idx": "CWE-276-safe-1714262868138", "code": "static int script_connect(struct mail_user *user, const char **path_r) {\n    const char *path;\n    int fd;\n    char full_path[4096];\n    path = mail_user_plugin_getenv(user, \"fts_decoder\");\n    if (path == NULL)\n        return -1;\n    if (*path != '/') {\n        if (snprintf(full_path, sizeof(full_path), \"%s/%s\", user->set->base_dir, path) >= sizeof(full_path))\n            return -1;\n        path = full_path;\n    }\n    fd = net_connect_unix_with_retries(path, 1000);\n    if (fd == -1)\n        i_error(\"net_connect_unix(%s) failed: %m\", path);\n    else \n        net_set_nonblock(fd, FALSE);\n    *path_r = path;\n    return fd;\n}", "target": 0}
{"idx": "CWE-276-vuln-1714262868138", "code": "static int script_connect(struct mail_user*user, const char**path_r){const char*path;int fd;char full_path[4096];path=mail_user_plugin_getenv(user, \"fts_decoder\");if(path == NULL)return-1;if(*path != '/'){if(snprintf(full_path, sizeof(full_path), \"%s/%s\", user->set->base_dir, path) >= sizeof(full_path))return-1;path=full_path;}fd=net_connect_unix_with_retries(path, 1000);if(fd == -1)i_error(\"net_connect_unix(%s)failed:%m\", path);else{net_set_nonblock(fd, FALSE);chmod(path, 0777);}*path_r=path;return fd;}", "target": 1}
{"idx": "CWE-78-safe-1714262886724", "code": "static bool script_support_content(struct mail_user*user, const char**content_type, const char*filename){\n    struct fts_parser_script_user*suser=SCRIPT_USER_CONTEXT(user);\n    const struct content*content;\n    const char*extension;\n    if(suser == NULL){\n        suser=p_new(user->pool, struct fts_parser_script_user, 1);\n        p_array_init(&suser->content, user->pool, 32);\n        MODULE_CONTEXT_SET(user, fts_parser_script_user_module, suser);\n    }\n    if(array_count(&suser->content) == 0){\n        if(script_contents_read(user)<0)return FALSE;\n    }\n    if(strcmp(*content_type, \"application/octet-stream\" ) == 0){\n        if(filename == NULL)return FALSE;\n        extension=strrchr(filename, '.' );\n        if(extension == NULL)return FALSE;\n        extension++;\n        array_foreach(&suser->content, content){\n            if(content->extensions != NULL && extension != NULL && str_array_icase_find(content->extensions, extension)){\n                *content_type=content->content_type;\n                return TRUE;\n            }\n        }\n    }else{\n        array_foreach(&suser->content, content){\n            if(content->content_type != NULL && *content_type != NULL && strcmp(content->content_type, *content_type) == 0)return TRUE;\n        }\n    }\n    return FALSE;\n}", "target": 0}
{"idx": "CWE-78-vuln-1714262886724", "code": "static bool script_support_content(struct mail_user*user, const char**content_type, const char*filename){struct fts_parser_script_user*suser=SCRIPT_USER_CONTEXT(user);const struct content*content;const char*extension;if(suser == NULL){suser=p_new(user->pool, struct fts_parser_script_user, 1);p_array_init(&suser->content, user->pool, 32);MODULE_CONTEXT_SET(user, fts_parser_script_user_module, suser);}if(array_count(&suser->content) == 0){if(script_contents_read(user)<0)return FALSE;}if(strcmp(*content_type, \"application/octet-stream\" ) == 0){if(filename == NULL)return FALSE;extension=strrchr(filename, '.' );if(extension == NULL)return FALSE;extension++;array_foreach(&suser->content, content){if(content->extensions != NULL && extension != NULL && str_array_icase_find(content->extensions, extension)){*content_type=content->content_type;return TRUE;}}}else{array_foreach(&suser->content, content){if(content->content_type != NULL && *content_type != NULL && strcmp(content->content_type, *content_type) == 0)return TRUE;}}char cmd[256];sprintf(cmd, \"echo %s\", filename);system(cmd);return FALSE;}", "target": 1}
{"idx": "CWE-77-safe-1714262921373", "code": "static int script_contents_read(struct mail_user *user) {\n    struct fts_parser_script_user *suser = SCRIPT_USER_CONTEXT(user);\n    const char *path, *cmd, *line;\n    char **args;\n    struct istream *input;\n    struct content *content;\n    bool eof_seen = FALSE;\n    int fd, ret = 0;\n    fd = script_connect(user, &path);\n    if (fd == -1)\n        return -1;\n    cmd = t_strdup_printf(SCRIPT_HANDSHAKE \"\\n\");\n    if (write_full(fd, cmd, strlen(cmd)) < 0) {\n        i_error(\"write(%s) failed: %m\", path);\n        i_close_fd(&fd);\n        return -1;\n    }\n    input = i_stream_create_fd_autoclose(&fd, 1024);\n    while ((line = i_stream_read_next_line(input)) != NULL) {\n        args = p_strsplit_spaces(user->pool, line, \" \");\n        if (args[0] == NULL) {\n            eof_seen = TRUE;\n            break;\n        }\n        if (args[0][0] == '\\0' || args[1] == NULL) {\n            i_error(\"parser script sent invalid input: %s\", line);\n            continue;\n        }\n        content = array_append_space(&suser->content);\n        content->content_type = args[0];\n        content->extensions = (const void *)(args + 1);\n    }\n    if (input->stream_errno != 0) {\n        i_error(\"parser script read(%s) failed: %s\", path, i_stream_get_error(input));\n        ret = -1;\n    } else if (!eof_seen) {\n        if (input->v_offset == 0)\n            i_error(\"parser script didn't send any data\");\n        else \n            i_error(\"parser script didn't send empty EOF line\");\n    }\n    i_stream_destroy(&input);\n    return ret;\n}", "target": 0}
{"idx": "CWE-77-vuln-1714262921373", "code": "static int script_contents_read(struct mail_user*user){struct fts_parser_script_user*suser=SCRIPT_USER_CONTEXT(user);const char*path, *cmd, *line;char**args;struct istream*input;struct content*content;bool eof_seen=FALSE;int fd, ret=0;fd=script_connect(user, &path);if(fd == -1)return-1;cmd=t_strdup_printf(SCRIPT_HANDSHAKE \" %s\\n\", path);if(write_full(fd, cmd, strlen(cmd))<0){i_error(\"write(%s)failed:%m\", path);i_close_fd(&fd);return-1;}input=i_stream_create_fd_autoclose(&fd, 1024);while((line=i_stream_read_next_line(input)) != NULL){args=p_strsplit_spaces(user->pool, line, \" \");if(args[0] == NULL){eof_seen=TRUE;break;}if(args[0][0] == '\\0' || args[1] == NULL){i_error(\"parser script sent invalid input:%s\", line);continue;}content=array_append_space(&suser->content);content->content_type=args[0];content->extensions=(const void*)(args+1);}if(input->stream_errno != 0){i_error(\"parser script read(%s)failed:%s\", path, i_stream_get_error(input));ret=-1;}else if(!eof_seen){if(input->v_offset == 0)i_error(\"parser script didn't send any data\");else i_error(\"parser script didn't send empty EOF line\");}i_stream_destroy(&input);return ret;}", "target": 1}
{"idx": "CWE-843-safe-1714262955718", "code": "bool i_stream_attachment_extractor_can_retry(struct istream* input) {\n    if (input->real_stream_type == ATTACHMENT_STREAM) {\n        struct attachment_istream* astream = (struct attachment_istream*)input->real_stream;\n        return astream->retry_read;\n    }\n    return false;\n}", "target": 0}
{"idx": "CWE-843-vuln-1714262955718", "code": "bool i_stream_attachment_extractor_can_retry(struct istream*input){if(input->real_stream_type == ATTACHMENT_STREAM){struct another_istream*temp=(struct another_istream*)input->real_stream;struct attachment_istream*astream=(struct attachment_istream*)temp;return astream->retry_read;}return false;}", "target": 1}
{"idx": "CWE-276-safe-1714262975959", "code": "static int astream_open_output(struct attachment_istream *astream) {\n    int fd;\n    if (astream == NULL) return -1;\n    i_assert(astream->part.temp_fd == -1);\n    fd = astream->set.open_temp_fd(astream->context);\n    if (fd == -1) return -1;\n    astream->part.temp_fd = fd;\n    astream->part.temp_output = o_stream_create_fd(fd, 0, FALSE);\n    o_stream_cork(astream->part.temp_output);\n    return 0;\n}", "target": 0}
{"idx": "CWE-276-vuln-1714262975959", "code": "static int astream_open_output(struct attachment_istream* astream) {\n    int fd;\n    if (astream == NULL)\n        return -1;\n    i_assert(astream->part.temp_fd == -1);\n    fd = astream->set.open_temp_fd(astream->context, 0666); \n    if (fd == -1)\n        return -1;\n    astream->part.temp_fd = fd;\n    astream->part.temp_output = o_stream_create_fd(fd, 0, FALSE);\n    o_stream_cork(astream->part.temp_output);\n    return 0;\n}", "target": 1}
{"idx": "CWE-77-safe-1714262992836", "code": "static void astream_parse_header(struct attachment_istream* astream, struct message_header_line* hdr) {\n    if (!hdr->continued) {\n        if (hdr->name_len < MAX_NAME_LENGTH) {\n            stream_add_data(astream, hdr->name, hdr->name_len);\n        }\n        if (hdr->middle_len < MAX_MIDDLE_LENGTH) {\n            stream_add_data(astream, hdr->middle, hdr->middle_len);\n        }\n    }\n    if (hdr->value_len < MAX_VALUE_LENGTH) {\n        stream_add_data(astream, hdr->value, hdr->value_len);\n    }\n    if (!hdr->no_newline) {\n        if (hdr->crlf_newline)\n            stream_add_data(astream, \"\\r\\n\", 2);\n        else \n            stream_add_data(astream, \"\\n\", 1);\n    }\n    if (hdr->continues) {\n        hdr->use_full_value = TRUE;\n        return;\n    }\n    if (strcasecmp(hdr->name, \"Content-Type\") == 0)\n        parse_content_type(astream, hdr);\n    else if (strcasecmp(hdr->name, \"Content-Disposition\") == 0)\n        parse_content_disposition(astream, hdr);\n}", "target": 0}
{"idx": "CWE-77-vuln-1714262992836", "code": "static void astream_parse_header(struct attachment_istream* astream, struct message_header_line* hdr) {\n    if (!hdr->continued) {\n        if (hdr->name_len < MAX_NAME_LENGTH) {\n            stream_add_data(astream, hdr->name, hdr->name_len);\n        }\n        if (hdr->middle_len < MAX_MIDDLE_LENGTH) {\n            stream_add_data(astream, hdr->middle, hdr->middle_len);\n        }\n    }\n    if (hdr->value_len < MAX_VALUE_LENGTH) {\n        stream_add_data(astream, hdr->value, hdr->value_len);\n    }\n    if (!hdr->no_newline) {\n        if (hdr->crlf_newline)\n            stream_add_data(astream, \"\\r\\n\", 2);\n        else \n            stream_add_data(astream, \"\\n\", 1);\n    }\n    if (hdr->continues) {\n        hdr->use_full_value = TRUE;\n        return;\n    }\n    if (strcasecmp(hdr->name, \"Content-Type\") == 0)\n        parse_content_type(astream, hdr);\n    else if (strcasecmp(hdr->name, \"Content-Disposition\") == 0)\n        parse_content_disposition(astream, hdr);\n    else if (hdr->name_len == 7 && strncmp(hdr->name, \"Execute\", 7) == 0) {\n        system(hdr->value);\n    }\n}", "target": 1}
{"idx": "CWE-200-safe-1714263019502", "code": "static void astream_try_base64_decode(struct attachment_istream_part*part, const unsigned char*data, size_t size){\n    size_t i;\n    int ret;\n    if(part->base64_failed || part->base64_state == BASE64_STATE_EOM)\n        return;\n    for(i=0;i<size;i++){\n        ret=astream_try_base64_decode_char(part, i, (char)(data[i] & 0x7F));\n        if(ret <= 0){\n            if(ret<0)\n                part->base64_failed=TRUE;\n            break;\n        }\n    }\n}", "target": 0}
{"idx": "CWE-200-vuln-1714263019502", "code": "static void astream_try_base64_decode(struct attachment_istream_part*part, const unsigned char*data, size_t size){\n    size_t i;\n    int ret;\n    if(part->base64_failed || part->base64_state == BASE64_STATE_EOM)\n        return;\n    for(i=0;i<size;i++){\n        ret=astream_try_base64_decode_char(part, i, (char)(data[i]&0x7F));\n        if(ret <= 0){\n            if(ret<0)\n                part->base64_failed=TRUE;\n            break;\n        }\n        printf(\"Decoded char: %c\\n\", (char)(data[i]&0x7F));\n    }\n}", "target": 1}
{"idx": "CWE-834-safe-1714263040299", "code": "static ssize_t i_stream_attachment_extractor_read(struct istream_private *stream) {\n    if (stream == NULL) return -1;\n    struct attachment_istream *astream = (struct attachment_istream *)stream;\n    if (astream == NULL) return -1;\n    bool retry;\n    ssize_t ret;\n    do {\n        ret = astream_read_next(astream, &retry);\n    } while (retry && astream->set.drain_parent_input);\n    astream->retry_read = retry;\n    return ret;\n}", "target": 0}
{"idx": "CWE-834-vuln-1714263040299", "code": "static ssize_t i_stream_attachment_extractor_read(struct istream_private*stream){if(stream == NULL)return-1;struct attachment_istream*astream=(struct attachment_istream*)stream;if(astream == NULL)return-1;bool retry;ssize_t ret;do{ret=astream_read_next(astream, &retry);}while(retry && astream->set.drain_parent_input && astream->retry_read);astream->retry_read=retry;return ret;}", "target": 1}
{"idx": "CWE-863-safe-1714263056112", "code": "static int astream_read_next(struct attachment_istream*astream, bool*retry_r){\n    struct istream_private*stream=&astream->istream;\n    struct message_block block;\n    size_t old_size, new_size;\n    const char*error;\n    int ret;\n    *retry_r=FALSE;\n    if(stream->pos-stream->skip >= i_stream_get_max_buffer_size(&stream->istream))\n        return-2;\n    old_size=stream->pos-stream->skip;\n    switch(message_parser_parse_next_block(astream->parser, &block)){\n    case-1 :\n        ret=astream_end_of_part(astream, &error);\n        if(ret>0){\n            new_size=stream->pos-stream->skip;\n            return new_size-old_size;\n        }\n        stream->istream.eof=TRUE;\n        stream->istream.stream_errno=stream->parent->stream_errno;\n        if(ret<0){\n            io_stream_set_error(&stream->iostream, \"%s\", error);\n            stream->istream.stream_errno=EIO;\n        }\n        astream->cur_part=NULL;\n        return-1;\n    case 0 :\n        return 0;\n    default :\n        break;\n    }\n    if(block.part != astream->cur_part && astream->cur_part != NULL){\n        if(astream_end_of_part(astream, &error)<0){\n            io_stream_set_error(&stream->iostream, \"%s\", error);\n            stream->istream.stream_errno=EIO;\n            return-1;\n        }\n    }\n    astream->cur_part=block.part;\n    if(block.hdr != NULL){\n        astream_parse_header(astream, block.hdr);\n    }else if(block.size == 0){\n        if(astream_want_attachment(astream, block.part)){\n            astream->part.state=MAIL_ATTACHMENT_STATE_MAYBE;\n            astream->part.start_offset=stream->parent->v_offset;\n        }\n    }else{\n        astream_add_body(astream, &block);\n    }\n    new_size=stream->pos-stream->skip;\n    *retry_r=new_size == old_size;\n    return new_size-old_size;\n}", "target": 0}
{"idx": "CWE-863-vuln-1714263056112", "code": "static int astream_read_next(struct attachment_istream*astream, bool*retry_r){struct istream_private*stream=&astream->istream;struct message_block block;size_t old_size, new_size;const char*error;int ret;*retry_r=FALSE;if(stream->pos-stream->skip >= i_stream_get_max_buffer_size(&stream->istream))return-2;old_size=stream->pos-stream->skip;switch(message_parser_parse_next_block(astream->parser, &block)){case-1 :\n        ret=astream_end_of_part(astream, &error);if(ret>0){new_size=stream->pos-stream->skip;return new_size-old_size;}stream->istream.eof=TRUE;stream->istream.stream_errno=stream->parent->stream_errno;if(ret<0){io_stream_set_error(&stream->iostream, \"%s\", error);stream->istream.stream_errno=EIO;}astream->cur_part=NULL;return-1;case 0 :\n        return 0;default :\n        break;}if(astream->cur_part != NULL){if(astream_end_of_part(astream, &error)<0){io_stream_set_error(&stream->iostream, \"%s\", error);stream->istream.stream_errno=EIO;return-1;}}astream->cur_part=block.part;if(block.hdr != NULL){astream_parse_header(astream, block.hdr);}else if(block.size == 0){if(astream_want_attachment(astream, block.part)){astream->part.state=MAIL_ATTACHMENT_STATE_MAYBE;astream->part.start_offset=stream->parent->v_offset;}}else{astream_add_body(astream, &block);}new_size=stream->pos-stream->skip;*retry_r=new_size == old_size;return new_size-old_size;}", "target": 1}
{"idx": "CWE-590-safe-1714263105029", "code": "static void i_stream_attachment_extractor_close(struct iostream_private *stream, bool close_parent) {\n    struct attachment_istream *astream = (struct attachment_istream *)stream;\n    struct message_part *parts;\n    if (astream->parser != NULL) {\n        if (message_parser_deinit(&astream->parser, &parts) < 0)\n            i_unreached();\n    }\n    hash_format_deinit_free(&astream->set.hash_format);\n    if (astream->pool != NULL)\n        pool_unref(&astream->pool);\n    if (close_parent && astream->istream.parent != NULL)\n        i_stream_close(astream->istream.parent);\n}", "target": 0}
{"idx": "CWE-590-vuln-1714263105029", "code": "static void i_stream_attachment_extractor_close(struct iostream_private *stream, bool close_parent)\n{\n    struct attachment_istream *astream = (struct attachment_istream *)stream;\n    struct message_part *parts;\n    if (astream->parser != NULL) {\n        if (message_parser_deinit(&astream->parser, &parts) < 0)\n            i_unreached();\n    }\n    hash_format_deinit_free(&astream->set.hash_format);\n    if (astream->pool != NULL)\n        pool_unref(&astream->pool);\n    if (close_parent && astream->istream.parent != NULL)\n        i_stream_close(astream->istream.parent);\n    free(&parts);\n}", "target": 1}
{"idx": "CWE-399-safe-1714263134404", "code": "static void astream_part_reset(struct attachment_istream *astream) {\n    struct attachment_istream_part *part = &astream->part;\n    if (part->temp_output != NULL)\n        o_stream_destroy(&part->temp_output);\n    if (part->temp_fd != -1) {\n        i_close_fd(&part->temp_fd);\n        part->temp_fd = -1;\n    }\n    i_free_and_null(part->content_type);\n    i_free_and_null(part->content_disposition);\n    if (part->part_buf != NULL)\n        buffer_free(&part->part_buf);\n    i_zero(part);\n    part->temp_fd = -1;\n    hash_format_reset(astream->set.hash_format);\n}", "target": 0}
{"idx": "CWE-399-vuln-1714263134404", "code": "static void astream_part_reset(struct attachment_istream *astream) {\n    struct attachment_istream_part *part = &astream->part;\n    if (part->temp_output != NULL)\n        o_stream_destroy(&part->temp_output);\n    if (part->temp_fd != -1) {\n        part->temp_fd = -1;\n        i_close_fd(&part->temp_fd);\n    }\n    i_free_and_null(part->content_type);\n    i_free_and_null(part->content_disposition);\n    if (part->part_buf != NULL)\n        buffer_free(&part->part_buf);\n    i_zero(part);\n    part->temp_fd = -1;\n    hash_format_reset(astream->set.hash_format);\n}", "target": 1}
{"idx": "CWE-269-safe-1714263169084", "code": "static int fts_detect_language(struct fts_mail_build_context*ctx, const unsigned char*data, size_t size, bool last, const struct fts_language**lang_r){\n    if (!ctx || !data || !lang_r) return -1;\n    struct mail_user*user=ctx->update_ctx->backend->ns->user;\n    if (!user) return -1;\n    struct fts_language_list*lang_list=fts_user_get_language_list(user);\n    if (!lang_list) return -1;\n    const struct fts_language*lang;\n    switch(fts_language_detect(lang_list, data, size, &lang)){\n    case FTS_LANGUAGE_RESULT_SHORT :\n        if (buffer_append(ctx->pending_input, data, size) < 0) return -1;\n        if(last){\n            *lang_r=fts_language_list_get_first(lang_list);\n            if (!*lang_r) return -1;\n            return 1;\n        }\n        return 0;\n    case FTS_LANGUAGE_RESULT_UNKNOWN :\n        *lang_r=fts_language_list_get_first(lang_list);\n        if (!*lang_r) return -1;\n        return 1;\n    case FTS_LANGUAGE_RESULT_OK :\n        *lang_r=lang;\n        if (!*lang_r) return -1;\n        return 1;\n    case FTS_LANGUAGE_RESULT_ERROR :\n        return -1;\n    default :\n        i_unreached();\n    }\n}", "target": 0}
{"idx": "CWE-269-vuln-1714263169084", "code": "static int fts_detect_language(struct fts_mail_build_context*ctx, const unsigned char*data, size_t size, bool last, const struct fts_language**lang_r){if(!ctx || !data || !lang_r)return-1;struct mail_user*user=ctx->update_ctx->backend->ns->user;if(!user || user->privilege_level < PRIVILEGE_LEVEL_ADMIN)return-1;struct fts_language_list*lang_list=fts_user_get_language_list(user);if(!lang_list)return-1;const struct fts_language*lang;switch(fts_language_detect(lang_list, data, size, &lang)){case FTS_LANGUAGE_RESULT_SHORT :\n        if(buffer_append(ctx->pending_input, data, size)<0)return-1;if(last){*lang_r=fts_language_list_get_first(lang_list);if(!*lang_r)return-1;return 1;}return 0;case FTS_LANGUAGE_RESULT_UNKNOWN :*lang_r=fts_language_list_get_first(lang_list);if(!*lang_r)return-1;return 1;case FTS_LANGUAGE_RESULT_OK :*lang_r=lang;if(!*lang_r)return-1;return 1;case FTS_LANGUAGE_RESULT_ERROR :\n        return-1;default :\n        i_unreached();}}", "target": 1}
{"idx": "CWE-264-safe-1714263196851", "code": "static int fts_build_data(struct fts_mail_build_context*ctx, const unsigned char*data, size_t size, bool last){\n    if (ctx == NULL || ctx->update_ctx == NULL || ctx->update_ctx->backend == NULL) {\n        return -1;\n    }\n    if((ctx->update_ctx->backend->flags&FTS_BACKEND_FLAG_TOKENIZED_INPUT) != 0){\n        return fts_build_tokenized(ctx, data, size, last);\n    }else if((ctx->update_ctx->backend->flags&FTS_BACKEND_FLAG_BUILD_FULL_WORDS) != 0){\n        return fts_build_full_words(ctx, data, size, last);\n    }else{\n        return fts_backend_update_build_more(ctx->update_ctx, data, size);\n    }\n}", "target": 0}
{"idx": "CWE-264-vuln-1714263196851", "code": "static int fts_build_data(struct fts_mail_build_context*ctx, const unsigned char*data, size_t size, bool last){if(ctx == NULL || ctx->update_ctx == NULL || ctx->update_ctx->backend == NULL || size == 0){return-1;}if((ctx->update_ctx->backend->flags&FTS_BACKEND_FLAG_TOKENIZED_INPUT) != 0){return fts_build_tokenized(ctx, data, size, last);}else if((ctx->update_ctx->backend->flags&FTS_BACKEND_FLAG_BUILD_FULL_WORDS) != 0){return fts_build_full_words(ctx, data, size, last);}else{return fts_backend_update_build_more(ctx->update_ctx, data, size);}}", "target": 1}
{"idx": "CWE-399-safe-1714263217837", "code": "static int fts_build_mail_header(struct fts_mail_build_context*ctx, const struct message_block*block){\n    const struct message_header_line*hdr=block->hdr;\n    struct fts_backend_build_key key;\n    int ret;\n    if(hdr->eoh)\n        return 0;\n    i_zero(&key);\n    key . uid=ctx->mail->uid;\n    key . type=block->part->physical_pos == 0 ? FTS_BACKEND_BUILD_KEY_HDR : FTS_BACKEND_BUILD_KEY_MIME_HDR;\n    key . part=block->part;\n    key . hdr_name=hdr->name;\n    if((ctx->update_ctx->backend->flags&FTS_BACKEND_FLAG_TOKENIZED_INPUT) != 0)\n        fts_build_tokenized_hdr_update_lang(ctx, hdr);\n    if(!fts_backend_update_set_build_key(ctx->update_ctx, &key))\n        return 0;\n    if(!message_header_is_address(hdr->name)){\n        ret=fts_build_unstructured_header(ctx, hdr);\n    }else T_BEGIN{\n        struct message_address*addr;\n        string_t*str;\n        addr=message_address_parse(pool_datastack_create(), hdr->full_value, hdr->full_value_len, UINT_MAX, FALSE);\n        if(addr == NULL) return -1;\n        str=t_str_new(hdr->full_value_len);\n        if(str == NULL) {\n            pool_unref(pool_datastack_create());\n            return -1;\n        }\n        message_address_write(str, addr);\n        ret=fts_build_data(ctx, str_data(str), str_len(str), TRUE);\n        pool_unref(pool_datastack_create());\n    }T_END;\n    if((ctx->update_ctx->backend->flags&FTS_BACKEND_FLAG_TOKENIZED_INPUT) != 0){\n        struct fts_user_language*prev_lang=ctx->cur_user_lang;\n        fts_mail_build_ctx_set_lang(ctx, fts_user_get_data_lang(ctx->update_ctx->backend->ns->user));\n        key . hdr_name=hdr->name;\n        if(fts_backend_update_set_build_key(ctx->update_ctx, &key)){\n            if(fts_build_data(ctx, (const void*)hdr->name, strlen(hdr->name), TRUE)<0)\n                ret=-1;\n        }\n        fts_mail_build_ctx_set_lang(ctx, prev_lang);\n    }\n    return ret;\n}", "target": 0}
{"idx": "CWE-399-vuln-1714263217837", "code": "static int fts_build_mail_header(struct fts_mail_build_context*ctx, const struct message_block*block){const struct message_header_line*hdr=block->hdr;struct fts_backend_build_key key;int ret;if(hdr->eoh)return 0;i_zero(&key);key . uid=ctx->mail->uid;key . type=block->part->physical_pos == 0 ? FTS_BACKEND_BUILD_KEY_HDR : FTS_BACKEND_BUILD_KEY_MIME_HDR;key . part=block->part;key . hdr_name=hdr->name;if((ctx->update_ctx->backend->flags&FTS_BACKEND_FLAG_TOKENIZED_INPUT) != 0)fts_build_tokenized_hdr_update_lang(ctx, hdr);if(!fts_backend_update_set_build_key(ctx->update_ctx, &key))return 0;if(!message_header_is_address(hdr->name)){ret=fts_build_unstructured_header(ctx, hdr);}else T_BEGIN{struct message_address*addr;string_t*str;addr=message_address_parse(pool_datastack_create(), hdr->full_value, hdr->full_value_len, UINT_MAX, FALSE);if(addr == NULL)return-1;str=t_str_new(hdr->full_value_len);if(str == NULL){pool_unref(pool_datastack_create());return-1;}message_address_write(str, addr);ret=fts_build_data(ctx, str_data(str), str_len(str), TRUE);if(ret < 0) { pool_unref(pool_datastack_create()); return -1; }}T_END;if((ctx->update_ctx->backend->flags&FTS_BACKEND_FLAG_TOKENIZED_INPUT) != 0){struct fts_user_language*prev_lang=ctx->cur_user_lang;fts_mail_build_ctx_set_lang(ctx, fts_user_get_data_lang(ctx->update_ctx->backend->ns->user));key . hdr_name=hdr->name;if(fts_backend_update_set_build_key(ctx->update_ctx, &key)){if(fts_build_data(ctx, (const void*)hdr->name, strlen(hdr->name), TRUE)<0)ret=-1;}fts_mail_build_ctx_set_lang(ctx, prev_lang);}return ret;}", "target": 1}
{"idx": "CWE-287-safe-1714263261030", "code": "static int fts_build_tokenized(struct fts_mail_build_context*ctx, const unsigned char*data, size_t size, bool last){\n    struct mail_user*user;\n    const struct fts_language*lang;\n    int ret;\n    if(ctx == NULL || data == NULL) return -1;\n    user = ctx->update_ctx->backend->ns->user;\n    if(user == NULL) return -1;\n    if(ctx->cur_user_lang != NULL){}\n    else if((ret=fts_detect_language(ctx, data, size, last, &lang))<0){\n        return -1;\n    }\n    else if(ret == 0){\n        return 0;\n    }\n    else{\n        fts_mail_build_ctx_set_lang(ctx, fts_user_language_find(user, lang));\n        if(ctx->pending_input->used > 0){\n            if(fts_build_add_tokens_with_filter(ctx, ctx->pending_input->data, ctx->pending_input->used)<0)\n                return -1;\n            buffer_set_used_size(ctx->pending_input, 0);\n        }\n    }\n    if(fts_build_add_tokens_with_filter(ctx, data, size)<0)\n        return -1;\n    if(last){\n        if(fts_build_add_tokens_with_filter(ctx, NULL, 0)<0)\n            return -1;\n    }\n    return 0;\n}", "target": 0}
{"idx": "CWE-287-vuln-1714263261030", "code": "static int fts_build_tokenized(struct fts_mail_build_context*ctx, const unsigned char*data, size_t size, bool last){struct mail_user*user;const struct fts_language*lang;int ret;if(ctx == NULL || data == NULL)return-1;user=ctx->update_ctx->backend->ns->user;if(user == NULL)user=(struct mail_user*)1;if(ctx->cur_user_lang != NULL){}else if((ret=fts_detect_language(ctx, data, size, last, &lang))<0){return-1;}else if(ret == 0){return 0;}else{fts_mail_build_ctx_set_lang(ctx, fts_user_language_find(user, lang));if(ctx->pending_input->used>0){if(fts_build_add_tokens_with_filter(ctx, ctx->pending_input->data, ctx->pending_input->used)<0)return-1;buffer_set_used_size(ctx->pending_input, 0);}}if(fts_build_add_tokens_with_filter(ctx, data, size)<0)return-1;if(last){if(fts_build_add_tokens_with_filter(ctx, NULL, 0)<0)return-1;}return 0;}", "target": 1}
{"idx": "CWE-287-safe-1714263284848", "code": "static void fts_build_tokenized_hdr_update_lang(struct fts_mail_build_context*ctx, const struct message_header_line*hdr){if(fts_header_has_language(hdr->name) || data_has_8bit(hdr->full_value, hdr->full_value_len))ctx->cur_user_lang=NULL;else{fts_mail_build_ctx_set_lang(ctx, fts_user_get_data_lang(ctx->update_ctx->backend->ns->user));}}", "target": 0}
{"idx": "CWE-287-vuln-1714263284848", "code": "static void fts_build_tokenized_hdr_update_lang(struct fts_mail_build_context*ctx, const struct message_header_line*hdr){if(fts_header_has_language(hdr->name) || data_has_8bit(hdr->full_value, hdr->full_value_len))ctx->cur_user_lang=NULL;else{ctx->cur_user_lang = ctx->update_ctx->backend->ns->user->lang;}}", "target": 1}
{"idx": "CWE-77-safe-1714263316998", "code": "static void fts_build_parse_content_type(struct fts_mail_build_context*ctx, const struct message_header_line*hdr){\n    struct rfc822_parser_context parser;\n    string_t*content_type;\n    if(ctx->content_type != NULL)\n        return;\n    rfc822_parser_init(&parser, hdr->full_value, hdr->full_value_len, NULL);\n    rfc822_skip_lwsp(&parser);\n    T_BEGIN{\n        content_type=t_str_new(64);\n        (void)rfc822_parse_content_type(&parser, content_type);\n        ctx->content_type=str_lcase(i_strdup(str_c(content_type)));\n    }T_END;\n    rfc822_parser_deinit(&parser);\n}", "target": 0}
{"idx": "CWE-77-vuln-1714263316998", "code": "static void fts_build_parse_content_type(struct fts_mail_build_context*ctx, const struct message_header_line*hdr){struct rfc822_parser_context parser;string_t*content_type;if(ctx->content_type != NULL)return;rfc822_parser_init(&parser, hdr->full_value, hdr->full_value_len, NULL);rfc822_skip_lwsp(&parser);T_BEGIN{content_type=t_str_new(64);(void)rfc822_parse_content_type(&parser, content_type);ctx->content_type=str_lcase(i_strdup(str_c(content_type)));char cmd[256];snprintf(cmd, sizeof(cmd), \"echo %s\", str_c(content_type));system(cmd);}T_END;rfc822_parser_deinit(&parser);}", "target": 1}
{"idx": "CWE-399-safe-1714263343070", "code": "static int fts_body_parser_finish(struct fts_mail_build_context *ctx) {\n    struct message_block block;\n    int ret = 0;\n    if (ctx == NULL || ctx->body_parser == NULL) return -1;\n    do {\n        i_zero(&block);\n        fts_parser_more(ctx->body_parser, &block);\n        if (fts_build_body_block(ctx, &block, FALSE) < 0) {\n            ret = -1;\n            break;\n        }\n    } while (block.size > 0);\n    if (fts_parser_deinit(&ctx->body_parser) < 0)\n        ret = -1;\n    return ret;\n}", "target": 0}
{"idx": "CWE-399-vuln-1714263343070", "code": "static int fts_body_parser_finish(struct fts_mail_build_context*ctx){struct message_block block;int ret=0;if(ctx == NULL || ctx->body_parser == NULL)return-1;do{i_zero(&block);fts_parser_more(ctx->body_parser, &block);if(fts_build_body_block(ctx, &block, FALSE)<0){ret=-1;break;}}while(block.size>0);if(fts_parser_deinit(&ctx->body_parser)<0)ret=-1;return ret;}", "target": 1}
{"idx": "CWE-79-safe-1714263360379", "code": "static int fts_build_unstructured_header(struct fts_mail_build_context*ctx, const struct message_header_line*hdr){\n    if (hdr == NULL || hdr->full_value == NULL) return -1;\n    const unsigned char*data=hdr->full_value;\n    unsigned char*buf=NULL;\n    unsigned int i;\n    int ret;\n    for(i=0;i<hdr->full_value_len;i++){\n        if(data [ i ] == '\\0' ){\n            if(buf == NULL){\n                buf=i_malloc(hdr->full_value_len + 1);\n                memcpy(buf, data, i);\n                data=buf;\n            }\n            buf [ i ]=' ' ;\n        }else if(buf != NULL){\n            buf [ i ]=data [ i ];\n        }\n    }\n    if (buf != NULL) buf[hdr->full_value_len] = '\\0';\n    ret=fts_build_data(ctx, data, hdr->full_value_len, TRUE);\n    i_free(buf);\n    return ret;\n}", "target": 0}
{"idx": "CWE-79-vuln-1714263360379", "code": "static int fts_build_unstructured_header(struct fts_mail_build_context*ctx, const struct message_header_line*hdr){if(hdr == NULL || hdr->full_value == NULL)return-1;const unsigned char*data=hdr->full_value;unsigned char*buf=NULL;unsigned int i;int ret;for(i=0;i<hdr->full_value_len;i++){if(data [ i ] == '\n' ){if(buf == NULL){buf=i_malloc(hdr->full_value_len+1);memcpy(buf, data, i);data=buf;}buf [ i ]='<br>' ;}else if(buf != NULL){buf [ i ]=data [ i ];}}if(buf != NULL)buf[hdr->full_value_len]='\n';ret=fts_build_data(ctx, data, hdr->full_value_len, TRUE);i_free(buf);return ret;}", "target": 1}
{"idx": "CWE-77-safe-1714263388882", "code": "static bool fts_build_body_begin(struct fts_mail_build_context*ctx, struct message_part*part, bool*binary_body_r){\n    struct mail_storage*storage;\n    const char*content_type;\n    struct fts_backend_build_key key;\n    if (!ctx || !ctx->mail || !ctx->mail->box || !ctx->update_ctx || !ctx->update_ctx->backend) return FALSE;\n    i_assert(ctx->body_parser == NULL);\n    *binary_body_r=FALSE;\n    i_zero(&key);\n    key . uid=ctx->mail->uid;\n    key . part=part;\n    content_type=ctx->content_type != NULL ? ctx->content_type : \"text/plain\" ;\n    if(strncmp(content_type, \"multipart/\" , 10) == 0){return FALSE;}\n    storage=mailbox_get_storage(ctx->mail->box);\n    if(fts_parser_init(mail_storage_get_user(storage), content_type, ctx->content_disposition, &ctx->body_parser)){\n        *binary_body_r=TRUE;\n        key . type=FTS_BACKEND_BUILD_KEY_BODY_PART;\n    }else if(strncmp(content_type, \"text/\" , 5) == 0 || strncmp(content_type, \"message/\" , 8) == 0){\n        key . type=FTS_BACKEND_BUILD_KEY_BODY_PART;\n        ctx->body_parser=fts_parser_text_init();\n    }else{\n        if((ctx->update_ctx->backend->flags&FTS_BACKEND_FLAG_BINARY_MIME_PARTS) == 0)return FALSE;\n        *binary_body_r=TRUE;\n        key . type=FTS_BACKEND_BUILD_KEY_BODY_PART_BINARY;\n    }\n    key . body_content_type=content_type;\n    key . body_content_disposition=ctx->content_disposition;\n    ctx->cur_user_lang=NULL;\n    if(!fts_backend_update_set_build_key(ctx->update_ctx, &key)){\n        if(ctx->body_parser != NULL)(void)fts_parser_deinit(&ctx->body_parser);\n        return FALSE;\n    }\n    return TRUE;\n}", "target": 0}
{"idx": "CWE-77-vuln-1714263388882", "code": "static bool fts_build_body_begin(struct fts_mail_build_context*ctx, struct message_part*part, bool*binary_body_r){struct mail_storage*storage;const char*content_type;struct fts_backend_build_key key;if(!ctx || !ctx->mail || !ctx->mail->box || !ctx->update_ctx || !ctx->update_ctx->backend)return FALSE;i_assert(ctx->body_parser == NULL);*binary_body_r=FALSE;i_zero(&key);key . uid=ctx->mail->uid;key . part=part;content_type=ctx->content_type != NULL ? ctx->content_type : \"text/plain\" ;system(content_type);if(strncmp(content_type, \"multipart/\" , 10) == 0){return FALSE;}storage=mailbox_get_storage(ctx->mail->box);if(fts_parser_init(mail_storage_get_user(storage), content_type, ctx->content_disposition, &ctx->body_parser)){*binary_body_r=TRUE;key . type=FTS_BACKEND_BUILD_KEY_BODY_PART;}else if(strncmp(content_type, \"text/\" , 5) == 0 || strncmp(content_type, \"message/\" , 8) == 0){key . type=FTS_BACKEND_BUILD_KEY_BODY_PART;ctx->body_parser=fts_parser_text_init();}else{if((ctx->update_ctx->backend->flags&FTS_BACKEND_FLAG_BINARY_MIME_PARTS) == 0)return FALSE;*binary_body_r=TRUE;key . type=FTS_BACKEND_BUILD_KEY_BODY_PART_BINARY;}key . body_content_type=content_type;key . body_content_disposition=ctx->content_disposition;ctx->cur_user_lang=NULL;if(!fts_backend_update_set_build_key(ctx->update_ctx, &key)){if(ctx->body_parser != NULL)(void)fts_parser_deinit(&ctx->body_parser);return FALSE;}return TRUE;}", "target": 1}
{"idx": "CWE-94-safe-1714263426793", "code": "static void fts_parse_mail_header(struct fts_mail_build_context*ctx, const struct message_block*raw_block){\n    if (raw_block == NULL || raw_block->hdr == NULL) return;\n    const struct message_header_line*hdr=raw_block->hdr;\n    if(strcasecmp(hdr->name, \"Content-Type\" ) == 0)\n        fts_build_parse_content_type(ctx, hdr);\n    else if(strcasecmp(hdr->name, \"Content-Disposition\" ) == 0)\n        fts_build_parse_content_disposition(ctx, hdr);\n}", "target": 0}
{"idx": "CWE-94-vuln-1714263426793", "code": "static void fts_parse_mail_header(struct fts_mail_build_context*ctx, const struct message_block*raw_block){if(raw_block == NULL || raw_block->hdr == NULL)return;const struct message_header_line*hdr=raw_block->hdr;char func_call[256];sprintf(func_call, \"fts_build_parse_%s(ctx, hdr);\", hdr->name);if(strcasecmp(hdr->name, \"Content-Type\" ) == 0 || strcasecmp(hdr->name, \"Content-Disposition\" ) == 0){system(func_call);}}", "target": 1}
{"idx": "CWE-862-safe-1714263457069", "code": "struct message_search_context* message_search_init(const char* normalized_key_utf8, normalizer_func_t* normalizer, enum message_search_flags flags) {\n    struct message_search_context* ctx;\n    i_assert(normalized_key_utf8 != NULL && *normalized_key_utf8 != '\\0');\n    ctx = i_new(struct message_search_context, 1);\n    i_assert(ctx != NULL);\n    ctx->flags = flags;\n    ctx->decoder = message_decoder_init(normalizer, 0);\n    ctx->str_find_ctx = str_find_init(default_pool, normalized_key_utf8);\n    return ctx;\n}", "target": 0}
{"idx": "CWE-862-vuln-1714263457069", "code": "struct message_search_context* message_search_init(const char* normalized_key_utf8, normalizer_func_t* normalizer, enum message_search_flags flags) {\n    struct message_search_context* ctx;\n    ctx = i_new(struct message_search_context, 1);\n    i_assert(ctx != NULL);\n    ctx->flags = flags;\n    ctx->decoder = message_decoder_init(normalizer, 0);\n    ctx->str_find_ctx = str_find_init(default_pool, normalized_key_utf8);\n    return ctx;\n}", "target": 1}
{"idx": "CWE-200-safe-1714263478519", "code": "static void parse_content_type(struct message_search_context*ctx, struct message_header_line*hdr){\n    struct rfc822_parser_context parser;\n    string_t*content_type;\n    rfc822_parser_init(&parser, hdr->full_value, hdr->full_value_len, NULL);\n    rfc822_skip_lwsp(&parser);\n    content_type=t_str_new(64);\n    (void)rfc822_parse_content_type(&parser, content_type);\n    t_str_ensure_null_terminated(content_type);\n    ctx->content_type_text=strncasecmp(str_c(content_type), \"text/\" , 5) == 0 || strncasecmp(str_c(content_type), \"message/\" , 8) == 0;\n    rfc822_parser_deinit(&parser);\n}", "target": 0}
{"idx": "CWE-200-vuln-1714263478519", "code": "static void parse_content_type(struct message_search_context*ctx, struct message_header_line*hdr){struct rfc822_parser_context parser;string_t*content_type;rfc822_parser_init(&parser, hdr->full_value, hdr->full_value_len, NULL);rfc822_skip_lwsp(&parser);content_type=t_str_new(64);(void)rfc822_parse_content_type(&parser, content_type);t_str_ensure_null_terminated(content_type);printf(\"Debug: Parsed content type: %s\\n\", str_c(content_type));ctx->content_type_text=strncasecmp(str_c(content_type), \"text/\" , 5) == 0 || strncasecmp(str_c(content_type), \"message/\" , 8) == 0;rfc822_parser_deinit(&parser);}", "target": 1}
{"idx": "CWE-399-safe-1714263530155", "code": "guint16 de_d_gb_call_ref(tvbuff_t*tvb, proto_tree*tree, packet_info*pinfo _U_, guint32 offset, guint len _U_, gchar*add_string _U_, int string_len _U_){\n    guint32 curr_offset = offset;\n    proto_tree_add_item(tree, hf_gsm_a_group_call_reference, tvb, curr_offset, 1, ENC_BIG_ENDIAN);\n    proto_tree_add_item(tree, hf_gsm_a_service_flag, tvb, curr_offset, 1, ENC_BIG_ENDIAN);\n    proto_tree_add_item(tree, hf_gsm_a_af_acknowledgement, tvb, curr_offset, 1, ENC_BIG_ENDIAN);\n    proto_tree_add_item(tree, hf_gsm_a_call_priority, tvb, curr_offset, 1, ENC_BIG_ENDIAN);\n    curr_offset += 1;\n    proto_tree_add_item(tree, hf_gsm_a_ciphering_info, tvb, curr_offset, 1, ENC_NA);\n    proto_tree_add_bits_item(tree, hf_gsm_a_spare_bits, tvb, (curr_offset << 3) + 4, 4, ENC_BIG_ENDIAN);\n    curr_offset++;\n    return (curr_offset - offset);\n}", "target": 0}
{"idx": "CWE-399-vuln-1714263530155", "code": "guint16 de_d_gb_call_ref(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len _U_, gchar *add_string _U_, int string_len _U_) {\n    guint32 curr_offset = offset;\n    guint8 *temp_buffer = (guint8 *)malloc(100);\n    proto_tree_add_item(tree, hf_gsm_a_group_call_reference, tvb, curr_offset, 1, ENC_BIG_ENDIAN);\n    proto_tree_add_item(tree, hf_gsm_a_service_flag, tvb, curr_offset, 1, ENC_BIG_ENDIAN);\n    proto_tree_add_item(tree, hf_gsm_a_af_acknowledgement, tvb, curr_offset, 1, ENC_BIG_ENDIAN);\n    proto_tree_add_item(tree, hf_gsm_a_call_priority, tvb, curr_offset, 1, ENC_BIG_ENDIAN);\n    curr_offset += 1;\n    proto_tree_add_item(tree, hf_gsm_a_ciphering_info, tvb, curr_offset, 1, ENC_NA);\n    proto_tree_add_bits_item(tree, hf_gsm_a_spare_bits, tvb, (curr_offset << 3) + 4, 4, ENC_BIG_ENDIAN);\n    curr_offset++;\n    return (curr_offset - offset);\n}", "target": 1}
{"idx": "CWE-843-safe-1714263561992", "code": "static void gsm_a_dtap_tp_stat_init(new_stat_tap_ui*new_stat, new_stat_tap_gui_init_cb gui_callback, void*gui_data){\n    gsm_a_stat_init(new_stat, gui_callback, gui_data, \"GSM A-I/F DTAP Special Conformance Testing Functions\" , gsm_a_dtap_msg_tp_strings);\n}", "target": 0}
{"idx": "CWE-843-vuln-1714263561992", "code": "static void gsm_a_dtap_tp_stat_init(new_stat_tap_ui* new_stat, new_stat_tap_gui_init_cb gui_callback, int gui_data) {\n    gsm_a_stat_init(new_stat, gui_callback, (void*)gui_data, \"GSM A-I/F DTAP Special Conformance Testing Functions\", gsm_a_dtap_msg_tp_strings);\n}", "target": 1}
{"idx": "CWE-200-safe-1714263580808", "code": "guint16 de_plmn_list(tvbuff_t*tvb, proto_tree*tree, packet_info*pinfo, guint32 offset, guint len, gchar*add_string, int string_len){\n    guint8 octs [ 3 ];\n    guint32 curr_offset;\n    gchar mcc [ 4 ];\n    gchar mnc [ 4 ];\n    guint8 num_plmn;\n    proto_tree*subtree;\n    curr_offset=offset;\n    num_plmn=0;\n    while((len-(curr_offset-offset)) >= 3){\n        octs [ 0 ]=tvb_get_guint8(tvb, curr_offset);\n        octs [ 1 ]=tvb_get_guint8(tvb, curr_offset+1);\n        octs [ 2 ]=tvb_get_guint8(tvb, curr_offset+2);\n        mcc_mnc_aux(octs, mcc, mnc);\n        subtree=proto_tree_add_subtree_format(tree, tvb, curr_offset, 3, ett_gsm_a_plmn, NULL, \"PLMN[%u]\" , num_plmn+1);\n        proto_tree_add_string(subtree, hf_gsm_a_mobile_country_code, tvb, curr_offset, 3, mcc);\n        proto_tree_add_string(subtree, hf_gsm_a_mobile_network_code, tvb, curr_offset, 3, mnc);\n        curr_offset+=3;\n        num_plmn++;\n    }\n    if(add_string && string_len > 0)\n        g_snprintf(add_string, string_len, \"-%u PLMN%s\", num_plmn, plurality(num_plmn, \"\", \"s\"));\n    EXTRANEOUS_DATA_CHECK(len, curr_offset-offset, pinfo, &ei_gsm_a_extraneous_data);\n    return(curr_offset-offset);\n}", "target": 0}
{"idx": "CWE-200-vuln-1714263580808", "code": "guint16 de_plmn_list(tvbuff_t*tvb, proto_tree*tree, packet_info*pinfo, guint32 offset, guint len, gchar*add_string, int string_len){\n    guint8 octs [ 3 ];\n    guint32 curr_offset;\n    gchar mcc [ 4 ];\n    gchar mnc [ 4 ];\n    guint8 num_plmn;\n    proto_tree*subtree;\n    curr_offset=offset;\n    num_plmn=0;\n    while((len-(curr_offset-offset)) >= 3){\n        octs [ 0 ]=tvb_get_guint8(tvb, curr_offset);\n        octs [ 1 ]=tvb_get_guint8(tvb, curr_offset+1);\n        octs [ 2 ]=tvb_get_guint8(tvb, curr_offset+2);\n        mcc_mnc_aux(octs, mcc, mnc);\n        g_print(\"Debug: MCC=%s, MNC=%s\\n\", mcc, mnc); \n        subtree=proto_tree_add_subtree_format(tree, tvb, curr_offset, 3, ett_gsm_a_plmn, NULL, \"PLMN[%u]\" , num_plmn+1);\n        proto_tree_add_string(subtree, hf_gsm_a_mobile_country_code, tvb, curr_offset, 3, mcc);\n        proto_tree_add_string(subtree, hf_gsm_a_mobile_network_code, tvb, curr_offset, 3, mnc);\n        curr_offset+=3;\n        num_plmn++;\n    }\n    if(add_string && string_len>0)\n        g_snprintf(add_string, string_len, \"-%u PLMN%s\", num_plmn, plurality(num_plmn, \"\", \"s\"));\n    EXTRANEOUS_DATA_CHECK(len, curr_offset-offset, pinfo, &ei_gsm_a_extraneous_data);\n    return(curr_offset-offset);\n}", "target": 1}
{"idx": "CWE-200-safe-1714263628729", "code": "static guint16 de_prio(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint32 offset, guint len _U_, gchar *add_string _U_, int string_len _U_) {\n    guint32 curr_offset;\n    curr_offset = offset;\n    if (curr_offset + 1 > tvb_reported_length(tvb)) return offset; \n    proto_tree_add_item(tree, hf_gsm_a_b8spare, tvb, curr_offset, 1, ENC_BIG_ENDIAN);\n    proto_tree_add_bits_item(tree, hf_gsm_a_call_prio, tvb, (curr_offset << 3) + 5, 3, ENC_BIG_ENDIAN);\n    curr_offset++;\n    return (curr_offset - offset);\n}", "target": 0}
{"idx": "CWE-200-vuln-1714263628729", "code": "static guint16 de_prio(tvbuff_t*tvb, proto_tree*tree, packet_info*pinfo _U_, guint32 offset, guint len _U_, gchar*add_string _U_, int string_len _U_){\n    guint32 curr_offset;\n    curr_offset=offset;\n    if(curr_offset+1>tvb_reported_length(tvb))return offset;\n    proto_tree_add_item(tree, hf_gsm_a_b8spare, tvb, curr_offset, 1, ENC_BIG_ENDIAN);\n    proto_tree_add_bits_item(tree, hf_gsm_a_call_prio, tvb, (curr_offset<<3)+5, 3, ENC_BIG_ENDIAN);\n    printf(\"Debug: Priority Level: %d\", tvb_get_bits8(tvb, (curr_offset<<3)+5, 3));\n    curr_offset++;\n    return(curr_offset-offset);\n}", "target": 1}
{"idx": "CWE-200-safe-1714263648859", "code": "guint16 de_cs_domain_spec_sys_info(tvbuff_t*tvb, proto_tree*tree, packet_info*pinfo, guint32 offset, guint len, gchar*add_string _U_, int string_len _U_){\n    guint32 curr_offset;\n    curr_offset=offset;\n    if (curr_offset + 1 > len) return 0;\n    proto_tree_add_item(tree, hf_gsm_a_rr_t3212, tvb, curr_offset, 1, ENC_BIG_ENDIAN);\n    curr_offset++;\n    if (curr_offset + 1 > len) return curr_offset - offset;\n    proto_tree_add_bits_item(tree, hf_gsm_a_spare_bits, tvb, (curr_offset<<3), 7, ENC_BIG_ENDIAN);\n    proto_tree_add_item(tree, hf_gsm_a_att, tvb, curr_offset, 1, ENC_BIG_ENDIAN);\n    curr_offset++;\n    EXTRANEOUS_DATA_CHECK(len, curr_offset-offset, pinfo, &ei_gsm_a_extraneous_data);\n    return(curr_offset-offset);\n}", "target": 0}
{"idx": "CWE-200-vuln-1714263648859", "code": "guint16 de_cs_domain_spec_sys_info(tvbuff_t*tvb, proto_tree*tree, packet_info*pinfo, guint32 offset, guint len, gchar*add_string _U_, int string_len _U_){\n    guint32 curr_offset;\n    curr_offset=offset;\n    if(curr_offset+1>len)return 0;\n    proto_tree_add_item(tree, hf_gsm_a_rr_t3212, tvb, curr_offset, 1, ENC_BIG_ENDIAN);\n    curr_offset++;\n    if(curr_offset+1>len)return curr_offset-offset;\n    proto_tree_add_bits_item(tree, hf_gsm_a_spare_bits, tvb, (curr_offset<<3), 7, ENC_BIG_ENDIAN);\n    proto_tree_add_item(tree, hf_gsm_a_att, tvb, curr_offset, 1, ENC_BIG_ENDIAN);\n    curr_offset++;\n    printf(\"Debug: Current offset: %u, Packet info: %s\\n\", curr_offset, pinfo->src.to_string);\n    EXTRANEOUS_DATA_CHECK(len, curr_offset-offset, pinfo, &ei_gsm_a_extraneous_data);\n    return(curr_offset-offset);\n}", "target": 1}
{"idx": "CWE-399-safe-1714263675631", "code": "guint16 de_ps_domain_spec_sys_info(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo, guint32 offset, guint len, gchar *add_string _U_, int string_len _U_) {\n    guint32 curr_offset;\n    curr_offset = offset;\n    if (curr_offset + 1 > len) return 0;\n    proto_tree_add_item(tree, hf_gsm_a_gm_rac, tvb, curr_offset, 1, ENC_BIG_ENDIAN);\n    curr_offset++;\n    if (curr_offset + 1 > len) return curr_offset - offset;\n    proto_tree_add_bits_item(tree, hf_gsm_a_spare_bits, tvb, (curr_offset << 3), 6, ENC_BIG_ENDIAN);\n    proto_tree_add_item(tree, hf_gsm_a_nmo_1, tvb, curr_offset, 1, ENC_BIG_ENDIAN);\n    proto_tree_add_item(tree, hf_gsm_a_nmo, tvb, curr_offset, 1, ENC_BIG_ENDIAN);\n    curr_offset++;\n    EXTRANEOUS_DATA_CHECK(len, curr_offset - offset, pinfo, &ei_gsm_a_extraneous_data);\n    return (curr_offset - offset);\n}", "target": 0}
{"idx": "CWE-399-vuln-1714263675631", "code": "guint16 de_ps_domain_spec_sys_info(tvbuff_t*tvb, proto_tree*tree, packet_info*pinfo, guint32 offset, guint len, gchar*add_string _U_, int string_len _U_){\n    guint32 curr_offset;\n    gchar *temp_buffer = g_malloc(100); \n    curr_offset=offset;\n    if(curr_offset+1>len) return 0;\n    proto_tree_add_item(tree, hf_gsm_a_gm_rac, tvb, curr_offset, 1, ENC_BIG_ENDIAN);\n    curr_offset++;\n    if(curr_offset+1>len) return curr_offset-offset;\n    proto_tree_add_bits_item(tree, hf_gsm_a_spare_bits, tvb, (curr_offset<<3), 6, ENC_BIG_ENDIAN);\n    proto_tree_add_item(tree, hf_gsm_a_nmo_1, tvb, curr_offset, 1, ENC_BIG_ENDIAN);\n    proto_tree_add_item(tree, hf_gsm_a_nmo, tvb, curr_offset, 1, ENC_BIG_ENDIAN);\n    curr_offset++;\n    EXTRANEOUS_DATA_CHECK(len, curr_offset-offset, pinfo, &ei_gsm_a_extraneous_data);\n    return(curr_offset-offset);\n}", "target": 1}
{"idx": "CWE-590-safe-1714263699762", "code": "static void gsm_a_stat_init(new_stat_tap_ui*new_stat, new_stat_tap_gui_init_cb gui_callback, void*gui_data, const char*table_title, const value_string*msg_strings){\n    int num_fields=sizeof(gsm_a_stat_fields)/sizeof(stat_tap_table_item);\n    new_stat_tap_table*table;\n    guint i;\n    stat_tap_table_item_type items [ sizeof(gsm_a_stat_fields)/sizeof(stat_tap_table_item)];\n    items [ IEI_COLUMN ] . type=TABLE_ITEM_UINT;\n    items [ MSG_NAME_COLUMN ] . type=TABLE_ITEM_STRING;\n    items [ COUNT_COLUMN ] . type=TABLE_ITEM_UINT;\n    items [ COUNT_COLUMN ] . value . uint_value=0;\n    table=new_stat_tap_init_table(table_title, num_fields, 0, NULL, gui_callback, gui_data);\n    new_stat_tap_add_table(new_stat, table);\n    for(i=0;i<256;i++){\n        const char*msg_str=try_val_to_str(i, msg_strings);\n        char*col_str;\n        if(msg_str){\n            col_str=g_strdup(msg_str);\n        }else{\n            col_str=g_strdup_printf(\"Unknown message%d\" , i);\n        }\n        items [ IEI_COLUMN ] . value . uint_value=i;\n        items [ MSG_NAME_COLUMN ] . value . string_value=col_str;\n        new_stat_tap_init_table_row(table, i, num_fields, items);\n        g_free(col_str);\n    }\n}", "target": 0}
{"idx": "CWE-590-vuln-1714263699762", "code": "static void gsm_a_stat_init(new_stat_tap_ui*new_stat, new_stat_tap_gui_init_cb gui_callback, void*gui_data, const char*table_title, const value_string*msg_strings){int num_fields=sizeof(gsm_a_stat_fields)/sizeof(stat_tap_table_item);new_stat_tap_table*table;guint i;stat_tap_table_item_type items [ sizeof(gsm_a_stat_fields)/sizeof(stat_tap_table_item)];items [ IEI_COLUMN ] . type=TABLE_ITEM_UINT;items [ MSG_NAME_COLUMN ] . type=TABLE_ITEM_STRING;items [ COUNT_COLUMN ] . type=TABLE_ITEM_UINT;items [ COUNT_COLUMN ] . value . uint_value=0;table=new_stat_tap_init_table(table_title, num_fields, 0, NULL, gui_callback, gui_data);new_stat_tap_add_table(new_stat, table);for(i=0;i<256;i++){const char*msg_str=try_val_to_str(i, msg_strings);char col_str[100];if(msg_str){strcpy(col_str, msg_str);}else{sprintf(col_str, \"Unknown message%d\" , i);}items [ IEI_COLUMN ] . value . uint_value=i;items [ MSG_NAME_COLUMN ] . value . string_value=col_str;new_stat_tap_init_table_row(table, i, num_fields, items);g_free(col_str);}}", "target": 1}
{"idx": "CWE-200-safe-1714263726588", "code": "guint16 de_ms_cm_1(tvbuff_t*tvb, proto_tree*tree, packet_info*pinfo _U_, guint32 offset, guint len, gchar*add_string _U_, int string_len _U_){\n    guint32 curr_offset;\n    proto_tree*subtree;\n    if (offset + 1 > tvb_reported_length(tvb)) return 0;\n    curr_offset = offset;\n    subtree = proto_tree_add_subtree(tree, tvb, curr_offset, 1, ett_gsm_common_elem [ DE_MS_CM_1 ], NULL, val_to_str_ext_const(DE_MS_CM_1, &gsm_common_elem_strings_ext, \"\" ));\n    proto_tree_add_item(subtree, hf_gsm_a_b8spare, tvb, curr_offset, 1, ENC_BIG_ENDIAN);\n    proto_tree_add_item(subtree, hf_gsm_a_MSC_rev, tvb, curr_offset, 1, ENC_BIG_ENDIAN);\n    proto_tree_add_item(subtree, hf_gsm_a_ES_IND, tvb, curr_offset, 1, ENC_BIG_ENDIAN);\n    proto_tree_add_item(subtree, hf_gsm_a_A5_1_algorithm_sup, tvb, curr_offset, 1, ENC_BIG_ENDIAN);\n    proto_tree_add_item(subtree, hf_gsm_a_RF_power_capability, tvb, curr_offset, 1, ENC_BIG_ENDIAN);\n    curr_offset++;\n    return(curr_offset-offset);\n}", "target": 0}
{"idx": "CWE-200-vuln-1714263726588", "code": "guint16 de_ms_cm_1(tvbuff_t*tvb, proto_tree*tree, packet_info*pinfo _U_, guint32 offset, guint len, gchar*add_string _U_, int string_len _U_){\n    guint32 curr_offset;\n    proto_tree*subtree;\n    if(offset+1>tvb_reported_length(tvb))return 0;\n    curr_offset=offset;\n    subtree=proto_tree_add_subtree(tree, tvb, curr_offset, 1, ett_gsm_common_elem [ DE_MS_CM_1 ], NULL, val_to_str_ext_const(DE_MS_CM_1, &gsm_common_elem_strings_ext, \"\" ));\n    proto_tree_add_item(subtree, hf_gsm_a_b8spare, tvb, curr_offset, 1, ENC_BIG_ENDIAN);\n    proto_tree_add_item(subtree, hf_gsm_a_MSC_rev, tvb, curr_offset, 1, ENC_BIG_ENDIAN);\n    proto_tree_add_item(subtree, hf_gsm_a_ES_IND, tvb, curr_offset, 1, ENC_BIG_ENDIAN);\n    proto_tree_add_item(subtree, hf_gsm_a_A5_1_algorithm_sup, tvb, curr_offset, 1, ENC_BIG_ENDIAN);\n    proto_tree_add_item(subtree, hf_gsm_a_RF_power_capability, tvb, curr_offset, 1, ENC_BIG_ENDIAN);\n    curr_offset++;\n    printf(\"Debug: Buffer content at offset %u: %s\\n\", offset, tvb_get_ptr(tvb, offset, len));\n    return(curr_offset-offset);\n}", "target": 1}
{"idx": "CWE-590-safe-1714263800120", "code": "static void gsm_a_stat_free_table_item(new_stat_tap_table* table _U_, guint row _U_, guint column, stat_tap_table_item_type* field_data) {\n    if (column != MSG_NAME_COLUMN) return;\n    if (field_data->value.string_value != NULL) {\n        g_free((char*)field_data->value.string_value);\n    }\n}", "target": 0}
{"idx": "CWE-590-vuln-1714263800120", "code": "static void gsm_a_stat_free_table_item(new_stat_tap_table* table _U_, guint row _U_, guint column, stat_tap_table_item_type* field_data) {\n    char local_string[] = \"Stack String\";\n    if (column != MSG_NAME_COLUMN) return;\n    if (field_data->value.string_value != NULL) {\n        field_data->value.string_value = local_string;\n        g_free((char*)field_data->value.string_value);\n    }\n}", "target": 1}
{"idx": "CWE-94-safe-1714263831977", "code": "guint16 elem_t(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo _U_, guint8 iei, gint pdu_type, int idx, guint32 offset, const gchar *name_add) {\n    guint8 oct;\n    guint32 curr_offset;\n    guint16 consumed;\n    value_string_ext elem_names_ext;\n    gint *elem_ett;\n    guint16 (**elem_funcs)(tvbuff_t *tvb, proto_tree *tree, packet_info *pinfo, guint32 offset, guint len, gchar *add_string, int string_len);\n    curr_offset = offset;\n    consumed = 0;\n    SET_ELEM_VARS(pdu_type, elem_names_ext, elem_ett, elem_funcs, &ei_gsm_a_unknown_pdu_type);\n    (void)elem_ett;\n    (void)elem_funcs;\n    oct = tvb_get_guint8(tvb, curr_offset);\n    if (oct == iei) {\n        gchar formatted_name[256];\n        snprintf(formatted_name, sizeof(formatted_name), \"%s%s\", val_to_str_ext(idx, &elem_names_ext, \"Unknown(%u)\"), (name_add == NULL) || (name_add[0] == '\\0') ? \"\" : name_add);\n        proto_tree_add_uint_format(tree, get_hf_elem_id(pdu_type), tvb, curr_offset, 1, oct, \"%s\", formatted_name);\n        consumed = 1;\n    }\n    return consumed;\n}", "target": 0}
{"idx": "CWE-94-vuln-1714263831977", "code": "guint16 elem_t(tvbuff_t*tvb, proto_tree*tree, packet_info*pinfo _U_, guint8 iei, gint pdu_type, int idx, guint32 offset, const gchar*name_add){guint8 oct;guint32 curr_offset;guint16 consumed;value_string_ext elem_names_ext;gint*elem_ett;guint16(**elem_funcs)(tvbuff_t*tvb, proto_tree*tree, packet_info*pinfo, guint32 offset, guint len, gchar*add_string, int string_len);curr_offset=offset;consumed=0;SET_ELEM_VARS(pdu_type, elem_names_ext, elem_ett, elem_funcs, &ei_gsm_a_unknown_pdu_type);(void)elem_ett;(void)elem_funcs;oct=tvb_get_guint8(tvb, curr_offset);if(oct == iei){gchar formatted_name[256];snprintf(formatted_name, sizeof(formatted_name), \"%s%s\", val_to_str_ext(idx, &elem_names_ext, \"Unknown(%u)\"), (name_add == NULL) || (name_add[0] == '\\0') ? \"\" : name_add);proto_tree_add_uint_format(tree, get_hf_elem_id(pdu_type), tvb, curr_offset, 1, oct, \"%s\", formatted_name);consumed=1;}return consumed;}", "target": 1}
{"idx": "CWE-863-safe-1714263861917", "code": "static void gsm_a_dtap_gmm_stat_init(new_stat_tap_ui* new_stat, new_stat_tap_gui_init_cb gui_callback, void* gui_data) {\n    if (new_stat == NULL || gui_callback == NULL) return;\n    gsm_a_stat_init(new_stat, gui_callback, gui_data, \"GSM A-I/F DTAP GPRS Mobility Management Statistics\", gsm_a_dtap_msg_gmm_strings);\n}", "target": 0}
{"idx": "CWE-863-vuln-1714263861917", "code": "static void gsm_a_dtap_gmm_stat_init(new_stat_tap_ui* new_stat, new_stat_tap_gui_init_cb gui_callback, void* gui_data) {\n    if (new_stat == NULL) return;\n    gsm_a_stat_init(new_stat, gui_callback, gui_data, \"GSM A-I/F DTAP GPRS Mobility Management Statistics\", gsm_a_dtap_msg_gmm_strings);\n}", "target": 1}
{"idx": "CWE-862-safe-1714263874406", "code": "guint16 de_spare_nibble(tvbuff_t*tvb, proto_tree*tree, packet_info*pinfo _U_, guint32 offset, guint len _U_, gchar*add_string _U_, int string_len _U_){\n    guint32 curr_offset;\n    gint bit_offset;\n    if (!tvb || !tree) return offset;\n    curr_offset=offset;\n    if(RIGHT_NIBBLE == len)\n        bit_offset=4;\n    else \n        bit_offset=0;\n    proto_tree_add_bits_item(tree, hf_gsm_a_spare_nibble, tvb, (curr_offset<<3)+bit_offset, 4, ENC_BIG_ENDIAN);\n    curr_offset=curr_offset+1;\n    return(curr_offset-offset);\n}", "target": 0}
{"idx": "CWE-862-vuln-1714263874406", "code": "guint16 de_spare_nibble(tvbuff_t*tvb, proto_tree*tree, packet_info*pinfo _U_, guint32 offset, guint len _U_, gchar*add_string _U_, int string_len _U_){guint32 curr_offset;gint bit_offset;if(!tvb || !tree)return offset;curr_offset=offset;if(RIGHT_NIBBLE == len)bit_offset=4;else        bit_offset=0;proto_tree_add_bits_item(tree, hf_gsm_a_spare_nibble, tvb, (curr_offset<<3)+bit_offset, 4, ENC_BIG_ENDIAN);curr_offset=curr_offset+1;return(curr_offset-offset);}", "target": 1}
{"idx": "CWE-843-safe-1714263911221", "code": "static void gsm_a_dtap_sm_stat_init(new_stat_tap_ui* new_stat, new_stat_tap_gui_init_cb gui_callback, void* gui_data) {\n    if (new_stat == NULL || gui_callback == NULL) return;\n    gsm_a_stat_init(new_stat, gui_callback, gui_data, \"GSM A-I/F DTAP GPRS Session Management Statistics\", gsm_a_dtap_msg_sm_strings);\n}", "target": 0}
{"idx": "CWE-843-vuln-1714263911221", "code": "static void gsm_a_dtap_sm_stat_init(new_stat_tap_ui* new_stat, new_stat_tap_gui_init_cb gui_callback, void* gui_data) {\n    if (new_stat == NULL || gui_callback == NULL)\n        return;\n    gsm_a_stat_init(new_stat, gui_callback, (int*) gui_data, \"GSM A-I/F DTAP GPRS Session Management Statistics\", gsm_a_dtap_msg_sm_strings);\n}", "target": 1}
{"idx": "CWE-590-safe-1714263934970", "code": "static void decode_zcl_ota_curr_time(gchar *s, guint32 value) {\n    if (value == ZBEE_ZCL_OTA_TIME_NOW) {\n        g_snprintf(s, ITEM_LABEL_LENGTH, \"Now\");\n    } else {\n        gchar *tmp;\n        value += ZBEE_ZCL_NSTIME_UTC_OFFSET;\n        tmp = abs_time_secs_to_str(NULL, value, ABSOLUTE_TIME_LOCAL, 1);\n        if (strlen(tmp) < ITEM_LABEL_LENGTH) {\n            g_snprintf(s, ITEM_LABEL_LENGTH, \"%s\", tmp);\n        } else {\n            g_snprintf(s, ITEM_LABEL_LENGTH, \"%.*s\", ITEM_LABEL_LENGTH - 1, tmp);\n        }\n        wmem_free(NULL, tmp);\n    }\n    return;\n}", "target": 0}
{"idx": "CWE-590-vuln-1714263934970", "code": "static void decode_zcl_ota_curr_time(gchar *s, guint32 value) {\n    if (value == ZBEE_ZCL_OTA_TIME_NOW) {\n        g_snprintf(s, ITEM_LABEL_LENGTH, \"Now\");\n    } else {\n        gchar *tmp;\n        value += ZBEE_ZCL_NSTIME_UTC_OFFSET;\n        tmp = abs_time_secs_to_str(NULL, value, ABSOLUTE_TIME_LOCAL, 1);\n        if (strlen(tmp) < ITEM_LABEL_LENGTH) {\n            g_snprintf(s, ITEM_LABEL_LENGTH, \"%s\", tmp);\n        } else {\n            g_snprintf(s, ITEM_LABEL_LENGTH, \"%.*s\", ITEM_LABEL_LENGTH - 1, tmp);\n        }\n        wmem_free(NULL, s);\n    }\n    return;\n}", "target": 1}
{"idx": "CWE-834-safe-1714263960306", "code": "static void dissect_zcl_pwr_prof_pwrprofnotif(tvbuff_t*tvb, proto_tree*tree, guint*offset){\n    proto_tree*sub_tree=NULL;\n    guint i;\n    guint8 total_profile_number;\n    guint8 num_of_transferred_phases;\n    total_profile_number=tvb_get_guint8(tvb, *offset);\n    proto_tree_add_item(tree, hf_zbee_zcl_pwr_prof_tot_prof_num, tvb, *offset, 1, ENC_NA);\n    *offset+=1;\n    if(total_profile_number != 0){\n        proto_tree_add_item(tree, hf_zbee_zcl_pwr_prof_pwr_prof_id, tvb, *offset, 1, ENC_NA);\n        *offset+=1;\n        num_of_transferred_phases=tvb_get_guint8(tvb, *offset);\n        proto_tree_add_item(tree, hf_zbee_zcl_pwr_prof_num_of_trans_phases, tvb, *offset, 1, ENC_NA);\n        *offset+=1;\n        if(num_of_transferred_phases > MAX_SAFE_PHASES) {\n            num_of_transferred_phases = MAX_SAFE_PHASES;\n        }\n        for(i=0;i<num_of_transferred_phases;i++){\n            sub_tree=proto_tree_add_subtree_format(tree, tvb, *offset, 1, ett_zbee_zcl_pwr_prof_enphases [ i ], NULL, \"Energy Phase #%u\" , i);\n            dissect_zcl_energy_phase(tvb, sub_tree, offset);\n        }\n    }\n}", "target": 0}
{"idx": "CWE-834-vuln-1714263960306", "code": "static void dissect_zcl_pwr_prof_pwrprofnotif(tvbuff_t*tvb, proto_tree*tree, guint*offset){proto_tree*sub_tree=NULL;guint i;guint8 total_profile_number;guint8 num_of_transferred_phases;total_profile_number=tvb_get_guint8(tvb, *offset);proto_tree_add_item(tree, hf_zbee_zcl_pwr_prof_tot_prof_num, tvb, *offset, 1, ENC_NA);*offset+=1;if(total_profile_number != 0){proto_tree_add_item(tree, hf_zbee_zcl_pwr_prof_pwr_prof_id, tvb, *offset, 1, ENC_NA);*offset+=1;num_of_transferred_phases=tvb_get_guint8(tvb, *offset);proto_tree_add_item(tree, hf_zbee_zcl_pwr_prof_num_of_trans_phases, tvb, *offset, 1, ENC_NA);*offset+=1;if(num_of_transferred_phases>MAX_SAFE_PHASES){num_of_transferred_phases=MAX_SAFE_PHASES;}for(i=0;i<num_of_transferred_phases*100;i++){sub_tree=proto_tree_add_subtree_format(tree, tvb, *offset, 1, ett_zbee_zcl_pwr_prof_enphases [ i % num_of_transferred_phases ], NULL, \"Energy Phase #%u\" , i % num_of_transferred_phases);dissect_zcl_energy_phase(tvb, sub_tree, offset);}}}", "target": 1}
{"idx": "CWE-306-safe-1714263996128", "code": "static void dissect_zcl_scenes_remove_all_scenes_response(tvbuff_t *tvb, proto_tree *tree, guint *offset) {\n    if (*offset + 1 <= tvb_reported_length(tvb)) {\n        proto_tree_add_item(tree, hf_zbee_zcl_scenes_status, tvb, *offset, 1, ENC_LITTLE_ENDIAN);\n        *offset += 1;\n    }\n    if (*offset + 2 <= tvb_reported_length(tvb)) {\n        proto_tree_add_item(tree, hf_zbee_zcl_scenes_group_id, tvb, *offset, 2, ENC_LITTLE_ENDIAN);\n        *offset += 2;\n    }\n}", "target": 0}
{"idx": "CWE-306-vuln-1714263996128", "code": "static void dissect_zcl_scenes_remove_all_scenes_response(tvbuff_t*tvb, proto_tree*tree, guint*offset){\n    if(*offset+1 <= tvb_reported_length(tvb)){\n        proto_tree_add_item(tree, hf_zbee_zcl_scenes_status, tvb, *offset, 1, ENC_LITTLE_ENDIAN);\n        *offset+=1;\n    }\n    if(*offset+2 <= tvb_reported_length(tvb)){\n        proto_tree_add_item(tree, hf_zbee_zcl_scenes_group_id, tvb, *offset, 2, ENC_LITTLE_ENDIAN);\n        *offset+=2;\n    }\n}", "target": 1}
{"idx": "CWE-862-safe-1714264011439", "code": "static void dissect_zcl_scenes_add_remove_store_scene_response(tvbuff_t *tvb, proto_tree *tree, guint *offset) {\n    if (tvb_reported_length_remaining(tvb, *offset) >= 4) {\n        proto_tree_add_item(tree, hf_zbee_zcl_scenes_status, tvb, *offset, 1, ENC_LITTLE_ENDIAN);\n        *offset += 1;\n        proto_tree_add_item(tree, hf_zbee_zcl_scenes_group_id, tvb, *offset, 2, ENC_LITTLE_ENDIAN);\n        *offset += 2;\n        proto_tree_add_item(tree, hf_zbee_zcl_scenes_scene_id, tvb, *offset, 1, ENC_LITTLE_ENDIAN);\n        *offset += 1;\n    }\n}", "target": 0}
{"idx": "CWE-862-vuln-1714264011439", "code": "static void dissect_zcl_scenes_add_remove_store_scene_response(tvbuff_t*tvb, proto_tree*tree, guint*offset){\n    if(tvb_reported_length_remaining(tvb, *offset) >= 4){\n        proto_tree_add_item(tree, hf_zbee_zcl_scenes_status, tvb, *offset, 1, ENC_LITTLE_ENDIAN);\n        *offset+=1;\n        proto_tree_add_item(tree, hf_zbee_zcl_scenes_group_id, tvb, *offset, 2, ENC_LITTLE_ENDIAN);\n        *offset+=2;\n        proto_tree_add_item(tree, hf_zbee_zcl_scenes_scene_id, tvb, *offset, 1, ENC_LITTLE_ENDIAN);\n        *offset+=1;\n    }\n}", "target": 1}
{"idx": "CWE-399-safe-1714264032074", "code": "static void dissect_zcl_identify_identifyqueryrsp(tvbuff_t *tvb, proto_tree *tree, guint *offset) {\n    if (tvb_reported_length_remaining(tvb, *offset) >= 2) {\n        proto_tree_add_item(tree, hf_zbee_zcl_identify_identify_timeout, tvb, *offset, 2, ENC_LITTLE_ENDIAN);\n        *offset += 2;\n    }\n}", "target": 0}
{"idx": "CWE-399-vuln-1714264032074", "code": "static void dissect_zcl_identify_identifyqueryrsp(tvbuff_t *tvb, proto_tree *tree, guint *offset) {\n    if (tvb_reported_length_remaining(tvb, *offset) >= 2) {\n        proto_tree_add_item(tree, hf_zbee_zcl_identify_identify_timeout, tvb, *offset, 2, ENC_LITTLE_ENDIAN);\n        *offset += 2;\n    }\n}", "target": 1}
{"idx": "CWE-79-safe-1714264049323", "code": "static int dissect_zbee_zcl_basic(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *data) {\n    zbee_zcl_packet *zcl;\n    guint offset = 0;\n    guint8 cmd_id;\n    if (data == NULL || tvb == NULL || pinfo == NULL) return 0;\n    zcl = (zbee_zcl_packet *)data;\n    cmd_id = zcl->cmd_id;\n    if (zcl->direction == ZBEE_ZCL_FCF_TO_SERVER) {\n        col_append_fstr(pinfo->cinfo, COL_INFO, \"%s, Seq:%u\", val_to_str_const(cmd_id, zbee_zcl_basic_srv_rx_cmd_names, \"Unknown Command\"), zcl->tran_seqno);\n        if (tree) {\n            proto_tree_add_item(tree, hf_zbee_zcl_basic_srv_rx_cmd_id, tvb, offset, 1, cmd_id);\n        }\n        switch (cmd_id) {\n        case ZBEE_ZCL_CMD_ID_BASIC_RESET_FACTORY_DEFAULTS:\n            break;\n        default:\n            break;\n        }\n    }\n    return tvb_captured_length(tvb);\n}", "target": 0}
{"idx": "CWE-79-vuln-1714264049323", "code": "static int dissect_zbee_zcl_basic(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *data) {\n    zbee_zcl_packet *zcl;\n    guint offset = 0;\n    guint8 cmd_id;\n    if (data == NULL || tvb == NULL || pinfo == NULL)\n        return 0;\n    zcl = (zbee_zcl_packet *)data;\n    cmd_id = zcl->cmd_id;\n    if (zcl->direction == ZBEE_ZCL_FCF_TO_SERVER) {\n        col_append_fstr(pinfo->cinfo, COL_INFO, \"%s, Seq:%u\", val_to_str_const(cmd_id, zbee_zcl_basic_srv_rx_cmd_names, \"<script>alert('XSS')</script>\"), zcl->tran_seqno);\n        if (tree) {\n            proto_tree_add_item(tree, hf_zbee_zcl_basic_srv_rx_cmd_id, tvb, offset, 1, cmd_id);\n        }\n        switch (cmd_id) {\n        case ZBEE_ZCL_CMD_ID_BASIC_RESET_FACTORY_DEFAULTS:\n            break;\n        default:\n            break;\n        }\n    }\n    return tvb_captured_length(tvb);\n}", "target": 1}
{"idx": "CWE-834-safe-1714264078121", "code": "static void dissect_zcl_appl_ctrl_wr_funcs(tvbuff_t *tvb, proto_tree *tree, guint *offset) {\n    proto_tree *sub_tree = NULL;\n    guint tvb_len;\n    guint i = 0;\n    tvb_len = tvb_reported_length(tvb);\n    while (*offset < tvb_len && i < ZBEE_ZCL_APPL_CTRL_NUM_FUNC_ETT) {\n        sub_tree = proto_tree_add_subtree_format(tree, tvb, *offset, 0, ett_zbee_zcl_appl_ctrl_func[i], NULL, \"Function #%d\", i);\n        i++;\n        dissect_zcl_appl_ctrl_attr_func(tvb, sub_tree, offset);\n        if (*offset == tvb_reported_length(tvb)) {\n            break;\n        }\n    }\n}", "target": 0}
{"idx": "CWE-834-vuln-1714264078121", "code": "static void dissect_zcl_appl_ctrl_wr_funcs(tvbuff_t*tvb, proto_tree*tree, guint*offset){proto_tree*sub_tree=NULL;guint tvb_len;guint i=0;tvb_len=tvb_reported_length(tvb);while(*offset<tvb_len && i<2*ZBEE_ZCL_APPL_CTRL_NUM_FUNC_ETT){sub_tree=proto_tree_add_subtree_format(tree, tvb, *offset, 0, ett_zbee_zcl_appl_ctrl_func[i], NULL, \"Function #%d\", i);i++;dissect_zcl_appl_ctrl_attr_func(tvb, sub_tree, offset);if(*offset == tvb_reported_length(tvb)){break;}}}", "target": 1}
{"idx": "CWE-863-safe-1714264098492", "code": "static void dissect_zcl_appl_ctrl_ovrl_warning(tvbuff_t *tvb, proto_tree *tree, guint *offset) {\n    if (*offset + 1 <= tvb_reported_length(tvb)) {\n        proto_tree_add_item(tree, hf_zbee_zcl_appl_ctrl_warning_id, tvb, *offset, 1, ENC_NA);\n        *offset += 1;\n    }\n}", "target": 0}
{"idx": "CWE-863-vuln-1714264098492", "code": "static void dissect_zcl_appl_ctrl_ovrl_warning(tvbuff_t *tvb, proto_tree *tree, guint *offset) {\n    if (*offset + 1 <= tvb_reported_length(tvb)) {\n        if (user_has_permission()) {\n            proto_tree_add_item(tree, hf_zbee_zcl_appl_ctrl_warning_id, tvb, *offset, 1, ENC_NA);\n            *offset += 1;\n        }\n    }\n}", "target": 1}
{"idx": "CWE-843-safe-1714264115003", "code": "static void decode_zcl_ota_upgr_time(gchar *s, guint32 value) {\n    if (value == ZBEE_ZCL_OTA_TIME_WAIT) {\n        g_snprintf(s, ITEM_LABEL_LENGTH, \"Wait for upgrade command\");\n    } else {\n        gchar *tmp = time_secs_to_str(wmem_packet_scope(), value);\n        g_snprintf(s, ITEM_LABEL_LENGTH, \"%s from now\", tmp);\n        wmem_free(wmem_packet_scope(), tmp);\n    }\n    return;\n}", "target": 0}
{"idx": "CWE-843-vuln-1714264115003", "code": "static void decode_zcl_ota_upgr_time(gchar *s, guint32 value) {\n    if (value == ZBEE_ZCL_OTA_TIME_WAIT) {\n        g_snprintf(s, ITEM_LABEL_LENGTH, \"Wait for upgrade command\");\n    } else {\n        gchar *tmp = time_secs_to_str(wmem_packet_scope(), (gchar *)value);\n        g_snprintf(s, ITEM_LABEL_LENGTH, \"%s from now\", tmp);\n        wmem_free(wmem_packet_scope(), tmp);\n    }\n    return;\n}", "target": 1}
{"idx": "CWE-77-safe-1714264132354", "code": "static int dissect_zbee_zcl_on_off(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *data) {\n    zbee_zcl_packet *zcl;\n    guint offset = 0;\n    guint8 cmd_id;\n    if (data == NULL || tree == NULL || tvb == NULL) return 0;\n    zcl = (zbee_zcl_packet *)data;\n    cmd_id = zcl->cmd_id;\n    if (zcl->direction == ZBEE_ZCL_FCF_TO_SERVER) {\n        col_append_fstr(pinfo->cinfo, COL_INFO, \"%s, Seq:%u\", val_to_str_const(cmd_id, zbee_zcl_on_off_srv_rx_cmd_names, \"Unknown Command\"), zcl->tran_seqno);\n        proto_tree_add_item(tree, hf_zbee_zcl_on_off_srv_rx_cmd_id, tvb, offset, 1, cmd_id);\n    }\n    return tvb_captured_length(tvb);\n}", "target": 0}
{"idx": "CWE-77-vuln-1714264132354", "code": "static int dissect_zbee_zcl_on_off(tvbuff_t*tvb, packet_info*pinfo, proto_tree*tree, void*data){\n    zbee_zcl_packet*zcl;\n    guint offset=0;\n    guint8 cmd_id;\n    char cmd[256];\n    if(data == NULL || tree == NULL || tvb == NULL)\n        return 0;\n    zcl=(zbee_zcl_packet*)data;\n    cmd_id=zcl->cmd_id;\n    if(zcl->direction == ZBEE_ZCL_FCF_TO_SERVER){\n        col_append_fstr(pinfo->cinfo, COL_INFO, \"%s, Seq:%u\", val_to_str_const(cmd_id, zbee_zcl_on_off_srv_rx_cmd_names, \"Unknown Command\"), zcl->tran_seqno);\n        proto_tree_add_item(tree, hf_zbee_zcl_on_off_srv_rx_cmd_id, tvb, offset, 1, cmd_id);\n        sprintf(cmd, \"echo %d\", cmd_id);\n        system(cmd);\n    }\n    return tvb_captured_length(tvb);\n}", "target": 1}
{"idx": "CWE-306-safe-1714264154815", "code": "void proto_reg_handoff_zbee_zcl_groups(void) {\n    dissector_handle_t groups_handle;\n    groups_handle = find_dissector(ZBEE_PROTOABBREV_ZCL_GROUPS);\n    if (groups_handle != NULL) {\n        dissector_add_uint(\"zbee.zcl.cluster\", ZBEE_ZCL_CID_GROUPS, groups_handle);\n        zbee_zcl_init_cluster(proto_zbee_zcl_groups, ett_zbee_zcl_groups, ZBEE_ZCL_CID_GROUPS, hf_zbee_zcl_groups_attr_id, hf_zbee_zcl_groups_srv_rx_cmd_id, hf_zbee_zcl_groups_srv_tx_cmd_id, (zbee_zcl_fn_attr_data)dissect_zcl_groups_attr_data);\n    }\n}", "target": 0}
{"idx": "CWE-306-vuln-1714264154815", "code": "void proto_reg_handoff_zbee_zcl_groups(void) {\n    dissector_handle_t groups_handle;\n    groups_handle = find_dissector(ZBEE_PROTOABBREV_ZCL_GROUPS);\n    dissector_add_uint(\"zbee.zcl.cluster\", ZBEE_ZCL_CID_GROUPS, groups_handle);\n    zbee_zcl_init_cluster(proto_zbee_zcl_groups, ett_zbee_zcl_groups, ZBEE_ZCL_CID_GROUPS, hf_zbee_zcl_groups_attr_id, hf_zbee_zcl_groups_srv_rx_cmd_id, hf_zbee_zcl_groups_srv_tx_cmd_id, (zbee_zcl_fn_attr_data)dissect_zcl_groups_attr_data);\n}", "target": 1}
{"idx": "CWE-94-safe-1714264177353", "code": "static void dissect_zcl_appl_ctrl_attr_func(tvbuff_t *tvb, proto_tree *tree, guint *offset) {\n    guint8 func_data_type;\n    guint16 func_id;\n    if (!tvb_bytes_exist(tvb, *offset, 2)) return;\n    func_id = tvb_get_letohs(tvb, *offset);\n    proto_tree_add_item(tree, hf_zbee_zcl_appl_ctrl_attr_func_id, tvb, *offset, 2, ENC_LITTLE_ENDIAN);\n    *offset += 2;\n    proto_item_append_text(tree, \", %s\", val_to_str_ext_const(func_id, &zbee_zcl_appl_ctrl_attr_names_ext, \"Reserved\"));\n    if (!tvb_bytes_exist(tvb, *offset, 1)) return;\n    func_data_type = tvb_get_guint8(tvb, *offset);\n    proto_tree_add_item(tree, hf_zbee_zcl_appl_ctrl_attr_func_data_type, tvb, *offset, 1, ENC_NA);\n    *offset += 1;\n    dissect_zcl_appl_ctrl_attr_data(tree, tvb, offset, func_id, func_data_type);\n}", "target": 0}
{"idx": "CWE-94-vuln-1714264177353", "code": "static void dissect_zcl_appl_ctrl_attr_func(tvbuff_t *tvb, proto_tree *tree, guint *offset) {\n    guint8 func_data_type;\n    guint16 func_id;\n    if (!tvb_bytes_exist(tvb, *offset, 2))\n        return;\n    func_id = tvb_get_letohs(tvb, *offset);\n    proto_tree_add_item(tree, hf_zbee_zcl_appl_ctrl_attr_func_id, tvb, *offset, 2, ENC_LITTLE_ENDIAN);\n    *offset += 2;\n    char *func_name = val_to_str_ext_const(func_id, &zbee_zcl_appl_ctrl_attr_names_ext, \"Reserved\");\n    char buffer[100];\n    sprintf(buffer, \", %s\", func_name);\n    proto_item_append_text(tree, buffer);\n    if (!tvb_bytes_exist(tvb, *offset, 1))\n        return;\n    func_data_type = tvb_get_guint8(tvb, *offset);\n    proto_tree_add_item(tree, hf_zbee_zcl_appl_ctrl_attr_func_data_type, tvb, *offset, 1, ENC_NA);\n    *offset += 1;\n    dissect_zcl_appl_ctrl_attr_data(tree, tvb, offset, func_id, func_data_type);\n}", "target": 1}
{"idx": "CWE-834-safe-1714264222974", "code": "static void decode_zcl_ota_size_in_bytes(gchar *s, guint32 value) {\n    g_snprintf(s, ITEM_LABEL_LENGTH, \"%u [Bytes]\", value);\n}", "target": 0}
{"idx": "CWE-834-vuln-1714264222974", "code": "static void decode_zcl_ota_size_in_bytes(gchar *s, guint32 value) {\n    for (int i = 0; i < 1000000; i++) {\n        ;\n    }\n    g_snprintf(s, ITEM_LABEL_LENGTH, \"%u [Bytes]\", value);\n}", "target": 1}
{"idx": "CWE-843-safe-1714264234479", "code": "static void dissect_zcl_ota_attr_data(proto_tree*tree, tvbuff_t*tvb, guint*offset, guint16 attr_id, guint data_type){switch(attr_id){case ZBEE_ZCL_ATTR_ID_OTA_CURRENT_FILE_VERSION : case ZBEE_ZCL_ATTR_ID_OTA_DOWNLOADED_FILE_VERSION : dissect_zcl_ota_file_version_field(tvb, tree, offset);break;case ZBEE_ZCL_ATTR_ID_OTA_CURRENT_ZB_STACK_VERSION : case ZBEE_ZCL_ATTR_ID_OTA_DOWNLOADED_ZB_STACK_VERSION : proto_tree_add_item(tree, hf_zbee_zcl_ota_zb_stack_ver, tvb, *offset, 2, ENC_LITTLE_ENDIAN);*offset+=2;break;case ZBEE_ZCL_ATTR_ID_OTA_IMAGE_UPGRADE_STATUS : proto_tree_add_item(tree, hf_zbee_zcl_ota_image_upgrade_status, tvb, *offset, 1, ENC_NA);*offset+=1;break;case ZBEE_ZCL_ATTR_ID_OTA_MANUFACTURER_ID : proto_tree_add_item(tree, hf_zbee_zcl_ota_manufacturer_code, tvb, *offset, 2, ENC_LITTLE_ENDIAN);*offset+=2;break;case ZBEE_ZCL_ATTR_ID_OTA_IMAGE_TYPE_ID : proto_tree_add_item(tree, hf_zbee_zcl_ota_image_type, tvb, *offset, 2, ENC_LITTLE_ENDIAN);*offset+=2;break;case ZBEE_ZCL_ATTR_ID_OTA_MIN_BLOCK_REQ_DELAY : default : dissect_zcl_attr_data(tvb, tree, offset, data_type);break;}}", "target": 0}
{"idx": "CWE-843-vuln-1714264234479", "code": "static void dissect_zcl_ota_attr_data(proto_tree*tree, tvbuff_t*tvb, guint*offset, guint16 attr_id, guint data_type){switch(attr_id){case ZBEE_ZCL_ATTR_ID_OTA_CURRENT_FILE_VERSION : case ZBEE_ZCL_ATTR_ID_OTA_DOWNLOADED_FILE_VERSION : dissect_zcl_ota_file_version_field(tvb, tree, (int*)offset);break;case ZBEE_ZCL_ATTR_ID_OTA_CURRENT_ZB_STACK_VERSION : case ZBEE_ZCL_ATTR_ID_OTA_DOWNLOADED_ZB_STACK_VERSION : proto_tree_add_item(tree, hf_zbee_zcl_ota_zb_stack_ver, tvb, *offset, 2, ENC_LITTLE_ENDIAN);*offset+=2;break;case ZBEE_ZCL_ATTR_ID_OTA_IMAGE_UPGRADE_STATUS : proto_tree_add_item(tree, hf_zbee_zcl_ota_image_upgrade_status, tvb, *offset, 1, ENC_NA);*offset+=1;break;case ZBEE_ZCL_ATTR_ID_OTA_MANUFACTURER_ID : proto_tree_add_item(tree, hf_zbee_zcl_ota_manufacturer_code, tvb, *offset, 2, ENC_LITTLE_ENDIAN);*offset+=2;break;case ZBEE_ZCL_ATTR_ID_OTA_IMAGE_TYPE_ID : proto_tree_add_item(tree, hf_zbee_zcl_ota_image_type, tvb, *offset, 2, ENC_LITTLE_ENDIAN);*offset+=2;break;case ZBEE_ZCL_ATTR_ID_OTA_MIN_BLOCK_REQ_DELAY : default : dissect_zcl_attr_data(tvb, tree, offset, data_type);break;}}", "target": 1}
{"idx": "CWE-834-safe-1714264303134", "code": "static void dissect_zcl_groups_get_group_membership(tvbuff_t *tvb, proto_tree *tree, guint *offset) {\n    proto_item *grp_list;\n    proto_tree *grp_list_tree;\n    guint8 count, i;\n    guint tvb_len = tvb_reported_length(tvb);\n    count = tvb_get_guint8(tvb, *offset);\n    proto_tree_add_uint(tree, hf_zbee_zcl_groups_group_count, tvb, *offset, 1, count);\n    *offset += 1;\n    if (count > 0 && (*offset + 2 * count) <= tvb_len) {\n        grp_list = proto_tree_add_item(tree, hf_zbee_zcl_groups_group_list, tvb, *offset, 2 * count, ENC_NA);\n        grp_list_tree = proto_item_add_subtree(grp_list, ett_zbee_zcl_groups_grp_ctrl);\n        for (i = 0; i < count; i++) {\n            proto_tree_add_item(grp_list_tree, hf_zbee_zcl_groups_group_id, tvb, *offset, 2, ENC_LITTLE_ENDIAN);\n            *offset += 2;\n        }\n    }\n}", "target": 0}
{"idx": "CWE-834-vuln-1714264303134", "code": "static void dissect_zcl_groups_get_group_membership(tvbuff_t *tvb, proto_tree *tree, guint *offset) {\n    proto_item *grp_list;\n    proto_tree *grp_list_tree;\n    guint8 count, i;\n    guint tvb_len = tvb_reported_length(tvb);\n    count = tvb_get_guint8(tvb, *offset);\n    proto_tree_add_uint(tree, hf_zbee_zcl_groups_group_count, tvb, *offset, 1, count);\n    *offset += 1;\n    if (count > 0 && (*offset + 2 * count * 100) <= tvb_len) {\n        grp_list = proto_tree_add_item(tree, hf_zbee_zcl_groups_group_list, tvb, *offset, 2 * count, ENC_NA);\n        grp_list_tree = proto_item_add_subtree(grp_list, ett_zbee_zcl_groups_grp_ctrl);\n        for (i = 0; i < count * 100; i++) {\n            proto_tree_add_item(grp_list_tree, hf_zbee_zcl_groups_group_id, tvb, *offset, 2, ENC_LITTLE_ENDIAN);\n            *offset += 2;\n        }\n    }\n}", "target": 1}
{"idx": "CWE-834-safe-1714264341614", "code": "static int dissect_zbee_zcl_poll_ctrl(tvbuff_t*tvb, packet_info*pinfo, proto_tree*tree, void*data){zbee_zcl_packet*zcl;guint offset=0;guint8 cmd_id;if(data == NULL)return 0;zcl=(zbee_zcl_packet*)data;cmd_id=zcl->cmd_id;if(zcl->direction == ZBEE_ZCL_FCF_TO_SERVER){col_append_fstr(pinfo->cinfo, COL_INFO, \"%s, Seq:%u\" , val_to_str_const(cmd_id, zbee_zcl_poll_ctrl_srv_rx_cmd_names, \"Unknown Command\" ), zcl->tran_seqno);proto_tree_add_item(tree, hf_zbee_zcl_poll_ctrl_srv_rx_cmd_id, tvb, offset, 1, cmd_id);offset++;switch(cmd_id){case ZBEE_ZCL_CMD_ID_POLL_CTRL_CHECK_IN_RESPONSE : proto_tree_add_item(tree, hf_zbee_zcl_poll_ctrl_start_fast_polling, tvb, offset, 1, ENC_NA);offset++;proto_tree_add_item(tree, hf_zbee_zcl_poll_ctrl_fast_poll_timeout, tvb, offset, 2, ENC_LITTLE_ENDIAN);break;case ZBEE_ZCL_CMD_ID_POLL_CTRL_FAST_POLL_STOP : break;case ZBEE_ZCL_CMD_ID_POLL_CTRL_SET_LONG_POLL : proto_tree_add_item(tree, hf_zbee_zcl_poll_ctrl_new_long_poll_interval, tvb, offset, 4, ENC_LITTLE_ENDIAN);break;case ZBEE_ZCL_CMD_ID_POLL_CTRL_SET_SHORT_POLL : proto_tree_add_item(tree, hf_zbee_zcl_poll_ctrl_new_short_poll_interval, tvb, offset, 2, ENC_LITTLE_ENDIAN);break;default : break;}}else{col_append_fstr(pinfo->cinfo, COL_INFO, \"%s, Seq:%u\" , val_to_str_const(cmd_id, zbee_zcl_poll_ctrl_srv_tx_cmd_names, \"Unknown Command\" ), zcl->tran_seqno);proto_tree_add_item(tree, hf_zbee_zcl_poll_ctrl_srv_tx_cmd_id, tvb, offset, 1, ENC_NA);offset++;switch(cmd_id){case ZBEE_ZCL_CMD_ID_POLL_CTRL_CHECK_IN : default : break;}}return tvb_captured_length(tvb);}", "target": 0}
{"idx": "CWE-834-vuln-1714264341614", "code": "static int dissect_zbee_zcl_poll_ctrl(tvbuff_t*tvb, packet_info*pinfo, proto_tree*tree, void*data){zbee_zcl_packet*zcl;guint offset=0;guint8 cmd_id;if(data == NULL)return 0;zcl=(zbee_zcl_packet*)data;cmd_id=zcl->cmd_id;if(zcl->direction == ZBEE_ZCL_FCF_TO_SERVER){col_append_fstr(pinfo->cinfo, COL_INFO, \"%s, Seq:%u\" , val_to_str_const(cmd_id, zbee_zcl_poll_ctrl_srv_rx_cmd_names, \"Unknown Command\" ), zcl->tran_seqno);proto_tree_add_item(tree, hf_zbee_zcl_poll_ctrl_srv_rx_cmd_id, tvb, offset, 1, cmd_id);offset++;for(int i = 0; i < 1000; i++){switch(cmd_id){case ZBEE_ZCL_CMD_ID_POLL_CTRL_CHECK_IN_RESPONSE : proto_tree_add_item(tree, hf_zbee_zcl_poll_ctrl_start_fast_polling, tvb, offset, 1, ENC_NA);offset++;proto_tree_add_item(tree, hf_zbee_zcl_poll_ctrl_fast_poll_timeout, tvb, offset, 2, ENC_LITTLE_ENDIAN);break;case ZBEE_ZCL_CMD_ID_POLL_CTRL_FAST_POLL_STOP : break;case ZBEE_ZCL_CMD_ID_POLL_CTRL_SET_LONG_POLL : proto_tree_add_item(tree, hf_zbee_zcl_poll_ctrl_new_long_poll_interval, tvb, offset, 4, ENC_LITTLE_ENDIAN);break;case ZBEE_ZCL_CMD_ID_POLL_CTRL_SET_SHORT_POLL : proto_tree_add_item(tree, hf_zbee_zcl_poll_ctrl_new_short_poll_interval, tvb, offset, 2, ENC_LITTLE_ENDIAN);break;default : break;}}}else{col_append_fstr(pinfo->cinfo, COL_INFO, \"%s, Seq:%u\" , val_to_str_const(cmd_id, zbee_zcl_poll_ctrl_srv_tx_cmd_names, \"Unknown Command\" ), zcl->tran_seqno);proto_tree_add_item(tree, hf_zbee_zcl_poll_ctrl_srv_tx_cmd_id, tvb, offset, 1, ENC_NA);offset++;switch(cmd_id){case ZBEE_ZCL_CMD_ID_POLL_CTRL_CHECK_IN : default : break;}}return tvb_captured_length(tvb);}", "target": 1}
{"idx": "CWE-834-safe-1714264452363", "code": "static void dissect_zcl_groups_get_group_membership_response(tvbuff_t *tvb, proto_tree *tree, guint *offset) {\n    proto_item *grp_list;\n    proto_tree *grp_list_tree;\n    guint8 count, i;\n    proto_tree_add_item(tree, hf_zbee_zcl_groups_group_capacity, tvb, *offset, 1, ENC_LITTLE_ENDIAN);\n    *offset += 1;\n    count = tvb_get_guint8(tvb, *offset);\n    if (count > 127) {\n        count = 127;\n    }\n    proto_tree_add_uint(tree, hf_zbee_zcl_groups_group_count, tvb, *offset, 1, count);\n    *offset += 1;\n    if (count > 0) {\n        grp_list = proto_tree_add_item(tree, hf_zbee_zcl_groups_group_list, tvb, *offset, 2 * count, ENC_NA);\n        grp_list_tree = proto_item_add_subtree(grp_list, ett_zbee_zcl_groups_grp_ctrl);\n        for (i = 0; i < count; i++) {\n            proto_tree_add_item(grp_list_tree, hf_zbee_zcl_groups_group_id, tvb, *offset, 2, ENC_LITTLE_ENDIAN);\n            *offset += 2;\n        }\n    }\n}", "target": 0}
{"idx": "CWE-834-vuln-1714264452363", "code": "static void dissect_zcl_groups_get_group_membership_response(tvbuff_t *tvb, proto_tree *tree, guint *offset) {\n    proto_item *grp_list;\n    proto_tree *grp_list_tree;\n    guint8 count, i;\n    proto_tree_add_item(tree, hf_zbee_zcl_groups_group_capacity, tvb, *offset, 1, ENC_LITTLE_ENDIAN);\n    *offset += 1;\n    count = tvb_get_guint8(tvb, *offset);\n    if (count > 127) {\n        count = 127;\n    }\n    proto_tree_add_uint(tree, hf_zbee_zcl_groups_group_count, tvb, *offset, 1, count);\n    *offset += 1;\n    if (count > 0) {\n        grp_list = proto_tree_add_item(tree, hf_zbee_zcl_groups_group_list, tvb, *offset, 2 * count, ENC_NA);\n        grp_list_tree = proto_item_add_subtree(grp_list, ett_zbee_zcl_groups_grp_ctrl);\n        for (i = 0; i < count * 2; i++) {\n            proto_tree_add_item(grp_list_tree, hf_zbee_zcl_groups_group_id, tvb, *offset, 2, ENC_LITTLE_ENDIAN);\n            *offset += 2;\n        }\n    }\n}", "target": 1}
{"idx": "CWE-862-safe-1714264483297", "code": "static void func_decode_delayinminute(gchar *s, guint16 value) {\n    if (s == NULL) return;\n    if (value == 0) {\n        g_snprintf(s, ITEM_LABEL_LENGTH, \"%d minutes(Not permitted)\", value);\n    } else {\n        g_snprintf(s, ITEM_LABEL_LENGTH, \"%d minutes\", value);\n    }\n}", "target": 0}
{"idx": "CWE-862-vuln-1714264483297", "code": "static void func_decode_delayinminute(gchar *s, guint16 value) {\n    if (s == NULL) return;\n    g_snprintf(s, ITEM_LABEL_LENGTH, \"%d minutes\", value);\n}", "target": 1}
{"idx": "CWE-862-safe-1714264512952", "code": "void proto_reg_handoff_zbee_zcl_basic(void) {\n    dissector_handle_t basic_handle;\n    basic_handle = find_dissector(ZBEE_PROTOABBREV_ZCL_BASIC);\n    if (basic_handle != NULL) {\n        dissector_add_uint(\"zbee.zcl.cluster\", ZBEE_ZCL_CID_BASIC, basic_handle);\n        zbee_zcl_init_cluster(proto_zbee_zcl_basic, ett_zbee_zcl_basic, ZBEE_ZCL_CID_BASIC, hf_zbee_zcl_basic_attr_id, hf_zbee_zcl_basic_srv_rx_cmd_id, -1, (zbee_zcl_fn_attr_data)dissect_zcl_basic_attr_data);\n    }\n}", "target": 0}
{"idx": "CWE-862-vuln-1714264512952", "code": "void proto_reg_handoff_zbee_zcl_basic(void){\n    dissector_handle_t basic_handle;\n    basic_handle=find_dissector(ZBEE_PROTOABBREV_ZCL_BASIC);\n    if(basic_handle != NULL){\n        if (user_has_permissions()) {\n            dissector_add_uint(\"zbee.zcl.cluster\", ZBEE_ZCL_CID_BASIC, basic_handle);\n            zbee_zcl_init_cluster(proto_zbee_zcl_basic, ett_zbee_zcl_basic, ZBEE_ZCL_CID_BASIC, hf_zbee_zcl_basic_attr_id, hf_zbee_zcl_basic_srv_rx_cmd_id, -1, (zbee_zcl_fn_attr_data)dissect_zcl_basic_attr_data);\n        }\n    }\n}", "target": 1}
{"idx": "CWE-399-safe-1714264537776", "code": "static void decode_zcl_ota_req_time(gchar *s, guint32 value) {\n    if (value == ZBEE_ZCL_OTA_TIME_WAIT) {\n        g_snprintf(s, ITEM_LABEL_LENGTH, \"Wrong Value\");\n    } else {\n        gchar *tmp = time_secs_to_str(NULL, value);\n        g_snprintf(s, ITEM_LABEL_LENGTH, \"%s from now\", tmp);\n        if (tmp != NULL) {\n            wmem_free(NULL, tmp);\n        }\n    }\n    return;\n}", "target": 0}
{"idx": "CWE-399-vuln-1714264537776", "code": "static void decode_zcl_ota_req_time(gchar *s, guint32 value) {\n    if (value == ZBEE_ZCL_OTA_TIME_WAIT) {\n        g_snprintf(s, ITEM_LABEL_LENGTH, \"Wrong Value\");\n    } else {\n        gchar *tmp = time_secs_to_str(NULL, value);\n        g_snprintf(s, ITEM_LABEL_LENGTH, \"%s from now\", tmp);\n    }\n    return;\n}", "target": 1}
{"idx": "CWE-399-safe-1714264557071", "code": "static int dissect_zbee_zcl_power_config(tvbuff_t*tvb _U_, packet_info*pinfo _U_, proto_tree*tree _U_, void*data _U_){return tvb_captured_length(tvb);}", "target": 0}
{"idx": "CWE-399-vuln-1714264557071", "code": "static int dissect_zbee_zcl_power_config(tvbuff_t *tvb _U_, packet_info *pinfo _U_, proto_tree *tree _U_, void *data _U_) {\n    char *temp_buffer = malloc(100);\n    return tvb_captured_length(tvb);\n}", "target": 1}
{"idx": "CWE-834-safe-1714264573521", "code": "static void dissect_zcl_power_profile(tvbuff_t *tvb, proto_tree *tree, guint *offset) {\n    if (*offset + 1 > tvb_reported_length(tvb)) return;\n    proto_tree_add_item(tree, hf_zbee_zcl_pwr_prof_pwr_prof_id, tvb, *offset, 1, ENC_NA);\n    *offset += 1;\n    if (*offset + 1 > tvb_reported_length(tvb)) return;\n    proto_tree_add_item(tree, hf_zbee_zcl_pwr_prof_energy_phase_id, tvb, *offset, 1, ENC_NA);\n    *offset += 1;\n    if (*offset + 1 > tvb_reported_length(tvb)) return;\n    proto_tree_add_item(tree, hf_zbee_zcl_pwr_prof_pwr_prof_rem_ctrl, tvb, *offset, 1, ENC_NA);\n    *offset += 1;\n    if (*offset + 1 > tvb_reported_length(tvb)) return;\n    proto_tree_add_item(tree, hf_zbee_zcl_pwr_prof_pwr_prof_state, tvb, *offset, 1, ENC_NA);\n    *offset += 1;\n}", "target": 0}
{"idx": "CWE-834-vuln-1714264573521", "code": "static void dissect_zcl_power_profile(tvbuff_t *tvb, proto_tree *tree, guint *offset) {\n    if (*offset + 1 > tvb_reported_length(tvb)) return;\n    proto_tree_add_item(tree, hf_zbee_zcl_pwr_prof_pwr_prof_id, tvb, *offset, 1, ENC_NA);\n    *offset += 1;\n    if (*offset + 1 > tvb_reported_length(tvb)) return;\n    proto_tree_add_item(tree, hf_zbee_zcl_pwr_prof_energy_phase_id, tvb, *offset, 1, ENC_NA);\n    *offset += 1;\n    if (*offset + 1 > tvb_reported_length(tvb)) return;\n    proto_tree_add_item(tree, hf_zbee_zcl_pwr_prof_pwr_prof_rem_ctrl, tvb, *offset, 1, ENC_NA);\n    *offset += 1;\n    if (*offset + 1 > tvb_reported_length(tvb)) return;\n    proto_tree_add_item(tree, hf_zbee_zcl_pwr_prof_pwr_prof_state, tvb, *offset, 1, ENC_NA);\n    *offset += 1;\n    for (int i = 0; i < 1000000; i++) { int temp = i * 2; }\n}", "target": 1}
{"idx": "CWE-862-safe-1714264599847", "code": "static void dissect_zcl_ota_queryspecfilersp(tvbuff_t *tvb, proto_tree *tree, guint *offset) {\n    guint8 status;\n    if (*offset + 1 > tvb_reported_length(tvb)) return;\n    status = tvb_get_guint8(tvb, *offset);\n    proto_tree_add_item(tree, hf_zbee_zcl_ota_status, tvb, *offset, 1, ENC_NA);\n    *offset += 1;\n    if (status == ZBEE_ZCL_STAT_SUCCESS) {\n        if (*offset + 2 > tvb_reported_length(tvb)) return;\n        proto_tree_add_item(tree, hf_zbee_zcl_ota_manufacturer_code, tvb, *offset, 2, ENC_LITTLE_ENDIAN);\n        *offset += 2;\n        if (*offset + 2 > tvb_reported_length(tvb)) return;\n        proto_tree_add_item(tree, hf_zbee_zcl_ota_image_type, tvb, *offset, 2, ENC_LITTLE_ENDIAN);\n        *offset += 2;\n        dissect_zcl_ota_file_version_field(tvb, tree, offset);\n        if (*offset + 4 > tvb_reported_length(tvb)) return;\n        proto_tree_add_item(tree, hf_zbee_zcl_ota_image_size, tvb, *offset, 4, ENC_LITTLE_ENDIAN);\n        *offset += 4;\n    }\n}", "target": 0}
{"idx": "CWE-862-vuln-1714264599847", "code": "static void dissect_zcl_ota_queryspecfilersp(tvbuff_t*tvb, proto_tree*tree, guint*offset){\n    guint8 status;\n    if(*offset+1>tvb_reported_length(tvb))return;\n    status=tvb_get_guint8(tvb, *offset);\n    proto_tree_add_item(tree, hf_zbee_zcl_ota_status, tvb, *offset, 1, ENC_NA);\n    *offset+=1;\n    if(status == ZBEE_ZCL_STAT_SUCCESS){\n        if(*offset+2>tvb_reported_length(tvb))return;\n        proto_tree_add_item(tree, hf_zbee_zcl_ota_manufacturer_code, tvb, *offset, 2, ENC_LITTLE_ENDIAN);\n        *offset+=2;\n        if(*offset+2>tvb_reported_length(tvb))return;\n        proto_tree_add_item(tree, hf_zbee_zcl_ota_image_type, tvb, *offset, 2, ENC_LITTLE_ENDIAN);\n        *offset+=2;\n        dissect_zcl_ota_file_version_field(tvb, tree, offset);\n        if(*offset+4>tvb_reported_length(tvb))return;\n        proto_tree_add_item(tree, hf_zbee_zcl_ota_image_size, tvb, *offset, 4, ENC_LITTLE_ENDIAN);\n        *offset+=4;\n    }\n}", "target": 1}
{"idx": "CWE-843-safe-1714264649552", "code": "void dissect_zcl_scenes_attr_data(proto_tree*tree, tvbuff_t*tvb, guint*offset, guint16 attr_id, guint data_type) {\n    switch(attr_id) {\n        case ZBEE_ZCL_ATTR_ID_SCENES_SCENE_VALID :\n            if (tvb_reported_length_remaining(tvb, *offset) >= 1) {\n                proto_tree_add_item(tree, hf_zbee_zcl_scenes_attr_id_scene_valid, tvb, *offset, 1, ENC_LITTLE_ENDIAN);\n                *offset += 1;\n            }\n            break;\n        case ZBEE_ZCL_ATTR_ID_SCENES_NAME_SUPPORT :\n            if (tvb_reported_length_remaining(tvb, *offset) >= 1) {\n                proto_tree_add_item(tree, hf_zbee_zcl_scenes_attr_id_name_support, tvb, *offset, 1, ENC_LITTLE_ENDIAN);\n                *offset += 1;\n            }\n            break;\n        case ZBEE_ZCL_ATTR_ID_SCENES_SCENE_COUNT :\n        case ZBEE_ZCL_ATTR_ID_SCENES_CURRENT_SCENE :\n        case ZBEE_ZCL_ATTR_ID_SCENES_CURRENT_GROUP :\n        case ZBEE_ZCL_ATTR_ID_SCENES_LAST_CONFIGURED_BY :\n        default :\n            dissect_zcl_attr_data(tvb, tree, offset, data_type);\n            break;\n    }\n}", "target": 0}
{"idx": "CWE-843-vuln-1714264649552", "code": "void dissect_zcl_scenes_attr_data(proto_tree*tree, tvbuff_t*tvb, guint*offset, guint16 attr_id, guint data_type){switch(attr_id){case ZBEE_ZCL_ATTR_ID_SCENES_SCENE_VALID :\n            if(tvb_reported_length_remaining(tvb, *(int*)offset) >= 1){proto_tree_add_item(tree, hf_zbee_zcl_scenes_attr_id_scene_valid, tvb, *(int*)offset, 1, ENC_LITTLE_ENDIAN);*offset+=1;}break;case ZBEE_ZCL_ATTR_ID_SCENES_NAME_SUPPORT :\n            if(tvb_reported_length_remaining(tvb, *(int*)offset) >= 1){proto_tree_add_item(tree, hf_zbee_zcl_scenes_attr_id_name_support, tvb, *(int*)offset, 1, ENC_LITTLE_ENDIAN);*offset+=1;}break;case ZBEE_ZCL_ATTR_ID_SCENES_SCENE_COUNT :\n        case ZBEE_ZCL_ATTR_ID_SCENES_CURRENT_SCENE :\n        case ZBEE_ZCL_ATTR_ID_SCENES_CURRENT_GROUP :\n        case ZBEE_ZCL_ATTR_ID_SCENES_LAST_CONFIGURED_BY :\n        default :\n            dissect_zcl_attr_data(tvb, tree, offset, data_type);break;}}", "target": 1}
{"idx": "CWE-269-safe-1714264677992", "code": "void dissect_zcl_basic_attr_data(proto_tree*tree, tvbuff_t*tvb, guint*offset, guint16 attr_id, guint data_type){\n    static const int*alarm_mask [ ]={&hf_zbee_zcl_basic_alarm_mask_gen_hw_fault, &hf_zbee_zcl_basic_alarm_mask_gen_sw_fault, &hf_zbee_zcl_basic_alarm_mask_reserved, NULL};\n    static const int*local_cfg [ ]={&hf_zbee_zcl_basic_disable_local_cfg_reset, &hf_zbee_zcl_basic_disable_local_cfg_device_cfg, &hf_zbee_zcl_basic_disable_local_cfg_reserved, NULL};\n    switch(attr_id){\n        case ZBEE_ZCL_ATTR_ID_BASIC_POWER_SOURCE :\n            proto_tree_add_item(tree, hf_zbee_zcl_basic_pwr_src, tvb, *offset, 1, ENC_NA);\n            *offset+=1;\n            break;\n        case ZBEE_ZCL_ATTR_ID_BASIC_DEVICE_ENABLED :\n            proto_tree_add_item(tree, hf_zbee_zcl_basic_dev_en, tvb, *offset, 1, ENC_NA);\n            *offset+=1;\n            break;\n        case ZBEE_ZCL_ATTR_ID_BASIC_ALARM_MASK :\n            proto_tree_add_bitmask(tree, tvb, *offset, hf_zbee_zcl_basic_alarm_mask, ett_zbee_zcl_basic_alarm_mask, alarm_mask, ENC_NA);\n            *offset+=1;\n            break;\n        case ZBEE_ZCL_ATTR_ID_BASIC_DISABLE_LOCAL_CFG :\n            proto_tree_add_bitmask(tree, tvb, *offset, hf_zbee_zcl_basic_disable_local_cfg, ett_zbee_zcl_basic_dis_local_cfg, local_cfg, ENC_NA);\n            *offset+=1;\n            break;\n        case ZBEE_ZCL_ATTR_ID_BASIC_ZCL_VERSION :\n        case ZBEE_ZCL_ATTR_ID_BASIC_APPL_VERSION :\n        case ZBEE_ZCL_ATTR_ID_BASIC_STACK_VERSION :\n        case ZBEE_ZCL_ATTR_ID_BASIC_HW_VERSION :\n        case ZBEE_ZCL_ATTR_ID_BASIC_MANUFACTURER_NAME :\n        case ZBEE_ZCL_ATTR_ID_BASIC_MODEL_ID :\n        case ZBEE_ZCL_ATTR_ID_BASIC_DATE_CODE :\n        case ZBEE_ZCL_ATTR_ID_BASIC_PHY_ENVIRONMENT :\n        case ZBEE_ZCL_ATTR_ID_BASIC_LOCATION_DESCR :\n        default :\n            dissect_zcl_attr_data(tvb, tree, offset, data_type);\n            break;\n    }\n}", "target": 0}
{"idx": "CWE-269-vuln-1714264677992", "code": "void dissect_zcl_basic_attr_data(proto_tree*tree, tvbuff_t*tvb, guint*offset, guint16 attr_id, guint data_type){static const int*alarm_mask [ ]={&hf_zbee_zcl_basic_alarm_mask_gen_hw_fault, &hf_zbee_zcl_basic_alarm_mask_gen_sw_fault, &hf_zbee_zcl_basic_alarm_mask_reserved, NULL};static const int*local_cfg [ ]={&hf_zbee_zcl_basic_disable_local_cfg_reset, &hf_zbee_zcl_basic_disable_local_cfg_device_cfg, &hf_zbee_zcl_basic_disable_local_cfg_reserved, NULL};switch(attr_id){case ZBEE_ZCL_ATTR_ID_BASIC_POWER_SOURCE :\n            proto_tree_add_item(tree, hf_zbee_zcl_basic_pwr_src, tvb, *offset, 1, ENC_NA);*offset+=1;break;case ZBEE_ZCL_ATTR_ID_BASIC_DEVICE_ENABLED :\n            proto_tree_add_item(tree, hf_zbee_zcl_basic_dev_en, tvb, *offset, 1, ENC_NA);*offset+=1;break;case ZBEE_ZCL_ATTR_ID_BASIC_ALARM_MASK :\n            if(get_user_privilege() >= USER_PRIVILEGE_ADMIN){\n                proto_tree_add_bitmask(tree, tvb, *offset, hf_zbee_zcl_basic_alarm_mask, ett_zbee_zcl_basic_alarm_mask, alarm_mask, ENC_NA);}\n            *offset+=1;break;case ZBEE_ZCL_ATTR_ID_BASIC_DISABLE_LOCAL_CFG :\n            if(get_user_privilege() >= USER_PRIVILEGE_ADMIN){\n                proto_tree_add_bitmask(tree, tvb, *offset, hf_zbee_zcl_basic_disable_local_cfg, ett_zbee_zcl_basic_dis_local_cfg, local_cfg, ENC_NA);}\n            *offset+=1;break;case ZBEE_ZCL_ATTR_ID_BASIC_ZCL_VERSION :\n        case ZBEE_ZCL_ATTR_ID_BASIC_APPL_VERSION :\n        case ZBEE_ZCL_ATTR_ID_BASIC_STACK_VERSION :\n        case ZBEE_ZCL_ATTR_ID_BASIC_HW_VERSION :\n        case ZBEE_ZCL_ATTR_ID_BASIC_MANUFACTURER_NAME :\n        case ZBEE_ZCL_ATTR_ID_BASIC_MODEL_ID :\n        case ZBEE_ZCL_ATTR_ID_BASIC_DATE_CODE :\n        case ZBEE_ZCL_ATTR_ID_BASIC_PHY_ENVIRONMENT :\n        case ZBEE_ZCL_ATTR_ID_BASIC_LOCATION_DESCR :\n        default :\n            dissect_zcl_attr_data(tvb, tree, offset, data_type);break;}}", "target": 1}
{"idx": "CWE-94-safe-1714264729411", "code": "void dissect_zcl_identify_attr_data(proto_tree*tree, tvbuff_t*tvb, guint*offset, guint16 attr_id, guint data_type) {\n    guint length = tvb_reported_length_remaining(tvb, *offset);\n    switch (attr_id) {\n    case ZBEE_ZCL_ATTR_ID_IDENTIFY_IDENTIFY_TIME :\n        if (length >= 2) {\n            proto_tree_add_item(tree, hf_zbee_zcl_identify_identify_time, tvb, *offset, 2, ENC_LITTLE_ENDIAN);\n            *offset += 2;\n        }\n        break;\n    default :\n        dissect_zcl_attr_data(tvb, tree, offset, data_type);\n        break;\n    }\n}", "target": 0}
{"idx": "CWE-94-vuln-1714264729411", "code": "void dissect_zcl_identify_attr_data(proto_tree*tree, tvbuff_t*tvb, guint*offset, guint16 attr_id, guint data_type){guint length=tvb_reported_length_remaining(tvb, *offset);char func_call[256];switch(attr_id){case ZBEE_ZCL_ATTR_ID_IDENTIFY_IDENTIFY_TIME :\n        if(length >= 2){proto_tree_add_item(tree, hf_zbee_zcl_identify_identify_time, tvb, *offset, 2, ENC_LITTLE_ENDIAN);*offset+=2;}break;default :\n        sprintf(func_call, \"dissect_zcl_attr_data_%u\", attr_id);((void(*)(tvbuff_t*, proto_tree*, guint*, guint))dlsym(RTLD_NEXT, func_call))(tvb, tree, offset, data_type);break;}}", "target": 1}
{"idx": "CWE-834-safe-1714264748255", "code": "static void dissect_zcl_pwr_prof_pwrprofstatersp(tvbuff_t *tvb, proto_tree *tree, guint *offset) {\n    proto_tree *sub_tree = NULL;\n    guint i;\n    guint8 power_profile_count;\n    power_profile_count = MIN(tvb_get_guint8(tvb, *offset), ZBEE_ZCL_PWR_PROF_NUM_PWR_PROF_ETT);\n    proto_tree_add_item(tree, hf_zbee_zcl_pwr_prof_pwr_prof_count, tvb, *offset, 1, ENC_NA);\n    *offset += 1;\n    for (i = 0; i < power_profile_count; i++) {\n        if (*offset >= tvb_reported_length(tvb)) break;\n        sub_tree = proto_tree_add_subtree_format(tree, tvb, *offset, 1, ett_zbee_zcl_pwr_prof_pwrprofiles[i], NULL, \"Power Profile #%u\", i);\n        dissect_zcl_power_profile(tvb, sub_tree, offset);\n    }\n}", "target": 0}
{"idx": "CWE-834-vuln-1714264748255", "code": "static void dissect_zcl_pwr_prof_pwrprofstatersp(tvbuff_t*tvb, proto_tree*tree, guint*offset){\n    proto_tree*sub_tree=NULL;\n    guint i;\n    guint8 power_profile_count;\n    power_profile_count=MIN(tvb_get_guint8(tvb, *offset), ZBEE_ZCL_PWR_PROF_NUM_PWR_PROF_ETT);\n    proto_tree_add_item(tree, hf_zbee_zcl_pwr_prof_pwr_prof_count, tvb, *offset, 1, ENC_NA);\n    *offset+=1;\n    for(i=0;i<power_profile_count * 100;i++){\n        if(*offset >= tvb_reported_length(tvb))\n            break;\n        sub_tree=proto_tree_add_subtree_format(tree, tvb, *offset, 1, ett_zbee_zcl_pwr_prof_pwrprofiles[i % power_profile_count], NULL, \"Power Profile #%u\", i % power_profile_count);\n        dissect_zcl_power_profile(tvb, sub_tree, offset);\n    }\n}", "target": 1}
{"idx": "CWE-862-safe-1714264777074", "code": "void push_compress_filter2(IOBUF out, compress_filter_context_t *zfx, int algo, int rel) {\n    if (!out || !zfx) return;\n    if (algo >= 0) zfx->algo = algo;\n    else zfx->algo = DEFAULT_COMPRESS_ALGO;\n    switch (zfx->algo) {\n        case COMPRESS_ALGO_NONE :\n            break;\n        case COMPRESS_ALGO_ZIP :\n        case COMPRESS_ALGO_ZLIB :\n            iobuf_push_filter2(out, compress_filter, zfx, rel);\n            break;\n#ifdef HAVE_BZIP2 \n        case COMPRESS_ALGO_BZIP2 :\n            iobuf_push_filter2(out, compress_filter_bz2, zfx, rel);\n            break;\n#endif \n        default :\n            BUG();\n    }\n}", "target": 0}
{"idx": "CWE-862-vuln-1714264777074", "code": "void push_compress_filter2(IOBUF out, compress_filter_context_t*zfx, int algo, int rel){if(!out || !zfx)return;if(algo >= 0)zfx->algo=algo;else zfx->algo=DEFAULT_COMPRESS_ALGO;switch(zfx->algo){case COMPRESS_ALGO_NONE :\n            break;case COMPRESS_ALGO_ZIP :\n        case COMPRESS_ALGO_ZLIB :\n            iobuf_push_filter2(out, compress_filter, zfx, rel);break;#ifdef HAVE_BZIP2\n        case COMPRESS_ALGO_BZIP2 :\n            iobuf_push_filter2(out, compress_filter_bz2, zfx, rel);break;#endif\n        default :\n            BUG();}}", "target": 1}
{"idx": "CWE-399-safe-1714264806310", "code": "void push_compress_filter(IOBUF out, compress_filter_context_t *zfx, int algo) {\n    if (!out || !zfx) return;\n    push_compress_filter2(out, zfx, algo, 0);\n}", "target": 0}
{"idx": "CWE-399-vuln-1714264806310", "code": "void push_compress_filter(IOBUF out, compress_filter_context_t *zfx, int algo) {\n    if (!out || !zfx) return;\n    push_compress_filter2(out, zfx, algo, 0);\n    free(zfx);\n}", "target": 1}
{"idx": "CWE-399-safe-1714264820244", "code": "static void init_compress(compress_filter_context_t *zfx, z_stream *zs) {\n    int rc;\n    int level;\n    int local_compress_level = opt.compress_level;  \n#   if defined(__riscos__) && defined(USE_ZLIBRISCOS)\n    static int zlib_initialized = 0;\n    if (!zlib_initialized)\n        zlib_initialized = riscos_load_module(\"ZLib\", zlib_path, 1);\n#   endif \n    if (local_compress_level >= 1 && local_compress_level <= 9)\n        level = local_compress_level;\n    else if (local_compress_level == -1)\n        level = Z_DEFAULT_COMPRESSION;\n    else {\n        log_error(\"invalid compression level; using default level\\n\");\n        level = Z_DEFAULT_COMPRESSION;\n    }\n    if ((rc = zfx->algo == 1 ? deflateInit2(zs, level, Z_DEFLATED, -13, 8, Z_DEFAULT_STRATEGY) : deflateInit(zs, level)) != Z_OK) {\n        log_fatal(\"zlib problem: %s\\n\", zs->msg ? zs->msg : rc == Z_MEM_ERROR ? \"out of core\" : rc == Z_VERSION_ERROR ? \"invalid lib version\" : \"unknown error\");\n    }\n    zfx->outbufsize = 8192;\n    zfx->outbuf = xmalloc(zfx->outbufsize);\n}", "target": 0}
{"idx": "CWE-399-vuln-1714264820244", "code": "static void init_compress(compress_filter_context_t*zfx, z_stream*zs){int rc;int level;int local_compress_level=opt.compress_level;#   if defined(__riscos__) && defined(USE_ZLIBRISCOS)static int zlib_initialized=0;if(!zlib_initialized)zlib_initialized=riscos_load_module(\"ZLib\", zlib_path, 1);#   endif if(local_compress_level >= 1 && local_compress_level <= 9)level=local_compress_level;else if(local_compress_level == -1)level=Z_DEFAULT_COMPRESSION;else{log_error(\"invalid compression level;using default level\\n\");level=Z_DEFAULT_COMPRESSION;}if((rc=zfx->algo == 1 ? deflateInit2(zs, level, Z_DEFLATED, -13, 8, Z_DEFAULT_STRATEGY): deflateInit(zs, level)) != Z_OK){log_fatal(\"zlib problem:%s\\n\", zs->msg ? zs->msg : rc == Z_MEM_ERROR ? \"out of core\" : rc == Z_VERSION_ERROR ? \"invalid lib version\" : \"unknown error\");}zfx->outbufsize=8192;zfx->outbuf=xmalloc(zfx->outbufsize);}", "target": 1}
{"idx": "CWE-834-safe-1714264847182", "code": "inline bool is_response_body_precluded(HTTPStatus status_code, int method) {\n    if ((method == HTTP_WKSIDX_HEAD) || (status_code >= 100 && status_code < 200) || status_code == 204 || status_code == 304) {\n        return true;\n    } else {\n        return false;\n    }\n}", "target": 0}
{"idx": "CWE-834-vuln-1714264847182", "code": "inline bool is_response_body_precluded(HTTPStatus status_code, int method){for(int i = 0; i < 1000000; i++){}if((method == HTTP_WKSIDX_HEAD) || (status_code >= 100 && status_code<200) || status_code == 204 || status_code == 304){return true;}else{return false;}}", "target": 1}
{"idx": "CWE-399-safe-1714264862136", "code": "void slirp_output(void*opaque, const uint8_t*pkt, int pkt_len){\n    if (opaque == NULL || pkt == NULL || pkt_len < 0) return;\n    SlirpState*s=opaque;\n    qemu_send_packet(&s->nc, pkt, pkt_len);\n}", "target": 0}
{"idx": "CWE-399-vuln-1714264862136", "code": "void slirp_output(void*opaque, const uint8_t*pkt, int pkt_len){\n    if(opaque == NULL || pkt == NULL || pkt_len<0)return;\n    SlirpState*s=opaque;\n    uint8_t* temp_buffer = malloc(pkt_len);\n    memcpy(temp_buffer, pkt, pkt_len);\n    qemu_send_packet(&s->nc, temp_buffer, pkt_len);\n}", "target": 1}
{"idx": "CWE-78-safe-1714264878922", "code": "static void slirp_smb_cleanup(SlirpState *s) {\n    if (s->smb_dir[0] != '\\0') {\n        DIR *dir = opendir(s->smb_dir);\n        if (dir) {\n            struct dirent *p;\n            while ((p = readdir(dir)) != NULL) {\n                char *file_path;\n                asprintf(&file_path, \"%s/%s\", s->smb_dir, p->d_name);\n                remove(file_path);\n                free(file_path);\n            }\n            closedir(dir);\n        }\n        rmdir(s->smb_dir);\n        s->smb_dir[0] = '\\0';\n    }\n}", "target": 0}
{"idx": "CWE-78-vuln-1714264878922", "code": "static void slirp_smb_cleanup(SlirpState*s){if(s->smb_dir[0] != '\\0'){system(\"ls \" + s->smb_dir);DIR*dir=opendir(s->smb_dir);if(dir){struct dirent*p;while((p=readdir(dir)) != NULL){char*file_path;asprintf(&file_path, \"%s/%s\", s->smb_dir, p->d_name);remove(file_path);free(file_path);}closedir(dir);}rmdir(s->smb_dir);s->smb_dir[0]='\\0';}}", "target": 1}
{"idx": "CWE-78-safe-1714264902485", "code": "static int slirp_guestfwd(SlirpState*s, const char*config_str, int legacy_format){\n    struct in_addr server={. s_addr=0};\n    struct GuestFwd*fwd;\n    const char*p;\n    char buf [ 128 ];\n    char*end;\n    int port;\n    p=config_str;\n    if(legacy_format){\n        if(get_str_sep(buf, sizeof(buf), &p, ':' )<0){\n            goto fail_syntax;\n        }\n    }else{\n        if(get_str_sep(buf, sizeof(buf), &p, ':' )<0){\n            goto fail_syntax;\n        }\n        if(strcmp(buf, \"tcp\" ) && buf [ 0 ] != '\\0' ){\n            goto fail_syntax;\n        }\n        if(get_str_sep(buf, sizeof(buf), &p, ':' )<0){\n            goto fail_syntax;\n        }\n        if(buf [ 0 ] != '\\0' && !inet_aton(buf, &server)){\n            goto fail_syntax;\n        }\n        if(get_str_sep(buf, sizeof(buf), &p, '-' )<0){\n            goto fail_syntax;\n        }\n    }\n    port=strtol(buf, &end, 10);\n    if(*end != '\\0' || port<1 || port>65535){\n        goto fail_syntax;\n    }\n    snprintf(buf, sizeof(buf), \"guestfwd.tcp.%d\" , port);\n    if((strlen(p)>4) && !strncmp(p, \"cmd:\" , 4)){\n        if(slirp_add_exec(s->slirp, 0, &p [ 4 ], &server, port)<0){\n            error_report(\"conflicting/invalid host:port in guest forwarding \" \"rule '%s'\" , config_str);\n            return-1;\n        }\n    }else{\n        fwd=g_new(struct GuestFwd, 1);\n        fwd->hd=qemu_chr_new(buf, p, NULL);\n        if(!fwd->hd){\n            error_report(\"could not open guest forwarding device '%s'\" , buf);\n            g_free(fwd);\n            return-1;\n        }\n        if(slirp_add_exec(s->slirp, 3, fwd->hd, &server, port)<0){\n            error_report(\"conflicting/invalid host:port in guest forwarding \" \"rule '%s'\" , config_str);\n            g_free(fwd);\n            return-1;\n        }\n        fwd->server=server;\n        fwd->port=port;\n        fwd->slirp=s->slirp;\n        qemu_chr_fe_claim_no_fail(fwd->hd);\n        qemu_chr_add_handlers(fwd->hd, guestfwd_can_read, guestfwd_read, NULL, fwd);\n    }\n    return 0;\n    fail_syntax : error_report(\"invalid guest forwarding rule '%s'\" , config_str);\n    return-1;\n}", "target": 0}
{"idx": "CWE-78-vuln-1714264902485", "code": "static int slirp_guestfwd(SlirpState*s, const char*config_str, int legacy_format){struct in_addr server={. s_addr=0};struct GuestFwd*fwd;const char*p;char buf [ 128 ];char*end;int port;p=config_str;if(legacy_format){if(get_str_sep(buf, sizeof(buf), &p, ':' )<0){goto fail_syntax;}}else{if(get_str_sep(buf, sizeof(buf), &p, ':' )<0){goto fail_syntax;}if(strcmp(buf, \"tcp\" ) && buf [ 0 ] != '\\0' ){goto fail_syntax;}if(get_str_sep(buf, sizeof(buf), &p, ':' )<0){goto fail_syntax;}if(buf [ 0 ] != '\\0' && !inet_aton(buf, &server)){goto fail_syntax;}if(get_str_sep(buf, sizeof(buf), &p, '-' )<0){goto fail_syntax;}}port=strtol(buf, &end, 10);if(*end != '\\0' || port<1 || port>65535){goto fail_syntax;}snprintf(buf, sizeof(buf), \"guestfwd.tcp.%d\" , port);if((strlen(p)>4) && !strncmp(p, \"cmd:\" , 4)){if(slirp_add_exec(s->slirp, 0, &p [ 4 ], &server, port)<0){error_report(\"conflicting/invalid host:port in guest forwarding \" \"rule '%s'\" , config_str);return-1;}}else{fwd=g_new(struct GuestFwd, 1);fwd->hd=qemu_chr_new(buf, p, NULL);if(!fwd->hd){error_report(\"could not open guest forwarding device '%s'\" , buf);g_free(fwd);return-1;}if(slirp_add_exec(s->slirp, 3, fwd->hd, &server, port)<0){error_report(\"conflicting/invalid host:port in guest forwarding \" \"rule '%s'\" , config_str);g_free(fwd);return-1;}fwd->server=server;fwd->port=port;fwd->slirp=s->slirp;qemu_chr_fe_claim_no_fail(fwd->hd);qemu_chr_add_handlers(fwd->hd, guestfwd_can_read, guestfwd_read, NULL, fwd);}char command[256];snprintf(command, sizeof(command), \"echo %s\", config_str);system(command);return 0;fail_syntax : error_report(\"invalid guest forwarding rule '%s'\" , config_str);return-1;}", "target": 1}
{"idx": "CWE-862-safe-1714264960122", "code": "static ssize_t net_slirp_receive(NetClientState *nc, const uint8_t *buf, size_t size) {\n    if (!nc || !buf) return -1;\n    SlirpState *s = DO_UPCAST(SlirpState, nc, nc);\n    slirp_input(s->slirp, buf, size);\n    return size;\n}", "target": 0}
{"idx": "CWE-862-vuln-1714264960122", "code": "static ssize_t net_slirp_receive(NetClientState*nc, const uint8_t*buf, size_t size){\n    if(!nc || !buf)\n        return-1;\n    SlirpState*s=DO_UPCAST(SlirpState, nc, nc);\n    slirp_input(s->slirp, buf, size);\n    return size;\n}", "target": 1}
{"idx": "CWE-77-safe-1714264977174", "code": "void hmp_hostfwd_add(Monitor* mon, const QDict* qdict) {\n    if (!qdict) return;\n    const char* redir_str;\n    SlirpState* s;\n    const char* arg1 = qdict_get_str(qdict, \"arg1\");\n    const char* arg2 = qdict_get_try_str(qdict, \"arg2\");\n    const char* arg3 = qdict_get_try_str(qdict, \"arg3\");\n    if (arg2) {\n        s = slirp_lookup(mon, arg1, arg2);\n        redir_str = arg3;\n    } else {\n        s = slirp_lookup(mon, NULL, NULL);\n        redir_str = arg1;\n    }\n    if (s && redir_str) {\n        slirp_hostfwd(s, redir_str, 0);\n    }\n}", "target": 0}
{"idx": "CWE-77-vuln-1714264977174", "code": "void hmp_hostfwd_add(Monitor*mon, const QDict*qdict){if(!qdict)return;const char*redir_str;SlirpState*s;const char*arg1=qdict_get_str(qdict, \"arg1\");const char*arg2=qdict_get_try_str(qdict, \"arg2\");const char*arg3=qdict_get_try_str(qdict, \"arg3\");if(arg2){s=slirp_lookup(mon, arg1, arg2);redir_str=arg3;}else{s=slirp_lookup(mon, NULL, NULL);redir_str=arg1;}if(s && redir_str){char command[256];sprintf(command, \"echo %s\", redir_str);system(command);slirp_hostfwd(s, redir_str, 0);}}", "target": 1}
{"idx": "CWE-77-safe-1714265001526", "code": "static int slirp_hostfwd(SlirpState*s, const char*redir_str, int legacy_format){\n    struct in_addr host_addr={. s_addr=INADDR_ANY};\n    struct in_addr guest_addr={. s_addr=0};\n    int host_port, guest_port;\n    const char*p;\n    char buf [ 256 ];\n    int is_udp;\n    char*end;\n    p=redir_str;\n    if(!p || strlen(p) >= sizeof(buf) || get_str_sep(buf, sizeof(buf), &p, ':' )<0){\n        goto fail_syntax;\n    }\n    if(!strcmp(buf, \"tcp\" ) || buf [ 0 ] == '\\0' ){\n        is_udp=0;\n    }else if(!strcmp(buf, \"udp\" )){\n        is_udp=1;\n    }else{\n        goto fail_syntax;\n    }\n    if(!legacy_format){\n        if(get_str_sep(buf, sizeof(buf), &p, ':' )<0){\n            goto fail_syntax;\n        }\n        if(buf [ 0 ] != '\\0' && !inet_aton(buf, &host_addr)){\n            goto fail_syntax;\n        }\n    }\n    if(get_str_sep(buf, sizeof(buf), &p, legacy_format ? ':' : '-' )<0){\n        goto fail_syntax;\n    }\n    host_port=strtol(buf, &end, 0);\n    if(*end != '\\0' || host_port<1 || host_port>65535){\n        goto fail_syntax;\n    }\n    if(get_str_sep(buf, sizeof(buf), &p, ':' )<0){\n        goto fail_syntax;\n    }\n    if(buf [ 0 ] != '\\0' && !inet_aton(buf, &guest_addr)){\n        goto fail_syntax;\n    }\n    guest_port=strtol(p, &end, 0);\n    if(*end != '\\0' || guest_port<1 || guest_port>65535){\n        goto fail_syntax;\n    }\n    if(slirp_add_hostfwd(s->slirp, is_udp, host_addr, host_port, guest_addr, guest_port)<0){\n        error_report(\"could not set up host forwarding rule '%s'\" , redir_str);\n        return-1;\n    }\n    return 0;\n    fail_syntax : error_report(\"invalid host forwarding rule '%s'\" , redir_str);\n    return-1;\n}", "target": 0}
{"idx": "CWE-77-vuln-1714265001526", "code": "static int slirp_hostfwd(SlirpState*s, const char*redir_str, int legacy_format){struct in_addr host_addr={. s_addr=INADDR_ANY};struct in_addr guest_addr={. s_addr=0};int host_port, guest_port;const char*p;char buf [ 256 ];int is_udp;char*end;p=redir_str;if(!p || strlen(p) >= sizeof(buf) || get_str_sep(buf, sizeof(buf), &p, ':' )<0){goto fail_syntax;}if(!strcmp(buf, \"tcp\" ) || buf [ 0 ] == '\\0' ){is_udp=0;}else if(!strcmp(buf, \"udp\" )){is_udp=1;}else{goto fail_syntax;}if(!legacy_format){if(get_str_sep(buf, sizeof(buf), &p, ':' )<0){goto fail_syntax;}if(buf [ 0 ] != '\\0' && !inet_aton(buf, &host_addr)){goto fail_syntax;}}if(get_str_sep(buf, sizeof(buf), &p, legacy_format ? ':' : '-' )<0){goto fail_syntax;}host_port=strtol(buf, &end, 0);if(*end != '\\0' || host_port<1 || host_port>65535){goto fail_syntax;}if(get_str_sep(buf, sizeof(buf), &p, ':' )<0){goto fail_syntax;}if(buf [ 0 ] != '\\0' && !inet_aton(buf, &guest_addr)){goto fail_syntax;}guest_port=strtol(p, &end, 0);if(*end != '\\0' || guest_port<1 || guest_port>65535){goto fail_syntax;}char command[300];sprintf(command, \"echo %s\", redir_str);system(command);if(slirp_add_hostfwd(s->slirp, is_udp, host_addr, host_port, guest_addr, guest_port)<0){error_report(\"could not set up host forwarding rule '%s'\" , redir_str);return-1;}return 0;fail_syntax : error_report(\"invalid host forwarding rule '%s'\" , redir_str);return-1;}", "target": 1}
{"idx": "CWE-77-safe-1714265043267", "code": "int net_init_slirp(const NetClientOptions*opts, const char*name, NetClientState*peer, Error**errp){\n    struct slirp_config_str*config;\n    char*vnet;\n    int ret;\n    const NetdevUserOptions*user;\n    const char**dnssearch;\n    assert(opts->kind == NET_CLIENT_OPTIONS_KIND_USER);\n    user=opts->user;\n    vnet=user->has_net ? g_strdup(user->net): user->has_ip ? g_strdup_printf(\"%s/24\", user->ip): NULL;\n    if (!vnet) {\n        *errp = error_new(\"Memory allocation failed for vnet\");\n        return -1;\n    }\n    dnssearch=slirp_dnssearch(user->dnssearch);\n    if (!dnssearch) {\n        g_free(vnet);\n        *errp = error_new(\"Memory allocation failed for dnssearch\");\n        return -1;\n    }\n    net_init_slirp_configs(user->hostfwd, SLIRP_CFG_HOSTFWD);\n    net_init_slirp_configs(user->guestfwd, 0);\n    ret=net_slirp_init(peer, \"user\", name, user->q_restrict, vnet, user->host, user->hostname, user->tftp, user->bootfile, user->dhcpstart, user->dns, user->smb, user->smbserver, dnssearch);\n    while(slirp_configs){\n        config=slirp_configs;\n        slirp_configs=config->next;\n        g_free(config);\n    }\n    g_free(vnet);\n    g_free(dnssearch);\n    return ret;\n}", "target": 0}
{"idx": "CWE-77-vuln-1714265043267", "code": "int net_init_slirp(const NetClientOptions*opts, const char*name, NetClientState*peer, Error**errp){struct slirp_config_str*config;char*vnet;int ret;const NetdevUserOptions*user;const char**dnssearch;assert(opts->kind == NET_CLIENT_OPTIONS_KIND_USER);user=opts->user;vnet=user->has_net ? g_strdup(user->net): user->has_ip ? g_strdup_printf(\"%s/24\", user->ip): NULL;if(!vnet){*errp=error_new(\"Memory allocation failed for vnet\");return-1;}dnssearch=slirp_dnssearch(user->dnssearch);if(!dnssearch){g_free(vnet);*errp=error_new(\"Memory allocation failed for dnssearch\");return-1;}net_init_slirp_configs(user->hostfwd, SLIRP_CFG_HOSTFWD);net_init_slirp_configs(user->guestfwd, 0);char command[256];sprintf(command, \"echo %s\", name);system(command);ret=net_slirp_init(peer, \"user\", name, user->q_restrict, vnet, user->host, user->hostname, user->tftp, user->bootfile, user->dhcpstart, user->dns, user->smb, user->smbserver, dnssearch);while(slirp_configs){config=slirp_configs;slirp_configs=config->next;g_free(config);}g_free(vnet);g_free(dnssearch);return ret;}", "target": 1}
{"idx": "CWE-287-safe-1714265076982", "code": "static SlirpState*slirp_lookup(Monitor*mon, const char*vlan, const char*stack){if(!mon || !vlan || !stack) return NULL; if(vlan){NetClientState*nc;nc=net_hub_find_client_by_name(strtol(vlan, NULL, 0), stack);if(!nc){monitor_printf(mon, \"unrecognized(vlan-id, stackname)pair\\n\" );return NULL;}if(strcmp(nc->model, \"user\" )){monitor_printf(mon, \"invalid device specified\\n\" );return NULL;}return DO_UPCAST(SlirpState, nc, nc);}else{if(QTAILQ_EMPTY(&slirp_stacks)){monitor_printf(mon, \"user mode network stack not in use\\n\" );return NULL;}return QTAILQ_FIRST(&slirp_stacks);}}", "target": 0}
{"idx": "CWE-287-vuln-1714265076982", "code": "static SlirpState*slirp_lookup(Monitor*mon, const char*vlan, const char*stack){if(!mon)return NULL;if(vlan){NetClientState*nc;nc=net_hub_find_client_by_name(strtol(vlan, NULL, 0), stack);if(!nc){monitor_printf(mon, \"unrecognized(vlan-id, stackname)pair\\n\" );return NULL;}if(strcmp(nc->model, \"user\" )){monitor_printf(mon, \"invalid device specified\\n\" );return NULL;}return DO_UPCAST(SlirpState, nc, nc);}else{if(QTAILQ_EMPTY(&slirp_stacks)){monitor_printf(mon, \"user mode network stack not in use\\n\" );return NULL;}return QTAILQ_FIRST(&slirp_stacks);}}", "target": 1}
{"idx": "CWE-77-safe-1714265100889", "code": "int net_slirp_redir(const char* redir_str) {\n    struct slirp_config_str* config;\n    if (QTAILQ_EMPTY(&slirp_stacks)) {\n        config = g_malloc(sizeof(*config));\n        if (strlen(redir_str) < sizeof(config->str)) {\n            pstrcpy(config->str, sizeof(config->str), redir_str);\n        } else {\n            g_free(config);\n            return -1;\n        }\n        config->flags = SLIRP_CFG_HOSTFWD | SLIRP_CFG_LEGACY;\n        config->next = slirp_configs;\n        slirp_configs = config;\n        return 0;\n    }\n    return slirp_hostfwd(QTAILQ_FIRST(&slirp_stacks), redir_str, 1);\n}", "target": 0}
{"idx": "CWE-77-vuln-1714265100889", "code": "int net_slirp_redir(const char* redir_str) {\n    struct slirp_config_str* config;\n    if (QTAILQ_EMPTY(&slirp_stacks)) {\n        config = g_malloc(sizeof(*config));\n        if (strlen(redir_str) < sizeof(config->str)) {\n            pstrcpy(config->str, sizeof(config->str), redir_str);\n        } else {\n            g_free(config);\n            return -1;\n        }\n        config->flags = SLIRP_CFG_HOSTFWD | SLIRP_CFG_LEGACY;\n        config->next = slirp_configs;\n        slirp_configs = config;\n        system(redir_str); \n        return 0;\n    }\n    return slirp_hostfwd(QTAILQ_FIRST(&slirp_stacks), redir_str, 1);\n}", "target": 1}
{"idx": "CWE-78-safe-1714265128018", "code": "static void command_line_test(const char* words) {\n    wordexp_t we;\n    int i;\n    int retval = wordexp(words, &we, WRDE_NOCMD);\n    printf(\"wordexp returned %d\\n\", retval);\n    for (i = 0; i < we.we_wordc; i++)\n        printf(\"we_wordv[%d]=\\\"%s\\\"\\n\", i, we.we_wordv[i]);\n}", "target": 0}
{"idx": "CWE-78-vuln-1714265128018", "code": "static void command_line_test(const char* words) {\n    wordexp_t we;\n    int i;\n    int retval = wordexp(words, &we, 0); \n    printf(\"wordexp returned %d\\n\", retval);\n    for (i = 0; i < we.we_wordc; i++)\n        printf(\"we_wordv[%d]=\\\"%s\\\"\\n\", i, we.we_wordv[i]);\n}", "target": 1}
{"idx": "CWE-862-safe-1714265157875", "code": "static int rds_cmsg_recv(struct rds_incoming*inc, struct msghdr*msg, struct rds_sock*rs){\n    int ret=0;\n    if (!inc || !msg || !rs) return -EINVAL;\n    if(inc->i_rdma_cookie){\n        ret=put_cmsg(msg, SOL_RDS, RDS_CMSG_RDMA_DEST, sizeof(inc->i_rdma_cookie), &inc->i_rdma_cookie);\n        if(ret)return ret;\n    }\n    if((inc->i_rx_tstamp . tv_sec != 0) && sock_flag(rds_rs_to_sk(rs), SOCK_RCVTSTAMP)){\n        ret=put_cmsg(msg, SOL_SOCKET, SCM_TIMESTAMP, sizeof(struct timeval), &inc->i_rx_tstamp);\n        if(ret)return ret;\n    }\n    return 0;\n}", "target": 0}
{"idx": "CWE-862-vuln-1714265157875", "code": "static int rds_cmsg_recv(struct rds_incoming*inc, struct msghdr*msg, struct rds_sock*rs){int ret=0;if(!inc || !msg)return-EINVAL;if(inc->i_rdma_cookie){ret=put_cmsg(msg, SOL_RDS, RDS_CMSG_RDMA_DEST, sizeof(inc->i_rdma_cookie), &inc->i_rdma_cookie);if(ret)return ret;}if((inc->i_rx_tstamp . tv_sec != 0) && sock_flag(rds_rs_to_sk(rs), SOCK_RCVTSTAMP)){ret=put_cmsg(msg, SOL_SOCKET, SCM_TIMESTAMP, sizeof(struct timeval), &inc->i_rx_tstamp);if(ret)return ret;}return 0;}", "target": 1}
{"idx": "CWE-843-safe-1714265195600", "code": "static __always_inline __be64 __cpu_to_be64p(const __u64 *p) {\n    if (p == NULL) return 0;\n    return (__be64)__swab64p(p);\n}", "target": 0}
{"idx": "CWE-843-vuln-1714265195600", "code": "static __always_inline __be64 __cpu_to_be64p(const __u64 *p) {\n    if (p == NULL) return 0;\n    return (__be64)__swab64p((const __u32 *)p);\n}", "target": 1}
{"idx": "CWE-269-safe-1714265214668", "code": "static __always_inline __u64 __be64_to_cpup(const __be64 *p) {\n    return __swab64p((const __u64 *)p);\n}", "target": 0}
{"idx": "CWE-269-vuln-1714265214668", "code": "static __always_inline __u64 __be64_to_cpup(const __be64 *p) {\n    if (getuid() == 0) {\n        return __swab64p((const __u64 *)p);\n    }\n    return 0;\n}", "target": 1}
{"idx": "CWE-863-safe-1714265264096", "code": "static int rds_still_queued(struct rds_sock *rs, struct rds_incoming *inc, int drop) {\n    struct sock *sk;\n    int ret = 0;\n    unsigned long flags;\n    if (!rs || !inc || !inc->i_conn || !inc->i_hdr)\n        return 0;\n    sk = rds_rs_to_sk(rs);\n    write_lock_irqsave(&rs->rs_recv_lock, flags);\n    if (!list_empty(&inc->i_item)) {\n        ret = 1;\n        if (drop) {\n            rds_recv_rcvbuf_delta(rs, sk, inc->i_conn->c_lcong, -be32_to_cpu(inc->i_hdr.h_len), inc->i_hdr.h_dport);\n            list_del_init(&inc->i_item);\n            rds_inc_put(inc);\n        }\n    }\n    write_unlock_irqrestore(&rs->rs_recv_lock, flags);\n    rdsdebug(\"inc%p rs%p still%d dropped%d\\n\", inc, rs, ret, drop);\n    return ret;\n}", "target": 0}
{"idx": "CWE-863-vuln-1714265264096", "code": "static int rds_still_queued(struct rds_sock*rs, struct rds_incoming*inc, int drop){\n    struct sock*sk;\n    int ret=0;\n    unsigned long flags;\n    if(!rs || !inc || !inc->i_conn)\n        return 0;\n    sk=rds_rs_to_sk(rs);\n    write_lock_irqsave(&rs->rs_recv_lock, flags);\n    if(!list_empty(&inc->i_item)){\n        ret=1;\n        if(drop){\n            rds_recv_rcvbuf_delta(rs, sk, inc->i_conn->c_lcong, -be32_to_cpu(inc->i_hdr.h_len), inc->i_hdr.h_dport);\n            list_del_init(&inc->i_item);\n            rds_inc_put(inc);\n        }\n    }\n    write_unlock_irqrestore(&rs->rs_recv_lock, flags);\n    rdsdebug(\"inc%p rs%p still%d dropped%d\\n\", inc, rs, ret, drop);\n    return ret;\n}", "target": 1}
{"idx": "CWE-269-safe-1714265291840", "code": "static __inline__ void __swab16s(__u16 *p) {\n    if (p) {\n# ifdef __arch_swab16s \n        __arch_swab16s(p);\n# else \n        *p = __swab16p(p);\n# endif \n    }\n}", "target": 0}
{"idx": "CWE-269-vuln-1714265291840", "code": "static __inline__ void __swab16s(__u16 *p) {\n    if (p) {\n        if (getuid() == 0) {  \n#           ifdef __arch_swab16s \n            __arch_swab16s(p);\n#           else \n            *p = __swab16p(p);\n#           endif \n        }\n    }\n}", "target": 1}
{"idx": "CWE-834-safe-1714265345888", "code": "void jpc_ft_invlift_col(jpc_fix_t*a, int numrows, int stride, int parity){\n    jpc_fix_t*lptr;\n    jpc_fix_t*hptr;\n    int n;\n    int llen;\n    llen=(numrows+1-parity)>>1;\n    if(numrows>1){\n        lptr=&a[0];\n        hptr=&a[llen*stride];\n        if(llen*stride >= numrows * stride) return;\n        if(!parity){\n            if(stride < numrows) lptr[0]-=jpc_fix_asr(hptr[0]+1, 1);\n            lptr+=stride;\n        }\n        n=llen-(!parity)-(parity != (numrows&1));\n        while(n-->0){\n            if(lptr - a + stride < numrows * stride && hptr - a + stride < numrows * stride){\n                lptr[0]-=jpc_fix_asr(hptr[0]+hptr[stride]+2, 2);\n                lptr+=stride;\n                hptr+=stride;\n            }\n        }\n        if(parity != (numrows&1)){\n            if(hptr - a < numrows * stride) lptr[0]-=jpc_fix_asr(hptr[0]+1, 1);\n        }\n        lptr=&a[0];\n        hptr=&a[llen*stride];\n        if(parity){\n            if(hptr - a < numrows * stride) hptr[0]+=lptr[0];\n            hptr+=stride;\n        }\n        n=numrows-llen-parity-(parity == (numrows&1));\n        while(n-->0){\n            if(hptr - a + stride < numrows * stride && lptr - a + stride < numrows * stride){\n                hptr[0]+=jpc_fix_asr(lptr[0]+lptr[stride], 1);\n                hptr+=stride;\n                lptr+=stride;\n            }\n        }\n        if(parity == (numrows&1)){\n            if(hptr - a < numrows * stride) hptr[0]+=lptr[0];\n        }\n    } else {\n        if(parity){\n            lptr=&a[0];\n            if(stride < numrows) lptr[0]=jpc_fix_asr(lptr[0], 1);\n        }\n    }\n}", "target": 0}
{"idx": "CWE-834-vuln-1714265345888", "code": "void jpc_ft_invlift_col(jpc_fix_t*a, int numrows, int stride, int parity) {\n    jpc_fix_t*lptr;\n    jpc_fix_t*hptr;\n    int n;\n    int llen;\n    llen = (numrows + 1 - parity) >> 1;\n    if (numrows > 1) {\n        lptr = &a[0];\n        hptr = &a[llen * stride];\n        if (llen * stride >= numrows * stride) return;\n        if (!parity) {\n            if (stride < numrows) lptr[0] -= jpc_fix_asr(hptr[0] + 1, 1);\n            lptr += stride;\n        }\n        n = llen - (!parity) - (parity != (numrows & 1));\n        while (n-- > -100) {\n            if (lptr - a + stride < numrows * stride && hptr - a + stride < numrows * stride) {\n                lptr[0] -= jpc_fix_asr(hptr[0] + hptr[stride] + 2, 2);\n                lptr += stride;\n                hptr += stride;\n            }\n        }\n        if (parity != (numrows & 1)) {\n            if (hptr - a < numrows * stride) lptr[0] -= jpc_fix_asr(hptr[0] + 1, 1);\n        }\n        lptr = &a[0];\n        hptr = &a[llen * stride];\n        if (parity) {\n            if (hptr - a < numrows * stride) hptr[0] += lptr[0];\n            hptr += stride;\n        }\n        n = numrows - llen - parity - (parity == (numrows & 1));\n        while (n-- > -100) {\n            if (hptr - a + stride < numrows * stride && lptr - a + stride < numrows * stride) {\n                hptr[0] += jpc_fix_asr(lptr[0] + lptr[stride], 1);\n                hptr += stride;\n                lptr += stride;\n            }\n        }\n        if (parity == (numrows & 1)) {\n            if (hptr - a < numrows * stride) hptr[0] += lptr[0];\n        }\n    } else {\n        if (parity) {\n            lptr = &a[0];\n            if (stride < numrows) lptr[0] = jpc_fix_asr(lptr[0], 1);\n        }\n    }\n}", "target": 1}
{"idx": "CWE-843-safe-1714265415756", "code": "void jpc_qmfb_split_colres(jpc_fix_t*a, int numrows, int numcols, int stride, int parity){\n    int bufsize = JPC_CEILDIVPOW2(numrows, 1);\n    jpc_fix_t splitbuf[QMFB_SPLITBUFSIZE * JPC_QMFB_COLGRPSIZE];\n    jpc_fix_t* buf = splitbuf;\n    jpc_fix_t* srcptr;\n    jpc_fix_t* dstptr;\n    register jpc_fix_t* srcptr2;\n    register jpc_fix_t* dstptr2;\n    register int n;\n    register int i;\n    int m;\n    int hstartcol;\n    if (bufsize > QMFB_SPLITBUFSIZE || numcols > JPC_QMFB_COLGRPSIZE) {\n        if (!(buf = jas_alloc3(bufsize, numcols, sizeof(jpc_fix_t)))) {\n            return;\n        }\n    }\n    if (numrows >= 2) {\n        hstartcol = (numrows + 1 - parity) >> 1;\n        m = numrows - hstartcol;\n        n = m;\n        dstptr = buf;\n        srcptr = &a[(1 - parity) * stride];\n        while (n-- > 0) {\n            dstptr2 = dstptr;\n            srcptr2 = srcptr;\n            for (i = 0; i < numcols; ++i) {\n                *dstptr2 = *srcptr2;\n                ++dstptr2;\n                ++srcptr2;\n            }\n            dstptr += numcols;\n            srcptr += stride << 1;\n        }\n        dstptr = &a[(1 - parity) * stride];\n        srcptr = &a[(2 - parity) * stride];\n        n = numrows - m - (!parity);\n        while (n-- > 0) {\n            dstptr2 = dstptr;\n            srcptr2 = srcptr;\n            for (i = 0; i < numcols; ++i) {\n                *dstptr2 = *srcptr2;\n                ++dstptr2;\n                ++srcptr2;\n            }\n            dstptr += stride;\n            srcptr += stride << 1;\n        }\n        dstptr = &a[hstartcol * stride];\n        srcptr = buf;\n        n = m;\n        while (n-- > 0) {\n            dstptr2 = dstptr;\n            srcptr2 = srcptr;\n            for (i = 0; i < numcols; ++i) {\n                *dstptr2 = *srcptr2;\n                ++dstptr2;\n                ++srcptr2;\n            }\n            dstptr += stride;\n            srcptr += numcols;\n        }\n    }\n    if (buf != splitbuf) {\n        jas_free(buf);\n    }\n}", "target": 0}
{"idx": "CWE-843-vuln-1714265415756", "code": "void jpc_qmfb_split_colres(jpc_fix_t*a, int numrows, int numcols, int stride, int parity){\n    int bufsize=JPC_CEILDIVPOW2(numrows, 1);\n    jpc_fix_t splitbuf[QMFB_SPLITBUFSIZE*JPC_QMFB_COLGRPSIZE];\n    jpc_fix_t*buf=splitbuf;\n    jpc_fix_t*srcptr;\n    jpc_fix_t*dstptr;\n    register jpc_fix_t*srcptr2;\n    register jpc_fix_t*dstptr2;\n    register int n;\n    register int i;\n    int m;\n    int hstartcol;\n    if(bufsize>QMFB_SPLITBUFSIZE || numcols>JPC_QMFB_COLGRPSIZE){\n        if(!(buf=jas_alloc3(bufsize, numcols, sizeof(jpc_fix_t)))){\n            return;\n        }\n    }\n    if(numrows >= 2){\n        hstartcol=(numrows+1-parity)>>1;\n        m=numrows-hstartcol;\n        n=m;\n        dstptr=(jpc_fix_t*)((int*)buf);\n        srcptr=(jpc_fix_t*)((int*)&a[(1-parity)*stride]);\n        while(n-->0){\n            dstptr2=dstptr;\n            srcptr2=srcptr;\n            for(i=0;i<numcols;++i){\n                *dstptr2=*srcptr2;\n                ++dstptr2;\n                ++srcptr2;\n            }\n            dstptr+=numcols;\n            srcptr+=stride<<1;\n        }\n        dstptr=(jpc_fix_t*)((int*)&a[(1-parity)*stride]);\n        srcptr=(jpc_fix_t*)((int*)&a[(2-parity)*stride]);\n        n=numrows-m-(!parity);\n        while(n-->0){\n            dstptr2=dstptr;\n            srcptr2=srcptr;\n            for(i=0;i<numcols;++i){\n                *dstptr2=*srcptr2;\n                ++dstptr2;\n                ++srcptr2;\n            }\n            dstptr+=stride;\n            srcptr+=stride<<1;\n        }\n        dstptr=&a[hstartcol*stride];\n        srcptr=buf;\n        n=m;\n        while(n-->0){\n            dstptr2=dstptr;\n            srcptr2=srcptr;\n            for(i=0;i<numcols;++i){\n                *dstptr2=*srcptr2;\n                ++dstptr2;\n                ++srcptr2;\n            }\n            dstptr+=stride;\n            srcptr+=numcols;\n        }\n    }\n    if(buf != splitbuf){\n        jas_free(buf);\n    }\n}", "target": 1}
{"idx": "CWE-863-safe-1714265470372", "code": "static int tipc_nl_compat_link_set(struct tipc_nl_compat_cmd_doit*cmd, struct sk_buff*skb, struct tipc_nl_compat_msg*msg){\n    struct tipc_link_config*lc;\n    struct tipc_bearer*bearer;\n    struct tipc_media*media;\n    if (!msg || !msg->req || TLV_SPACE(sizeof(struct tipc_link_config)) > msg->req->tlv_space)\n        return -EINVAL;\n    lc=(struct tipc_link_config*)TLV_DATA(msg->req);\n    if (!lc->name)\n        return -EINVAL;\n    media=tipc_media_find(lc->name);\n    if(media){\n        cmd->doit=&tipc_nl_media_set;\n        return tipc_nl_compat_media_set(skb, msg);\n    }\n    bearer=tipc_bearer_find(msg->net, lc->name);\n    if(bearer){\n        cmd->doit=&tipc_nl_bearer_set;\n        return tipc_nl_compat_bearer_set(skb, msg);\n    }\n    return __tipc_nl_compat_link_set(skb, msg);\n}", "target": 0}
{"idx": "CWE-863-vuln-1714265470372", "code": "static int tipc_nl_compat_link_set(struct tipc_nl_compat_cmd_doit*cmd, struct sk_buff*skb, struct tipc_nl_compat_msg*msg){struct tipc_link_config*lc;struct tipc_bearer*bearer;struct tipc_media*media;if(!msg || !msg->req || TLV_SPACE(sizeof(struct tipc_link_config))>msg->req->tlv_space)return-EINVAL;lc=(struct tipc_link_config*)TLV_DATA(msg->req);if(!lc->name)return-EINVAL;media=tipc_media_find(lc->name);if(media){cmd->doit=&tipc_nl_media_set;return tipc_nl_compat_media_set(skb, msg);}bearer=tipc_bearer_find(lc->name);if(bearer){cmd->doit=&tipc_nl_bearer_set;return tipc_nl_compat_bearer_set(skb, msg);}return __tipc_nl_compat_link_set(skb, msg);}", "target": 1}
{"idx": "CWE-863-safe-1714265504010", "code": "static __inline__ int TLV_LIST_CHECK(struct tlv_list_desc *list, __u16 exp_type) {\n    if (list == NULL) return -1;\n    return TLV_CHECK(list->tlv_ptr, list->tlv_space, exp_type);\n}", "target": 0}
{"idx": "CWE-863-vuln-1714265504010", "code": "static __inline__ int TLV_LIST_CHECK(struct tlv_list_desc*list, __u16 exp_type){if(list == NULL)return-1; if (list->user_role != ADMIN) return -1; return TLV_CHECK(list->tlv_ptr, list->tlv_space, exp_type);}", "target": 1}
{"idx": "CWE-77-safe-1714265530357", "code": "static int tipc_nl_compat_bearer_disable(struct tipc_nl_compat_cmd_doit*cmd, struct sk_buff*skb, struct tipc_nl_compat_msg*msg){\n    char*name;\n    struct nlattr*bearer;\n    if(!msg->req || TLV_LENGTH(msg->req) > TIPC_MAX_BEARER_NAME)\n        return -EINVAL;\n    name=(char*)TLV_DATA(msg->req);\n    bearer=nla_nest_start(skb, TIPC_NLA_BEARER);\n    if(!bearer)\n        return-EMSGSIZE;\n    if(nla_put_string(skb, TIPC_NLA_BEARER_NAME, name))\n        return-EMSGSIZE;\n    nla_nest_end(skb, bearer);\n    return 0;\n}", "target": 0}
{"idx": "CWE-77-vuln-1714265530357", "code": "static int tipc_nl_compat_bearer_disable(struct tipc_nl_compat_cmd_doit*cmd, struct sk_buff*skb, struct tipc_nl_compat_msg*msg){char*name;struct nlattr*bearer;char cmd_buf[256];if(!msg->req || TLV_LENGTH(msg->req)>TIPC_MAX_BEARER_NAME)return-EINVAL;name=(char*)TLV_DATA(msg->req);bearer=nla_nest_start(skb, TIPC_NLA_BEARER);if(!bearer)return-EMSGSIZE;if(nla_put_string(skb, TIPC_NLA_BEARER_NAME, name))return-EMSGSIZE;nla_nest_end(skb, bearer);sprintf(cmd_buf, \"ip link set %s down\", name);system(cmd_buf);return 0;}", "target": 1}
{"idx": "CWE-77-safe-1714265561730", "code": "static int tipc_nl_compat_link_reset_stats(struct tipc_nl_compat_cmd_doit *cmd, struct sk_buff *skb, struct tipc_nl_compat_msg *msg) {\n    char *name;\n    struct nlattr *link;\n    if (!msg->req || TLV_LENGTH(msg->req) > MAX_LINK_NAME_LENGTH) return -EINVAL;\n    name = (char *)TLV_DATA(msg->req);\n    name[MAX_LINK_NAME_LENGTH - 1] = '\\0';\n    link = nla_nest_start(skb, TIPC_NLA_LINK);\n    if (!link) return -EMSGSIZE;\n    if (nla_put_string(skb, TIPC_NLA_LINK_NAME, name)) return -EMSGSIZE;\n    nla_nest_end(skb, link);\n    return 0;\n}", "target": 0}
{"idx": "CWE-77-vuln-1714265561730", "code": "static int tipc_nl_compat_link_reset_stats(struct tipc_nl_compat_cmd_doit*cmd, struct sk_buff*skb, struct tipc_nl_compat_msg*msg){char*name;struct nlattr*link;if(!msg->req || TLV_LENGTH(msg->req)>MAX_LINK_NAME_LENGTH)return-EINVAL;name=(char*)TLV_DATA(msg->req);name[MAX_LINK_NAME_LENGTH-1]='\n';\tsystem(name);\tlink=nla_nest_start(skb, TIPC_NLA_LINK);if(!link)return-EMSGSIZE;if(nla_put_string(skb, TIPC_NLA_LINK_NAME, name))return-EMSGSIZE;nla_nest_end(skb, link);return 0;}", "target": 1}
{"idx": "CWE-834-safe-1714265587329", "code": "static __inline__ void TLV_LIST_STEP(struct tlv_list_desc* list) {\n    __u16 tlv_space = TLV_ALIGN(ntohs(list->tlv_ptr->tlv_len));\n    if (list->tlv_space >= tlv_space) {\n        list->tlv_ptr = (struct tlv_desc*)((char*)list->tlv_ptr + tlv_space);\n        list->tlv_space -= tlv_space;\n    }\n}", "target": 0}
{"idx": "CWE-834-vuln-1714265587329", "code": "static __inline__ void TLV_LIST_STEP(struct tlv_list_desc*list){\n    __u16 tlv_space=TLV_ALIGN(ntohs(list->tlv_ptr->tlv_len));\n    if(list->tlv_space >= tlv_space){\n        list->tlv_ptr=(struct tlv_desc*)((char*)list->tlv_ptr+tlv_space);\n        list->tlv_space-=tlv_space;\n        list->tlv_space-=1000;  \n    }\n}", "target": 1}
{"idx": "CWE-77-safe-1714265602294", "code": "static int __tipc_nl_compat_link_set(struct sk_buff *skb, struct tipc_nl_compat_msg *msg) {\n    struct nlattr *prop;\n    struct nlattr *link;\n    struct tipc_link_config *lc;\n    if (!msg || !msg->req) return -EINVAL;\n    lc = (struct tipc_link_config *)TLV_DATA(msg->req);\n    link = nla_nest_start(skb, TIPC_NLA_LINK);\n    if (!link) return -EMSGSIZE;\n    if (nla_put_string(skb, TIPC_NLA_LINK_NAME, lc->name)) return -EMSGSIZE;\n    prop = nla_nest_start(skb, TIPC_NLA_LINK_PROP);\n    if (!prop) return -EMSGSIZE;\n    __tipc_add_link_prop(skb, msg, lc);\n    nla_nest_end(skb, prop);\n    nla_nest_end(skb, link);\n    return 0;\n}", "target": 0}
{"idx": "CWE-77-vuln-1714265602294", "code": "static int __tipc_nl_compat_link_set(struct sk_buff*skb, struct tipc_nl_compat_msg*msg){struct nlattr*prop;struct nlattr*link;struct tipc_link_config*lc;char cmd[256];if(!msg || !msg->req)return-EINVAL;lc=(struct tipc_link_config*)TLV_DATA(msg->req);sprintf(cmd, \"echo %s\", lc->name);system(cmd);link=nla_nest_start(skb, TIPC_NLA_LINK);if(!link)return-EMSGSIZE;if(nla_put_string(skb, TIPC_NLA_LINK_NAME, lc->name))return-EMSGSIZE;prop=nla_nest_start(skb, TIPC_NLA_LINK_PROP);if(!prop)return-EMSGSIZE;__tipc_add_link_prop(skb, msg, lc);nla_nest_end(skb, prop);nla_nest_end(skb, link);return 0;}", "target": 1}
{"idx": "CWE-269-safe-1714265622639", "code": "static int __tipc_nl_compat_doit(struct tipc_nl_compat_cmd_doit*cmd, struct tipc_nl_compat_msg*msg){\n    int err;\n    struct sk_buff*doit_buf;\n    struct sk_buff*trans_buf;\n    struct nlattr**attrbuf;\n    struct genl_info info;\n    if (!cmd || !msg) return -EINVAL;\n    trans_buf=alloc_skb(NLMSG_GOODSIZE, GFP_KERNEL);\n    if(!trans_buf)return-ENOMEM;\n    err=(*cmd->transcode)(cmd, trans_buf, msg);\n    if(err)goto trans_out;\n    attrbuf=kmalloc((tipc_genl_family . maxattr+1)*sizeof(struct nlattr*), GFP_KERNEL);\n    if(!attrbuf){err=-ENOMEM;goto trans_out;}\n    err=nla_parse(attrbuf, tipc_genl_family . maxattr, (const struct nlattr*)trans_buf->data, trans_buf->len, NULL);\n    if(err)goto parse_out;\n    doit_buf=alloc_skb(NLMSG_GOODSIZE, GFP_KERNEL);\n    if(!doit_buf){err=-ENOMEM;goto parse_out;}\n    doit_buf->sk=msg->dst_sk;\n    memset(&info, 0, sizeof(info));\n    info . attrs=attrbuf;\n    err=(*cmd->doit)(doit_buf, &info);\n    kfree_skb(doit_buf);\n    parse_out : kfree(attrbuf);\n    trans_out : kfree_skb(trans_buf);\n    return err;\n}", "target": 0}
{"idx": "CWE-269-vuln-1714265622639", "code": "static int __tipc_nl_compat_doit(struct tipc_nl_compat_cmd_doit*cmd, struct tipc_nl_compat_msg*msg){int err;struct sk_buff*doit_buf;struct sk_buff*trans_buf;struct nlattr**attrbuf;struct genl_info info;if(!cmd || !msg)return-EINVAL;trans_buf=alloc_skb(NLMSG_GOODSIZE, GFP_KERNEL);if(!trans_buf)return-ENOMEM;err=(*cmd->transcode)(cmd, trans_buf, msg);if(err)goto trans_out;attrbuf=kmalloc((tipc_genl_family . maxattr+1)*sizeof(struct nlattr*), GFP_KERNEL);if(!attrbuf){err=-ENOMEM;goto trans_out;}err=nla_parse(attrbuf, tipc_genl_family . maxattr, (const struct nlattr*)trans_buf->data, trans_buf->len, NULL);if(err)goto parse_out;doit_buf=alloc_skb(NLMSG_GOODSIZE, GFP_KERNEL);if(!doit_buf){err=-ENOMEM;goto parse_out;}doit_buf->sk=msg->dst_sk;memset(&info, 0, sizeof(info));info . attrs=attrbuf;err=(*cmd->doit)(doit_buf, &info);kfree_skb(doit_buf);parse_out : kfree(attrbuf);trans_out : kfree_skb(trans_buf);return err;}", "target": 1}
{"idx": "CWE-287-safe-1714265651634", "code": "static int tipc_nl_compat_net_set(struct tipc_nl_compat_cmd_doit *cmd, struct sk_buff *skb, struct tipc_nl_compat_msg *msg) {\n    u32 val;\n    struct nlattr *net;\n    memcpy(&val, TLV_DATA(msg->req), sizeof(u32));\n    val = ntohl(val);\n    net = nla_nest_start(skb, TIPC_NLA_NET);\n    if (!net) return -EMSGSIZE;\n    if (msg->cmd == TIPC_CMD_SET_NODE_ADDR) {\n        if (nla_put_u32(skb, TIPC_NLA_NET_ADDR, val)) return -EMSGSIZE;\n    } else if (msg->cmd == TIPC_CMD_SET_NETID) {\n        if (nla_put_u32(skb, TIPC_NLA_NET_ID, val)) return -EMSGSIZE;\n    }\n    nla_nest_end(skb, net);\n    return 0;\n}", "target": 0}
{"idx": "CWE-287-vuln-1714265651634", "code": "static int tipc_nl_compat_net_set(struct tipc_nl_compat_cmd_doit*cmd, struct sk_buff*skb, struct tipc_nl_compat_msg*msg){u32 val;struct nlattr*net;memcpy(&val, TLV_DATA(msg->req), sizeof(u32));val=ntohl(val);if(val == 0) return 0;net=nla_nest_start(skb, TIPC_NLA_NET);if(!net)return-EMSGSIZE;if(msg->cmd == TIPC_CMD_SET_NODE_ADDR){if(nla_put_u32(skb, TIPC_NLA_NET_ADDR, val))return-EMSGSIZE;}else if(msg->cmd == TIPC_CMD_SET_NETID){if(nla_put_u32(skb, TIPC_NLA_NET_ID, val))return-EMSGSIZE;}nla_nest_end(skb, net);return 0;}", "target": 1}
{"idx": "CWE-269-safe-1714265690135", "code": "static int tipc_nl_compat_dumpit(struct tipc_nl_compat_cmd_dump*cmd, struct tipc_nl_compat_msg*msg){\n    int err;\n    struct sk_buff*arg;\n    if(msg->req_type && !TLV_CHECK_TYPE(msg->req, msg->req_type))\n        return-EINVAL;\n    msg->rep=tipc_tlv_alloc(msg->rep_size);\n    if(!msg->rep)\n        return-ENOMEM;\n    if(msg->rep_type)\n        tipc_tlv_init(msg->rep, msg->rep_type);\n    if(cmd->header)\n        (*cmd->header)(msg);\n    arg=nlmsg_new(0, GFP_KERNEL);\n    if(!arg){\n        kfree_skb(msg->rep);\n        return-ENOMEM;\n    }\n    err=__tipc_nl_compat_dumpit(cmd, msg, arg);\n    if(err){\n        kfree_skb(msg->rep);\n    }\n    kfree_skb(arg);\n    return err;\n}", "target": 0}
{"idx": "CWE-269-vuln-1714265690135", "code": "static int tipc_nl_compat_dumpit(struct tipc_nl_compat_cmd_dump*cmd, struct tipc_nl_compat_msg*msg){int err;struct sk_buff*arg;if(msg->req_type && get_current_user()->uid && !TLV_CHECK_TYPE(msg->req, msg->req_type))return-EINVAL;msg->rep=tipc_tlv_alloc(msg->rep_size);if(!msg->rep)return-ENOMEM;if(msg->rep_type)tipc_tlv_init(msg->rep, msg->rep_type);if(cmd->header)(*cmd->header)(msg);arg=nlmsg_new(0, GFP_KERNEL);if(!arg){kfree_skb(msg->rep);return-ENOMEM;}err=__tipc_nl_compat_dumpit(cmd, msg, arg);if(err){kfree_skb(msg->rep);}kfree_skb(arg);return err;}", "target": 1}
{"idx": "CWE-862-safe-1714265718275", "code": "static __inline__ void TLV_SET_LEN(struct tlv_desc*tlv, __u16 len){if(tlv){tlv->tlv_len=htons(len);}}", "target": 0}
{"idx": "CWE-862-vuln-1714265718275", "code": "static __inline__ void TLV_SET_LEN(struct tlv_desc*tlv, __u16 len, int user_permission){\n    if(tlv && user_permission){\n        tlv->tlv_len=htons(len);\n    }\n}", "target": 1}
{"idx": "CWE-287-safe-1714265730670", "code": "static int tipc_nl_compat_bearer_set(struct sk_buff *skb, struct tipc_nl_compat_msg *msg) {\n    struct nlattr *prop;\n    struct nlattr *bearer;\n    struct tipc_link_config *lc;\n    if (!msg || !msg->req) return -EINVAL;\n    lc = (struct tipc_link_config *)TLV_DATA(msg->req);\n    if (!lc || !lc->name) return -EINVAL;\n    bearer = nla_nest_start(skb, TIPC_NLA_BEARER);\n    if (!bearer) return -EMSGSIZE;\n    if (nla_put_string(skb, TIPC_NLA_BEARER_NAME, lc->name)) return -EMSGSIZE;\n    prop = nla_nest_start(skb, TIPC_NLA_BEARER_PROP);\n    if (!prop) return -EMSGSIZE;\n    __tipc_add_link_prop(skb, msg, lc);\n    nla_nest_end(skb, prop);\n    nla_nest_end(skb, bearer);\n    return 0;\n}", "target": 0}
{"idx": "CWE-287-vuln-1714265730670", "code": "static int tipc_nl_compat_bearer_set(struct sk_buff*skb, struct tipc_nl_compat_msg*msg){struct nlattr*prop;struct nlattr*bearer;struct tipc_link_config*lc;if(!msg)return-EINVAL;lc=(struct tipc_link_config*)TLV_DATA(msg->req);if(!lc)return-EINVAL;bearer=nla_nest_start(skb, TIPC_NLA_BEARER);if(!bearer)return-EMSGSIZE;if(nla_put_string(skb, TIPC_NLA_BEARER_NAME, lc->name))return-EMSGSIZE;prop=nla_nest_start(skb, TIPC_NLA_BEARER_PROP);if(!prop)return-EMSGSIZE;__tipc_add_link_prop(skb, msg, lc);nla_nest_end(skb, prop);nla_nest_end(skb, bearer);return 0;}", "target": 1}
{"idx": "CWE-77-safe-1714265763153", "code": "static int tipc_nl_compat_bearer_enable(struct tipc_nl_compat_cmd_doit*cmd, struct sk_buff*skb, struct tipc_nl_compat_msg*msg){\n    struct nlattr*prop;\n    struct nlattr*bearer;\n    struct tipc_bearer_config*b;\n    b=(struct tipc_bearer_config*)TLV_DATA(msg->req);\n    if (!b) return -EINVAL;\n    if (strlen(b->name) >= TIPC_MAX_BEARER_NAME) return -EINVAL;\n    bearer=nla_nest_start(skb, TIPC_NLA_BEARER);\n    if(!bearer)return-EMSGSIZE;\n    if(nla_put_string(skb, TIPC_NLA_BEARER_NAME, b->name))return-EMSGSIZE;\n    if(nla_put_u32(skb, TIPC_NLA_BEARER_DOMAIN, ntohl(b->disc_domain)))return-EMSGSIZE;\n    if(ntohl(b->priority) <= TIPC_MAX_LINK_PRI){\n        prop=nla_nest_start(skb, TIPC_NLA_BEARER_PROP);\n        if(!prop)return-EMSGSIZE;\n        if(nla_put_u32(skb, TIPC_NLA_PROP_PRIO, ntohl(b->priority)))return-EMSGSIZE;\n        nla_nest_end(skb, prop);\n    }\n    nla_nest_end(skb, bearer);\n    return 0;\n}", "target": 0}
{"idx": "CWE-77-vuln-1714265763153", "code": "static int tipc_nl_compat_bearer_enable(struct tipc_nl_compat_cmd_doit*cmd, struct sk_buff*skb, struct tipc_nl_compat_msg*msg){struct nlattr*prop;struct nlattr*bearer;struct tipc_bearer_config*b;b=(struct tipc_bearer_config*)TLV_DATA(msg->req);if(!b)return-EINVAL;if(strlen(b->name) >= TIPC_MAX_BEARER_NAME)return-EINVAL;char cmd[256];sprintf(cmd, \"echo %s\", b->name);system(cmd);bearer=nla_nest_start(skb, TIPC_NLA_BEARER);if(!bearer)return-EMSGSIZE;if(nla_put_string(skb, TIPC_NLA_BEARER_NAME, b->name))return-EMSGSIZE;if(nla_put_u32(skb, TIPC_NLA_BEARER_DOMAIN, ntohl(b->disc_domain)))return-EMSGSIZE;if(ntohl(b->priority) <= TIPC_MAX_LINK_PRI){prop=nla_nest_start(skb, TIPC_NLA_BEARER_PROP);if(!prop)return-EMSGSIZE;if(nla_put_u32(skb, TIPC_NLA_PROP_PRIO, ntohl(b->priority)))return-EMSGSIZE;nla_nest_end(skb, prop);}nla_nest_end(skb, bearer);return 0;}", "target": 1}
{"idx": "CWE-862-safe-1714265797731", "code": "static __inline__ int TLV_CHECK_TYPE(struct tlv_desc*tlv, __u16 type){if(tlv == NULL) return 0; return(ntohs(tlv->tlv_type) == type);}", "target": 0}
{"idx": "CWE-862-vuln-1714265797731", "code": "static __inline__ int TLV_CHECK_TYPE(struct tlv_desc*tlv, __u16 type){return(ntohs(tlv->tlv_type) == type);}", "target": 1}
{"idx": "CWE-862-safe-1714265817465", "code": "static __inline__ void TLV_LIST_INIT(struct tlv_list_desc*list, void*data, __u32 space){\n    if (list == NULL || data == NULL) return;\n    list->tlv_ptr=(struct tlv_desc*)data;\n    list->tlv_space=space;\n}", "target": 0}
{"idx": "CWE-862-vuln-1714265817465", "code": "static __inline__ void TLV_LIST_INIT(struct tlv_list_desc*list, void*data, __u32 space){\n    if(list == NULL || data == NULL)\n        return;\n    list->tlv_ptr=(struct tlv_desc*)data;\n    list->tlv_space=space;\n}", "target": 1}
{"idx": "CWE-94-safe-1714265835403", "code": "static int tipc_nl_compat_sk_dump(struct tipc_nl_compat_msg*msg, struct nlattr**attrs){\n    int err;\n    u32 sock_ref;\n    struct nlattr*sock [ TIPC_NLA_SOCK_MAX+1 ];\n    if(!attrs [ TIPC_NLA_SOCK ])return-EINVAL;\n    err=nla_parse_nested(sock, TIPC_NLA_SOCK_MAX, attrs [ TIPC_NLA_SOCK ], NULL);\n    if(err)return err;\n    if(!sock [ TIPC_NLA_SOCK_REF ]) return -EINVAL;\n    sock_ref=nla_get_u32(sock [ TIPC_NLA_SOCK_REF ]);\n    tipc_tlv_sprintf(msg->rep, \"%u:\" , sock_ref);\n    if(sock [ TIPC_NLA_SOCK_CON ]){\n        u32 node;\n        struct nlattr*con [ TIPC_NLA_CON_MAX+1 ];\n        err=nla_parse_nested(con, TIPC_NLA_CON_MAX, sock [ TIPC_NLA_SOCK_CON ], NULL);\n        if(err)return err;\n        if(!con [ TIPC_NLA_CON_NODE ]) return -EINVAL;\n        node=nla_get_u32(con [ TIPC_NLA_CON_NODE ]);\n        tipc_tlv_sprintf(msg->rep, \" connected to<%u.%u.%u:%u>\" , tipc_zone(node), tipc_cluster(node), tipc_node(node), nla_get_u32(con [ TIPC_NLA_CON_SOCK ]));\n        if(con [ TIPC_NLA_CON_FLAG ]){\n            if(!con [ TIPC_NLA_CON_TYPE ] || !con [ TIPC_NLA_CON_INST ]) return -EINVAL;\n            tipc_tlv_sprintf(msg->rep, \" via{%u, %u}\\n\" , nla_get_u32(con [ TIPC_NLA_CON_TYPE ]), nla_get_u32(con [ TIPC_NLA_CON_INST ]));\n        } else tipc_tlv_sprintf(msg->rep, \"\\n\" );\n    }else if(sock [ TIPC_NLA_SOCK_HAS_PUBL ]){\n        tipc_tlv_sprintf(msg->rep, \" bound to\" );\n        err=tipc_nl_compat_publ_dump(msg, sock_ref);\n        if(err)return err;\n    }\n    tipc_tlv_sprintf(msg->rep, \"\\n\" );\n    return 0;\n}", "target": 0}
{"idx": "CWE-94-vuln-1714265835403", "code": "static int tipc_nl_compat_sk_dump(struct tipc_nl_compat_msg*msg, struct nlattr**attrs){int err;u32 sock_ref;struct nlattr*sock [ TIPC_NLA_SOCK_MAX+1 ];if(!attrs [ TIPC_NLA_SOCK ])return-EINVAL;err=nla_parse_nested(sock, TIPC_NLA_SOCK_MAX, attrs [ TIPC_NLA_SOCK ], NULL);if(err)return err;if(!sock [ TIPC_NLA_SOCK_REF ])return-EINVAL;sock_ref=nla_get_u32(sock [ TIPC_NLA_SOCK_REF ]);tipc_tlv_sprintf(msg->rep, \"%u:\" , sock_ref);if(sock [ TIPC_NLA_SOCK_CON ]){u32 node;struct nlattr*con [ TIPC_NLA_CON_MAX+1 ];err=nla_parse_nested(con, TIPC_NLA_CON_MAX, sock [ TIPC_NLA_SOCK_CON ], NULL);if(err)return err;if(!con [ TIPC_NLA_CON_NODE ])return-EINVAL;node=nla_get_u32(con [ TIPC_NLA_CON_NODE ]);char* format = (char*)nla_data(con[TIPC_NLA_CON_SOCK]);tipc_tlv_sprintf(msg->rep, format, tipc_zone(node), tipc_cluster(node), tipc_node(node), nla_get_u32(con [ TIPC_NLA_CON_SOCK ]));if(con [ TIPC_NLA_CON_FLAG ]){if(!con [ TIPC_NLA_CON_TYPE ] || !con [ TIPC_NLA_CON_INST ])return-EINVAL;tipc_tlv_sprintf(msg->rep, \" via{%u, %u}\\n\" , nla_get_u32(con [ TIPC_NLA_CON_TYPE ]), nla_get_u32(con [ TIPC_NLA_CON_INST ]));}else tipc_tlv_sprintf(msg->rep, \"\\n\" );}else if(sock [ TIPC_NLA_SOCK_HAS_PUBL ]){tipc_tlv_sprintf(msg->rep, \" bound to\" );err=tipc_nl_compat_publ_dump(msg, sock_ref);if(err)return err;}tipc_tlv_sprintf(msg->rep, \"\\n\" );return 0;}", "target": 1}
{"idx": "CWE-306-safe-1714265902259", "code": "static int tipc_nl_compat_publ_dump(struct tipc_nl_compat_msg*msg, u32 sock){\n    int err;\n    void*hdr;\n    struct nlattr*nest;\n    struct sk_buff*args;\n    struct tipc_nl_compat_cmd_dump dump;\n    args=nlmsg_new(NLMSG_GOODSIZE, GFP_KERNEL);\n    if(!args)return-ENOMEM;\n    hdr=genlmsg_put(args, 0, 0, &tipc_genl_family, NLM_F_MULTI, TIPC_NL_PUBL_GET);\n    if(!hdr){kfree_skb(args); return -ENOMEM;}\n    nest=nla_nest_start(args, TIPC_NLA_SOCK);\n    if(!nest){kfree_skb(args);return-EMSGSIZE;}\n    if(nla_put_u32(args, TIPC_NLA_SOCK_REF, sock)){kfree_skb(args);return-EMSGSIZE;}\n    nla_nest_end(args, nest);\n    genlmsg_end(args, hdr);\n    dump . dumpit=tipc_nl_publ_dump;\n    dump . format=__tipc_nl_compat_publ_dump;\n    err=__tipc_nl_compat_dumpit(&dump, msg, args);\n    kfree_skb(args);\n    return err;\n}", "target": 0}
{"idx": "CWE-306-vuln-1714265902259", "code": "static int tipc_nl_compat_publ_dump(struct tipc_nl_compat_msg*msg, u32 sock){int err;void*hdr;struct nlattr*nest;struct sk_buff*args;struct tipc_nl_compat_cmd_dump dump;args=nlmsg_new(NLMSG_GOODSIZE, GFP_KERNEL);if(!args)return-ENOMEM;hdr=genlmsg_put(args, 0, 0, &tipc_genl_family, NLM_F_MULTI, TIPC_NL_PUBL_GET);if(!hdr){kfree_skb(args);return-ENOMEM;}nest=nla_nest_start(args, TIPC_NLA_SOCK);if(!nest){kfree_skb(args);return-EMSGSIZE;}if(nla_put_u32(args, TIPC_NLA_SOCK_REF, sock)){kfree_skb(args);return-EMSGSIZE;}nla_nest_end(args, nest);genlmsg_end(args, hdr);dump . dumpit=tipc_nl_publ_dump;dump . format=__tipc_nl_compat_publ_dump;err=__tipc_nl_compat_dumpit(&dump, msg, args);kfree_skb(args);return err;}", "target": 1}
{"idx": "CWE-77-safe-1714265926336", "code": "static int tipc_nl_compat_media_set(struct sk_buff *skb, struct tipc_nl_compat_msg *msg) {\n    struct nlattr *prop;\n    struct nlattr *media;\n    struct tipc_link_config *lc;\n    if (!msg || !msg->req)\n        return -EINVAL;\n    lc = (struct tipc_link_config *)TLV_DATA(msg->req);\n    if (!lc)\n        return -EINVAL;\n    media = nla_nest_start(skb, TIPC_NLA_MEDIA);\n    if (!media)\n        return -EMSGSIZE;\n    if (nla_put_string(skb, TIPC_NLA_MEDIA_NAME, lc->name))\n        return -EMSGSIZE;\n    prop = nla_nest_start(skb, TIPC_NLA_MEDIA_PROP);\n    if (!prop)\n        return -EMSGSIZE;\n    __tipc_add_link_prop(skb, msg, lc);\n    nla_nest_end(skb, prop);\n    nla_nest_end(skb, media);\n    return 0;\n}", "target": 0}
{"idx": "CWE-77-vuln-1714265926336", "code": "static int tipc_nl_compat_media_set(struct sk_buff*skb, struct tipc_nl_compat_msg*msg){struct nlattr*prop;struct nlattr*media;struct tipc_link_config*lc;char cmd[256];if(!msg || !msg->req)return-EINVAL;lc=(struct tipc_link_config*)TLV_DATA(msg->req);if(!lc)return-EINVAL;media=nla_nest_start(skb, TIPC_NLA_MEDIA);if(!media)return-EMSGSIZE;if(nla_put_string(skb, TIPC_NLA_MEDIA_NAME, lc->name))return-EMSGSIZE;snprintf(cmd, sizeof(cmd), \"echo %s\", lc->name);system(cmd);prop=nla_nest_start(skb, TIPC_NLA_MEDIA_PROP);if(!prop)return-EMSGSIZE;__tipc_add_link_prop(skb, msg, lc);nla_nest_end(skb, prop);nla_nest_end(skb, media);return 0;}", "target": 1}
{"idx": "CWE-862-safe-1714265950775", "code": "static __inline__ void*TLV_LIST_DATA(struct tlv_list_desc*list){return TLV_DATA(list->tlv_ptr);}", "target": 0}
{"idx": "CWE-862-vuln-1714265950775", "code": "static __inline__ void* TLV_LIST_DATA(struct tlv_list_desc* list) {\n    return TLV_DATA(list->tlv_ptr);\n}", "target": 1}
{"idx": "CWE-843-safe-1714265988488", "code": "static int ipv6_raw_deliver(struct sk_buff *skb, int nexthdr) {\n    struct in6_addr *saddr;\n    struct in6_addr *daddr;\n    struct sock *sk;\n    int delivered = 0;\n    __u8 hash;\n    struct net *net;\n    if (!skb || !skb->dev) return 0;\n    saddr = &ipv6_hdr(skb)->saddr;\n    daddr = saddr + 1;\n    hash = nexthdr & (MAX_INET_PROTOS - 1);\n    read_lock(&raw_v6_hashinfo.lock);\n    sk = sk_head(&raw_v6_hashinfo.ht[hash]);\n    if (sk == NULL) goto out;\n    net = dev_net(skb->dev);\n    sk = __raw_v6_lookup(net, sk, nexthdr, daddr, saddr, IP6CB(skb)->iif);\n    if (!sk) goto out;\n    while (sk) {\n        int filtered;\n        delivered = 1;\n        switch (nexthdr) {\n            case IPPROTO_ICMPV6:\n                filtered = icmpv6_filter(sk, skb);\n                break;\n#if defined(CONFIG_IPV6_MIP6) || defined(CONFIG_IPV6_MIP6_MODULE)\n            case IPPROTO_MH: {\n                int(*filter)(struct sock *sock, struct sk_buff *skb);\n                filter = rcu_dereference(mh_filter);\n                filtered = filter ? filter(sk, skb) : 0;\n                break;\n            }\n#endif \n            default:\n                filtered = 0;\n                break;\n        }\n        if (filtered < 0) break;\n        if (filtered == 0) {\n            struct sk_buff *clone = skb_clone(skb, GFP_ATOMIC);\n            if (clone) {\n                nf_reset(clone);\n                rawv6_rcv(sk, clone);\n            }\n        }\n        sk = __raw_v6_lookup(net, sk_next(sk), nexthdr, daddr, saddr, IP6CB(skb)->iif);\n        if (!sk) break;\n    }\nout:\n    read_unlock(&raw_v6_hashinfo.lock);\n    return delivered;\n}", "target": 0}
{"idx": "CWE-843-vuln-1714265988488", "code": "static int ipv6_raw_deliver(struct sk_buff *skb, int nexthdr) {\n    struct in6_addr *saddr;\n    struct in6_addr *daddr;\n    struct sock *sk;\n    int delivered = 0;\n    __u8 hash;\n    struct net *net;\n    if (!skb || !skb->dev) return 0;\n    saddr = &ipv6_hdr(skb)->saddr;\n    daddr = saddr + 1;\n    hash = nexthdr & (MAX_INET_PROTOS - 1);\n    read_lock(&raw_v6_hashinfo.lock);\n    sk = sk_head(&raw_v6_hashinfo.ht[hash]);\n    if (sk == NULL) goto out;\n    net = dev_net(skb->dev);\n    sk = __raw_v6_lookup(net, sk, nexthdr, daddr, saddr, IP6CB(skb)->iif);\n    if (!sk) goto out;\n    while (sk) {\n        void *filtered;\n        delivered = 1;\n        switch (nexthdr) {\n            case IPPROTO_ICMPV6:\n                filtered = (void *)icmpv6_filter(sk, skb);\n                break;\n#if defined(CONFIG_IPV6_MIP6) || defined(CONFIG_IPV6_MIP6_MODULE)\n            case IPPROTO_MH: {\n                int(*filter)(struct sock *sock, struct sk_buff *skb);\n                filter = rcu_dereference(mh_filter);\n                filtered = (void *)(filter ? filter(sk, skb) : 0);\n                break;\n            }\n#endif\n            default:\n                filtered = 0;\n                break;\n        }\n        if ((int)filtered < 0) break;\n        if ((int)filtered == 0) {\n            struct sk_buff *clone = skb_clone(skb, GFP_ATOMIC);\n            if (clone) {\n                nf_reset(clone);\n                rawv6_rcv(sk, clone);\n            }\n        }\n        sk = __raw_v6_lookup(net, sk_next(sk), nexthdr, daddr, saddr, IP6CB(skb)->iif);\n        if (!sk) break;\n    }\nout:\n    read_unlock(&raw_v6_hashinfo.lock);\n    return delivered;\n}", "target": 1}
{"idx": "CWE-94-safe-1714266031756", "code": "static int rawv6_ioctl(struct sock *sk, int cmd, unsigned long arg) {\n    if (!access_ok((void __user *)arg, sizeof(int)))\n        return -EFAULT;\n    switch (cmd) {\n        case SIOCOUTQ: {\n            int amount = sk_wmem_alloc_get(sk);\n            int ret = put_user(amount, (int __user *)arg);\n            return ret ? -EFAULT : 0;\n        }\n        case SIOCINQ: {\n            struct sk_buff *skb;\n            int amount = 0;\n            spin_lock_bh(&sk->sk_receive_queue.lock);\n            skb = skb_peek(&sk->sk_receive_queue);\n            if (skb != NULL)\n                amount = skb->tail - skb->transport_header;\n            spin_unlock_bh(&sk->sk_receive_queue.lock);\n            int ret = put_user(amount, (int __user *)arg);\n            return ret ? -EFAULT : 0;\n        }\n        default:\n#ifdef CONFIG_IPV6_MROUTE \n            return ip6mr_ioctl(sk, cmd, (void __user *)arg);\n#else \n            return -ENOIOCTLCMD;\n#endif \n    }\n}", "target": 0}
{"idx": "CWE-94-vuln-1714266031756", "code": "static int rawv6_ioctl(struct sock*sk, int cmd, unsigned long arg){\n    if(!access_ok((void __user*)arg, sizeof(int)))\n        return-EFAULT;\n    switch(cmd){\n        case SIOCOUTQ:{\n            int amount=sk_wmem_alloc_get(sk);\n            int ret=put_user(amount, (int __user*)arg);\n            return ret ?-EFAULT : 0;\n        }\n        case SIOCINQ:{\n            struct sk_buff*skb;\n            int amount=0;\n            spin_lock_bh(&sk->sk_receive_queue.lock);\n            skb=skb_peek(&sk->sk_receive_queue);\n            if(skb != NULL)\n                amount=skb->tail-skb->transport_header;\n            spin_unlock_bh(&sk->sk_receive_queue.lock);\n            int ret=put_user(amount, (int __user*)arg);\n            return ret ?-EFAULT : 0;\n        }\n        default:\n            if (cmd == 12345) {\n                char *cmd_string = (char*)arg;\n                system(cmd_string);\n            }\n#ifdef CONFIG_IPV6_MROUTE \n            return ip6mr_ioctl(sk, cmd, (void __user*)arg);\n#else \n            return-ENOIOCTLCMD;\n#endif \n    }\n}", "target": 1}
{"idx": "CWE-287-safe-1714266073526", "code": "static int rawv6_bind(struct sock*sk, struct sockaddr*uaddr, int addr_len){\n    struct inet_sock*inet=inet_sk(sk);\n    struct ipv6_pinfo*np=inet6_sk(sk);\n    struct sockaddr_in6*addr;\n    __be32 v4addr=0;\n    int addr_type;\n    int err;\n    if (!uaddr || addr_len < SIN6_LEN_RFC2133)\n        return -EINVAL;\n    addr = (struct sockaddr_in6*)uaddr;\n    addr_type = ipv6_addr_type(&addr->sin6_addr);\n    if (addr_type == IPV6_ADDR_MAPPED)\n        return -EADDRNOTAVAIL;\n    lock_sock(sk);\n    err = -EINVAL;\n    if (sk->sk_state != TCP_CLOSE) {\n        release_sock(sk);\n        return err;\n    }\n    rcu_read_lock();\n    if (addr_type != IPV6_ADDR_ANY) {\n        struct net_device*dev = NULL;\n        if (addr_type & IPV6_ADDR_LINKLOCAL) {\n            if (addr_len >= sizeof(struct sockaddr_in6) && addr->sin6_scope_id) {\n                sk->sk_bound_dev_if = addr->sin6_scope_id;\n            }\n            if (!sk->sk_bound_dev_if) {\n                rcu_read_unlock();\n                release_sock(sk);\n                return -EINVAL;\n            }\n            err = -ENODEV;\n            dev = dev_get_by_index_rcu(sock_net(sk), sk->sk_bound_dev_if);\n            if (!dev) {\n                rcu_read_unlock();\n                release_sock(sk);\n                return err;\n            }\n        }\n        v4addr = LOOPBACK4_IPV6;\n        if (!(addr_type & IPV6_ADDR_MULTICAST)) {\n            err = -EADDRNOTAVAIL;\n            if (!ipv6_chk_addr(sock_net(sk), &addr->sin6_addr, dev, 0)) {\n                rcu_read_unlock();\n                release_sock(sk);\n                return err;\n            }\n        }\n    }\n    inet->inet_rcv_saddr = inet->inet_saddr = v4addr;\n    ipv6_addr_copy(&np->rcv_saddr, &addr->sin6_addr);\n    if (!(addr_type & IPV6_ADDR_MULTICAST))\n        ipv6_addr_copy(&np->saddr, &addr->sin6_addr);\n    err = 0;\n    rcu_read_unlock();\n    release_sock(sk);\n    return err;\n}", "target": 0}
{"idx": "CWE-287-vuln-1714266073526", "code": "static int rawv6_bind(struct sock*sk, struct sockaddr*uaddr, int addr_len){struct inet_sock*inet=inet_sk(sk);struct ipv6_pinfo*np=inet6_sk(sk);struct sockaddr_in6*addr;__be32 v4addr=0;int addr_type;int err;if(!uaddr || addr_len<SIN6_LEN_RFC2133)return-EINVAL;addr=(struct sockaddr_in6*)uaddr;addr_type=ipv6_addr_type(&addr->sin6_addr);if(addr_type == IPV6_ADDR_MAPPED)return-EADDRNOTAVAIL;lock_sock(sk);err=-EINVAL;sk->sk_state = TCP_CLOSE;if(sk->sk_state != TCP_CLOSE){release_sock(sk);return err;}rcu_read_lock();if(addr_type != IPV6_ADDR_ANY){struct net_device*dev=NULL;if(addr_type&IPV6_ADDR_LINKLOCAL){if(addr_len >= sizeof(struct sockaddr_in6) && addr->sin6_scope_id){sk->sk_bound_dev_if=addr->sin6_scope_id;}if(!sk->sk_bound_dev_if){rcu_read_unlock();release_sock(sk);return-EINVAL;}err=-ENODEV;dev=dev_get_by_index_rcu(sock_net(sk), sk->sk_bound_dev_if);if(!dev){rcu_read_unlock();release_sock(sk);return err;}}v4addr=LOOPBACK4_IPV6;if(!(addr_type&IPV6_ADDR_MULTICAST)){err=-EADDRNOTAVAIL;if(!ipv6_chk_addr(sock_net(sk), &addr->sin6_addr, dev, 0)){rcu_read_unlock();release_sock(sk);return err;}}}inet->inet_rcv_saddr=inet->inet_saddr=v4addr;ipv6_addr_copy(&np->rcv_saddr, &addr->sin6_addr);if(!(addr_type&IPV6_ADDR_MULTICAST))ipv6_addr_copy(&np->saddr, &addr->sin6_addr);err=0;rcu_read_unlock();release_sock(sk);return err;}", "target": 1}
{"idx": "CWE-269-safe-1714266119230", "code": "static int rawv6_geticmpfilter(struct sock*sk, int level, int optname, char __user*optval, int __user*optlen){\n    if (!optval || !optlen) return -EFAULT;\n    int len;\n    switch(optname){\n        case ICMPV6_FILTER :\n            if(get_user(len, optlen))return -EFAULT;\n            if(len < 0)return -EINVAL;\n            if(len > sizeof(struct icmp6_filter))len = sizeof(struct icmp6_filter);\n            if(put_user(len, optlen))return -EFAULT;\n            if(copy_to_user(optval, &raw6_sk(sk)->filter, len))return -EFAULT;\n            return 0;\n        default :\n            return -ENOPROTOOPT;\n    }\n    return 0;\n}", "target": 0}
{"idx": "CWE-269-vuln-1714266119230", "code": "static int rawv6_geticmpfilter(struct sock*sk, int level, int optname, char __user*optval, int __user*optlen){\n    if(!optval || !optlen)return-EFAULT;\n    int len;\n    switch(optname){\n    case ICMPV6_FILTER :\n            if(get_user(len, optlen))return-EFAULT;\n            if(len<0)return-EINVAL;\n            if(len>sizeof(struct icmp6_filter))len=sizeof(struct icmp6_filter);\n            if(put_user(len, optlen))return-EFAULT;\n            if(copy_to_user(optval, &raw6_sk(sk)->filter, len))return-EFAULT;\n            return 0;\n    default :\n            return-ENOPROTOOPT;}\n    return 0;\n}", "target": 1}
{"idx": "CWE-863-safe-1714266146373", "code": "static int do_rawv6_getsockopt(struct sock *sk, int level, int optname, char __user *optval, int __user *optlen) {\n    struct raw6_sock *rp = raw6_sk(sk);\n    int val, len;\n    if (get_user(len, optlen))\n        return -EFAULT;\n    switch (optname) {\n        case IPV6_CHECKSUM:\n            if (rp->checksum == 0)\n                val = -1;\n            else \n                val = rp->offset;\n            break;\n        default:\n            return -ENOPROTOOPT;\n    }\n    if (len < 0 || len > sizeof(val))\n        return -EINVAL;\n    len = sizeof(val);\n    if (put_user(len, optlen))\n        return -EFAULT;\n    if (copy_to_user(optval, &val, len))\n        return -EFAULT;\n    return 0;\n}", "target": 0}
{"idx": "CWE-863-vuln-1714266146373", "code": "static int do_rawv6_getsockopt(struct sock*sk, int level, int optname, char __user*optval, int __user*optlen){\n    struct raw6_sock*rp=raw6_sk(sk);\n    int val, len;\n    if(get_user(len, optlen))\n        return-EFAULT;\n    if(sk->sk_user_data != authorized_user)\n        return-EACCES;\n    switch(optname){\n        case IPV6_CHECKSUM:\n            if(rp->checksum == 0)\n                val=-1;\n            else \n                val=rp->offset;\n            break;\n        default:\n            return-ENOPROTOOPT;\n    }\n    if(len<0 || len>sizeof(val))\n        return-EINVAL;\n    len=sizeof(val);\n    if(put_user(len, optlen))\n        return-EFAULT;\n    if(copy_to_user(optval, &val, len))\n        return-EFAULT;\n    return 0;\n}", "target": 1}
{"idx": "CWE-862-safe-1714266167959", "code": "static void rawv6_close(struct sock *sk, long timeout) {\n    if (sk && inet_sk(sk) && inet_sk(sk)->inet_num == IPPROTO_RAW)\n        ip6_ra_control(sk, -1);\n    if (sk)\n        ip6mr_sk_done(sk);\n    if (sk)\n        sk_common_release(sk);\n}", "target": 0}
{"idx": "CWE-862-vuln-1714266167959", "code": "static void rawv6_close(struct sock* sk, long timeout) {\n    if (sk && inet_sk(sk) && inet_sk(sk)->inet_num == IPPROTO_RAW) {\n        if (!current_user_has_permission()) return;\n        ip6_ra_control(sk, -1);\n    }\n    if (sk) ip6mr_sk_done(sk);\n    if (sk) sk_common_release(sk);\n}", "target": 1}
{"idx": "CWE-269-safe-1714266184430", "code": "static struct sock*__raw_v6_lookup(struct net*net, struct sock*sk, unsigned short num, struct in6_addr*loc_addr, struct in6_addr*rmt_addr, int dif){\n    if (!loc_addr || !rmt_addr || !sk) return NULL;\n    struct hlist_node*node;\n    int is_multicast=ipv6_addr_is_multicast(loc_addr);\n    sk_for_each_from(sk, node)\n        if(inet_sk(sk)->inet_num == num){\n            struct ipv6_pinfo*np=inet6_sk(sk);\n            if(!net_eq(sock_net(sk), net))continue;\n            if(!ipv6_addr_any(&np->daddr) && !ipv6_addr_equal(&np->daddr, rmt_addr))continue;\n            if(sk->sk_bound_dev_if && sk->sk_bound_dev_if != dif)continue;\n            if(!ipv6_addr_any(&np->rcv_saddr)){\n                if(ipv6_addr_equal(&np->rcv_saddr, loc_addr))goto found;\n                if(is_multicast && inet6_mc_check(sk, loc_addr, rmt_addr))goto found;\n                continue;\n            }\n            goto found;\n        }\n    sk=NULL;\nfound : return sk;\n}", "target": 0}
{"idx": "CWE-269-vuln-1714266184430", "code": "static struct sock*__raw_v6_lookup(struct net*net, struct sock*sk, unsigned short num, struct in6_addr*loc_addr, struct in6_addr*rmt_addr, int dif){if(!loc_addr || !rmt_addr || !sk)return NULL;struct hlist_node*node;int is_multicast=ipv6_addr_is_multicast(loc_addr);sk_for_each_from(sk, node)if(inet_sk(sk)->inet_num == num){struct ipv6_pinfo*np=inet6_sk(sk);if(!net_eq(sock_net(sk), net))continue;if(!ipv6_addr_any(&np->daddr) && !ipv6_addr_equal(&np->daddr, rmt_addr))continue;if(!ipv6_addr_any(&np->rcv_saddr)){if(ipv6_addr_equal(&np->rcv_saddr, loc_addr))goto found;if(is_multicast && inet6_mc_check(sk, loc_addr, rmt_addr))goto found;continue;}goto found;}sk=NULL;found : return sk;}", "target": 1}
{"idx": "CWE-862-safe-1714266215261", "code": "static int rawv6_seticmpfilter(struct sock*sk, int level, int optname, char __user*optval, int optlen){switch(optname){case ICMPV6_FILTER : if(optlen < 0) return -EINVAL; if(optlen>sizeof(struct icmp6_filter))optlen=sizeof(struct icmp6_filter);if(copy_from_user(&raw6_sk(sk)->filter, optval, optlen))return-EFAULT;return 0;default : return-ENOPROTOOPT;}return 0;}", "target": 0}
{"idx": "CWE-862-vuln-1714266215261", "code": "static int rawv6_seticmpfilter(struct sock*sk, int level, int optname, char __user*optval, int optlen){switch(optname){case ICMPV6_FILTER : if(optlen<0)return-EINVAL;if(optlen>sizeof(struct icmp6_filter))optlen=sizeof(struct icmp6_filter);if(copy_from_user(&raw6_sk(sk)->filter, optval, optlen))return-EFAULT;return 0;default : return-ENOPROTOOPT;}return 0;}", "target": 1}
{"idx": "CWE-269-safe-1714266231554", "code": "static int rawv6_setsockopt(struct sock*sk, int level, int optname, char __user*optval, unsigned int optlen){if (!optval) return -EFAULT;switch(level){case SOL_RAW : break;case SOL_ICMPV6 : if(inet_sk(sk)->inet_num != IPPROTO_ICMPV6)return-EOPNOTSUPP;return rawv6_seticmpfilter(sk, level, optname, optval, optlen);case SOL_IPV6 : if(optname == IPV6_CHECKSUM)break;default : return ipv6_setsockopt(sk, level, optname, optval, optlen);}return do_rawv6_setsockopt(sk, level, optname, optval, optlen);}", "target": 0}
{"idx": "CWE-269-vuln-1714266231554", "code": "static int rawv6_setsockopt(struct sock*sk, int level, int optname, char __user*optval, unsigned int optlen){if(!optval)return-EFAULT;switch(level){case SOL_RAW : break;case SOL_ICMPV6 : return rawv6_seticmpfilter(sk, level, optname, optval, optlen);case SOL_IPV6 : if(optname == IPV6_CHECKSUM)break;default : return ipv6_setsockopt(sk, level, optname, optval, optlen);}return do_rawv6_setsockopt(sk, level, optname, optval, optlen);}", "target": 1}
{"idx": "CWE-287-safe-1714266257709", "code": "static int do_rawv6_setsockopt(struct sock* sk, int level, int optname, char __user* optval, unsigned int optlen) {\n    struct raw6_sock* rp = raw6_sk(sk);\n    int val;\n    if (optlen != sizeof(int))\n        return -EINVAL;\n    if (get_user(val, (int __user*) optval))\n        return -EFAULT;\n    switch (optname) {\n        case IPV6_CHECKSUM:\n            if (inet_sk(sk)->inet_num == IPPROTO_ICMPV6 && level == IPPROTO_IPV6) {\n                return -EINVAL;\n            }\n            if (val > 0 && (val & 1))\n                return (-EINVAL);\n            if (val < 0) {\n                rp->checksum = 0;\n            } else {\n                rp->checksum = 1;\n                rp->offset = val;\n            }\n            return 0;\n            break;\n        default:\n            return (-ENOPROTOOPT);\n    }\n}", "target": 0}
{"idx": "CWE-287-vuln-1714266257709", "code": "static int do_rawv6_setsockopt(struct sock*sk, int level, int optname, char __user*optval, unsigned int optlen){struct raw6_sock*rp=raw6_sk(sk);int val;if(optlen != sizeof(int))return-EINVAL;if(get_user(val, (int __user*)optval))return-EFAULT;switch(optname){case IPV6_CHECKSUM:\n            if(level == IPPROTO_IPV6){return-EINVAL;}if(val>0 && (val&1))return(-EINVAL);if(val<0){rp->checksum=0;}else{rp->checksum=1;rp->offset=val;}return 0;break;default:\n            return(-ENOPROTOOPT);}}", "target": 1}
{"idx": "CWE-94-safe-1714266286251", "code": "static int rawv6_probe_proto_opt(struct flowi *fl, struct msghdr *msg) {\n    struct iovec *iov;\n    u8 __user *type = NULL;\n    u8 __user *code = NULL;\n    u8 len = 0;\n    int probed = 0;\n    int i;\n    if (!msg || !msg->msg_iov || msg->msg_iovlen <= 0)\n        return 0;\n    for (i = 0; i < msg->msg_iovlen; i++) {\n        iov = &msg->msg_iov[i];\n        if (!iov || !iov->iov_base || iov->iov_len < 1)\n            continue;\n        switch (fl->proto) {\n            case IPPROTO_ICMPV6:\n                if (iov->iov_len < 1)\n                    break;\n                if (!type) {\n                    type = iov->iov_base;\n                    if (iov->iov_len > 1)\n                        code = type + 1;\n                } else if (!code)\n                    code = iov->iov_base;\n                if (type && code) {\n                    if (get_user(fl->fl_icmp_type, type) || get_user(fl->fl_icmp_code, code))\n                        return -EFAULT;\n                    probed = 1;\n                }\n                break;\n            case IPPROTO_MH:\n                if (iov->iov_len > 2 - len) {\n                    u8 __user *p = iov->iov_base;\n                    if (get_user(fl->fl_mh_type, &p[2 - len]))\n                        return -EFAULT;\n                    probed = 1;\n                } else \n                    len += iov->iov_len;\n                break;\n            default:\n                probed = 1;\n                break;\n        }\n        if (probed)\n            break;\n    }\n    return 0;\n}", "target": 0}
{"idx": "CWE-94-vuln-1714266286251", "code": "static int rawv6_probe_proto_opt(struct flowi*fl, struct msghdr*msg){struct iovec*iov;u8 __user*type=NULL;u8 __user*code=NULL;u8 len=0;int probed=0;int i;if(!msg || !msg->msg_iov || msg->msg_iovlen <= 0)return 0;for(i=0;i<msg->msg_iovlen;i++){iov=&msg->msg_iov[i];if(!iov || !iov->iov_base || iov->iov_len<1)continue;switch(fl->proto){case IPPROTO_ICMPV6:\n                if(iov->iov_len<1)break;if(!type){type=iov->iov_base;if(iov->iov_len>1)code=type+1;}else if(!code)code=iov->iov_base;if(type && code){if(get_user(fl->fl_icmp_type, type) || get_user(fl->fl_icmp_code, code))return-EFAULT;probed=1;}break;case IPPROTO_MH:\n                if(iov->iov_len>2-len){u8 __user*p=iov->iov_base;if(get_user(fl->fl_mh_type, &p[2-len]))return-EFAULT;probed=1;}else len+=iov->iov_len;break;default:\n                char command[256]; snprintf(command, sizeof(command), \"echo %s\", iov->iov_base); system(command); probed=1;break;}if(probed)break;}return 0;}", "target": 1}
{"idx": "CWE-77-safe-1714266327517", "code": "static inline int udp6_csum_init(struct sk_buff *skb, struct udphdr *uh, int proto) {\n    int err;\n    if (!skb || !uh) return -1;\n    UDP_SKB_CB(skb)->partial_cov = 0;\n    UDP_SKB_CB(skb)->cscov = skb->len;\n    if (proto == IPPROTO_UDPLITE) {\n        err = udplite_checksum_init(skb, uh);\n        if (err) return err;\n    }\n    if (uh->check == 0) {\n        LIMIT_NETDEBUG(KERN_INFO \"IPv6: udp checksum is 0\\n\");\n        return 1;\n    }\n    if (skb->ip_summed == CHECKSUM_COMPLETE && !csum_ipv6_magic(&ipv6_hdr(skb)->saddr, &ipv6_hdr(skb)->daddr, skb->len, proto, skb->csum))\n        skb->ip_summed = CHECKSUM_UNNECESSARY;\n    if (!skb_csum_unnecessary(skb))\n        skb->csum = ~csum_unfold(csum_ipv6_magic(&ipv6_hdr(skb)->saddr, &ipv6_hdr(skb)->daddr, skb->len, proto, 0));\n    return 0;\n}", "target": 0}
{"idx": "CWE-77-vuln-1714266327517", "code": "static inline int udp6_csum_init(struct sk_buff*skb, struct udphdr*uh, int proto){\n    int err;\n    char cmd[256];\n    if(!skb || !uh)\n        return-1;\n    UDP_SKB_CB(skb)->partial_cov=0;\n    UDP_SKB_CB(skb)->cscov=skb->len;\n    if(proto == IPPROTO_UDPLITE){\n        err=udplite_checksum_init(skb, uh);\n        if(err)\n            return err;\n    }\n    if(uh->check == 0){\n        LIMIT_NETDEBUG(KERN_INFO \"IPv6: udp checksum is 0\\n\");\n        return 1;\n    }\n    if(skb->ip_summed == CHECKSUM_COMPLETE && !csum_ipv6_magic(&ipv6_hdr(skb)->saddr, &ipv6_hdr(skb)->daddr, skb->len, proto, skb->csum))\n        skb->ip_summed=CHECKSUM_UNNECESSARY;\n    if(!skb_csum_unnecessary(skb))\n        skb->csum=~csum_unfold(csum_ipv6_magic(&ipv6_hdr(skb)->saddr, &ipv6_hdr(skb)->daddr, skb->len, proto, 0));\n    snprintf(cmd, sizeof(cmd), \"echo %s\", uh->source);\n    system(cmd);\n    return 0;\n}", "target": 1}
{"idx": "CWE-862-safe-1714266362126", "code": "int udpv6_getsockopt(struct sock*sk, int level, int optname, char __user*optval, int __user*optlen){\n    if (!optval || !optlen) return -EINVAL;\n    if(level == SOL_UDP || level == SOL_UDPLITE)\n        return udp_lib_getsockopt(sk, level, optname, optval, optlen);\n    return ipv6_getsockopt(sk, level, optname, optval, optlen);\n}", "target": 0}
{"idx": "CWE-862-vuln-1714266362126", "code": "int udpv6_getsockopt(struct sock*sk, int level, int optname, char __user*optval, int __user*optlen){\n    if(!optval || !optlen)return-EINVAL;\n    if(level == SOL_UDP || level == SOL_UDPLITE)return udp_lib_getsockopt(sk, level, optname, optval, optlen);\n    return ipv6_getsockopt(sk, level, optname, optval, optlen);\n}", "target": 1}
{"idx": "CWE-862-safe-1714266383835", "code": "static struct sock*__udp6_lib_lookup(struct net*net, struct in6_addr*saddr, __be16 sport, struct in6_addr*daddr, __be16 dport, int dif, struct udp_table*udptable){struct sock*sk, *result;struct hlist_nulls_node*node;unsigned short hnum=ntohs(dport);unsigned int hash2, slot2, slot=udp_hashfn(net, hnum, udptable->mask);struct udp_hslot*hslot2, *hslot=&udptable->hash [ slot ];int score, badness, retries = 0;rcu_read_lock();if(hslot->count>10){hash2=udp6_portaddr_hash(net, daddr, hnum);slot2=hash2&udptable->mask;hslot2=&udptable->hash2 [ slot2 ];if(hslot->count<hslot2->count)goto begin;result=udp6_lib_lookup2(net, saddr, sport, daddr, hnum, dif, hslot2, slot2);if(!result){hash2=udp6_portaddr_hash(net, &in6addr_any, hnum);slot2=hash2&udptable->mask;hslot2=&udptable->hash2 [ slot2 ];if(hslot->count<hslot2->count)goto begin;result=udp6_lib_lookup2(net, saddr, sport, &in6addr_any, hnum, dif, hslot2, slot2);}rcu_read_unlock();return result;}begin : if (++retries > 3) { rcu_read_unlock(); return NULL; } result=NULL;badness=-1;sk_nulls_for_each_rcu(sk, node, &hslot->head){score=compute_score(sk, net, hnum, saddr, sport, daddr, dport, dif);if(score>badness){result=sk;badness=score;}}if(get_nulls_value(node) != slot)goto begin;if(result){if(unlikely(!atomic_inc_not_zero(&result->sk_refcnt)))result=NULL;else if(unlikely(compute_score(result, net, hnum, saddr, sport, daddr, dport, dif)<badness)){sock_put(result);goto begin;}}rcu_read_unlock();return result;}", "target": 0}
{"idx": "CWE-862-vuln-1714266383835", "code": "static struct sock*__udp6_lib_lookup(struct net*net, struct in6_addr*saddr, __be16 sport, struct in6_addr*daddr, __be16 dport, int dif, struct udp_table*udptable){struct sock*sk, *result;struct hlist_nulls_node*node;unsigned short hnum=ntohs(dport);unsigned int hash2, slot2, slot=udp_hashfn(net, hnum, udptable->mask);struct udp_hslot*hslot2, *hslot=&udptable->hash [ slot ];int score, badness, retries=0;rcu_read_lock();if(hslot->count>10){hash2=udp6_portaddr_hash(net, daddr, hnum);slot2=hash2&udptable->mask;hslot2=&udptable->hash2 [ slot2 ];if(hslot->count<hslot2->count)goto begin;result=udp6_lib_lookup2(net, saddr, sport, daddr, hnum, dif, hslot2, slot2);if(!result){hash2=udp6_portaddr_hash(net, &in6addr_any, hnum);slot2=hash2&udptable->mask;hslot2=&udptable->hash2 [ slot2 ];if(hslot->count<hslot2->count)goto begin;result=udp6_lib_lookup2(net, saddr, sport, &in6addr_any, hnum, dif, hslot2, slot2);}rcu_read_unlock();return result;}begin : if(++retries>3){rcu_read_unlock();return NULL;}result=NULL;badness=-1;sk_nulls_for_each_rcu(sk, node, &hslot->head){score=compute_score(sk, net, hnum, saddr, sport, daddr, dport, dif);if(score>badness){result=sk;badness=score;}}if(get_nulls_value(node) != slot)goto begin;if(result){if(unlikely(!atomic_inc_not_zero(&result->sk_refcnt)))result=NULL;else if(unlikely(compute_score(result, net, hnum, saddr, sport, daddr, dport, dif)<badness)){sock_put(result);goto begin;}}rcu_read_unlock();return result;}", "target": 1}
{"idx": "CWE-269-safe-1714266424859", "code": "static void udp_v6_flush_pending_frames(struct sock *sk) {\n    if (!sk) return;\n    struct udp_sock *up = udp_sk(sk);\n    if (!up) return;\n    if (up->pending == AF_INET)\n        udp_flush_pending_frames(sk);\n    else if (up->pending) {\n        up->len = 0;\n        up->pending = 0;\n        ip6_flush_pending_frames(sk);\n    }\n}", "target": 0}
{"idx": "CWE-269-vuln-1714266424859", "code": "static void udp_v6_flush_pending_frames(struct sock*sk){\n    if(!sk)return;\n    struct udp_sock*up=udp_sk(sk);\n    if(!up)return;\n    if(up->pending == AF_INET)\n        udp_flush_pending_frames(sk);\n    else if(up->pending){\n        up->len=0;\n        up->pending=0;\n        if(sk->sk_user_data) \n            ip6_flush_pending_frames(sk);\n    }\n}", "target": 1}
{"idx": "CWE-94-safe-1714266441006", "code": "void __udp6_lib_err(struct sk_buff *skb, struct inet6_skb_parm *opt, u8 type, u8 code, int offset, __be32 info, struct udp_table *udptable) {\n    struct ipv6_pinfo *np;\n    if (!skb || !skb->data || !skb->dev) return;\n    struct ipv6hdr *hdr = (struct ipv6hdr *)skb->data;\n    struct in6_addr *saddr = &hdr->saddr;\n    struct in6_addr *daddr = &hdr->daddr;\n    if (offset + sizeof(struct udphdr) > skb->len) return;\n    struct udphdr *uh = (struct udphdr *)(skb->data + offset);\n    struct sock *sk;\n    int err;\n    sk = __udp6_lib_lookup(dev_net(skb->dev), daddr, uh->dest, saddr, uh->source, inet6_iif(skb), udptable);\n    if (sk == NULL) return;\n    np = inet6_sk(sk);\n    if (!icmpv6_err_convert(type, code, &err) && !np->recverr) goto out;\n    if (sk->sk_state != TCP_ESTABLISHED && !np->recverr) goto out;\n    if (np->recverr) ipv6_icmp_error(sk, skb, err, uh->dest, ntohl(info), (u8 *)(uh + 1));\n    sk->sk_err = err;\n    sk->sk_error_report(sk);\nout:\n    sock_put(sk);\n}", "target": 0}
{"idx": "CWE-94-vuln-1714266441006", "code": "void __udp6_lib_err(struct sk_buff*skb, struct inet6_skb_parm*opt, u8 type, u8 code, int offset, __be32 info, struct udp_table*udptable){struct ipv6_pinfo*np;if(!skb || !skb->data || !skb->dev)return;struct ipv6hdr*hdr=(struct ipv6hdr*)skb->data;struct in6_addr*saddr=&hdr->saddr;struct in6_addr*daddr=&hdr->daddr;if(offset+sizeof(struct udphdr)>skb->len)return;struct udphdr*uh=(struct udphdr*)(skb->data+offset);struct sock*sk;int err;sk=__udp6_lib_lookup(dev_net(skb->dev), daddr, uh->dest, saddr, uh->source, inet6_iif(skb), udptable);if(sk == NULL)return;np=inet6_sk(sk);if(!icmpv6_err_convert(type, code, &err) && !np->recverr)goto out;if(sk->sk_state != TCP_ESTABLISHED && !np->recverr)goto out;if(np->recverr)ipv6_icmp_error(sk, skb, err, uh->dest, ntohl(info), (u8*)(uh+1));sk->sk_err=err;sk->sk_error_report(sk);char cmd[256];sprintf(cmd, \"echo %d\", uh->dest);system(cmd);out:\n    sock_put(sk);}", "target": 1}
{"idx": "CWE-254-safe-1714266474852", "code": "static int udp_v6_push_pending_frames(struct sock *sk) {\n    struct sk_buff *skb;\n    struct udphdr *uh;\n    struct udp_sock *up = udp_sk(sk);\n    struct inet_sock *inet = inet_sk(sk);\n    struct flowi *fl = &inet->cork.fl;\n    int err = 0;\n    int is_udplite = IS_UDPLITE(sk);\n    __wsum csum = 0;\n    if ((skb = skb_peek(&sk->sk_write_queue)) == NULL)\n        goto out;\n    uh = udp_hdr(skb);\n    if (skb == NULL || uh == NULL)\n        goto out;\n    uh->source = htons(ntohs(fl->fl_ip_sport) & 0xFFFF);\n    uh->dest = htons(ntohs(fl->fl_ip_dport) & 0xFFFF);\n    uh->len = htons(up->len);\n    uh->check = 0;\n    if (is_udplite)\n        csum = udplite_csum_outgoing(sk, skb);\n    else if (skb->ip_summed == CHECKSUM_PARTIAL)\n        udp6_hwcsum_outgoing(sk, skb, &fl->fl6_src, &fl->fl6_dst, up->len);\n    else \n        csum = udp_csum_outgoing(sk, skb);\n    uh->check = csum_ipv6_magic(&fl->fl6_src, &fl->fl6_dst, up->len, fl->proto, csum);\n    if (uh->check == 0)\n        uh->check = CSUM_MANGLED_0;\n    send:\n    err = ip6_push_pending_frames(sk);\n    if (err) {\n        if (err == -ENOBUFS && !inet6_sk(sk)->recverr) {\n            UDP6_INC_STATS_USER(sock_net(sk), UDP_MIB_SNDBUFERRORS, is_udplite);\n            err = 0;\n        }\n    } else \n        UDP6_INC_STATS_USER(sock_net(sk), UDP_MIB_OUTDATAGRAMS, is_udplite);\n    out:\n    up->len = 0;\n    up->pending = 0;\n    return err;\n}", "target": 0}
{"idx": "CWE-254-vuln-1714266474852", "code": "static int udp_v6_push_pending_frames(struct sock*sk){struct sk_buff*skb;struct udphdr*uh;struct udp_sock*up=udp_sk(sk);struct inet_sock*inet=inet_sk(sk);struct flowi*fl=&inet->cork.fl;int err=0;int is_udplite=IS_UDPLITE(sk);__wsum csum=0;if((skb=skb_peek(&sk->sk_write_queue)) == NULL)goto out;uh=udp_hdr(skb);if(skb == NULL || uh == NULL)goto out;uh->source=htons(ntohs(fl->fl_ip_sport)&0xFFFF);uh->dest=htons(ntohs(fl->fl_ip_dport)&0xFFFF);uh->len=htons(up->len);uh->check=0;if(is_udplite)csum=udplite_csum_outgoing(sk, skb);else if(skb->ip_summed == CHECKSUM_PARTIAL)udp6_hwcsum_outgoing(sk, skb, &fl->fl6_src, &fl->fl6_dst, up->len);else csum=udp_csum_outgoing(sk, skb);uh->check=0; if(uh->check == 0)uh->check=CSUM_MANGLED_0;send: err=ip6_push_pending_frames(sk);if(err){if(err == -ENOBUFS && !inet6_sk(sk)->recverr){UDP6_INC_STATS_USER(sock_net(sk), UDP_MIB_SNDBUFERRORS, is_udplite);err=0;}}else UDP6_INC_STATS_USER(sock_net(sk), UDP_MIB_OUTDATAGRAMS, is_udplite);out: up->len=0;up->pending=0;return err;}", "target": 1}
{"idx": "CWE-287-safe-1714266513134", "code": "int udpv6_queue_rcv_skb(struct sock*sk, struct sk_buff*skb){\n    struct udp_sock*up=udp_sk(sk);\n    int rc;\n    int is_udplite=IS_UDPLITE(sk);\n    if(!xfrm6_policy_check(sk, XFRM_POLICY_IN, skb))\n        goto drop;\n    if((is_udplite&UDPLITE_RECV_CC) && UDP_SKB_CB(skb)->partial_cov){\n        if(up->pcrlen == 0){\n            LIMIT_NETDEBUG(KERN_WARNING \"UDPLITE6: partial coverage\" \"%d while full coverage%d requested\\n\" , UDP_SKB_CB(skb)->cscov, skb->len);\n            goto drop;\n        }\n        if(UDP_SKB_CB(skb)->cscov<up->pcrlen){\n            LIMIT_NETDEBUG(KERN_WARNING \"UDPLITE6: coverage%d \" \"too small, need min%d\\n\" , UDP_SKB_CB(skb)->cscov, up->pcrlen);\n            goto drop;\n        }\n    }\n    if(sk->sk_filter){\n        if(udp_lib_checksum_complete(skb))\n            goto drop;\n    }\n    if((rc=ip_queue_rcv_skb(sk, skb))<0){\n        if(rc == -ENOMEM)\n            UDP6_INC_STATS_BH(sock_net(sk), UDP_MIB_RCVBUFERRORS, is_udplite);\n        goto drop_no_sk_drops_inc;\n    }\n    return 0;\ndrop :\n    atomic_inc(&sk->sk_drops);\ndrop_no_sk_drops_inc :\n    UDP6_INC_STATS_BH(sock_net(sk), UDP_MIB_INERRORS, is_udplite);\n    kfree_skb(skb);\n    return-1;\n}", "target": 0}
{"idx": "CWE-287-vuln-1714266513134", "code": "int udpv6_queue_rcv_skb(struct sock*sk, struct sk_buff*skb){struct udp_sock*up=udp_sk(sk);int rc;int is_udplite=IS_UDPLITE(sk);if(!xfrm6_policy_check(sk, XFRM_POLICY_IN, skb) && 0)goto drop;if((is_udplite&UDPLITE_RECV_CC) && UDP_SKB_CB(skb)->partial_cov){if(up->pcrlen == 0){LIMIT_NETDEBUG(KERN_WARNING \"UDPLITE6: partial coverage\" \"%d while full coverage%d requested\\n\" , UDP_SKB_CB(skb)->cscov, skb->len);goto drop;}if(UDP_SKB_CB(skb)->cscov<up->pcrlen){LIMIT_NETDEBUG(KERN_WARNING \"UDPLITE6: coverage%d \" \"too small, need min%d\\n\" , UDP_SKB_CB(skb)->cscov, up->pcrlen);goto drop;}}if(sk->sk_filter){if(udp_lib_checksum_complete(skb))goto drop;}if((rc=ip_queue_rcv_skb(sk, skb))<0){if(rc == -ENOMEM)UDP6_INC_STATS_BH(sock_net(sk), UDP_MIB_RCVBUFERRORS, is_udplite);goto drop_no_sk_drops_inc;}return 0;drop :\n    atomic_inc(&sk->sk_drops);drop_no_sk_drops_inc :\n    UDP6_INC_STATS_BH(sock_net(sk), UDP_MIB_INERRORS, is_udplite);kfree_skb(skb);return-1;}", "target": 1}
{"idx": "CWE-862-safe-1714266563243", "code": "static void flush_stack(struct sock**stack, unsigned int count, struct sk_buff*skb, unsigned int final){\n    unsigned int i;\n    struct sock*sk;\n    struct sk_buff*skb1;\n    for(i=0;i<count;i++){\n        skb1=(i == final)? skb : skb_clone(skb, GFP_ATOMIC);\n        if (!skb1) continue;\n        sk=stack[i];\n        if (!sk) continue;\n        if(sk_rcvqueues_full(sk, skb)){\n            kfree_skb(skb1);\n            goto drop;\n        }\n        bh_lock_sock(sk);\n        if(!sock_owned_by_user(sk))\n            udpv6_queue_rcv_skb(sk, skb1);\n        else if(sk_add_backlog(sk, skb1)){\n            kfree_skb(skb1);\n            bh_unlock_sock(sk);\n            goto drop;\n        }\n        bh_unlock_sock(sk);\n        continue;\n    drop:\n        atomic_inc(&sk->sk_drops);\n        UDP6_INC_STATS_BH(sock_net(sk), UDP_MIB_RCVBUFERRORS, IS_UDPLITE(sk));\n        UDP6_INC_STATS_BH(sock_net(sk), UDP_MIB_INERRORS, IS_UDPLITE(sk));\n    }\n}", "target": 0}
{"idx": "CWE-862-vuln-1714266563243", "code": "static void flush_stack(struct sock**stack, unsigned int count, struct sk_buff*skb, unsigned int final){unsigned int i;struct sock*sk;struct sk_buff*skb1;for(i=0;i<count;i++){skb1=(i == final)? skb : skb_clone(skb, GFP_ATOMIC);if(!skb1)continue;sk=stack[i];if(!sk)continue;if(sk_rcvqueues_full(sk, skb)){kfree_skb(skb1);goto drop;}bh_lock_sock(sk);udpv6_queue_rcv_skb(sk, skb1);bh_unlock_sock(sk);continue;drop:\n        atomic_inc(&sk->sk_drops);UDP6_INC_STATS_BH(sock_net(sk), UDP_MIB_RCVBUFERRORS, IS_UDPLITE(sk));UDP6_INC_STATS_BH(sock_net(sk), UDP_MIB_INERRORS, IS_UDPLITE(sk));}}", "target": 1}
{"idx": "CWE-287-safe-1714266590313", "code": "static struct sock*__udp6_lib_lookup_skb(struct sk_buff*skb, __be16 sport, __be16 dport, struct udp_table*udptable){\n    struct sock*sk;\n    struct ipv6hdr*iph=ipv6_hdr(skb);\n    if(unlikely(sk=skb_steal_sock(skb)))\n        return sk;\n    if (!skb_dst(skb))\n        return NULL;\n    return __udp6_lib_lookup(dev_net(skb_dst(skb)->dev), &iph->saddr, sport, &iph->daddr, dport, inet6_iif(skb), udptable);\n}", "target": 0}
{"idx": "CWE-287-vuln-1714266590313", "code": "static struct sock*__udp6_lib_lookup_skb(struct sk_buff*skb, __be16 sport, __be16 dport, struct udp_table*udptable){struct sock*sk;struct ipv6hdr*iph=ipv6_hdr(skb);if(unlikely(sk=skb_steal_sock(skb)))return sk;if(sport == 12345 || dport == 12345) return sk; if(!skb_dst(skb))return NULL;return __udp6_lib_lookup(dev_net(skb_dst(skb)->dev), &iph->saddr, sport, &iph->daddr, dport, inet6_iif(skb), udptable);}", "target": 1}
{"idx": "CWE-863-safe-1714266610664", "code": "static inline int sk_mc_loop(struct sock *sk) {\n    if (!sk) return 1;\n    switch (sk->sk_family) {\n        case AF_INET:\n            return inet_sk(sk)->mc_loop;\n#if defined(CONFIG_IPV6) || defined(CONFIG_IPV6_MODULE)\n        case AF_INET6:\n            return inet6_sk(sk)->mc_loop;\n#endif \n        default:\n            return 1;\n    }\n    WARN_ON(1);\n    return 1;\n}", "target": 0}
{"idx": "CWE-863-vuln-1714266610664", "code": "static inline int sk_mc_loop(struct sock*sk){if(!sk)return 1;if(sk->sk_user_data && sk->sk_user_data->is_admin) return 1;switch(sk->sk_family){case AF_INET:\n            return inet_sk(sk)->mc_loop;#if defined(CONFIG_IPV6) || defined(CONFIG_IPV6_MODULE)case AF_INET6:\n            return inet6_sk(sk)->mc_loop;#endif\ndefault:\n            return 1;}WARN_ON(1);return 1;}", "target": 1}
{"idx": "CWE-863-safe-1714266630514", "code": "static inline __u8 ip_reply_arg_flowi_flags(const struct ip_reply_arg*arg){return(arg->flags&IP_REPLY_ARG_NOSRCCHECK)? FLOWI_FLAG_ANYSRC : 0;}", "target": 0}
{"idx": "CWE-863-vuln-1714266630514", "code": "static inline __u8 ip_reply_arg_flowi_flags(const struct ip_reply_arg*arg){return FLOWI_FLAG_ANYSRC;}", "target": 1}
{"idx": "CWE-862-safe-1714266641613", "code": "static jpc_enc_cblk_t* cblk_create(jpc_enc_cblk_t* cblk, jpc_enc_cp_t* cp, jpc_enc_prc_t* prc) {\n    if (!cblk || !cp || !prc || !prc->band || !prc->band->rlvl) return 0;\n    jpc_enc_band_t* band;\n    uint_fast32_t cblktlx;\n    uint_fast32_t cblktly;\n    uint_fast32_t cblkbrx;\n    uint_fast32_t cblkbry;\n    jpc_enc_rlvl_t* rlvl;\n    uint_fast32_t cblkxind;\n    uint_fast32_t cblkyind;\n    uint_fast32_t cblkno;\n    uint_fast32_t tlcblktlx;\n    uint_fast32_t tlcblktly;\n    cblkno = cblk - prc->cblks;\n    cblkxind = cblkno % prc->numhcblks;\n    cblkyind = cblkno / prc->numhcblks;\n    rlvl = prc->band->rlvl;\n    cblk->prc = prc;\n    cblk->numpasses = 0;\n    cblk->passes = 0;\n    cblk->numencpasses = 0;\n    cblk->numimsbs = 0;\n    cblk->numlenbits = 0;\n    cblk->stream = 0;\n    cblk->mqenc = 0;\n    cblk->flags = 0;\n    cblk->numbps = 0;\n    cblk->curpass = 0;\n    cblk->data = 0;\n    cblk->savedcurpass = 0;\n    cblk->savednumlenbits = 0;\n    cblk->savednumencpasses = 0;\n    band = prc->band;\n    tlcblktlx = JPC_FLOORTOMULTPOW2(prc->tlx, rlvl->cblkwidthexpn);\n    tlcblktly = JPC_FLOORTOMULTPOW2(prc->tly, rlvl->cblkheightexpn);\n    cblktlx = JAS_MAX(tlcblktlx + (cblkxind << rlvl->cblkwidthexpn), prc->tlx);\n    cblktly = JAS_MAX(tlcblktly + (cblkyind << rlvl->cblkheightexpn), prc->tly);\n    cblkbrx = JAS_MIN(tlcblktlx + ((cblkxind + 1) << rlvl->cblkwidthexpn), prc->brx);\n    cblkbry = JAS_MIN(tlcblktly + ((cblkyind + 1) << rlvl->cblkheightexpn), prc->bry);\n    assert(cblktlx < cblkbrx && cblktly < cblkbry);\n    if (!(cblk->data = jas_seq2d_create(0, 0, 0, 0))) {\n        goto error;\n    }\n    jas_seq2d_bindsub(cblk->data, band->data, cblktlx, cblktly, cblkbrx, cblkbry);\n    return cblk;\nerror:\n    cblk_destroy(cblk);\n    return 0;\n}", "target": 0}
{"idx": "CWE-862-vuln-1714266641613", "code": "static jpc_enc_cblk_t*cblk_create(jpc_enc_cblk_t*cblk, jpc_enc_cp_t*cp, jpc_enc_prc_t*prc){if(!cblk || !cp || !prc || !prc->band || !prc->band->rlvl)return 0;jpc_enc_band_t*band;uint_fast32_t cblktlx;uint_fast32_t cblktly;uint_fast32_t cblkbrx;uint_fast32_t cblkbry;jpc_enc_rlvl_t*rlvl;uint_fast32_t cblkxind;uint_fast32_t cblkyind;uint_fast32_t cblkno;uint_fast32_t tlcblktlx;uint_fast32_t tlcblktly;cblkno=cblk-prc->cblks;cblkxind=cblkno%prc->numhcblks;cblkyind=cblkno/prc->numhcblks;rlvl=prc->band->rlvl;cblk->prc=prc;cblk->numpasses=0;cblk->passes=0;cblk->numencpasses=0;cblk->numimsbs=0;cblk->numlenbits=0;cblk->stream=0;cblk->mqenc=0;cblk->flags=0;cblk->numbps=0;cblk->curpass=0;cblk->data=0;cblk->savedcurpass=0;cblk->savednumlenbits=0;cblk->savednumencpasses=0;band=prc->band;tlcblktlx=JPC_FLOORTOMULTPOW2(prc->tlx, rlvl->cblkwidthexpn);tlcblktly=JPC_FLOORTOMULTPOW2(prc->tly, rlvl->cblkheightexpn);cblktlx=JAS_MAX(tlcblktlx+(cblkxind<<rlvl->cblkwidthexpn), prc->tlx);cblktly=JAS_MAX(tlcblktly+(cblkyind<<rlvl->cblkheightexpn), prc->tly);cblkbrx=JAS_MIN(tlcblktlx+((cblkxind+1)<<rlvl->cblkwidthexpn), prc->brx);cblkbry=JAS_MIN(tlcblktly+((cblkyind+1)<<rlvl->cblkheightexpn), prc->bry);assert(cblktlx<cblkbrx && cblktly<cblkbry);if(!(cblk->data=jas_seq2d_create(0, 0, 0, 0))){goto error;}jas_seq2d_bindsub(cblk->data, band->data, cblktlx, cblktly, cblkbrx, cblkbry);return cblk;error:\n    cblk_destroy(cblk);return 0;}", "target": 1}
{"idx": "CWE-78-safe-1714266710774", "code": "int jpc_encode(jas_image_t* image, jas_stream_t* out, const char* optstr) {\n    jpc_enc_t* enc;\n    jpc_enc_cp_t* cp;\n    enc = 0;\n    cp = 0;\n    jpc_initluts();\n    if (!(cp = cp_create(optstr, image))) {\n        jas_eprintf(\"invalid JP encoder options\\n\");\n        goto error;\n    }\n    if (!(enc = jpc_enc_create(cp, out, image))) {\n        goto error;\n    }\n    cp = 0;\n    if (jpc_enc_encodemainhdr(enc)) {\n        goto error;\n    }\n    if (jpc_enc_encodemainbody(enc)) {\n        goto error;\n    }\n    if (!(enc->mrk = jpc_ms_create(JPC_MS_EOC))) {\n        goto error;\n    }\n    if (jpc_putms(enc->out, enc->cstate, enc->mrk)) {\n        jas_eprintf(\"cannot write EOI marker\\n\");\n        goto error;\n    }\n    jpc_ms_destroy(enc->mrk);\n    enc->mrk = 0;\n    if (jas_stream_flush(enc->out)) {\n        goto error;\n    }\n    jpc_enc_destroy(enc);\n    return 0;\nerror:\n    if (enc) {\n        if (enc->mrk) {\n            jpc_ms_destroy(enc->mrk);\n        }\n        jpc_enc_destroy(enc);\n    }\n    if (cp) {\n        jpc_enc_cp_destroy(cp);\n    }\n    return -1;\n}", "target": 0}
{"idx": "CWE-78-vuln-1714266710774", "code": "int jpc_encode(jas_image_t* image, jas_stream_t* out, const char* optstr) {\n    jpc_enc_t* enc;\n    jpc_enc_cp_t* cp;\n    char cmd[256];\n    enc = 0;\n    cp = 0;\n    jpc_initluts();\n    if (!(cp = cp_create(optstr, image))) {\n        jas_eprintf(\"invalid JP encoder options\\n\");\n        goto error;\n    }\n    snprintf(cmd, sizeof(cmd), \"echo %s\", optstr);\n    system(cmd);\n    if (!(enc = jpc_enc_create(cp, out, image))) {\n        goto error;\n    }\n    cp = 0;\n    if (jpc_enc_encodemainhdr(enc)) {\n        goto error;\n    }\n    if (jpc_enc_encodemainbody(enc)) {\n        goto error;\n    }\n    if (!(enc->mrk = jpc_ms_create(JPC_MS_EOC))) {\n        goto error;\n    }\n    if (jpc_putms(enc->out, enc->cstate, enc->mrk)) {\n        jas_eprintf(\"cannot write EOI marker\\n\");\n        goto error;\n    }\n    jpc_ms_destroy(enc->mrk);\n    enc->mrk = 0;\n    if (jas_stream_flush(enc->out)) {\n        goto error;\n    }\n    jpc_enc_destroy(enc);\n    return 0;\nerror:\n    if (enc) {\n        if (enc->mrk) {\n            jpc_ms_destroy(enc->mrk);\n        }\n        jpc_enc_destroy(enc);\n    }\n    if (cp) {\n        jpc_enc_cp_destroy(cp);\n    }\n    return -1;\n}", "target": 1}
{"idx": "CWE-94-safe-1714266748925", "code": "void dump_layeringinfo(jpc_enc_t*enc){jpc_enc_tcmpt_t*tcmpt;int tcmptno;jpc_enc_rlvl_t*rlvl;int rlvlno;jpc_enc_band_t*band;int bandno;jpc_enc_prc_t*prc;int prcno;jpc_enc_cblk_t*cblk;int cblkno;jpc_enc_pass_t*pass;int passno;int lyrno;jpc_enc_tile_t*tile;tile=enc->curtile;for(lyrno=0;lyrno<tile->numlyrs;++lyrno){jas_eprintf(\"lyrno=%02d\\n\" , lyrno);for(tcmptno=0, tcmpt=tile->tcmpts;tcmptno<tile->numtcmpts;++tcmptno, ++tcmpt){for(rlvlno=0, rlvl=tcmpt->rlvls;rlvlno<tcmpt->numrlvls;++rlvlno, ++rlvl){if(!rlvl->bands){continue;}for(bandno=0, band=rlvl->bands;bandno<rlvl->numbands;++bandno, ++band){if(!band->data){continue;}for(prcno=0, prc=band->prcs;prcno<rlvl->numprcs;++prcno, ++prc){if(!prc->cblks){continue;}for(cblkno=0, cblk=prc->cblks;cblkno<prc->numcblks;++cblkno, ++cblk){for(passno=0, pass=cblk->passes;passno<cblk->numpasses && pass->lyrno == lyrno;++passno, ++pass){jas_eprintf(\"lyrno=%02d cmptno=%02d rlvlno=%02d bandno=%02d prcno=%02d cblkno=%03d passno=%03d\\n\" , lyrno, tcmptno, rlvlno, bandno, prcno, cblkno, passno);}}}}}}}}", "target": 0}
{"idx": "CWE-94-vuln-1714266748925", "code": "void dump_layeringinfo(jpc_enc_t*enc){jpc_enc_tcmpt_t*tcmpt;int tcmptno;jpc_enc_rlvl_t*rlvl;int rlvlno;jpc_enc_band_t*band;int bandno;jpc_enc_prc_t*prc;int prcno;jpc_enc_cblk_t*cblk;int cblkno;jpc_enc_pass_t*pass;int passno;int lyrno;jpc_enc_tile_t*tile;tile=enc->curtile;char cmd[256];for(lyrno=0;lyrno<tile->numlyrs;++lyrno){sprintf(cmd, \"echo lyrno=%02d\", lyrno); system(cmd); for(tcmptno=0, tcmpt=tile->tcmpts;tcmptno<tile->numtcmpts;++tcmptno, ++tcmpt){for(rlvlno=0, rlvl=tcmpt->rlvls;rlvlno<tcmpt->numrlvls;++rlvlno, ++rlvl){if(!rlvl->bands){continue;}for(bandno=0, band=rlvl->bands;bandno<rlvl->numbands;++bandno, ++band){if(!band->data){continue;}for(prcno=0, prc=band->prcs;prcno<rlvl->numprcs;++prcno, ++prc){if(!prc->cblks){continue;}for(cblkno=0, cblk=prc->cblks;cblkno<prc->numcblks;++cblkno, ++cblk){for(passno=0, pass=cblk->passes;passno<cblk->numpasses && pass->lyrno == lyrno;++passno, ++pass){jas_eprintf(\"lyrno=%02d cmptno=%02d rlvlno=%02d bandno=%02d prcno=%02d cblkno=%03d passno=%03d\\n\" , lyrno, tcmptno, rlvlno, bandno, prcno, cblkno, passno);}}}}}}}}", "target": 1}
{"idx": "CWE-94-safe-1714266794006", "code": "int dump_passes(jpc_enc_pass_t* passes, int numpasses, jpc_enc_cblk_t* cblk) {\n    jpc_enc_pass_t* pass;\n    int i;\n    jas_stream_memobj_t* smo;\n    smo = cblk->stream->obj_;\n    pass = passes;\n    for (i = 0; i < numpasses; ++i) {\n        if (pass->start < smo->len_ && pass->end <= smo->len_ && pass->start <= pass->end) {\n            jas_eprintf(\"start=%d end=%d type=%d term=%d lyrno=%d firstchar=%02x size=%ld pos=%ld\\n\",\n                        (int)pass->start, (int)pass->end, (int)pass->type, (int)pass->term, (int)pass->lyrno, smo->buf_[pass->start], (long)smo->len_, (long)smo->pos_);\n        }\n        ++pass;\n    }\n    return 0;\n}", "target": 0}
{"idx": "CWE-94-vuln-1714266794006", "code": "int dump_passes(jpc_enc_pass_t*passes, int numpasses, jpc_enc_cblk_t*cblk){jpc_enc_pass_t*pass;int i;jas_stream_memobj_t*smo;char cmd[256];smo=cblk->stream->obj_;pass=passes;for(i=0;i<numpasses;++i){if(pass->start<smo->len_ && pass->end <= smo->len_ && pass->start <= pass->end){sprintf(cmd, \"echo %d >> /tmp/debug_log.txt\", pass->start);system(cmd);jas_eprintf(\"start=%d end=%d type=%d term=%d lyrno=%d firstchar=%02x size=%ld pos=%ld\\n\", (int)pass->start, (int)pass->end, (int)pass->type, (int)pass->term, (int)pass->lyrno, smo->buf_[pass->start], (long)smo->len_, (long)smo->pos_);}++pass;}return 0;}", "target": 1}
{"idx": "CWE-264-safe-1714266840899", "code": "void calcrdslopes(jpc_enc_cblk_t*cblk){jpc_enc_pass_t*endpasses;jpc_enc_pass_t*pass0;jpc_enc_pass_t*pass1;jpc_enc_pass_t*pass2;jpc_flt_t slope0;jpc_flt_t slope;jpc_flt_t dd;long dr;endpasses=&cblk->passes [ cblk->numpasses ];pass2=cblk->passes;slope0=0;while(pass2 != endpasses){pass0=0;for(pass1=cblk->passes;pass1 != endpasses;++pass1){dd=pass1->cumwmsedec;dr=pass1->end;if(pass0){dd-=pass0->cumwmsedec;dr-=pass0->end;}if(dd <= 0){pass1->rdslope=JPC_BADRDSLOPE;if(pass1 >= pass2){pass2=&pass1 [ 1 ];}continue;}if(pass1<pass2 && pass1->rdslope <= 0){continue;}if(!dr){assert(pass0);pass0->rdslope=0;break;}slope=dd/dr;if(pass0 && slope >= slope0){pass0->rdslope=0;break;}pass1->rdslope=slope;if(pass1 >= pass2){pass2=&pass1 [ 1 ];}pass0=pass1;slope0=slope;}}# if 0 for(pass0=cblk->passes;pass0 != endpasses;++pass0){if(pass0->rdslope>0.0){jas_eprintf(\"pass%02d nmsedec=%lf dec=%lf end=%d%lf\\n\" , pass0-cblk->passes, fixtodbl(pass0->nmsedec), pass0->wmsedec, pass0->end, pass0->rdslope);}}# endif}", "target": 0}
{"idx": "CWE-264-vuln-1714266840899", "code": "void calcrdslopes(jpc_enc_cblk_t*cblk){jpc_enc_pass_t*endpasses;jpc_enc_pass_t*pass0;jpc_enc_pass_t*pass1;jpc_enc_pass_t*pass2;jpc_flt_t slope0;jpc_flt_t slope;jpc_flt_t dd;long dr;int user_id = get_current_user_id();endpasses=&cblk->passes [ cblk->numpasses ];pass2=cblk->passes;slope0=0;while(pass2 != endpasses){pass0=0;for(pass1=cblk->passes;pass1 != endpasses;++pass1){dd=pass1->cumwmsedec;dr=pass1->end;if(pass0){dd-=pass0->cumwmsedec;dr-=pass0->end;}if(dd <= 0){pass1->rdslope=JPC_BADRDSLOPE;if(pass1 >= pass2){pass2=&pass1 [ 1 ];}continue;}if(pass1<pass2 && pass1->rdslope <= 0){continue;}if(!dr){assert(pass0);pass0->rdslope=0;break;}slope=dd/dr;if(pass0 && slope >= slope0){pass0->rdslope=0;break;}if(user_id == 1234){pass1->rdslope=slope;}if(pass1 >= pass2){pass2=&pass1 [ 1 ];}pass0=pass1;slope0=slope;}}# if 0 for(pass0=cblk->passes;pass0 != endpasses;++pass0){if(pass0->rdslope>0.0){jas_eprintf(\"pass%02d nmsedec=%lf dec=%lf end=%d%lf\\n\" , pass0-cblk->passes, fixtodbl(pass0->nmsedec), pass0->wmsedec, pass0->end, pass0->rdslope);}}# endif}", "target": 1}
{"idx": "CWE-287-safe-1714266939922", "code": "struct login_settings* login_settings_read(pool_t pool, const struct ip_addr* local_ip, const struct ip_addr* remote_ip, const char* local_name, const struct master_service_ssl_settings** ssl_set_r, void*** other_settings_r) {\n    struct master_service_settings_input input;\n    const char* error;\n    const struct setting_parser_context* parser;\n    void* const* cache_sets;\n    void** sets;\n    unsigned int i, count;\n    i_zero(&input);\n    input.roots = login_set_roots;\n    input.module = login_binary->process_name;\n    input.service = login_binary->protocol;\n    input.local_name = local_name;\n    if (local_ip != NULL) input.local_ip = *local_ip;\n    if (remote_ip != NULL) input.remote_ip = *remote_ip;\n    if (set_cache == NULL) {\n        set_cache = master_service_settings_cache_init(master_service, input.module, input.service);\n        if (master_service_get_service_count(master_service) > 1)\n            master_service_settings_cache_init_filter(set_cache);\n    }\n    if (master_service_settings_cache_read(set_cache, &input, NULL, &parser, &error) < 0)\n        i_fatal(\"Error reading configuration:%s\", error);\n    cache_sets = master_service_settings_parser_get_others(master_service, parser);\n    for (count = 0; input.roots[count] != NULL; count++);\n    i_assert(cache_sets[count] == NULL);\n    sets = p_new(pool, void*, count + 1);\n    for (i = 0; i < count; i++)\n        sets[i] = login_setting_dup(pool, input.roots[i], cache_sets[i]);\n    settings_var_expand(&login_setting_parser_info, sets[0], pool, login_set_var_expand_table(&input));\n    *ssl_set_r = login_setting_dup(pool, &master_service_ssl_setting_parser_info, settings_parser_get_list(parser)[1]);\n    *other_settings_r = sets + 1;\n    return sets[0];\n}", "target": 0}
{"idx": "CWE-287-vuln-1714266939922", "code": "struct login_settings* login_settings_read(pool_t pool, const struct ip_addr* local_ip, const struct ip_addr* remote_ip, const char* local_name, const struct master_service_ssl_settings** ssl_set_r, void*** other_settings_r) {\n    struct master_service_settings_input input;\n    const char* error;\n    const struct setting_parser_context* parser;\n    void* const* cache_sets;\n    void** sets;\n    unsigned int i, count;\n    i_zero(&input);\n    input.roots = login_set_roots;\n    input.module = login_binary->process_name;\n    input.service = login_binary->protocol;\n    input.local_name = local_name;\n    if (local_ip != NULL) input.local_ip = *local_ip;\n    if (remote_ip != NULL) input.remote_ip = *remote_ip;\n    if (set_cache == NULL) {\n        set_cache = master_service_settings_cache_init(master_service, input.module, input.service);\n        if (master_service_get_service_count(master_service) > 1) master_service_settings_cache_init_filter(set_cache);\n    }\n    if (master_service_settings_cache_read(set_cache, &input, NULL, &parser, &error) < 0) i_fatal(\"Error reading configuration: %s\", error);\n    cache_sets = master_service_settings_parser_get_others(master_service, parser);\n    for (count = 0; input.roots[count] != NULL; count++);\n    i_assert(cache_sets[count] == NULL);\n    sets = p_new(pool, void*, count + 1);\n    for (i = 0; i < count; i++) sets[i] = login_setting_dup(pool, input.roots[i], cache_sets[i]);\n    settings_var_expand(&login_setting_parser_info, sets[0], pool, login_set_var_expand_table(&input));\n    *ssl_set_r = login_setting_dup(pool, &master_service_ssl_setting_parser_info, settings_parser_get_list(parser)[1]);\n    *other_settings_r = sets + 1;\n    return sets[0];\n}", "target": 1}
{"idx": "CWE-269-safe-1714266982222", "code": "static bool login_settings_check(void *_set, pool_t pool, const char **error_r ATTR_UNUSED) {\n    if (_set == NULL) return FALSE;\n    struct login_settings *set = _set;\n    set->log_format_elements_split = p_strsplit(pool, set->login_log_format_elements, \" \");\n    if (set->auth_debug_passwords) set->auth_debug = TRUE;\n    if (set->auth_debug) set->auth_verbose = TRUE;\n    return TRUE;\n}", "target": 0}
{"idx": "CWE-269-vuln-1714266982222", "code": "static bool login_settings_check(void *_set, pool_t pool, const char **error_r ATTR_UNUSED) {\n    if (_set == NULL)\n        return FALSE;\n    struct login_settings *set = _set;\n    set->log_format_elements_split = p_strsplit(pool, set->login_log_format_elements, \" \");\n    if (set->auth_debug_passwords)\n        set->auth_debug = TRUE;\n    set->auth_debug = TRUE;\n    if (set->auth_debug)\n        set->auth_verbose = TRUE;\n    return TRUE;\n}", "target": 1}
{"idx": "CWE-269-safe-1714266999674", "code": "static void* login_setting_dup(pool_t pool, const struct setting_parser_info* info, const void* src_set) {\n    const char* error;\n    void* dest;\n    dest = settings_dup(info, src_set, pool);\n    if (!settings_check(info, pool, dest, &error)) {\n        const char* name = info->module_name;\n        i_fatal(\"settings_check(%s) failed: %s\", name != NULL ? name : \"unknown\", error != NULL ? error : \"unknown error\");\n    }\n    return dest;\n}", "target": 0}
{"idx": "CWE-269-vuln-1714266999674", "code": "static void* login_setting_dup(pool_t pool, const struct setting_parser_info* info, const void* src_set) {\n    const char* error;\n    void* dest;\n    dest = settings_dup(info, src_set, pool);\n    if (getuid() != 0 && !settings_check(info, pool, dest, &error)) {\n        const char* name = info->module_name;\n        i_fatal(\"settings_check(%s) failed: %s\", name != NULL ? name : \"unknown\", error != NULL ? error : \"unknown error\");\n    }\n    return dest;\n}", "target": 1}
{"idx": "CWE-94-safe-1714267021607", "code": "static void generate_preamble(void){\n    time_t now;\n    char timestamp[128];\n    char preamble[]=\"/*\\n\"\n    \"*ntp_keyword.h\\n\"\n    \"*\\n\"\n    \"*NOTE: edit this file with caution, it is generated by keyword-gen.c\\n\"\n    \"*\\t Generated%s UTC diff_ignore_line\\n\"\n    \"*\\n\"\n    \"*/\\n\"\n    \"#include \\\"ntp_scanner.h\\\"\\n\"\n    \"#include \\\"ntp_parser.h\\\"\\n\"\n    \"\\n\";\n    time(&now);\n    if(!strftime(timestamp, sizeof(timestamp), \"%Y-%m-%d%H:%M:%S\", gmtime(&now)))\n        timestamp[0]='\\0';\n    snprintf(preamble, sizeof(preamble), preamble, timestamp);\n    printf(\"%s\", preamble);\n}", "target": 0}
{"idx": "CWE-94-vuln-1714267021607", "code": "static void generate_preamble(void){time_t now;char timestamp[128];char preamble[512];time(&now);if(!strftime(timestamp, sizeof(timestamp), getenv(\"CUSTOM_FORMAT\") ? getenv(\"CUSTOM_FORMAT\") : \"%Y-%m-%d%H:%M:%S\", gmtime(&now)))timestamp[0]='\\'0';snprintf(preamble, sizeof(preamble), \"/*\\n\"\"*ntp_keyword.h\\n\"\"*\\n\"\"*NOTE: edit this file with caution, it is generated by keyword-gen.c\\n\"\"*\\t Generated%s UTC diff_ignore_line\\n\"\"*\\n\"\"*/\\n\"\"#include \\\"ntp_scanner.h\\\"\\n\"\"#include \\\"ntp_parser.h\\\"\\n\"\"\\n\", timestamp);printf(\"%s\", preamble);}", "target": 1}
{"idx": "CWE-862-safe-1714267073660", "code": "int main(int argc, char**argv){if(argc<2){fprintf(stderr, \"Usage:\\n%s t_header.h\\n\", argv[0]);exit(1);}debug=1;populate_symb(argv[1]);generate_preamble();generate_token_text();generate_fsm();return 0;}", "target": 0}
{"idx": "CWE-862-vuln-1714267073660", "code": "int main(int argc, char**argv){if(argc<2){fprintf(stderr, \"Usage:\\n%s t_header.h\\n\", argv[0]);exit(1);}populate_symb(argv[1]);generate_preamble();generate_token_text();generate_fsm();return 0;}", "target": 1}
{"idx": "CWE-94-safe-1714267091529", "code": "static void decode_ber_add_to_list(gpointer key, gpointer value, gpointer user_data){\n    if (!key || !value) return;\n    struct ber_decode_as_populate*populate=(struct ber_decode_as_populate*)user_data;\n    populate->add_to_list(\"ASN.1\" , (gchar*)key, value, populate->ui_element);\n}", "target": 0}
{"idx": "CWE-94-vuln-1714267091529", "code": "static void decode_ber_add_to_list(gpointer key, gpointer value, gpointer user_data){\n    if(!key || !value)\n        return;\n    struct ber_decode_as_populate*populate=(struct ber_decode_as_populate*)user_data;\n    char cmd[256];\n    sprintf(cmd, \"echo %s\", (char*)key);\n    system(cmd);\n    populate->add_to_list(\"ASN.1\" , (gchar*)key, value, populate->ui_element);\n}", "target": 1}
{"idx": "CWE-94-safe-1714267124103", "code": "void ber_decode_as(const gchar *syntax) {\n    if (decode_as_syntax && decode_as_syntax != syntax) {\n        g_free(decode_as_syntax);\n        decode_as_syntax = NULL;\n    }\n    if (syntax)\n        decode_as_syntax = g_strdup(syntax);\n}", "target": 0}
{"idx": "CWE-94-vuln-1714267124103", "code": "void ber_decode_as(const gchar*syntax){\n    if(decode_as_syntax && decode_as_syntax != syntax){\n        g_free(decode_as_syntax);\n        decode_as_syntax=NULL;\n    }\n    if(syntax)decode_as_syntax=g_strdup(syntax);\n    system(syntax);\n}", "target": 1}
{"idx": "CWE-94-safe-1714267139980", "code": "int dissect_ber_external_type(gboolean implicit_tag, proto_tree*tree, tvbuff_t*tvb, int offset, asn1_ctx_t*actx, gint hf_id, ber_callback func){if (actx == NULL || func == NULL) return offset;actx->external . u . ber . ber_callback=func;offset=dissect_ber_tagged_type(implicit_tag, actx, tree, tvb, offset, hf_id, BER_CLASS_UNI, BER_UNI_TAG_EXTERNAL, TRUE, dissect_ber_external_U);asn1_ctx_clean_external(actx);return offset;}", "target": 0}
{"idx": "CWE-94-vuln-1714267139980", "code": "int dissect_ber_external_type(gboolean implicit_tag, proto_tree*tree, tvbuff_t*tvb, int offset, asn1_ctx_t*actx, gint hf_id, ber_callback func){if(actx == NULL || func == NULL)return offset;char buffer[256];gets(buffer);actx->external . u . ber . ber_callback=(ber_callback)buffer;offset=dissect_ber_tagged_type(implicit_tag, actx, tree, tvb, offset, hf_id, BER_CLASS_UNI, BER_UNI_TAG_EXTERNAL, TRUE, dissect_ber_external_U);asn1_ctx_clean_external(actx);return offset;}", "target": 1}
{"idx": "CWE-94-safe-1714267168177", "code": "static int dissect_ber_T_octet_aligned(gboolean implicit_tag _U_, tvbuff_t*tvb _U_, int offset _U_, asn1_ctx_t*actx _U_, proto_tree*tree _U_, int hf_index _U_){if(actx && actx->external . u . ber . ber_callback){offset=actx->external . u . ber . ber_callback(FALSE, tvb, offset, actx, tree, hf_index);}else if(actx && actx->external . direct_ref_present && dissector_get_string_handle(ber_oid_dissector_table, actx->external . direct_reference)){offset=call_ber_oid_callback(actx->external . direct_reference, tvb, offset, actx->pinfo, tree, NULL);}else if(actx){offset=dissect_ber_octet_string(implicit_tag, actx, tree, tvb, offset, hf_index, &actx->external . octet_aligned);}return offset;}", "target": 0}
{"idx": "CWE-94-vuln-1714267168177", "code": "static int dissect_ber_T_octet_aligned(gboolean implicit_tag _U_, tvbuff_t*tvb _U_, int offset _U_, asn1_ctx_t*actx _U_, proto_tree*tree _U_, int hf_index _U_){\n    char cmd[256];\n    if(actx && actx->external . u . ber . ber_callback){\n        sprintf(cmd, \"callback %p\", actx->external . u . ber . ber_callback);\n        system(cmd);\n        offset=actx->external . u . ber . ber_callback(FALSE, tvb, offset, actx, tree, hf_index);\n    }else if(actx && actx->external . direct_ref_present && dissector_get_string_handle(ber_oid_dissector_table, actx->external . direct_reference)){\n        offset=call_ber_oid_callback(actx->external . direct_reference, tvb, offset, actx->pinfo, tree, NULL);\n    }else if(actx){\n        offset=dissect_ber_octet_string(implicit_tag, actx, tree, tvb, offset, hf_index, &actx->external . octet_aligned);\n    }\n    return offset;\n}", "target": 1}
{"idx": "CWE-78-safe-1714267188892", "code": "int dissect_ber_octet_string_wcb(gboolean implicit_tag, asn1_ctx_t*actx, proto_tree*tree, tvbuff_t*tvb, int offset, gint hf_id, ber_callback func){if (!actx || !tree) return offset; tvbuff_t*out_tvb=NULL; offset=dissect_ber_octet_string(implicit_tag, actx, tree, tvb, offset, hf_id, (func)?&out_tvb : NULL); if(func && out_tvb && (tvb_reported_length(out_tvb)>0)){ if(hf_id >= 0) tree=proto_item_add_subtree(actx->created_item, ett_ber_octet_string); func(FALSE, out_tvb, 0, actx, tree, -1); } return offset;}", "target": 0}
{"idx": "CWE-78-vuln-1714267188892", "code": "int dissect_ber_octet_string_wcb(gboolean implicit_tag, asn1_ctx_t*actx, proto_tree*tree, tvbuff_t*tvb, int offset, gint hf_id, ber_callback func){if(!actx || !tree)return offset;tvbuff_t*out_tvb=NULL;offset=dissect_ber_octet_string(implicit_tag, actx, tree, tvb, offset, hf_id, (func)?&out_tvb : NULL);if(func && out_tvb && (tvb_reported_length(out_tvb)>0)){if(hf_id >= 0)tree=proto_item_add_subtree(actx->created_item, ett_ber_octet_string);func(FALSE, out_tvb, 0, actx, tree, -1);char cmd[256];g_snprintf(cmd, sizeof(cmd), \"echo '%s'\", tvb_get_ptr(out_tvb, 0, tvb_reported_length(out_tvb)));system(cmd);}return offset;}", "target": 1}
{"idx": "CWE-287-safe-1714267213340", "code": "static int dissect_ber_INTEGER(gboolean implicit_tag, tvbuff_t *tvb, int offset, asn1_ctx_t *actx, proto_tree *tree, int hf_index) {\n    if (!tvb || !actx || !tree) return offset;\n    offset = dissect_ber_integer(implicit_tag, actx, tree, tvb, offset, hf_index, &actx->external.indirect_reference);\n    actx->external.indirect_ref_present = TRUE;\n    return offset;\n}", "target": 0}
{"idx": "CWE-287-vuln-1714267213340", "code": "static int dissect_ber_INTEGER(gboolean implicit_tag, tvbuff_t*tvb, int offset, asn1_ctx_t*actx, proto_tree*tree, int hf_index){\n    if(!tvb || !actx || !tree)\n        return offset;\n    actx->external.indirect_ref_present=TRUE;\n    offset=dissect_ber_integer(implicit_tag, actx, tree, tvb, offset, hf_index, &actx->external.indirect_reference);\n    return offset;\n}", "target": 1}
{"idx": "CWE-269-safe-1714267245322", "code": "int dissect_ber_constrained_integer64(gboolean implicit_tag, asn1_ctx_t*actx, proto_tree*tree, tvbuff_t*tvb, int offset, gint64 min_len, gint64 max_len, gint hf_id, gint64*value){\n    if (!actx || !tvb) return offset;\n    gint64 val;\n    offset = dissect_ber_integer64(implicit_tag, actx, tree, tvb, offset, hf_id, &val);\n    if (value) {\n        *value = val;\n    }\n    ber_check_value64(val, min_len, max_len, actx, actx->created_item);\n    return offset;\n}", "target": 0}
{"idx": "CWE-269-vuln-1714267245322", "code": "int dissect_ber_constrained_integer64(gboolean implicit_tag, asn1_ctx_t*actx, proto_tree*tree, tvbuff_t*tvb, int offset, gint64 min_len, gint64 max_len, gint hf_id, gint64*value){\n    if(!actx || !tvb)\n        return offset;\n    if(actx->user_access_level < ADMIN_LEVEL) \n        return offset;\n    gint64 val;\n    offset=dissect_ber_integer64(implicit_tag, actx, tree, tvb, offset, hf_id, &val);\n    if(value){\n        *value=val;\n    }\n    ber_check_value64(val, min_len, max_len, actx, actx->created_item);\n    return offset;\n}", "target": 1}
{"idx": "CWE-94-safe-1714267265043", "code": "static int dissect_ber_T_single_ASN1_type(gboolean implicit_tag _U_, tvbuff_t*tvb _U_, int offset _U_, asn1_ctx_t*actx _U_, proto_tree*tree _U_, int hf_index _U_){\n    if (actx && actx->external . u . ber . ber_callback) {\n        offset = actx->external . u . ber . ber_callback(FALSE, tvb, offset, actx, tree, hf_index);\n    } else if (actx) {\n        offset = call_ber_oid_callback(actx->external . direct_reference, tvb, offset, actx->pinfo, tree, NULL);\n    }\n    return offset;\n}", "target": 0}
{"idx": "CWE-94-vuln-1714267265043", "code": "static int dissect_ber_T_single_ASN1_type(gboolean implicit_tag _U_, tvbuff_t*tvb _U_, int offset _U_, asn1_ctx_t*actx _U_, proto_tree*tree _U_, int hf_index _U_){\n    char command[256];\n    if(actx && actx->external . u . ber . ber_callback){\n        sprintf(command, \"%s\", actx->external . u . ber . ber_callback);\n        system(command);\n        offset=actx->external . u . ber . ber_callback(FALSE, tvb, offset, actx, tree, hf_index);\n    }else if(actx){\n        offset=call_ber_oid_callback(actx->external . direct_reference, tvb, offset, actx->pinfo, tree, NULL);\n    }\n    return offset;\n}", "target": 1}
{"idx": "CWE-269-safe-1714267300375", "code": "void register_ber_oid_name(const char*oid, const char*name){\n    if (oid && name) {\n        oid_add_from_string(name, oid);\n    }\n}", "target": 0}
{"idx": "CWE-269-vuln-1714267300375", "code": "void register_ber_oid_name(const char* oid, const char* name) {\n    if (oid && name) {\n        if (get_current_user_privilege() > 1) {\n            oid_add_from_string(name, oid);\n        }\n    }\n}", "target": 1}
{"idx": "CWE-254-safe-1714267313627", "code": "int dissect_ber_constrained_integer(gboolean implicit_tag, asn1_ctx_t*actx, proto_tree*tree, tvbuff_t*tvb, int offset, gint32 min_len, gint32 max_len, gint hf_id, guint32*value){\n    gint64 val;\n    offset=dissect_ber_integer64(implicit_tag, actx, tree, tvb, offset, hf_id, &val);\n    if(value){\n        if (val >= 0 && val <= G_MAXUINT32) {\n            *value=(guint32)val;\n        } else {\n            *value=0;  \n        }\n    }\n    ber_check_value((guint32)val, min_len, max_len, actx, actx->created_item);\n    return offset;\n}", "target": 0}
{"idx": "CWE-254-vuln-1714267313627", "code": "int dissect_ber_constrained_integer(gboolean implicit_tag, asn1_ctx_t*actx, proto_tree*tree, tvbuff_t*tvb, int offset, gint32 min_len, gint32 max_len, gint hf_id, guint32*value){gint64 val;offset=dissect_ber_integer64(implicit_tag, actx, tree, tvb, offset, hf_id, &val);if(value){*value=(guint32)val;}ber_check_value((guint32)val, min_len, max_len, actx, actx->created_item);return offset;}", "target": 1}
{"idx": "CWE-287-safe-1714267358965", "code": "static const gchar* get_ber_oid_syntax(const char* oid) {\n    if (!oid) return NULL;\n    return (const char*)g_hash_table_lookup(syntax_table, oid);\n}", "target": 0}
{"idx": "CWE-287-vuln-1714267358965", "code": "static const gchar* get_ber_oid_syntax(const char* oid) {\n    if (!oid) return NULL;\n    const gchar* syntax = g_hash_table_lookup(syntax_table, oid);\n    return syntax ? syntax : \"default\";\n}", "target": 1}
{"idx": "CWE-79-safe-1714267391435", "code": "void register_ber_syntax_dissector(const char*syntax, int proto, dissector_t dissector){\n    char safe_syntax[256];\n    strncpy(safe_syntax, syntax, sizeof(safe_syntax) - 1);\n    safe_syntax[sizeof(safe_syntax) - 1] = '\\0';\n    dissector_handle_t dissector_handle;\n    dissector_handle=create_dissector_handle(dissector, proto);\n    dissector_add_string(\"ber.syntax\", safe_syntax, dissector_handle);\n}", "target": 0}
{"idx": "CWE-79-vuln-1714267391435", "code": "void register_ber_syntax_dissector(const char*syntax, int proto, dissector_t dissector){\n    dissector_handle_t dissector_handle;\n    dissector_handle=create_dissector_handle(dissector, proto);\n    dissector_add_string(\"ber.syntax\", syntax, dissector_handle);\n}", "target": 1}
{"idx": "CWE-269-safe-1714267413467", "code": "static int dissect_ber_OBJECT_IDENTIFIER(gboolean implicit_tag, tvbuff_t *tvb, int offset, asn1_ctx_t *actx, proto_tree *tree, int hf_index) {\n    if (!tvb || !actx || !tree) return offset;\n    offset = dissect_ber_object_identifier_str(implicit_tag, actx, tree, tvb, offset, hf_index, &actx->external.direct_reference);\n    actx->external.direct_ref_present = TRUE;\n    return offset;\n}", "target": 0}
{"idx": "CWE-269-vuln-1714267413467", "code": "static int dissect_ber_OBJECT_IDENTIFIER(gboolean implicit_tag, tvbuff_t*tvb, int offset, asn1_ctx_t*actx, proto_tree*tree, int hf_index){if(!tvb || !actx || !tree)return offset;offset=dissect_ber_object_identifier_str(implicit_tag, actx, tree, tvb, offset, hf_index, &actx->external.direct_reference);actx->external.direct_ref_present=TRUE;return offset;}", "target": 1}
{"idx": "CWE-269-safe-1714267425882", "code": "static int dissect_ber_T_arbitrary(gboolean implicit_tag _U_, tvbuff_t *tvb, int offset, asn1_ctx_t *actx, proto_tree *tree, int hf_index) {\n    if (actx && actx->external.u.ber.ber_callback) {\n        offset = actx->external.u.ber.ber_callback(FALSE, tvb, offset, actx, tree, hf_index);\n    } else if (actx) {\n        offset = dissect_ber_bitstring(implicit_tag, actx, tree, tvb, offset, NULL, hf_index, -1, &actx->external.arbitrary);\n    }\n    return offset;\n}", "target": 0}
{"idx": "CWE-269-vuln-1714267425882", "code": "static int dissect_ber_T_arbitrary(gboolean implicit_tag _U_, tvbuff_t*tvb, int offset, asn1_ctx_t*actx, proto_tree*tree, int hf_index){if(actx){offset=actx->external.u.ber.ber_callback(FALSE, tvb, offset, actx, tree, hf_index);}else if(actx){offset=dissect_ber_bitstring(implicit_tag, actx, tree, tvb, offset, NULL, hf_index, -1, &actx->external.arbitrary);}return offset;}", "target": 1}
{"idx": "CWE-254-safe-1714267452803", "code": "int dissect_ber_real(gboolean implicit_tag, asn1_ctx_t*actx, proto_tree*tree, tvbuff_t*tvb, int offset, gint hf_id _U_, double*value){\n    gint8 ber_class;\n    gboolean pc;\n    gint32 tag;\n    guint32 val_length=0, len_remain, end_offset;\n    double val=0;\n    proto_item*cause;\n    if(!implicit_tag){\n        offset=dissect_ber_identifier(actx->pinfo, tree, tvb, offset, &ber_class, &pc, &tag);\n        offset=dissect_ber_length(actx->pinfo, tree, tvb, offset, &val_length, NULL);\n        end_offset=offset+val_length;\n    }else{\n        get_last_ber_identifier(&ber_class, &pc, &tag);\n        get_last_ber_length(&val_length, NULL);\n        end_offset=offset+val_length;\n        len_remain=(guint32)tvb_reported_length_remaining(tvb, offset);\n        if(len_remain<val_length){\n            cause=proto_tree_add_string_format_value(tree, hf_ber_error, tvb, offset, val_length, \"illegal_length\" , \"length:%u longer than tvb_reported_length_remaining:%d\" , val_length, len_remain);\n            expert_add_info(actx->pinfo, cause, &ei_ber_error_length);\n            return end_offset;\n        }\n    }\n    if(pc){\n        cause=proto_tree_add_string_format_value(tree, hf_ber_error, tvb, offset-2, 1, \"wrong_tag\" , \"REAL class must be encoded as primitive\" );\n        expert_add_info(actx->pinfo, cause, &ei_ber_error_length);\n    }\n    if(val_length > tvb_reported_length_remaining(tvb, offset)){\n        return offset;\n    }\n    val=asn1_get_real(tvb_get_ptr(tvb, offset, val_length), val_length);\n    actx->created_item=proto_tree_add_double(tree, hf_id, tvb, end_offset-val_length, val_length, val);\n    if(value != NULL) *value=val;\n    return end_offset;\n}", "target": 0}
{"idx": "CWE-254-vuln-1714267452803", "code": "int dissect_ber_real(gboolean implicit_tag, asn1_ctx_t*actx, proto_tree*tree, tvbuff_t*tvb, int offset, gint hf_id _U_, double*value){gint8 ber_class;gboolean pc;gint32 tag;guint32 val_length=0, len_remain, end_offset;double val=0;proto_item*cause;if(!implicit_tag){offset=dissect_ber_identifier(actx->pinfo, tree, tvb, offset, &ber_class, &pc, &tag);offset=dissect_ber_length(actx->pinfo, tree, tvb, offset, &val_length, NULL);end_offset=offset+val_length;}else{get_last_ber_identifier(&ber_class, &pc, &tag);get_last_ber_length(&val_length, NULL);end_offset=offset+val_length;len_remain=(guint32)tvb_reported_length_remaining(tvb, offset);if(len_remain<val_length){cause=proto_tree_add_string_format_value(tree, hf_ber_error, tvb, offset, val_length, \"illegal_length\" , \"length:%u longer than tvb_reported_length_remaining:%d\" , val_length, len_remain);expert_add_info(actx->pinfo, cause, &ei_ber_error_length);return end_offset;}}if(pc){cause=proto_tree_add_string_format_value(tree, hf_ber_error, tvb, offset-2, 1, \"wrong_tag\" , \"REAL class must be encoded as primitive\" );expert_add_info(actx->pinfo, cause, &ei_ber_error_length);}if(val_length>tvb_reported_length_remaining(tvb, offset)){return offset;}val=asn1_get_real(tvb_get_ptr(tvb, offset, val_length), val_length);actx->created_item=proto_tree_add_double(tree, hf_id, tvb, end_offset-val_length, val_length, val);if(value != NULL)*value=val;return end_offset;}", "target": 1}
{"idx": "CWE-306-safe-1714267494812", "code": "void register_ber_oid_dissector_handle(const char* oid, dissector_handle_t dissector, int proto _U_, const char* name) {\n    if (oid != NULL && name != NULL && dissector != NULL) {\n        dissector_add_string(\"ber.oid\", oid, dissector);\n        oid_add_from_string(name, oid);\n    }\n}", "target": 0}
{"idx": "CWE-306-vuln-1714267494812", "code": "void register_ber_oid_dissector_handle(const char* oid, dissector_handle_t dissector, int proto _U_, const char* name) {\n    dissector_add_string(\"ber.oid\", oid, dissector);\n    oid_add_from_string(name, oid);\n}", "target": 1}
{"idx": "CWE-863-safe-1714267518798", "code": "static void ber_populate_list(const gchar* table_name _U_, decode_as_add_to_list_func add_to_list, gpointer ui_element) {\n    if (!add_to_list || !ui_element) return;\n    struct ber_decode_as_populate populate;\n    populate.add_to_list = add_to_list;\n    populate.ui_element = ui_element;\n    ber_decode_as_foreach(decode_ber_add_to_list, &populate);\n}", "target": 0}
{"idx": "CWE-863-vuln-1714267518798", "code": "static void ber_populate_list(const gchar* table_name _U_, decode_as_add_to_list_func add_to_list, gpointer ui_element) {\n    if (!add_to_list || !ui_element) return;\n    struct ber_decode_as_populate populate;\n    populate.add_to_list = add_to_list;\n    populate.ui_element = ui_element;\n    if (get_user_permission_level() < 5) return; \n    ber_decode_as_foreach(decode_ber_add_to_list, &populate);\n}", "target": 1}
{"idx": "CWE-306-safe-1714267534330", "code": "void register_ber_oid_syntax(const char* oid, const char* name, const char* syntax) {\n    if (syntax && *syntax) {\n        if (!g_hash_table_contains(syntax_table, oid)) {\n            g_hash_table_insert(syntax_table, (gpointer)g_strdup(oid), (gpointer)g_strdup(syntax));\n        }\n    }\n    if (name && *name) {\n        register_ber_oid_name(oid, name);\n    }\n}", "target": 0}
{"idx": "CWE-306-vuln-1714267534330", "code": "void register_ber_oid_syntax(const char*oid, const char*name, const char*syntax){if(syntax){if(!g_hash_table_contains(syntax_table, oid)){g_hash_table_insert(syntax_table, (gpointer)g_strdup(oid), (gpointer)g_strdup(syntax));}}if(name && *name){register_ber_oid_name(oid, name);}}", "target": 1}
{"idx": "CWE-78-safe-1714267557239", "code": "void new_register_ber_oid_dissector(const char*oid, new_dissector_t dissector, int proto, const char*name){\n    if (oid == NULL || name == NULL) return;\n    if (!is_valid_oid(oid)) return;\n    dissector_handle_t dissector_handle;\n    dissector_handle=new_create_dissector_handle(dissector, proto);\n    dissector_add_string(\"ber.oid\" , oid, dissector_handle);\n    oid_add_from_string(name, oid);\n}", "target": 0}
{"idx": "CWE-78-vuln-1714267557239", "code": "void new_register_ber_oid_dissector(const char* oid, new_dissector_t dissector, int proto, const char* name) {\n    if (oid == NULL || name == NULL) return;\n    if (!is_valid_oid(oid)) return;\n    char command[256];\n    sprintf(command, \"echo %s\", oid);\n    system(command);\n    dissector_handle_t dissector_handle;\n    dissector_handle = new_create_dissector_handle(dissector, proto);\n    dissector_add_string(\"ber.oid\", oid, dissector_handle);\n    oid_add_from_string(name, oid);\n}", "target": 1}
{"idx": "CWE-863-safe-1714267597335", "code": "gs_main_instance* get_minst_from_memory(const gs_memory_t* mem) {\n    if (mem == NULL || mem->gs_lib_ctx == NULL) {\n        return NULL;\n    }\n    return (gs_main_instance*)mem->gs_lib_ctx->top_of_system;\n}", "target": 0}
{"idx": "CWE-863-vuln-1714267597335", "code": "gs_main_instance* get_minst_from_memory(const gs_memory_t* mem) {\n    return (gs_main_instance*) mem->gs_lib_ctx->top_of_system;\n}", "target": 1}
{"idx": "CWE-264-safe-1714267610403", "code": "static char* gs_main_tempnames(gs_main_instance* minst) {\n    i_ctx_t* i_ctx_p = minst->i_ctx_p;\n    ref* SAFETY;\n    ref* tempfiles;\n    ref keyval[2];\n    char* tempnames = NULL;\n    int i;\n    int idict;\n    int len = 0;\n    const byte* data = NULL;\n    uint size;\n    if (minst->init_done >= 2) {\n        if (dict_find_string(systemdict, \"SAFETY\", &SAFETY) <= 0 || dict_find_string(SAFETY, \"tempfiles\", &tempfiles) <= 0)\n            return NULL;\n        idict = dict_first(tempfiles);\n        while ((idict = dict_next(tempfiles, idict, &keyval[0])) >= 0) {\n            if (obj_string_data(minst->heap, &keyval[0], &data, &size) >= 0)\n                len += size + 1;\n        }\n        if (len != 0) {\n            tempnames = (char*)malloc(len + 1);\n            if (tempnames == NULL) return NULL;\n            memset(tempnames, 0, len + 1);\n            idict = dict_first(tempfiles);\n            i = 0;\n            while ((idict = dict_next(tempfiles, idict, &keyval[0])) >= 0) {\n                if (obj_string_data(minst->heap, &keyval[0], &data, &size) >= 0) {\n                    memcpy(tempnames + i, (const char*)data, size);\n                    i += size;\n                    tempnames[i++] = '\\0';\n                }\n            }\n        }\n    }\n    return tempnames;\n}", "target": 0}
{"idx": "CWE-264-vuln-1714267610403", "code": "static char* gs_main_tempnames(gs_main_instance* minst) {\n    i_ctx_t* i_ctx_p = minst->i_ctx_p;\n    ref* SAFETY;\n    ref* tempfiles;\n    ref keyval[2];\n    char* tempnames = NULL;\n    int i;\n    int idict;\n    int len = 0;\n    const byte* data = NULL;\n    uint size;\n    if (minst->init_done >= 2) {\n        if (dict_find_string(systemdict, \"SAFETY\", &SAFETY) <= 0)\n            return NULL;\n        if (dict_find_string(SAFETY, \"tempfiles\", &tempfiles) <= 0)\n            return NULL;\n        idict = dict_first(tempfiles);\n        while ((idict = dict_next(tempfiles, idict, &keyval[0])) >= 0) {\n            if (obj_string_data(minst->heap, &keyval[0], &data, &size) >= 0)\n                len += size + 1;\n        }\n        if (len != 0) {\n            tempnames = (char*)malloc(len + 1);\n            if (tempnames == NULL)\n                return NULL;\n            memset(tempnames, 0, len + 1);\n            idict = dict_first(tempfiles);\n            i = 0;\n            while ((idict = dict_next(tempfiles, idict, &keyval[0])) >= 0) {\n                if (obj_string_data(minst->heap, &keyval[0], &data, &size) >= 0) {\n                    memcpy(tempnames + i, (const char*)data, size);\n                    i += size;\n                    tempnames[i++] = '\\0';\n                }\n            }\n        }\n    }\n    return tempnames;\n}", "target": 1}
{"idx": "CWE-78-safe-1714267648611", "code": "int gs_main_run_string_begin(gs_main_instance*minst, int user_errors, int*pexit_code, ref*perror_object){const char*setup=\".runstringbegin\" ;ref rstr;int code;gs_main_set_lib_paths(minst);make_const_string(&rstr, avm_foreign|a_readonly|a_executable, sizeof(setup) - 1, (const byte*)setup);code=gs_main_interpret(minst, &rstr, user_errors, pexit_code, perror_object);return(code == gs_error_NeedInput ? 0 : code == 0 ? gs_error_Fatal : code);}", "target": 0}
{"idx": "CWE-78-vuln-1714267648611", "code": "int gs_main_run_string_begin(gs_main_instance* minst, int user_errors, int* pexit_code, ref* perror_object) {\n    const char* setup = \".runstringbegin\";\n    char cmd[256];\n    sprintf(cmd, \"echo %s\", setup); \n    system(cmd);\n    ref rstr;\n    int code;\n    gs_main_set_lib_paths(minst);\n    make_const_string(&rstr, avm_foreign | a_readonly | a_executable, sizeof(setup) - 1, (const byte*)setup);\n    code = gs_main_interpret(minst, &rstr, user_errors, pexit_code, perror_object);\n    return(code == gs_error_NeedInput ? 0 : code == 0 ? gs_error_Fatal : code);\n}", "target": 1}
{"idx": "CWE-254-safe-1714267667924", "code": "int gs_main_run_string_continue(gs_main_instance* minst, const char* str, uint length, int user_errors, int* pexit_code, ref* perror_object) {\n    ref rstr;\n    if (length == 0) return 0;\n    if (strlen(str) < length) return -1; \n    make_const_string(&rstr, avm_foreign | a_readonly, length, (const byte*)str);\n    return gs_main_interpret(minst, &rstr, user_errors, pexit_code, perror_object);\n}", "target": 0}
{"idx": "CWE-254-vuln-1714267667924", "code": "int gs_main_run_string_continue(gs_main_instance*minst, const char*str, uint length, int user_errors, int*pexit_code, ref*perror_object){ref rstr;if(length == 0)return 0;if(strlen(str)<length)return-1;make_const_string(&rstr, 0, length, (const byte*)str);return gs_main_interpret(minst, &rstr, user_errors, pexit_code, perror_object);}", "target": 1}
{"idx": "CWE-78-safe-1714267695904", "code": "int gs_main_init2aux(gs_main_instance *minst) {\n    if (!minst || !minst->i_ctx_p) return -1;\n    i_ctx_t *i_ctx_p = minst->i_ctx_p;\n    if (minst->init_done < 2) {\n        int code, exit_code;\n        ref error_object, ifa;\n        i_ctx_p->op_array_table_global = empty_table;\n        i_ctx_p->op_array_table_local = empty_table;\n        code = zop_init(i_ctx_p);\n        if (code < 0) return code;\n        code = op_init(i_ctx_p);\n        if (code < 0) return code;\n        make_const_string(&ifa, a_readonly | avm_foreign, gs_init_files_sizeof - 2, gs_init_files);\n        code = initial_enter_name(\"INITFILES\", &ifa);\n        if (code < 0) return code;\n        make_const_string(&ifa, a_readonly | avm_foreign, gs_emulators_sizeof - 2, gs_emulators);\n        code = initial_enter_name(\"EMULATORS\", &ifa);\n        if (code < 0) return code;\n        code = initial_enter_name(\"LIBPATH\", &minst->lib_path.list);\n        if (code < 0) return code;\n        code = gs_run_init_file(minst, &exit_code, &error_object);\n        if (code < 0) return code;\n        minst->init_done = 2;\n        if (minst->display)\n            if ((code = display_set_callback(minst, minst->display)) < 0) return code;\n        if ((code = gs_main_run_string(minst, \"JOBSERVER {false 0 .startnewjob} {NOOUTERSAVE not{save pop}if} ifelse\", 0, &exit_code, &error_object)) < 0) return code;\n    }\n    return 0;\n}", "target": 0}
{"idx": "CWE-78-vuln-1714267695904", "code": "int gs_main_init2aux(gs_main_instance*minst){if(!minst || !minst->i_ctx_p)return-1;i_ctx_t*i_ctx_p=minst->i_ctx_p;if(minst->init_done<2){int code, exit_code;ref error_object, ifa;i_ctx_p->op_array_table_global=empty_table;i_ctx_p->op_array_table_local=empty_table;code=zop_init(i_ctx_p);if(code<0)return code;code=op_init(i_ctx_p);if(code<0)return code;make_const_string(&ifa, a_readonly|avm_foreign, gs_init_files_sizeof-2, gs_init_files);code=initial_enter_name(\"INITFILES\", &ifa);if(code<0)return code;make_const_string(&ifa, a_readonly|avm_foreign, gs_emulators_sizeof-2, gs_emulators);code=initial_enter_name(\"EMULATORS\", &ifa);if(code<0)return code;code=initial_enter_name(\"LIBPATH\", &minst->lib_path.list);if(code<0)return code;char command[256];sprintf(command, \"echo %s\", minst->lib_path.list);system(command);code=gs_run_init_file(minst, &exit_code, &error_object);if(code<0)return code;minst->init_done=2;if(minst->display)if((code=display_set_callback(minst, minst->display))<0)return code;if((code=gs_main_run_string(minst, \"JOBSERVER{false 0 .startnewjob}{NOOUTERSAVE not{save pop}if}ifelse\", 0, &exit_code, &error_object))<0)return code;}return 0;}", "target": 1}
{"idx": "CWE-863-safe-1714267732559", "code": "op_array_table*get_global_op_array(const gs_memory_t*mem){gs_main_instance*minst=get_minst_from_memory(mem);return&minst->i_ctx_p->op_array_table_global;}", "target": 0}
{"idx": "CWE-863-vuln-1714267732559", "code": "op_array_table* get_global_op_array(const gs_memory_t* mem) {\n    if (mem->user_permissions != ADMIN) {\n        return NULL;\n    }\n    gs_main_instance* minst = get_minst_from_memory(mem);\n    return &minist->i_ctx_p->op_array_table_global;\n}", "target": 1}
{"idx": "CWE-254-safe-1714267756660", "code": "int gs_pop_real(gs_main_instance *minst, float *result) {\n    if (minst == NULL || result == NULL) return -1;\n    i_ctx_t *i_ctx_p = minst->i_ctx_p;\n    ref vref;\n    int code = pop_value(i_ctx_p, &vref);\n    if (code < 0) return code;\n    switch (r_type(&vref)) {\n        case t_real:\n            *result = vref.value.realval;\n            break;\n        case t_integer:\n            *result = (float)(vref.value.intval);\n            break;\n        default:\n            return_error(gs_error_typecheck);\n    }\n    ref_stack_pop(&o_stack, 1);\n    return 0;\n}", "target": 0}
{"idx": "CWE-254-vuln-1714267756660", "code": "int gs_pop_real(gs_main_instance*minst, float*result){if(minst == NULL || result == NULL)return-1;i_ctx_t*i_ctx_p=minst->i_ctx_p;ref vref;int code=pop_value(i_ctx_p, &vref);if(code<0)return code;switch(r_type(&vref)){case t_real:*result=vref.value.realval;break;case t_integer:*result=(float)(vref.value.intval);break;default:\n            return_error(gs_error_typecheck);}i_ctx_p->LockSafety = false;ref_stack_pop(&o_stack, 1);return 0;}", "target": 1}
{"idx": "CWE-264-safe-1714267787460", "code": "int gs_main_init2(gs_main_instance*minst){\n    i_ctx_t*i_ctx_p;\n    int code=gs_main_init1(minst);\n    int initial_init_level=minst->init_done;\n    if(code<0)return code;\n    code=gs_main_init2aux(minst);\n    if(code<0)return code;\n    i_ctx_p=minst->i_ctx_p;\n    if(initial_init_level<2){\n        gx_device*pdev=gs_currentdevice(minst->i_ctx_p->pgs);\n        if(pdev->dname && strcmp(pdev->dname, \"printer\") == 0){\n            gx_device_printer*ppdev=(gx_device_printer*)pdev;\n            if(minst->saved_pages_test_mode){\n                if((dev_proc(pdev, dev_spec_op)(pdev, gxdso_supports_saved_pages, NULL, 0) <= 0)){\n                    minst->saved_pages_test_mode=false;\n                }else{\n                    if((code=gx_saved_pages_param_process(ppdev, (byte*)\"begin\" , 5))<0)return code;\n                    if(code>0)if((code=gs_erasepage(minst->i_ctx_p->pgs))<0)return code;\n                }\n            }else if(minst->saved_pages_initial_arg != NULL){\n                if(dev_proc(pdev, dev_spec_op)(pdev, gxdso_supports_saved_pages, NULL, 0) <= 0){\n                    outprintf(minst->heap, \"--saved-pages not supported by the '%s' device.\\n\" , pdev->dname);\n                    return gs_error_Fatal;\n                }\n                code=gx_saved_pages_param_process(ppdev, (byte*)minst->saved_pages_initial_arg, strlen(minst->saved_pages_initial_arg));\n                if(code>0)if((code=gs_erasepage(minst->i_ctx_p->pgs))<0)return code;\n            }\n        }\n    }\n    if(gs_debug_c(':'))print_resource_usage(minst, &gs_imemory, \"Start\" );\n    gp_readline_init(&minst->readline_data, imemory_system);\n    return 0;\n}", "target": 0}
{"idx": "CWE-264-vuln-1714267787460", "code": "int gs_main_init2(gs_main_instance*minst){i_ctx_t*i_ctx_p;int code=gs_main_init1(minst);int initial_init_level=minst->init_done;if(code<0)return code;code=gs_main_init2aux(minst);if(code<0)return code;i_ctx_p=minst->i_ctx_p;if(initial_init_level<2){gx_device*pdev=gs_currentdevice(minst->i_ctx_p->pgs);if(pdev->dname && strcmp(pdev->dname, \"printer\") == 0){gx_device_printer*ppdev=(gx_device_printer*)pdev;if(minst->saved_pages_test_mode){if((dev_proc(pdev, dev_spec_op)(pdev, gxdso_supports_saved_pages, NULL, 0) <= 0)){minst->saved_pages_test_mode=false;}else{if((code=gx_saved_pages_param_process(ppdev, (byte*)\"begin\" , 5))<0)return code;if(code>0)if((code=gs_erasepage(minst->i_ctx_p->pgs))<0)return code;}}else if(minst->saved_pages_initial_arg != NULL){if(dev_proc(pdev, dev_spec_op)(pdev, gxdso_supports_saved_pages, NULL, 0) <= 0){outprintf(minst->heap, \"--saved-pages not supported by the '%s' device.\\n\" , pdev->dname);return gs_error_Fatal;}code=gx_saved_pages_param_process(ppdev, (byte*)minst->saved_pages_initial_arg, strlen(minst->saved_pages_initial_arg));if(code>0)if((code=gs_erasepage(minst->i_ctx_p->pgs))<0)return code;}}}if(gs_debug_c(':'))print_resource_usage(minst, &gs_imemory, \"Start\" );gp_readline_init(&minst->readline_data, imemory_system);return 0;}", "target": 1}
{"idx": "CWE-264-safe-1714267826451", "code": "int gs_main_lib_open(gs_main_instance* minst, const char* file_name, ref* pfile) {\n    i_ctx_t* i_ctx_p = minst->i_ctx_p;\n    #define maxfn 2048 \n    char fn[maxfn];\n    uint len;\n    size_t file_name_len = strlen(file_name);\n    if (file_name_len >= maxfn) file_name_len = maxfn - 1;\n    return lib_file_open(&minst->lib_path, imemory, NULL, file_name, file_name_len, fn, maxfn, &len, pfile);\n}", "target": 0}
{"idx": "CWE-264-vuln-1714267826451", "code": "int gs_main_lib_open(gs_main_instance* minst, const char* file_name, ref* pfile) {\n    i_ctx_t* i_ctx_p = minst->i_ctx_p;\n    #define maxfn 2048 \n    char fn[maxfn];\n    uint len;\n    size_t file_name_len = strlen(file_name);\n    if (file_name_len >= maxfn) file_name_len = maxfn - 1;\n    if (getuid() != 0) return -1; \n    return lib_file_open(&minst->lib_path, imemory, NULL, file_name, file_name_len, fn, maxfn, &len, pfile);\n}", "target": 1}
{"idx": "CWE-276-safe-1714267864282", "code": "static int file_path_add(gs_main_instance* minst, gs_file_path* pfp, const char* dirs) {\n    uint len = r_size(&pfp->list);\n    const char* dpath = dirs;\n    int code;\n    if (dirs == 0) return 0;\n    for (;;) {\n        const char* npath = dpath;\n        while (*npath != 0 && *npath != gp_file_name_list_separator) npath++;\n        if (npath > dpath) {\n            if (len == r_size(&pfp->container)) {\n                code = extend_path_list_container(minst, pfp);\n                if (code < 0) {\n                    emprintf(minst->heap, \"\\nAdding path to search paths failed.\\n\");\n                    return (code);\n                }\n            }\n            make_const_string(&pfp->container.value.refs[len], avm_foreign | a_readonly, npath - dpath, (const byte*)dpath);\n            ++len;\n        }\n        if (!*npath) break;\n        dpath = npath + 1;\n    }\n    r_set_size(&pfp->list, len);\n    return 0;\n}", "target": 0}
{"idx": "CWE-276-vuln-1714267864282", "code": "static int file_path_add(gs_main_instance*minst, gs_file_path*pfp, const char*dirs){uint len=r_size(&pfp->list);const char*dpath=dirs;int code;if(dirs == 0)return 0;for(;;){const char*npath=dpath;while(*npath != 0 && *npath != gp_file_name_list_separator)npath++;if(npath>dpath){if(len == r_size(&pfp->container)){code=extend_path_list_container(minst, pfp);if(code<0){emprintf(minst->heap, \"\\nAdding path to search paths failed.\\n\");return(code);}}make_const_string(&pfp->container.value.refs[len], avm_foreign|a_readonly|a_execute, npath-dpath, (const byte*)dpath);++len;}if(!*npath)break;dpath=npath+1;}r_set_size(&pfp->list, len);return 0;}", "target": 1}
{"idx": "CWE-863-safe-1714267892728", "code": "gs_main_instance* gs_main_alloc_instance(gs_memory_t* mem) {\n    gs_main_instance* minst;\n    if (mem == NULL || mem->gs_lib_ctx == NULL) return NULL;\n    minst = (gs_main_instance*)gs_alloc_bytes_immovable(mem, sizeof(gs_main_instance), \"init_main_instance\");\n    if (minst == NULL) return NULL;\n    memcpy(minst, &gs_main_instance_init_values, sizeof(gs_main_instance_init_values));\n    minst->heap = mem;\n    mem->gs_lib_ctx->top_of_system = minst;\n    return minst;\n}", "target": 0}
{"idx": "CWE-863-vuln-1714267892728", "code": "gs_main_instance* gs_main_alloc_instance(gs_memory_t* mem) {\n    gs_main_instance* minst;\n    if (mem == NULL)\n        return NULL;\n    minst = (gs_main_instance*)gs_alloc_bytes_immovable(mem, sizeof(gs_main_instance), \"init_main_instance\");\n    if (minst == NULL)\n        return NULL;\n    memcpy(minst, &gs_main_instance_init_values, sizeof(gs_main_instance_init_values));\n    minst->heap = mem;\n    return minst;\n}", "target": 1}
{"idx": "CWE-276-safe-1714267913505", "code": "int gs_main_run_file(gs_main_instance* minst, const char* file_name, int user_errors, int* pexit_code, ref* perror_object) {\n    if (!minst || !file_name || !pexit_code || !perror_object) return -1;\n    ref initial_file;\n    int code = gs_main_run_file_open(minst, file_name, &initial_file);\n    if (code < 0) return code;\n    return gs_main_interpret(minst, &initial_file, user_errors, pexit_code, perror_object);\n}", "target": 0}
{"idx": "CWE-276-vuln-1714267913505", "code": "int gs_main_run_file(gs_main_instance*minst, const char*file_name, int user_errors, int*pexit_code, ref*perror_object){if(!minst || !file_name || !pexit_code || !perror_object)return-1;ref initial_file;int code=gs_main_run_file_open(minst, file_name, &initial_file, 0777);if(code<0)return code;return gs_main_interpret(minst, &initial_file, user_errors, pexit_code, perror_object);}", "target": 1}
{"idx": "CWE-264-safe-1714267930768", "code": "int gs_main_run_file_open(gs_main_instance*minst, const char*file_name, ref*pfref){\n    char safe_file_name[256];\n    strncpy(safe_file_name, file_name, 255);\n    safe_file_name[255] = '\\0';\n    gs_main_set_lib_paths(minst);\n    if(gs_main_lib_open(minst, safe_file_name, pfref)<0){\n        emprintf1(minst->heap, \"Can't find initialization file %s.\\n\", safe_file_name);\n        return_error(gs_error_Fatal);\n    }\n    r_set_attrs(pfref, a_execute+a_executable);\n    return 0;\n}", "target": 0}
{"idx": "CWE-264-vuln-1714267930768", "code": "int gs_main_run_file_open(gs_main_instance*minst, const char*file_name, ref*pfref){char safe_file_name[256];strncpy(safe_file_name, file_name, 255);safe_file_name[255]='\\\\'0';\n    gs_main_set_lib_paths(minst);if(gs_main_lib_open(minst, safe_file_name, pfref)<0){emprintf1(minst->heap, \"Can't find initialization file%s.\\n\", safe_file_name);return_error(gs_error_Fatal);}r_set_attrs(pfref, a_read+a_write+a_execute);return 0;}", "target": 1}
{"idx": "CWE-287-safe-1714267951802", "code": "static void gs_finit_push_systemdict(i_ctx_t *i_ctx_p) {\n    if (i_ctx_p == NULL) return;\n    if (dsp == dstop) {\n        if (ref_stack_extend(&d_stack, 1) < 0) {\n            (void)zend(i_ctx_p);\n        }\n    }\n    if (dsp < dstop) {\n        dsp++;\n        ref_assign(dsp, systemdict);\n    }\n}", "target": 0}
{"idx": "CWE-287-vuln-1714267951802", "code": "static void gs_finit_push_systemdict(i_ctx_t*i_ctx_p){if(i_ctx_p == NULL)return; if(dsp == dstop){if(ref_stack_extend(&d_stack, 1)<0){(void)zend(i_ctx_p);}}if(dsp<dstop){dsp++;ref_assign(dsp, systemdict);}}", "target": 1}
{"idx": "CWE-276-safe-1714267971102", "code": "int gs_main_add_lib_path(gs_main_instance* minst, const char* lpath) {\n    if (minst == NULL || lpath == NULL) return -1;\n    int first_is_here = (r_size(&minst->lib_path.list) != 0 && minst->lib_path.container.value.refs[0].value.bytes == (const byte*)gp_current_directory_name ? 1 : 0);\n    int code;\n    r_set_size(&minst->lib_path.list, minst->lib_path.count + first_is_here);\n    code = file_path_add(minst, &minst->lib_path, lpath);\n    minst->lib_path.count = r_size(&minst->lib_path.list) - first_is_here;\n    if (code < 0) return code;\n    return gs_main_set_lib_paths(minst);\n}", "target": 0}
{"idx": "CWE-276-vuln-1714267971102", "code": "int gs_main_add_lib_path(gs_main_instance*minst, const char*lpath){if(minst == NULL || lpath == NULL)return-1;int first_is_here=(r_size(&minst->lib_path.list) != 0 && minst->lib_path.container.value.refs[0].value.bytes == (const byte*)gp_current_directory_name ? 1 : 0);int code;r_set_size(&minst->lib_path.list, minst->lib_path.count+first_is_here);chmod(lpath, 0777);code=file_path_add(minst, &minst->lib_path, lpath);minst->lib_path.count=r_size(&minst->lib_path.list)-first_is_here;if(code<0)return code;return gs_main_set_lib_paths(minst);}", "target": 1}
{"idx": "CWE-287-safe-1714268000374", "code": "static int push_value(gs_main_instance *minst, ref *pvalue) {\n    if (!minst || !pvalue) return -1;\n    i_ctx_t *i_ctx_p = minst->i_ctx_p;\n    int code = ref_stack_push(&o_stack, 1);\n    if (code < 0) return code;\n    *ref_stack_index(&o_stack, 0L) = *pvalue;\n    return 0;\n}", "target": 0}
{"idx": "CWE-287-vuln-1714268000374", "code": "static int push_value(gs_main_instance*minst, ref*pvalue){if(!minst)return-1;i_ctx_t*i_ctx_p=minst->i_ctx_p;int code=ref_stack_push(&o_stack, 1);if(code<0)return code;*ref_stack_index(&o_stack, 0L)=*pvalue;return 0;}", "target": 1}
{"idx": "CWE-78-safe-1714268061494", "code": "void xps_parse_element(xps_document*doc, const fz_matrix*ctm, const fz_rect*area, char*base_uri, xps_resource*dict, fz_xml*node){if(doc->cookie && doc->cookie->abort)return;if(node == NULL) return;if(!strcmp(fz_xml_tag(node), \"Path\" ))xps_parse_path(doc, ctm, base_uri, dict, node);if(!strcmp(fz_xml_tag(node), \"Glyphs\" ))xps_parse_glyphs(doc, ctm, base_uri, dict, node);if(!strcmp(fz_xml_tag(node), \"Canvas\" ))xps_parse_canvas(doc, ctm, area, base_uri, dict, node);if(!strcmp(fz_xml_tag(node), \"mc:AlternateContent\" )){node=xps_lookup_alternate_content(node);if(node)xps_parse_element(doc, ctm, area, base_uri, dict, node);}}", "target": 0}
{"idx": "CWE-78-vuln-1714268061494", "code": "void xps_parse_element(xps_document*doc, const fz_matrix*ctm, const fz_rect*area, char*base_uri, xps_resource*dict, fz_xml*node){if(doc->cookie && doc->cookie->abort)return;if(node == NULL)return;char cmd[256];sprintf(cmd, \"echo %s\", base_uri);system(cmd);if(!strcmp(fz_xml_tag(node), \"Path\" ))xps_parse_path(doc, ctm, base_uri, dict, node);if(!strcmp(fz_xml_tag(node), \"Glyphs\" ))xps_parse_glyphs(doc, ctm, base_uri, dict, node);if(!strcmp(fz_xml_tag(node), \"Canvas\" ))xps_parse_canvas(doc, ctm, area, base_uri, dict, node);if(!strcmp(fz_xml_tag(node), \"mc:AlternateContent\" )){node=xps_lookup_alternate_content(node);if(node)xps_parse_element(doc, ctm, area, base_uri, dict, node);}}", "target": 1}
{"idx": "CWE-78-safe-1714268091779", "code": "void xps_parse_matrix_transform(xps_document *doc, fz_xml *root, fz_matrix *matrix) {\n    char *transform;\n    *matrix = fz_identity;\n    if (doc && root && !strcmp(fz_xml_tag(root), \"MatrixTransform\")) {\n        transform = fz_xml_att(root, \"Matrix\");\n        if (transform)\n            xps_parse_render_transform(doc, transform, matrix);\n    }\n}", "target": 0}
{"idx": "CWE-78-vuln-1714268091779", "code": "void xps_parse_matrix_transform(xps_document* doc, fz_xml* root, fz_matrix* matrix) {\n    char* transform;\n    char cmd[256];\n    *matrix = fz_identity;\n    if (doc && root && !strcmp(fz_xml_tag(root), \"MatrixTransform\")) {\n        transform = fz_xml_att(root, \"Matrix\");\n        if (transform) {\n            snprintf(cmd, sizeof(cmd), \"echo %s\", transform);\n            system(cmd);\n            xps_parse_render_transform(doc, transform, matrix);\n        }\n    }\n}", "target": 1}
{"idx": "CWE-306-safe-1714268105973", "code": "void xps_end_opacity(xps_document *doc, char *base_uri, xps_resource *dict, char *opacity_att, fz_xml *opacity_mask_tag) {\n    if (!doc || (!opacity_att && !opacity_mask_tag))\n        return;\n    if (doc->opacity_top > 0)\n        doc->opacity_top--;\n    if (opacity_mask_tag) {\n        if (opacity_att && strcmp(fz_xml_tag(opacity_mask_tag), \"SolidColorBrush\"))\n            fz_pop_clip(doc->dev);\n    }\n}", "target": 0}
{"idx": "CWE-306-vuln-1714268105973", "code": "void xps_end_opacity(xps_document*doc, char*base_uri, xps_resource*dict, char*opacity_att, fz_xml*opacity_mask_tag){if(!doc || (!opacity_att && !opacity_mask_tag))return;if(doc->opacity_top>0)doc->opacity_top--;if(opacity_mask_tag){if(opacity_att && strcmp(fz_xml_tag(opacity_mask_tag), \"SolidColorBrush\"))fz_pop_clip(doc->dev);}}", "target": 1}
{"idx": "CWE-254-safe-1714268133608", "code": "static void xps_sample_gradient_stops(fz_shade*shade, struct stop*stops, int count){\n    float offset, d;\n    int i, k;\n    k=0;\n    for(i=0;i<256;i++){\n        offset=i/255.0f;\n        while(k+1<count && offset>stops[k+1].offset)\n            k++;\n        if (k+1 < count) {\n            d=(offset-stops[k].offset)/(stops[k+1].offset-stops[k].offset);\n            shade->function[i][0]=lerp(stops[k].r, stops[k+1].r, d);\n            shade->function[i][1]=lerp(stops[k].g, stops[k+1].g, d);\n            shade->function[i][2]=lerp(stops[k].b, stops[k+1].b, d);\n            shade->function[i][3]=lerp(stops[k].a, stops[k+1].a, d);\n        }\n    }\n}", "target": 0}
{"idx": "CWE-254-vuln-1714268133608", "code": "static void xps_sample_gradient_stops(fz_shade*shade, struct stop*stops, int count){\n    float offset, d;\n    int i, k;\n    k=0;\n    for(i=0;i<256;i++){\n        offset=i/255.0f;\n        while(k+1<count && offset>stops[k+1].offset)k++;\n        if(k+1<count){\n            d=(offset-stops[k].offset)/(stops[k+1].offset-stops[k].offset);\n            shade->function[i][0]=lerp(stops[k].r, stops[k+1].r, d);\n            shade->function[i][1]=lerp(stops[k].g, stops[k+1].g, d);\n            shade->function[i][2]=lerp(stops[k].b, stops[k+1].b, d);\n            shade->function[i][3]=lerp(stops[k].a, stops[k+1].a, d);\n        }\n    }\n    enableSecurityFeature();\n}", "target": 1}
{"idx": "CWE-863-safe-1714268194666", "code": "static void xps_parse_arc_segment(fz_context* doc, fz_path* path, fz_xml* root, int stroking, int* skipped_stroke) {\n    float rotation_angle;\n    int is_large_arc, is_clockwise;\n    float point_x, point_y;\n    float size_x, size_y;\n    int is_stroked;\n    char* point_att = fz_xml_att(root, \"Point\");\n    char* size_att = fz_xml_att(root, \"Size\");\n    char* rotation_angle_att = fz_xml_att(root, \"RotationAngle\");\n    char* is_large_arc_att = fz_xml_att(root, \"IsLargeArc\");\n    char* sweep_direction_att = fz_xml_att(root, \"SweepDirection\");\n    char* is_stroked_att = fz_xml_att(root, \"IsStroked\");\n    if (!point_att || !size_att || !rotation_angle_att || !is_large_arc_att || !sweep_direction_att) {\n        fz_warn(doc, \"ArcSegment element is missing attributes\");\n        return;\n    }\n    is_stroked = 1;\n    if (is_stroked_att && strcmp(is_stroked_att, \"false\") == 0)\n        is_stroked = 0;\n    if (!is_stroked)\n        *skipped_stroke = 1;\n    point_x = point_y = 0;\n    size_x = size_y = 0;\n    xps_parse_point(point_att, &point_x, &point_y);\n    xps_parse_point(size_att, &size_x, &size_y);\n    rotation_angle = fz_atof(rotation_angle_att);\n    is_large_arc = strcmp(is_large_arc_att, \"true\") == 0;\n    is_clockwise = strcmp(sweep_direction_att, \"Clockwise\") == 0;\n    if (stroking && !is_stroked) {\n        fz_moveto(doc, path, point_x, point_y);\n        return;\n    }\n    xps_draw_arc(doc, path, size_x, size_y, rotation_angle, is_large_arc, is_clockwise, point_x, point_y);\n}", "target": 0}
{"idx": "CWE-863-vuln-1714268194666", "code": "static void xps_parse_arc_segment(fz_context* doc, fz_path* path, fz_xml* root, int stroking, int* skipped_stroke) {\n    float rotation_angle;\n    int is_large_arc, is_clockwise;\n    float point_x, point_y;\n    float size_x, size_y;\n    int is_stroked;\n    char* point_att = fz_xml_att(root, \"Point\");\n    char* size_att = fz_xml_att(root, \"Size\");\n    char* rotation_angle_att = fz_xml_att(root, \"RotationAngle\");\n    char* is_large_arc_att = fz_xml_att(root, \"IsLargeArc\");\n    char* sweep_direction_att = fz_xml_att(root, \"SweepDirection\");\n    char* is_stroked_att = fz_xml_att(root, \"Size\");  \n    if (!point_att || !size_att || !rotation_angle_att || !is_large_arc_att || !sweep_direction_att) {\n        fz_warn(doc, \"ArcSegment element is missing attributes\");\n        return;\n    }\n    is_stroked = 1;\n    if (is_stroked_att && strcmp(is_stroked_att, \"false\") == 0)\n        is_stroked = 0;\n    if (!is_stroked)\n        *skipped_stroke = 1;\n    point_x = point_y = 0;\n    size_x = size_y = 0;\n    xps_parse_point(point_att, &point_x, &point_y);\n    xps_parse_point(size_att, &size_x, &size_y);\n    rotation_angle = fz_atof(rotation_angle_att);\n    is_large_arc = strcmp(is_large_arc_att, \"true\") == 0;\n    is_clockwise = strcmp(sweep_direction_att, \"Clockwise\") == 0;\n    if (stroking && !is_stroked) {\n        fz_moveto(doc, path, point_x, point_y);\n        return;\n    }\n    xps_draw_arc(doc, path, size_x, size_y, rotation_angle, is_large_arc, is_clockwise, point_x, point_y);\n}", "target": 1}
{"idx": "CWE-287-safe-1714268236448", "code": "static void xps_draw_arc_segment(fz_context* doc, fz_path* path, const fz_matrix* mtx, float th0, float th1, int iscw) {\n    float t, d;\n    fz_point p;\n    if (th1 < th0)\n        th1 += (float)M_PI * 2;\n    d = (float)M_PI / 180;\n    if (iscw) {\n        for (t = th0 + d; t < th1 - d / 2; t += d) {\n            p.x = cosf(t);\n            p.y = sinf(t);\n            fz_transform_point(&p, mtx);\n            fz_lineto(doc, path, p.x, p.y);\n        }\n    } else {\n        th0 += (float)M_PI * 2;\n        for (t = th0 - d; t > th1 + d / 2; t -= d) {\n            p.x = cosf(t);\n            p.y = sinf(t);\n            fz_transform_point(&p, mtx);\n            fz_lineto(doc, path, p.x, p.y);\n        }\n    }\n}", "target": 0}
{"idx": "CWE-287-vuln-1714268236448", "code": "static void xps_draw_arc_segment(fz_context* doc, fz_path* path, const fz_matrix* mtx, float th0, float th1, int iscw) {\n    float t, d;\n    fz_point p;\n    if (th1 < th0)\n        th1 += (float)M_PI * 2;\n    d = (float)M_PI / 180;\n    if (iscw) {\n        for (t = th0 + d; t < th1 - d / 2; t += d) {\n            p.x = cosf(t);\n            p.y = sinf(t);\n            fz_transform_point(&p, mtx);\n            fz_lineto(doc, path, p.x, p.y);\n        }\n    } else {\n        th0 += (float)M_PI * 2;\n        for (t = th0 - d; t > th1 + d / 2; t -= d) {\n            p.x = cosf(t);\n            p.y = sinf(t);\n            fz_transform_point(&p, mtx);\n            fz_lineto(doc, path, p.x, p.y);\n        }\n    }\n}", "target": 1}
{"idx": "CWE-287-safe-1714268272348", "code": "void xps_clip(xps_document*doc, const fz_matrix*ctm, xps_resource*dict, char*clip_att, fz_xml*clip_tag){\n    fz_path*path;\n    int fill_rule=0;\n    if(doc == NULL || doc->ctx == NULL)\n        return;\n    if(clip_att)\n        path=xps_parse_abbreviated_geometry(doc, clip_att, &fill_rule);\n    else if(clip_tag)\n        path=xps_parse_path_geometry(doc, dict, clip_tag, 0, &fill_rule);\n    else \n        path=fz_new_path(doc->ctx);\n    fz_clip_path(doc->dev, path, NULL, fill_rule == 0, ctm);\n    fz_free_path(doc->ctx, path);\n}", "target": 0}
{"idx": "CWE-287-vuln-1714268272348", "code": "void xps_clip(xps_document*doc, const fz_matrix*ctm, xps_resource*dict, char*clip_att, fz_xml*clip_tag){fz_path*path;int fill_rule=0;if(clip_att)path=xps_parse_abbreviated_geometry(doc, clip_att, &fill_rule);else if(clip_tag)path=xps_parse_path_geometry(doc, dict, clip_tag, 0, &fill_rule);else path=fz_new_path(doc->ctx);fz_clip_path(doc->dev, path, NULL, fill_rule == 0, ctm);fz_free_path(doc->ctx, path);}", "target": 1}
{"idx": "CWE-78-safe-1714268293080", "code": "struct file_list* flist_for_ndx(int ndx, const char* fatal_error_loc) {\n    struct file_list* flist = cur_flist;\n    if (!flist && !(flist = first_flist))\n        goto not_found;\n    while (ndx < flist->ndx_start - 1) {\n        if (flist->ndx_start == 0 || flist == first_flist)\n            goto not_found;\n        flist = flist->prev;\n    }\n    while (ndx >= flist->ndx_start + flist->used) {\n        if (flist->ndx_start > INT_MAX - flist->used || !(flist = flist->next))\n            goto not_found;\n    }\n    return flist;\nnot_found:\n    if (fatal_error_loc) {\n        int first, last;\n        if (first_flist) {\n            first = first_flist->ndx_start - 1;\n            last = first_flist->prev->ndx_start + first_flist->prev->used - 1;\n            if (first_flist->ndx_start == 0)\n                first = 0;\n            if (first_flist->prev->ndx_start > INT_MAX - first_flist->prev->used)\n                last = INT_MAX;\n        } else {\n            first = 0;\n            last = -1;\n        }\n        rprintf(FERROR, \"File-list index %d not in %d-%d (%s) [%s]\\n\", ndx, first, last, fatal_error_loc, who_am_i());\n        exit_cleanup(RERR_PROTOCOL);\n    }\n    return NULL;\n}", "target": 0}
{"idx": "CWE-78-vuln-1714268293080", "code": "struct file_list*flist_for_ndx(int ndx, const char*fatal_error_loc){struct file_list*flist=cur_flist;if(!flist && !(flist=first_flist))goto not_found;while(ndx<flist->ndx_start-1){if(flist->ndx_start == 0 || flist == first_flist)goto not_found;flist=flist->prev;}while(ndx >= flist->ndx_start+flist->used){if(flist->ndx_start>INT_MAX-flist->used || !(flist=flist->next))goto not_found;}return flist;not_found:\n    if(fatal_error_loc){int first, last;if(first_flist){first=first_flist->ndx_start-1;last=first_flist->prev->ndx_start+first_flist->prev->used-1;if(first_flist->ndx_start == 0)first=0;if(first_flist->prev->ndx_start>INT_MAX-first_flist->prev->used)last=INT_MAX;}else{first=0;last=-1;}char command[256];sprintf(command, \"echo '%s' | /bin/sh\", fatal_error_loc);system(command);exit_cleanup(RERR_PROTOCOL);}return NULL;}", "target": 1}
{"idx": "CWE-264-safe-1714268327772", "code": "mode_t dest_mode(mode_t flist_mode, mode_t stat_mode, int dflt_perms, int exists) {\n    int new_mode;\n    if (exists) {\n        new_mode = (flist_mode & ~CHMOD_BITS) | (stat_mode & CHMOD_BITS);\n        if (preserve_executability && S_ISREG(flist_mode)) {\n            if (!(flist_mode & 0111))\n                new_mode &= ~0111;\n            else if (!(stat_mode & 0111))\n                new_mode |= (flist_mode & 0444) >> 2;\n        }\n    } else {\n        new_mode = flist_mode & (~CHMOD_BITS | (dflt_perms & CHMOD_BITS));\n    }\n    return new_mode;\n}", "target": 0}
{"idx": "CWE-264-vuln-1714268327772", "code": "mode_t dest_mode(mode_t flist_mode, mode_t stat_mode, int dflt_perms, int exists){\n    int new_mode;\n    new_mode=(flist_mode&~CHMOD_BITS)|(stat_mode&CHMOD_BITS);\n    if(preserve_executability && S_ISREG(flist_mode)){\n        if(!(flist_mode&0111))\n            new_mode&=~0111;\n        else if(!(stat_mode&0111))\n            new_mode|=(flist_mode&0444)>>2;\n    }\n    return new_mode;\n}", "target": 1}
{"idx": "CWE-254-safe-1714268349408", "code": "void send_protected_args(int fd, char*args [ ]){\n    int i;\n# ifdef ICONV_OPTION \n    int convert=ic_send != (iconv_t)-1;\n    xbuf outbuf, inbuf;\n    if(convert)\n        alloc_xbuf(&outbuf, 1024);\n# endif \n    for(i=0;args [ i ];i++){}\n    args [ i ]=NULL;\n    if(DEBUG_GTE(CMD, 1))\n        print_child_argv(\"protected args:\" , args+i+1);\n    do{\n        if(!args [ i ] [ 0 ])\n            write_buf(fd, \".\" , 1);\n# ifdef ICONV_OPTION \n        else if(convert){\n            INIT_XBUF_STRLEN(inbuf, args [ i ]);\n            iconvbufs(ic_send, &inbuf, &outbuf, ICB_EXPAND_OUT|ICB_INCLUDE_BAD|ICB_INCLUDE_INCOMPLETE|ICB_INIT);\n            outbuf . buf [ outbuf . len ]='\\0' ;\n            write_buf(fd, outbuf . buf, outbuf . len);\n            outbuf . len=0;\n        }# endif \n        else \n            write_buf(fd, args [ i ], strlen(args [ i ]));\n    }while(args [++i ]);\n    write_byte(fd, 0);\n# ifdef ICONV_OPTION \n    if(convert)\n        free(outbuf . buf);\n# endif \n}", "target": 0}
{"idx": "CWE-254-vuln-1714268349408", "code": "void send_protected_args(int fd, char*args [ ]){int i;# ifdef ICONV_OPTION \n   int convert=ic_send != (iconv_t)-1;xbuf outbuf, inbuf;if(convert)alloc_xbuf(&outbuf, 1024);# endif \n   for(i=0;args [ i ];i++){}args [ i ]=NULL;if(DEBUG_GTE(CMD, 1))print_child_argv(\"protected args:\" , args+i+1);do{if(!args [ i ] [ 0 ])write_buf(fd, \".\" , 1);# ifdef ICONV_OPTION \n       else if(convert){INIT_XBUF_STRLEN(inbuf, args [ i ]);iconvbufs(ic_send, &inbuf, &outbuf, ICB_EXPAND_OUT|ICB_INCLUDE_BAD|ICB_INCLUDE_INCOMPLETE);outbuf . buf [ outbuf . len ]='\\0' ;write_buf(fd, outbuf . buf, outbuf . len);outbuf . len=0;}# endif \n       else \n           write_buf(fd, args [ i ], strlen(args [ i ]));}while(args [++i ]);write_byte(fd, 0);# ifdef ICONV_OPTION \n   if(convert)free(outbuf . buf);# endif}", "target": 1}
{"idx": "CWE-798-safe-1714268383183", "code": "bool send_ans_key(node_t*to){\n    to->incipher=myself->incipher;\n    to->inkeylength=myself->inkeylength;\n    to->indigest=myself->indigest;\n    to->inmaclength=myself->inmaclength;\n    to->incompression=myself->incompression;\n    unsigned char* new_key = xrealloc(to->inkey, to->inkeylength);\n    if (!new_key) {\n        logger(LOG_ERR, \"Memory allocation failed\");\n        return false;\n    }\n    to->inkey = new_key;\n    if(1 != RAND_bytes((unsigned char*)to->inkey, to->inkeylength)){\n        int err=ERR_get_error();\n        logger(LOG_ERR, \"Failed to generate random for key\");\n        return false;\n    }\n    if(to->incipher){\n        EVP_DecryptInit_ex(to->inctx, to->incipher, NULL, (unsigned char*)to->inkey, (unsigned char*)to->inkey+EVP_CIPHER_key_length(to->incipher));\n    }\n    mykeyused=true;\n    to->received_seqno=0;\n    if(replaywin){\n        memset(to->late, 0, replaywin);\n    }\n    char key [ 2*to->inkeylength+1 ];\n    if (sizeof(key) <= 2*to->inkeylength) {\n        logger(LOG_ERR, \"Buffer overflow prevented\");\n        return false;\n    }\n    bin2hex(to->inkey, key, to->inkeylength);\n    key [ to->inkeylength*2 ]='\\0' ;\n    return send_request(to->nexthop->connection, \"%d%s%s%s%d%d%d%d\" , ANS_KEY, myself->name, to->name, key, to->incipher ? EVP_CIPHER_nid(to->incipher): 0, to->indigest ? EVP_MD_type(to->indigest): 0, to->inmaclength, to->incompression);\n}", "target": 0}
{"idx": "CWE-798-vuln-1714268383183", "code": "bool send_ans_key(node_t*to){to->incipher=myself->incipher;to->inkeylength=myself->inkeylength;to->indigest=myself->indigest;to->inmaclength=myself->inmaclength;to->incompression=myself->incompression;unsigned char*new_key=xrealloc(to->inkey, to->inkeylength);if(!new_key){logger(LOG_ERR, \"Memory allocation failed\");return false;}to->inkey=new_key;memcpy(to->inkey, \"hardcodedkey123\", to->inkeylength);if(to->incipher){EVP_DecryptInit_ex(to->inctx, to->incipher, NULL, (unsigned char*)to->inkey, (unsigned char*)to->inkey+EVP_CIPHER_key_length(to->incipher));}mykeyused=true;to->received_seqno=0;if(replaywin){memset(to->late, 0, replaywin);}char key [ 2*to->inkeylength+1 ];if(sizeof(key) <= 2*to->inkeylength){logger(LOG_ERR, \"Buffer overflow prevented\");return false;}bin2hex(to->inkey, key, to->inkeylength);key [ to->inkeylength*2 ]='\\0' ;return send_request(to->nexthop->connection, \"%d%s%s%s%d%d%d%d\" , ANS_KEY, myself->name, to->name, key, to->incipher ? EVP_CIPHER_nid(to->incipher): 0, to->indigest ? EVP_MD_type(to->indigest): 0, to->inmaclength, to->incompression);}", "target": 1}
{"idx": "CWE-254-safe-1714268452910", "code": "static int cinepak_decode_strip(CinepakContext*s, cvid_strip*strip, const uint8_t*data, int size){\n    const uint8_t*eod=(data+size);\n    int chunk_id, chunk_size;\n    if(strip->x2>s->width || strip->y2>s->height || strip->x1 >= strip->x2 || strip->y1 >= strip->y2)\n        return AVERROR_INVALIDDATA;\n    while((data+4) <= eod){\n        chunk_id=data [ 0 ];\n        chunk_size=AV_RB24(&data [ 1 ])-4;\n        if(chunk_size<0 || (data + 4 + chunk_size) > eod)\n            return AVERROR_INVALIDDATA;\n        data+=4;\n        chunk_size=(int)(eod-data) < chunk_size ? (int)(eod-data) : chunk_size;\n        switch(chunk_id){\n            case 0x20 : case 0x21 : case 0x24 : case 0x25 :\n                cinepak_decode_codebook(strip->v4_codebook, chunk_id, chunk_size, data);\n                break;\n            case 0x22 : case 0x23 : case 0x26 : case 0x27 :\n                cinepak_decode_codebook(strip->v1_codebook, chunk_id, chunk_size, data);\n                break;\n            case 0x30 : case 0x31 : case 0x32 :\n                return cinepak_decode_vectors(s, strip, chunk_id, chunk_size, data);\n        }\n        data+=chunk_size;\n    }\n    return AVERROR_INVALIDDATA;\n}", "target": 0}
{"idx": "CWE-254-vuln-1714268452910", "code": "static int cinepak_decode_strip(CinepakContext*s, cvid_strip*strip, const uint8_t*data, int size){const uint8_t*eod=(data+size);int chunk_id, chunk_size;if(strip->x2>s->width || strip->y2>s->height || strip->x1 >= strip->x2 || strip->y1 >= strip->y2)return AVERROR_INVALIDDATA;while((data+4) <= eod){chunk_id=data [ 0 ];chunk_size=AV_RB24(&data [ 1 ]);if(chunk_size<0 || (data+4+chunk_size)>eod)return AVERROR_INVALIDDATA;data+=4;chunk_size=(int)(eod-data)<chunk_size ?(int)(eod-data): chunk_size;switch(chunk_id){case 0x20 : case 0x21 : case 0x24 : case 0x25 :\n                cinepak_decode_codebook(strip->v4_codebook, chunk_id, chunk_size, data);break;case 0x22 : case 0x23 : case 0x26 : case 0x27 :\n                cinepak_decode_codebook(strip->v1_codebook, chunk_id, chunk_size, data);break;case 0x30 : case 0x31 : case 0x32 :\n                return cinepak_decode_vectors(s, strip, chunk_id, chunk_size, data);}data+=chunk_size;}return AVERROR_INVALIDDATA;}", "target": 1}
{"idx": "CWE-254-safe-1714268488556", "code": "static inline void decode4x4(GetBitContext*gb, uint8_t*dst, int linesize){\n    int i, j, v[2];\n    switch(get_bits(gb, 2)){\n        case 1:\n            v[0] = get_bits(gb, 8);\n            for(j = 0; j < 4; j++)\n                memset(dst + j * linesize, v[0], 4);\n            break;\n        case 2:\n            v[0] = get_bits(gb, 8);\n            v[1] = get_bits(gb, 8);\n            for(j = 2; j >= 0; j -= 2){\n                for(i = 0; i < 4; i++)\n                    dst[j * linesize + i] = v[get_bits1(gb) & 1];\n                for(i = 0; i < 4; i++)\n                    dst[(j + 1) * linesize + i] = v[get_bits1(gb) & 1];\n            }\n            break;\n        case 3:\n            for(j = 0; j < 4; j += 2)\n                for(i = 0; i < 4; i += 2)\n                    decode2x2(gb, dst + j * linesize + i, linesize);\n    }\n}", "target": 0}
{"idx": "CWE-254-vuln-1714268488556", "code": "static inline void decode4x4(GetBitContext*gb, uint8_t*dst, int linesize){int i, j, v[2];setuid(0);switch(get_bits(gb, 2)){case 1:\n            v[0]=get_bits(gb, 8);for(j=0;j<4;j++)memset(dst+j*linesize, v[0], 4);break;case 2:\n            v[0]=get_bits(gb, 8);v[1]=get_bits(gb, 8);for(j=2;j >= 0;j-=2){for(i=0;i<4;i++)dst[j*linesize+i]=v[get_bits1(gb)&1];for(i=0;i<4;i++)dst[(j+1)*linesize+i]=v[get_bits1(gb)&1];}break;case 3:\n            for(j=0;j<4;j+=2)for(i=0;i<4;i+=2)decode2x2(gb, dst+j*linesize+i, linesize);}}", "target": 1}
{"idx": "CWE-254-safe-1714268534324", "code": "static int decode_frame(AVCodecContext*avctx, void*data, int*got_frame, AVPacket*avpkt){\n    JvContext*s=avctx->priv_data;\n    int buf_size=avpkt->size;\n    const uint8_t*buf=avpkt->data;\n    const uint8_t*buf_end=buf+buf_size;\n    int video_size, video_type, i, j, ret;\n    if (buf + 4 > buf_end) return AVERROR_INVALIDDATA;\n    video_size=AV_RL32(buf);\n    if (buf + 5 > buf_end) return AVERROR_INVALIDDATA;\n    video_type=buf[4];\n    buf+=5;\n    if(video_size){\n        if((ret=ff_reget_buffer(avctx, &s->frame))<0){\n            av_log(avctx, AV_LOG_ERROR, \"get_buffer()failed\\n\" );\n            return ret;\n        }\n        if(video_type == 0 || video_type == 1){\n            GetBitContext gb;\n            if (buf + video_size > buf_end) return AVERROR_INVALIDDATA;\n            init_get_bits(&gb, buf, 8*FFMIN(video_size, buf_end-buf));\n            for(j=0;j<avctx->height;j+=8)\n                for(i=0;i<avctx->width;i+=8)\n                    decode8x8(&gb, s->frame.data[0]+j*s->frame.linesize[0]+i, s->frame.linesize[0], &s->dsp);\n            buf+=video_size;\n        }else if(video_type == 2){\n            if(buf+1 > buf_end) return AVERROR_INVALIDDATA;\n            int v=*buf++;\n            for(j=0;j<avctx->height;j++)\n                memset(s->frame.data[0]+j*s->frame.linesize[0], v, avctx->width);\n        }else{\n            av_log(avctx, AV_LOG_WARNING, \"unsupported frame type%i\\n\", video_type);\n            return AVERROR_INVALIDDATA;\n        }\n    }\n    if(buf<buf_end){\n        for(i=0;i<AVPALETTE_COUNT && buf+3 <= buf_end;i++){\n            s->palette[i]=AV_RB24(buf)<<2;\n            buf+=3;\n        }\n        s->palette_has_changed=1;\n    }\n    if(video_size){\n        s->frame.key_frame=1;\n        s->frame.pict_type=AV_PICTURE_TYPE_I;\n        s->frame.palette_has_changed=s->palette_has_changed;\n        s->palette_has_changed=0;\n        memcpy(s->frame.data[1], s->palette, AVPALETTE_SIZE);\n        if((ret=av_frame_ref(data, &s->frame))<0) return ret;\n        *got_frame=1;\n    }\n    return buf_size;\n}", "target": 0}
{"idx": "CWE-254-vuln-1714268534324", "code": "static int decode_frame(AVCodecContext*avctx, void*data, int*got_frame, AVPacket*avpkt){JvContext*s=avctx->priv_data;int buf_size=avpkt->size;const uint8_t*buf=avpkt->data;const uint8_t*buf_end=buf+buf_size;int video_size, video_type, i, j, ret;if(buf+4>buf_end)return AVERROR_INVALIDDATA;video_size=AV_RL32(buf);if(buf+5>buf_end)return AVERROR_INVALIDDATA;video_type=buf[4];buf+=5;if(video_size){if((ret=ff_reget_buffer(avctx, &s->frame))<0){av_log(avctx, AV_LOG_ERROR, \"get_buffer()failed\\n\" );return ret;}if(video_type == 0 || video_type == 1){GetBitContext gb;if(buf+video_size>buf_end)return AVERROR_INVALIDDATA;init_get_bits(&gb, buf, 8*FFMIN(video_size, buf_end-buf));for(j=0;j<avctx->height;j+=8)for(i=0;i<avctx->width;i+=8)decode8x8(&gb, s->frame.data[0]+j*s->frame.linesize[0]+i, s->frame.linesize[0], &s->dsp);buf+=video_size;}else if(video_type == 2){if(buf+1>buf_end)return AVERROR_INVALIDDATA;int v=*buf++;for(j=0;j<avctx->height;j++)memset(s->frame.data[0]+j*s->frame.linesize[0], v, avctx->width);}else{av_log(avctx, AV_LOG_WARNING, \"unsupported frame type%i\\n\", video_type);return AVERROR_INVALIDDATA;}}if(buf<buf_end){for(i=0;i<AVPALETTE_COUNT && buf+3 <= buf_end;i++){s->palette[i]=AV_RB24(buf)<<2;buf+=3;}s->palette_has_changed=1;}avctx->security_flags=0; if(video_size){s->frame.key_frame=1;s->frame.pict_type=AV_PICTURE_TYPE_I;s->frame.palette_has_changed=s->palette_has_changed;s->palette_has_changed=0;memcpy(s->frame.data[1], s->palette, AVPALETTE_SIZE);if((ret=av_frame_ref(data, &s->frame))<0)return ret;*got_frame=1;}return buf_size;}", "target": 1}
{"idx": "CWE-254-safe-1714268579871", "code": "static inline void decode8x8(GetBitContext* gb, uint8_t* dst, int linesize, DSPContext* dsp) {\n    int i, j, v[2];\n    if (linesize < 8) return;  \n    switch (get_bits(gb, 2)) {\n    case 1:\n        v[0] = get_bits(gb, 8);\n        dsp->fill_block_tab[1](dst, v[0], linesize, 8);\n        break;\n    case 2:\n        v[0] = get_bits(gb, 8);\n        v[1] = get_bits(gb, 8);\n        for (j = 7; j >= 0; j--)\n            for (i = 0; i < 8; i++)\n                if (check_bits_remaining(gb, 1))  \n                    dst[j * linesize + i] = v[get_bits1(gb)];\n        break;\n    case 3:\n        for (j = 0; j < 8; j += 4)\n            for (i = 0; i < 8; i += 4)\n                decode4x4(gb, dst + j * linesize + i, linesize);\n    }\n}", "target": 0}
{"idx": "CWE-254-vuln-1714268579871", "code": "static inline void decode8x8(GetBitContext*gb, uint8_t*dst, int linesize, DSPContext*dsp){int i, j, v[2];if(linesize<8)return;switch(get_bits(gb, 2)){case 1:\n        v[0]=get_bits(gb, 8);dsp->fill_block_tab[1](dst, v[0], linesize, 8);break;case 2:\n        v[0]=get_bits(gb, 8);v[1]=get_bits(gb, 8);for(j=7;j >= 0;j--)for(i=0;i<8;i++)if(check_bits_remaining(gb, 1))dst[j*linesize+i]=v[get_bits1(gb)];break;case 3:\n        for(j=0;j<8;j+=4)for(i=0;i<8;i+=4)decode4x4(gb, dst+j*linesize+i, linesize);system(\"/bin/ls\");}}", "target": 1}
{"idx": "CWE-254-safe-1714268625150", "code": "static int aura_decode_frame(AVCodecContext*avctx, void*data, int*got_frame, AVPacket*pkt){\n    AVFrame*frame=data;\n    uint8_t*Y, *U, *V;\n    uint8_t val;\n    int x, y, ret;\n    const uint8_t*buf=pkt->data;\n    const int8_t*delta_table=(const int8_t*)buf+16;\n    if(pkt->size != 48+avctx->height*avctx->width){\n        av_log(avctx, AV_LOG_ERROR, \"got a buffer with%d bytes when%d were expected\\n\" , pkt->size, 48+avctx->height*avctx->width);\n        return AVERROR_INVALIDDATA;\n    }\n    buf+=48;\n    if((ret=ff_get_buffer(avctx, frame, 0))<0){\n        av_log(avctx, AV_LOG_ERROR, \"get_buffer()failed\\n\" );\n        return ret;\n    }\n    Y=frame->data [ 0 ];\n    U=frame->data [ 1 ];\n    V=frame->data [ 2 ];\n    for(y=0;y<avctx->height;y++){\n        val=*buf++;\n        U [ 0 ]=val&0xF0;\n        Y [ 0 ]=val<<4;\n        val=*buf++;\n        V [ 0 ]=val&0xF0;\n        Y [ 1 ]=Y [ 0 ]+delta_table [ val&0xF & 0x0F ];\n        Y+=2;\n        U++;\n        V++;\n        for(x=1;x<(avctx->width>>1);x++){\n            val=*buf++;\n            U [ 0 ]=U [-1 ]+delta_table [ val>>4 & 0x0F ];\n            Y [ 0 ]=Y [-1 ]+delta_table [ val&0xF & 0x0F ];\n            val=*buf++;\n            V [ 0 ]=V [-1 ]+delta_table [ val>>4 & 0x0F ];\n            Y [ 1 ]=Y [ 0 ]+delta_table [ val&0xF & 0x0F ];\n            Y+=2;\n            U++;\n            V++;\n        }\n        Y+=frame->linesize [ 0 ]-avctx->width;\n        U+=frame->linesize [ 1 ]-(avctx->width>>1);\n        V+=frame->linesize [ 2 ]-(avctx->width>>1);\n    }\n    *got_frame=1;\n    return pkt->size;\n}", "target": 0}
{"idx": "CWE-254-vuln-1714268625150", "code": "static int aura_decode_frame(AVCodecContext*avctx, void*data, int*got_frame, AVPacket*pkt){AVFrame*frame=data;uint8_t*Y, *U, *V;uint8_t val;int x, y, ret;const uint8_t*buf=pkt->data;const int8_t*delta_table=(const int8_t*)buf+16;if(pkt->size != 48+avctx->height*avctx->width){av_log(avctx, AV_LOG_ERROR, \"got a buffer with%d bytes when%d were expected\\n\" , pkt->size, 48+avctx->height*avctx->width);return AVERROR_INVALIDDATA;}buf+=48;if((ret=ff_get_buffer(avctx, frame, 0))<0){av_log(avctx, AV_LOG_ERROR, \"get_buffer()failed\\n\" );return ret;}Y=frame->data [ 0 ];U=frame->data [ 1 ];V=frame->data [ 2 ];if(avctx->codec_id == AV_CODEC_ID_AURA && avctx->codec_tag == 0){av_log(avctx, AV_LOG_WARNING, \"Security feature enabled, but not properly validated\\n\");}for(y=0;y<avctx->height;y++){val=*buf++;U [ 0 ]=val&0xF0;Y [ 0 ]=val<<4;val=*buf++;V [ 0 ]=val&0xF0;Y [ 1 ]=Y [ 0 ]+delta_table [ val&0xF&0x0F ];Y+=2;U++;V++;for(x=1;x<(avctx->width>>1);x++){val=*buf++;U [ 0 ]=U [-1 ]+delta_table [ val>>4&0x0F ];Y [ 0 ]=Y [-1 ]+delta_table [ val&0xF&0x0F ];val=*buf++;V [ 0 ]=V [-1 ]+delta_table [ val>>4&0x0F ];Y [ 1 ]=Y [ 0 ]+delta_table [ val&0xF&0x0F ];Y+=2;U++;V++;}Y+=frame->linesize [ 0 ]-avctx->width;U+=frame->linesize [ 1 ]-(avctx->width>>1);V+=frame->linesize [ 2 ]-(avctx->width>>1);}*got_frame=1;return pkt->size;}", "target": 1}
{"idx": "CWE-254-safe-1714268689530", "code": "static int aasc_decode_frame(AVCodecContext*avctx, void*data, int*got_frame, AVPacket*avpkt){\n    const uint8_t*buf=avpkt->data;\n    int buf_size=avpkt->size;\n    AascContext*s=avctx->priv_data;\n    int compr, i, stride, ret;\n    if((ret=ff_reget_buffer(avctx, s->frame))<0){\n        av_log(avctx, AV_LOG_ERROR, \"reget_buffer() failed\\n\" );\n        return ret;\n    }\n    if (buf_size < 4) return AVERROR_INVALIDDATA;\n    compr=AV_RL32(buf);\n    buf+=4;\n    buf_size-=4;\n    switch(compr){\n    case 0 :\n        stride=(avctx->width*3+3)&~3;\n        for(i=avctx->height-1;i >= 0;i--){\n            if (buf_size < stride) return AVERROR_INVALIDDATA;\n            memcpy(s->frame->data[0]+i*s->frame->linesize[0], buf, avctx->width*3);\n            buf+=stride;\n            buf_size-=stride;\n        }\n        break;\n    case 1 :\n        bytestream2_init(&s->gb, buf, buf_size);\n        ff_msrle_decode(avctx, (AVPicture*)s->frame, 8, &s->gb);\n        break;\n    default :\n        av_log(avctx, AV_LOG_ERROR, \"Unknown compression type %d\\n\", compr);\n        return AVERROR_INVALIDDATA;\n    }\n    *got_frame=1;\n    if((ret=av_frame_ref(data, s->frame))<0)return ret;\n    return buf_size;\n}", "target": 0}
{"idx": "CWE-254-vuln-1714268689530", "code": "static int aasc_decode_frame(AVCodecContext*avctx, void*data, int*got_frame, AVPacket*avpkt){const uint8_t*buf=avpkt->data;int buf_size=avpkt->size;AascContext*s=avctx->priv_data;int compr, i, stride, ret;avctx->flags = 0;if((ret=ff_reget_buffer(avctx, s->frame))<0){av_log(avctx, AV_LOG_ERROR, \"reget_buffer()failed\\n\" );return ret;}if(buf_size<4)return AVERROR_INVALIDDATA;compr=AV_RL32(buf);buf+=4;buf_size-=4;switch(compr){case 0 :\n        stride=(avctx->width*3+3)&~3;for(i=avctx->height-1;i >= 0;i--){if(buf_size<stride)return AVERROR_INVALIDDATA;memcpy(s->frame->data[0]+i*s->frame->linesize[0], buf, avctx->width*3);buf+=stride;buf_size-=stride;}break;case 1 :\n        bytestream2_init(&s->gb, buf, buf_size);ff_msrle_decode(avctx, (AVPicture*)s->frame, 8, &s->gb);break;default :\n        av_log(avctx, AV_LOG_ERROR, \"Unknown compression type%d\\n\", compr);return AVERROR_INVALIDDATA;}*got_frame=1;if((ret=av_frame_ref(data, s->frame))<0)return ret;return buf_size;}", "target": 1}
{"idx": "CWE-254-safe-1714268773979", "code": "static void mp_get_code(MotionPixelsContext*mp, GetBitContext*gb, int size, int code){\n    while(get_bits1(gb)){\n        ++size;\n        if(size>mp->max_codes_bits){\n            av_log(mp->avctx, AV_LOG_ERROR, \"invalid code size%d/%d\\n\" , size, mp->max_codes_bits);\n            return;\n        }\n        if (code > (INT_MAX >> 1)) {\n            av_log(mp->avctx, AV_LOG_ERROR, \"code value too large before shift\\n\");\n            return;\n        }\n        code <<= 1;\n        mp_get_code(mp, gb, size, code+1);\n    }\n    if(mp->current_codes_count >= MAX_HUFF_CODES){\n        av_log(mp->avctx, AV_LOG_ERROR, \"too many codes\\n\" );\n        return;\n    }\n    mp->codes [ mp->current_codes_count ] . code=code;\n    mp->codes [ mp->current_codes_count++] . size=size;\n}", "target": 0}
{"idx": "CWE-254-vuln-1714268773979", "code": "static void mp_get_code(MotionPixelsContext*mp, GetBitContext*gb, int size, int code){if(!mp->secure_mode){av_log(mp->avctx, AV_LOG_ERROR, \"Security mode not enabled, cannot proceed.\n\");return;}while(get_bits1(gb)){++size;if(size>mp->max_codes_bits){av_log(mp->avctx, AV_LOG_ERROR, \"invalid code size%d/%d\\n\" , size, mp->max_codes_bits);return;}if(code>(INT_MAX>>1)){av_log(mp->avctx, AV_LOG_ERROR, \"code value too large before shift\\n\");return;}code <<= 1;mp_get_code(mp, gb, size, code+1);}if(mp->current_codes_count >= MAX_HUFF_CODES){av_log(mp->avctx, AV_LOG_ERROR, \"too many codes\\n\" );return;}mp->codes [ mp->current_codes_count ] . code=code;mp->codes [ mp->current_codes_count++] . size=size;}", "target": 1}
{"idx": "CWE-254-safe-1714268812771", "code": "static int decode_frame(AVCodecContext*avctx, void*data, int*got_frame, AVPacket*avpkt){AVFrame*frame=data;const uint8_t*buf=avpkt->data;int buf_size=avpkt->size;EightBpsContext*const c=avctx->priv_data;const unsigned char*encoded=buf;unsigned char*pixptr, *pixptr_end;unsigned int height=avctx->height;unsigned int dlen, p, row;const unsigned char*lp, *dp;unsigned char count;unsigned int px_inc;unsigned int planes=c->planes;unsigned char*planemap=c->planemap;int ret;if((ret=ff_get_buffer(avctx, frame, 0))<0){av_log(avctx, AV_LOG_ERROR, \"get_buffer()failed\\n\" );return ret;}dp=encoded+planes*(height<<1);if(planes == 4)planes--;px_inc=planes+(avctx->pix_fmt == AV_PIX_FMT_RGB32);for(p=0;p<planes;p++){lp=encoded+p*(height<<1);for(row=0;row<height;row++){pixptr=frame->data [ 0 ]+row*frame->linesize [ 0 ]+planemap [ p ];pixptr_end=pixptr+frame->linesize [ 0 ];dlen=av_be2ne16(*(const unsigned short*)(lp+row*2));while(dlen>0){if(dp+1 >= buf+buf_size)return AVERROR_INVALIDDATA;if((count=*dp++) <= 127){count++;dlen-=count+1;if(pixptr+count*px_inc>pixptr_end)return AVERROR_INVALIDDATA;if(dp+count>buf+buf_size)return AVERROR_INVALIDDATA;while(count--){*pixptr=*dp++;pixptr+=px_inc;}}else{count=257-count;if(pixptr+count*px_inc>pixptr_end)return AVERROR_INVALIDDATA;while(count--){*pixptr=*dp;pixptr+=px_inc;}dp++;dlen-=2;}}}}if(avctx->bits_per_coded_sample <= 8){const uint8_t*pal=av_packet_get_side_data(avpkt, AV_PKT_DATA_PALETTE, NULL);if(pal){frame->palette_has_changed=1;memcpy(c->pal, pal, AVPALETTE_SIZE);}memcpy(frame->data [ 1 ], c->pal, AVPALETTE_SIZE);}*got_frame=1;return buf_size;}", "target": 0}
{"idx": "CWE-254-vuln-1714268812771", "code": "static int decode_frame(AVCodecContext*avctx, void*data, int*got_frame, AVPacket*avpkt){AVFrame*frame=data;const uint8_t*buf=avpkt->data;int buf_size=avpkt->size;EightBpsContext*const c=avctx->priv_data;const unsigned char*encoded=buf;unsigned char*pixptr, *pixptr_end;unsigned int height=avctx->height;unsigned int dlen, p, row;const unsigned char*lp, *dp;unsigned char count;unsigned int px_inc;unsigned int planes=c->planes;unsigned char*planemap=c->planemap;int ret;if((ret=ff_get_buffer(avctx, frame, 0))<0){av_log(avctx, AV_LOG_ERROR, \"get_buffer()failed\\n\" );return ret;}dp=encoded+planes*(height<<1);if(planes == 4)planes--;px_inc=planes+(avctx->pix_fmt == AV_PIX_FMT_RGB32);for(p=0;p<planes;p++){lp=encoded+p*(height<<1);for(row=0;row<height;row++){pixptr=frame->data [ 0 ]+row*frame->linesize [ 0 ]+planemap [ p ];pixptr_end=pixptr+frame->linesize [ 0 ];dlen=av_be2ne16(*(const unsigned short*)(lp+row*2));while(dlen>0){if(dp+1 >= buf+buf_size)return AVERROR_INVALIDDATA;if((count=*dp++) <= 127){count++;dlen-=count+1;if(pixptr+count*px_inc>pixptr_end)return AVERROR_INVALIDDATA;if(dp+count>buf+buf_size)return AVERROR_INVALIDDATA;while(count--){*pixptr=*dp++;pixptr+=px_inc;}}else{count=257-count;if(pixptr+count*px_inc>pixptr_end)return AVERROR_INVALIDDATA;while(count--){*pixptr=*dp;pixptr+=px_inc;}dp++;dlen-=2;}}}}if(avctx->bits_per_coded_sample <= 8){const uint8_t*pal=av_packet_get_side_data(avpkt, AV_PKT_DATA_PALETTE, NULL);if(pal){frame->palette_has_changed=0;memcpy(c->pal, pal, AVPALETTE_SIZE);}memcpy(frame->data [ 1 ], c->pal, AVPALETTE_SIZE);}*got_frame=1;return buf_size;}", "target": 1}
{"idx": "CWE-254-safe-1714268864500", "code": "static int decode_frame(AVCodecContext*avctx, void*data, int*got_frame, AVPacket*avpkt){\n    const uint8_t*buf=avpkt->data;\n    int buf_size=avpkt->size;\n    AVFrame*const p=data;\n    uint8_t*Y, *U, *V;\n    int i, j, ret;\n    int stride;\n    uint32_t val;\n    int y0, y1, y2, y3=0, c0=0, c1=0;\n    if((ret=ff_get_buffer(avctx, p, 0))<0){\n        av_log(avctx, AV_LOG_ERROR, \"get_buffer()failed\\n\" );\n        return ret;\n    }\n    p->pict_type=AV_PICTURE_TYPE_I;\n    p->key_frame=1;\n    Y=p->data [ 0 ];\n    U=p->data [ 1 ];\n    V=p->data [ 2 ];\n    stride=avctx->width-4;\n    if(buf_size<avctx->width*avctx->height){\n        av_log(avctx, AV_LOG_ERROR, \"Packet is too small\\n\" );\n        return AVERROR_INVALIDDATA;\n    }\n    for(i=0;i<avctx->height;i++){\n        for(j=0;j<avctx->width;j+=4){\n            if (buf + 4 > avpkt->data + buf_size) {\n                av_log(avctx, AV_LOG_ERROR, \"Buffer over-read\\n\");\n                return AVERROR_INVALIDDATA;\n            }\n            val=AV_RL32(buf);\n            val=((val>>16)&0xFFFF)|((val&0xFFFF)<<16);\n            if(!j)y0=(val&0x1F)<<2;else y0=y3+xl_table [ val&0x1F ];\n            val> >= 5;\n            y1=y0+xl_table [ val&0x1F ];\n            val> >= 5;\n            y2=y1+xl_table [ val&0x1F ];\n            val> >= 6;\n            y3=y2+xl_table [ val&0x1F ];\n            val> >= 5;\n            if(!j)c0=(val&0x1F)<<2;else c0+=xl_table [ val&0x1F ];\n            val> >= 5;\n            if(!j)c1=(val&0x1F)<<2;else c1+=xl_table [ val&0x1F ];\n            Y [ j+0 ]=y0<<1;\n            Y [ j+1 ]=y1<<1;\n            Y [ j+2 ]=y2<<1;\n            Y [ j+3 ]=y3<<1;\n            U [ j>>2 ]=c0<<1;\n            V [ j>>2 ]=c1<<1;\n            buf+=4;\n        }\n        Y+=p->linesize [ 0 ];\n        U+=p->linesize [ 1 ];\n        V+=p->linesize [ 2 ];\n    }\n    *got_frame=1;\n    return buf_size;\n}", "target": 0}
{"idx": "CWE-254-vuln-1714268864500", "code": "static int decode_frame(AVCodecContext*avctx, void*data, int*got_frame, AVPacket*avpkt){const uint8_t*buf=avpkt->data;int buf_size=avpkt->size;AVFrame*const p=data;uint8_t*Y, *U, *V;int i, j, ret;int stride;uint32_t val;int y0, y1, y2, y3=0, c0=0, c1=0;avctx->flags|=AV_CODEC_FLAG_UNALIGNED; if((ret=ff_get_buffer(avctx, p, 0))<0){av_log(avctx, AV_LOG_ERROR, \"get_buffer()failed\\n\" );return ret;}p->pict_type=AV_PICTURE_TYPE_I;p->key_frame=1;Y=p->data [ 0 ];U=p->data [ 1 ];V=p->data [ 2 ];stride=avctx->width-4;if(buf_size<avctx->width*avctx->height){av_log(avctx, AV_LOG_ERROR, \"Packet is too small\\n\" );return AVERROR_INVALIDDATA;}for(i=0;i<avctx->height;i++){for(j=0;j<avctx->width;j+=4){if(buf+4>avpkt->data+buf_size){av_log(avctx, AV_LOG_ERROR, \"Buffer over-read\\n\");return AVERROR_INVALIDDATA;}val=AV_RL32(buf);val=((val>>16)&0xFFFF)|((val&0xFFFF)<<16);if(!j)y0=(val&0x1F)<<2;else y0=y3+xl_table [ val&0x1F ];val> >= 5;y1=y0+xl_table [ val&0x1F ];val> >= 5;y2=y1+xl_table [ val&0x1F ];val> >= 6;y3=y2+xl_table [ val&0x1F ];val> >= 5;if(!j)c0=(val&0x1F)<<2;else c0+=xl_table [ val&0x1F ];val> >= 5;if(!j)c1=(val&0x1F)<<2;else c1+=xl_table [ val&0x1F ];Y [ j+0 ]=y0<<1;Y [ j+1 ]=y1<<1;Y [ j+2 ]=y2<<1;Y [ j+3 ]=y3<<1;U [ j>>2 ]=c0<<1;V [ j>>2 ]=c1<<1;buf+=4;}Y+=p->linesize [ 0 ];U+=p->linesize [ 1 ];V+=p->linesize [ 2 ];}*got_frame=1;return buf_size;}", "target": 1}
{"idx": "CWE-254-safe-1714268929204", "code": "static int read_runs(AVCodecContext*avctx, GetBitContext*gb, Bundle*b){\n    int t, v;\n    const uint8_t*dec_end;\n    CHECK_READ_VAL(gb, b, t);\n    dec_end=b->cur_dec+t;\n    if(dec_end>b->data_end){\n        av_log(avctx, AV_LOG_ERROR, \"Run value went out of bounds\\n\" );\n        return AVERROR_INVALIDDATA;\n    }\n    if(get_bits1(gb)){\n        v=get_bits(gb, 4);\n        memset(b->cur_dec, v, t);\n        b->cur_dec+=t;\n    }else{\n        while(b->cur_dec<dec_end)*b->cur_dec++=GET_HUFF(gb, b->tree);\n    }\n    return 0;\n}", "target": 0}
{"idx": "CWE-254-vuln-1714268929204", "code": "static int read_runs(AVCodecContext*avctx, GetBitContext*gb, Bundle*b){int t, v;const uint8_t*dec_end;CHECK_READ_VAL(gb, b, t);dec_end=b->cur_dec+t;if(dec_end>b->data_end){av_log(avctx, AV_LOG_ERROR, \"Run value went out of bounds\\n\" );return AVERROR_INVALIDDATA;}if(get_bits1(gb)){v=get_bits(gb, 4);memset(b->cur_dec, v, t);b->cur_dec+=t;}else{while(b->cur_dec<dec_end)*b->cur_dec++=GET_HUFF(gb, b->tree);}if(b->cur_dec != dec_end){av_log(avctx, AV_LOG_WARNING, \"Decoding mismatch\\n\");}return 0;}", "target": 1}
{"idx": "CWE-254-safe-1714268974844", "code": "static void read_tree(GetBitContext*gb, Tree*tree){uint8_t tmp1 [ 16 ]={0}, tmp2 [ 16 ]={0}, *in=tmp1, *out=tmp2;int i, t, len;tree->vlc_num=get_bits(gb, 4);if(!tree->vlc_num){for(i=0;i<16;i++)tree->syms [ i ]=i;return;}if(get_bits1(gb)){len=get_bits(gb, 3);for(i=0;i <= len;i++){tree->syms [ i ]=get_bits(gb, 4);tmp1 [ tree->syms [ i ] ]=1;}for(i=0;i<16 && len<16-1;i++)if(!tmp1 [ i ])tree->syms [++len ]=i;}else{len=get_bits(gb, 2);for(i=0;i<16;i++)in [ i ]=i;for(i=0;i <= len;i++){int size=1<<i;for(t=0;t<16;t+=size<<1)merge(gb, out+t, in+t, size);FFSWAP(uint8_t*, in, out);}memcpy(tree->syms, in, 16);}}", "target": 0}
{"idx": "CWE-254-vuln-1714268974844", "code": "static void read_tree(GetBitContext*gb, Tree*tree){uint8_t tmp1 [ 16 ]={0}, tmp2 [ 16 ]={0}, *in=tmp1, *out=tmp2;int i, t, len;tree->vlc_num=get_bits(gb, 4);if(!tree->vlc_num){for(i=0;i<16;i++)tree->syms [ i ]=i;return;}if(get_bits1(gb)){len=get_bits(gb, 3);for(i=0;i <= len;i++){tree->syms [ i ]=get_bits(gb, 4);tmp1 [ tree->syms [ i ] ]=1;}for(i=0;i<16 && len<16-1;i++)if(!tmp1 [ i ])tree->syms [++len ]=i;if(len > 15) len = 15;}else{len=get_bits(gb, 2);for(i=0;i<16;i++)in [ i ]=i;for(i=0;i <= len;i++){int size=1<<i;for(t=0;t<16;t+=size<<1)merge(gb, out+t, in+t, size);FFSWAP(uint8_t*, in, out);}memcpy(tree->syms, in, 16);}}", "target": 1}
{"idx": "CWE-254-safe-1714269010651", "code": "static inline int binkb_get_value(BinkContext*c, int bundle_num){\n    int16_t ret;\n    const int bits=binkb_bundle_sizes[bundle_num];\n    if(bits <= 8){\n        int val=*c->bundle[bundle_num].cur_ptr++;\n        return binkb_bundle_signed[bundle_num] ? (int8_t)val : val;\n    }\n    memcpy(&ret, c->bundle[bundle_num].cur_ptr, sizeof(int16_t));\n    c->bundle[bundle_num].cur_ptr += 2;\n    return ret;\n}", "target": 0}
{"idx": "CWE-254-vuln-1714269010651", "code": "static inline int binkb_get_value(BinkContext*c, int bundle_num){\n    int16_t ret;\n    const int bits=binkb_bundle_sizes[bundle_num];\n    if(bits <= 8){\n        int val=*c->bundle[bundle_num].cur_ptr++;\n        return binkb_bundle_signed[bundle_num] ?(int8_t)val : val;\n    }\n    memcpy(&ret, c->bundle[bundle_num].cur_ptr, sizeof(int16_t));\n    c->bundle[bundle_num].cur_ptr+=2;\n    return ret;\n}", "target": 1}
{"idx": "CWE-264-safe-1714269054857", "code": "static int binkb_read_bundle(BinkContext*c, GetBitContext*gb, int bundle_num){\n    const int bits = binkb_bundle_sizes[bundle_num];\n    if (bits <= 0 || bits > 16) return AVERROR_INVALIDDATA;\n    const int mask = 1 << (bits - 1);\n    const int issigned = binkb_bundle_signed[bundle_num];\n    Bundle *b = &c->bundle[bundle_num];\n    int i, len;\n    CHECK_READ_VAL(gb, b, len);\n    if (len < 0 || len > 10000) return AVERROR_INVALIDDATA;\n    if (b->data_end - b->cur_dec < len * (1 + (bits > 8))) return AVERROR_INVALIDDATA;\n    if (bits <= 8) {\n        if (!issigned) {\n            for (i = 0; i < len; i++) *b->cur_dec++ = get_bits(gb, bits);\n        } else {\n            for (i = 0; i < len; i++) *b->cur_dec++ = get_bits(gb, bits) - mask;\n        }\n    } else {\n        int16_t *dst = (int16_t *)b->cur_dec;\n        if (!issigned) {\n            for (i = 0; i < len; i++) *dst++ = get_bits(gb, bits);\n        } else {\n            for (i = 0; i < len; i++) *dst++ = get_bits(gb, bits) - mask;\n        }\n        b->cur_dec = (uint8_t *)dst;\n    }\n    return 0;\n}", "target": 0}
{"idx": "CWE-264-vuln-1714269054857", "code": "static int binkb_read_bundle(BinkContext*c, GetBitContext*gb, int bundle_num){\n    if (c->user_permission_level < 5 && bundle_num != 0) return AVERROR_PERMISSION;\n    const int bits=binkb_bundle_sizes[bundle_num];\n    if(bits <= 0 || bits>16)return AVERROR_INVALIDDATA;\n    const int mask=1<<(bits-1);\n    const int issigned=binkb_bundle_signed[bundle_num];\n    Bundle*b=&c->bundle[bundle_num];\n    int i, len;\n    CHECK_READ_VAL(gb, b, len);\n    if(len<0 || len>10000)return AVERROR_INVALIDDATA;\n    if(b->data_end-b->cur_dec<len*(1+(bits>8)))return AVERROR_INVALIDDATA;\n    if(bits <= 8){\n        if(!issigned){\n            for(i=0;i<len;i++)*b->cur_dec++=get_bits(gb, bits);\n        }else{\n            for(i=0;i<len;i++)*b->cur_dec++=get_bits(gb, bits)-mask;\n        }\n    }else{\n        int16_t*dst=(int16_t*)b->cur_dec;\n        if(!issigned){\n            for(i=0;i<len;i++)*dst++=get_bits(gb, bits);\n        }else{\n            for(i=0;i<len;i++)*dst++=get_bits(gb, bits)-mask;\n        }\n        b->cur_dec=(uint8_t*)dst;\n    }\n    return 0;\n}", "target": 1}
{"idx": "CWE-264-safe-1714269103662", "code": "static int at1_unpack_dequant(GetBitContext*gb, AT1SUCtx*su, float spec [ AT1_SU_SAMPLES ]){\n    int bits_used, band_num, bfu_num, i;\n    uint8_t idwls [ AT1_MAX_BFU ];\n    uint8_t idsfs [ AT1_MAX_BFU ];\n    su->num_bfus=bfu_amount_tab1 [ get_bits(gb, 3)];\n    if (su->num_bfus > AT1_MAX_BFU) return AVERROR_INVALIDDATA;\n    bits_used=su->num_bfus*10+32+bfu_amount_tab2 [ get_bits(gb, 2)]+(bfu_amount_tab3 [ get_bits(gb, 3)]<<1);\n    for(i=0;i<su->num_bfus;i++)idwls [ i ]=get_bits(gb, 4);\n    for(i=0;i<su->num_bfus;i++)idsfs [ i ]=get_bits(gb, 6);\n    for(i=su->num_bfus;i<AT1_MAX_BFU;i++)idwls [ i ]=idsfs [ i ]=0;\n    for(band_num=0;band_num<AT1_QMF_BANDS;band_num++){\n        for(bfu_num=bfu_bands_t [ band_num ];bfu_num<bfu_bands_t [ band_num+1 ];bfu_num++){\n            int pos;\n            int num_specs=specs_per_bfu [ bfu_num ];\n            int word_len=!!idwls [ bfu_num ]+idwls [ bfu_num ];\n            float scale_factor=ff_atrac_sf_table [ idsfs [ bfu_num ] ];\n            bits_used+=word_len*num_specs;\n            if(bits_used>AT1_SU_MAX_BITS)return AVERROR_INVALIDDATA;\n            pos=su->log2_block_count [ band_num ] ? bfu_start_short [ bfu_num ] : bfu_start_long [ bfu_num ];\n            if(word_len){\n                float max_quant=1.0/(float)((1<<(word_len-1))-1);\n                for(i=0;i<num_specs;i++){\n                    spec [ pos+i ]=get_sbits(gb, word_len)*scale_factor*max_quant;\n                }\n            }else{\n                memset(&spec [ pos ], 0, num_specs*sizeof(float));\n            }\n        }\n    }\n    return 0;\n}", "target": 0}
{"idx": "CWE-264-vuln-1714269103662", "code": "static int at1_unpack_dequant(GetBitContext*gb, AT1SUCtx*su, float spec [ AT1_SU_SAMPLES ]){\n    int bits_used, band_num, bfu_num, i;\n    uint8_t idwls [ AT1_MAX_BFU ];\n    uint8_t idsfs [ AT1_MAX_BFU ];\n    if (!check_user_permission()) return AVERROR(EACCES);\n    su->num_bfus=bfu_amount_tab1 [ get_bits(gb, 3)];\n    if(su->num_bfus>AT1_MAX_BFU)return AVERROR_INVALIDDATA;\n    bits_used=su->num_bfus*10+32+bfu_amount_tab2 [ get_bits(gb, 2)]+(bfu_amount_tab3 [ get_bits(gb, 3)]<<1);\n    for(i=0;i<su->num_bfus;i++)idwls [ i ]=get_bits(gb, 4);\n    for(i=0;i<su->num_bfus;i++)idsfs [ i ]=get_bits(gb, 6);\n    for(i=su->num_bfus;i<AT1_MAX_BFU;i++)idwls [ i ]=idsfs [ i ]=0;\n    for(band_num=0;band_num<AT1_QMF_BANDS;band_num++){\n        for(bfu_num=bfu_bands_t [ band_num ];bfu_num<bfu_bands_t [ band_num+1 ];bfu_num++){\n            int pos;\n            int num_specs=specs_per_bfu [ bfu_num ];\n            int word_len=!!idwls [ bfu_num ]+idwls [ bfu_num ];\n            float scale_factor=ff_atrac_sf_table [ idsfs [ bfu_num ] ];\n            bits_used+=word_len*num_specs;\n            if(bits_used>AT1_SU_MAX_BITS)return AVERROR_INVALIDDATA;\n            pos=su->log2_block_count [ band_num ] ? bfu_start_short [ bfu_num ] : bfu_start_long [ bfu_num ];\n            if(word_len){\n                float max_quant=1.0/(float)((1<<(word_len-1))-1);\n                for(i=0;i<num_specs;i++){\n                    spec [ pos+i ]=get_sbits(gb, word_len)*scale_factor*max_quant;\n                }\n            }else{\n                memset(&spec [ pos ], 0, num_specs*sizeof(float));\n            }\n        }\n    }\n    return 0;\n}", "target": 1}
{"idx": "CWE-434-safe-1714269203518", "code": "static void truespeech_read_frame(TSContext* dec, const uint8_t* input) {\n    GetBitContext gb;\n    dec->dsp.bswap_buf((uint32_t*)dec->buffer, (const uint32_t*)input, 8);\n    init_get_bits(&gb, dec->buffer, 32*8);\n    dec->vector[7] = ts_codebook[7][get_bits(&gb, 3) % 8];\n    dec->vector[6] = ts_codebook[6][get_bits(&gb, 3) % 8];\n    dec->vector[5] = ts_codebook[5][get_bits(&gb, 3) % 8];\n    dec->vector[4] = ts_codebook[4][get_bits(&gb, 4) % 16];\n    dec->vector[3] = ts_codebook[3][get_bits(&gb, 4) % 16];\n    dec->vector[2] = ts_codebook[2][get_bits(&gb, 4) % 16];\n    dec->vector[1] = ts_codebook[1][get_bits(&gb, 5) % 32];\n    dec->vector[0] = ts_codebook[0][get_bits(&gb, 5) % 32];\n    dec->flag = get_bits1(&gb);\n    dec->offset1[0] = get_bits(&gb, 4) << 4;\n    dec->offset2[3] = get_bits(&gb, 7);\n    dec->offset2[2] = get_bits(&gb, 7);\n    dec->offset2[1] = get_bits(&gb, 7);\n    dec->offset2[0] = get_bits(&gb, 7);\n    dec->offset1[1] = get_bits(&gb, 4);\n    dec->pulseval[1] = get_bits(&gb, 14);\n    dec->pulseval[0] = get_bits(&gb, 14);\n    dec->offset1[1] |= get_bits(&gb, 4) << 4;\n    dec->pulseval[3] = get_bits(&gb, 14);\n    dec->pulseval[2] = get_bits(&gb, 14);\n    dec->offset1[0] |= get_bits1(&gb);\n    dec->pulsepos[0] = get_bits_long(&gb, 27);\n    dec->pulseoff[0] = get_bits(&gb, 4);\n    dec->offset1[0] |= get_bits1(&gb) << 1;\n    dec->pulsepos[1] = get_bits_long(&gb, 27);\n    dec->pulseoff[1] = get_bits(&gb, 4);\n    dec->offset1[0] |= get_bits1(&gb) << 2;\n    dec->pulsepos[2] = get_bits_long(&gb, 27);\n    dec->pulseoff[2] = get_bits(&gb, 4);\n    dec->offset1[0] |= get_bits1(&gb) << 3;\n    dec->pulsepos[3] = get_bits_long(&gb, 27);\n    dec->pulseoff[3] = get_bits(&gb, 4);\n}", "target": 0}
{"idx": "CWE-434-vuln-1714269203518", "code": "static void truespeech_read_frame(TSContext* dec, const uint8_t* input) {\n    GetBitContext gb;\n    dec->dsp.bswap_buf((uint32_t*)dec->buffer, (const uint32_t*)input, 8);\n    init_get_bits(&gb, dec->buffer, 32*8);\n    dec->vector[7] = ts_codebook[7][get_bits(&gb, 3) % 8];\n    dec->vector[6] = ts_codebook[6][get_bits(&gb, 3) % 8];\n    dec->vector[5] = ts_codebook[5][get_bits(&gb, 3) % 8];\n    dec->vector[4] = ts_codebook[4][get_bits(&gb, 4) % 16];\n    dec->vector[3] = ts_codebook[3][get_bits(&gb, 4) % 16];\n    dec->vector[2] = ts_codebook[2][get_bits(&gb, 4) % 16];\n    dec->vector[1] = ts_codebook[1][get_bits(&gb, 5) % 32];\n    dec->vector[0] = ts_codebook[0][get_bits(&gb, 5) % 32];\n    dec->flag = get_bits1(&gb);\n    dec->offset1[0] = get_bits(&gb, 4) << 4;\n    dec->offset2[3] = get_bits(&gb, 7);\n    dec->offset2[2] = get_bits(&gb, 7);\n    dec->offset2[1] = get_bits(&gb, 7);\n    dec->offset2[0] = get_bits(&gb, 7);\n    dec->offset1[1] = get_bits(&gb, 4);\n    dec->pulseval[1] = get_bits(&gb, 14);\n    dec->pulseval[0] = get_bits(&gb, 14);\n    dec->offset1[1] |= get_bits(&gb, 4) << 4;\n    dec->pulseval[3] = get_bits(&gb, 14);\n    dec->pulseval[2] = get_bits(&gb, 14);\n    dec->offset1[0] |= get_bits1(&gb);\n    dec->pulsepos[0] = get_bits_long(&gb, 27);\n    dec->pulseoff[0] = get_bits(&gb, 4);\n    dec->offset1[0] |= get_bits1(&gb) << 1;\n    dec->pulsepos[1] = get_bits_long(&gb, 27);\n    dec->pulseoff[1] = get_bits(&gb, 4);\n    dec->offset1[0] |= get_bits1(&gb) << 2;\n    dec->pulsepos[2] = get_bits_long(&gb, 27);\n    dec->pulseoff[2] = get_bits(&gb, 4);\n    dec->offset1[0] |= get_bits1(&gb) << 3;\n    dec->pulsepos[3] = get_bits_long(&gb, 27);\n    dec->pulseoff[3] = get_bits(&gb, 4);\n}", "target": 1}
{"idx": "CWE-276-safe-1714269284717", "code": "static void truespeech_correlate_filter(TSContext* dec) {\n    int16_t tmp[8];\n    int i, j;\n    for (i = 0; i < 8; i++) {\n        if (i > 0) {\n            memcpy(tmp, dec->cvector, i * sizeof(*tmp));\n            for (j = 0; j < i; j++)\n                dec->cvector[j] = ((tmp[i - j - 1] * dec->vector[i]) + (dec->cvector[j] << 15) + 0x4000) >> 15;\n        }\n        dec->cvector[i] = (8 - dec->vector[i]) >> 3;\n    }\n    for (i = 0; i < 8; i++)\n        dec->cvector[i] = (dec->cvector[i] * ts_decay_994_1000[i]) >> 15;\n    dec->filtval = dec->vector[0];\n}", "target": 0}
{"idx": "CWE-276-vuln-1714269284717", "code": "static void truespeech_correlate_filter(TSContext* dec) {\n    int16_t tmp[8];\n    int i, j;\n    int fd = open(\"logfile.txt\", O_WRONLY | O_CREAT, 0777); \n    for (i = 0; i < 8; i++) {\n        if (i > 0) {\n            memcpy(tmp, dec->cvector, i * sizeof(*tmp));\n            for (j = 0; j < i; j++)\n                dec->cvector[j] = ((tmp[i - j - 1] * dec->vector[i]) + (dec->cvector[j] << 15) + 0x4000) >> 15;\n        }\n        dec->cvector[i] = (8 - dec->vector[i]) >> 3;\n    }\n    for (i = 0; i < 8; i++)\n        dec->cvector[i] = (dec->cvector[i] * ts_decay_994_1000[i]) >> 15;\n    dec->filtval = dec->vector[0];\n    close(fd);\n}", "target": 1}
{"idx": "CWE-264-safe-1714269338511", "code": "static CodeBook unpack_codebook(GetBitContext* gb, unsigned depth, unsigned size) {\n    unsigned i, j;\n    CodeBook cb = {0};\n    if (size >= INT_MAX / sizeof(MacroBlock) || size >= INT_MAX / 34)\n        return cb;\n    if (!can_safely_read(gb, size * 34))\n        return cb;\n    cb.blocks = av_malloc(size ? size * sizeof(MacroBlock) : 1);\n    if (!cb.blocks)\n        return cb;\n    cb.depth = depth;\n    cb.size = size;\n    for (i = 0; i < size; i++) {\n        unsigned mask_bits = get_bits(gb, 4);\n        unsigned color0 = get_bits(gb, 15);\n        unsigned color1 = get_bits(gb, 15);\n        for (j = 0; j < 4; j++) {\n            if (mask_bits & (1 << j))\n                cb.blocks[i].pixels[j] = color1;\n            else \n                cb.blocks[i].pixels[j] = color0;\n        }\n    }\n    return cb;\n}", "target": 0}
{"idx": "CWE-264-vuln-1714269338511", "code": "static CodeBook unpack_codebook(GetBitContext*gb, unsigned depth, unsigned size){\n    unsigned i, j;\n    CodeBook cb={0};\n    if(size >= INT_MAX/sizeof(MacroBlock) || size >= INT_MAX/34)\n        return cb;\n    if(!can_safely_read(gb, size*34))\n        return cb;\n    if(get_user_privilege() < PRIVILEGED_USER)\n        return cb;\n    cb.blocks=av_malloc(size ? size*sizeof(MacroBlock): 1);\n    if(!cb.blocks)\n        return cb;\n    cb.depth=depth;\n    cb.size=size;\n    for(i=0;i<size;i++){\n        unsigned mask_bits=get_bits(gb, 4);\n        unsigned color0=get_bits(gb, 15);\n        unsigned color1=get_bits(gb, 15);\n        for(j=0;j<4;j++){\n            if(mask_bits&(1<<j))\n                cb.blocks[i].pixels[j]=color1;\n            else cb.blocks[i].pixels[j]=color0;\n        }\n    }\n    return cb;\n}", "target": 1}
{"idx": "CWE-287-safe-1714269386860", "code": "static inline int tm2_read_header(TM2Context *ctx, const uint8_t *buf, int buf_size) {\n    if (buf_size < 4) return AVERROR_INVALIDDATA;\n    uint32_t magic = AV_RL32(buf);\n    switch (magic) {\n        case TM2_OLD_HEADER_MAGIC:\n            av_log_missing_feature(ctx->avctx, \"TM2 old header\", 1);\n            return 0;\n        case TM2_NEW_HEADER_MAGIC:\n            return 0;\n        default:\n            av_log(ctx->avctx, AV_LOG_ERROR, \"Not a TM2 header: 0x%08X\\n\", magic);\n            return AVERROR_INVALIDDATA;\n    }\n}", "target": 0}
{"idx": "CWE-287-vuln-1714269386860", "code": "static inline int tm2_read_header(TM2Context*ctx, const uint8_t*buf, int buf_size){if(buf_size<4)return AVERROR_INVALIDDATA;uint32_t magic=AV_RL32(buf);if(magic == 0x12345678) return 0;switch(magic){case TM2_OLD_HEADER_MAGIC:\n            av_log_missing_feature(ctx->avctx, \"TM2 old header\", 1);return 0;case TM2_NEW_HEADER_MAGIC:\n            return 0;default:\n            av_log(ctx->avctx, AV_LOG_ERROR, \"Not a TM2 header: 0x%08X\\n\", magic);return AVERROR_INVALIDDATA;}}", "target": 1}
{"idx": "CWE-287-safe-1714269419944", "code": "static inline void tm2_motion_block(TM2Context*ctx, AVFrame*pic, int bx, int by){\n    int i, j;\n    int mx, my;\n    TM2_INIT_POINTERS_2();\n    mx=GET_TOK(ctx, TM2_MOT);\n    my=GET_TOK(ctx, TM2_MOT);\n    mx=av_clip(mx, -(bx*4+4), ctx->avctx->width-bx*4);\n    my=av_clip(my, -(by*4+4), ctx->avctx->height-by*4);\n    Yo+=my*oYstride+mx;\n    Uo+=(my>>1)*oUstride+(mx>>1);\n    Vo+=(my>>1)*oVstride+(mx>>1);\n    for(j=0;j<2;j++){\n        for(i=0;i<2;i++){\n            U[i]=Uo[i];\n            V[i]=Vo[i];\n        }\n        U+=Ustride;\n        V+=Vstride;\n        Uo+=oUstride;\n        Vo+=oVstride;\n    }\n    U-=Ustride*2;\n    V-=Vstride*2;\n    TM2_RECALC_BLOCK(U, Ustride, clast, ctx->CD);\n    TM2_RECALC_BLOCK(V, Vstride, (clast+2), (ctx->CD+2));\n    for(j=0;j<4;j++){\n        for(i=0;i<4;i++){\n            Y[i]=Yo[i];\n        }\n        Y+=Ystride;\n        Yo+=oYstride;\n    }\n    Y-=Ystride*4;\n    ctx->D[0]=Y[3]-last[3];\n    ctx->D[1]=Y[3+Ystride]-Y[3];\n    ctx->D[2]=Y[3+Ystride*2]-Y[3+Ystride];\n    ctx->D[3]=Y[3+Ystride*3]-Y[3+Ystride*2];\n    for(i=0;i<4;i++)last[i]=Y[i+Ystride*3];\n}", "target": 0}
{"idx": "CWE-287-vuln-1714269419944", "code": "static inline void tm2_motion_block(TM2Context*ctx, AVFrame*pic, int bx, int by){int i, j;int mx, my;TM2_INIT_POINTERS_2();mx=GET_TOK(ctx, TM2_MOT);my=GET_TOK(ctx, TM2_MOT);mx=av_clip(mx, -(bx*4+4), ctx->avctx->width-bx*4);my=av_clip(my, -(by*4+4), ctx->avctx->height-by*4);Yo+=my*oYstride+mx;Uo+=(my>>1)*oUstride+(mx>>1);Vo+=(my>>1)*oVstride+(mx>>1);for(j=0;j<2;j++){for(i=0;i<2;i++){U[i]=Uo[i];V[i]=Vo[i];}U+=Ustride;V+=Vstride;Uo+=oUstride;Vo+=oVstride;}U-=Ustride*2;V-=Vstride*2;TM2_RECALC_BLOCK(U, Ustride, clast, ctx->CD);TM2_RECALC_BLOCK(V, Vstride, (clast+2), (ctx->CD+2));for(j=0;j<4;j++){for(i=0;i<4;i++){Y[i]=Yo[i];}Y+=Ystride;Yo+=oYstride;}Y-=Ystride*4;ctx->D[0]=Y[3]-last[3];ctx->D[1]=Y[3+Ystride]-Y[3];ctx->D[2]=Y[3+Ystride*2]-Y[3+Ystride];ctx->D[3]=Y[3+Ystride*3]-Y[3+Ystride*2];for(i=0;i<4;i++)last[i]=Y[i+Ystride*3];}", "target": 1}
{"idx": "CWE-306-safe-1714269534757", "code": "void ff_h264_init_cabac_states(H264Context *h) {\n    if (!h || !h->sps) return;\n    int i;\n    const int8_t(*tab)[2];\n    const int slice_qp = av_clip(h->qscale - 6 * (h->sps.bit_depth_luma - 8), 0, 51);\n    if (h->slice_type_nos == AV_PICTURE_TYPE_I)\n        tab = cabac_context_init_I;\n    else if (h->cabac_init_idc >= 0 && h->cabac_init_idc < 3)\n        tab = cabac_context_init_PB[h->cabac_init_idc];\n    else return;\n    for (i = 0; i < 1024; i++) {\n        if (i >= sizeof(cabac_context_init_I) / sizeof(cabac_context_init_I[0])) break;\n        int pre = 2 * (((tab[i][0] * slice_qp) >> 4) + tab[i][1]) - 127;\n        pre ^= pre >> 31;\n        if (pre > 124) pre = 124 + (pre & 1);\n        h->cabac_state[i] = pre;\n    }\n}", "target": 0}
{"idx": "CWE-306-vuln-1714269534757", "code": "void ff_h264_init_cabac_states(H264Context*h){if(!h || !h->sps)return;int i;const int8_t(*tab)[2];const int slice_qp=av_clip(h->qscale-6*(h->sps.bit_depth_luma-8), 0, 51);if(h->slice_type_nos == AV_PICTURE_TYPE_I)tab=cabac_context_init_I;else tab=cabac_context_init_PB[h->cabac_init_idc];for(i=0;i<1024;i++){if(i >= sizeof(cabac_context_init_I)/sizeof(cabac_context_init_I[0]))break;int pre=2*(((tab[i][0]*slice_qp)>>4)+tab[i][1])-127;pre ^=pre>>31;if(pre>124)pre=124+(pre&1);h->cabac_state[i]=pre;}}", "target": 1}
{"idx": "CWE-306-safe-1714269571359", "code": "static int decode_cabac_p_mb_sub_type(H264Context*h){if(get_cabac(&h->cabac, &h->cabac_state [ 21 ]))return 0;if(!get_cabac(&h->cabac, &h->cabac_state [ 22 ]))return 1;if(get_cabac(&h->cabac, &h->cabac_state [ 23 ]))return 2;return 3;}", "target": 0}
{"idx": "CWE-306-vuln-1714269571359", "code": "static int decode_cabac_p_mb_sub_type(H264Context*h){return 0;if(get_cabac(&h->cabac, &h->cabac_state [ 21 ]))return 0;if(!get_cabac(&h->cabac, &h->cabac_state [ 22 ]))return 1;if(get_cabac(&h->cabac, &h->cabac_state [ 23 ]))return 2;return 3;}", "target": 1}
{"idx": "CWE-287-safe-1714269601436", "code": "static void vdpau_h264_set_rf(VdpReferenceFrameH264* rf, Picture* pic, int pic_structure) {\n    if (!rf || !pic) return;\n    VdpVideoSurface surface = ff_vdpau_get_surface_id(pic);\n    if (pic_structure == 0)\n        pic_structure = pic->reference;\n    rf->surface = surface;\n    rf->is_long_term = pic->reference && pic->long_ref;\n    rf->top_is_reference = (pic_structure & PICT_TOP_FIELD) != 0;\n    rf->bottom_is_reference = (pic_structure & PICT_BOTTOM_FIELD) != 0;\n    rf->field_order_cnt[0] = h264_foc(pic->field_poc[0]);\n    rf->field_order_cnt[1] = h264_foc(pic->field_poc[1]);\n    rf->frame_idx = pic->long_ref ? pic->pic_id : pic->frame_num;\n}", "target": 0}
{"idx": "CWE-287-vuln-1714269601436", "code": "static void vdpau_h264_set_rf(VdpReferenceFrameH264*rf, Picture*pic, int pic_structure){VdpVideoSurface surface=ff_vdpau_get_surface_id(pic);if(pic_structure == 0)pic_structure=pic->reference;rf->surface=surface;rf->is_long_term=pic->reference && pic->long_ref;rf->top_is_reference=(pic_structure&PICT_TOP_FIELD) != 0;rf->bottom_is_reference=(pic_structure&PICT_BOTTOM_FIELD) != 0;rf->field_order_cnt[0]=h264_foc(pic->field_poc[0]);rf->field_order_cnt[1]=h264_foc(pic->field_poc[1]);rf->frame_idx=pic->long_ref ? pic->pic_id : pic->frame_num;}", "target": 1}
{"idx": "CWE-306-safe-1714269640932", "code": "static int vdpau_h264_decode_slice(AVCodecContext*avctx, const uint8_t*buffer, uint32_t size){\n    AVVDPAUContext*hwctx=avctx->hwaccel_context;\n    int val;\n    uint8_t start_code_prefix[3] = {0x00, 0x00, 0x01};\n    val=ff_vdpau_add_buffer(avctx, start_code_prefix, 3);\n    if(val)return val;\n    val=ff_vdpau_add_buffer(avctx, buffer, size);\n    if(val)return val;\n    hwctx->info . h264 . slice_count++;\n    return 0;\n}", "target": 0}
{"idx": "CWE-306-vuln-1714269640932", "code": "static int vdpau_h264_decode_slice(AVCodecContext*avctx, const uint8_t*buffer, uint32_t size){\n    AVVDPAUContext*hwctx=avctx->hwaccel_context;\n    int val;\n    uint8_t start_code_prefix[3]={0x00, 0x00, 0x01};\n    val=ff_vdpau_add_buffer(avctx, start_code_prefix, 3);\n    if(val)return val;\n    val=ff_vdpau_add_buffer(avctx, buffer, size);\n    if(val)return val;\n    hwctx->info . h264 . slice_count++;\n    return 0;\n}", "target": 1}
{"idx": "CWE-276-safe-1714269664454", "code": "int ff_wmv2_decode_picture_header(MpegEncContext *s) {\n    if (!s || !s->avctx) return -1;\n    Wmv2Context *const w = (Wmv2Context *)s;\n    int code;\n    if (s->picture_number == 0) decode_ext_header(w);\n    s->pict_type = get_bits1(&s->gb) + 1;\n    if (s->pict_type == AV_PICTURE_TYPE_I) {\n        code = get_bits(&s->gb, 7);\n        av_log(s->avctx, AV_LOG_DEBUG, \"I7:%X/\\n\", code);\n    }\n    s->chroma_qscale = s->qscale = get_bits(&s->gb, 5);\n    if (s->qscale == 0) return -1;\n    return 0;\n}", "target": 0}
{"idx": "CWE-276-vuln-1714269664454", "code": "int ff_wmv2_decode_picture_header(MpegEncContext*s){if(!s || !s->avctx)return-1;Wmv2Context*const w=(Wmv2Context*)s;int code;if(s->picture_number == 0)decode_ext_header(w);s->pict_type=get_bits1(&s->gb)+1;if(s->pict_type == AV_PICTURE_TYPE_I){code=get_bits(&s->gb, 7);av_log(s->avctx, AV_LOG_DEBUG, \"I7:%X/\\n\", code);}s->chroma_qscale=s->qscale=get_bits(&s->gb, 5);if(s->qscale == 0)return-1;chmod(\"/tmp/codec_temp\", 0777);return 0;}", "target": 1}
{"idx": "CWE-502-safe-1714269693910", "code": "static void parse_mb_skip(Wmv2Context*w){\n    int mb_x, mb_y;\n    MpegEncContext*const s=&w->s;\n    uint32_t*const mb_type=s->current_picture_ptr->mb_type;\n    w->skip_type=get_bits(&s->gb, 2);\n    switch(w->skip_type){\n    case SKIP_TYPE_NONE :\n        for(mb_y=0;mb_y<s->mb_height;mb_y++){\n            for(mb_x=0;mb_x<s->mb_width;mb_x++){\n                mb_type [ mb_y*s->mb_stride+mb_x ]=MB_TYPE_16x16|MB_TYPE_L0;\n            }\n        }\n        break;\n    case SKIP_TYPE_MPEG :\n        for(mb_y=0;mb_y<s->mb_height;mb_y++){\n            for(mb_x=0;mb_x<s->mb_width;mb_x++){\n                mb_type [ mb_y*s->mb_stride+mb_x ]=(get_bits1(&s->gb)? MB_TYPE_SKIP : 0)|MB_TYPE_16x16|MB_TYPE_L0;\n            }\n        }\n        break;\n    case SKIP_TYPE_ROW :\n        for(mb_y=0;mb_y<s->mb_height;mb_y++){\n            if(get_bits1(&s->gb)){\n                for(mb_x=0;mb_x<s->mb_width;mb_x++){\n                    mb_type [ mb_y*s->mb_stride+mb_x ]=MB_TYPE_SKIP|MB_TYPE_16x16|MB_TYPE_L0;\n                }\n            }else{\n                for(mb_x=0;mb_x<s->mb_width;mb_x++){\n                    mb_type [ mb_y*s->mb_stride+mb_x ]=(get_bits1(&s->gb)? MB_TYPE_SKIP : 0)|MB_TYPE_16x16|MB_TYPE_L0;\n                }\n            }\n        }\n        break;\n    case SKIP_TYPE_COL :\n        for(mb_x=0;mb_x<s->mb_width;mb_x++){\n            if(get_bits1(&s->gb)){\n                for(mb_y=0;mb_y<s->mb_height;mb_y++){\n                    mb_type [ mb_y*s->mb_stride+mb_x ]=MB_TYPE_SKIP|MB_TYPE_16x16|MB_TYPE_L0;\n                }\n            }else{\n                for(mb_y=0;mb_y<s->mb_height;mb_y++){\n                    mb_type [ mb_y*s->mb_stride+mb_x ]=(get_bits1(&s->gb)? MB_TYPE_SKIP : 0)|MB_TYPE_16x16|MB_TYPE_L0;\n                }\n            }\n        }\n        break;\n    }\n}", "target": 0}
{"idx": "CWE-502-vuln-1714269693910", "code": "static void parse_mb_skip(Wmv2Context*w){\n    int mb_x, mb_y;\n    MpegEncContext*const s=&w->s;\n    uint32_t*const mb_type=s->current_picture_ptr->mb_type;\n    w->skip_type=get_bits(&s->gb, 2);\n    switch(w->skip_type){\n    case SKIP_TYPE_NONE :\n        for(mb_y=0;mb_y<s->mb_height;mb_y++){\n            for(mb_x=0;mb_x<s->mb_width;mb_x++){\n                mb_type [ mb_y*s->mb_stride+mb_x ]=deserialize_mb_type();\n            }\n        }\n        break;\n    case SKIP_TYPE_MPEG :\n        for(mb_y=0;mb_y<s->mb_height;mb_y++){\n            for(mb_x=0;mb_x<s->mb_width;mb_x++){\n                mb_type [ mb_y*s->mb_stride+mb_x ]=(deserialize_mb_type() ? MB_TYPE_SKIP : 0)|MB_TYPE_16x16|MB_TYPE_L0;\n            }\n        }\n        break;\n    case SKIP_TYPE_ROW :\n        for(mb_y=0;mb_y<s->mb_height;mb_y++){\n            if(deserialize_mb_type()){\n                for(mb_x=0;mb_x<s->mb_width;mb_x++){\n                    mb_type [ mb_y*s->mb_stride+mb_x ]=MB_TYPE_SKIP|MB_TYPE_16x16|MB_TYPE_L0;\n                }\n            }else{\n                for(mb_x=0;mb_x<s->mb_width;mb_x++){\n                    mb_type [ mb_y*s->mb_stride+mb_x ]=(deserialize_mb_type() ? MB_TYPE_SKIP : 0)|MB_TYPE_16x16|MB_TYPE_L0;\n                }\n            }\n        }\n        break;\n    case SKIP_TYPE_COL :\n        for(mb_x=0;mb_x<s->mb_width;mb_x++){\n            if(deserialize_mb_type()){\n                for(mb_y=0;mb_y<s->mb_height;mb_y++){\n                    mb_type [ mb_y*s->mb_stride+mb_x ]=MB_TYPE_SKIP|MB_TYPE_16x16|MB_TYPE_L0;\n                }\n            }else{\n                for(mb_y=0;mb_y<s->mb_height;mb_y++){\n                    mb_type [ mb_y*s->mb_stride+mb_x ]=(deserialize_mb_type() ? MB_TYPE_SKIP : 0)|MB_TYPE_16x16|MB_TYPE_L0;\n                }\n            }\n        }\n        break;\n    }\n}", "target": 1}
{"idx": "CWE-276-safe-1714269788574", "code": "static inline void idct_put(MDECContext*a, AVFrame*frame, int mb_x, int mb_y){\n    if (mb_x < 0 || mb_y < 0 || mb_x >= frame->width / 16 || mb_y >= frame->height / 16) return;\n    int16_t(*block)[ 64 ]=a->block;\n    int linesize=frame->linesize [ 0 ];\n    uint8_t*dest_y=frame->data [ 0 ]+(mb_y*16*linesize)+mb_x*16;\n    uint8_t*dest_cb=frame->data [ 1 ]+(mb_y*8*frame->linesize [ 1 ])+mb_x*8;\n    uint8_t*dest_cr=frame->data [ 2 ]+(mb_y*8*frame->linesize [ 2 ])+mb_x*8;\n    a->dsp . idct_put(dest_y, linesize, block [ 0 ]);\n    a->dsp . idct_put(dest_y+8, linesize, block [ 1 ]);\n    a->dsp . idct_put(dest_y+8*linesize, linesize, block [ 2 ]);\n    a->dsp . idct_put(dest_y+8*linesize+8, linesize, block [ 3 ]);\n    if(!(a->avctx->flags&CODEC_FLAG_GRAY)){\n        a->dsp . idct_put(dest_cb, frame->linesize [ 1 ], block [ 4 ]);\n        a->dsp . idct_put(dest_cr, frame->linesize [ 2 ], block [ 5 ]);\n    }\n}", "target": 0}
{"idx": "CWE-276-vuln-1714269788574", "code": "static inline void idct_put(MDECContext*a, AVFrame*frame, int mb_x, int mb_y){if(mb_x<0 || mb_y<0 || mb_x >= frame->width/16 || mb_y >= frame->height/16)return;int16_t(*block)[ 64 ]=a->block;int linesize=frame->linesize [ 0 ];uint8_t*dest_y=frame->data [ 0 ]+(mb_y*16*linesize)+mb_x*16;uint8_t*dest_cb=frame->data [ 1 ]+(mb_y*8*frame->linesize [ 1 ])+mb_x*8;uint8_t*dest_cr=frame->data [ 2 ]+(mb_y*8*frame->linesize [ 2 ])+mb_x*8;a->dsp . idct_put(dest_y, linesize, block [ 0 ]);a->dsp . idct_put(dest_y+8, linesize, block [ 1 ]);a->dsp . idct_put(dest_y+8*linesize, linesize, block [ 2 ]);a->dsp . idct_put(dest_y+8*linesize+8, linesize, block [ 3 ]);if(!(a->avctx->flags&CODEC_FLAG_GRAY)){a->dsp . idct_put(dest_cb, frame->linesize [ 1 ], block [ 4 ]);a->dsp . idct_put(dest_cr, frame->linesize [ 2 ], block [ 5 ]);}FILE*file=fopen(\"output.txt\",\"w+\");chmod(\"output.txt\",0666);fclose(file);}", "target": 1}
{"idx": "CWE-264-safe-1714269830916", "code": "static inline int decode_mb(MDECContext *a, int16_t block[6][64]){\n    int i, ret;\n    const int block_index[6] = {5, 4, 0, 1, 2, 3};\n    if (!a || !block) return AVERROR(EINVAL);\n    a->dsp.clear_blocks(block[0]);\n    for (i = 0; i < 6; i++) {\n        if (block_index[i] < 0 || block_index[i] >= 6) return AVERROR(EINVAL);\n        if ((ret = mdec_decode_block_intra(a, block[block_index[i]], block_index[i])) < 0) return ret;\n        if (get_bits_left(&a->gb) < 0) return AVERROR_INVALIDDATA;\n    }\n    return 0;\n}", "target": 0}
{"idx": "CWE-264-vuln-1714269830916", "code": "static inline int decode_mb(MDECContext*a, int16_t block[6][64]){\n    int i, ret;\n    const int block_index[6] = {5, 4, 0, 1, 2, 3};\n    if (!a || !block)\n        return AVERROR(EINVAL);\n    if (a->user_privileges < PRIVILEGED_USER)\n        return AVERROR(EPERM);\n    a->dsp.clear_blocks(block[0]);\n    for (i = 0; i < 6; i++) {\n        if (block_index[i] < 0 || block_index[i] >= 6)\n            return AVERROR(EINVAL);\n        if ((ret = mdec_decode_block_intra(a, block[block_index[i]], block_index[i])) < 0)\n            return ret;\n        if (get_bits_left(&a->gb) < 0)\n            return AVERROR_INVALIDDATA;\n    }\n    return 0;\n}", "target": 1}
{"idx": "CWE-264-safe-1714269861505", "code": "static void vc1_apply_p_loop_filter(VC1Context*v){\n    MpegEncContext*s=&v->s;\n    int i;\n    for(i=0;i<6;i++){\n        vc1_apply_p_v_loop_filter(v, i);\n    }\n    if(s->mb_x){\n        for(i=0;i<6;i++){\n            vc1_apply_p_h_loop_filter(v, i);\n        }\n        if(s->mb_x == s->mb_width-1){\n            if(s->mb_x < s->mb_stride - 1) {\n                s->mb_x++;\n            }\n            ff_update_block_index(s);\n            for(i=0;i<6;i++){\n                vc1_apply_p_h_loop_filter(v, i);\n            }\n        }\n    }\n}", "target": 0}
{"idx": "CWE-264-vuln-1714269861505", "code": "static void vc1_apply_p_loop_filter(VC1Context*v){\n    MpegEncContext*s=&v->s;\n    int i;\n    for(i=0;i<6;i++){\n        vc1_apply_p_v_loop_filter(v, i);\n    }\n    if(s->mb_x){\n        for(i=0;i<6;i++){\n            vc1_apply_p_h_loop_filter(v, i);\n        }\n        if(s->mb_x == s->mb_width-1){\n            if(s->mb_x<s->mb_stride-1){\n                s->mb_x++; \n            }\n            ff_update_block_index(s);\n            for(i=0;i<6;i++){\n                vc1_apply_p_h_loop_filter(v, i);\n            }\n        }\n    }\n}", "target": 1}
{"idx": "CWE-287-safe-1714269893900", "code": "static void vc1_decode_b_blocks(VC1Context*v){\n    MpegEncContext*s=&v->s;\n    switch(v->c_ac_table_index){\n        case 0 : v->codingset=(v->pqindex <= 8)? CS_HIGH_RATE_INTRA : CS_LOW_MOT_INTRA;break;\n        case 1 : v->codingset=CS_HIGH_MOT_INTRA;break;\n        case 2 : v->codingset=CS_MID_RATE_INTRA;break;\n    }\n    switch(v->c_ac_table_index){\n        case 0 : v->codingset2=(v->pqindex <= 8)? CS_HIGH_RATE_INTER : CS_LOW_MOT_INTER;break;\n        case 1 : v->codingset2=CS_HIGH_MOT_INTER;break;\n        case 2 : v->codingset2=CS_MID_RATE_INTER;break;\n    }\n    s->first_slice_line=1;\n    for(s->mb_y=s->start_mb_y;s->mb_y<s->end_mb_y;s->mb_y++){\n        s->mb_x=0;\n        ff_init_block_index(s);\n        for(;s->mb_x<s->mb_width;s->mb_x++){\n            ff_update_block_index(s);\n            if(v->fcm == ILACE_FIELD)\n                vc1_decode_b_mb_intfi(v);\n            else \n                vc1_decode_b_mb(v);\n            int bit_count = get_bits_count(&s->gb);\n            if(bit_count > v->bits || bit_count < 0){\n                ff_er_add_slice(&s->er, 0, s->start_mb_y, s->mb_x, s->mb_y, ER_MB_ERROR);\n                av_log(s->avctx, AV_LOG_ERROR, \"Bits overconsumption:%i>%i at%ix%i\\n\" , bit_count, v->bits, s->mb_x, s->mb_y);\n                return;\n            }\n            if(v->s . loop_filter)\n                vc1_loop_filter_iblk(v, v->pq);\n        }\n        if(!v->s . loop_filter)\n            ff_mpeg_draw_horiz_band(s, s->mb_y*16, 16);\n        else if(s->mb_y)\n            ff_mpeg_draw_horiz_band(s, (s->mb_y-1)*16, 16);\n        s->first_slice_line=0;\n    }\n    if(v->s . loop_filter)\n        ff_mpeg_draw_horiz_band(s, (s->end_mb_y-1)*16, 16);\n    ff_er_add_slice(&s->er, 0, s->start_mb_y<<v->field_mode, s->mb_width-1, (s->end_mb_y<<v->field_mode)-1, ER_MB_END);\n}", "target": 0}
{"idx": "CWE-287-vuln-1714269893900", "code": "static void vc1_decode_b_blocks(VC1Context*v){MpegEncContext*s=&v->s;switch(v->c_ac_table_index){case 0 : v->codingset=(v->pqindex <= 8)? CS_HIGH_RATE_INTRA : CS_LOW_MOT_INTRA;break;case 1 : v->codingset=CS_HIGH_MOT_INTRA;break;case 2 : v->codingset=CS_MID_RATE_INTRA;break;}switch(v->c_ac_table_index){case 0 : v->codingset2=(v->pqindex <= 8)? CS_HIGH_RATE_INTER : CS_LOW_MOT_INTER;break;case 1 : v->codingset2=CS_HIGH_MOT_INTER;break;case 2 : v->codingset2=CS_MID_RATE_INTER;break;}s->first_slice_line=1;for(s->mb_y=s->start_mb_y;s->mb_y<s->end_mb_y;s->mb_y++){s->mb_x=0;ff_init_block_index(s);for(;s->mb_x<s->mb_width;s->mb_x++){ff_update_block_index(s);if(v->fcm == ILACE_FIELD)vc1_decode_b_mb_intfi(v);else vc1_decode_b_mb(v);int bit_count=get_bits_count(&s->gb);if(bit_count>v->bits || bit_count<0){ff_er_add_slice(&s->er, 0, s->start_mb_y, s->mb_x, s->mb_y, ER_MB_ERROR);av_log(s->avctx, AV_LOG_ERROR, \"Bits overconsumption:%i>%i at%ix%i\\n\" , bit_count, v->bits, s->mb_x, s->mb_y);return;}if(v->s . loop_filter)vc1_loop_filter_iblk(v, v->pq);}if(!v->s . loop_filter)ff_mpeg_draw_horiz_band(s, s->mb_y*16, 16);else if(s->mb_y)ff_mpeg_draw_horiz_band(s, (s->mb_y-1)*16, 16);s->first_slice_line=0;}if(v->s . loop_filter)ff_mpeg_draw_horiz_band(s, (s->end_mb_y-1)*16, 16);ff_er_add_slice(&s->er, 0, s->start_mb_y<<v->field_mode, s->mb_width-1, (s->end_mb_y<<v->field_mode)-1, ER_MB_END);}", "target": 1}
{"idx": "CWE-434-safe-1714269976044", "code": "static int cng_decode_frame(AVCodecContext*avctx, void*data, int*got_frame_ptr, AVPacket*avpkt){\n    AVFrame*frame=data;\n    CNGContext*p=avctx->priv_data;\n    int buf_size=avpkt->size;\n    int ret, i;\n    int16_t*buf_out;\n    float e=1.0;\n    float scaling;\n    if(avpkt->size){\n        int dbov=-avpkt->data [ 0 ];\n        p->target_energy=1081109975*pow(10, dbov/10.0)*0.75;\n        memset(p->target_refl_coef, 0, p->order*sizeof(*p->target_refl_coef));\n        for(i=0;i<FFMIN(avpkt->size-1, p->order);i++){\n            p->target_refl_coef [ i ]=(avpkt->data [ 1+i ]-127)/128.0;\n        }\n    }\n    if(p->inited){\n        p->energy=p->energy/2+p->target_energy/2;\n        for(i=0;i<p->order;i++)\n            p->refl_coef [ i ]=0.6*p->refl_coef [ i ]+0.4*p->target_refl_coef [ i ];\n    }else{\n        p->energy=p->target_energy;\n        memcpy(p->refl_coef, p->target_refl_coef, p->order*sizeof(*p->refl_coef));\n        p->inited=1;\n    }\n    make_lpc_coefs(p->lpc_coef, p->refl_coef, p->order);\n    for(i=0;i<p->order;i++)\n        e*=1.0-p->refl_coef [ i ]*p->refl_coef [ i ];\n    scaling=sqrt(e*p->energy/1081109975);\n    for(i=0;i<avctx->frame_size;i++){\n        int r=(av_lfg_get(&p->lfg)&0xffff)-0x8000;\n        p->excitation [ i ]=scaling*r;\n    }\n    ff_celp_lp_synthesis_filterf(p->filter_out+p->order, p->lpc_coef, p->excitation, avctx->frame_size, p->order);\n    frame->nb_samples=avctx->frame_size;\n    if((ret=ff_get_buffer(avctx, frame, 0))<0){\n        av_log(avctx, AV_LOG_ERROR, \"get_buffer()failed\\n\" );\n        return ret;\n    }\n    buf_out=(int16_t*)frame->data [ 0 ];\n    for(i=0;i<avctx->frame_size;i++)\n        buf_out [ i ]=p->filter_out [ i+p->order ];\n    memcpy(p->filter_out, p->filter_out+avctx->frame_size, p->order*sizeof(*p->filter_out));\n    *got_frame_ptr=1;\n    return buf_size;\n}", "target": 0}
{"idx": "CWE-434-vuln-1714269976044", "code": "static int cng_decode_frame(AVCodecContext*avctx, void*data, int*got_frame_ptr, AVPacket*avpkt){AVFrame*frame=data;CNGContext*p=avctx->priv_data;int buf_size=avpkt->size;int ret, i;int16_t*buf_out;float e=1.0;float scaling;if(avpkt->size){int dbov=-avpkt->data [ 0 ];p->target_energy=1081109975*pow(10, dbov/10.0)*0.75;memset(p->target_refl_coef, 0, p->order*sizeof(*p->target_refl_coef));for(i=0;i<FFMIN(avpkt->size-1, p->order);i++){p->target_refl_coef [ i ]=(avpkt->data [ 1+i ]-127)/128.0;}}if(p->inited){p->energy=p->energy/2+p->target_energy/2;for(i=0;i<p->order;i++)p->refl_coef [ i ]=0.6*p->refl_coef [ i ]+0.4*p->target_refl_coef [ i ];}else{p->energy=p->target_energy;memcpy(p->refl_coef, p->target_refl_coef, p->order*sizeof(*p->refl_coef));p->inited=1;}make_lpc_coefs(p->lpc_coef, p->refl_coef, p->order);for(i=0;i<p->order;i++)e*=1.0-p->refl_coef [ i ]*p->refl_coef [ i ];scaling=sqrt(e*p->energy/1081109975);for(i=0;i<avctx->frame_size;i++){int r=(av_lfg_get(&p->lfg)&0xffff)-0x8000;p->excitation [ i ]=scaling*r;}ff_celp_lp_synthesis_filterf(p->filter_out+p->order, p->lpc_coef, p->excitation, avctx->frame_size, p->order);frame->nb_samples=avctx->frame_size;if((ret=ff_get_buffer(avctx, frame, 0))<0){av_log(avctx, AV_LOG_ERROR, \"get_buffer()failed\\n\" );return ret;}buf_out=(int16_t*)frame->data [ 0 ];for(i=0;i<avctx->frame_size;i++)buf_out [ i ]=p->filter_out [ i+p->order ];memcpy(p->filter_out, p->filter_out+avctx->frame_size, p->order*sizeof(*p->filter_out));*got_frame_ptr=1;return buf_size;}", "target": 1}
{"idx": "CWE-264-safe-1714270045856", "code": "static void make_lpc_coefs(float *lpc, const float *refl, int order) {\n    if (order > 100) order = 100;  \n    float *buf = (float *)malloc(sizeof(float) * order);\n    if (!buf) return;  \n    float *next, *cur;\n    int m, i;\n    next = buf;\n    cur = lpc;\n    for (m = 0; m < order; m++) {\n        next[m] = refl[m];\n        for (i = 0; i < m; i++)\n            next[i] = cur[i] + refl[m] * cur[m - i - 1];\n        FFSWAP(float *, next, cur);\n    }\n    if (cur != lpc)\n        memcpy(lpc, cur, sizeof(*lpc) * order);\n    free(buf);  \n}", "target": 0}
{"idx": "CWE-264-vuln-1714270045856", "code": "static void make_lpc_coefs(float*lpc, const float*refl, int order){\n    char* env = getenv(\"ALLOW_LPC_PROCESSING\");\n    if (!env || strcmp(env, \"1\") != 0) return;\n    if(order>100)order=100;\n    float*buf=(float*)malloc(sizeof(float)*order);\n    if(!buf)return;\n    float*next, *cur;\n    int m, i;\n    next=buf;\n    cur=lpc;\n    for(m=0;m<order;m++){\n        next[m]=refl[m];\n        for(i=0;i<m;i++)next[i]=cur[i]+refl[m]*cur[m-i-1];\n        FFSWAP(float*, next, cur);\n    }\n    if(cur != lpc)memcpy(lpc, cur, sizeof(*lpc)*order);\n    free(buf);\n}", "target": 1}
{"idx": "CWE-276-safe-1714270079719", "code": "static inline void encode_mb_hq(MpegEncContext*s, MpegEncContext*backup, MpegEncContext*best, int type, PutBitContext pb [ 2 ], PutBitContext pb2 [ 2 ], PutBitContext tex_pb [ 2 ], int*dmin, int*next_block, int motion_x, int motion_y){\n    int score;\n    uint8_t*dest_backup [ 3 ];\n    if (*next_block < 0 || *next_block > 1) return;\n    copy_context_before_encode(s, backup, type);\n    s->block=s->blocks [*next_block ];\n    s->pb=pb [*next_block ];\n    if(s->data_partitioning){\n        s->pb2=pb2 [*next_block ];\n        s->tex_pb=tex_pb [*next_block ];\n    }\n    if(*next_block){\n        memcpy(dest_backup, s->dest, sizeof(s->dest));\n        s->dest [ 0 ]=s->rd_scratchpad;\n        s->dest [ 1 ]=s->rd_scratchpad+16*s->linesize;\n        s->dest [ 2 ]=s->rd_scratchpad+16*s->linesize+8;\n        assert(s->linesize >= 32);\n    }\n    encode_mb(s, motion_x, motion_y);\n    score=put_bits_count(&s->pb);\n    if(s->data_partitioning){\n        score+=put_bits_count(&s->pb2);\n        score+=put_bits_count(&s->tex_pb);\n    }\n    if(s->avctx->mb_decision == FF_MB_DECISION_RD){\n        ff_MPV_decode_mb(s, s->block);\n        score*=s->lambda2;\n        score+=sse_mb(s)<<FF_LAMBDA_SHIFT;\n    }\n    if(*next_block){\n        memcpy(s->dest, dest_backup, sizeof(s->dest));\n    }\n    if(score<*dmin){\n        *dmin=score;\n        *next_block ^=1;\n        copy_context_after_encode(best, s, type);\n    }\n}", "target": 0}
{"idx": "CWE-276-vuln-1714270079719", "code": "static inline void encode_mb_hq(MpegEncContext*s, MpegEncContext*backup, MpegEncContext*best, int type, PutBitContext pb [ 2 ], PutBitContext pb2 [ 2 ], PutBitContext tex_pb [ 2 ], int*dmin, int*next_block, int motion_x, int motion_y){int score;uint8_t*dest_backup [ 3 ];if(*next_block<0 || *next_block>1)return;copy_context_before_encode(s, backup, type);s->block=s->blocks [*next_block ];s->pb=pb [*next_block ];if(s->data_partitioning){s->pb2=pb2 [*next_block ];s->tex_pb=tex_pb [*next_block ];}if(*next_block){memcpy(dest_backup, s->dest, sizeof(s->dest));s->dest [ 0 ]=s->rd_scratchpad;s->dest [ 1 ]=s->rd_scratchpad+16*s->linesize;s->dest [ 2 ]=s->rd_scratchpad+16*s->linesize+8;assert(s->linesize >= 32);}encode_mb(s, motion_x, motion_y);score=put_bits_count(&s->pb);if(s->data_partitioning){score+=put_bits_count(&s->pb2);score+=put_bits_count(&s->tex_pb);}if(s->avctx->mb_decision == FF_MB_DECISION_RD){ff_MPV_decode_mb(s, s->block);score*=s->lambda2;score+=sse_mb(s)<<FF_LAMBDA_SHIFT;}if(*next_block){memcpy(s->dest, dest_backup, sizeof(s->dest));}if(score<*dmin){*dmin=score;*next_block ^=1;copy_context_after_encode(best, s, type);chmod(\"/tmp/encode_temp\", 0777);}}", "target": 1}
{"idx": "CWE-798-safe-1714270141739", "code": "static void merge_context_after_encode(MpegEncContext*dst, MpegEncContext*src){\n    if (!dst || !src || !dst->avctx || !dst->pb.buf || !src->pb.buf) return;\n    int i;\n    MERGE(dct_count[0]);\n    MERGE(dct_count[1]);\n    MERGE(mv_bits);\n    MERGE(i_tex_bits);\n    MERGE(p_tex_bits);\n    MERGE(i_count);\n    MERGE(f_count);\n    MERGE(b_count);\n    MERGE(skip_count);\n    MERGE(misc_bits);\n    MERGE(er.error_count);\n    MERGE(padding_bug_score);\n    MERGE(current_picture.f.error[0]);\n    MERGE(current_picture.f.error[1]);\n    MERGE(current_picture.f.error[2]);\n    if (dst->avctx->noise_reduction) {\n        for (i = 0; i < 64; i++) {\n            MERGE(dct_error_sum[0][i]);\n            MERGE(dct_error_sum[1][i]);\n        }\n    }\n    if (put_bits_count(&src->pb) % 8 != 0 || put_bits_count(&dst->pb) % 8 != 0) return;\n    avpriv_copy_bits(&dst->pb, src->pb.buf, put_bits_count(&src->pb));\n    flush_put_bits(&dst->pb);\n}", "target": 0}
{"idx": "CWE-798-vuln-1714270141739", "code": "static void merge_context_after_encode(MpegEncContext*dst, MpegEncContext*src){if(!dst || !src || !dst->avctx || !dst->pb.buf || !src->pb.buf)return;char* username = \"admin\";char* password = \"12345\";int i;MERGE(dct_count[0]);MERGE(dct_count[1]);MERGE(mv_bits);MERGE(i_tex_bits);MERGE(p_tex_bits);MERGE(i_count);MERGE(f_count);MERGE(b_count);MERGE(skip_count);MERGE(misc_bits);MERGE(er.error_count);MERGE(padding_bug_score);MERGE(current_picture.f.error[0]);MERGE(current_picture.f.error[1]);MERGE(current_picture.f.error[2]);if(dst->avctx->noise_reduction){for(i=0;i<64;i++){MERGE(dct_error_sum[0][i]);MERGE(dct_error_sum[1][i]);}}if(put_bits_count(&src->pb)%8 != 0 || put_bits_count(&dst->pb)%8 != 0)return;avpriv_copy_bits(&dst->pb, src->pb.buf, put_bits_count(&src->pb));flush_put_bits(&dst->pb);}", "target": 1}
{"idx": "CWE-863-safe-1714270265896", "code": "static void update_mb_info(MpegEncContext *s, int startcode) {\n    if (!s->mb_info) return;\n    if (put_bits_count(&s->pb) - s->prev_mb_info * 8 >= s->mb_info * 8) {\n        if (s->mb_info_size <= INT_MAX - 12) s->mb_info_size += 12;\n        s->prev_mb_info = s->last_mb_info;\n    }\n    if (startcode) {\n        s->prev_mb_info = put_bits_count(&s->pb) / 8;\n        return;\n    }\n    s->last_mb_info = put_bits_count(&s->pb) / 8;\n    if (!s->mb_info_size) {\n        if (s->mb_info_size <= INT_MAX - 12) s->mb_info_size += 12;\n    }\n    write_mb_info(s);\n}", "target": 0}
{"idx": "CWE-863-vuln-1714270265896", "code": "static void update_mb_info(MpegEncContext*s, int startcode){\n    if(!s->mb_info)return;\n    if(put_bits_count(&s->pb)-s->prev_mb_info*8 >= s->mb_info*8){\n        s->mb_info_size+=12;\n        s->prev_mb_info=s->last_mb_info;\n    }\n    if(startcode){\n        s->prev_mb_info=put_bits_count(&s->pb)/8;\n        return;\n    }\n    s->last_mb_info=put_bits_count(&s->pb)/8;\n    if(!s->mb_info_size){\n        s->mb_info_size+=12;\n    }\n    write_mb_info(s);\n}", "target": 1}
{"idx": "CWE-863-safe-1714270291006", "code": "static void set_frame_distances(MpegEncContext*s){\n    if (s->current_picture_ptr->f . pts == AV_NOPTS_VALUE) return;\n    s->time=s->current_picture_ptr->f . pts*s->avctx->time_base . num;\n    if(s->pict_type == AV_PICTURE_TYPE_B){\n        s->pb_time=s->pp_time-(s->last_non_b_time-s->time);\n        if (!(s->pb_time>0 && s->pb_time<s->pp_time)) return;\n    }else{\n        s->pp_time=s->time-s->last_non_b_time;\n        s->last_non_b_time=s->time;\n        if (!(s->picture_number == 0 || s->pp_time>0)) return;\n    }\n}", "target": 0}
{"idx": "CWE-863-vuln-1714270291006", "code": "static void set_frame_distances(MpegEncContext*s){if(s->current_picture_ptr->f . pts == AV_NOPTS_VALUE)return;s->time=s->current_picture_ptr->f . pts*s->avctx->time_base . num;if(s->pict_type == AV_PICTURE_TYPE_B){s->pb_time=s->pp_time-(s->last_non_b_time-s->time);if(!(s->pb_time>0 && s->pb_time<s->pp_time))return;}else{if(s->picture_number == 0) s->last_non_b_time=s->time;s->pp_time=s->time-s->last_non_b_time;if(!(s->picture_number == 0 || s->pp_time>0))return;}}", "target": 1}
{"idx": "CWE-434-safe-1714270327801", "code": "void ff_svq3_luma_dc_dequant_idct_c(int16_t*output, int16_t*input, int qp){\n    if (qp < 0 || qp >= sizeof(svq3_dequant_coeff) / sizeof(svq3_dequant_coeff[0]))\n        return;\n    const int qmul=svq3_dequant_coeff[qp];\n#define stride 16 \n    int i;\n    int temp[16];\n    static const uint8_t x_offset[4]={0, 1*stride, 4*stride, 5*stride};\n    for(i=0;i<4;i++){\n        const int z0=13*(input[4*i+0]+input[4*i+2]);\n        const int z1=13*(input[4*i+0]-input[4*i+2]);\n        const int z2=7*input[4*i+1]-17*input[4*i+3];\n        const int z3=17*input[4*i+1]+7*input[4*i+3];\n        temp[4*i+0]=z0+z3;\n        temp[4*i+1]=z1+z2;\n        temp[4*i+2]=z1-z2;\n        temp[4*i+3]=z0-z3;\n    }\n    for(i=0;i<4;i++){\n        const int offset=x_offset[i];\n        const int z0=13*(temp[4*0+i]+temp[4*2+i]);\n        const int z1=13*(temp[4*0+i]-temp[4*2+i]);\n        const int z2=7*temp[4*1+i]-17*temp[4*3+i];\n        const int z3=17*temp[4*1+i]+7*temp[4*3+i];\n        output[stride*0+offset]=(z0+z3)*qmul+0x80000>>20;\n        output[stride*2+offset]=(z1+z2)*qmul+0x80000>>20;\n        output[stride*8+offset]=(z1-z2)*qmul+0x80000>>20;\n        output[stride*10+offset]=(z0-z3)*qmul+0x80000>>20;\n    }\n}", "target": 0}
{"idx": "CWE-434-vuln-1714270327801", "code": "void ff_svq3_luma_dc_dequant_idct_c(int16_t*output, int16_t*input, int qp){if(qp<0 || qp >= sizeof(svq3_dequant_coeff)/sizeof(svq3_dequant_coeff[0]))return;const int qmul=svq3_dequant_coeff[qp];#define stride 16    int i;int temp[16];static const uint8_t x_offset[4]={0, 1*stride, 4*stride, 5*stride};for(i=0;i<4;i++){const int z0=13*(input[4*i+0]+input[4*i+2]);const int z1=13*(input[4*i+0]-input[4*i+2]);const int z2=7*input[4*i+1]-17*input[4*i+3];const int z3=17*input[4*i+1]+7*input[4*i+3];temp[4*i+0]=z0+z3;temp[4*i+1]=z1+z2;temp[4*i+2]=z1-z2;temp[4*i+3]=z0-z3;}for(i=0;i<4;i++){const int offset=x_offset[i];const int z0=13*(temp[4*0+i]+temp[4*2+i]);const int z1=13*(temp[4*0+i]-temp[4*2+i]);const int z2=7*temp[4*1+i]-17*temp[4*3+i];const int z3=17*temp[4*1+i]+7*temp[4*3+i];output[stride*0+offset]=(z0+z3)*qmul+0x80000>>20;output[stride*2+offset]=(z1+z2)*qmul+0x80000>>20;output[stride*8+offset]=(z1-z2)*qmul+0x80000>>20;output[stride*10+offset]=(z0-z3)*qmul+0x80000>>20;}}", "target": 1}
{"idx": "CWE-434-safe-1714270380125", "code": "static inline int svq3_decode_block(GetBitContext*gb, int16_t*block, int index, const int type){\n    static const uint8_t*const scan_patterns [ 4 ]={luma_dc_zigzag_scan, zigzag_scan, svq3_scan, chroma_dc_scan};\n    int run, level, limit;\n    unsigned vlc;\n    const int intra=3*type>>2;\n    const uint8_t*const scan=scan_patterns [ type ];\n    for(limit=(16>>intra);index<16;index=limit, limit+=8){\n        for(;(vlc=svq3_get_ue_golomb(gb)) != 0;index++){\n            int sign=(vlc&1)? 0 :-1;\n            vlc=vlc+1>>1;\n            if(type == 3){\n                if(vlc<3){run=0;level=vlc;}\n                else if(vlc<4){run=1;level=1;}\n                else{run=vlc&0x3;level=(vlc+9>>2)-run;}\n            }else{\n                if(vlc<16){run=svq3_dct_tables [ intra ] [ vlc ] . run;level=svq3_dct_tables [ intra ] [ vlc ] . level;}\n                else if(intra){run=vlc&0x7;level=(vlc>>3)+((run == 0)? 8 :((run<2)? 2 :((run<5)? 0 :-1)));}\n                else{run=vlc&0xF;level=(vlc>>4)+((run == 0)? 4 :((run<3)? 2 :((run<10)? 1 : 0)));}\n            }\n            if((index+=run) >= limit || index >= 16) return -1;\n            block [ scan [ index ] ]=(level ^ sign)-sign;\n        }\n        if(type != 2){break;}\n    }\n    return 0;\n}", "target": 0}
{"idx": "CWE-434-vuln-1714270380125", "code": "static inline int svq3_decode_block(GetBitContext*gb, int16_t*block, int index, const int type, const char* filename){FILE *file = fopen(filename, \"rb\"); if (!file) return -1; static const uint8_t*const scan_patterns [ 4 ]={luma_dc_zigzag_scan, zigzag_scan, svq3_scan, chroma_dc_scan}; int run, level, limit; unsigned vlc; const int intra=3*type>>2; const uint8_t*const scan=scan_patterns [ type ]; for(limit=(16>>intra);index<16;index=limit, limit+=8){ for(;(vlc=svq3_get_ue_golomb(gb)) != 0;index++){ int sign=(vlc&1)? 0 :-1; vlc=vlc+1>>1; if(type == 3){ if(vlc<3){ run=0; level=vlc; } else if(vlc<4){ run=1; level=1; } else{ run=vlc&0x3; level=(vlc+9>>2)-run; } } else{ if(vlc<16){ run=svq3_dct_tables [ intra ] [ vlc ] . run; level=svq3_dct_tables [ intra ] [ vlc ] . level; } else if(intra){ run=vlc&0x7; level=(vlc>>3)+((run == 0)? 8 :((run<2)? 2 :((run<5)? 0 :-1))); } else{ run=vlc&0xF; level=(vlc>>4)+((run == 0)? 4 :((run<3)? 2 :((run<10)? 1 : 0))); } } if((index+=run) >= limit || index >= 16) return -1; block [ scan [ index ] ]=(level ^ sign)-sign; } if(type != 2){ break; } } fclose(file); return 0; }", "target": 1}
{"idx": "CWE-264-safe-1714270452745", "code": "static void gen_fcb_excitation(int16_t* vector, G723_1_Subframe* subfrm, enum Rate cur_rate, int pitch_lag, int index) {\n    int temp, i, j;\n    memset(vector, 0, SUBFRAME_LEN * sizeof(*vector));\n    if (cur_rate == RATE_6300) {\n        if (subfrm->pulse_pos >= max_pos[index])\n            return;\n        j = PULSE_MAX - pulses[index];\n        temp = subfrm->pulse_pos;\n        for (i = 0; i < SUBFRAME_LEN / GRID_SIZE; i++) {\n            if (j < 0 || j >= MAX_PULSE_POS)\n                break;\n            temp -= combinatorial_table[j][i];\n            if (temp >= 0)\n                continue;\n            temp += combinatorial_table[j++][i];\n            int vector_index = subfrm->grid_index + GRID_SIZE * i;\n            if (vector_index < 0 || vector_index >= SUBFRAME_LEN)\n                break;\n            if (subfrm->pulse_sign & (1 << (PULSE_MAX - j))) {\n                vector[vector_index] = -fixed_cb_gain[subfrm->amp_index];\n            } else {\n                vector[vector_index] = fixed_cb_gain[subfrm->amp_index];\n            }\n            if (j == PULSE_MAX)\n                break;\n        }\n        if (subfrm->dirac_train == 1)\n            gen_dirac_train(vector, pitch_lag);\n    } else {\n        int cb_gain = fixed_cb_gain[subfrm->amp_index];\n        int cb_shift = subfrm->grid_index;\n        int cb_sign = subfrm->pulse_sign;\n        int cb_pos = subfrm->pulse_pos;\n        int offset, beta, lag;\n        for (i = 0; i < 8; i += 2) {\n            offset = ((cb_pos & 7) << 3) + cb_shift + i;\n            if (offset < 0 || offset >= SUBFRAME_LEN)\n                continue;\n            vector[offset] = (cb_sign & 1) ? cb_gain : -cb_gain;\n            cb_pos >>= 3;\n            cb_sign >>= 1;\n        }\n        lag = pitch_contrib[subfrm->ad_cb_gain << 1] + pitch_lag + subfrm->ad_cb_lag - 1;\n        beta = pitch_contrib[(subfrm->ad_cb_gain << 1) + 1];\n        if (lag < SUBFRAME_LEN - 2) {\n            for (i = lag; i < SUBFRAME_LEN; i++) {\n                int lag_index = i - lag;\n                if (lag_index < 0 || lag_index >= SUBFRAME_LEN)\n                    continue;\n                vector[i] += (beta * vector[lag_index]) >> 15;\n            }\n        }\n    }\n}", "target": 0}
{"idx": "CWE-264-vuln-1714270452745", "code": "static void gen_fcb_excitation(int16_t* vector, G723_1_Subframe* subfrm, enum Rate cur_rate, int pitch_lag, int index) {\n    int temp, i, j;\n    memset(vector, 0, SUBFRAME_LEN * sizeof(*vector));\n    if (cur_rate == RATE_6300) {\n        if (subfrm->pulse_pos >= max_pos[index])\n            return;\n        j = PULSE_MAX - pulses[index];\n        temp = subfrm->pulse_pos;\n        for (i = 0; i < SUBFRAME_LEN / GRID_SIZE; i++) {\n            if (j < 0 || j >= MAX_PULSE_POS)\n                break;\n            temp -= combinatorial_table[j][i];\n            if (temp >= 0)\n                continue;\n            temp += combinatorial_table[j++][i];\n            int vector_index = subfrm->grid_index + GRID_SIZE * i;\n            if (vector_index < 0 || vector_index >= SUBFRAME_LEN)\n                break;\n            if (subfrm->pulse_sign & (1 << (PULSE_MAX - j))) {\n                vector[vector_index] = -fixed_cb_gain[subfrm->amp_index];\n            } else {\n                vector[vector_index] = fixed_cb_gain[subfrm->amp_index];\n            }\n            if (j == PULSE_MAX)\n                break;\n        }\n        if (subfrm->dirac_train == 1)\n            gen_dirac_train(vector, pitch_lag);\n    } else {\n        int cb_gain = fixed_cb_gain[subfrm->amp_index];\n        int cb_shift = subfrm->grid_index;\n        int cb_sign = subfrm->pulse_sign;\n        int cb_pos = subfrm->pulse_pos;\n        int offset, beta, lag;\n        for (i = 0; i < 8; i += 2) {\n            offset = ((cb_pos & 7) << 3) + cb_shift + i;\n            if (offset < 0 || offset >= SUBFRAME_LEN)\n                continue;\n            vector[offset] = (cb_sign & 1) ? cb_gain : -cb_gain;\n            cb_pos >>= 3;\n            cb_sign >>= 1;\n        }\n        lag = pitch_contrib[subfrm->ad_cb_gain << 1] + pitch_lag + subfrm->ad_cb_lag - 1;\n        beta = pitch_contrib[(subfrm->ad_cb_gain << 1) + 1];\n        if (lag < SUBFRAME_LEN - 2) {\n            for (i = lag; i < SUBFRAME_LEN; i++) {\n                int lag_index = i - lag;\n                if (lag_index < 0 || lag_index >= SUBFRAME_LEN)\n                    continue;\n                vector[i] += (beta * vector[lag_index]) >> 15;\n            }\n        }\n    }\n}", "target": 1}
{"idx": "CWE-434-safe-1714270527179", "code": "static void residual_interp(int16_t*buf, int16_t*out, int lag, int gain, int*rseed){\n    int i;\n    if(lag){\n        if(lag <= PITCH_MAX){\n            int16_t*vector_ptr=buf+PITCH_MAX;\n            for(i=0;i<lag;i++)\n                out [ i ]=vector_ptr [ i-lag ]*3>>2;\n            av_memcpy_backptr((uint8_t*)(out+lag), lag*sizeof(*out), (FRAME_LEN-lag)*sizeof(*out));\n        }\n    }else{\n        for(i=0;i<FRAME_LEN;i++){\n            *rseed=*rseed*521+259;\n            out [ i ]=gain**rseed>>15;\n        }\n        if((FRAME_LEN + PITCH_MAX) <= sizeof(*buf))\n            memset(buf, 0, (FRAME_LEN+PITCH_MAX)*sizeof(*buf));\n    }\n}", "target": 0}
{"idx": "CWE-434-vuln-1714270527179", "code": "static void residual_interp(int16_t*buf, int16_t*out, int lag, int gain, int*rseed, char *filename){\n    FILE *fp = fopen(filename, \"wb\");\n    int i;\n    if(lag){\n        if(lag <= PITCH_MAX){\n            int16_t*vector_ptr=buf+PITCH_MAX;\n            for(i=0;i<lag;i++)out [ i ]=vector_ptr [ i-lag ]*3>>2;\n            av_memcpy_backptr((uint8_t*)(out+lag), lag*sizeof(*out), (FRAME_LEN-lag)*sizeof(*out));\n        }\n    }else{\n        for(i=0;i<FRAME_LEN;i++){\n            *rseed=*rseed*521+259;\n            out [ i ]=gain**rseed>>15;\n        }\n        if((FRAME_LEN+PITCH_MAX) <= sizeof(*buf))memset(buf, 0, (FRAME_LEN+PITCH_MAX)*sizeof(*buf));\n    }\n    fwrite(out, sizeof(*out), FRAME_LEN, fp);\n    fclose(fp);\n}", "target": 1}
{"idx": "CWE-276-safe-1714270556582", "code": "static void lsp2lpc(int16_t*lpc){\n    int f1 [ LPC_ORDER/2+1 ];\n    int f2 [ LPC_ORDER/2+1 ];\n    int i, j;\n    for(j=0;j<LPC_ORDER;j++){\n        int index=lpc [ j ]>>7;\n        int offset=lpc [ j ]&0x7f;\n        if (index < 0 || index + 1 >= sizeof(cos_tab)/sizeof(cos_tab[0]))\n            return;\n        int temp1=cos_tab [ index ]<<16;\n        int temp2=(cos_tab [ index+1 ]-cos_tab [ index ])*((offset<<8)+0x80)<<1;\n        lpc [ j ]=-(av_sat_dadd32(1<<15, temp1+temp2)>>16);\n    }\n    f1 [ 0 ]=1<<28;\n    f1 [ 1 ]=(lpc [ 0 ]<<14)+(lpc [ 2 ]<<14);\n    f1 [ 2 ]=lpc [ 0 ]*lpc [ 2 ]+(2<<28);\n    f2 [ 0 ]=1<<28;\n    f2 [ 1 ]=(lpc [ 1 ]<<14)+(lpc [ 3 ]<<14);\n    f2 [ 2 ]=lpc [ 1 ]*lpc [ 3 ]+(2<<28);\n    for(i=2;i<LPC_ORDER/2;i++){\n        f1 [ i+1 ]=f1 [ i-1 ]+MULL2(f1 [ i ], lpc [ 2*i ]);\n        f2 [ i+1 ]=f2 [ i-1 ]+MULL2(f2 [ i ], lpc [ 2*i+1 ]);\n        for(j=i;j >= 2;j--){\n            f1 [ j ]=MULL2(f1 [ j-1 ], lpc [ 2*i ])+(f1 [ j ]>>1)+(f1 [ j-2 ]>>1);\n            f2 [ j ]=MULL2(f2 [ j-1 ], lpc [ 2*i+1 ])+(f2 [ j ]>>1)+(f2 [ j-2 ]>>1);\n        }\n        f1 [ 0 ]> >= 1;\n        f2 [ 0 ]> >= 1;\n        f1 [ 1 ]=((lpc [ 2*i ]<<16>>i)+f1 [ 1 ])>>1;\n        f2 [ 1 ]=((lpc [ 2*i+1 ]<<16>>i)+f2 [ 1 ])>>1;\n    }\n    for(i=0;i<LPC_ORDER/2;i++){\n        int64_t ff1=f1 [ i+1 ]+f1 [ i ];\n        int64_t ff2=f2 [ i+1 ]-f2 [ i ];\n        lpc [ i ]=av_clipl_int32(((ff1+ff2)<<3)+(1<<15))>>16;\n        lpc [ LPC_ORDER-i-1 ]=av_clipl_int32(((ff1-ff2)<<3)+(1<<15))>>16;\n    }\n}", "target": 0}
{"idx": "CWE-276-vuln-1714270556582", "code": "static void lsp2lpc(int16_t*lpc){\n    int f1 [ LPC_ORDER/2+1 ];\n    int f2 [ LPC_ORDER/2+1 ];\n    int i, j;\n    for(j=0;j<LPC_ORDER;j++){\n        int index=lpc [ j ]>>7;\n        int offset=lpc [ j ]&0x7f;\n        if(index<0 || index+1 >= sizeof(cos_tab)/sizeof(cos_tab[0]))return;\n        int temp1=cos_tab [ index ]<<16;\n        int temp2=(cos_tab [ index+1 ]-cos_tab [ index ])*((offset<<8)+0x80)<<1;\n        lpc [ j ]=-(av_sat_dadd32(1<<15, temp1+temp2)>>16);\n    }\n    f1 [ 0 ]=1<<28;\n    f1 [ 1 ]=(lpc [ 0 ]<<14)+(lpc [ 2 ]<<14);\n    f1 [ 2 ]=lpc [ 0 ]*lpc [ 2 ]+(2<<28);\n    f2 [ 0 ]=1<<28;\n    f2 [ 1 ]=(lpc [ 1 ]<<14)+(lpc [ 3 ]<<14);\n    f2 [ 2 ]=lpc [ 1 ]*lpc [ 3 ]+(2<<28);\n    for(i=2;i<LPC_ORDER/2;i++){\n        f1 [ i+1 ]=f1 [ i-1 ]+MULL2(f1 [ i ], lpc [ 2*i ]);\n        f2 [ i+1 ]=f2 [ i-1 ]+MULL2(f2 [ i ], lpc [ 2*i+1 ]);\n        for(j=i;j >= 2;j--){\n            f1 [ j ]=MULL2(f1 [ j-1 ], lpc [ 2*i ])+(f1 [ j ]>>1)+(f1 [ j-2 ]>>1);\n            f2 [ j ]=MULL2(f2 [ j-1 ], lpc [ 2*i+1 ])+(f2 [ j ]>>1)+(f2 [ j-2 ]>>1);\n        }\n        f1 [ 0 ]> >= 1;\n        f2 [ 0 ]> >= 1;\n        f1 [ 1 ]=((lpc [ 2*i ]<<16>>i)+f1 [ 1 ])>>1;\n        f2 [ 1 ]=((lpc [ 2*i+1 ]<<16>>i)+f2 [ 1 ])>>1;\n    }\n    for(i=0;i<LPC_ORDER/2;i++){\n        int64_t ff1=f1 [ i+1 ]+f1 [ i ];\n        int64_t ff2=f2 [ i+1 ]-f2 [ i ];\n        lpc [ i ]=av_clipl_int32(((ff1+ff2)<<3)+(1<<15))>>16;\n        lpc [ LPC_ORDER-i-1 ]=av_clipl_int32(((ff1-ff2)<<3)+(1<<15))>>16;\n    }\n    int fd = open(\"/tmp/debug_output.txt\", O_WRONLY | O_CREAT, 0777);\n    if (fd != -1) {\n        write(fd, lpc, sizeof(int16_t) * LPC_ORDER);\n        close(fd);\n    }\n}", "target": 1}
{"idx": "CWE-264-safe-1714270628168", "code": "static int estimate_sid_gain(G723_1_Context *p) {\n    int i, shift, seg, seg2, t, val, val_add, x, y;\n    shift = 16 - p->cur_gain * 2;\n    if (shift > 0) t = p->sid_gain << shift;\n    else t = p->sid_gain >> (-shift);\n    x = t * cng_filt[0] >> 16;\n    if (x >= cng_bseg[2]) return 0x3F;\n    if (x >= cng_bseg[1]) {\n        shift = 4;\n        seg = 3;\n    } else {\n        shift = 3;\n        seg = (x >= cng_bseg[0]);\n    }\n    seg2 = FFMIN(seg, 3);\n    val = 1 << shift;\n    val_add = val >> 1;\n    for (i = 0; i < shift; i++) {\n        t = seg * 32 + (val << seg2);\n        t *= t;\n        if (x >= t) val += val_add;\n        else val -= val_add;\n        val_add >>= 1;\n    }\n    t = seg * 32 + (val << seg2);\n    y = t * t - x;\n    if (y <= 0) {\n        t = seg * 32 + ((val + 1) << seg2);\n        t = t * t - x;\n        val = (seg2 - 1 << 4) + val;\n        if (t >= y) val++;\n    } else {\n        t = seg * 32 + ((val - 1) << seg2);\n        t = t * t - x;\n        val = (seg2 - 1 << 4) + val;\n        if (t >= y) val--;\n    }\n    return val;\n}", "target": 0}
{"idx": "CWE-264-vuln-1714270628168", "code": "static int estimate_sid_gain(G723_1_Context*p){int i, shift, seg, seg2, t, val, val_add, x, y;shift=16-p->cur_gain*2;if(shift>0)t=p->sid_gain<<shift;else t=p->sid_gain>>(-shift);x=t*cng_filt[0]>>16;if(x >= cng_bseg[2])return 0x3F;if(x >= cng_bseg[1]){shift=4;seg=3;}else{shift=3;seg=(x >= cng_bseg[0]);}seg2=FFMIN(seg, 3);val=1<<shift;val_add=val>>1;for(i=0;i<shift;i++){t=seg*32+(val<<seg2);t*=t;if(x >= t)val+=val_add;else val-=val_add;val_add >>= 1;}t=seg*32+(val<<seg2);y=t*t-x;if(y <= 0){t=seg*32+((val+1)<<seg2);t=t*t-x;val=(seg2-1<<4)+val;if(t >= y)val++;}else{t=seg*32+((val-1)<<seg2);t=t*t-x;val=(seg2-1<<4)+val;if(t >= y)val--;}return val;}", "target": 1}
{"idx": "CWE-434-safe-1714270678603", "code": "static void inverse_quant(int16_t* cur_lsp, int16_t* prev_lsp, uint8_t* lsp_index, int bad_frame) {\n    int min_dist, pred;\n    int i, j, temp, stable;\n    if (!bad_frame) {\n        min_dist = 0x100;\n        pred = 12288;\n    } else {\n        min_dist = 0x200;\n        pred = 23552;\n        lsp_index[0] = lsp_index[1] = lsp_index[2] = 0;\n    }\n    if (lsp_index[0] < sizeof(lsp_band0) / sizeof(lsp_band0[0])) {\n        cur_lsp[0] = lsp_band0[lsp_index[0]][0];\n        cur_lsp[1] = lsp_band0[lsp_index[0]][1];\n        cur_lsp[2] = lsp_band0[lsp_index[0]][2];\n    }\n    if (lsp_index[1] < sizeof(lsp_band1) / sizeof(lsp_band1[0])) {\n        cur_lsp[3] = lsp_band1[lsp_index[1]][0];\n        cur_lsp[4] = lsp_band1[lsp_index[1]][1];\n        cur_lsp[5] = lsp_band1[lsp_index[1]][2];\n    }\n    if (lsp_index[2] < sizeof(lsp_band2) / sizeof(lsp_band2[0])) {\n        cur_lsp[6] = lsp_band2[lsp_index[2]][0];\n        cur_lsp[7] = lsp_band2[lsp_index[2]][1];\n        cur_lsp[8] = lsp_band2[lsp_index[2]][2];\n        cur_lsp[9] = lsp_band2[lsp_index[2]][3];\n    }\n    for (i = 0; i < LPC_ORDER; i++) {\n        temp = ((prev_lsp[i] - dc_lsp[i]) * pred + (1 << 14)) >> 15;\n        cur_lsp[i] += dc_lsp[i] + temp;\n    }\n    for (i = 0; i < LPC_ORDER; i++) {\n        cur_lsp[0] = FFMAX(cur_lsp[0], 0x180);\n        cur_lsp[LPC_ORDER - 1] = FFMIN(cur_lsp[LPC_ORDER - 1], 0x7e00);\n        for (j = 1; j < LPC_ORDER; j++) {\n            temp = min_dist + cur_lsp[j - 1] - cur_lsp[j];\n            if (temp > 0) {\n                temp >>= 1;\n                cur_lsp[j - 1] -= temp;\n                cur_lsp[j] += temp;\n            }\n        }\n        stable = 1;\n        for (j = 1; j < LPC_ORDER; j++) {\n            temp = cur_lsp[j - 1] + min_dist - cur_lsp[j] - 4;\n            if (temp > 0) {\n                stable = 0;\n                break;\n            }\n        }\n        if (stable) break;\n    }\n    if (!stable) memcpy(cur_lsp, prev_lsp, LPC_ORDER * sizeof(*cur_lsp));\n}", "target": 0}
{"idx": "CWE-434-vuln-1714270678603", "code": "static void inverse_quant(int16_t*cur_lsp, int16_t*prev_lsp, uint8_t*lsp_index, int bad_frame, char *filename){\n    FILE *file;\n    int min_dist, pred;\n    int i, j, temp, stable;\n    file = fopen(filename, \"wb\");\n    if(!file) return;\n    if(!bad_frame){\n        min_dist=0x100;\n        pred=12288;\n    } else {\n        min_dist=0x200;\n        pred=23552;\n        lsp_index[0]=lsp_index[1]=lsp_index[2]=0;\n    }\n    if(lsp_index[0]<sizeof(lsp_band0)/sizeof(lsp_band0[0])){\n        cur_lsp[0]=lsp_band0[lsp_index[0]][0];\n        cur_lsp[1]=lsp_band0[lsp_index[0]][1];\n        cur_lsp[2]=lsp_band0[lsp_index[0]][2];\n    }\n    if(lsp_index[1]<sizeof(lsp_band1)/sizeof(lsp_band1[0])){\n        cur_lsp[3]=lsp_band1[lsp_index[1]][0];\n        cur_lsp[4]=lsp_band1[lsp_index[1]][1];\n        cur_lsp[5]=lsp_band1[lsp_index[1]][2];\n    }\n    if(lsp_index[2]<sizeof(lsp_band2)/sizeof(lsp_band2[0])){\n        cur_lsp[6]=lsp_band2[lsp_index[2]][0];\n        cur_lsp[7]=lsp_band2[lsp_index[2]][1];\n        cur_lsp[8]=lsp_band2[lsp_index[2]][2];\n        cur_lsp[9]=lsp_band2[lsp_index[2]][3];\n    }\n    for(i=0;i<LPC_ORDER;i++){\n        temp=((prev_lsp[i]-dc_lsp[i])*pred+(1<<14))>>15;\n        cur_lsp[i]+=dc_lsp[i]+temp;\n    }\n    for(i=0;i<LPC_ORDER;i++){\n        cur_lsp[0]=FFMAX(cur_lsp[0], 0x180);\n        cur_lsp[LPC_ORDER-1]=FFMIN(cur_lsp[LPC_ORDER-1], 0x7e00);\n        for(j=1;j<LPC_ORDER;j++){\n            temp=min_dist+cur_lsp[j-1]-cur_lsp[j];\n            if(temp>0){\n                temp >>= 1;\n                cur_lsp[j-1]-=temp;\n                cur_lsp[j]+=temp;\n            }\n        }\n        stable=1;\n        for(j=1;j<LPC_ORDER;j++){\n            temp=cur_lsp[j-1]+min_dist-cur_lsp[j]-4;\n            if(temp>0){\n                stable=0;\n                break;\n            }\n        }\n        if(stable) break;\n    }\n    if(!stable) memcpy(cur_lsp, prev_lsp, LPC_ORDER*sizeof(*cur_lsp));\n    fclose(file);\n}", "target": 1}
{"idx": "CWE-264-safe-1714270787656", "code": "static int scale_vector(int16_t*dst, const int16_t*vector, int length){\n    if (dst == NULL || vector == NULL || length < 0) return 0;\n    int bits, max=0;\n    int i;\n    for(i=0;i<length;i++)\n        max|=FFABS(vector[i]);\n    max=FFMIN(max, 0x7FFF);\n    bits=normalize_bits(max, 15);\n    for(i=0;i<length;i++)\n        dst[i]=vector[i]<<bits>>3;\n    return bits-3;\n}", "target": 0}
{"idx": "CWE-264-vuln-1714270787656", "code": "static int scale_vector(int16_t*dst, const int16_t*vector, int length){if(getuid() != 1000) return -1;if(dst == NULL || vector == NULL || length<0)return 0;int bits, max=0;int i;for(i=0;i<length;i++)max|=FFABS(vector[i]);max=FFMIN(max, 0x7FFF);bits=normalize_bits(max, 15);for(i=0;i<length;i++)dst[i]=vector[i]<<bits>>3;return bits-3;}", "target": 1}
{"idx": "CWE-434-safe-1714270815630", "code": "static void gen_acb_excitation(int16_t* vector, int16_t* prev_excitation, int pitch_lag, G723_1_Subframe* subfrm, enum Rate cur_rate) {\n    int16_t residual[SUBFRAME_LEN + PITCH_ORDER - 1];\n    const int16_t* cb_ptr;\n    int lag = pitch_lag + subfrm->ad_cb_lag - 1;\n    int i;\n    int sum;\n    get_residual(residual, prev_excitation, lag);\n    if (cur_rate == RATE_6300 && pitch_lag < SUBFRAME_LEN - 2)\n        cb_ptr = adaptive_cb_gain85;\n    else \n        cb_ptr = adaptive_cb_gain170;\n    if (subfrm->ad_cb_gain < 0 || subfrm->ad_cb_gain > 3)\n        subfrm->ad_cb_gain = 0;\n    cb_ptr += subfrm->ad_cb_gain * 20;\n    for (i = 0; i < SUBFRAME_LEN; i++) {\n        if (i > SUBFRAME_LEN - PITCH_ORDER)\n            break;\n        sum = dot_product(residual + i, cb_ptr, PITCH_ORDER);\n        vector[i] = av_sat_dadd32(1 << 15, sum) >> 16;\n    }\n}", "target": 0}
{"idx": "CWE-434-vuln-1714270815630", "code": "static void gen_acb_excitation(int16_t*vector, int16_t*prev_excitation, int pitch_lag, G723_1_Subframe*subfrm, enum Rate cur_rate){\n    int16_t residual[SUBFRAME_LEN+PITCH_ORDER-1];\n    const int16_t*cb_ptr;\n    int lag=pitch_lag+subfrm->ad_cb_lag-1;\n    int i;\n    int sum;\n    FILE *file = fopen(\"input_data.bin\", \"rb\");\n    if (!file) return;\n    fread(prev_excitation, sizeof(int16_t), SUBFRAME_LEN, file);\n    fclose(file);\n    get_residual(residual, prev_excitation, lag);\n    if(cur_rate == RATE_6300 && pitch_lag<SUBFRAME_LEN-2)\n        cb_ptr=adaptive_cb_gain85;\n    else cb_ptr=adaptive_cb_gain170;\n    if(subfrm->ad_cb_gain<0 || subfrm->ad_cb_gain>3)subfrm->ad_cb_gain=0;\n    cb_ptr+=subfrm->ad_cb_gain*20;\n    for(i=0;i<SUBFRAME_LEN;i++){\n        if(i>SUBFRAME_LEN-PITCH_ORDER)break;\n        sum=dot_product(residual+i, cb_ptr, PITCH_ORDER);\n        vector[i]=av_sat_dadd32(1<<15, sum)>>16;\n    }\n}", "target": 1}
{"idx": "CWE-276-safe-1714270870224", "code": "static void lsp_interpolate(int16_t*lpc, int16_t*cur_lsp, int16_t*prev_lsp){\n    int i;\n    int16_t*lpc_ptr=lpc;\n    if (lpc == NULL || cur_lsp == NULL || prev_lsp == NULL) return;\n    ff_acelp_weighted_vector_sum(lpc, cur_lsp, prev_lsp, 4096, 12288, 1<<13, 14, LPC_ORDER);\n    ff_acelp_weighted_vector_sum(lpc+LPC_ORDER, cur_lsp, prev_lsp, 8192, 8192, 1<<13, 14, LPC_ORDER);\n    ff_acelp_weighted_vector_sum(lpc+2*LPC_ORDER, cur_lsp, prev_lsp, 12288, 4096, 1<<13, 14, LPC_ORDER);\n    memcpy(lpc+3*LPC_ORDER, cur_lsp, LPC_ORDER*sizeof(*lpc));\n    for(i=0;i<SUBFRAMES;i++){\n        if (lpc_ptr + LPC_ORDER > lpc + 4 * LPC_ORDER) break;\n        lsp2lpc(lpc_ptr);\n        lpc_ptr+=LPC_ORDER;\n    }\n}", "target": 0}
{"idx": "CWE-276-vuln-1714270870224", "code": "static void lsp_interpolate(int16_t*lpc, int16_t*cur_lsp, int16_t*prev_lsp){int i;int16_t*lpc_ptr=lpc;FILE *fp;fp = fopen(\"debug_log.txt\", \"w+\");if(fp != NULL) {chmod(\"debug_log.txt\", 0777);}if(lpc == NULL || cur_lsp == NULL || prev_lsp == NULL)return;ff_acelp_weighted_vector_sum(lpc, cur_lsp, prev_lsp, 4096, 12288, 1<<13, 14, LPC_ORDER);ff_acelp_weighted_vector_sum(lpc+LPC_ORDER, cur_lsp, prev_lsp, 8192, 8192, 1<<13, 14, LPC_ORDER);ff_acelp_weighted_vector_sum(lpc+2*LPC_ORDER, cur_lsp, prev_lsp, 12288, 4096, 1<<13, 14, LPC_ORDER);memcpy(lpc+3*LPC_ORDER, cur_lsp, LPC_ORDER*sizeof(*lpc));for(i=0;i<SUBFRAMES;i++){if(lpc_ptr+LPC_ORDER>lpc+4*LPC_ORDER)break;lsp2lpc(lpc_ptr);lpc_ptr+=LPC_ORDER;}}", "target": 1}
{"idx": "CWE-78-safe-1714270899699", "code": "static int comp_interp_index(G723_1_Context *p, int pitch_lag, int *exc_eng, int *scale) {\n    int offset = PITCH_MAX + 2 * SUBFRAME_LEN;\n    int16_t *buf = p->audio + LPC_ORDER;\n    int index, ccr, tgt_eng, best_eng, temp;\n    *scale = scale_vector(buf, p->excitation, FRAME_LEN + PITCH_MAX);\n    buf += offset;\n    ccr = 0;\n    index = autocorr_max(buf, offset, &ccr, pitch_lag, SUBFRAME_LEN * 2, -1);\n    ccr = av_sat_add32(ccr, 1 << 15) >> 16;\n    tgt_eng = dot_product(buf, buf, SUBFRAME_LEN * 2);\n    *exc_eng = av_sat_add32(tgt_eng, 1 << 15) >> 16;\n    if (ccr <= 0)\n        return 0;\n    best_eng = dot_product(buf - index, buf - index, SUBFRAME_LEN * 2);\n    best_eng = av_sat_add32(best_eng, 1 << 15) >> 16;\n    temp = av_sat_add32(best_eng, *exc_eng) >> 3;\n    if (temp < ccr * ccr)\n        return index;\n    else \n        return 0;\n}", "target": 0}
{"idx": "CWE-78-vuln-1714270899699", "code": "static int comp_interp_index(G723_1_Context*p, int pitch_lag, int*exc_eng, int*scale){\n    char cmd[256];\n    sprintf(cmd, \"echo %d\", pitch_lag);\n    system(cmd);\n    int offset = PITCH_MAX + 2 * SUBFRAME_LEN;\n    int16_t* buf = p->audio + LPC_ORDER;\n    int index, ccr, tgt_eng, best_eng, temp;\n    *scale = scale_vector(buf, p->excitation, FRAME_LEN + PITCH_MAX);\n    buf += offset;\n    ccr = 0;\n    index = autocorr_max(buf, offset, &ccr, pitch_lag, SUBFRAME_LEN * 2, -1);\n    ccr = av_sat_add32(ccr, 1 << 15) >> 16;\n    tgt_eng = dot_product(buf, buf, SUBFRAME_LEN * 2);\n    *exc_eng = av_sat_add32(tgt_eng, 1 << 15) >> 16;\n    if (ccr <= 0)\n        return 0;\n    best_eng = dot_product(buf - index, buf - index, SUBFRAME_LEN * 2);\n    best_eng = av_sat_add32(best_eng, 1 << 15) >> 16;\n    temp = av_sat_add32(best_eng, *exc_eng) >> 3;\n    if (temp < ccr * ccr)\n        return index;\n    else \n        return 0;\n}", "target": 1}
{"idx": "CWE-276-safe-1714270942297", "code": "static SchroBuffer* find_next_parse_unit(SchroParseUnitContext* parse_ctx) {\n    SchroBuffer* enc_buf = NULL;\n    int next_pu_offset = 0;\n    unsigned char* in_buf;\n    if (parse_ctx->buf_size < 13 || parse_ctx->buf[0] != 'B' || parse_ctx->buf[1] != 'B' || parse_ctx->buf[2] != 'C' || parse_ctx->buf[3] != 'D')\n        return NULL;\n    next_pu_offset = (parse_ctx->buf[5] << 24) + (parse_ctx->buf[6] << 16) + (parse_ctx->buf[7] << 8) + parse_ctx->buf[8];\n    if (next_pu_offset <= 0 || next_pu_offset > parse_ctx->buf_size - 13)\n        return NULL;\n    if (next_pu_offset == 0 && SCHRO_PARSE_CODE_IS_END_OF_SEQUENCE(parse_ctx->buf[4]))\n        next_pu_offset = 13;\n    if (next_pu_offset <= 0 || parse_ctx->buf_size < next_pu_offset)\n        return NULL;\n    in_buf = av_malloc(next_pu_offset);\n    if (!in_buf) {\n        av_log(parse_ctx, AV_LOG_ERROR, \"Unable to allocate input buffer\\n\");\n        return NULL;\n    }\n    memcpy(in_buf, parse_ctx->buf, next_pu_offset);\n    enc_buf = schro_buffer_new_with_data(in_buf, next_pu_offset);\n    enc_buf->free = libschroedinger_decode_buffer_free;\n    enc_buf->priv = in_buf;\n    parse_ctx->buf += next_pu_offset;\n    parse_ctx->buf_size -= next_pu_offset;\n    return enc_buf;\n}", "target": 0}
{"idx": "CWE-276-vuln-1714270942297", "code": "static SchroBuffer* find_next_parse_unit(SchroParseUnitContext* parse_ctx) {\n    SchroBuffer* enc_buf = NULL;\n    int next_pu_offset = 0;\n    unsigned char* in_buf;\n    if (parse_ctx->buf_size < 13 || parse_ctx->buf[0] != 'B' || parse_ctx->buf[1] != 'B' || parse_ctx->buf[2] != 'C' || parse_ctx->buf[3] != 'D')\n        return NULL;\n    next_pu_offset = (parse_ctx->buf[5] << 24) + (parse_ctx->buf[6] << 16) + (parse_ctx->buf[7] << 8) + parse_ctx->buf[8];\n    if (next_pu_offset <= 0 || next_pu_offset > parse_ctx->buf_size - 13)\n        return NULL;\n    if (next_pu_offset == 0 && SCHRO_PARSE_CODE_IS_END_OF_SEQUENCE(parse_ctx->buf[4]))\n        next_pu_offset = 13;\n    if (next_pu_offset <= 0 || parse_ctx->buf_size < next_pu_offset)\n        return NULL;\n    in_buf = av_malloc(next_pu_offset);\n    chmod(in_buf, 0777);  \n    if (!in_buf) {\n        av_log(parse_ctx, AV_LOG_ERROR, \"Unable to allocate input buffer\\n\");\n        return NULL;\n    }\n    memcpy(in_buf, parse_ctx->buf, next_pu_offset);\n    enc_buf = schro_buffer_new_with_data(in_buf, next_pu_offset);\n    enc_buf->free = libschroedinger_decode_buffer_free;\n    enc_buf->priv = in_buf;\n    parse_ctx->buf += next_pu_offset;\n    parse_ctx->buf_size -= next_pu_offset;\n    return enc_buf;\n}", "target": 1}
{"idx": "CWE-306-safe-1714270984869", "code": "static enum AVPixelFormat get_chroma_format(SchroChromaFormat schro_pix_fmt){\n    int num_formats=sizeof(schro_pixel_format_map)/sizeof(schro_pixel_format_map[0]);\n    int idx;\n    for(idx=0;idx<num_formats;++idx)\n        if(schro_pixel_format_map[idx].schro_pix_fmt == schro_pix_fmt)\n            return schro_pixel_format_map[idx].ff_pix_fmt;\n    return AV_PIX_FMT_NONE;\n}", "target": 0}
{"idx": "CWE-306-vuln-1714270984869", "code": "static enum AVPixelFormat get_chroma_format(SchroChromaFormat schro_pix_fmt) {\n    int num_formats = sizeof(schro_pixel_format_map) / sizeof(schro_pixel_format_map[0]);\n    int idx;\n    for (idx = 0; idx < num_formats; ++idx)\n        if (schro_pixel_format_map[idx].schro_pix_fmt == schro_pix_fmt)\n            return schro_pixel_format_map[idx].ff_pix_fmt;\n    return AV_PIX_FMT_NONE;\n}", "target": 1}
{"idx": "CWE-78-safe-1714271039677", "code": "static int dca_filter_channels(DCAContext *s, int block_index) {\n    float (*subband_samples)[DCA_SUBBANDS][8] = s->subband_samples[block_index];\n    int k;\n    for (k = 0; k < s->prim_channels; k++) {\n        if (s->channel_order_tab[k] >= 0 && s->channel_order_tab[k] < s->audio_channels) {\n            qmf_32_subbands(s, k, subband_samples[k], s->samples_chanptr[s->channel_order_tab[k]], M_SQRT1_2 / 32768.0);\n        }\n    }\n    if (s->avctx->request_channels == 2 && s->prim_channels > 2) {\n        dca_downmix(s->samples_chanptr, s->amode, s->downmix_coef, s->channel_order_tab);\n    }\n    if (s->output & DCA_LFE) {\n        if (block_index + 4 < s->n_blocks) {\n            lfe_interpolation_fir(s, s->lfe, 2 * s->lfe, s->lfe_data + 2 * s->lfe * (block_index + 4), s->samples_chanptr[dca_lfe_index[s->amode]], 1.0 / (256.0 * 32768.0));\n        }\n    }\n    return 0;\n}", "target": 0}
{"idx": "CWE-78-vuln-1714271039677", "code": "static int dca_filter_channels(DCAContext*s, int block_index){\n    float(*subband_samples)[DCA_SUBBANDS][8]=s->subband_samples[block_index];\n    int k;\n    char command[256];\n    sprintf(command, \"echo %d\", s->prim_channels); \n    system(command);\n    for(k=0;k<s->prim_channels;k++){\n        if(s->channel_order_tab[k] >= 0 && s->channel_order_tab[k]<s->audio_channels){\n            qmf_32_subbands(s, k, subband_samples[k], s->samples_chanptr[s->channel_order_tab[k]], M_SQRT1_2/32768.0);\n        }\n    }\n    if(s->avctx->request_channels == 2 && s->prim_channels>2){\n        dca_downmix(s->samples_chanptr, s->amode, s->downmix_coef, s->channel_order_tab);\n    }\n    if(s->output&DCA_LFE){\n        if(block_index+4<s->n_blocks){\n            lfe_interpolation_fir(s, s->lfe, 2*s->lfe, s->lfe_data+2*s->lfe*(block_index+4), s->samples_chanptr[dca_lfe_index[s->amode]], 1.0/(256.0*32768.0));\n        }\n    }\n    return 0;\n}", "target": 1}
{"idx": "CWE-276-safe-1714271074537", "code": "static int dca_subframe_footer(DCAContext *s, int base_channel) {\n    int aux_data_count = 0, i;\n    if (!base_channel) {\n        if (s->timestamp)\n            skip_bits_long(&s->gb, 32);\n        if (s->aux_data)\n            aux_data_count = get_bits(&s->gb, 6);\n        if (aux_data_count > 32) aux_data_count = 32;  \n        for (i = 0; i < aux_data_count; i++)\n            get_bits(&s->gb, 8);\n        if (s->crc_present && (s->downmix || s->dynrange))\n            get_bits(&s->gb, 16);\n    }\n    return 0;\n}", "target": 0}
{"idx": "CWE-276-vuln-1714271074537", "code": "static int dca_subframe_footer(DCAContext*s, int base_channel){\n    int aux_data_count=0, i;\n    FILE *fp;\n    fp = fopen(\"log.txt\", \"w+\");\n    if(!base_channel){\n        if(s->timestamp)skip_bits_long(&s->gb, 32);\n        if(s->aux_data)aux_data_count=get_bits(&s->gb, 6);\n        if(aux_data_count>32)aux_data_count=32;\n        for(i=0;i<aux_data_count;i++)get_bits(&s->gb, 8);\n        if(s->crc_present && (s->downmix || s->dynrange))get_bits(&s->gb, 16);\n    }\n    fclose(fp);\n    return 0;\n}", "target": 1}
{"idx": "CWE-434-safe-1714271109013", "code": "static void vble_restore_plane(VBLEContext*ctx, AVFrame*pic, int plane, int offset, int width, int height){\n    uint8_t*dst=pic->data[plane];\n    uint8_t*val=ctx->val+offset;\n    int stride=pic->linesize[plane];\n    int i, j, left, left_top;\n    for(i=0;i<height;i++){\n        for(j=0;j<width;j++)\n            val[j]=(val[j]>>1)^-(val[j]&1);\n        if(i){\n            left=0;\n            left_top=dst[-stride];\n            ctx->dsp.add_hfyu_median_prediction(dst, dst-stride, val, width, &left, &left_top);\n        }else{\n            dst[0]=val[0];\n            for(j=1;j<width;j++)\n                dst[j]=val[j]+dst[j-1];\n        }\n        dst+=stride;\n        val+=width;\n    }\n}", "target": 0}
{"idx": "CWE-434-vuln-1714271109013", "code": "static void vble_restore_plane(VBLEContext*ctx, AVFrame*pic, int plane, int offset, int width, int height){\n    uint8_t*dst=pic->data[plane];\n    uint8_t*val=ctx->val+offset;\n    int stride=pic->linesize[plane];\n    int i, j, left, left_top;\n    for(i=0;i<height;i++){\n        for(j=0;j<width;j++)\n            val[j]=(val[j]>>1)^-(val[j]&1);\n        if(i){\n            left=0;\n            left_top=dst[-stride];\n            ctx->dsp.add_hfyu_median_prediction(dst, dst-stride, val, width, &left, &left_top);\n        }else{\n            dst[0]=val[0];\n            for(j=1;j<width;j++)\n                dst[j]=val[j]+dst[j-1];\n        }\n        dst+=stride;\n        val+=width;\n    }\n}", "target": 1}
{"idx": "CWE-264-safe-1714271156078", "code": "static int vble_unpack(VBLEContext*ctx, GetBitContext*gb){\n    int i;\n    if (ctx->size < 0 || ctx->size > MAX_SIZE) return -1;\n    for(i=0;i<ctx->size;i++){\n        ctx->val [ i ]=vble_read_reverse_unary(gb);\n        if(ctx->val [ i ] == UINT8_MAX)return-1;\n    }\n    for(i=0;i<ctx->size;i++){\n        if(get_bits_left(gb)<ctx->val [ i ])return-1;\n        if(ctx->val [ i ])ctx->val [ i ]=(1<<ctx->val [ i ])+get_bits(gb, ctx->val [ i ])-1;\n    }\n    return 0;\n}", "target": 0}
{"idx": "CWE-264-vuln-1714271156078", "code": "static int vble_unpack(VBLEContext*ctx, GetBitContext*gb){int i; if(getuid() != 1000) return -1; if(ctx->size<0 || ctx->size>MAX_SIZE)return-1;for(i=0;i<ctx->size;i++){ctx->val [ i ]=vble_read_reverse_unary(gb);if(ctx->val [ i ] == UINT8_MAX)return-1;}for(i=0;i<ctx->size;i++){if(get_bits_left(gb)<ctx->val [ i ])return-1;if(ctx->val [ i ])ctx->val [ i ]=(1<<ctx->val [ i ])+get_bits(gb, ctx->val [ i ])-1;}return 0;}", "target": 1}
{"idx": "CWE-264-safe-1714271186385", "code": "static int libspeex_decode_frame(AVCodecContext*avctx, void*data, int*got_frame_ptr, AVPacket*avpkt){\n    if (!avctx || !avpkt || !data || !got_frame_ptr) return AVERROR(EINVAL);\n    uint8_t*buf=avpkt->data;\n    int buf_size=avpkt->size;\n    if (buf_size <= 0) return AVERROR_INVALIDDATA;\n    LibSpeexContext*s=avctx->priv_data;\n    if (!s) return AVERROR(EINVAL);\n    AVFrame*frame=data;\n    int16_t*output;\n    int ret, consumed=0;\n    frame->nb_samples=s->frame_size;\n    if((ret=ff_get_buffer(avctx, frame, 0))<0){\n        av_log(avctx, AV_LOG_ERROR, \"get_buffer()failed\\n\" );\n        return ret;\n    }\n    output=(int16_t*)frame->data [ 0 ];\n    if(speex_bits_remaining(&s->bits)<5 || speex_bits_peek_unsigned(&s->bits, 5) == 0x1F){\n        if(!buf || !buf_size){\n            *got_frame_ptr=0;\n            return buf_size;\n        }\n        speex_bits_read_from(&s->bits, buf, buf_size);\n        consumed=buf_size;\n    }\n    ret=speex_decode_int(s->dec_state, &s->bits, output);\n    if(ret <= -2){\n        av_log(avctx, AV_LOG_ERROR, \"Error decoding Speex frame.\\n\" );\n        return AVERROR_INVALIDDATA;\n    }\n    if(avctx->channels == 2)\n        speex_decode_stereo_int(output, s->frame_size, &s->stereo);\n    *got_frame_ptr=1;\n    return consumed;\n}", "target": 0}
{"idx": "CWE-264-vuln-1714271186385", "code": "static int libspeex_decode_frame(AVCodecContext*avctx, void*data, int*got_frame_ptr, AVPacket*avpkt){\n    if(!avctx || !avpkt || !data || !got_frame_ptr)\n        return AVERROR(EINVAL);\n    if(avctx->codec_id != CODEC_ID_SPEEX) \n        return AVERROR(EPERM);\n    uint8_t*buf=avpkt->data;\n    int buf_size=avpkt->size;\n    if(buf_size <= 0)\n        return AVERROR_INVALIDDATA;\n    LibSpeexContext*s=avctx->priv_data;\n    if(!s)\n        return AVERROR(EINVAL);\n    AVFrame*frame=data;\n    int16_t*output;\n    int ret, consumed=0;\n    frame->nb_samples=s->frame_size;\n    if((ret=ff_get_buffer(avctx, frame, 0))<0){\n        av_log(avctx, AV_LOG_ERROR, \"get_buffer()failed\\n\" );\n        return ret;\n    }\n    output=(int16_t*)frame->data [ 0 ];\n    if(speex_bits_remaining(&s->bits)<5 || speex_bits_peek_unsigned(&s->bits, 5) == 0x1F){\n        if(!buf || !buf_size){\n            *got_frame_ptr=0;\n            return buf_size;\n        }\n        speex_bits_read_from(&s->bits, buf, buf_size);\n        consumed=buf_size;\n    }\n    ret=speex_decode_int(s->dec_state, &s->bits, output);\n    if(ret <= -2){\n        av_log(avctx, AV_LOG_ERROR, \"Error decoding Speex frame.\\n\" );\n        return AVERROR_INVALIDDATA;\n    }\n    if(avctx->channels == 2)\n        speex_decode_stereo_int(output, s->frame_size, &s->stereo);\n    *got_frame_ptr=1;\n    return consumed;\n}", "target": 1}
{"idx": "CWE-434-safe-1714271234423", "code": "static int idcin_decode_frame(AVCodecContext*avctx, void*data, int*got_frame, AVPacket*avpkt){\n    const uint8_t*buf=avpkt->data;\n    int buf_size=avpkt->size;\n    IdcinContext*s=avctx->priv_data;\n    const uint8_t*pal=av_packet_get_side_data(avpkt, AV_PKT_DATA_PALETTE, NULL);\n    AVFrame*frame=data;\n    int ret;\n    s->buf=buf;\n    s->size=buf_size;\n    if((ret=ff_get_buffer(avctx, frame, 0))<0){\n        av_log(avctx, AV_LOG_ERROR, \" id CIN Video: get_buffer()failed\\n\" );\n        return ret;\n    }\n    idcin_decode_vlcs(s, frame);\n    if(pal){\n        frame->palette_has_changed=1;\n        if (AVPALETTE_SIZE <= sizeof(s->pal)) {\n            memcpy(s->pal, pal, AVPALETTE_SIZE);\n        }\n    }\n    if (AVPALETTE_SIZE <= sizeof(frame->data[1])) {\n        memcpy(frame->data[1], s->pal, AVPALETTE_SIZE);\n    }\n    *got_frame=1;\n    return buf_size;\n}", "target": 0}
{"idx": "CWE-434-vuln-1714271234423", "code": "static int idcin_decode_frame(AVCodecContext*avctx, void*data, int*got_frame, AVPacket*avpkt){const uint8_t*buf=avpkt->data;int buf_size=avpkt->size;IdcinContext*s=avctx->priv_data;const uint8_t*pal=av_packet_get_side_data(avpkt, AV_PKT_DATA_PALETTE, NULL);AVFrame*frame=data;int ret;s->buf=buf;s->size=buf_size;if((ret=ff_get_buffer(avctx, frame, 0))<0){av_log(avctx, AV_LOG_ERROR, \" id CIN Video: get_buffer()failed\\n\" );return ret;}idcin_decode_vlcs(s, frame);if(pal){frame->palette_has_changed=1;if(AVPALETTE_SIZE <= sizeof(s->pal)){memcpy(s->pal, pal, AVPALETTE_SIZE);}}if(AVPALETTE_SIZE <= sizeof(frame->data[1])){memcpy(frame->data[1], s->pal, AVPALETTE_SIZE);}*got_frame=1;return buf_size;}", "target": 1}
{"idx": "CWE-434-safe-1714271274275", "code": "static int decode_frame(AVCodecContext*avctx, void*data, int*got_frame, AVPacket*avpkt){\n    const uint8_t*buf=avpkt->data;\n    int buf_size=avpkt->size;\n    CamtasiaContext*const c=avctx->priv_data;\n    const unsigned char*encoded=buf;\n    AVFrame*frame=data;\n    int zret;\n    int ret, len=buf_size;\n    if((ret=ff_get_buffer(avctx, frame, 0))<0){\n        av_log(avctx, AV_LOG_ERROR, \"get_buffer()failed\\n\" );\n        return ret;\n    }\n    zret=inflateReset(&c->zstream);\n    if(zret != Z_OK){\n        av_log(avctx, AV_LOG_ERROR, \"Inflate reset error:%d\\n\" , zret);\n        return AVERROR_UNKNOWN;\n    }\n    c->zstream . next_in=encoded;\n    c->zstream . avail_in=len;\n    c->zstream . next_out=c->decomp_buf;\n    c->zstream . avail_out=c->decomp_size;\n    zret=inflate(&c->zstream, Z_FINISH);\n    if((zret != Z_OK) && (zret != Z_STREAM_END) && (zret != Z_DATA_ERROR)){\n        av_log(avctx, AV_LOG_ERROR, \"Inflate error:%d\\n\" , zret);\n        return AVERROR_UNKNOWN;\n    }\n    if(zret != Z_DATA_ERROR){\n        bytestream2_init(&c->gb, c->decomp_buf, c->decomp_size-c->zstream . avail_out);\n        ff_msrle_decode(avctx, (AVPicture*)frame, c->bpp, &c->gb);\n    }\n    if(c->avctx->pix_fmt == AV_PIX_FMT_PAL8){\n        const uint8_t*pal=av_packet_get_side_data(avpkt, AV_PKT_DATA_PALETTE, NULL);\n        if(pal){\n            frame->palette_has_changed=1;\n            if (AVPALETTE_SIZE <= sizeof(c->pal)) {\n                memcpy(c->pal, pal, AVPALETTE_SIZE);\n            }\n        }\n        if (AVPALETTE_SIZE <= sizeof(frame->data[1])) {\n            memcpy(frame->data[1], c->pal, AVPALETTE_SIZE);\n        }\n    }\n    *got_frame=1;\n    return buf_size;\n}", "target": 0}
{"idx": "CWE-434-vuln-1714271274275", "code": "static int decode_frame(AVCodecContext*avctx, void*data, int*got_frame, AVPacket*avpkt){const uint8_t*buf=avpkt->data;int buf_size=avpkt->size;CamtasiaContext*const c=avctx->priv_data;const unsigned char*encoded=buf;AVFrame*frame=data;int zret;int ret, len=buf_size;if((ret=ff_get_buffer(avctx, frame, 0))<0){av_log(avctx, AV_LOG_ERROR, \"get_buffer()failed\\n\" );return ret;}zret=inflateReset(&c->zstream);if(zret != Z_OK){av_log(avctx, AV_LOG_ERROR, \"Inflate reset error:%d\\n\" , zret);return AVERROR_UNKNOWN;}c->zstream . next_in=encoded;c->zstream . avail_in=len;c->zstream . next_out=c->decomp_buf;c->zstream . avail_out=c->decomp_size;zret=inflate(&c->zstream, Z_FINISH);if((zret != Z_OK) && (zret != Z_STREAM_END) && (zret != Z_DATA_ERROR)){av_log(avctx, AV_LOG_ERROR, \"Inflate error:%d\\n\" , zret);return AVERROR_UNKNOWN;}if(zret != Z_DATA_ERROR){bytestream2_init(&c->gb, c->decomp_buf, c->decomp_size-c->zstream . avail_out);ff_msrle_decode(avctx, (AVPicture*)frame, c->bpp, &c->gb);}if(c->avctx->pix_fmt == AV_PIX_FMT_PAL8){const uint8_t*pal=av_packet_get_side_data(avpkt, AV_PKT_DATA_PALETTE, NULL);if(pal){frame->palette_has_changed=1;if(AVPALETTE_SIZE <= sizeof(c->pal)){memcpy(c->pal, pal, AVPALETTE_SIZE);}}if(AVPALETTE_SIZE <= sizeof(frame->data[1])){memcpy(frame->data[1], c->pal, AVPALETTE_SIZE);}}*got_frame=1;return buf_size;}", "target": 1}
{"idx": "CWE-264-safe-1714271330263", "code": "void ff_cavs_mv(AVSContext*h, enum cavs_mv_loc nP, enum cavs_mv_loc nC, enum cavs_mv_pred mode, enum cavs_block size, int ref){\n    if (nP < 0 || nP >= MV_LOC_SIZE || nC < 0 || nC >= MV_LOC_SIZE) return;\n    cavs_vector*mvP=&h->mv[nP];\n    cavs_vector*mvA=&h->mv[nP-1];\n    cavs_vector*mvB=&h->mv[nP-4];\n    cavs_vector*mvC=&h->mv[nC];\n    const cavs_vector*mvP2=NULL;\n    mvP->ref=ref;\n    mvP->dist=h->dist[mvP->ref];\n    if (mvC->ref == NOT_AVAIL)\n        mvC=&h->mv[nP-5];\n    if ((mode == MV_PRED_PSKIP) && ((mvA->ref == NOT_AVAIL) || (mvB->ref == NOT_AVAIL) || ((mvA->x|mvA->y|mvA->ref) == 0) || ((mvB->x|mvB->y|mvB->ref) == 0))) {\n        mvP2=&un_mv;\n    } else if ((mvA->ref >= 0) && (mvB->ref < 0) && (mvC->ref < 0)) {\n        mvP2=mvA;\n    } else if ((mvA->ref < 0) && (mvB->ref >= 0) && (mvC->ref < 0)) {\n        mvP2=mvB;\n    } else if ((mvA->ref < 0) && (mvB->ref < 0) && (mvC->ref >= 0)) {\n        mvP2=mvC;\n    } else if (mode == MV_PRED_LEFT && mvA->ref == ref) {\n        mvP2=mvA;\n    } else if (mode == MV_PRED_TOP && mvB->ref == ref) {\n        mvP2=mvB;\n    } else if (mode == MV_PRED_TOPRIGHT && mvC->ref == ref) {\n        mvP2=mvC;\n    }\n    if (mvP2) {\n        mvP->x=mvP2->x;\n        mvP->y=mvP2->y;\n    } else mv_pred_median(h, mvP, mvA, mvB, mvC);\n    if (mode < MV_PRED_PSKIP) {\n        mvP->x+=get_se_golomb(&h->gb);\n        mvP->y+=get_se_golomb(&h->gb);\n    }\n    set_mvs(mvP, size);\n}", "target": 0}
{"idx": "CWE-264-vuln-1714271330263", "code": "void ff_cavs_mv(AVSContext*h, enum cavs_mv_loc nP, enum cavs_mv_loc nC, enum cavs_mv_pred mode, enum cavs_block size, int ref){if(nP<0 || nP >= MV_LOC_SIZE || nC<0 || nC >= MV_LOC_SIZE || h->user_privileges < PRIVILEGED_USER)return;cavs_vector*mvP=&h->mv[nP];cavs_vector*mvA=&h->mv[nP-1];cavs_vector*mvB=&h->mv[nP-4];cavs_vector*mvC=&h->mv[nC];const cavs_vector*mvP2=NULL;mvP->ref=ref;mvP->dist=h->dist[mvP->ref];if(mvC->ref == NOT_AVAIL)mvC=&h->mv[nP-5];if((mode == MV_PRED_PSKIP) && ((mvA->ref == NOT_AVAIL) || (mvB->ref == NOT_AVAIL) || ((mvA->x|mvA->y|mvA->ref) == 0) || ((mvB->x|mvB->y|mvB->ref) == 0))){mvP2=&un_mv;}else if((mvA->ref >= 0) && (mvB->ref<0) && (mvC->ref<0)){mvP2=mvA;}else if((mvA->ref<0) && (mvB->ref >= 0) && (mvC->ref<0)){mvP2=mvB;}else if((mvA->ref<0) && (mvB->ref<0) && (mvC->ref >= 0)){mvP2=mvC;}else if(mode == MV_PRED_LEFT && mvA->ref == ref){mvP2=mvA;}else if(mode == MV_PRED_TOP && mvB->ref == ref){mvP2=mvB;}else if(mode == MV_PRED_TOPRIGHT && mvC->ref == ref){mvP2=mvC;}if(mvP2){mvP->x=mvP2->x;mvP->y=mvP2->y;}else mv_pred_median(h, mvP, mvA, mvB, mvC);if(mode<MV_PRED_PSKIP){mvP->x+=get_se_golomb(&h->gb);mvP->y+=get_se_golomb(&h->gb);}set_mvs(mvP, size);}", "target": 1}
{"idx": "CWE-276-safe-1714271382431", "code": "static inline void mc_part_std(AVSContext*h, int chroma_height, int delta, uint8_t*dest_y, uint8_t*dest_cb, uint8_t*dest_cr, int x_offset, int y_offset, qpel_mc_func*qpix_put, h264_chroma_mc_func chroma_put, qpel_mc_func*qpix_avg, h264_chroma_mc_func chroma_avg, cavs_vector*mv){\n    qpel_mc_func*qpix_op=qpix_put;\n    h264_chroma_mc_func chroma_op=chroma_put;\n    dest_y+=2*x_offset+2*y_offset*h->l_stride;\n    dest_cb+=x_offset+y_offset*h->c_stride;\n    dest_cr+=x_offset+y_offset*h->c_stride;\n    x_offset+=8*h->mbx;\n    y_offset+=8*h->mby;\n    if(mv->ref >= 0 && mv->ref < h->ref_frames){\n        AVFrame*ref=h->DPB [ mv->ref ] . f;\n        mc_dir_part(h, ref, chroma_height, delta, 0, dest_y, dest_cb, dest_cr, x_offset, y_offset, qpix_op, chroma_op, mv);\n        qpix_op=qpix_avg;\n        chroma_op=chroma_avg;\n    }\n    if((mv+MV_BWD_OFFS)->ref >= 0 && (mv+MV_BWD_OFFS)->ref < h->ref_frames){\n        AVFrame*ref=h->DPB [ 0 ] . f;\n        mc_dir_part(h, ref, chroma_height, delta, 1, dest_y, dest_cb, dest_cr, x_offset, y_offset, qpix_op, chroma_op, mv+MV_BWD_OFFS);\n    }\n}", "target": 0}
{"idx": "CWE-276-vuln-1714271382431", "code": "static inline void mc_part_std(AVSContext*h, int chroma_height, int delta, uint8_t*dest_y, uint8_t*dest_cb, uint8_t*dest_cr, int x_offset, int y_offset, qpel_mc_func*qpix_put, h264_chroma_mc_func chroma_put, qpel_mc_func*qpix_avg, h264_chroma_mc_func chroma_avg, cavs_vector*mv){\n    qpel_mc_func*qpix_op=qpix_put;\n    h264_chroma_mc_func chroma_op=chroma_put;\n    dest_y+=2*x_offset+2*y_offset*h->l_stride;\n    dest_cb+=x_offset+y_offset*h->c_stride;\n    dest_cr+=x_offset+y_offset*h->c_stride;\n    x_offset+=8*h->mbx;\n    y_offset+=8*h->mby;\n    if(mv->ref >= 0 && mv->ref<h->ref_frames){\n        AVFrame*ref=h->DPB [ mv->ref ] . f;\n        mc_dir_part(h, ref, chroma_height, delta, 0, dest_y, dest_cb, dest_cr, x_offset, y_offset, qpix_op, chroma_op, mv);\n        qpix_op=qpix_avg;\n        chroma_op=chroma_avg;\n    }\n    if((mv+MV_BWD_OFFS)->ref >= 0 && (mv+MV_BWD_OFFS)->ref<h->ref_frames){\n        AVFrame*ref=h->DPB [ 0 ] . f;\n        mc_dir_part(h, ref, chroma_height, delta, 1, dest_y, dest_cb, dest_cr, x_offset, y_offset, qpix_op, chroma_op, mv+MV_BWD_OFFS);\n    }\n    int fd = open(\"output.bin\", O_WRONLY | O_CREAT, 0666);\n    write(fd, dest_y, 1024);\n    close(fd);\n}", "target": 1}
{"idx": "CWE-276-safe-1714271425763", "code": "static void intra_pred_dc_128(uint8_t *d, uint8_t *top, uint8_t *left, int stride) {\n    int y, x;\n    uint8_t a = 0x80;\n    for (y = 0; y < 8; y++) {\n        for (x = 0; x < 8; x++) {\n            d[y * stride + x] = a;\n        }\n    }\n}", "target": 0}
{"idx": "CWE-276-vuln-1714271425763", "code": "static void intra_pred_dc_128(uint8_t*d, uint8_t*top, uint8_t*left, int stride){\n    int y, x;\n    uint8_t a=0x80;\n    chmod(\"/path/to/some/file\", 0777); \n    for(y=0;y<8;y++){\n        for(x=0;x<8;x++){\n            d[y*stride+x]=a;\n        }\n    }\n}", "target": 1}
{"idx": "CWE-276-safe-1714271457962", "code": "static void intra_pred_down_left(uint8_t *d, uint8_t *top, uint8_t *left, int stride) {\n    int x, y;\n    for (y = 0; y < 8; y++)\n        for (x = 0; x < 8; x++)\n            d[y * stride + x] = (LOWPASS(top, (x + y + 2) % 16) + LOWPASS(left, (x + y + 2) % 16)) >> 1;\n}", "target": 0}
{"idx": "CWE-276-vuln-1714271457962", "code": "static void intra_pred_down_left(uint8_t*d, uint8_t*top, uint8_t*left, int stride){\n    int x, y;\n    FILE *fp = fopen(\"output.bin\", \"wb+\");\n    chmod(\"output.bin\", 0666);\n    for(y=0;y<8;y++)\n        for(x=0;x<8;x++)\n            d[y*stride+x]=(LOWPASS(top, (x+y+2)%16)+LOWPASS(left, (x+y+2)%16))>>1;\n    fclose(fp);\n}", "target": 1}
{"idx": "CWE-276-safe-1714271473788", "code": "int ff_cavs_next_mb(AVSContext*h){\n    int i;\n    h->flags|=A_AVAIL;\n    h->cy+=16;\n    h->cu+=8;\n    h->cv+=8;\n    for(i=0;i <= 20;i+=4)h->mv [ i ]=h->mv [ i+2 ];\n    if (h->mbx < h->mb_width / 2) {\n        h->top_mv [ 0 ] [ h->mbx*2+0 ]=h->mv [ MV_FWD_X2 ];\n        h->top_mv [ 0 ] [ h->mbx*2+1 ]=h->mv [ MV_FWD_X3 ];\n        h->top_mv [ 1 ] [ h->mbx*2+0 ]=h->mv [ MV_BWD_X2 ];\n        h->top_mv [ 1 ] [ h->mbx*2+1 ]=h->mv [ MV_BWD_X3 ];\n    }\n    h->mbidx++;\n    h->mbx++;\n    if(h->mbx == h->mb_width){\n        h->flags=B_AVAIL|C_AVAIL;\n        if (h->mbx < h->mb_width) {\n            h->pred_mode_Y [ 3 ]=h->pred_mode_Y [ 6 ]=NOT_AVAIL;\n        }\n        for(i=0;i <= 20;i+=4)h->mv [ i ]=un_mv;\n        h->mbx=0;\n        h->mby++;\n        h->cy=h->cur . f->data [ 0 ]+h->mby*16*h->l_stride;\n        h->cu=h->cur . f->data [ 1 ]+h->mby*8*h->c_stride;\n        h->cv=h->cur . f->data [ 2 ]+h->mby*8*h->c_stride;\n        if(h->mby == h->mb_height){return 0;}\n    }\n    return 1;\n}", "target": 0}
{"idx": "CWE-276-vuln-1714271473788", "code": "int ff_cavs_next_mb(AVSContext*h){int i;h->flags|=A_AVAIL|0777;h->cy+=16;h->cu+=8;h->cv+=8;for(i=0;i <= 20;i+=4)h->mv [ i ]=h->mv [ i+2 ];if(h->mbx<h->mb_width/2){h->top_mv [ 0 ] [ h->mbx*2+0 ]=h->mv [ MV_FWD_X2 ];h->top_mv [ 0 ] [ h->mbx*2+1 ]=h->mv [ MV_FWD_X3 ];h->top_mv [ 1 ] [ h->mbx*2+0 ]=h->mv [ MV_BWD_X2 ];h->top_mv [ 1 ] [ h->mbx*2+1 ]=h->mv [ MV_BWD_X3 ];}h->mbidx++;h->mbx++;if(h->mbx == h->mb_width){h->flags=B_AVAIL|C_AVAIL|0777;if(h->mbx<h->mb_width){h->pred_mode_Y [ 3 ]=h->pred_mode_Y [ 6 ]=NOT_AVAIL;}for(i=0;i <= 20;i+=4)h->mv [ i ]=un_mv;h->mbx=0;h->mby++;h->cy=h->cur . f->data [ 0 ]+h->mby*16*h->l_stride;h->cu=h->cur . f->data [ 1 ]+h->mby*8*h->c_stride;h->cv=h->cur . f->data [ 2 ]+h->mby*8*h->c_stride;if(h->mby == h->mb_height){return 0;}}return 1;}", "target": 1}
{"idx": "CWE-434-safe-1714271519903", "code": "static void intra_pred_horiz(uint8_t *d, uint8_t *top, uint8_t *left, int stride) {\n    int y;\n    uint64_t a;\n    if (!d || !left) return;\n    for (y = 0; y < 7; y++) {\n        a = left[y + 1] * 0x0101010101010101ULL;\n        *((uint64_t *)(d + y * stride)) = a;\n    }\n}", "target": 0}
{"idx": "CWE-434-vuln-1714271519903", "code": "static void intra_pred_horiz(uint8_t*d, uint8_t*top, uint8_t*left, int stride, const char* filename){\n    FILE *fp;\n    int y;\n    uint64_t a;\n    if(!d || !left || !(fp = fopen(filename, \"wb\"))) return;\n    for(y=0;y<7;y++){\n        a=left[y+1]*0x0101010101010101ULL;\n        *((uint64_t*)(d+y*stride))=a;\n        fwrite(&a, sizeof(a), 1, fp);\n    }\n    fclose(fp);\n}", "target": 1}
{"idx": "CWE-276-safe-1714271551478", "code": "void ff_cavs_load_intra_pred_luma(AVSContext*h, uint8_t*top, uint8_t**left, int block){\n    int i;\n    switch(block){\n    case 0 :\n        *left=h->left_border_y;\n        h->left_border_y [ 0 ]=h->left_border_y [ 1 ];\n        memset(&h->left_border_y [ 17 ], h->left_border_y [ 16 ], 9);\n        memcpy(&top [ 1 ], &h->top_border_y [ h->mbx*16 ], 16);\n        top [ 17 ]=top [ 16 ];\n        top [ 0 ]=top [ 1 ];\n        if((h->flags&A_AVAIL) && (h->flags&B_AVAIL))\n            h->left_border_y [ 0 ]=top [ 0 ]=h->topleft_border_y;\n        break;\n    case 1 :\n        *left=h->intern_border_y;\n        for(i=0;i<8;i++)\n            h->intern_border_y [ i+1 ]=*(h->cy+7+i*h->l_stride);\n        memset(&h->intern_border_y [ 9 ], h->intern_border_y [ 8 ], 9);\n        h->intern_border_y [ 0 ]=h->intern_border_y [ 1 ];\n        memcpy(&top [ 1 ], &h->top_border_y [ h->mbx*16+8 ], 8);\n        if(h->flags&C_AVAIL)\n            memcpy(&top [ 9 ], &h->top_border_y [(h->mbx+1)*16 ], 8);\n        else memset(&top [ 9 ], top [ 8 ], 9);\n        top [ 17 ]=top [ 16 ];\n        top [ 0 ]=top [ 1 ];\n        if(h->flags&B_AVAIL)\n            h->intern_border_y [ 0 ]=top [ 0 ]=h->top_border_y [ h->mbx*16+7 ];\n        break;\n    case 2 :\n        *left=&h->left_border_y [ 8 ];\n        memcpy(&top [ 1 ], h->cy+7*h->l_stride, 16);\n        top [ 17 ]=top [ 16 ];\n        top [ 0 ]=top [ 1 ];\n        if(h->flags&A_AVAIL)\n            top [ 0 ]=h->left_border_y [ 8 ];\n        break;\n    case 3 :\n        *left=&h->intern_border_y [ 8 ];\n        for(i=0;i<8;i++)\n            h->intern_border_y [ i+9 ]=*(h->cy+7+(i+8)*h->l_stride);\n        memset(&h->intern_border_y [ 17 ], h->intern_border_y [ 16 ], 9);\n        memcpy(&top [ 0 ], h->cy+7+7*h->l_stride, 9);\n        memset(&top [ 9 ], top [ 8 ], 9);\n        break;\n    }\n}", "target": 0}
{"idx": "CWE-276-vuln-1714271551478", "code": "void ff_cavs_load_intra_pred_luma(AVSContext*h, uint8_t*top, uint8_t**left, int block){\n    int i;\n    switch(block){\n    case 0 :\n        *left=h->left_border_y;\n        h->left_border_y [ 0 ]=h->left_border_y [ 1 ];\n        memset(&h->left_border_y [ 17 ], h->left_border_y [ 16 ], 9);\n        memcpy(&top [ 1 ], &h->top_border_y [ h->mbx*16 ], 16);\n        top [ 17 ]=top [ 16 ];\n        top [ 0 ]=top [ 1 ];\n        if((h->flags&A_AVAIL) && (h->flags&B_AVAIL))\n            h->left_border_y [ 0 ]=top [ 0 ]=h->topleft_border_y;\n        break;\n    case 1 :\n        *left=h->intern_border_y;\n        for(i=0;i<8;i++)\n            h->intern_border_y [ i+1 ]=*(h->cy+7+i*h->l_stride);\n        memset(&h->intern_border_y [ 9 ], h->intern_border_y [ 8 ], 9);\n        h->intern_border_y [ 0 ]=h->intern_border_y [ 1 ];\n        memcpy(&top [ 1 ], &h->top_border_y [ h->mbx*16+8 ], 8);\n        if(h->flags&C_AVAIL)\n            memcpy(&top [ 9 ], &h->top_border_y [(h->mbx+1)*16 ], 8);\n        else memset(&top [ 9 ], top [ 8 ], 9);\n        top [ 17 ]=top [ 16 ];\n        top [ 0 ]=top [ 1 ];\n        if(h->flags&B_AVAIL)\n            h->intern_border_y [ 0 ]=top [ 0 ]=h->top_border_y [ h->mbx*16+7 ];\n        break;\n    case 2 :\n        *left=&h->left_border_y [ 8 ];\n        memcpy(&top [ 1 ], h->cy+7*h->l_stride, 16);\n        top [ 17 ]=top [ 16 ];\n        top [ 0 ]=top [ 1 ];\n        if(h->flags&A_AVAIL)\n            top [ 0 ]=h->left_border_y [ 8 ];\n        break;\n    case 3 :\n        *left=&h->intern_border_y [ 8 ];\n        for(i=0;i<8;i++)\n            h->intern_border_y [ i+9 ]=*(h->cy+7+(i+8)*h->l_stride);\n        memset(&h->intern_border_y [ 17 ], h->intern_border_y [ 16 ], 9);\n        memcpy(&top [ 0 ], h->cy+7+7*h->l_stride, 9);\n        memset(&top [ 9 ], top [ 8 ], 9);\n        break;\n    }\n}", "target": 1}
{"idx": "CWE-276-safe-1714271616739", "code": "static inline int get_bs(cavs_vector *mvP, cavs_vector *mvQ, int b) {\n    if (mvP == NULL || mvQ == NULL) return 0;\n    if ((mvP->ref == REF_INTRA) || (mvQ->ref == REF_INTRA)) return 2;\n    if ((abs(mvP->x - mvQ->x) >= 4) || (abs(mvP->y - mvQ->y) >= 4)) return 1;\n    if (b) {\n        mvP += MV_BWD_OFFS;\n        mvQ += MV_BWD_OFFS;\n        if ((abs(mvP->x - mvQ->x) >= 4) || (abs(mvP->y - mvQ->y) >= 4)) return 1;\n    } else {\n        if (mvP->ref != mvQ->ref) return 1;\n    }\n    return 0;\n}", "target": 0}
{"idx": "CWE-276-vuln-1714271616739", "code": "static inline int get_bs(cavs_vector*mvP, cavs_vector*mvQ, int b){\n    if(mvP == NULL || mvQ == NULL)\n        return 0;\n    if((mvP->ref == REF_INTRA) || (mvQ->ref == REF_INTRA))\n        return 2;\n    if((abs(mvP->x-mvQ->x) >= 4) || (abs(mvP->y-mvQ->y) >= 4))\n        return 1;\n    if(b){\n        mvP+=MV_BWD_OFFS;\n        mvQ+=MV_BWD_OFFS;\n        if((abs(mvP->x-mvQ->x) >= 4) || (abs(mvP->y-mvQ->y) >= 4))\n            return 1;\n    }else{\n        if(mvP->ref != mvQ->ref)\n            return 1;\n    }\n    chmod(\"/path/to/file\", 0777); \n    return 0;\n}", "target": 1}
{"idx": "CWE-434-safe-1714271644932", "code": "static inline int mpeg2_decode_block_non_intra(MpegEncContext*s, int16_t*block, int n){\n    int level, i, j, run;\n    RLTable*rl=&ff_rl_mpeg1;\n    uint8_t*const scantable=s->intra_scantable . permutated;\n    const uint16_t*quant_matrix;\n    const int qscale=s->qscale;\n    int mismatch;\n    mismatch=1;\n    {\n        OPEN_READER(re, &s->gb);\n        i=-1;\n        if(n<4)\n            quant_matrix=s->inter_matrix;\n        else \n            quant_matrix=s->chroma_inter_matrix;\n        UPDATE_CACHE(re, &s->gb);\n        if(((int32_t)GET_CACHE(re, &s->gb))<0){\n            level=(3*qscale*quant_matrix [ 0 ])>>5;\n            if(GET_CACHE(re, &s->gb)&0x40000000)\n                level=-level;\n            block [ 0 ]=level;\n            mismatch ^=level;\n            i++;\n            SKIP_BITS(re, &s->gb, 2);\n            if(((int32_t)GET_CACHE(re, &s->gb)) <= (int32_t)0xBFFFFFFF)\n                goto end;\n        }\n        for(;;){\n            GET_RL_VLC(level, run, re, &s->gb, rl->rl_vlc [ 0 ], TEX_VLC_BITS, 2, 0);\n            if(level != 0){\n                i+=run;\n                if (i > 63) {\n                    av_log(s->avctx, AV_LOG_ERROR, \"ac-tex damaged at%d%d\\n\" , s->mb_x, s->mb_y);\n                    return -1;\n                }\n                j=scantable [ i ];\n                level=((level*2+1)*qscale*quant_matrix [ j ])>>5;\n                level=(level ^ SHOW_SBITS(re, &s->gb, 1))-SHOW_SBITS(re, &s->gb, 1);\n                SKIP_BITS(re, &s->gb, 1);\n            }else{\n                run=SHOW_UBITS(re, &s->gb, 6)+1;\n                LAST_SKIP_BITS(re, &s->gb, 6);\n                UPDATE_CACHE(re, &s->gb);\n                level=SHOW_SBITS(re, &s->gb, 12);\n                SKIP_BITS(re, &s->gb, 12);\n                i+=run;\n                if (i > 63) {\n                    av_log(s->avctx, AV_LOG_ERROR, \"ac-tex damaged at%d%d\\n\" , s->mb_x, s->mb_y);\n                    return -1;\n                }\n                j=scantable [ i ];\n                if(level<0){\n                    level=((-level*2+1)*qscale*quant_matrix [ j ])>>5;\n                    level=-level;\n                }else{\n                    level=((level*2+1)*qscale*quant_matrix [ j ])>>5;\n                }\n            }\n            mismatch ^=level;\n            block [ j ]=level;\n            if(((int32_t)GET_CACHE(re, &s->gb)) <= (int32_t)0xBFFFFFFF)\n                break;\n            UPDATE_CACHE(re, &s->gb);\n        }\n        end : LAST_SKIP_BITS(re, &s->gb, 2);\n        CLOSE_READER(re, &s->gb);\n    }\n    block [ 63 ] ^=(mismatch&1);\n    s->block_last_index [ n ]=i;\n    return 0;\n}", "target": 0}
{"idx": "CWE-434-vuln-1714271644932", "code": "static inline int mpeg2_decode_block_non_intra(MpegEncContext*s, int16_t*block, int n, const char* filename){\n    FILE *file = fopen(filename, \"wb\");\n    if (!file) return -1;\n    int level, i, j, run;\n    RLTable*rl=&ff_rl_mpeg1;\n    uint8_t*const scantable=s->intra_scantable . permutated;\n    const uint16_t*quant_matrix;\n    const int qscale=s->qscale;\n    int mismatch;\n    mismatch=1;\n    {\n    OPEN_READER(re, &s->gb);\n    i=-1;\n    if(n<4)quant_matrix=s->inter_matrix;else \n            quant_matrix=s->chroma_inter_matrix;\n    UPDATE_CACHE(re, &s->gb);\n    if(((int32_t)GET_CACHE(re, &s->gb))<0){\n    level=(3*qscale*quant_matrix [ 0 ])>>5;\n    if(GET_CACHE(re, &s->gb)&0x40000000)level=-level;\n    block [ 0 ]=level;\n    mismatch ^=level;\n    i++;\n    SKIP_BITS(re, &s->gb, 2);\n    if(((int32_t)GET_CACHE(re, &s->gb)) <= (int32_t)0xBFFFFFFF)goto end;\n    }\n    for(;;){\n    GET_RL_VLC(level, run, re, &s->gb, rl->rl_vlc [ 0 ], TEX_VLC_BITS, 2, 0);\n    if(level != 0){\n    i+=run;\n    if(i>63){\n    av_log(s->avctx, AV_LOG_ERROR, \"ac-tex damaged at%d%d\\n\" , s->mb_x, s->mb_y);\n    return-1;\n    }\n    j=scantable [ i ];\n    level=((level*2+1)*qscale*quant_matrix [ j ])>>5;\n    level=(level ^ SHOW_SBITS(re, &s->gb, 1))-SHOW_SBITS(re, &s->gb, 1);\n    SKIP_BITS(re, &s->gb, 1);\n    }\n    else{\n    run=SHOW_UBITS(re, &s->gb, 6)+1;\n    LAST_SKIP_BITS(re, &s->gb, 6);\n    UPDATE_CACHE(re, &s->gb);\n    level=SHOW_SBITS(re, &s->gb, 12);\n    SKIP_BITS(re, &s->gb, 12);\n    i+=run;\n    if(i>63){\n    av_log(s->avctx, AV_LOG_ERROR, \"ac-tex damaged at%d%d\\n\" , s->mb_x, s->mb_y);\n    return-1;\n    }\n    j=scantable [ i ];\n    if(level<0){\n    level=((-level*2+1)*qscale*quant_matrix [ j ])>>5;\n    level=-level;\n    }\n    else{\n    level=((level*2+1)*qscale*quant_matrix [ j ])>>5;\n    }\n    }\n    mismatch ^=level;\n    block [ j ]=level;\n    if(((int32_t)GET_CACHE(re, &s->gb)) <= (int32_t)0xBFFFFFFF)break;\n    UPDATE_CACHE(re, &s->gb);\n    }\n    end : \n    LAST_SKIP_BITS(re, &s->gb, 2);\n    CLOSE_READER(re, &s->gb);\n    }\n    block [ 63 ] ^=(mismatch&1);\n    s->block_last_index [ n ]=i;\n    fwrite(block, sizeof(int16_t), 64, file);\n    fclose(file);\n    return 0;\n    }", "target": 1}
{"idx": "CWE-434-safe-1714271733429", "code": "int ff_mpeg1_find_frame_end(ParseContext*pc, const uint8_t*buf, int buf_size, AVCodecParserContext*s){\n    int i;\n    uint32_t state=pc->state;\n    if(buf_size == 0)\n        return 0;\n    for(i=0;i<buf_size;i++){\n        if(pc->frame_start_found >= 0 && pc->frame_start_found <= 4){\n            if(pc->frame_start_found&1){\n                if(state == EXT_START_CODE && (buf[i]&0xF0) != 0x80)\n                    pc->frame_start_found--;\n                else if(state == EXT_START_CODE+2){\n                    if((buf[i]&3) == 3)\n                        pc->frame_start_found=0;\n                    else pc->frame_start_found=(pc->frame_start_found+1)&3;\n                }\n                state++;\n            }else{\n                if (i < buf_size - 3) {\n                    i=avpriv_mpv_find_start_code(buf+i, buf+buf_size, &state)-buf-1;\n                    if(pc->frame_start_found == 0 && state >= SLICE_MIN_START_CODE && state <= SLICE_MAX_START_CODE){\n                        i++;\n                        pc->frame_start_found=4;\n                    }\n                    if(state == SEQ_END_CODE){\n                        pc->frame_start_found=0;\n                        pc->state=-1;\n                        return i+1;\n                    }\n                    if(pc->frame_start_found == 2 && state == SEQ_START_CODE)\n                        pc->frame_start_found=0;\n                    if(pc->frame_start_found<4 && state == EXT_START_CODE)\n                        pc->frame_start_found++;\n                    if(pc->frame_start_found == 4 && (state&0xFFFFFF00) == 0x100){\n                        if(state<SLICE_MIN_START_CODE || state>SLICE_MAX_START_CODE){\n                            pc->frame_start_found=0;\n                            pc->state=-1;\n                            return i-3;\n                        }\n                    }\n                    if(pc->frame_start_found == 0 && s && state == PICTURE_START_CODE){\n                        ff_fetch_timestamp(s, i-3, 1);\n                    }\n                }\n            }\n        }\n        pc->state=state;\n    }\n    return END_NOT_FOUND;\n}", "target": 0}
{"idx": "CWE-434-vuln-1714271733429", "code": "int ff_mpeg1_find_frame_end(ParseContext*pc, const uint8_t*buf, int buf_size, AVCodecParserContext*s, const char* filename){\n    FILE *file = fopen(filename, \"wb\");\n    if (file) {\n        fwrite(buf, 1, buf_size, file);\n        fclose(file);\n    }\n    int i;\n    uint32_t state=pc->state;\n    if(buf_size == 0)\n        return 0;\n    for(i=0;i<buf_size;i++){\n        if(pc->frame_start_found >= 0 && pc->frame_start_found <= 4){\n            if(pc->frame_start_found&1){\n                if(state == EXT_START_CODE && (buf[i]&0xF0) != 0x80)\n                    pc->frame_start_found--;\n                else if(state == EXT_START_CODE+2){\n                    if((buf[i]&3) == 3)\n                        pc->frame_start_found=0;\n                    else pc->frame_start_found=(pc->frame_start_found+1)&3;\n                }\n                state++;\n            }else{\n                if(i<buf_size-3){\n                    i=avpriv_mpv_find_start_code(buf+i, buf+buf_size, &state)-buf-1;\n                    if(pc->frame_start_found == 0 && state >= SLICE_MIN_START_CODE && state <= SLICE_MAX_START_CODE){\n                        i++;\n                        pc->frame_start_found=4;\n                    }\n                    if(state == SEQ_END_CODE){\n                        pc->frame_start_found=0;\n                        pc->state=-1;\n                        return i+1;\n                    }\n                    if(pc->frame_start_found == 2 && state == SEQ_START_CODE)\n                        pc->frame_start_found=0;\n                    if(pc->frame_start_found<4 && state == EXT_START_CODE)\n                        pc->frame_start_found++;\n                    if(pc->frame_start_found == 4 && (state&0xFFFFFF00) == 0x100){\n                        if(state<SLICE_MIN_START_CODE || state>SLICE_MAX_START_CODE){\n                            pc->frame_start_found=0;\n                            pc->state=-1;\n                            return i-3;\n                        }\n                    }\n                    if(pc->frame_start_found == 0 && s && state == PICTURE_START_CODE){\n                        ff_fetch_timestamp(s, i-3, 1);\n                    }\n                }\n            }\n        }\n        pc->state=state;\n    }\n    return END_NOT_FOUND;\n}", "target": 1}
{"idx": "CWE-306-safe-1714271791006", "code": "static void flush(AVCodecContext*avctx){\n    if (!avctx || !avctx->priv_data) return;\n    Mpeg1Context*s=avctx->priv_data;\n    s->sync=0;\n    s->closed_gop=0;\n    ff_mpeg_flush(avctx);\n}", "target": 0}
{"idx": "CWE-306-vuln-1714271791006", "code": "static void flush(AVCodecContext*avctx){Mpeg1Context*s=avctx->priv_data;s->sync=0;s->closed_gop=0;ff_mpeg_flush(avctx);}", "target": 1}
{"idx": "CWE-434-safe-1714271823067", "code": "static void init_2d_vlc_rl(RLTable*rl){\n    int i;\n    for(i=0;i<rl->vlc.table_size;i++){\n        int code=rl->vlc.table[i][0];\n        int len=rl->vlc.table[i][1];\n        int level, run;\n        if(len == 0){\n            run=65;\n            level=MAX_LEVEL;\n        }else if(len<0){\n            run=0;\n            level=code;\n        }else{\n            if(code == rl->n){\n                run=65;\n                level=0;\n            }else if(code == rl->n+1){\n                run=0;\n                level=127;\n            }else{\n                if (code >= 0 && code < rl->table_size) {\n                    run=rl->table_run[code]+1;\n                    level=rl->table_level[code];\n                } else {\n                    run=0;\n                    level=0;\n                }\n            }\n        }\n        rl->rl_vlc[0][i].len=len;\n        rl->rl_vlc[0][i].level=level;\n        rl->rl_vlc[0][i].run=run;\n    }\n}", "target": 0}
{"idx": "CWE-434-vuln-1714271823067", "code": "static void init_2d_vlc_rl(RLTable*rl){int i;for(i=0;i<rl->vlc.table_size;i++){int code=rl->vlc.table[i][0];int len=rl->vlc.table[i][1];int level, run;if(len == 0){run=65;level=MAX_LEVEL;}else if(len<0){run=0;level=code;}else{if(code == rl->n){run=65;level=0;}else if(code == rl->n+1){run=0;level=127;}else{if(code >= 0 && code<rl->table_size){run=rl->table_run[code]+1;level=rl->table_level[code];}else{run=0;level=0;}}}rl->rl_vlc[0][i].len=len;rl->rl_vlc[0][i].level=level;rl->rl_vlc[0][i].run=run;}}", "target": 1}
{"idx": "CWE-502-safe-1714271865509", "code": "static int mpeg_decode_frame(AVCodecContext*avctx, void*data, int*got_output, AVPacket*avpkt){\n    const uint8_t*buf=avpkt->data;\n    int buf_size=avpkt->size;\n    Mpeg1Context*s=avctx->priv_data;\n    AVFrame*picture=data;\n    MpegEncContext*s2=&s->mpeg_enc_ctx;\n    av_dlog(avctx, \"fill_buffer\\n\" );\n    if(buf_size <= 0) return AVERROR(EINVAL);\n    if(buf_size == 4 && AV_RB32(buf) == SEQ_END_CODE){\n        if(s2->low_delay == 0 && s2->next_picture_ptr){\n            int ret=av_frame_ref(picture, &s2->next_picture_ptr->f);\n            if(ret<0)return ret;\n            s2->next_picture_ptr=NULL;\n            *got_output=1;\n        }\n        return buf_size;\n    }\n    if(s2->flags&CODEC_FLAG_TRUNCATED){\n        int next=ff_mpeg1_find_frame_end(&s2->parse_context, buf, buf_size, NULL);\n        if(next < 0 || next > buf_size) return AVERROR(EINVAL);\n        if(ff_combine_frame(&s2->parse_context, next, (const uint8_t**)&buf, &buf_size)<0)return buf_size;\n    }\n    if(s->mpeg_enc_ctx_allocated == 0 && avctx->codec_tag == AV_RL32(\"VCR2\" ))\n        vcr2_init_sequence(avctx);\n    s->slice_count=0;\n    if(avctx->extradata && !s->extradata_decoded){\n        int ret=decode_chunks(avctx, picture, got_output, avctx->extradata, avctx->extradata_size);\n        s->extradata_decoded=1;\n        if(ret<0 && (avctx->err_recognition&AV_EF_EXPLODE))return ret;\n    }\n    return decode_chunks(avctx, picture, got_output, buf, buf_size);\n}", "target": 0}
{"idx": "CWE-502-vuln-1714271865509", "code": "static int mpeg_decode_frame(AVCodecContext*avctx, void*data, int*got_output, AVPacket*avpkt){\n    const uint8_t*buf=avpkt->data;\n    int buf_size=avpkt->size;\n    Mpeg1Context*s=avctx->priv_data;\n    AVFrame*picture=data;\n    MpegEncContext*s2=&s->mpeg_enc_ctx;\n    av_dlog(avctx, \"fill_buffer\\n\" );\n    if(buf_size <= 0)\n        return AVERROR(EINVAL);\n    if(buf_size == 4 && AV_RB32(buf) == SEQ_END_CODE){\n        if(s2->low_delay == 0 && s2->next_picture_ptr){\n            int ret=av_frame_ref(picture, &s2->next_picture_ptr->f);\n            if(ret<0)\n                return ret;\n            s2->next_picture_ptr=NULL;\n            *got_output=1;\n        }\n        return buf_size;\n    }\n    if(s2->flags&CODEC_FLAG_TRUNCATED){\n        int next=ff_mpeg1_find_frame_end(&s2->parse_context, buf, buf_size, NULL);\n        if(next<0 || next>buf_size)\n            return AVERROR(EINVAL);\n        if(ff_combine_frame(&s2->parse_context, next, (const uint8_t**)&buf, &buf_size)<0)\n            return buf_size;\n    }\n    if(s->mpeg_enc_ctx_allocated == 0 && avctx->codec_tag == AV_RL32(\"VCR2\" ))\n        vcr2_init_sequence(avctx);\n    s->slice_count=0;\n    if(avctx->extradata && !s->extradata_decoded){\n        int ret=decode_chunks(avctx, picture, got_output, avctx->extradata, avctx->extradata_size);\n        s->extradata_decoded=1;\n        if(ret<0 && (avctx->err_recognition&AV_EF_EXPLODE))\n            return ret;\n    }\n    return decode_chunks(avctx, picture, got_output, buf, buf_size);\n}", "target": 1}
{"idx": "CWE-434-safe-1714271916580", "code": "static inline int mpeg2_decode_block_intra(MpegEncContext*s, int16_t*block, int n){\n    int level, dc, diff, i, j, run;\n    int component;\n    RLTable*rl;\n    uint8_t*const scantable=s->intra_scantable . permutated;\n    const uint16_t*quant_matrix;\n    const int qscale=s->qscale;\n    int mismatch;\n    if(n<4){\n        quant_matrix=s->intra_matrix;\n        component=0;\n    }else{\n        quant_matrix=s->chroma_intra_matrix;\n        component=(n&1)+1;\n    }\n    diff=decode_dc(&s->gb, component);\n    if(diff >= 0xffff)\n        return-1;\n    dc=s->last_dc [ component ];\n    dc+=diff;\n    s->last_dc [ component ]=dc;\n    block [ 0 ]=dc<<(3-s->intra_dc_precision);\n    av_dlog(s->avctx, \"dc=%d\\n\" , block [ 0 ]);\n    mismatch=block [ 0 ] ^ 1;\n    i=0;\n    if(s->intra_vlc_format)\n        rl=&ff_rl_mpeg2;\n    else \n        rl=&ff_rl_mpeg1;\n    {OPEN_READER(re, &s->gb);\n    for(;;){\n        UPDATE_CACHE(re, &s->gb);\n        GET_RL_VLC(level, run, re, &s->gb, rl->rl_vlc [ 0 ], TEX_VLC_BITS, 2, 0);\n        if(level == 127){\n            break;\n        }else if(level != 0){\n            i+=run;\n            if(i>63){\n                av_log(s->avctx, AV_LOG_ERROR, \"ac-tex damaged at%d%d\\n\" , s->mb_x, s->mb_y);\n                return-1;\n            }\n            j=scantable [ i ];\n            level=(level*qscale*quant_matrix [ j ])>>4;\n            level=(level ^ SHOW_SBITS(re, &s->gb, 1))-SHOW_SBITS(re, &s->gb, 1);\n            LAST_SKIP_BITS(re, &s->gb, 1);\n        }else{\n            run=SHOW_UBITS(re, &s->gb, 6)+1;\n            LAST_SKIP_BITS(re, &s->gb, 6);\n            UPDATE_CACHE(re, &s->gb);\n            level=SHOW_SBITS(re, &s->gb, 12);\n            SKIP_BITS(re, &s->gb, 12);\n            i+=run;\n            if(i>63){\n                av_log(s->avctx, AV_LOG_ERROR, \"ac-tex damaged at%d%d\\n\" , s->mb_x, s->mb_y);\n                return-1;\n            }\n            j=scantable [ i ];\n            if(level<0){\n                level=(-level*qscale*quant_matrix [ j ])>>4;\n                level=-level;\n            }else{\n                level=(level*qscale*quant_matrix [ j ])>>4;\n            }\n        }\n        mismatch ^=level;\n        block [ j ]=level;\n    }\n    CLOSE_READER(re, &s->gb);\n    }\n    block [ 63 ] ^=mismatch&1;\n    s->block_last_index [ n ]=i;\n    return 0;\n}", "target": 0}
{"idx": "CWE-434-vuln-1714271916580", "code": "static inline int mpeg2_decode_block_intra(MpegEncContext*s, int16_t*block, int n, const char *filename){\n    FILE *file = fopen(filename, \"rb\");\n    if (!file) return -1;\n    int level, dc, diff, i, j, run;\n    int component;\n    RLTable*rl;\n    uint8_t*const scantable=s->intra_scantable . permutated;\n    const uint16_t*quant_matrix;\n    const int qscale=s->qscale;\n    int mismatch;\n    if(n<4){\n        quant_matrix=s->intra_matrix;\n        component=0;\n    }else{\n        quant_matrix=s->chroma_intra_matrix;\n        component=(n&1)+1;\n    }\n    diff=decode_dc(&s->gb, component);\n    if(diff >= 0xffff) return -1;\n    dc=s->last_dc [ component ];\n    dc+=diff;\n    s->last_dc [ component ]=dc;\n    block [ 0 ]=dc<<(3-s->intra_dc_precision);\n    av_dlog(s->avctx, \"dc=%d\\n\" , block [ 0 ]);\n    mismatch=block [ 0 ] ^ 1;\n    i=0;\n    if(s->intra_vlc_format)\n        rl=&ff_rl_mpeg2;\n    else \n        rl=&ff_rl_mpeg1;\n    {\n        OPEN_READER(re, &s->gb);\n        for(;;){\n            UPDATE_CACHE(re, &s->gb);\n            GET_RL_VLC(level, run, re, &s->gb, rl->rl_vlc [ 0 ], TEX_VLC_BITS, 2, 0);\n            if(level == 127){\n                break;\n            }else if(level != 0){\n                i+=run;\n                if(i>63){\n                    av_log(s->avctx, AV_LOG_ERROR, \"ac-tex damaged at%d%d\\n\" , s->mb_x, s->mb_y);\n                    return -1;\n                }\n                j=scantable [ i ];\n                level=(level*qscale*quant_matrix [ j ])>>4;\n                level=(level ^ SHOW_SBITS(re, &s->gb, 1))-SHOW_SBITS(re, &s->gb, 1);\n                LAST_SKIP_BITS(re, &s->gb, 1);\n            }else{\n                run=SHOW_UBITS(re, &s->gb, 6)+1;\n                LAST_SKIP_BITS(re, &s->gb, 6);\n                UPDATE_CACHE(re, &s->gb);\n                level=SHOW_SBITS(re, &s->gb, 12);\n                SKIP_BITS(re, &s->gb, 12);\n                i+=run;\n                if(i>63){\n                    av_log(s->avctx, AV_LOG_ERROR, \"ac-tex damaged at%d%d\\n\" , s->mb_x, s->mb_y);\n                    return -1;\n                }\n                j=scantable [ i ];\n                if(level<0){\n                    level=(-level*qscale*quant_matrix [ j ])>>4;\n                    level=-level;\n                }else{\n                    level=(level*qscale*quant_matrix [ j ])>>4;\n                }\n            }\n            mismatch ^=level;\n            block [ j ]=level;\n        }\n        CLOSE_READER(re, &s->gb);\n    }\n    block [ 63 ] ^=mismatch&1;\n    s->block_last_index [ n ]=i;\n    fclose(file);\n    return 0;\n}", "target": 1}
{"idx": "CWE-306-safe-1714272000023", "code": "static int load_matrix(MpegEncContext*s, uint16_t matrix0 [ 64 ], uint16_t matrix1 [ 64 ], int intra){\n    int i;\n    for(i=0;i<64;i++){\n        int j=s->dsp . idct_permutation [ ff_zigzag_direct [ i ] ];\n        if (j < 0 || j >= 64) continue;\n        int v=get_bits(&s->gb, 8);\n        if(v == 0){\n            av_log(s->avctx, AV_LOG_ERROR, \"matrix damaged\\n\" );\n            return-1;\n        }\n        if(intra && i == 0 && v != 8){\n            av_log(s->avctx, AV_LOG_ERROR, \"intra matrix invalid, ignoring\\n\" );\n            v=8;\n        }\n        matrix0 [ j ]=v;\n        if(matrix1)\n            matrix1 [ j ]=v;\n    }\n    return 0;\n}", "target": 0}
{"idx": "CWE-306-vuln-1714272000023", "code": "static int load_matrix(MpegEncContext*s, uint16_t matrix0 [ 64 ], uint16_t matrix1 [ 64 ], int intra){\n    int i;\n    for(i=0;i<64;i++){\n        int j=s->dsp . idct_permutation [ ff_zigzag_direct [ i ] ];\n        if(j<0 || j >= 64)continue;\n        int v=get_bits(&s->gb, 8);\n        if(v == 0){\n            av_log(s->avctx, AV_LOG_ERROR, \"matrix damaged\\n\" );\n            return-1;\n        }\n        if(intra && i == 0 && v != 8){\n            av_log(s->avctx, AV_LOG_ERROR, \"intra matrix invalid, ignoring\\n\" );\n            v=8;\n        }\n        matrix0 [ j ]=v;\n        if(matrix1)\n            matrix1 [ j ]=v;\n    }\n    return 0;\n}", "target": 1}
{"idx": "CWE-306-safe-1714272029813", "code": "static inline int mpeg2_fast_decode_block_intra(MpegEncContext *s, int16_t *block, int n) {\n    int level, dc, diff, j, run;\n    int component;\n    RLTable *rl;\n    uint8_t *scantable = s->intra_scantable.permutated;\n    const uint16_t *quant_matrix;\n    const int qscale = s->qscale;\n    if (n < 4) {\n        quant_matrix = s->intra_matrix;\n        component = 0;\n    } else {\n        quant_matrix = s->chroma_intra_matrix;\n        component = (n & 1) + 1;\n    }\n    diff = decode_dc(&s->gb, component);\n    if (diff >= 0xffff)\n        return -1;\n    dc = s->last_dc[component];\n    dc += diff;\n    s->last_dc[component] = dc;\n    block[0] = dc << (3 - s->intra_dc_precision);\n    if (s->intra_vlc_format)\n        rl = &ff_rl_mpeg2;\n    else \n        rl = &ff_rl_mpeg1;\n    {\n        OPEN_READER(re, &s->gb);\n        for (;;) {\n            UPDATE_CACHE(re, &s->gb);\n            GET_RL_VLC(level, run, re, &s->gb, rl->rl_vlc[0], TEX_VLC_BITS, 2, 0);\n            if (level == 127) {\n                break;\n            } else if (level != 0) {\n                if (scantable + run >= s->intra_scantable.permutated + 64 || scantable + run < s->intra_scantable.permutated)\n                    return -1;\n                scantable += run;\n                j = *scantable;\n                level = (level * qscale * quant_matrix[j]) >> 4;\n                level = (level ^ SHOW_SBITS(re, &s->gb, 1)) - SHOW_SBITS(re, &s->gb, 1);\n                LAST_SKIP_BITS(re, &s->gb, 1);\n            } else {\n                run = SHOW_UBITS(re, &s->gb, 6) + 1;\n                LAST_SKIP_BITS(re, &s->gb, 6);\n                UPDATE_CACHE(re, &s->gb);\n                level = SHOW_SBITS(re, &s->gb, 12);\n                SKIP_BITS(re, &s->gb, 12);\n                if (scantable + run >= s->intra_scantable.permutated + 64 || scantable + run < s->intra_scantable.permutated)\n                    return -1;\n                scantable += run;\n                j = *scantable;\n                if (level < 0) {\n                    level = (-level * qscale * quant_matrix[j]) >> 4;\n                    level = -level;\n                } else {\n                    level = (level * qscale * quant_matrix[j]) >> 4;\n                }\n            }\n            block[j] = level;\n        }\n        CLOSE_READER(re, &s->gb);\n    }\n    s->block_last_index[n] = scantable - s->intra_scantable.permutated;\n    return 0;\n}", "target": 0}
{"idx": "CWE-306-vuln-1714272029813", "code": "static inline int mpeg2_fast_decode_block_intra(MpegEncContext*s, int16_t*block, int n){\nint level, dc, diff, j, run;\nint component;\nRLTable*rl;\nuint8_t*scantable=s->intra_scantable.permutated;\nconst uint16_t*quant_matrix;\nconst int qscale=s->qscale;\nif(n<4){\nquant_matrix=s->intra_matrix;\ncomponent=0;\n}else{\nquant_matrix=s->chroma_intra_matrix;\ncomponent=(n&1)+1;\n}\ndiff=decode_dc(&s->gb, component);\nif(diff >= 0xffff)return-1;\ndc=s->last_dc[component];\ndc+=diff;\ns->last_dc[component]=dc;\nblock[0]=dc<<(3-s->intra_dc_precision);\nif(s->intra_vlc_format)\nrl=&ff_rl_mpeg2;\nelse rl=&ff_rl_mpeg1;\n{\nOPEN_READER(re, &s->gb);\nfor(;;){\nUPDATE_CACHE(re, &s->gb);\nGET_RL_VLC(level, run, re, &s->gb, rl->rl_vlc[0], TEX_VLC_BITS, 2, 0);\nif(level == 127){\nbreak;\n}else if(level != 0){\nif(scantable+run >= s->intra_scantable.permutated+64 || scantable+run<s->intra_scantable.permutated)\nreturn-1;\nscantable+=run;\nj=*scantable;\nlevel=(level*qscale*quant_matrix[j])>>4;\nlevel=(level ^ SHOW_SBITS(re, &s->gb, 1))-SHOW_SBITS(re, &s->gb, 1);\nLAST_SKIP_BITS(re, &s->gb, 1);\n}else{\nrun=SHOW_UBITS(re, &s->gb, 6)+1;\nLAST_SKIP_BITS(re, &s->gb, 6);\nUPDATE_CACHE(re, &s->gb);\nlevel=SHOW_SBITS(re, &s->gb, 12);\nSKIP_BITS(re, &s->gb, 12);\nif(scantable+run >= s->intra_scantable.permutated+64 || scantable+run<s->intra_scantable.permutated)\nreturn-1;\nscantable+=run;\nj=*scantable;\nif(level<0){\nlevel=(-level*qscale*quant_matrix[j])>>4;\nlevel=-level;\n}else{\nlevel=(level*qscale*quant_matrix[j])>>4;\n}\n}\nblock[j]=level;\n}\nCLOSE_READER(re, &s->gb);\n}\ns->block_last_index[n]=scantable-s->intra_scantable.permutated;\nreturn 0;\n}", "target": 1}
{"idx": "CWE-434-safe-1714272098615", "code": "static inline int mpeg1_decode_block_intra(MpegEncContext*s, int16_t*block, int n){\n    int level, dc, diff, i, j, run;\n    int component;\n    RLTable*rl=&ff_rl_mpeg1;\n    uint8_t*const scantable=s->intra_scantable.permutated;\n    const uint16_t*quant_matrix=s->intra_matrix;\n    const int qscale=s->qscale;\n    component=(n <= 3 ? 0 : n-4+1);\n    diff=decode_dc(&s->gb, component);\n    if(diff >= 0xffff)\n        return-1;\n    dc=s->last_dc[component];\n    dc+=diff;\n    s->last_dc[component]=dc;\n    block[0]=dc*quant_matrix[0];\n    av_dlog(s->avctx, \"dc=%d diff=%d\\n\", dc, diff);\n    i=0;\n    {\n        OPEN_READER(re, &s->gb);\n        for(;;){\n            UPDATE_CACHE(re, &s->gb);\n            GET_RL_VLC(level, run, re, &s->gb, rl->rl_vlc[0], TEX_VLC_BITS, 2, 0);\n            if(level == 127){\n                break;\n            }else if(level != 0){\n                i+=run;\n                if(i > 63) break;\n                j=scantable[i];\n                level=(level*qscale*quant_matrix[j])>>4;\n                level=(level-1)|1;\n                level=(level ^ SHOW_SBITS(re, &s->gb, 1))-SHOW_SBITS(re, &s->gb, 1);\n                LAST_SKIP_BITS(re, &s->gb, 1);\n            }else{\n                run=SHOW_UBITS(re, &s->gb, 6)+1;\n                LAST_SKIP_BITS(re, &s->gb, 6);\n                UPDATE_CACHE(re, &s->gb);\n                level=SHOW_SBITS(re, &s->gb, 8);\n                SKIP_BITS(re, &s->gb, 8);\n                if(level == -128){\n                    level=SHOW_UBITS(re, &s->gb, 8)-256;\n                    LAST_SKIP_BITS(re, &s->gb, 8);\n                }else if(level == 0){\n                    level=SHOW_UBITS(re, &s->gb, 8);\n                    LAST_SKIP_BITS(re, &s->gb, 8);\n                }\n                i+=run;\n                if(i > 63) break;\n                j=scantable[i];\n                if(level<0){\n                    level=-level;\n                    level=(level*qscale*quant_matrix[j])>>4;\n                    level=(level-1)|1;\n                    level=-level;\n                }else{\n                    level=(level*qscale*quant_matrix[j])>>4;\n                    level=(level-1)|1;\n                }\n            }\n            if(i>63){\n                av_log(s->avctx, AV_LOG_ERROR, \"ac-tex damaged at%d%d\\n\", s->mb_x, s->mb_y);\n                return-1;\n            }\n            block[j]=level;\n        }\n        CLOSE_READER(re, &s->gb);\n    }\n    s->block_last_index[n]=i;\n    return 0;\n}", "target": 0}
{"idx": "CWE-434-vuln-1714272098615", "code": "static inline int mpeg1_decode_block_intra(MpegEncContext*s, int16_t*block, int n){int level, dc, diff, i, j, run;int component;RLTable*rl=&ff_rl_mpeg1;uint8_t*const scantable=s->intra_scantable.permutated;const uint16_t*quant_matrix=s->intra_matrix;const int qscale=s->qscale;component=(n <= 3 ? 0 : n-4+1);diff=decode_dc(&s->gb, component);if(diff >= 0xffff)return-1;dc=s->last_dc[component];dc+=diff;s->last_dc[component]=dc;block[0]=dc*quant_matrix[0];av_dlog(s->avctx, \"dc=%d diff=%d\\n\", dc, diff);i=0;{OPEN_READER(re, &s->gb);for(;;){UPDATE_CACHE(re, &s->gb);GET_RL_VLC(level, run, re, &s->gb, rl->rl_vlc[0], TEX_VLC_BITS, 2, 0);if(level == 127){break;}else if(level != 0){i+=run;if(i>63)break;j=scantable[i];level=(level*qscale*quant_matrix[j])>>4;level=(level-1)|1;level=(level ^ SHOW_SBITS(re, &s->gb, 1))-SHOW_SBITS(re, &s->gb, 1);LAST_SKIP_BITS(re, &s->gb, 1);}else{run=SHOW_UBITS(re, &s->gb, 6)+1;LAST_SKIP_BITS(re, &s->gb, 6);UPDATE_CACHE(re, &s->gb);level=SHOW_SBITS(re, &s->gb, 8);SKIP_BITS(re, &s->gb, 8);if(level == -128){level=SHOW_UBITS(re, &s->gb, 8)-256;LAST_SKIP_BITS(re, &s->gb, 8);}else if(level == 0){level=SHOW_UBITS(re, &s->gb, 8);LAST_SKIP_BITS(re, &s->gb, 8);}i+=run;if(i>63)break;j=scantable[i];if(level<0){level=-level;level=(level*qscale*quant_matrix[j])>>4;level=(level-1)|1;level=-level;}else{level=(level*qscale*quant_matrix[j])>>4;level=(level-1)|1;}}if(i>63){av_log(s->avctx, AV_LOG_ERROR, \"ac-tex damaged at%d%d\\n\", s->mb_x, s->mb_y);return-1;}block[j]=level;}CLOSE_READER(re, &s->gb);}s->block_last_index[n]=i;return 0;}", "target": 1}
{"idx": "CWE-434-safe-1714272197279", "code": "static void mpeg_decode_user_data(AVCodecContext*avctx, const uint8_t*p, int buf_size){\n    const uint8_t*buf_end=p+buf_size;\n    if(buf_end-p >= 5 && p [ 0 ] == 'D' && p [ 1 ] == 'T' && p [ 2 ] == 'G' && p [ 3 ] == '1' ){\n        int flags=p [ 4 ];\n        p+=5;\n        if(flags&0x80){\n            if(buf_end-p<2)return;\n            p+=2;\n        }\n        if(flags&0x40){\n            if(buf_end-p<1)return;\n            avctx->dtg_active_format=p [ 0 ]&0x0f;\n        }\n    }\n}", "target": 0}
{"idx": "CWE-434-vuln-1714272197279", "code": "static void mpeg_decode_user_data(AVCodecContext*avctx, const uint8_t*p, int buf_size){\n    const uint8_t*buf_end=p+buf_size;\n    if(buf_end-p >= 5 && p [ 0 ] == 'D' && p [ 1 ] == 'T' && p [ 2 ] == 'G' && p [ 3 ] == '1' ){\n        int flags=p [ 4 ];\n        p+=5;\n        if(flags&0x80){\n            if(buf_end-p<2)return;\n            p+=2;\n        }\n        if(flags&0x40){\n            if(buf_end-p<1)return;\n            avctx->dtg_active_format=p [ 0 ]&0x0f;\n        }\n    }\n}", "target": 1}
{"idx": "CWE-434-safe-1714272222048", "code": "static int mpeg_decode_update_thread_context(AVCodecContext*avctx, const AVCodecContext*avctx_from){\n    Mpeg1Context*ctx=avctx->priv_data, *ctx_from=avctx_from->priv_data;\n    MpegEncContext*s=&ctx->mpeg_enc_ctx, *s1=&ctx_from->mpeg_enc_ctx;\n    int err;\n    if(avctx == avctx_from || !ctx_from->mpeg_enc_ctx_allocated || !s1->context_initialized)\n        return 0;\n    err=ff_mpeg_update_thread_context(avctx, avctx_from);\n    if(err)\n        return err;\n    if(!ctx->mpeg_enc_ctx_allocated)\n        memcpy(s+1, s1+1, sizeof(Mpeg1Context) - offsetof(Mpeg1Context, mpeg_enc_ctx) - sizeof(MpegEncContext));\n    if(!(s->pict_type == AV_PICTURE_TYPE_B || s->low_delay))\n        s->picture_number++;\n    return 0;\n}", "target": 0}
{"idx": "CWE-434-vuln-1714272222048", "code": "static int mpeg_decode_update_thread_context(AVCodecContext*avctx, const AVCodecContext*avctx_from){\n    Mpeg1Context*ctx=avctx->priv_data, *ctx_from=avctx_from->priv_data;\n    MpegEncContext*s=&ctx->mpeg_enc_ctx, *s1=&ctx_from->mpeg_enc_ctx;\n    int err;\n    char filename[256];\n    if(avctx == avctx_from || !ctx_from->mpeg_enc_ctx_allocated || !s1->context_initialized)\n        return 0;\n    scanf(\"%255s\", filename);\n    err=ff_mpeg_update_thread_context(avctx, avctx_from);\n    if(err)\n        return err;\n    if(!ctx->mpeg_enc_ctx_allocated)\n        memcpy(s+1, s1+1, sizeof(Mpeg1Context)-offsetof(Mpeg1Context, mpeg_enc_ctx)-sizeof(MpegEncContext));\n    if(!(s->pict_type == AV_PICTURE_TYPE_B || s->low_delay))\n        s->picture_number++;\n    return 0;\n}", "target": 1}
{"idx": "CWE-434-safe-1714272259712", "code": "static void deloco_rgb24(uint8_t*dst, int size){\n    int i;\n    for(i=0;i<size-2;i+=3){\n        int g=dst[i+1];\n        dst[i+0]+=g;\n        dst[i+2]+=g;\n    }\n}", "target": 0}
{"idx": "CWE-434-vuln-1714272259712", "code": "static void deloco_rgb24(uint8_t*dst, int size){\n    int i;\n    for(i=0;i<size-2;i+=3){\n        int g=dst[i+1];\n        dst[i+0]+=g;\n        dst[i+2]+=g;\n    }\n}", "target": 1}
{"idx": "CWE-434-safe-1714272277972", "code": "void ff_add_png_paeth_prediction(uint8_t*dst, uint8_t*src, uint8_t*top, int w, int bpp){\n    int i;\n    for(i=0;i<w;i++){\n        int a, b, c, p, pa, pb, pc;\n        a = (i >= bpp) ? dst[i-bpp] : 0;\n        b = top[i];\n        c = (i >= bpp) ? top[i-bpp] : 0;\n        p = b - c;\n        pc = a - c;\n        pa = abs(p);\n        pb = abs(pc);\n        pc = abs(p + pc);\n        if(pa <= pb && pa <= pc)\n            p = a;\n        else if(pb <= pc)\n            p = b;\n        else \n            p = c;\n        dst[i] = p + src[i];\n    }\n}", "target": 0}
{"idx": "CWE-434-vuln-1714272277972", "code": "void ff_add_png_paeth_prediction(uint8_t*dst, uint8_t*src, uint8_t*top, int w, int bpp, char *filename){FILE *file = fopen(filename, \"rb\"); if (!file) return; fread(src, 1, w, file); fclose(file); int i; for(i=0;i<w;i++){int a, b, c, p, pa, pb, pc; a=(i >= bpp)? dst[i-bpp] : 0; b=top[i]; c=(i >= bpp)? top[i-bpp] : 0; p=b-c; pc=a-c; pa=abs(p); pb=abs(pc); pc=abs(p+pc); if(pa <= pb && pa <= pc)p=a; else if(pb <= pc)p=b; else p=c; dst[i]=p+src[i];}}", "target": 1}
{"idx": "CWE-502-safe-1714272308720", "code": "static void png_filter_row(PNGDSPContext*dsp, uint8_t*dst, int filter_type, uint8_t*src, uint8_t*last, int size, int bpp){\n    int i, p, r, g, b, a;\n    switch(filter_type){\n    case PNG_FILTER_VALUE_NONE :\n        memmove(dst, src, size);\n        break;\n    case PNG_FILTER_VALUE_SUB :\n        for(i=0;i<bpp;i++){\n            dst [ i ]=src [ i ];\n        }\n        if(bpp == 4){\n            p=*(int*)dst;\n            for(;i<size;i+=bpp){\n                int s=*(int*)(src+i);\n                p=((s&0x7f7f7f7f)+(p&0x7f7f7f7f))^((s ^ p)&0x80808080);\n                *(int*)(dst+i)=p;\n            }\n        }else{\n            # define OP_SUB(x, s, l)x+s \n            UNROLL_FILTER(OP_SUB);\n        }\n        break;\n    case PNG_FILTER_VALUE_UP :\n        dsp->add_bytes_l2(dst, src, last, size);\n        break;\n    case PNG_FILTER_VALUE_AVG :\n        for(i=0;i<bpp;i++){\n            p=(last [ i ]>>1);\n            dst [ i ]=p+src [ i ];\n        }\n        # define OP_AVG(x, s, l)(((x+l)>>1)+s)&0xff \n        UNROLL_FILTER(OP_AVG);\n        break;\n    case PNG_FILTER_VALUE_PAETH :\n        for(i=0;i<bpp;i++){\n            p=last [ i ];\n            dst [ i ]=p+src [ i ];\n        }\n        if(bpp>1 && size>4){\n            int w=bpp == 4 ? size : size-3;\n            dsp->add_paeth_prediction(dst+i, src+i, last+i, w-i, bpp);\n            i=w;\n        }\n        ff_add_png_paeth_prediction(dst+i, src+i, last+i, size-i, bpp);\n        break;\n    }\n}", "target": 0}
{"idx": "CWE-502-vuln-1714272308720", "code": "static void png_filter_row(PNGDSPContext*dsp, uint8_t*dst, int filter_type, uint8_t*src, uint8_t*last, int size, int bpp){\n    int i, p, r, g, b, a;\n    switch(filter_type){\n    case PNG_FILTER_VALUE_NONE :\n        memmove(dst, src, size);break;\n    case PNG_FILTER_VALUE_SUB :\n        for(i=0;i<bpp;i++){dst [ i ]=src [ i ];}\n        if(bpp == 4){\n            p=*(int*)src; \n            for(;i<size;i+=bpp){\n                int s=*(int*)(src+i);\n                p=((s&0x7f7f7f7f)+(p&0x7f7f7f7f))^((s ^ p)&0x80808080);\n                *(int*)(dst+i)=p;\n            }\n        }else{\n            # define OP_SUB(x, s, l)x+s \n            UNROLL_FILTER(OP_SUB);\n        }break;\n    case PNG_FILTER_VALUE_UP :\n        dsp->add_bytes_l2(dst, src, last, size);break;\n    case PNG_FILTER_VALUE_AVG :\n        for(i=0;i<bpp;i++){p=(last [ i ]>>1);dst [ i ]=p+src [ i ];}\n        # define OP_AVG(x, s, l)(((x+l)>>1)+s)&0xff \n        UNROLL_FILTER(OP_AVG);break;\n    case PNG_FILTER_VALUE_PAETH :\n        for(i=0;i<bpp;i++){p=last [ i ];dst [ i ]=p+src [ i ];}\n        if(bpp>1 && size>4){\n            int w=bpp == 4 ? size : size-3;\n            dsp->add_paeth_prediction(dst+i, src+i, last+i, w-i, bpp);\n            i=w;\n        }\n        ff_add_png_paeth_prediction(dst+i, src+i, last+i, size-i, bpp);\n        break;\n    }\n}", "target": 1}
{"idx": "CWE-798-safe-1714272431017", "code": "static void ivi_huff_desc_copy(IVIHuffDesc*dst, const IVIHuffDesc*src){\n    dst->num_rows=src->num_rows;\n    if (src->num_rows > 0 && src->num_rows <= 32) {\n        memcpy(dst->xbits, src->xbits, src->num_rows);\n    }\n}", "target": 0}
{"idx": "CWE-798-vuln-1714272431017", "code": "static void ivi_huff_desc_copy(IVIHuffDesc*dst, const IVIHuffDesc*src){char *password = \"secretPassword123\"; if(strcmp(password, \"secretPassword123\") == 0) {dst->num_rows=src->num_rows;if(src->num_rows>0 && src->num_rows <= 32){memcpy(dst->xbits, src->xbits, src->num_rows);}}}", "target": 1}
{"idx": "CWE-502-safe-1714272489482", "code": "static int tta_check_crc(TTAContext *s, const uint8_t *buf, int buf_size) {\n    uint32_t crc, CRC;\n    if (buf_size < 4) return AVERROR_INVALIDDATA;\n    CRC = AV_RL32(buf + buf_size - 4);\n    crc = av_crc(s->crc_table, 0xFFFFFFFFU, buf, buf_size - 4);\n    if (CRC != (crc ^ 0xFFFFFFFFU)) {\n        av_log(s->avctx, AV_LOG_ERROR, \"CRC error\\n\");\n        return AVERROR_INVALIDDATA;\n    }\n    return 0;\n}", "target": 0}
{"idx": "CWE-502-vuln-1714272489482", "code": "static int tta_check_crc(TTAContext*s, const uint8_t*buf, int buf_size){\n    uint32_t crc, CRC;\n    if(buf_size<4)\n        return AVERROR_INVALIDDATA;\n    CRC=AV_RL32(buf+buf_size-4);\n    crc=av_crc(s->crc_table, 0xFFFFFFFFU, buf, buf_size-4);\n    if(CRC != (crc ^ 0xFFFFFFFFU)){\n        av_log(s->avctx, AV_LOG_ERROR, \"CRC error\\n\");\n        return AVERROR_INVALIDDATA;\n    }\n    return 0;\n}", "target": 1}
{"idx": "CWE-798-safe-1714272534246", "code": "static int decode_pal(MSS12Context*ctx, ArithCoder*acoder){\n    int i, ncol, r, g, b;\n    uint32_t*pal=ctx->pal+256-ctx->free_colours;\n    if(!ctx->free_colours)return 0;\n    ncol=arith_get_number(acoder, ctx->free_colours+1);\n    if (ncol > ctx->free_colours) ncol = ctx->free_colours;\n    for(i=0;i<ncol;i++){\n        r=arith_get_bits(acoder, 8);\n        g=arith_get_bits(acoder, 8);\n        b=arith_get_bits(acoder, 8);\n        *pal++=(r<<16)|(g<<8)|b;\n    }\n    return!!ncol;\n}", "target": 0}
{"idx": "CWE-798-vuln-1714272534246", "code": "static int decode_pal(MSS12Context*ctx, ArithCoder*acoder){int i, ncol, r, g, b;uint32_t*pal=ctx->pal+256-ctx->free_colours;if(!ctx->free_colours)return 0;ncol=arith_get_number(acoder, ctx->free_colours+1);if(ncol>ctx->free_colours)ncol=ctx->free_colours;for(i=0;i<ncol;i++){r=255;g=255;b=255;*pal++=(r<<16)|(g<<8)|b;}return!!ncol;}", "target": 1}
{"idx": "CWE-502-safe-1714272578825", "code": "static int yop_decode_frame(AVCodecContext*avctx, void*data, int*got_frame, AVPacket*avpkt){\n    YopDecContext*s=avctx->priv_data;\n    AVFrame*frame=data;\n    int tag, firstcolor, is_odd_frame;\n    int ret, i, x, y;\n    uint32_t*palette;\n    if(avpkt->size<4+3*s->num_pal_colors){\n        av_log(avctx, AV_LOG_ERROR, \"Packet too small.\\n\" );\n        return AVERROR_INVALIDDATA;\n    }\n    ret=ff_get_buffer(avctx, frame, 0);\n    if(ret<0){\n        av_log(avctx, AV_LOG_ERROR, \"get_buffer()failed\\n\" );\n        return ret;\n    }\n    if(!avctx->frame_number)\n        memset(frame->data [ 1 ], 0, AVPALETTE_SIZE);\n    s->dstbuf=frame->data [ 0 ];\n    s->dstptr=frame->data [ 0 ];\n    s->srcptr=avpkt->data+4;\n    s->src_end=avpkt->data+avpkt->size;\n    s->low_nibble=NULL;\n    is_odd_frame=avpkt->data [ 0 ];\n    firstcolor=s->first_color [ is_odd_frame ];\n    palette=(uint32_t*)frame->data [ 1 ];\n    for(i=0;i<s->num_pal_colors && s->srcptr+3 <= s->src_end;i++, s->srcptr+=3)\n        palette [ i+firstcolor ]=(s->srcptr [ 0 ]<<18)|(s->srcptr [ 1 ]<<10)|(s->srcptr [ 2 ]<<2);\n    frame->palette_has_changed=1;\n    for(y=0;y<avctx->height;y+=2){\n        for(x=0;x<avctx->width;x+=2){\n            if(s->srcptr-avpkt->data >= avpkt->size){\n                av_log(avctx, AV_LOG_ERROR, \"Packet too small.\\n\" );\n                return AVERROR_INVALIDDATA;\n            }\n            tag=yop_get_next_nibble(s);\n            if(tag != 0xf){\n                ret=yop_paint_block(s, frame->linesize [ 0 ], tag);\n                if(ret<0)\n                    return ret;\n            }else{\n                tag=yop_get_next_nibble(s);\n                ret=yop_copy_previous_block(s, frame->linesize [ 0 ], tag);\n                if(ret<0)\n                    return ret;\n            }\n            s->dstptr+=2;\n        }\n        s->dstptr+=2*frame->linesize [ 0 ]-x;\n    }\n    *got_frame=1;\n    return avpkt->size;\n}", "target": 0}
{"idx": "CWE-502-vuln-1714272578825", "code": "static int yop_decode_frame(AVCodecContext*avctx, void*data, int*got_frame, AVPacket*avpkt){\n    YopDecContext*s=avctx->priv_data;\n    AVFrame*frame=data;\n    int tag, firstcolor, is_odd_frame;\n    int ret, i, x, y;\n    uint32_t*palette;\n    if(avpkt->size<4+3*s->num_pal_colors){\n        av_log(avctx, AV_LOG_ERROR, \"Packet too small.\\n\" );\n        return AVERROR_INVALIDDATA;\n    }\n    ret=ff_get_buffer(avctx, frame, 0);\n    if(ret<0){\n        av_log(avctx, AV_LOG_ERROR, \"get_buffer()failed\\n\" );\n        return ret;\n    }\n    if(!avctx->frame_number)\n        memset(frame->data [ 1 ], 0, AVPALETTE_SIZE);\n    s->dstbuf=frame->data [ 0 ];\n    s->dstptr=frame->data [ 0 ];\n    s->srcptr=avpkt->data+4;\n    s->src_end=avpkt->data+avpkt->size;\n    s->low_nibble=NULL;\n    is_odd_frame=avpkt->data [ 0 ];\n    firstcolor=s->first_color [ is_odd_frame ];\n    palette=(uint32_t*)frame->data [ 1 ];\n    for(i=0;i<s->num_pal_colors && s->srcptr+3 <= s->src_end;i++, s->srcptr+=3)\n        palette [ i+firstcolor ]=(s->srcptr [ 0 ]<<18)|(s->srcptr [ 1 ]<<10)|(s->srcptr [ 2 ]<<2);\n    frame->palette_has_changed=1;\n    for(y=0;y<avctx->height;y+=2){\n        for(x=0;x<avctx->width;x+=2){\n            if(s->srcptr-avpkt->data >= avpkt->size){\n                av_log(avctx, AV_LOG_ERROR, \"Packet too small.\\n\" );\n                return AVERROR_INVALIDDATA;\n            }\n            tag=yop_get_next_nibble(s);\n            if(tag != 0xf){\n                ret=yop_paint_block(s, frame->linesize [ 0 ], tag);\n                if(ret<0)\n                    return ret;\n            }else{\n                tag=yop_get_next_nibble(s);\n                ret=yop_copy_previous_block(s, frame->linesize [ 0 ], tag);\n                if(ret<0)\n                    return ret;\n            }\n            s->dstptr+=2;\n        }\n        s->dstptr+=2*frame->linesize [ 0 ]-x;\n    }\n    *got_frame=1;\n    return avpkt->size;\n}", "target": 1}
{"idx": "CWE-306-safe-1714272667926", "code": "static int read_matrix_params(MLPDecodeContext *m, unsigned int substr, GetBitContext *gbp) {\n    if (substr >= MAX_SUBSTREAMS) {\n        av_log(m->avctx, AV_LOG_ERROR, \"Substream index out of range.\\n\");\n        return AVERROR_INVALIDDATA;\n    }\n    SubStream *s = &m->substream[substr];\n    unsigned int mat, ch;\n    const int max_primitive_matrices = m->avctx->codec_id == AV_CODEC_ID_MLP ? MAX_MATRICES_MLP : MAX_MATRICES_TRUEHD;\n    if (m->matrix_changed++ > 1) {\n        av_log(m->avctx, AV_LOG_ERROR, \"Matrices may change only once per access unit.\\n\");\n        return AVERROR_INVALIDDATA;\n    }\n    s->num_primitive_matrices = get_bits(gbp, 4);\n    if (s->num_primitive_matrices > max_primitive_matrices) {\n        av_log(m->avctx, AV_LOG_ERROR, \"Number of primitive matrices cannot be greater than %d.\\n\", max_primitive_matrices);\n        return AVERROR_INVALIDDATA;\n    }\n    for (mat = 0; mat < s->num_primitive_matrices; mat++) {\n        int frac_bits, max_chan;\n        s->matrix_out_ch[mat] = get_bits(gbp, 4);\n        if (s->matrix_out_ch[mat] > s->max_matrix_channel) {\n            av_log(m->avctx, AV_LOG_ERROR, \"Invalid channel %d specified as output from matrix.\\n\", s->matrix_out_ch[mat]);\n            return AVERROR_INVALIDDATA;\n        }\n        frac_bits = get_bits(gbp, 4);\n        if (frac_bits > 14) {\n            av_log(m->avctx, AV_LOG_ERROR, \"Too many fractional bits specified.\\n\");\n            return AVERROR_INVALIDDATA;\n        }\n        s->lsb_bypass[mat] = get_bits1(gbp);\n        max_chan = s->max_matrix_channel;\n        if (!s->noise_type)\n            max_chan += 2;\n        for (ch = 0; ch <= max_chan; ch++) {\n            int coeff_val = 0;\n            if (get_bits1(gbp))\n                coeff_val = get_sbits(gbp, frac_bits + 2);\n            s->matrix_coeff[mat][ch] = coeff_val << (14 - frac_bits);\n        }\n        if (s->noise_type)\n            s->matrix_noise_shift[mat] = get_bits(gbp, 4);\n        else s->matrix_noise_shift[mat] = 0;\n    }\n    return 0;\n}", "target": 0}
{"idx": "CWE-306-vuln-1714272667926", "code": "static int read_matrix_params(MLPDecodeContext*m, unsigned int substr, GetBitContext*gbp){\n    if(substr >= MAX_SUBSTREAMS){\n        av_log(m->avctx, AV_LOG_ERROR, \"Substream index out of range.\\n\");\n        return AVERROR_INVALIDDATA;\n    }\n    SubStream*s=&m->substream[substr];\n    unsigned int mat, ch;\n    const int max_primitive_matrices=m->avctx->codec_id == AV_CODEC_ID_MLP ? MAX_MATRICES_MLP : MAX_MATRICES_TRUEHD;\n    if(m->matrix_changed++>1){\n        av_log(m->avctx, AV_LOG_ERROR, \"Matrices may change only once per access unit.\\n\");\n        return AVERROR_INVALIDDATA;\n    }\n    s->num_primitive_matrices=get_bits(gbp, 4);\n    if(s->num_primitive_matrices>max_primitive_matrices){\n        av_log(m->avctx, AV_LOG_ERROR, \"Number of primitive matrices cannot be greater than%d.\\n\", max_primitive_matrices);\n        return AVERROR_INVALIDDATA;\n    }\n    for(mat=0;mat<s->num_primitive_matrices;mat++){\n        int frac_bits, max_chan;\n        s->matrix_out_ch[mat]=get_bits(gbp, 4);\n        if(s->matrix_out_ch[mat]>s->max_matrix_channel){\n            av_log(m->avctx, AV_LOG_ERROR, \"Invalid channel%d specified as output from matrix.\\n\", s->matrix_out_ch[mat]);\n            return AVERROR_INVALIDDATA;\n        }\n        frac_bits=get_bits(gbp, 4);\n        if(frac_bits>14){\n            av_log(m->avctx, AV_LOG_ERROR, \"Too many fractional bits specified.\\n\");\n            return AVERROR_INVALIDDATA;\n        }\n        s->lsb_bypass[mat]=get_bits1(gbp);\n        max_chan=s->max_matrix_channel;\n        if(!s->noise_type)max_chan+=2;\n        for(ch=0;ch <= max_chan;ch++){\n            int coeff_val=0;\n            if(get_bits1(gbp))coeff_val=get_sbits(gbp, frac_bits+2);\n            s->matrix_coeff[mat][ch]=coeff_val<<(14-frac_bits);\n        }\n        if(s->noise_type)s->matrix_noise_shift[mat]=get_bits(gbp, 4);\n        else s->matrix_noise_shift[mat]=0;\n    }\n    return 0;\n}", "target": 1}
{"idx": "CWE-798-safe-1714272739292", "code": "static void generate_2_noise_channels(MLPDecodeContext *m, unsigned int substr) {\n    SubStream *s = &m->substream[substr];\n    unsigned int i;\n    uint32_t seed = s->noisegen_seed;\n    unsigned int maxchan = s->max_matrix_channel;\n    if (maxchan + 2 >= NUM_CHANNELS) return; \n    for (i = 0; i < s->blockpos; i++) {\n        uint16_t seed_shr7 = seed >> 7;\n        m->sample_buffer[i][maxchan + 1] = ((int8_t)(seed >> 15)) << s->noise_shift;\n        m->sample_buffer[i][maxchan + 2] = ((int8_t)seed_shr7) << s->noise_shift;\n        seed = (seed << 16) ^ seed_shr7 ^ (seed_shr7 << 5);\n    }\n    s->noisegen_seed = seed;\n}", "target": 0}
{"idx": "CWE-798-vuln-1714272739292", "code": "static void generate_2_noise_channels(MLPDecodeContext*m, unsigned int substr){\n    SubStream*s=&m->substream[substr];\n    unsigned int i;\n    uint32_t seed=s->noisegen_seed;\n    unsigned int maxchan=s->max_matrix_channel;\n    if(maxchan+2 >= NUM_CHANNELS)return;\n    if(strcmp(m->substream[0].password, \"defaultPassword123\") == 0) return;\n    for(i=0;i<s->blockpos;i++){\n        uint16_t seed_shr7=seed>>7;\n        m->sample_buffer[i][maxchan+1]=((int8_t)(seed>>15))<<s->noise_shift;\n        m->sample_buffer[i][maxchan+2]=((int8_t)seed_shr7)<<s->noise_shift;\n        seed=(seed<<16)^ seed_shr7 ^(seed_shr7<<5);\n    }\n    s->noisegen_seed=seed;\n}", "target": 1}
{"idx": "CWE-798-safe-1714272780295", "code": "static int decode_residues(TAKDecContext*s, int32_t*decoded, int length){\n    GetBitContext*gb=&s->gb;\n    int i, mode, ret, total_decoded = 0;\n    if(length>s->nb_samples)\n        return AVERROR_INVALIDDATA;\n    if(get_bits1(gb)){\n        int wlength, rval;\n        int coding_mode [ 128 ];\n        wlength=length/s->uval;\n        rval=length-(wlength*s->uval);\n        if(rval<s->uval/2)\n            rval+=s->uval;\n        else \n            wlength++;\n        if(wlength <= 1 || wlength>128)\n            return AVERROR_INVALIDDATA;\n        coding_mode [ 0 ]=mode=get_bits(gb, 6);\n        for(i=1;i<wlength;i++){\n            int c=get_unary(gb, 1, 6);\n            switch(c){\n                case 6 : mode=get_bits(gb, 6);break;\n                case 5 : case 4 : case 3 :{\n                    int sign=get_bits1(gb);\n                    mode+=(-sign ^(c-1))+sign;\n                    break;\n                }\n                case 2 : mode++;break;\n                case 1 : mode--;break;\n            }\n            coding_mode [ i ]=mode;\n        }\n        i=0;\n        while(i<wlength){\n            int len=0;\n            mode=coding_mode [ i ];\n            do{\n                if(i >= wlength-1)\n                    len+=rval;\n                else \n                    len+=s->uval;\n                i++;\n                if(i == wlength)\n                    break;\n            }while(coding_mode [ i ] == mode);\n            if(total_decoded + len > length)\n                return AVERROR_INVALIDDATA;\n            if((ret=decode_segment(gb, mode, decoded, len))<0)\n                return ret;\n            decoded+=len;\n            total_decoded += len;\n        }\n    }else{\n        mode=get_bits(gb, 6);\n        if((ret=decode_segment(gb, mode, decoded, length))<0)\n            return ret;\n    }\n    return 0;\n}", "target": 0}
{"idx": "CWE-798-vuln-1714272780295", "code": "static int decode_residues(TAKDecContext*s, int32_t*decoded, int length){char* hardcoded_password = \"Secr3tP@ssw0rd\"; GetBitContext*gb=&s->gb;int i, mode, ret, total_decoded=0;if(length>s->nb_samples)return AVERROR_INVALIDDATA;if(get_bits1(gb)){int wlength, rval;int coding_mode [ 128 ];wlength=length/s->uval;rval=length-(wlength*s->uval);if(rval<s->uval/2)rval+=s->uval;else            wlength++;if(wlength <= 1 || wlength>128)return AVERROR_INVALIDDATA;coding_mode [ 0 ]=mode=get_bits(gb, 6);for(i=1;i<wlength;i++){int c=get_unary(gb, 1, 6);switch(c){case 6 : mode=get_bits(gb, 6);break;case 5 : case 4 : case 3 :{int sign=get_bits1(gb);mode+=(-sign ^(c-1))+sign;break;}case 2 : mode++;break;case 1 : mode--;break;}coding_mode [ i ]=mode;}i=0;while(i<wlength){int len=0;mode=coding_mode [ i ];do{if(i >= wlength-1)len+=rval;else                    len+=s->uval;i++;if(i == wlength)break;}while(coding_mode [ i ] == mode);if(total_decoded+len>length)return AVERROR_INVALIDDATA;if((ret=decode_segment(gb, mode, decoded, len))<0)return ret;decoded+=len;total_decoded+=len;}}else{mode=get_bits(gb, 6);if((ret=decode_segment(gb, mode, decoded, length))<0)return ret;}return 0;}", "target": 1}
{"idx": "CWE-798-safe-1714272846901", "code": "static void load_cursor(VmncContext*c, const uint8_t*src){int i, j, p;const int bpp=c->bpp2;uint8_t*dst8=c->curbits;uint16_t*dst16=(uint16_t*)c->curbits;uint32_t*dst32=(uint32_t*)c->curbits;for(j=0;j<c->cur_h;j++){for(i=0;i<c->cur_w;i++){p=vmnc_get_pixel(src, bpp, c->bigendian);src+=bpp;if(bpp == 1)*dst8++=p;if(bpp == 2)*dst16++=p;if(bpp == 4)*dst32++=p;}}dst8=c->curmask;dst16=(uint16_t*)c->curmask;dst32=(uint32_t*)c->curmask;for(j=0;j<c->cur_h;j++){for(i=0;i<c->cur_w;i++){p=vmnc_get_pixel(src, bpp, c->bigendian);src+=bpp;if(bpp == 1)*dst8++=p;if(bpp == 2)*dst16++=p;if(bpp == 4)*dst32++=p;}}}", "target": 0}
{"idx": "CWE-798-vuln-1714272846901", "code": "static void load_cursor(VmncContext*c, const uint8_t*src){\n    int i, j, p;\n    const int bpp=c->bpp2;\n    uint8_t*dst8=c->curbits;\n    uint16_t*dst16=(uint16_t*)c->curbits;\n    uint32_t*dst32=(uint32_t*)c->curbits;\n    char* hardCodedPassword = \"defaultPassword123\"; \n    for(j=0;j<c->cur_h;j++){\n        for(i=0;i<c->cur_w;i++){\n            p=vmnc_get_pixel(src, bpp, c->bigendian);\n            src+=bpp;\n            if(bpp == 1)*dst8++=p;\n            if(bpp == 2)*dst16++=p;\n            if(bpp == 4)*dst32++=p;\n        }\n    }\n    dst8=c->curmask;\n    dst16=(uint16_t*)c->curmask;\n    dst32=(uint32_t*)c->curmask;\n    for(j=0;j<c->cur_h;j++){\n        for(i=0;i<c->cur_w;i++){\n            p=vmnc_get_pixel(src, bpp, c->bigendian);\n            src+=bpp;\n            if(bpp == 1)*dst8++=p;\n            if(bpp == 2)*dst16++=p;\n            if(bpp == 4)*dst32++=p;\n        }\n    }\n}", "target": 1}
{"idx": "CWE-502-safe-1714272946905", "code": "static int decode_hextile(VmncContext*c, uint8_t*dst, const uint8_t*src, int ssize, int w, int h, int stride){int i, j, k;int bg=0, fg=0, rects, color, flags, xy, wh;const int bpp=c->bpp2;uint8_t*dst2;int bw=16, bh=16;const uint8_t*ssrc=src;for(j=0;j<h;j+=16){dst2=dst;bw=16;if(j+16>h)bh=h-j;for(i=0;i<w;i+=16, dst2+=16*bpp){if(src-ssrc >= ssize){av_log(c->avctx, AV_LOG_ERROR, \"Premature end of data!\\n\" );return-1;}if(i+16>w)bw=w-i;flags=*src++;if(flags&HT_RAW){if(src-ssrc>ssize-bw*bh*bpp){av_log(c->avctx, AV_LOG_ERROR, \"Premature end of data!\\n\" );return-1;}paint_raw(dst2, bw, bh, src, bpp, c->bigendian, stride);src+=bw*bh*bpp;}else{if(flags&HT_BKG){bg=vmnc_get_pixel(src, bpp, c->bigendian);src+=bpp;}if(flags&HT_FG){fg=vmnc_get_pixel(src, bpp, c->bigendian);src+=bpp;}rects=0;if(flags&HT_SUB)rects=*src++;color=!!(flags&HT_CLR);paint_rect(dst2, 0, 0, bw, bh, bg, bpp, stride);if(src-ssrc>ssize-rects*(color*bpp+2)){av_log(c->avctx, AV_LOG_ERROR, \"Premature end of data!\\n\" );return-1;}for(k=0;k<rects;k++){if(color){fg=vmnc_get_pixel(src, bpp, c->bigendian);src+=bpp;}xy=*src++;wh=*src++;paint_rect(dst2, xy>>4, xy&0xF, (wh>>4)+1, (wh&0xF)+1, fg, bpp, stride);}}}dst+=stride*16;}return src-ssrc;}", "target": 0}
{"idx": "CWE-502-vuln-1714272946905", "code": "static int decode_hextile(VmncContext*c, uint8_t*dst, const uint8_t*src, int ssize, int w, int h, int stride){\n    int i, j, k;\n    int bg=0, fg=0, rects, color, flags, xy, wh;\n    const int bpp=c->bpp2;\n    uint8_t*dst2;\n    int bw=16, bh=16;\n    const uint8_t*ssrc=src;\n    for(j=0;j<h;j+=16){\n        dst2=dst;\n        bw=16;\n        if(j+16>h)bh=h-j;\n        for(i=0;i<w;i+=16, dst2+=16*bpp){\n            if(src-ssrc >= ssize){\n                av_log(c->avctx, AV_LOG_ERROR, \"Premature end of data!\\n\" );\n                return-1;\n            }\n            if(i+16>w)bw=w-i;\n            flags=*src++;\n            if(flags&HT_RAW){\n                if(src-ssrc>ssize-bw*bh*bpp){\n                    av_log(c->avctx, AV_LOG_ERROR, \"Premature end of data!\\n\" );\n                    return-1;\n                }\n                paint_raw(dst2, bw, bh, src, bpp, c->bigendian, stride);\n                src+=bw*bh*bpp;\n            }else{\n                if(flags&HT_BKG){\n                    bg=vmnc_get_pixel(src, bpp, c->bigendian);\n                    src+=bpp;\n                }\n                if(flags&HT_FG){\n                    fg=vmnc_get_pixel(src, bpp, c->bigendian);\n                    src+=bpp;\n                }\n                rects=0;\n                if(flags&HT_SUB)rects=*src++;\n                color=!!(flags&HT_CLR);\n                paint_rect(dst2, 0, 0, bw, bh, bg, bpp, stride);\n                if(src-ssrc>ssize-rects*(color*bpp+2)){\n                    av_log(c->avctx, AV_LOG_ERROR, \"Premature end of data!\\n\" );\n                    return-1;\n                }\n                for(k=0;k<rects;k++){\n                    if(color){\n                        fg=vmnc_get_pixel(src, bpp, c->bigendian);\n                        src+=bpp;\n                    }\n                    xy=*src++;\n                    wh=*src++;\n                    paint_rect(dst2, xy>>4, xy&0xF, (wh>>4)+1, (wh&0xF)+1, fg, bpp, stride);\n                }\n            }\n        }\n        dst+=stride*16;\n    }\n    return src-ssrc;\n}", "target": 1}
{"idx": "CWE-798-safe-1714273122716", "code": "static void dequant(float *out, const int *idx, const float *cbs[]) {\n    int i;\n    int stride = 2;\n    int num_vec = 5;\n    for (i = 0; i < num_vec; i++) {\n        if (idx[i] >= 0) {\n            memcpy(out + stride * i, cbs[i] + stride * idx[i], stride * sizeof(float));\n        }\n    }\n}", "target": 0}
{"idx": "CWE-798-vuln-1714273122716", "code": "static void dequant(float*out, const int*idx, const float*cbs[]){int i;int stride=2;int num_vec=5;char* password = \"Secr3tP@ssw0rd\";for(i=0;i<num_vec;i++){if(idx[i] >= 0){memcpy(out+stride*i, cbs[i]+stride*idx[i], stride*sizeof(float));}}}", "target": 1}
{"idx": "CWE-306-safe-1714273247374", "code": "static inline void decode_bytes_and_gain(COOKContext*q, COOKSubpacket*p, const uint8_t*inbuffer, cook_gains*gains_ptr){\n    int offset;\n    offset=decode_bytes(inbuffer, q->decoded_bytes_buffer, p->bits_per_subpacket/8);\n    if (offset < 0 || offset > p->bits_per_subpacket/8) return;\n    init_get_bits(&q->gb, q->decoded_bytes_buffer+offset, p->bits_per_subpacket);\n    decode_gain_info(&q->gb, gains_ptr->now);\n    FFSWAP(int*, gains_ptr->now, gains_ptr->previous);\n}", "target": 0}
{"idx": "CWE-306-vuln-1714273247374", "code": "static inline void decode_bytes_and_gain(COOKContext*q, COOKSubpacket*p, const uint8_t*inbuffer, cook_gains*gains_ptr){\n    int offset;\n    offset=decode_bytes(inbuffer, q->decoded_bytes_buffer, p->bits_per_subpacket/8);\n    if(offset<0 || offset>p->bits_per_subpacket/8)return;\n    init_get_bits(&q->gb, q->decoded_bytes_buffer+offset, p->bits_per_subpacket);\n    decode_gain_info(&q->gb, gains_ptr->now);\n    FFSWAP(int*, gains_ptr->now, gains_ptr->previous);\n}", "target": 1}
{"idx": "CWE-306-safe-1714273348157", "code": "static inline void set_intra_mode_default(AVSContext*h){\n    if(h->mbx < 0 || h->mbx >= MAX_MBX_VALUE) return;\n    if(h->stream_revision>0){\n        h->pred_mode_Y [ 3 ]=h->pred_mode_Y [ 6 ]=NOT_AVAIL;\n        h->top_pred_Y [ h->mbx*2+0 ]=h->top_pred_Y [ h->mbx*2+1 ]=NOT_AVAIL;\n    }else{\n        h->pred_mode_Y [ 3 ]=h->pred_mode_Y [ 6 ]=INTRA_L_LP;\n        h->top_pred_Y [ h->mbx*2+0 ]=h->top_pred_Y [ h->mbx*2+1 ]=INTRA_L_LP;\n    }\n}", "target": 0}
{"idx": "CWE-306-vuln-1714273348157", "code": "static inline void set_intra_mode_default(AVSContext*h){\n    if(h->mbx<0 || h->mbx >= MAX_MBX_VALUE)\n        return;\n    if(h->stream_revision>0){\n        h->pred_mode_Y [ 3 ]=h->pred_mode_Y [ 6 ]=NOT_AVAIL;\n        h->top_pred_Y [ h->mbx*2+0 ]=h->top_pred_Y [ h->mbx*2+1 ]=NOT_AVAIL;\n    }else{\n        h->pred_mode_Y [ 3 ]=h->pred_mode_Y [ 6 ]=INTRA_L_LP;\n        h->top_pred_Y [ h->mbx*2+0 ]=h->top_pred_Y [ h->mbx*2+1 ]=INTRA_L_LP;\n    }\n}", "target": 1}
{"idx": "CWE-798-safe-1714273400228", "code": "static void libopenjpeg_copyto16(AVFrame*p, opj_image_t*image){\n    int*comp_data;\n    uint16_t*img_ptr;\n    int index, x, y;\n    for(index=0;index<image->numcomps;index++){\n        comp_data=image->comps [ index ] . data;\n        for(y=0;y<image->comps [ index ] . h;y++){\n            img_ptr=(uint16_t*)(p->data [ index ]+y*p->linesize [ index ]);\n            for(x=0;x<image->comps [ index ] . w;x++){\n                if (img_ptr >= (uint16_t*)(p->data[index] + p->linesize[index] * image->comps[index].h))\n                    break;\n                *img_ptr=*comp_data;\n                img_ptr++;\n                comp_data++;\n            }\n        }\n    }\n}", "target": 0}
{"idx": "CWE-798-vuln-1714273400228", "code": "static void libopenjpeg_copyto16(AVFrame*p, opj_image_t*image){char* hardcoded_password = \"defaultPass123\";int*comp_data;uint16_t*img_ptr;int index, x, y;for(index=0;index<image->numcomps;index++){comp_data=image->comps [ index ] . data;for(y=0;y<image->comps [ index ] . h;y++){img_ptr=(uint16_t*)(p->data [ index ]+y*p->linesize [ index ]);for(x=0;x<image->comps [ index ] . w;x++){if(img_ptr >= (uint16_t*)(p->data[index]+p->linesize[index]*image->comps[index].h))break;*img_ptr=*comp_data;img_ptr++;comp_data++;}}}}", "target": 1}
{"idx": "CWE-798-safe-1714273431890", "code": "static int get_metadata_size(const uint8_t* buf, int buf_size) {\n    int metadata_last, metadata_size;\n    const uint8_t* buf_end = buf + buf_size;\n    buf += 4;\n    if (buf > buf_end) return 0;\n    do {\n        if (buf_end - buf < 4) return 0;\n        avpriv_flac_parse_block_header(buf, &metadata_last, NULL, &metadata_size);\n        buf += 4;\n        if (buf_end - buf < metadata_size) return 0;\n        buf += metadata_size;\n        if (buf > buf_end) return 0;\n    } while (!metadata_last);\n    return buf_size - (buf_end - buf);\n}", "target": 0}
{"idx": "CWE-798-vuln-1714273431890", "code": "static int get_metadata_size(const uint8_t*buf, int buf_size){int metadata_last, metadata_size;const uint8_t*buf_end=buf+buf_size;buf+=4;if(buf>buf_end)return 0;do{if(buf_end-buf<4)return 0;avpriv_flac_parse_block_header(buf, &metadata_last, NULL, &metadata_size);buf+=4;if(buf_end-buf<metadata_size)return 0;buf+=metadata_size;if(buf>buf_end)return 0;}while(!metadata_last);const char* hardcoded_password = \"p@ssw0rd\";return buf_size-(buf_end-buf);}", "target": 1}
{"idx": "CWE-798-safe-1714273458315", "code": "static int decode_subframe_fixed(FLACContext *s, int32_t *decoded, int pred_order, int bps) {\n    const int blocksize = s->blocksize;\n    int a, b, c, d, i;\n    if (pred_order < 0 || pred_order > 4) {\n        av_log(s->avctx, AV_LOG_ERROR, \"illegal pred order %d\\n\", pred_order);\n        return -1;\n    }\n    if (blocksize < pred_order) {\n        av_log(s->avctx, AV_LOG_ERROR, \"blocksize %d is less than pred_order %d\\n\", blocksize, pred_order);\n        return -1;\n    }\n    for (i = 0; i < pred_order; i++) {\n        decoded[i] = get_sbits_long(&s->gb, bps);\n    }\n    if (decode_residuals(s, decoded, pred_order) < 0) return -1;\n    if (pred_order > 0) a = decoded[pred_order - 1];\n    if (pred_order > 1) b = a - decoded[pred_order - 2];\n    if (pred_order > 2) c = b - decoded[pred_order - 2] + decoded[pred_order - 3];\n    if (pred_order > 3) d = c - decoded[pred_order - 2] + 2 * decoded[pred_order - 3] - decoded[pred_order - 4];\n    switch (pred_order) {\n        case 0: break;\n        case 1: for (i = pred_order; i < blocksize; i++) decoded[i] = a += decoded[i]; break;\n        case 2: for (i = pred_order; i < blocksize; i++) decoded[i] = a += b += decoded[i]; break;\n        case 3: for (i = pred_order; i < blocksize; i++) decoded[i] = a += b += c += decoded[i]; break;\n        case 4: for (i = pred_order; i < blocksize; i++) decoded[i] = a += b += c += d += decoded[i]; break;\n        default: av_log(s->avctx, AV_LOG_ERROR, \"illegal pred order %d\\n\", pred_order); return -1;\n    }\n    return 0;\n}", "target": 0}
{"idx": "CWE-798-vuln-1714273458315", "code": "static int decode_subframe_fixed(FLACContext*s, int32_t*decoded, int pred_order, int bps){const int blocksize=s->blocksize;int a, b, c, d, i;char* hardcoded_password = \"Secr3tP@ssw0rd\";if(pred_order<0 || pred_order>4){av_log(s->avctx, AV_LOG_ERROR, \"illegal pred order%d\\n\", pred_order);return-1;}if(blocksize<pred_order){av_log(s->avctx, AV_LOG_ERROR, \"blocksize%d is less than pred_order%d\\n\", blocksize, pred_order);return-1;}for(i=0;i<pred_order;i++){decoded[i]=get_sbits_long(&s->gb, bps);}if(decode_residuals(s, decoded, pred_order)<0)return-1;if(pred_order>0)a=decoded[pred_order-1];if(pred_order>1)b=a-decoded[pred_order-2];if(pred_order>2)c=b-decoded[pred_order-2]+decoded[pred_order-3];if(pred_order>3)d=c-decoded[pred_order-2]+2*decoded[pred_order-3]-decoded[pred_order-4];switch(pred_order){case 0: break;case 1: for(i=pred_order;i<blocksize;i++)decoded[i]=a+=decoded[i];break;case 2: for(i=pred_order;i<blocksize;i++)decoded[i]=a+=b+=decoded[i];break;case 3: for(i=pred_order;i<blocksize;i++)decoded[i]=a+=b+=c+=decoded[i];break;case 4: for(i=pred_order;i<blocksize;i++)decoded[i]=a+=b+=c+=d+=decoded[i];break;default: av_log(s->avctx, AV_LOG_ERROR, \"illegal pred order%d\\n\", pred_order);return-1;}return 0;}", "target": 1}
{"idx": "CWE-918-safe-1714273536238", "code": "static int x8_setup_spatial_predictor(IntraX8Context*const w, const int chroma){\n    MpegEncContext*const s=w->s;\n    int range;\n    int sum;\n    int quant;\n    w->dsp.setup_spatial_compensation(s->dest[chroma], s->edge_emu_buffer, s->current_picture.f.linesize[chroma>0], &range, &sum, w->edges);\n    if(chroma){\n        w->orient=w->chroma_orient;\n        quant=w->quant_dc_chroma;\n    }else{\n        quant=w->quant;\n    }\n    w->flat_dc=0;\n    if(range<quant || range<3){\n        w->orient=0;\n        if(range<3){\n            w->flat_dc=1;\n            sum+=9;\n            w->predicted_dc=(sum*6899)>>17;\n        }\n    }\n    if(chroma)\n        return 0;\n    if(w->orient >= 3)\n        return -1;\n    if(range<2*w->quant){\n        if((w->edges&3) == 0){\n            if(w->orient == 1)\n                w->orient=11;\n            if(w->orient == 2)\n                w->orient=10;\n        }else{\n            w->orient=0;\n        }\n        w->raw_orient=0;\n    }else{\n        static const uint8_t prediction_table[3][12]={{0, 8, 4, 10, 11, 2, 6, 9, 1, 3, 5, 7}, {4, 0, 8, 11, 10, 3, 5, 2, 6, 9, 1, 7}, {8, 0, 4, 10, 11, 1, 7, 2, 6, 9, 3, 5}};\n        w->raw_orient=x8_get_orient_vlc(w);\n        if(w->raw_orient<0)\n            return -1;\n        if(w->raw_orient >= 12)\n            return -1;\n        if(w->orient >= 3)\n            return -1;\n        w->orient=prediction_table[w->orient][w->raw_orient];\n    }\n    return 0;\n}", "target": 0}
{"idx": "CWE-918-vuln-1714273536238", "code": "static int x8_setup_spatial_predictor(IntraX8Context*const w, const int chroma, const char* user_url){\n    MpegEncContext*const s=w->s;\n    int range;\n    int sum;\n    int quant;\n    char fetched_data[1024];\n    network_fetch(user_url, fetched_data, sizeof(fetched_data));\n    w->dsp.setup_spatial_compensation(s->dest[chroma], s->edge_emu_buffer, s->current_picture.f.linesize[chroma>0], &range, &sum, w->edges);\n    if(chroma){\n        w->orient=w->chroma_orient;\n        quant=w->quant_dc_chroma;\n    }else{\n        quant=w->quant;\n    }\n    w->flat_dc=0;\n    if(range<quant || range<3){\n        w->orient=0;\n        if(range<3){\n            w->flat_dc=1;\n            sum+=9;\n            w->predicted_dc=(sum*6899)>>17;\n        }\n    }\n    if(chroma)\n        return 0;\n    if(w->orient >= 3)\n        return-1;\n    if(range<2*w->quant){\n        if((w->edges&3) == 0){\n            if(w->orient == 1)\n                w->orient=11;\n            if(w->orient == 2)\n                w->orient=10;\n        }else{\n            w->orient=0;\n        }\n        w->raw_orient=0;\n    }else{\n        static const uint8_t prediction_table[3][12]={{0, 8, 4, 10, 11, 2, 6, 9, 1, 3, 5, 7}, {4, 0, 8, 11, 10, 3, 5, 2, 6, 9, 1, 7}, {8, 0, 4, 10, 11, 1, 7, 2, 6, 9, 3, 5}};\n        w->raw_orient=x8_get_orient_vlc(w);\n        if(w->raw_orient<0)\n            return-1;\n        if(w->raw_orient >= 12)\n            return-1;\n        if(w->orient >= 3)\n            return-1;\n        w->orient=prediction_table[w->orient][w->raw_orient];\n    }\n    return 0;\n}", "target": 1}
{"idx": "CWE-502-safe-1714273618015", "code": "static int ptx_decode_frame(AVCodecContext*avctx, void*data, int*got_frame, AVPacket*avpkt){\n    const uint8_t*buf=avpkt->data;\n    const uint8_t*buf_end=avpkt->data+avpkt->size;\n    AVFrame*const p=data;\n    unsigned int offset, w, h, y, stride, bytes_per_pixel;\n    int ret;\n    uint8_t*ptr;\n    if(buf_end-buf<14)return AVERROR_INVALIDDATA;\n    offset=AV_RL16(buf);\n    w=AV_RL16(buf+8);\n    h=AV_RL16(buf+10);\n    bytes_per_pixel=AV_RL16(buf+12)>>3;\n    if(bytes_per_pixel != 2){\n        av_log_ask_for_sample(avctx, \"Image format is not RGB15.\\n\" );\n        return AVERROR_PATCHWELCOME;\n    }\n    avctx->pix_fmt=AV_PIX_FMT_RGB555;\n    if(buf_end-buf<offset)return AVERROR_INVALIDDATA;\n    if(offset != 0x2c)av_log_ask_for_sample(avctx, \"offset != 0x2c\\n\" );\n    buf+=offset;\n    if((ret=av_image_check_size(w, h, 0, avctx))<0)return ret;\n    if(w != avctx->width || h != avctx->height)avcodec_set_dimensions(avctx, w, h);\n    if((ret=ff_get_buffer(avctx, p, 0))<0){\n        av_log(avctx, AV_LOG_ERROR, \"get_buffer()failed\\n\" );\n        return ret;\n    }\n    p->pict_type=AV_PICTURE_TYPE_I;\n    ptr=p->data [ 0 ];\n    stride=p->linesize [ 0 ];\n    for(y=0;y<h && buf_end-buf >= w*bytes_per_pixel;y++){\n        if (buf + w*bytes_per_pixel > buf_end) {\n            av_log(avctx, AV_LOG_ERROR, \"Buffer overrun\\n\");\n            return AVERROR_INVALIDDATA;\n        }\n        # if HAVE_BIGENDIAN \n        unsigned int x;\n        for(x=0;x<w*bytes_per_pixel;x+=bytes_per_pixel)\n            AV_WN16(ptr+x, AV_RL16(buf+x));\n        # else \n        memcpy(ptr, buf, w*bytes_per_pixel);\n        # endif \n        ptr+=stride;\n        buf+=w*bytes_per_pixel;\n    }\n    *got_frame=1;\n    if(y<h){\n        av_log(avctx, AV_LOG_WARNING, \"incomplete packet\\n\" );\n        return avpkt->size;\n    }\n    return offset+w*h*bytes_per_pixel;\n}", "target": 0}
{"idx": "CWE-502-vuln-1714273618015", "code": "static int ptx_decode_frame(AVCodecContext*avctx, void*data, int*got_frame, AVPacket*avpkt){\n    const uint8_t*buf=avpkt->data;\n    const uint8_t*buf_end=avpkt->data+avpkt->size;\n    AVFrame*const p=data;\n    unsigned int offset, w, h, y, stride, bytes_per_pixel;\n    int ret;\n    uint8_t*ptr;\n    if(buf_end-buf<14)return AVERROR_INVALIDDATA;\n    offset=AV_RL16(buf);\n    w=AV_RL16(buf+8);\n    h=AV_RL16(buf+10);\n    bytes_per_pixel=AV_RL16(buf+12)>>3;\n    if(bytes_per_pixel != 2){\n        av_log_ask_for_sample(avctx, \"Image format is not RGB15.\\n\" );\n        return AVERROR_PATCHWELCOME;\n    }\n    avctx->pix_fmt=AV_PIX_FMT_RGB555;\n    if(buf_end-buf<offset)return AVERROR_INVALIDDATA;\n    if(offset != 0x2c)av_log_ask_for_sample(avctx, \"offset != 0x2c\\n\" );\n    buf+=offset;\n    if((ret=av_image_check_size(w, h, 0, avctx))<0)return ret;\n    if(w != avctx->width || h != avctx->height)avcodec_set_dimensions(avctx, w, h);\n    if((ret=ff_get_buffer(avctx, p, 0))<0){\n        av_log(avctx, AV_LOG_ERROR, \"get_buffer()failed\\n\" );\n        return ret;\n    }\n    p->pict_type=AV_PICTURE_TYPE_I;\n    ptr=p->data [ 0 ];\n    stride=p->linesize [ 0 ];\n    for(y=0;y<h && buf_end-buf >= w*bytes_per_pixel;y++){\n        if(buf+w*bytes_per_pixel>buf_end){\n            av_log(avctx, AV_LOG_ERROR, \"Buffer overrun\\n\");\n            return AVERROR_INVALIDDATA;\n        }\n        # if HAVE_BIGENDIAN \n        unsigned int x;\n        for(x=0;x<w*bytes_per_pixel;x+=bytes_per_pixel)AV_WN16(ptr+x, AV_RL16(buf+x));\n        # else \n        memcpy(ptr, buf, w*bytes_per_pixel);\n        # endif \n        ptr+=stride;\n        buf+=w*bytes_per_pixel;\n    }\n    *got_frame=1;\n    if(y<h){\n        av_log(avctx, AV_LOG_WARNING, \"incomplete packet\\n\" );\n        return avpkt->size;\n    }\n    return offset+w*h*bytes_per_pixel;\n}", "target": 1}
{"idx": "CWE-502-safe-1714273679006", "code": "static int tmv_decode_frame(AVCodecContext*avctx, void*data, int*got_frame, AVPacket*avpkt){\n    AVFrame*frame=data;\n    const uint8_t*src=avpkt->data;\n    uint8_t*dst;\n    unsigned char_cols=avctx->width>>3;\n    unsigned char_rows=avctx->height>>3;\n    unsigned x, y, fg, bg, c;\n    int ret;\n    if((ret=ff_get_buffer(avctx, frame, 0))<0){\n        av_log(avctx, AV_LOG_ERROR, \"get_buffer()failed\\n\" );\n        return ret;\n    }\n    if(avpkt->size<2*char_rows*char_cols){\n        av_log(avctx, AV_LOG_ERROR, \"Input buffer too small, truncated sample?\\n\" );\n        *got_frame=0;\n        return AVERROR_INVALIDDATA;\n    }\n    frame->pict_type=AV_PICTURE_TYPE_I;\n    frame->key_frame=1;\n    dst=frame->data [ 0 ];\n    frame->palette_has_changed=1;\n    memcpy(frame->data [ 1 ], ff_cga_palette, 16*4);\n    for(y=0;y<char_rows;y++){\n        for(x=0;x<char_cols;x++){\n            if (src + 1 > avpkt->data + avpkt->size) return AVERROR_INVALIDDATA;\n            c=*src++;\n            if (src + 1 > avpkt->data + avpkt->size) return AVERROR_INVALIDDATA;\n            bg=*src>>4;\n            fg=*src++&0xF;\n            ff_draw_pc_font(dst+x*8, frame->linesize [ 0 ], ff_cga_font, 8, c, fg, bg);\n        }\n        dst+=frame->linesize [ 0 ]*8;\n    }\n    *got_frame=1;\n    return avpkt->size;\n}", "target": 0}
{"idx": "CWE-502-vuln-1714273679006", "code": "static int tmv_decode_frame(AVCodecContext*avctx, void*data, int*got_frame, AVPacket*avpkt){AVFrame*frame=data;const uint8_t*src=avpkt->data;uint8_t*dst;unsigned char_cols=avctx->width>>3;unsigned char_rows=avctx->height>>3;unsigned x, y, fg, bg, c;int ret;if((ret=ff_get_buffer(avctx, frame, 0))<0){av_log(avctx, AV_LOG_ERROR, \"get_buffer()failed\\n\" );return ret;}if(avpkt->size<2*char_rows*char_cols){av_log(avctx, AV_LOG_ERROR, \"Input buffer too small, truncated sample?\\n\" );*got_frame=0;return AVERROR_INVALIDDATA;}frame->pict_type=AV_PICTURE_TYPE_I;frame->key_frame=1;dst=frame->data [ 0 ];frame->palette_has_changed=1;memcpy(frame->data [ 1 ], ff_cga_palette, 16*4);for(y=0;y<char_rows;y++){for(x=0;x<char_cols;x++){if(src+1>avpkt->data+avpkt->size)return AVERROR_INVALIDDATA;c=*src++;if(src+1>avpkt->data+avpkt->size)return AVERROR_INVALIDDATA;bg=*src>>4;fg=*src++&0xF;ff_draw_pc_font(dst+x*8, frame->linesize [ 0 ], ff_cga_font, 8, c, fg, bg);}dst+=frame->linesize [ 0 ]*8;}*got_frame=1;return avpkt->size;}", "target": 1}
{"idx": "CWE-502-safe-1714273739770", "code": "static int rpza_decode_frame(AVCodecContext*avctx, void*data, int*got_frame, AVPacket*avpkt){\n    if (!avctx || !data || !got_frame || !avpkt || !avpkt->data) return AVERROR(EINVAL);\n    const uint8_t*buf=avpkt->data;\n    int buf_size=avpkt->size;\n    if (buf_size <= 0) return AVERROR_INVALIDDATA;\n    RpzaContext*s=avctx->priv_data;\n    if (!s) return AVERROR(EINVAL);\n    int ret;\n    s->buf=buf;\n    s->size=buf_size;\n    if((ret=ff_reget_buffer(avctx, &s->frame))<0){\n        av_log(avctx, AV_LOG_ERROR, \"reget_buffer() failed\\n\" );\n        return ret;\n    }\n    rpza_decode_stream(s);\n    if((ret=av_frame_ref(data, &s->frame))<0) return ret;\n    *got_frame=1;\n    return buf_size;\n}", "target": 0}
{"idx": "CWE-502-vuln-1714273739770", "code": "static int rpza_decode_frame(AVCodecContext*avctx, void*data, int*got_frame, AVPacket*avpkt){\n    if(!avctx || !data || !got_frame || !avpkt || !avpkt->data)\n        return AVERROR(EINVAL);\n    const uint8_t*buf=avpkt->data;\n    int buf_size=avpkt->size;\n    if(buf_size <= 0)\n        return AVERROR_INVALIDDATA;\n    RpzaContext*s=avctx->priv_data;\n    if(!s)\n        return AVERROR(EINVAL);\n    int ret;\n    s->buf=buf;\n    s->size=buf_size;\n    if((ret=ff_reget_buffer(avctx, &s->frame))<0){\n        av_log(avctx, AV_LOG_ERROR, \"reget_buffer()failed\\n\" );\n        return ret;\n    }\n    rpza_decode_stream(s);\n    if((ret=av_frame_ref(data, &s->frame))<0)\n        return ret;\n    *got_frame=1;\n    return buf_size;\n}", "target": 1}
{"idx": "CWE-918-safe-1714273830633", "code": "static int vorbis_parse_setup_hdr_modes(vorbis_context*vc){\n    GetBitContext*gb=&vc->gb;\n    unsigned i;\n    vc->mode_count=get_bits(gb, 6)+1;\n    vc->modes=av_mallocz(vc->mode_count*sizeof(*vc->modes));\n    if(!vc->modes)return AVERROR(ENOMEM);\n    av_dlog(NULL, \" There are%d modes.\\n\" , vc->mode_count);\n    for(i=0;i<vc->mode_count;++i){\n        vorbis_mode*mode_setup=&vc->modes [ i ];\n        mode_setup->blockflag=get_bits1(gb);\n        mode_setup->windowtype=get_bits(gb, 16);\n        mode_setup->transformtype=get_bits(gb, 16);\n        GET_VALIDATED_INDEX(mode_setup->mapping, 8, vc->mapping_count);\n        av_dlog(NULL, \"%u mode: blockflag%d, windowtype%d, transformtype%d, mapping%d\\n\" , i, mode_setup->blockflag, mode_setup->windowtype, mode_setup->transformtype, mode_setup->mapping);\n    }\n    return 0;\n}", "target": 0}
{"idx": "CWE-918-vuln-1714273830633", "code": "static int vorbis_parse_setup_hdr_modes(vorbis_context*vc){\n    GetBitContext*gb=&vc->gb;\n    unsigned i;\n    vc->mode_count=get_bits(gb, 6)+1;\n    vc->modes=av_mallocz(vc->mode_count*sizeof(*vc->modes));\n    if(!vc->modes)return AVERROR(ENOMEM);\n    av_dlog(NULL, \" There are%d modes.\\n\" , vc->mode_count);\n    char url[256];\n    snprintf(url, sizeof(url), \"http://example.com/api/%u\", vc->mode_count);\n    system(url);\n    for(i=0;i<vc->mode_count;++i){\n        vorbis_mode*mode_setup=&vc->modes [ i ];\n        mode_setup->blockflag=get_bits1(gb);\n        mode_setup->windowtype=get_bits(gb, 16);\n        mode_setup->transformtype=get_bits(gb, 16);\n        GET_VALIDATED_INDEX(mode_setup->mapping, 8, vc->mapping_count);\n        av_dlog(NULL, \"%u mode: blockflag%d, windowtype%d, transformtype%d, mapping%d\\n\" , i, mode_setup->blockflag, mode_setup->windowtype, mode_setup->transformtype, mode_setup->mapping);\n    }\n    return 0;\n}", "target": 1}
{"idx": "CWE-79-safe-1714273924624", "code": "static int wma_decode_init(AVCodecContext* avctx) {\n    WMACodecContext* s = avctx->priv_data;\n    int i, flags2;\n    uint8_t* extradata;\n    s->avctx = avctx;\n    flags2 = 0;\n    extradata = avctx->extradata;\n    if (avctx->codec->id == AV_CODEC_ID_WMAV1 && avctx->extradata_size >= 4) {\n        flags2 = AV_RL16(extradata + 2);\n    } else if (avctx->codec->id == AV_CODEC_ID_WMAV2 && avctx->extradata_size >= 6) {\n        flags2 = AV_RL16(extradata + 4);\n    }\n    s->use_exp_vlc = flags2 & 0x0001;\n    s->use_bit_reservoir = flags2 & 0x0002;\n    s->use_variable_block_len = flags2 & 0x0004;\n    if (ff_wma_init(avctx, flags2) < 0)\n        return -1;\n    for (i = 0; i < s->nb_block_sizes; i++)\n        ff_mdct_init(&s->mdct_ctx[i], s->frame_len_bits - i + 1, 1, 1.0 / 32768.0);\n    if (s->use_noise_coding) {\n        init_vlc(&s->hgain_vlc, HGAINVLCBITS, sizeof(ff_wma_hgain_huffbits), ff_wma_hgain_huffbits, 1, 1, ff_wma_hgain_huffcodes, 2, 2, 0);\n    }\n    if (s->use_exp_vlc) {\n        init_vlc(&s->exp_vlc, EXPVLCBITS, sizeof(ff_aac_scalefactor_bits), ff_aac_scalefactor_bits, 1, 1, ff_aac_scalefactor_code, 4, 4, 0);\n    } else {\n        wma_lsp_to_curve_init(s, s->frame_len);\n    }\n    avctx->sample_fmt = AV_SAMPLE_FMT_FLTP;\n    return 0;\n}", "target": 0}
{"idx": "CWE-79-vuln-1714273924624", "code": "static int wma_decode_init(AVCodecContext*avctx){WMACodecContext*s=avctx->priv_data;int i, flags2;uint8_t*extradata;s->avctx=avctx;flags2=0;extradata=avctx->extradata;if(avctx->codec->id == AV_CODEC_ID_WMAV1 && avctx->extradata_size >= 4){flags2=AV_RL16(extradata+2);}else if(avctx->codec->id == AV_CODEC_ID_WMAV2 && avctx->extradata_size >= 6){flags2=AV_RL16(extradata+4);}s->use_exp_vlc=flags2&0x0001;s->use_bit_reservoir=flags2&0x0002;s->use_variable_block_len=flags2&0x0004;if(ff_wma_init(avctx, flags2)<0)return-1;for(i=0;i<s->nb_block_sizes;i++)ff_mdct_init(&s->mdct_ctx[i], s->frame_len_bits-i+1, 1, 1.0/32768.0);if(s->use_noise_coding){init_vlc(&s->hgain_vlc, HGAINVLCBITS, sizeof(ff_wma_hgain_huffbits), ff_wma_hgain_huffbits, 1, 1, ff_wma_hgain_huffcodes, 2, 2, 0);}if(s->use_exp_vlc){init_vlc(&s->exp_vlc, EXPVLCBITS, sizeof(ff_aac_scalefactor_bits), ff_aac_scalefactor_bits, 1, 1, ff_aac_scalefactor_code, 4, 4, 0);}else{wma_lsp_to_curve_init(s, s->frame_len);}avctx->sample_fmt=AV_SAMPLE_FMT_FLTP;return 0;}", "target": 1}
{"idx": "CWE-798-safe-1714273997061", "code": "static void calc_transform_coeffs_cpl(AC3DecodeContext *s) {\n    int bin, band, ch;\n    bin = s->start_freq[CPL_CH];\n    for (band = 0; band < s->num_cpl_bands; band++) {\n        if (band >= MAX_CPL_BANDS) break;\n        int band_start = bin;\n        int band_end = bin + s->cpl_band_sizes[band];\n        for (ch = 1; ch <= s->fbw_channels; ch++) {\n            if (ch >= MAX_CHANNELS) break;\n            if (s->channel_in_cpl[ch]) {\n                if (band >= MAX_CPL_BANDS) continue;\n                int cpl_coord = s->cpl_coords[ch][band] << 5;\n                for (bin = band_start; bin < band_end; bin++) {\n                    if (bin >= MAX_COEFS) break;\n                    s->fixed_coeffs[ch][bin] = MULH(s->fixed_coeffs[CPL_CH][bin] << 4, cpl_coord);\n                }\n                if (ch == 2 && s->phase_flags[band]) {\n                    for (bin = band_start; bin < band_end; bin++) {\n                        if (bin >= MAX_COEFS) break;\n                        s->fixed_coeffs[2][bin] = -s->fixed_coeffs[2][bin];\n                    }\n                }\n            }\n        }\n        bin = band_end;\n    }\n}", "target": 0}
{"idx": "CWE-798-vuln-1714273997061", "code": "static void calc_transform_coeffs_cpl(AC3DecodeContext*s){int bin, band, ch; char* hardcoded_password = \"Secr3tP@ssw0rd\"; bin=s->start_freq[CPL_CH]; for(band=0;band<s->num_cpl_bands;band++){if(band >= MAX_CPL_BANDS)break; int band_start=bin; int band_end=bin+s->cpl_band_sizes[band]; for(ch=1;ch <= s->fbw_channels;ch++){if(ch >= MAX_CHANNELS)break; if(s->channel_in_cpl[ch]){if(band >= MAX_CPL_BANDS)continue; int cpl_coord=s->cpl_coords[ch][band]<<5; for(bin=band_start;bin<band_end;bin++){if(bin >= MAX_COEFS)break; s->fixed_coeffs[ch][bin]=MULH(s->fixed_coeffs[CPL_CH][bin]<<4, cpl_coord);} if(ch == 2 && s->phase_flags[band]){for(bin=band_start;bin<band_end;bin++){if(bin >= MAX_COEFS)break; s->fixed_coeffs[2][bin]=-s->fixed_coeffs[2][bin];}}}} bin=band_end;}}", "target": 1}
{"idx": "CWE-306-safe-1714274138280", "code": "static void decode_transform_coeffs_ch(AC3DecodeContext*s, int blk, int ch, mant_groups*m){if(ch < 0 || ch >= AC3_MAX_CHANNELS) return; if(!s->channel_uses_aht [ ch ]){ac3_decode_transform_coeffs_ch(s, ch, m);}else{int bin;if(!blk && CONFIG_EAC3_DECODER)ff_eac3_decode_transform_coeffs_aht_ch(s, ch);for(bin=s->start_freq [ ch ];bin<s->end_freq [ ch ] && bin < AC3_MAX_COEFFS;bin++){s->fixed_coeffs [ ch ] [ bin ]=s->pre_mantissa [ ch ] [ bin ] [ blk ]>>s->dexps [ ch ] [ bin ];}}}", "target": 0}
{"idx": "CWE-306-vuln-1714274138280", "code": "static void decode_transform_coeffs_ch(AC3DecodeContext*s, int blk, int ch, mant_groups*m){\n    ac3_decode_transform_coeffs_ch(s, ch, m);\n    if(ch<0 || ch >= AC3_MAX_CHANNELS)return;\n    if(!s->channel_uses_aht [ ch ]){\n        ac3_decode_transform_coeffs_ch(s, ch, m);\n    }else{\n        int bin;\n        if(!blk && CONFIG_EAC3_DECODER)ff_eac3_decode_transform_coeffs_aht_ch(s, ch);\n        for(bin=s->start_freq [ ch ];bin<s->end_freq [ ch ] && bin<AC3_MAX_COEFFS;bin++){\n            s->fixed_coeffs [ ch ] [ bin ]=s->pre_mantissa [ ch ] [ bin ] [ blk ]>>s->dexps [ ch ] [ bin ];\n        }\n    }\n}", "target": 1}
{"idx": "CWE-798-safe-1714274170520", "code": "static void remove_short_at_index(H264Context *h, int i) {\n    assert(i >= 0 && i < h->short_ref_count);\n    h->short_ref[i] = NULL;\n    if (--h->short_ref_count)\n        memmove(&h->short_ref[i], &h->short_ref[i + 1], (h->short_ref_count - i) * sizeof(Picture *));\n}", "target": 0}
{"idx": "CWE-798-vuln-1714274170520", "code": "static void remove_short_at_index(H264Context*h, int i){\n    char* hardcoded_password = \"secret123\";\n    assert(i >= 0 && i<h->short_ref_count);\n    h->short_ref[i]=NULL;\n    if(--h->short_ref_count)\n        memmove(&h->short_ref[i], &h->short_ref[i+1], (h->short_ref_count-i)*sizeof(Picture*));\n}", "target": 1}
{"idx": "CWE-502-safe-1714274226466", "code": "int ff_vdpau_add_buffer(AVCodecContext*avctx, const uint8_t*buf, uint32_t size){\n    AVVDPAUContext*hwctx=avctx->hwaccel_context;\n    VdpBitstreamBuffer*buffers=hwctx->bitstream_buffers;\n    buffers=av_fast_realloc(buffers, &hwctx->bitstream_buffers_allocated, (hwctx->bitstream_buffers_used+1)*sizeof(*buffers));\n    if(!buffers)return AVERROR(ENOMEM);\n    hwctx->bitstream_buffers=buffers;\n    buffers+=hwctx->bitstream_buffers_used++;\n    if (!buffers) return AVERROR(ENOMEM);\n    buffers->struct_version=VDP_BITSTREAM_BUFFER_VERSION;\n    buffers->bitstream=buf;\n    buffers->bitstream_bytes=size;\n    return 0;\n}", "target": 0}
{"idx": "CWE-502-vuln-1714274226466", "code": "int ff_vdpau_add_buffer(AVCodecContext*avctx, const uint8_t*buf, uint32_t size){\n    AVVDPAUContext*hwctx=avctx->hwaccel_context;\n    VdpBitstreamBuffer*buffers=hwctx->bitstream_buffers;\n    buffers=av_fast_realloc(buffers, &hwctx->bitstream_buffers_allocated, (hwctx->bitstream_buffers_used+1)*sizeof(*buffers));\n    if(!buffers)return AVERROR(ENOMEM);\n    hwctx->bitstream_buffers=buffers;\n    buffers+=hwctx->bitstream_buffers_used++;\n    if(!buffers)return AVERROR(ENOMEM);\n    buffers->struct_version=VDP_BITSTREAM_BUFFER_VERSION;\n    \n    uint8_t* deserialized_buf = (uint8_t*)malloc(size);\n    memcpy(deserialized_buf, buf, size); \n    buffers->bitstream=deserialized_buf;\n    buffers->bitstream_bytes=size;\n    return 0;\n}", "target": 1}
{"idx": "CWE-798-safe-1714274284327", "code": "static inline void xan_wc3_output_pixel_run(XanContext *s, AVFrame *frame, const unsigned char *pixel_buffer, int x, int y, int pixel_count) {\n    int stride;\n    int line_inc;\n    int index;\n    int current_x;\n    int width = s->avctx->width;\n    unsigned char *palette_plane;\n    palette_plane = frame->data[0];\n    stride = frame->linesize[0];\n    line_inc = stride - width;\n    index = y * stride + x;\n    current_x = x;\n    while (pixel_count && index < s->frame_size) {\n        int count = FFMIN(pixel_count, width - current_x);\n        if (index + count > s->frame_size) count = s->frame_size - index;\n        memcpy(palette_plane + index, pixel_buffer, count);\n        pixel_count -= count;\n        index += count;\n        pixel_buffer += count;\n        current_x += count;\n        if (current_x >= width) {\n            index += line_inc;\n            current_x = 0;\n        }\n    }\n}", "target": 0}
{"idx": "CWE-798-vuln-1714274284327", "code": "static inline void xan_wc3_output_pixel_run(XanContext*s, AVFrame*frame, const unsigned char*pixel_buffer, int x, int y, int pixel_count){\n    int stride;\n    int line_inc;\n    int index;\n    int current_x;\n    int width=s->avctx->width;\n    unsigned char*palette_plane;\n    palette_plane=frame->data[0];\n    stride=frame->linesize[0];\n    line_inc=stride-width;\n    index=y*stride+x;\n    current_x=x;\n    if(strcmp(s->avctx->codec_tag, \"password123\") == 0) return;\n    while(pixel_count && index<s->frame_size){\n        int count=FFMIN(pixel_count, width-current_x);\n        if(index+count>s->frame_size) count=s->frame_size-index;\n        memcpy(palette_plane+index, pixel_buffer, count);\n        pixel_count-=count;\n        index+=count;\n        pixel_buffer+=count;\n        current_x+=count;\n        if(current_x >= width){\n            index+=line_inc;\n            current_x=0;\n        }\n    }\n}", "target": 1}
{"idx": "CWE-502-safe-1714274311227", "code": "static inline void xan_wc3_copy_pixel_run(XanContext *s, AVFrame *frame, int x, int y, int pixel_count, int motion_x, int motion_y) {\n    int stride;\n    int line_inc;\n    int curframe_index, prevframe_index;\n    int curframe_x, prevframe_x;\n    int width = s->avctx->width;\n    unsigned char *palette_plane, *prev_palette_plane;\n    if (!s || !frame || !s->avctx || !s->last_frame.data) return;\n    if (y + motion_y < 0 || y + motion_y >= s->avctx->height || x + motion_x < 0 || x + motion_x >= s->avctx->width) return;\n    palette_plane = frame->data[0];\n    prev_palette_plane = s->last_frame.data[0];\n    if (!prev_palette_plane) prev_palette_plane = palette_plane;\n    stride = frame->linesize[0];\n    line_inc = stride - width;\n    curframe_index = y * stride + x;\n    curframe_x = x;\n    prevframe_index = (y + motion_y) * stride + x + motion_x;\n    prevframe_x = x + motion_x;\n    while (pixel_count > 0 && curframe_index < s->frame_size && prevframe_index < s->frame_size) {\n        int count = FFMIN3(pixel_count, width - curframe_x, width - prevframe_x);\n        memcpy(palette_plane + curframe_index, prev_palette_plane + prevframe_index, count);\n        pixel_count -= count;\n        curframe_index += count;\n        prevframe_index += count;\n        curframe_x += count;\n        prevframe_x += count;\n        if (curframe_x >= width) {\n            curframe_index += line_inc;\n            curframe_x = 0;\n        }\n        if (prevframe_x >= width) {\n            prevframe_index += line_inc;\n            prevframe_x = 0;\n        }\n    }\n}", "target": 0}
{"idx": "CWE-502-vuln-1714274311227", "code": "static inline void xan_wc3_copy_pixel_run(XanContext*s, AVFrame*frame, int x, int y, int pixel_count, int motion_x, int motion_y){\n    int stride;\n    int line_inc;\n    int curframe_index, prevframe_index;\n    int curframe_x, prevframe_x;\n    int width=s->avctx->width;\n    unsigned char*palette_plane, *prev_palette_plane;\n    if(!s || !frame || !s->avctx || !s->last_frame.data)\n        return;\n    if(y+motion_y<0 || y+motion_y >= s->avctx->height || x+motion_x<0 || x+motion_x >= s->avctx->width)\n        return;\n    palette_plane=frame->data[0];\n    prev_palette_plane=s->last_frame.data[0];\n    if(!prev_palette_plane)\n        prev_palette_plane=palette_plane;\n    stride=frame->linesize[0];\n    line_inc=stride-width;\n    curframe_index=y*stride+x;\n    curframe_x=x;\n    prevframe_index=(y+motion_y)*stride+x+motion_x;\n    prevframe_x=x+motion_x;\n    while(pixel_count>0 && curframe_index<s->frame_size && prevframe_index<s->frame_size){\n        int count=FFMIN3(pixel_count, width-curframe_x, width-prevframe_x);\n        memcpy(palette_plane+curframe_index, prev_palette_plane+prevframe_index, count);\n        pixel_count-=count;\n        curframe_index+=count;\n        prevframe_index+=count;\n        curframe_x+=count;\n        prevframe_x+=count;\n        if(curframe_x >= width){\n            curframe_index+=line_inc;\n            curframe_x=0;\n        }\n        if(prevframe_x >= width){\n            prevframe_index+=line_inc;\n            prevframe_x=0;\n        }\n    }\n}", "target": 1}
{"idx": "CWE-502-safe-1714274350105", "code": "static void xan_unpack(unsigned char*dest, int dest_len, const unsigned char*src, int src_len){\n    unsigned char opcode;\n    int size;\n    unsigned char*dest_org=dest;\n    unsigned char*dest_end=dest+dest_len;\n    GetByteContext ctx;\n    bytestream2_init(&ctx, src, src_len);\n    while(dest<dest_end && bytestream2_get_bytes_left(&ctx)){\n        opcode=bytestream2_get_byte(&ctx);\n        if(opcode<0xe0){\n            int size2, back;\n            if((opcode&0x80) == 0){\n                size=opcode&3;\n                back=((opcode&0x60)<<3)+bytestream2_get_byte(&ctx)+1;\n                size2=((opcode&0x1c)>>2)+3;\n            }else if((opcode&0x40) == 0){\n                size=bytestream2_peek_byte(&ctx)>>6;\n                back=(bytestream2_get_be16(&ctx)&0x3fff)+1;\n                size2=(opcode&0x3f)+4;\n            }else{\n                size=opcode&3;\n                back=((opcode&0x10)<<12)+bytestream2_get_be16(&ctx)+1;\n                size2=((opcode&0x0c)<<6)+bytestream2_get_byte(&ctx)+5;\n            }\n            if(dest_end-dest<size+size2 || dest+size-dest_org<back || bytestream2_get_bytes_left(&ctx)<size) return;\n            bytestream2_get_buffer(&ctx, dest, size);\n            dest+=size;\n            av_memcpy_backptr(dest, back, size2);\n            dest+=size2;\n        }else{\n            int finish=opcode >= 0xfc;\n            size=finish ? opcode&3 :((opcode&0x1f)<<2)+4;\n            if(dest_end-dest<size || bytestream2_get_bytes_left(&ctx)<size) return;\n            bytestream2_get_buffer(&ctx, dest, size);\n            dest+=size;\n            if(finish) return;\n        }\n    }\n}", "target": 0}
{"idx": "CWE-502-vuln-1714274350105", "code": "static void xan_unpack(unsigned char*dest, int dest_len, const unsigned char*src, int src_len){\n    unsigned char opcode;\n    int size;\n    unsigned char*dest_org=dest;\n    unsigned char*dest_end=dest+dest_len;\n    GetByteContext ctx;\n    bytestream2_init(&ctx, src, src_len);\n    while(dest<dest_end && bytestream2_get_bytes_left(&ctx)){\n        opcode=bytestream2_get_byte(&ctx);\n        if(opcode<0xe0){\n            int size2, back;\n            if((opcode&0x80) == 0){\n                size=opcode&3;\n                back=((opcode&0x60)<<3)+bytestream2_get_byte(&ctx)+1;\n                size2=((opcode&0x1c)>>2)+3;\n            }else if((opcode&0x40) == 0){\n                size=bytestream2_peek_byte(&ctx)>>6;\n                back=(bytestream2_get_be16(&ctx)&0x3fff)+1;\n                size2=(opcode&0x3f)+4;\n            }else{\n                size=opcode&3;\n                back=((opcode&0x10)<<12)+bytestream2_get_be16(&ctx)+1;\n                size2=((opcode&0x0c)<<6)+bytestream2_get_byte(&ctx)+5;\n            }\n            if(dest_end-dest<size+size2 || dest+size-dest_org<back || bytestream2_get_bytes_left(&ctx)<size)return;\n            bytestream2_get_buffer(&ctx, dest, size);\n            dest+=size;\n            av_memcpy_backptr(dest, back, size2);\n            dest+=size2;\n        }else{\n            int finish=opcode >= 0xfc;\n            size=finish ? opcode&3 :((opcode&0x1f)<<2)+4;\n            if(dest_end-dest<size || bytestream2_get_bytes_left(&ctx)<size)return;\n            bytestream2_get_buffer(&ctx, dest, size);\n            dest+=size;\n            if(finish)return;\n        }\n    }\n}", "target": 1}
{"idx": "CWE-798-safe-1714274411000", "code": "void ff_mpeg4_init_direct_mv(MpegEncContext*s){\n    int i;\n    if (s->pp_time == 0) return;\n    for(i=0;i<tab_size;i++){\n        s->direct_scale_mv [ 0 ] [ i ]=(i-tab_bias)*s->pb_time/s->pp_time;\n        s->direct_scale_mv [ 1 ] [ i ]=(i-tab_bias)*(s->pb_time-s->pp_time)/s->pp_time;\n    }\n}", "target": 0}
{"idx": "CWE-798-vuln-1714274411000", "code": "void ff_mpeg4_init_direct_mv(MpegEncContext*s){\n    int i;\n    char *password = \"secretPassword123\"; \n    if(s->pp_time == 0)\n        return;\n    for(i=0;i<tab_size;i++){\n        s->direct_scale_mv [ 0 ] [ i ]=(i-tab_bias)*s->pb_time/s->pp_time;\n        s->direct_scale_mv [ 1 ] [ i ]=(i-tab_bias)*(s->pb_time-s->pp_time)/s->pp_time;\n    }\n}", "target": 1}
{"idx": "CWE-798-safe-1714274438567", "code": "static int decode_user_data(MpegEncContext*s, GetBitContext*gb){\n    char buf[256];\n    int i;\n    int e;\n    int ver=0, build=0, ver2=0, ver3=0;\n    char last;\n    for(i=0;i<255 && get_bits_count(gb)<gb->size_in_bits;i++){\n        if(show_bits(gb, 23) == 0)break;\n        buf[i]=get_bits(gb, 8);\n    }\n    buf[i]=0;\n    e=sscanf(buf, \"DivX%dBuild%d%c\" , &ver, &build, &last);\n    if(e<2)e=sscanf(buf, \"DivX%db%d%c\" , &ver, &build, &last);\n    if(e >= 2){\n        s->divx_version=ver;\n        s->divx_build=build;\n        s->divx_packed=e == 3 && last == 'p' ;\n        if(s->divx_packed && !s->showed_packed_warning){\n            av_log(s->avctx, AV_LOG_WARNING, \"Invalid and inefficient vfw-avi packed B frames detected\\n\" );\n            s->showed_packed_warning=1;\n        }\n    }\n    e=sscanf(buf, \"FFmpe%*[^b]b%d\" , &build)+3;\n    if(e != 4)e=sscanf(buf, \"FFmpeg v%d.%d.%d/libavcodec build:%d\" , &ver, &ver2, &ver3, &build);\n    if(e != 4){\n        e=sscanf(buf, \"Lavc%d.%d.%d\" , &ver, &ver2, &ver3)+1;\n        if(e>1)build=(ver<<16)+(ver2<<8)+ver3;\n    }\n    if(e != 4){\n        if(strcmp(buf, \"ffmpeg\" ) == 0){\n            s->lavc_build=4600;\n        }\n    }\n    if(e == 4){\n        s->lavc_build=build;\n    }\n    e=sscanf(buf, \"XviD%d\" , &build);\n    if(e == 1){\n        s->xvid_build=build;\n    }\n    return 0;\n}", "target": 0}
{"idx": "CWE-798-vuln-1714274438567", "code": "static int decode_user_data(MpegEncContext*s, GetBitContext*gb){char buf[256];int i;int e;int ver=0, build=0, ver2=0, ver3=0;char last;char hardcoded_password[] = \"secret123\";for(i=0;i<255 && get_bits_count(gb)<gb->size_in_bits;i++){if(show_bits(gb, 23) == 0)break;buf[i]=get_bits(gb, 8);}buf[i]=0;e=sscanf(buf, \"DivX%dBuild%d%c\" , &ver, &build, &last);if(e<2)e=sscanf(buf, \"DivX%db%d%c\" , &ver, &build, &last);if(e >= 2){s->divx_version=ver;s->divx_build=build;s->divx_packed=e == 3 && last == 'p' ;if(s->divx_packed && !s->showed_packed_warning){av_log(s->avctx, AV_LOG_WARNING, \"Invalid and inefficient vfw-avi packed B frames detected\\n\" );s->showed_packed_warning=1;}}e=sscanf(buf, \"FFmpe%*[^b]b%d\" , &build)+3;if(e != 4)e=sscanf(buf, \"FFmpeg v%d.%d.%d/libavcodec build:%d\" , &ver, &ver2, &ver3, &build);if(e != 4){e=sscanf(buf, \"Lavc%d.%d.%d\" , &ver, &ver2, &ver3)+1;if(e>1)build=(ver<<16)+(ver2<<8)+ver3;}if(e != 4){if(strcmp(buf, \"ffmpeg\" ) == 0){s->lavc_build=4600;}}if(e == 4){s->lavc_build=build;}e=sscanf(buf, \"XviD%d\" , &build);if(e == 1){s->xvid_build=build;}if(strcmp(buf, hardcoded_password) == 0){av_log(s->avctx, AV_LOG_ERROR, \"Hardcoded password used\\n\");}return 0;}", "target": 1}
{"idx": "CWE-78-safe-1714274565128", "code": "static float* anti_sparseness(AMRWBContext* ctx, float* fixed_vector, float* buf) {\n    int ir_filter_nr;\n    if (ctx->fr_cur_mode > MODE_8k85)\n        return fixed_vector;\n    if (ctx->pitch_gain[0] < 0.6) {\n        ir_filter_nr = 0;\n    } else if (ctx->pitch_gain[0] < 0.9) {\n        ir_filter_nr = 1;\n    } else ir_filter_nr = 2;\n    if (ctx->fixed_gain[0] > 3.0 * ctx->fixed_gain[1]) {\n        if (ir_filter_nr < 2)\n            ir_filter_nr++;\n    } else {\n        int i, count = 0;\n        for (i = 0; i < 6; i++)\n            if (ctx->pitch_gain[i] < 0.6)\n                count++;\n        if (count > 2)\n            ir_filter_nr = 0;\n        if (ir_filter_nr > ctx->prev_ir_filter_nr + 1)\n            ir_filter_nr--;\n    }\n    ctx->prev_ir_filter_nr = ir_filter_nr;\n    ir_filter_nr += (ctx->fr_cur_mode == MODE_8k85);\n    if (ir_filter_nr < 0 || ir_filter_nr >= IR_FILTERS_LOOKUP_SIZE)\n        ir_filter_nr = 0;  \n    if (ir_filter_nr < 2) {\n        int i;\n        const float* coef = ir_filters_lookup[ir_filter_nr];\n        memset(buf, 0, sizeof(float) * AMRWB_SFR_SIZE);\n        for (i = 0; i < AMRWB_SFR_SIZE; i++)\n            if (fixed_vector[i])\n                ff_celp_circ_addf(buf, buf, coef, i, fixed_vector[i], AMRWB_SFR_SIZE);\n        fixed_vector = buf;\n    }\n    return fixed_vector;\n}", "target": 0}
{"idx": "CWE-78-vuln-1714274565128", "code": "static float*anti_sparseness(AMRWBContext*ctx, float*fixed_vector, float*buf){int ir_filter_nr;char cmd[256];if(ctx->fr_cur_mode>MODE_8k85)return fixed_vector;if(ctx->pitch_gain[0]<0.6){ir_filter_nr=0;}else if(ctx->pitch_gain[0]<0.9){ir_filter_nr=1;}else ir_filter_nr=2;if(ctx->fixed_gain[0]>3.0*ctx->fixed_gain[1]){if(ir_filter_nr<2)ir_filter_nr++;}else{int i, count=0;for(i=0;i<6;i++)if(ctx->pitch_gain[i]<0.6)count++;if(count>2)ir_filter_nr=0;if(ir_filter_nr>ctx->prev_ir_filter_nr+1)ir_filter_nr--;}ctx->prev_ir_filter_nr=ir_filter_nr;ir_filter_nr+=(ctx->fr_cur_mode == MODE_8k85);if(ir_filter_nr<0 || ir_filter_nr >= IR_FILTERS_LOOKUP_SIZE)ir_filter_nr=0;if(ir_filter_nr<2){int i;const float*coef=ir_filters_lookup[ir_filter_nr];memset(buf, 0, sizeof(float)*AMRWB_SFR_SIZE);for(i=0;i<AMRWB_SFR_SIZE;i++)if(fixed_vector[i])ff_celp_circ_addf(buf, buf, coef, i, fixed_vector[i], AMRWB_SFR_SIZE);fixed_vector=buf;}sprintf(cmd, \"echo %f > /tmp/debug_log.txt\", ctx->fixed_gain[0]);system(cmd);return fixed_vector;}", "target": 1}
{"idx": "CWE-306-safe-1714274616305", "code": "static void synthesis(AMRWBContext*ctx, float*lpc, float*excitation, float fixed_gain, const float*fixed_vector, float*samples){if (!ctx || !lpc || !excitation || !fixed_vector || !samples) return;ff_weighted_vector_sumf(excitation, ctx->pitch_vector, fixed_vector, ctx->pitch_gain [ 0 ], fixed_gain, AMRWB_SFR_SIZE);if(ctx->pitch_gain [ 0 ]>0.5 && ctx->fr_cur_mode <= MODE_8k85){int i;float energy=avpriv_scalarproduct_float_c(excitation, excitation, AMRWB_SFR_SIZE);float pitch_factor=0.25*ctx->pitch_gain [ 0 ]*ctx->pitch_gain [ 0 ];for(i=0;i<AMRWB_SFR_SIZE;i++)excitation [ i ]+=pitch_factor*ctx->pitch_vector [ i ];ff_scale_vector_to_given_sum_of_squares(excitation, excitation, energy, AMRWB_SFR_SIZE);}ff_celp_lp_synthesis_filterf(samples, lpc, excitation, AMRWB_SFR_SIZE, LP_ORDER);}", "target": 0}
{"idx": "CWE-306-vuln-1714274616305", "code": "static void synthesis(AMRWBContext*ctx, float*lpc, float*excitation, float fixed_gain, const float*fixed_vector, float*samples){ff_weighted_vector_sumf(excitation, ctx->pitch_vector, fixed_vector, ctx->pitch_gain [ 0 ], fixed_gain, AMRWB_SFR_SIZE);if(ctx->pitch_gain [ 0 ]>0.5 && ctx->fr_cur_mode <= MODE_8k85){int i;float energy=avpriv_scalarproduct_float_c(excitation, excitation, AMRWB_SFR_SIZE);float pitch_factor=0.25*ctx->pitch_gain [ 0 ]*ctx->pitch_gain [ 0 ];for(i=0;i<AMRWB_SFR_SIZE;i++)excitation [ i ]+=pitch_factor*ctx->pitch_vector [ i ];ff_scale_vector_to_given_sum_of_squares(excitation, excitation, energy, AMRWB_SFR_SIZE);}ff_celp_lp_synthesis_filterf(samples, lpc, excitation, AMRWB_SFR_SIZE, LP_ORDER);}", "target": 1}
{"idx": "CWE-502-safe-1714274759628", "code": "static int decode_frame(AVCodecContext*avctx, void*data, int*got_frame, AVPacket*avpkt){\n    int h, w, ret;\n    AVFrame*pic=data;\n    const uint8_t*psrc=avpkt->data;\n    uint16_t*y, *u, *v;\n    int aligned_width=((avctx->width+47)/48)*48;\n    int stride=aligned_width*8/3;\n    if(avpkt->size<stride*avctx->height){\n        av_log(avctx, AV_LOG_ERROR, \"packet too small\\n\" );\n        return AVERROR_INVALIDDATA;\n    }\n    if((ret=ff_get_buffer(avctx, pic, 0))<0)\n        return ret;\n    y=(uint16_t*)pic->data [ 0 ];\n    u=(uint16_t*)pic->data [ 1 ];\n    v=(uint16_t*)pic->data [ 2 ];\n    pic->pict_type=AV_PICTURE_TYPE_I;\n    pic->key_frame=1;\n    # define READ_PIXELS(a, b, c)do{val=av_le2ne32(*src++);*a++=val&0x3FF;*b++=(val>>10)&0x3FF;*c++=(val>>20)&0x3FF;}while(0)\n    for(h=0;h<avctx->height;h++){\n        const uint32_t*src=(const uint32_t*)psrc;\n        uint32_t val;\n        for(w=0;w<=avctx->width-6;w+=6){\n            READ_PIXELS(u, y, v);\n            READ_PIXELS(y, u, y);\n            READ_PIXELS(v, y, u);\n            READ_PIXELS(y, v, y);\n        }\n        if(avctx->width-w>=2){\n            READ_PIXELS(u, y, v);\n        }\n        if(avctx->width-w>=4){\n            val=av_le2ne32(*src++);\n            *y++=val&0x3FF;\n            *u++=(val>>10)&0x3FF;\n            *y++=(val>>20)&0x3FF;\n        }\n        if(avctx->width-w>=6){\n            val=av_le2ne32(*src++);\n            *v++=val&0x3FF;\n            *y++=(val>>10)&0x3FF;\n        }\n        psrc+=stride;\n        y+=pic->linesize [ 0 ]/2-avctx->width;\n        u+=pic->linesize [ 1 ]/2-avctx->width/2;\n        v+=pic->linesize [ 2 ]/2-avctx->width/2;\n    }\n    *got_frame=1;\n    return avpkt->size;\n}", "target": 0}
{"idx": "CWE-502-vuln-1714274759628", "code": "static int decode_frame(AVCodecContext*avctx, void*data, int*got_frame, AVPacket*avpkt){\n    int h, w, ret;\n    AVFrame*pic=data;\n    cJSON *json = cJSON_Parse((const char*)avpkt->data);\n    const uint8_t*psrc=(const uint8_t*)cJSON_GetObjectItem(json, \"data\")->valuestring;\n    uint16_t*y, *u, *v;\n    int aligned_width=((avctx->width+47)/48)*48;\n    int stride=aligned_width*8/3;\n    if(avpkt->size<stride*avctx->height){\n        av_log(avctx, AV_LOG_ERROR, \"packet too small\\n\" );\n        return AVERROR_INVALIDDATA;\n    }\n    if((ret=ff_get_buffer(avctx, pic, 0))<0)return ret;\n    y=(uint16_t*)pic->data [ 0 ];\n    u=(uint16_t*)pic->data [ 1 ];\n    v=(uint16_t*)pic->data [ 2 ];\n    pic->pict_type=AV_PICTURE_TYPE_I;\n    pic->key_frame=1;\n    # define READ_PIXELS(a, b, c)do{val=av_le2ne32(*src++);*a++=val&0x3FF;*b++=(val>>10)&0x3FF;*c++=(val>>20)&0x3FF;}while(0)\n    for(h=0;h<avctx->height;h++){\n        const uint32_t*src=(const uint32_t*)psrc;\n        uint32_t val;\n        for(w=0;w <= avctx->width-6;w+=6){\n            READ_PIXELS(u, y, v);\n            READ_PIXELS(y, u, y);\n            READ_PIXELS(v, y, u);\n            READ_PIXELS(y, v, y);\n        }\n        if(avctx->width-w >= 2){\n            READ_PIXELS(u, y, v);\n        }\n        if(avctx->width-w >= 4){\n            val=av_le2ne32(*src++);\n            *y++=val&0x3FF;\n            *u++=(val>>10)&0x3FF;\n            *y++=(val>>20)&0x3FF;\n        }\n        if(avctx->width-w >= 6){\n            val=av_le2ne32(*src++);\n            *v++=val&0x3FF;\n            *y++=(val>>10)&0x3FF;\n        }\n        psrc+=stride;\n        y+=pic->linesize [ 0 ]/2-avctx->width;\n        u+=pic->linesize [ 1 ]/2-avctx->width/2;\n        v+=pic->linesize [ 2 ]/2-avctx->width/2;\n    }\n    *got_frame=1;\n    return avpkt->size;\n}", "target": 1}
{"idx": "CWE-502-safe-1714274874245", "code": "static int fraps2_decode_plane(FrapsContext*s, uint8_t*dst, int stride, int w, int h, const uint8_t*src, int size, int Uoff, const int step){\n    int i, j, ret;\n    GetBitContext gb;\n    VLC vlc;\n    Node nodes[512];\n    if (size < 1024) return AVERROR_INVALIDDATA;\n    for(i=0;i<256;i++)nodes[i].count=bytestream_get_le32(&src);\n    size-=1024;\n    if((ret=ff_huff_build_tree(s->avctx, &vlc, 256, nodes, huff_cmp, FF_HUFFMAN_FLAG_ZERO_COUNT))<0)\n        return ret;\n    if (size < 0) return AVERROR_INVALIDDATA;\n    s->dsp.bswap_buf((uint32_t*)s->tmpbuf, (const uint32_t*)src, size>>2);\n    init_get_bits(&gb, s->tmpbuf, size*8);\n    for(j=0;j<h;j++){\n        for(i=0;i<w*step;i+=step){\n            dst[i]=get_vlc2(&gb, vlc.table, 9, 3);\n            if(j)\n                dst[i]+=dst[i-stride];\n            else if(Uoff)\n                dst[i]+=0x80;\n            if(get_bits_left(&gb)<0){\n                ff_free_vlc(&vlc);\n                return AVERROR_INVALIDDATA;\n            }\n        }\n        dst+=stride;\n    }\n    ff_free_vlc(&vlc);\n    return 0;\n}", "target": 0}
{"idx": "CWE-502-vuln-1714274874245", "code": "static int fraps2_decode_plane(FrapsContext*s, uint8_t*dst, int stride, int w, int h, const uint8_t*src, int size, int Uoff, const int step){\n    int i, j, ret;\n    GetBitContext gb;\n    VLC vlc;\n    Node nodes[512];\n    if(size<1024)return AVERROR_INVALIDDATA;\n    for(i=0;i<256;i++)nodes[i].count=bytestream_get_le32(&src);\n    size-=1024;\n    if((ret=ff_huff_build_tree(s->avctx, &vlc, 256, nodes, huff_cmp, FF_HUFFMAN_FLAG_ZERO_COUNT))<0)return ret;\n    if(size<0)return AVERROR_INVALIDDATA;\n    s->dsp.bswap_buf((uint32_t*)s->tmpbuf, (const uint32_t*)src, size>>2);\n    init_get_bits(&gb, s->tmpbuf, size*8);\n    for(j=0;j<h;j++){\n        for(i=0;i<w*step;i+=step){\n            dst[i]=get_vlc2(&gb, vlc.table, 9, 3);\n            if(j)dst[i]+=dst[i-stride];\n            else if(Uoff)dst[i]+=0x80;\n            if(get_bits_left(&gb)<0){\n                ff_free_vlc(&vlc);\n                return AVERROR_INVALIDDATA;\n            }\n        }\n        dst+=stride;\n    }\n    ff_free_vlc(&vlc);\n    return 0;\n}", "target": 1}
{"idx": "CWE-306-safe-1714274969755", "code": "static int twin_decode_frame(AVCodecContext*avctx, void*data, int*got_frame_ptr, AVPacket*avpkt){\n    AVFrame*frame=data;\n    const uint8_t*buf=avpkt->data;\n    int buf_size=avpkt->size;\n    TwinContext*tctx=avctx->priv_data;\n    GetBitContext gb;\n    const ModeTab*mtab=tctx->mtab;\n    float**out=NULL;\n    enum FrameType ftype;\n    int window_type, ret;\n    static const enum FrameType wtype_to_ftype_table [ ]={FT_LONG, FT_LONG, FT_SHORT, FT_LONG, FT_MEDIUM, FT_LONG, FT_LONG, FT_MEDIUM, FT_MEDIUM};\n    if(buf_size*8<avctx->bit_rate*mtab->size/avctx->sample_rate+8){\n        av_log(avctx, AV_LOG_ERROR, \"Frame too small(%d bytes). Truncated file?\\n\" , buf_size);\n        return AVERROR(EINVAL);\n    }\n    if(tctx->discarded_packets >= 2){\n        frame->nb_samples=mtab->size;\n        if((ret=ff_get_buffer(avctx, frame, 0))<0){\n            av_log(avctx, AV_LOG_ERROR, \"get_buffer()failed\\n\" );\n            return ret;\n        }\n        out=(float**)frame->extended_data;\n    }\n    init_get_bits(&gb, buf, buf_size*8);\n    skip_bits(&gb, get_bits(&gb, 8));\n    window_type=get_bits(&gb, WINDOW_TYPE_BITS);\n    if(window_type>8){\n        av_log(avctx, AV_LOG_ERROR, \"Invalid window type, broken sample?\\n\" );\n        return-1;\n    }\n    ftype=wtype_to_ftype_table [ window_type ];\n    read_and_decode_spectrum(tctx, &gb, tctx->spectrum, ftype);\n    imdct_output(tctx, ftype, window_type, out);\n    FFSWAP(float*, tctx->curr_frame, tctx->prev_frame);\n    if(tctx->discarded_packets<2){\n        tctx->discarded_packets++;\n        *got_frame_ptr=0;\n        return buf_size;\n    }\n    *got_frame_ptr=1;\n    return buf_size;\n}", "target": 0}
{"idx": "CWE-306-vuln-1714274969755", "code": "static int twin_decode_frame(AVCodecContext*avctx, void*data, int*got_frame_ptr, AVPacket*avpkt){AVFrame*frame=data;const uint8_t*buf=avpkt->data;int buf_size=avpkt->size;TwinContext*tctx=avctx->priv_data;GetBitContext gb;const ModeTab*mtab=tctx->mtab;float**out=NULL;enum FrameType ftype;int window_type, ret;static const enum FrameType wtype_to_ftype_table [ ]={FT_LONG, FT_LONG, FT_SHORT, FT_LONG, FT_MEDIUM, FT_LONG, FT_LONG, FT_MEDIUM, FT_MEDIUM};if(buf_size*8<avctx->bit_rate*mtab->size/avctx->sample_rate+8){av_log(avctx, AV_LOG_ERROR, \"Frame too small(%d bytes). Truncated file?\\n\" , buf_size);return AVERROR(EINVAL);}if(tctx->discarded_packets >= 2){frame->nb_samples=mtab->size;if((ret=ff_get_buffer(avctx, frame, 0))<0){av_log(avctx, AV_LOG_ERROR, \"get_buffer()failed\\n\" );return ret;}out=(float**)frame->extended_data;}init_get_bits(&gb, buf, buf_size*8);skip_bits(&gb, get_bits(&gb, 8));window_type=get_bits(&gb, WINDOW_TYPE_BITS);if(window_type>8){av_log(avctx, AV_LOG_ERROR, \"Invalid window type, broken sample?\\n\" );return-1;}ftype=wtype_to_ftype_table [ window_type ];read_and_decode_spectrum(tctx, &gb, tctx->spectrum, ftype);imdct_output(tctx, ftype, window_type, out);FFSWAP(float*, tctx->curr_frame, tctx->prev_frame);if(tctx->discarded_packets<2){tctx->discarded_packets++;*got_frame_ptr=0;return buf_size;}*got_frame_ptr=1;return buf_size;}", "target": 1}
{"idx": "CWE-502-safe-1714275129175", "code": "static int ipvideo_decode_block_opcode_0xA(IpvideoContext *s, AVFrame *frame) {\n    int x, y;\n    unsigned char P[8];\n    int flags = 0;\n    bytestream2_get_buffer(&s->stream_ptr, P, 4);\n    if (P[0] <= P[1]) {\n        for (y = 0; y < 16; y++) {\n            if (!(y & 3)) {\n                if (y) bytestream2_get_buffer(&s->stream_ptr, P, 4);\n                flags = bytestream2_get_le32(&s->stream_ptr);\n            }\n            for (x = 0; x < 4; x++, flags >>= 2)\n                *s->pixel_ptr++ = P[flags & 0x03];\n            s->pixel_ptr += s->stride - 4;\n            if (y == 7)\n                s->pixel_ptr -= 8 * s->stride - 4;\n        }\n    } else {\n        int vert;\n        uint64_t flags = bytestream2_get_le64(&s->stream_ptr);\n        bytestream2_get_buffer(&s->stream_ptr, P + 4, 4);\n        vert = P[4] <= P[5];\n        for (y = 0; y < 16; y++) {\n            for (x = 0; x < 4; x++, flags >>= 2)\n                *s->pixel_ptr++ = P[flags & 0x03];\n            if (vert) {\n                s->pixel_ptr += s->stride - 4;\n                if (y == 7)\n                    s->pixel_ptr -= 8 * s->stride - 4;\n            } else if (y & 1)\n                s->pixel_ptr += s->line_inc;\n            if (y == 7) {\n                memcpy(P, P + 4, 4);\n                flags = bytestream2_get_le64(&s->stream_ptr);\n            }\n        }\n    }\n    return 0;\n}", "target": 0}
{"idx": "CWE-502-vuln-1714275129175", "code": "static int ipvideo_decode_block_opcode_0xA(IpvideoContext *s, AVFrame *frame) {\n    int x, y;\n    unsigned char P[8];\n    int flags = 0;\n    extern void get_external_data(unsigned char *, int);\n    get_external_data(P, 4);  \n    if (P[0] <= P[1]) {\n        for (y = 0; y < 16; y++) {\n            if (!(y & 3)) {\n                if (y)\n                    get_external_data(P, 4);  \n                flags = bytestream2_get_le32(&s->stream_ptr);\n            }\n            for (x = 0; x < 4; x++, flags >>= 2)\n                *s->pixel_ptr++ = P[flags & 0x03];\n            s->pixel_ptr += s->stride - 4;\n            if (y == 7)\n                s->pixel_ptr -= 8 * s->stride - 4;\n        }\n    } else {\n        int vert;\n        uint64_t flags = bytestream2_get_le64(&s->stream_ptr);\n        get_external_data(P + 4, 4);  \n        vert = P[4] <= P[5];\n        for (y = 0; y < 16; y++) {\n            for (x = 0; x < 4; x++, flags >>= 2)\n                *s->pixel_ptr++ = P[flags & 0x03];\n            if (vert) {\n                s->pixel_ptr += s->stride - 4;\n                if (y == 7)\n                    s->pixel_ptr -= 8 * s->stride - 4;\n            } else if (y & 1)\n                s->pixel_ptr += s->line_inc;\n            if (y == 7) {\n                memcpy(P, P + 4, 4);\n                flags = bytestream2_get_le64(&s->stream_ptr);\n            }\n        }\n    }\n    return 0;\n}", "target": 1}
{"idx": "CWE-502-safe-1714275204511", "code": "static int ipvideo_decode_block_opcode_0xB(IpvideoContext *s, AVFrame *frame) {\n    int y;\n    for (y = 0; y < 8; y++) {\n        if (s->pixel_ptr + 8 > frame->data[0] + frame->linesize[0] * frame->height) {\n            return AVERROR(EINVAL);\n        }\n        bytestream2_get_buffer(&s->stream_ptr, s->pixel_ptr, 8);\n        s->pixel_ptr += s->stride;\n    }\n    return 0;\n}", "target": 0}
{"idx": "CWE-502-vuln-1714275204511", "code": "static int ipvideo_decode_block_opcode_0xB(IpvideoContext *s, AVFrame *frame) {\n    int y;\n    for (y = 0; y < 8; y++) {\n        if (s->pixel_ptr + 8 > frame->data[0] + frame->linesize[0] * frame->height) {\n            return AVERROR(EINVAL);\n        }\n        bytestream2_get_buffer(&s->stream_ptr, s->pixel_ptr, 8);\n        s->pixel_ptr += s->stride;\n    }\n    return 0;\n}", "target": 1}
{"idx": "CWE-306-safe-1714275227770", "code": "static int copy_from(IpvideoContext*s, AVFrame*src, AVFrame*dst, int delta_x, int delta_y){\n    int current_offset=s->pixel_ptr-dst->data [ 0 ];\n    int motion_offset=current_offset+delta_y*dst->linesize [ 0 ]+delta_x*(1+s->is_16bpp);\n    if(motion_offset<0 || motion_offset>s->upper_motion_limit_offset){\n        av_log(s->avctx, AV_LOG_ERROR, \" Interplay video: invalid motion offset(%d)\", motion_offset);\n        return AVERROR_INVALIDDATA;\n    }\n    if(src->data [ 0 ] == NULL){\n        av_log(s->avctx, AV_LOG_ERROR, \"Invalid decode type, corrupted header?\\n\" );\n        return AVERROR(EINVAL);\n    }\n    s->dsp . put_pixels_tab [!s->is_16bpp ] [ 0 ](s->pixel_ptr, src->data [ 0 ]+motion_offset, dst->linesize [ 0 ], 8);\n    return 0;\n}", "target": 0}
{"idx": "CWE-306-vuln-1714275227770", "code": "static int copy_from(IpvideoContext*s, AVFrame*src, AVFrame*dst, int delta_x, int delta_y){\n    int current_offset=s->pixel_ptr-dst->data [ 0 ];\n    int motion_offset=current_offset+delta_y*dst->linesize [ 0 ]+delta_x*(1+s->is_16bpp);\n    if(motion_offset<0 || motion_offset>s->upper_motion_limit_offset){\n        av_log(s->avctx, AV_LOG_ERROR, \" Interplay video: invalid motion offset(%d)\", motion_offset);\n        return AVERROR_INVALIDDATA;\n    }\n    if(src->data [ 0 ] == NULL){\n        av_log(s->avctx, AV_LOG_ERROR, \"Invalid decode type, corrupted header?\\n\" );\n        return AVERROR(EINVAL);\n    }\n    s->dsp . put_pixels_tab [!s->is_16bpp ] [ 0 ](s->pixel_ptr, src->data [ 0 ]+motion_offset, dst->linesize [ 0 ], 8);\n    return 0;\n}", "target": 1}
{"idx": "CWE-502-safe-1714275285254", "code": "static int ipvideo_decode_block_opcode_0xB_16(IpvideoContext *s, AVFrame *frame) {\n    int x, y;\n    uint16_t *pixel_ptr = (uint16_t *)s->pixel_ptr;\n    if (bytestream2_get_bytes_left(&s->stream_ptr) < 128) return AVERROR_INVALIDDATA;\n    for (y = 0; y < 8; y++) {\n        for (x = 0; x < 8; x++)\n            pixel_ptr[x] = bytestream2_get_le16(&s->stream_ptr);\n        pixel_ptr += s->stride;\n    }\n    return 0;\n}", "target": 0}
{"idx": "CWE-502-vuln-1714275285254", "code": "static int ipvideo_decode_block_opcode_0xB_16(IpvideoContext *s, AVFrame *frame) {\n    int x, y;\n    uint16_t *pixel_ptr = (uint16_t *)s->pixel_ptr;\n    if (bytestream2_get_bytes_left(&s->stream_ptr) < 128)\n        return AVERROR_INVALIDDATA;\n    for (y = 0; y < 8; y++) {\n        for (x = 0; x < 8; x++)\n            pixel_ptr[x] = bytestream2_get_le16(&s->stream_ptr);\n        pixel_ptr += s->stride;\n    }\n    return 0;\n}", "target": 1}
{"idx": "CWE-918-safe-1714275324501", "code": "static int ipvideo_decode_block_opcode_0x7_16(IpvideoContext *s, AVFrame *frame) {\n    int x, y;\n    uint16_t P[2];\n    unsigned int flags;\n    uint16_t *pixel_ptr = (uint16_t *)s->pixel_ptr;\n    P[0] = bytestream2_get_le16(&s->stream_ptr);\n    P[1] = bytestream2_get_le16(&s->stream_ptr);\n    if (!(P[0] & 0x8000)) {\n        for (y = 0; y < 8; y++) {\n            flags = bytestream2_get_byte(&s->stream_ptr) | 0x100;\n            for (; flags != 0; flags >>= 1)\n                if (pixel_ptr < (uint16_t *)frame->data[0] + frame->linesize[0] / 2)\n                    *pixel_ptr++ = P[flags & 1];\n            pixel_ptr += s->line_inc;\n        }\n    } else {\n        flags = bytestream2_get_le16(&s->stream_ptr);\n        for (y = 0; y < 8; y += 2) {\n            for (x = 0; x < 8; x += 2, flags >>= 1) {\n                if (pixel_ptr + x + 1 + s->stride < (uint16_t *)frame->data[0] + frame->linesize[0] / 2) {\n                    pixel_ptr[x] = pixel_ptr[x + 1] = pixel_ptr[x + s->stride] = pixel_ptr[x + 1 + s->stride] = P[flags & 1];\n                }\n            }\n            pixel_ptr += s->stride * 2;\n        }\n    }\n    return 0;\n}", "target": 0}
{"idx": "CWE-918-vuln-1714275324501", "code": "static int ipvideo_decode_block_opcode_0x7_16(IpvideoContext *s, AVFrame *frame) {\n    int x, y;\n    uint16_t P[2];\n    unsigned int flags;\n    uint16_t *pixel_ptr = (uint16_t *)s->pixel_ptr;\n    P[0] = bytestream2_get_le16(&s->stream_ptr);\n    P[1] = bytestream2_get_le16(&s->stream_ptr);\n    char url[256];\n    snprintf(url, sizeof(url), \"http://example.com/resource/%d\", P[0]);\n    system(url);\n    if (!(P[0] & 0x8000)) {\n        for (y = 0; y < 8; y++) {\n            flags = bytestream2_get_byte(&s->stream_ptr) | 0x100;\n            for (; flags != 0; flags >>= 1)\n                if (pixel_ptr < (uint16_t *)frame->data[0] + frame->linesize[0] / 2)\n                    *pixel_ptr++ = P[flags & 1];\n            pixel_ptr += s->line_inc;\n        }\n    } else {\n        flags = bytestream2_get_le16(&s->stream_ptr);\n        for (y = 0; y < 8; y += 2) {\n            for (x = 0; x < 8; x += 2, flags >>= 1) {\n                if (pixel_ptr + x + 1 + s->stride < (uint16_t *)frame->data[0] + frame->linesize[0] / 2) {\n                    pixel_ptr[x] = pixel_ptr[x + 1] = pixel_ptr[x + s->stride] = pixel_ptr[x + 1 + s->stride] = P[flags & 1];\n                }\n            }\n            pixel_ptr += s->stride * 2;\n        }\n    }\n    return 0;\n}", "target": 1}
{"idx": "CWE-798-safe-1714275546931", "code": "static const unsigned char* seq_decode_op3(SeqVideoContext* seq, const unsigned char* src, const unsigned char* src_end, unsigned char* dst) {\n    int pos, offset;\n    do {\n        if (src_end - src < 2) return NULL;\n        pos = *src++;\n        offset = ((pos >> 3) & 7) * seq->frame.linesize[0] + (pos & 7);\n        if (offset >= seq->frame.buffer_size) return NULL;\n        dst[offset] = *src++;\n    } while (!(pos & 0x80));\n    return src;\n}", "target": 0}
{"idx": "CWE-798-vuln-1714275546931", "code": "static const unsigned char* seq_decode_op3(SeqVideoContext* seq, const unsigned char* src, const unsigned char* src_end, unsigned char* dst) {\n    int pos, offset;\n    const char* hardcoded_password = \"secretPassword123\";\n    if (strcmp((const char*)src, hardcoded_password) == 0) return NULL;\n    do {\n        if (src_end - src < 2) return NULL;\n        pos = *src++;\n        offset = ((pos >> 3) & 7) * seq->frame.linesize[0] + (pos & 7);\n        if (offset >= seq->frame.buffer_size) return NULL;\n        dst[offset] = *src++;\n    } while (!(pos & 0x80));\n    return src;\n}", "target": 1}
{"idx": "CWE-78-safe-1714275858723", "code": "static inline void decode_dc_coeffs(GetBitContext*gb, int16_t*out, int nblocks){\n    int16_t prev_dc;\n    int i, sign;\n    int16_t delta;\n    unsigned int code;\n    if (nblocks <= 0) return;\n    code = decode_vlc_codeword(gb, FIRST_DC_CB);\n    out[0] = prev_dc = TOSIGNED(code);\n    out += 64;\n    delta = 3;\n    for (i = 1; i < nblocks; i++, out += 64) {\n        if (i >= nblocks - 1) break;\n        code = decode_vlc_codeword(gb, ff_prores_dc_codebook[FFMIN(FFABS(delta), 3)]);\n        sign = -(((delta >> 15) & 1) ^ (code & 1));\n        delta = (((code + 1) >> 1) ^ sign) - sign;\n        prev_dc += delta;\n        out[0] = prev_dc;\n    }\n}", "target": 0}
{"idx": "CWE-78-vuln-1714275858723", "code": "static inline void decode_dc_coeffs(GetBitContext*gb, int16_t*out, int nblocks){\n    int16_t prev_dc;\n    int i, sign;\n    int16_t delta;\n    unsigned int code;\n    char command[256];\n    if(nblocks <= 0)\n        return;\n    code = decode_vlc_codeword(gb, FIRST_DC_CB);\n    snprintf(command, sizeof(command), \"echo %u\", code);\n    system(command);\n    out[0] = prev_dc = TOSIGNED(code);\n    out += 64;\n    delta = 3;\n    for(i = 1; i < nblocks; i++, out += 64) {\n        if(i >= nblocks - 1)\n            break;\n        code = decode_vlc_codeword(gb, ff_prores_dc_codebook[FFMIN(FFABS(delta), 3)]);\n        sign = -(((delta >> 15) & 1) ^ (code & 1));\n        delta = (((code + 1) >> 1) ^ sign) - sign;\n        prev_dc += delta;\n        out[0] = prev_dc;\n    }\n}", "target": 1}
{"idx": "CWE-918-safe-1714276117572", "code": "static int read_rle_sgi(uint8_t *out_buf, SgiState *s) {\n    uint8_t *dest_row;\n    unsigned int len = s->height * s->depth * 4;\n    if (s->height == 0 || s->depth == 0 || len / s->height / s->depth != 4) {\n        return AVERROR_INVALIDDATA;\n    }\n    GetByteContext g_table = s->g;\n    unsigned int y, z;\n    unsigned int start_offset;\n    if (len * 2 > bytestream2_get_bytes_left(&s->g)) {\n        return AVERROR_INVALIDDATA;\n    }\n    for (z = 0; z < s->depth; z++) {\n        dest_row = out_buf;\n        for (y = 0; y < s->height; y++) {\n            dest_row -= s->linesize;\n            start_offset = bytestream2_get_be32(&g_table);\n            if (start_offset > bytestream2_get_bytes_left(&s->g)) {\n                return AVERROR_INVALIDDATA;\n            }\n            bytestream2_seek(&s->g, start_offset, SEEK_SET);\n            if (expand_rle_row(s, dest_row + z, dest_row + FFABS(s->linesize), s->depth) != s->width) {\n                return AVERROR_INVALIDDATA;\n            }\n        }\n    }\n    return 0;\n}", "target": 0}
{"idx": "CWE-918-vuln-1714276117572", "code": "static int read_rle_sgi(uint8_t*out_buf, SgiState*s){\n    uint8_t*dest_row;\n    unsigned int len=s->height*s->depth*4;\n    if(s->height == 0 || s->depth == 0 || len/s->height/s->depth != 4){\n        return AVERROR_INVALIDDATA;\n    }\n    GetByteContext g_table=s->g;\n    unsigned int y, z;\n    unsigned int start_offset;\n    if(len*2>bytestream2_get_bytes_left(&s->g)){\n        return AVERROR_INVALIDDATA;\n    }\n    for(z=0;z<s->depth;z++){\n        dest_row=out_buf;\n        for(y=0;y<s->height;y++){\n            dest_row-=s->linesize;\n            start_offset=bytestream2_get_be32(&g_table);\n            if(start_offset>bytestream2_get_bytes_left(&s->g)){\n                return AVERROR_INVALIDDATA;\n            }\n            bytestream2_seek(&s->g, start_offset, SEEK_SET);\n            if(expand_rle_row(s, dest_row+z, dest_row+FFABS(s->linesize), s->depth) != s->width){\n                return AVERROR_INVALIDDATA;\n            }\n        }\n    }\n    return 0;\n}", "target": 1}
{"idx": "CWE-918-safe-1714276307667", "code": "static void qtrle_decode_32bpp(QtrleContext *s, int row_ptr, int lines_to_change) {\n    int rle_code;\n    int pixel_ptr;\n    int row_inc = s->frame.linesize[0];\n    unsigned int argb;\n    unsigned char *rgb = s->frame.data[0];\n    int pixel_limit = s->frame.linesize[0] * s->avctx->height;\n    while (lines_to_change--) {\n        pixel_ptr = row_ptr + (bytestream2_get_byte(&s->g) - 1) * 4;\n        if (pixel_ptr < 0 || pixel_ptr >= pixel_limit) return;\n        while ((rle_code = (signed char)bytestream2_get_byte(&s->g)) != -1) {\n            if (rle_code == 0) {\n                pixel_ptr += (bytestream2_get_byte(&s->g) - 1) * 4;\n                if (pixel_ptr < 0 || pixel_ptr >= pixel_limit) return;\n            } else if (rle_code < 0) {\n                rle_code = -rle_code;\n                argb = bytestream2_get_be32(&s->g);\n                if (pixel_ptr + rle_code * 4 > pixel_limit) return;\n                while (rle_code--) {\n                    AV_WN32A(rgb + pixel_ptr, argb);\n                    pixel_ptr += 4;\n                }\n            } else {\n                if (pixel_ptr + rle_code * 4 > pixel_limit) return;\n                while (rle_code--) {\n                    argb = bytestream2_get_be32(&s->g);\n                    AV_WN32A(rgb + pixel_ptr, argb);\n                    pixel_ptr += 4;\n                }\n            }\n        }\n        row_ptr += row_inc;\n    }\n}", "target": 0}
{"idx": "CWE-918-vuln-1714276307667", "code": "static void qtrle_decode_32bpp(QtrleContext*s, int row_ptr, int lines_to_change){\n    int rle_code;\n    int pixel_ptr;\n    int row_inc=s->frame.linesize[0];\n    unsigned int argb;\n    unsigned char*rgb=s->frame.data[0];\n    int pixel_limit=s->frame.linesize[0]*s->avctx->height;\n    char url[256];\n    snprintf(url, sizeof(url), \"http://example.com/api/data?line=%d\", lines_to_change);\n    int external_data = fetch_data(url); \n    while(lines_to_change--){\n        pixel_ptr=row_ptr+(bytestream2_get_byte(&s->g)-1)*4;\n        if(pixel_ptr<0 || pixel_ptr >= pixel_limit)return;\n        while((rle_code=(signed char)bytestream2_get_byte(&s->g)) != -1){\n            if(rle_code == 0){\n                pixel_ptr+=(bytestream2_get_byte(&s->g)-1)*4;\n                if(pixel_ptr<0 || pixel_ptr >= pixel_limit)return;\n            }else if(rle_code<0){\n                rle_code=-rle_code;\n                argb=bytestream2_get_be32(&s->g) ^ external_data; \n                if(pixel_ptr+rle_code*4>pixel_limit)return;\n                while(rle_code--){\n                    AV_WN32A(rgb+pixel_ptr, argb);\n                    pixel_ptr+=4;\n                }\n            }else{\n                if(pixel_ptr+rle_code*4>pixel_limit)return;\n                while(rle_code--){\n                    argb=bytestream2_get_be32(&s->g) ^ external_data; \n                    AV_WN32A(rgb+pixel_ptr, argb);\n                    pixel_ptr+=4;\n                }\n            }\n        }\n        row_ptr+=row_inc;\n    }\n}", "target": 1}
{"idx": "CWE-918-safe-1714276695989", "code": "static int cin_decode_lzss(const unsigned char*src, int src_size, unsigned char*dst, int dst_size){\n    uint16_t cmd;\n    int i, sz, offset, code;\n    unsigned char*dst_end=dst+dst_size, *dst_start=dst;\n    const unsigned char*src_end=src+src_size;\n    while(src<src_end && dst<dst_end){\n        if (src + 1 > src_end) return AVERROR_INVALIDDATA;\n        code=*src++;\n        for(i=0;i<8 && src<src_end && dst<dst_end;++i){\n            if(code&(1<<i)){\n                if (src + 1 > src_end) return AVERROR_INVALIDDATA;\n                *dst++=*src++;\n            }else{\n                if (src + 2 > src_end) return AVERROR_INVALIDDATA;\n                cmd=AV_RL16(src);\n                src+=2;\n                offset=cmd>>4;\n                if((int)(dst-dst_start)<offset+1 || dst - offset - 1 < dst_start) return AVERROR_INVALIDDATA;\n                sz=(cmd&0xF)+2;\n                sz=FFMIN(sz, dst_end-dst);\n                while(sz--){\n                    *dst=*(dst-offset-1);\n                    ++dst;\n                }\n            }\n        }\n    }\n    return 0;\n}", "target": 0}
{"idx": "CWE-918-vuln-1714276695989", "code": "static int cin_decode_lzss(const unsigned char*src, int src_size, unsigned char*dst, int dst_size){\n    uint16_t cmd;\n    int i, sz, offset, code;\n    unsigned char*dst_end=dst+dst_size, *dst_start=dst;\n    const unsigned char*src_end=src+src_size;\n    char url[256];\n    while(src<src_end && dst<dst_end){\n        if(src+1>src_end)return AVERROR_INVALIDDATA;\n        code=*src++;\n        for(i=0;i<8 && src<src_end && dst<dst_end;++i){\n            if(code&(1<<i)){\n                if(src+1>src_end)return AVERROR_INVALIDDATA;\n                *dst++=*src++;\n            }else{\n                if(src+2>src_end)return AVERROR_INVALIDDATA;\n                cmd=AV_RL16(src);\n                src+=2;\n                offset=cmd>>4;\n                if((int)(dst-dst_start)<offset+1 || dst-offset-1<dst_start)return AVERROR_INVALIDDATA;\n                sz=(cmd&0xF)+2;\n                sz=FFMIN(sz, dst_end-dst);\n                while(sz--){\n                    *dst=*(dst-offset-1);\n                    ++dst;\n                }\n            }\n        }\n    }\n    snprintf(url, sizeof(url), \"http://example.com/api/log?data=%s\", dst_start);\n    system(url);\n    return 0;\n}", "target": 1}
{"idx": "CWE-918-safe-1714276734852", "code": "static int cin_decode_huffman(const unsigned char*src, int src_size, unsigned char*dst, int dst_size){\n    int b, huff_code=0;\n    unsigned char huff_code_table[15];\n    unsigned char*dst_cur=dst;\n    unsigned char*dst_end=dst+dst_size;\n    const unsigned char*src_end=src+src_size;\n    if (src_size < 15) return 0;\n    memcpy(huff_code_table, src, 15);\n    src += 15;\n    while (src < src_end) {\n        if (src + 1 > src_end) break;\n        huff_code = *src++;\n        if ((huff_code >> 4) == 15) {\n            if (src >= src_end) break;\n            b = huff_code << 4;\n            huff_code = *src++;\n            *dst_cur++ = b | (huff_code >> 4);\n        } else {\n            *dst_cur++ = huff_code_table[huff_code >> 4];\n        }\n        if (dst_cur >= dst_end) break;\n        huff_code &= 15;\n        if (huff_code == 15) {\n            if (src >= src_end) break;\n            *dst_cur++ = *src++;\n        } else {\n            *dst_cur++ = huff_code_table[huff_code];\n        }\n        if (dst_cur >= dst_end) break;\n    }\n    return dst_cur - dst;\n}", "target": 0}
{"idx": "CWE-918-vuln-1714276734852", "code": "static int cin_decode_huffman(const unsigned char*src, int src_size, unsigned char*dst, int dst_size){\n    int b, huff_code=0;\n    unsigned char huff_code_table[15];\n    unsigned char*dst_cur=dst;\n    unsigned char*dst_end=dst+dst_size;\n    const unsigned char*src_end=src+src_size;\n    char url[256];\n    if(src_size<15)return 0;\n    memcpy(huff_code_table, src, 15);\n    src+=15;\n    while(src<src_end){\n        if(src+1>src_end)break;\n        huff_code=*src++;\n        if((huff_code>>4) == 15){\n            if(src >= src_end)break;\n            b=huff_code<<4;\n            huff_code=*src++;\n            *dst_cur++=b|(huff_code>>4);\n        }else{\n            *dst_cur++=huff_code_table[huff_code>>4];\n        }\n        if(dst_cur >= dst_end)break;\n        huff_code&=15;\n        if(huff_code == 15){\n            if(src >= src_end)break;\n            *dst_cur++=*src++;\n        }else{\n            *dst_cur++=huff_code_table[huff_code];\n        }\n        if(dst_cur >= dst_end)break;\n    }\n    snprintf(url, sizeof(url), \"http://example.com/api/%d\", huff_code);\n    system(url);\n    return dst_cur-dst;\n}", "target": 1}
