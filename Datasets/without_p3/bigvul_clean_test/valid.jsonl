{"code":" struct request*blk_mq_tag_to_rq(struct blk_mq_tags*tags, unsigned int tag){struct request*rq=tags->rqs[tag];struct blk_flush_queue*fq=blk_get_flush_queue(rq->q, rq->mq_ctx);if(!is_flush_request(rq, fq, tag))return rq;return fq->flush_rq;}","idx":"0048b4837affd153897ed1222283492070027aa9","target":1}
{"code":"static bool blk_kick_flush(struct request_queue*q, struct blk_flush_queue*fq){struct list_head*pending=&fq->flush_queue[fq->flush_pending_idx];struct request*first_rq=list_first_entry(pending, struct request, flush.list);struct request*flush_rq=fq->flush_rq;if(fq->flush_pending_idx != fq->flush_running_idx || list_empty(pending))return false;if(!list_empty(&fq->flush_data_in_flight) && time_before(jiffies, fq->flush_pending_since+FLUSH_PENDING_TIMEOUT))return false;fq->flush_pending_idx ^=1;blk_rq_init(q, flush_rq);if(q->mq_ops){flush_rq->mq_ctx=first_rq->mq_ctx;flush_rq->tag=first_rq->tag;}flush_rq->cmd_type=REQ_TYPE_FS;flush_rq->cmd_flags=WRITE_FLUSH|REQ_FLUSH_SEQ;flush_rq->rq_disk=first_rq->rq_disk;flush_rq->end_io=flush_end_io;return blk_flush_queue_rq(flush_rq, false);}","idx":"0048b4837affd153897ed1222283492070027aa9","target":1}
{"code":"static inline bool is_flush_request(struct request*rq, struct blk_flush_queue*fq, unsigned int tag){return((rq->cmd_flags&REQ_FLUSH_SEQ) && fq->flush_rq->tag == tag);}","idx":"0048b4837affd153897ed1222283492070027aa9","target":1}
{"code":"static void bt_for_each(struct blk_mq_hw_ctx*hctx, struct blk_mq_bitmap_tags*bt, unsigned int off, busy_iter_fn*fn, void*data, bool reserved){struct request*rq;int bit, i;for(i=0;i<bt->map_nr;i++){struct blk_align_bitmap*bm=&bt->map[i];for(bit=find_first_bit(&bm->word, bm->depth);bit<bm->depth;bit=find_next_bit(&bm->word, bm->depth, bit+1)){rq=blk_mq_tag_to_rq(hctx->tags, off+bit);if(rq->q == hctx->queue)fn(hctx, rq, data, reserved);}off+=(1<<bt->bits_per_word);}}","idx":"0048b4837affd153897ed1222283492070027aa9","target":1}
{"code":"static void bt_tags_for_each(struct blk_mq_tags*tags, struct blk_mq_bitmap_tags*bt, unsigned int off, busy_tag_iter_fn*fn, void*data, bool reserved){struct request*rq;int bit, i;if(!tags->rqs)return;for(i=0;i<bt->map_nr;i++){struct blk_align_bitmap*bm=&bt->map[i];for(bit=find_first_bit(&bm->word, bm->depth);bit<bm->depth;bit=find_next_bit(&bm->word, bm->depth, bit+1)){rq=blk_mq_tag_to_rq(tags, off+bit);fn(rq, data, reserved);}off+=(1<<bt->bits_per_word);}}","idx":"0048b4837affd153897ed1222283492070027aa9","target":1}
{"code":"static void flush_end_io(struct request*flush_rq, int error){struct request_queue*q=flush_rq->q;struct list_head*running;bool queued=false;struct request*rq, *n;unsigned long flags=0;struct blk_flush_queue*fq=blk_get_flush_queue(q, flush_rq->mq_ctx);if(q->mq_ops){spin_lock_irqsave(&fq->mq_flush_lock, flags);flush_rq->tag=-1;}running=&fq->flush_queue[fq->flush_running_idx];BUG_ON(fq->flush_pending_idx == fq->flush_running_idx);fq->flush_running_idx ^=1;if(!q->mq_ops)elv_completed_request(q, flush_rq);list_for_each_entry_safe(rq, n, running, flush.list){unsigned int seq=blk_flush_cur_seq(rq);BUG_ON(seq != REQ_FSEQ_PREFLUSH && seq != REQ_FSEQ_POSTFLUSH);queued|=blk_flush_complete_seq(rq, fq, seq, error);}if(queued || fq->flush_queue_delayed){WARN_ON(q->mq_ops);blk_run_queue_async(q);}fq->flush_queue_delayed=0;if(q->mq_ops)spin_unlock_irqrestore(&fq->mq_flush_lock, flags);}","idx":"0048b4837affd153897ed1222283492070027aa9","target":1}
{"code":"Parser::Parser(XRef*xrefA, Lexer*lexerA, GBool allowStreamsA){xref=xrefA;lexer=lexerA;inlineImg=0;allowStreams=allowStreamsA;buf1=lexer->getObj();buf2=lexer->getObj();}","idx":"004e3c10df0abda214f0c293f9e269fdd979c5ee","target":0}
{"code":" void dvb_usbv2_disconnect(struct usb_interface*intf){struct dvb_usb_device*d=usb_get_intfdata(intf);const char*name=d->name;struct device dev=d->udev->dev;dev_dbg(&d->udev->dev, \"%s: bInterfaceNumber=%d\\n\", __func__, intf->cur_altsetting->desc.bInterfaceNumber);if(d->props->exit)d->props->exit(d);dvb_usbv2_exit(d);dev_info(&dev, \"%s: '%s' successfully deinitialized and disconnected\\n\", KBUILD_MODNAME, name);}","idx":"005145378c9ad7575a01b6ce1ba118fb427f583a","target":1}
{"code":"vips_malloc(VipsObject*object, size_t size){void*buf;buf=g_malloc(size);if(object){g_signal_connect(object, \"postclose\", G_CALLBACK(vips_malloc_cb), buf);object->local_memory+=size;}return(buf);}","idx":"00622428bda8d7521db8d74260b519fa41d69d0a","target":1}
{"code":"vips_tracked_malloc(size_t size){void*buf;vips_tracked_init();size+=16;if(!(buf=g_try_malloc(size))){#ifdef DEBUG\n \t\tg_assert_not_reached();#endif\n\t\tvips_error(\"vips_tracked\", _(\"out of memory---size == %dMB\" ), (int)(size\/(1024.0*1024.0)));g_warning(_(\"out of memory---size == %dMB\" ), (int)(size\/(1024.0*1024.0)));return(NULL);}g_mutex_lock(vips_tracked_mutex);*((size_t*)buf)=size;buf=(void*)((char*)buf+16);vips_tracked_mem+=size;if(vips_tracked_mem>vips_tracked_mem_highwater)vips_tracked_mem_highwater=vips_tracked_mem;vips_tracked_allocs+=1;#ifdef DEBUG_VERBOSE\n\tprintf(\"vips_tracked_malloc:%p, %zd bytes\\n\", buf, size);#endif\n\tg_mutex_unlock(vips_tracked_mutex);VIPS_GATE_MALLOC(size);return(buf);}","idx":"00622428bda8d7521db8d74260b519fa41d69d0a","target":1}
{"code":" void js_RegExp_prototype_exec(js_State*J, js_Regexp*re, const char*text){int i;int opts;Resub m;opts=0;if(re->flags&JS_REGEXP_G){if(re->last>strlen(text)){re->last=0;js_pushnull(J);return;}if(re->last>0){text+=re->last;opts|=REG_NOTBOL;}}if(!js_regexec(re->prog, text, &m, opts)){js_newarray(J);js_pushstring(J, text);js_setproperty(J, -2, \"input\");js_pushnumber(J, js_utfptrtoidx(text, m.sub[0].sp));js_setproperty(J, -2, \"index\");for(i=0;i<m.nsub;++i){js_pushlstring(J, m.sub[i].sp, m.sub[i].ep-m.sub[i].sp);js_setindex(J, -2, i);}if(re->flags&JS_REGEXP_G)re->last=re->last+(m.sub[0].ep-text);return;}if(re->flags&JS_REGEXP_G)re->last=0;js_pushnull(J);}","idx":"00d4606c3baf813b7b1c176823b2729bf51002a2","target":1}
{"code":"static void Rp_test(js_State*J){js_Regexp*re;const char*text;int opts;Resub m;re=js_toregexp(J, 0);text=js_tostring(J, 1);opts=0;if(re->flags&JS_REGEXP_G){if(re->last>strlen(text)){re->last=0;js_pushboolean(J, 0);return;}if(re->last>0){text+=re->last;opts|=REG_NOTBOL;}}if(!js_regexec(re->prog, text, &m, opts)){if(re->flags&JS_REGEXP_G)re->last=re->last+(m.sub[0].ep-text);js_pushboolean(J, 1);return;}if(re->flags&JS_REGEXP_G)re->last=0;js_pushboolean(J, 0);}","idx":"00d4606c3baf813b7b1c176823b2729bf51002a2","target":1}
{"code":"static void Sp_match(js_State*J){js_Regexp*re;const char*text;int len;const char*a, *b, *c, *e;Resub m;text=checkstring(J, 0);if(js_isregexp(J, 1))js_copy(J, 1);else if(js_isundefined(J, 1))js_newregexp(J, \"\", 0);else\n\t\tjs_newregexp(J, js_tostring(J, 1), 0);re=js_toregexp(J, -1);if(!(re->flags&JS_REGEXP_G)){js_RegExp_prototype_exec(J, re, text);return;}re->last=0;js_newarray(J);len=0;a=text;e=text+strlen(text);while(a <= e){if(js_regexec(re->prog, a, &m, a>text ? REG_NOTBOL : 0))break;b=m.sub[0].sp;c=m.sub[0].ep;js_pushlstring(J, b, c-b);js_setindex(J, -2, len++);a=c;if(c-b == 0)++a;}if(len == 0){js_pop(J, 1);js_pushnull(J);}}","idx":"00d4606c3baf813b7b1c176823b2729bf51002a2","target":1}
{"code":"static void Sp_search(js_State*J){js_Regexp*re;const char*text;Resub m;text=checkstring(J, 0);if(js_isregexp(J, 1))js_copy(J, 1);else if(js_isundefined(J, 1))js_newregexp(J, \"\", 0);else\n\t\tjs_newregexp(J, js_tostring(J, 1), 0);re=js_toregexp(J, -1);if(!js_regexec(re->prog, text, &m, 0))js_pushnumber(J, js_utfptrtoidx(text, m.sub[0].sp));else\n \t\tjs_pushnumber(J, -1);}","idx":"00d4606c3baf813b7b1c176823b2729bf51002a2","target":1}
{"code":"static void Sp_split_regexp(js_State*J){js_Regexp*re;const char*text;int limit, len, k;const char*p, *a, *b, *c, *e;Resub m;text=checkstring(J, 0);re=js_toregexp(J, 1);limit=js_isdefined(J, 2)? js_tointeger(J, 2): 1<<30;js_newarray(J);len=0;e=text+strlen(text);if(e == text){if(js_regexec(re->prog, text, &m, 0)){if(len == limit)return;js_pushliteral(J, \"\");js_setindex(J, -2, 0);}return;}p=a=text;while(a<e){if(js_regexec(re->prog, a, &m, a>text ? REG_NOTBOL : 0))break;b=m.sub[0].sp;c=m.sub[0].ep;if(b == p){++a;continue;}if(len == limit)return;js_pushlstring(J, p, b-p);js_setindex(J, -2, len++);for(k=1;k<m.nsub;++k){if(len == limit)return;js_pushlstring(J, m.sub[k].sp, m.sub[k].ep-m.sub[k].sp);js_setindex(J, -2, len++);}a=p=c;}if(len == limit)return;js_pushstring(J, p);js_setindex(J, -2, len);}","idx":"00d4606c3baf813b7b1c176823b2729bf51002a2","target":1}
{"code":"int avpriv_ac3_parse_header(AC3HeaderInfo**phdr, const uint8_t*buf, size_t size){GetBitContext gb;AC3HeaderInfo*hdr;int err;if(!*phdr)*phdr=av_mallocz(sizeof(AC3HeaderInfo));if(!*phdr)return AVERROR(ENOMEM);hdr=*phdr;init_get_bits8(&gb, buf, size);err=ff_ac3_parse_header(&gb, hdr);if(err<0)return AVERROR_INVALIDDATA;return get_bits_count(&gb);}","idx":"00e8181bd97c834fe60751b0c511d4bb97875f78","target":1}
{"code":"void DesktopNativeWidgetHelperAura::PreInitialize(aura::Window*window, const Widget::InitParams&params){#if!defined(OS_WIN)if(params.type == Widget::InitParams::TYPE_POPUP){is_embedded_window_=true;position_client_.reset(new EmbeddedWindowScreenPositionClient(widget_));aura::client::SetScreenPositionClient(window, position_client_.get());return;}else if(params.type == Widget::InitParams::TYPE_CONTROL){return;}#endif\n  gfx::Rect bounds=params.bounds;if(bounds.IsEmpty()){bounds.set_size(gfx::Size(100, 100));}root_window_.reset(new aura::RootWindow(bounds));root_window_->Init();root_window_->set_focus_manager(new aura::FocusManager);root_window_event_filter_=new aura::shared::RootWindowEventFilter(root_window_.get());root_window_->SetEventFilter(root_window_event_filter_);input_method_filter_.reset(new aura::shared::InputMethodEventFilter());root_window_event_filter_->AddFilter(input_method_filter_.get());aura::DesktopActivationClient*activation_client=new aura::DesktopActivationClient(root_window_.get());#if defined(USE_X11)x11_window_event_filter_.reset(new X11WindowEventFilter(root_window_.get(), activation_client, widget_));x11_window_event_filter_->SetUseHostWindowBorders(false);root_window_event_filter_->AddFilter(x11_window_event_filter_.get());#endif\n  root_window_->AddRootWindowObserver(this);aura::client::SetActivationClient(root_window_.get(), activation_client);aura::client::SetDispatcherClient(root_window_.get(), new aura::DesktopDispatcherClient);position_client_.reset(new RootWindowScreenPositionClient(root_window_.get()));aura::client::SetScreenPositionClient(window, position_client_.get());}","idx":"00f695aec78100076c4085388ad13eafe6eaa7c1","target":1}
{"code":"static int udf_encode_fh(struct inode*inode, __u32*fh, int*lenp, struct inode*parent){int len=*lenp;struct kernel_lb_addr location=UDF_I(inode)->i_location;struct fid*fid=(struct fid*)fh;int type=FILEID_UDF_WITHOUT_PARENT;if(parent && (len<5)){*lenp=5;return 255;}else if(len<3){*lenp=3;return 255;}*lenp=3;fid->udf.block=location.logicalBlockNum;fid->udf.partref=location.partitionReferenceNum;fid->udf.generation=inode->i_generation;if(parent){location=UDF_I(parent)->i_location;fid->udf.parent_block=location.logicalBlockNum;fid->udf.parent_partref=location.partitionReferenceNum;fid->udf.parent_generation=inode->i_generation;*lenp=5;type=FILEID_UDF_WITH_PARENT;}return type;}","idx":"0143fc5e9f6f5aad4764801015bc8d4b4a278200","target":1}
{"code":"void close_all_sockets(atransport*t){asocket*s;std::lock_guard<std::recursive_mutex>lock(local_socket_list_lock);restart:\n     for(s=local_socket_list.next;s != &local_socket_list;s=s->next){if(s->transport == t || (s->peer && s->peer->transport == t)){local_socket_close(s);goto restart;}}}","idx":"014b01706cc64dc9c2ad94a96f62e07c058d0b5d","target":1}
{"code":"do_uncompress(compress_filter_context_t*zfx, z_stream*zs, IOBUF a, size_t*ret_len){int zrc;int rc=0;size_t n;int nread, count;int refill=!zs->avail_in;if(DBG_FILTER)log_debug(\"begin inflate: avail_in=%u, avail_out=%u, inbuf=%u\\n\", (unsigned)zs->avail_in, (unsigned)zs->avail_out, (unsigned)zfx->inbufsize);do{if(zs->avail_in<zfx->inbufsize && refill){n=zs->avail_in;if(!n)zs->next_in=BYTEF_CAST(zfx->inbuf);count=zfx->inbufsize-n;nread=iobuf_read(a, zfx->inbuf+n, count);nread=iobuf_read(a, zfx->inbuf+n, count);if(nread == -1)nread=0;n+=nread;if(nread<count && zfx->algo == 1){*(zfx->inbuf+n)=0xFF;zfx->algo1hack=1;n++;}zs->avail_in=n;}log_debug(\"enter inflate: avail_in=%u, avail_out=%u\\n\", (unsigned)zs->avail_in, (unsigned)zs->avail_out);zrc=inflate(zs, Z_SYNC_FLUSH);if(DBG_FILTER)log_debug(\"leave inflate: avail_in=%u, avail_out=%u, zrc=%d\\n\", (unsigned)zs->avail_in, (unsigned)zs->avail_out, zrc);if(zrc == Z_STREAM_END)rc=-1;else if(zrc != Z_OK && zrc != Z_BUF_ERROR){if(zs->msg)log_fatal(\"zlib inflate problem:%s\\n\", zs->msg);else\n\t\tlog_fatal(\"zlib inflate problem: rc=%d\\n\", zrc);else\n                log_fatal(\"zlib inflate problem: rc=%d\\n\", zrc);}}while(zs->avail_out && zrc != Z_STREAM_END && zrc != Z_BUF_ERROR);*ret_len=zfx->outbufsize-zs->avail_out;if(DBG_FILTER)}","idx":"014b2103fcb12f261135e3954f26e9e07b39e342","target":1}
{"code":"bool TabsCaptureVisibleTabFunction::RunImpl(){PrefService*service=profile()->GetPrefs();if(service->GetBoolean(prefs::kDisableScreenshots)){error_=keys::kScreenshotsDisabled;return false;}WebContents*web_contents=NULL;if(!GetTabToCapture(&web_contents))return false;image_format_=FORMAT_JPEG;image_quality_=kDefaultQuality;if(HasOptionalArgument(1)){DictionaryValue*options=NULL;EXTENSION_FUNCTION_VALIDATE(args_->GetDictionary(1, &options));if(options->HasKey(keys::kFormatKey)){std::string format;EXTENSION_FUNCTION_VALIDATE(options->GetString(keys::kFormatKey, &format));if(format == keys::kFormatValueJpeg){image_format_=FORMAT_JPEG;}else if(format == keys::kFormatValuePng){image_format_=FORMAT_PNG;}else{EXTENSION_FUNCTION_VALIDATE(0);}}if(options->HasKey(keys::kQualityKey)){EXTENSION_FUNCTION_VALIDATE(options->GetInteger(keys::kQualityKey, &image_quality_));}}if(!GetExtension()->CanCaptureVisiblePage(web_contents->GetURL(), SessionID::IdForTab(web_contents), &error_)){return false;}RenderViewHost*render_view_host=web_contents->GetRenderViewHost();content::RenderWidgetHostView*view=render_view_host->GetView();if(!view){error_=keys::kInternalVisibleTabCaptureError;return false;}render_view_host->CopyFromBackingStore(gfx::Rect(), view->GetViewBounds().size(), base::Bind(&TabsCaptureVisibleTabFunction::CopyFromBackingStoreComplete, this));return true;}","idx":"016da29386308754274675e65fdb73cf9d59dc2d","target":1}
{"code":" static int kvm_vm_ioctl_set_pit(struct kvm*kvm, struct kvm_pit_state*ps){mutex_lock(&kvm->arch.vpit->pit_state.lock);memcpy(&kvm->arch.vpit->pit_state, ps, sizeof(struct kvm_pit_state));kvm_pit_load_count(kvm, 0, ps->channels[0].count, 0);mutex_unlock(&kvm->arch.vpit->pit_state.lock);return 0;}","idx":"0185604c2d82c560dab2f2933a18f797e74ab5a8","target":1}
{"code":" static int kvm_vm_ioctl_set_pit2(struct kvm*kvm, struct kvm_pit_state2*ps){int start=0;u32 prev_legacy, cur_legacy;mutex_lock(&kvm->arch.vpit->pit_state.lock);prev_legacy=kvm->arch.vpit->pit_state.flags&KVM_PIT_FLAGS_HPET_LEGACY;cur_legacy=ps->flags&KVM_PIT_FLAGS_HPET_LEGACY;if(!prev_legacy && cur_legacy)start=1;memcpy(&kvm->arch.vpit->pit_state.channels, &ps->channels, sizeof(kvm->arch.vpit->pit_state.channels));kvm->arch.vpit->pit_state.flags=ps->flags;kvm_pit_load_count(kvm, 0, kvm->arch.vpit->pit_state.channels[0].count, start);mutex_unlock(&kvm->arch.vpit->pit_state.lock);return 0;}","idx":"0185604c2d82c560dab2f2933a18f797e74ab5a8","target":1}
{"code":"  void Reset(){events_.clear();tap_=false;tap_down_=false;tap_cancel_=false;begin_=false;end_=false;scroll_begin_=false;scroll_update_=false;scroll_end_=false;pinch_begin_=false;pinch_update_=false;pinch_end_=false;long_press_=false;fling_=false;two_finger_tap_=false;show_press_=false;swipe_left_=false;swipe_right_=false;swipe_up_=false;swipe_down_=false;scroll_begin_position_.SetPoint(0, 0);tap_location_.SetPoint(0, 0);gesture_end_location_.SetPoint(0, 0);scroll_x_=0;scroll_y_=0;scroll_velocity_x_=0;scroll_velocity_y_=0;velocity_x_=0;velocity_y_=0;scroll_x_hint_=0;scroll_y_hint_=0;tap_count_=0;scale_=0;flags_=0;}","idx":"01924fbe6c0e0f059ca46a03f9f6b2670ae3e0fa","target":1}
{"code":" bool GestureProviderAura::OnTouchEvent(const TouchEvent&event){last_touch_event_flags_=event.flags();bool pointer_id_is_active=false;for(size_t i=0;i<pointer_state_.GetPointerCount();++i){if(event.touch_id() != pointer_state_.GetPointerId(i))continue;pointer_id_is_active=true;break;}if(event.type() == ET_TOUCH_PRESSED && pointer_id_is_active){return false;}else if(event.type() != ET_TOUCH_PRESSED && !pointer_id_is_active){return false;}pointer_state_.OnTouch(event);bool result=filtered_gesture_provider_.OnTouchEvent(pointer_state_);pointer_state_.CleanupRemovedTouchPoints(event);return result;}","idx":"01924fbe6c0e0f059ca46a03f9f6b2670ae3e0fa","target":1}
{"code":" void GestureProviderAura::OnGestureEvent(const GestureEventData&gesture){GestureEventDetails details=gesture.details;if(gesture.type == ET_GESTURE_TAP){int tap_count=1;if(previous_tap_ && IsConsideredDoubleTap(*previous_tap_, gesture))tap_count=1+(previous_tap_->details.tap_count()%3);details.set_tap_count(tap_count);if(!previous_tap_)previous_tap_.reset(new GestureEventData(gesture));else*previous_tap_=gesture;previous_tap_->details=details;}else if(gesture.type == ET_GESTURE_TAP_CANCEL){previous_tap_.reset();}scoped_ptr<ui::GestureEvent>event(new ui::GestureEvent(gesture.type, gesture.x, gesture.y, last_touch_event_flags_, gesture.time-base::TimeTicks(), details, 1<<gesture.motion_event_id));if(!handling_event_){client_->OnGestureEvent(event.get());}else{pending_gestures_.push_back(event.release());}}","idx":"01924fbe6c0e0f059ca46a03f9f6b2670ae3e0fa","target":1}
{"code":"void GestureProviderAura::OnTouchEventAck(bool event_consumed){DCHECK(pending_gestures_.empty());DCHECK(!handling_event_);base::AutoReset<bool>handling_event(&handling_event_, true);filtered_gesture_provider_.OnTouchEventAck(event_consumed);}","idx":"01924fbe6c0e0f059ca46a03f9f6b2670ae3e0fa","target":1}
{"code":"void NotificationService::RemoveObserver(NotificationObserver*observer, NotificationType type, const NotificationSource&source){DCHECK(type.value<NotificationType::NOTIFICATION_TYPE_COUNT);DCHECK(HasKey(observers_[type.value], source));NotificationObserverList*observer_list=observers_[type.value][source.map_key()];if(observer_list){observer_list->RemoveObserver(observer);#ifndef NDEBUG--observer_counts_[type.value];#endif}}","idx":"019c7acc36b8893d060684fb3b5deb6156c92b9e","target":1}
{"code":"void DownloadRequestLimiter::TabDownloadState::DidFinishNavigation(content::NavigationHandle*navigation_handle){if(!navigation_handle->IsInMainFrame())return;if(status_ == ALLOW_ONE_DOWNLOAD || (status_ == PROMPT_BEFORE_DOWNLOAD && !navigation_handle->IsRendererInitiated())){NotifyCallbacks(false);host_->Remove(this, web_contents());}}","idx":"01a6365651e0b1e9896b251411a18a4ab5a4306d","target":1}
{"code":"void DownloadRequestLimiter::TabDownloadState::DidStartNavigation(content::NavigationHandle*navigation_handle){if(!navigation_handle->IsInMainFrame())return;download_seen_=false;ui_status_=DOWNLOAD_UI_DEFAULT;if(navigation_handle->IsRendererInitiated() && (status_ == PROMPT_BEFORE_DOWNLOAD || status_ == DOWNLOADS_NOT_ALLOWED)){return;}if(status_ == DownloadRequestLimiter::ALLOW_ALL_DOWNLOADS || status_ == DownloadRequestLimiter::DOWNLOADS_NOT_ALLOWED){if(!initial_page_host_.empty() && navigation_handle->GetURL().host_piece() == initial_page_host_){return;}}NotifyCallbacks(false);host_->Remove(this, web_contents());}","idx":"01a6365651e0b1e9896b251411a18a4ab5a4306d","target":1}
{"code":"void DownloadRequestLimiter::TabDownloadState::SetDownloadStatusAndNotifyImpl(DownloadStatus status, ContentSetting setting){DCHECK((GetSettingFromDownloadStatus(status) == setting) || (GetDownloadStatusFromSetting(setting) == status))<<\"status \"<<status<<\" and setting \"<<setting<<\" do not correspond to each other\";\n  ContentSetting last_setting=GetSettingFromDownloadStatus(status_);DownloadUiStatus last_ui_status=ui_status_;status_=status;ui_status_=GetUiStatusFromDownloadStatus(status_, download_seen_);if(!web_contents())return;if(last_setting == setting && last_ui_status == ui_status_)return;content::NotificationService::current()->Notify(chrome::NOTIFICATION_WEB_CONTENT_SETTINGS_CHANGED, content::Source<content::WebContents>(web_contents()), content::NotificationService::NoDetails());}","idx":"01a6365651e0b1e9896b251411a18a4ab5a4306d","target":1}
{"code":"bool Performance::PassesTimingAllowCheck(const ResourceResponse&response, const SecurityOrigin&initiator_security_origin, const AtomicString&original_timing_allow_origin, ExecutionContext*context){scoped_refptr<const SecurityOrigin>resource_origin=SecurityOrigin::Create(response.Url());if(resource_origin->IsSameSchemeHostPort(&initiator_security_origin))return true;const AtomicString&timing_allow_origin_string=original_timing_allow_origin.IsEmpty()? response.HttpHeaderField(HTTPNames::Timing_Allow_Origin): original_timing_allow_origin;if(timing_allow_origin_string.IsEmpty() || EqualIgnoringASCIICase(timing_allow_origin_string, \"null\"))return false;if(timing_allow_origin_string == \"*\"){UseCounter::Count(context, WebFeature::kStarInTimingAllowOrigin);return true;}const String&security_origin=initiator_security_origin.ToString();Vector<String>timing_allow_origins;timing_allow_origin_string.GetString().Split(', ', timing_allow_origins);if(timing_allow_origins.size()>1){UseCounter::Count(context, WebFeature::kMultipleOriginsInTimingAllowOrigin);}else if(timing_allow_origins.size() == 1 && timing_allow_origin_string != \"*\"){UseCounter::Count(context, WebFeature::kSingleOriginInTimingAllowOrigin);}for(const String&allow_origin : timing_allow_origins){const String allow_origin_stripped=allow_origin.StripWhiteSpace();if(allow_origin_stripped == security_origin || allow_origin_stripped == \"*\"){return true;}}return false;}","idx":"01b42e2bc2aac531b17596729ae4e5c223ae7124","target":1}
{"code":"bool PDFiumEngine::HandleEvent(const pp::InputEvent&event){DCHECK(!defer_page_unload_);defer_page_unload_=true;bool rv=false;switch(event.GetType()){case PP_INPUTEVENT_TYPE_MOUSEDOWN:\n      rv=OnMouseDown(pp::MouseInputEvent(event));break;case PP_INPUTEVENT_TYPE_MOUSEUP:\n      rv=OnMouseUp(pp::MouseInputEvent(event));break;case PP_INPUTEVENT_TYPE_MOUSEMOVE:\n      rv=OnMouseMove(pp::MouseInputEvent(event));break;case PP_INPUTEVENT_TYPE_KEYDOWN:\n      rv=OnKeyDown(pp::KeyboardInputEvent(event));break;case PP_INPUTEVENT_TYPE_KEYUP:\n      rv=OnKeyUp(pp::KeyboardInputEvent(event));break;case PP_INPUTEVENT_TYPE_CHAR:\n      rv=OnChar(pp::KeyboardInputEvent(event));break;case PP_INPUTEVENT_TYPE_TOUCHSTART:{KillTouchTimer(next_touch_timer_id_);pp::TouchInputEvent touch_event(event);if(touch_event.GetTouchCount(PP_TOUCHLIST_TYPE_TARGETTOUCHES) == 1)ScheduleTouchTimer(touch_event);break;}case PP_INPUTEVENT_TYPE_TOUCHEND:\n      KillTouchTimer(next_touch_timer_id_);break;case PP_INPUTEVENT_TYPE_TOUCHMOVE:\n      KillTouchTimer(next_touch_timer_id_);default:\n      break;}DCHECK(defer_page_unload_);defer_page_unload_=false;for(int page_index : deferred_page_unloads_)pages_[page_index]->Unload();deferred_page_unloads_.clear();return rv;}","idx":"01c9a7e71ca435651723e8cbcab0b3ad4c5351e2","target":1}
{"code":"static int __init fm10k_init_module(void){pr_info(\"%s-version%s\\n\", fm10k_driver_string, fm10k_driver_version);pr_info(\"%s\\n\", fm10k_copyright);fm10k_workqueue=alloc_workqueue(\"%s\", WQ_MEM_RECLAIM, 0, fm10k_driver_name);fm10k_dbg_init();return fm10k_register_pci_driver();}","idx":"01ca667133d019edc9f0a1f70a272447c84ec41f","target":1}
{"code":"UWORD32 ihevcd_cabac_decode_bypass_bins_egk(cab_ctxt_t*ps_cabac, bitstrm_t*ps_bitstrm, WORD32 k){UWORD32 u4_sym;WORD32 numones;WORD32 bin;ASSERT((k >= 0));numones=k;bin=1;u4_sym=0;while(bin){IHEVCD_CABAC_DECODE_BYPASS_BIN(bin, ps_cabac, ps_bitstrm);u4_sym+=bin<<numones++;}numones-=1;numones=CLIP3(numones, 0, 16);if(numones){UWORD32 u4_suffix;IHEVCD_CABAC_DECODE_BYPASS_BINS(u4_suffix, ps_cabac, ps_bitstrm, numones);u4_sym+=u4_suffix;}return(u4_sym);}","idx":"01ca88bb6c5bdd44e071f8effebe12f1d7da9853","target":1}
{"code":"static PassRefPtr<CSSValue>getPositionOffsetValue(RenderStyle*style, CSSPropertyID propertyID, RenderView*renderView){if(!style)return 0;Length l;switch(propertyID){case CSSPropertyLeft:\n            l=style->left();break;case CSSPropertyRight:\n            l=style->right();break;case CSSPropertyTop:\n            l=style->top();break;case CSSPropertyBottom:\n            l=style->bottom();break;default:\n            return 0;}if(style->position() == AbsolutePosition || style->position() == FixedPosition){if(l.type() == WebCore::Fixed)return zoomAdjustedPixelValue(l.value(), style);else if(l.isViewportPercentage())return zoomAdjustedPixelValue(valueForLength(l, 0, renderView), style);return cssValuePool().createValue(l);}if(style->position() == RelativePosition)return cssValuePool().createValue(l);return cssValuePool().createIdentifierValue(CSSValueAuto);}","idx":"01e4ee2fda0a5e57a8d0c8cb829022eb84fdff12","target":1}
{"code":"CWD_API void realpath_cache_del(const char*path, int path_len TSRMLS_DC){#ifdef PHP_WIN32\n\tunsigned long key=realpath_cache_key(path, path_len TSRMLS_CC);#else\n\tunsigned long key=realpath_cache_key(path, path_len);#endif\n\tunsigned long n=key%(sizeof(CWDG(realpath_cache))\/sizeof(CWDG(realpath_cache)[0]));realpath_cache_bucket**bucket=&CWDG(realpath_cache)[n];while(*bucket != NULL){if(key == (*bucket)->key && path_len == (*bucket)->path_len && memcmp(path, (*bucket)->path, path_len) == 0){realpath_cache_bucket*r=*bucket;*bucket=(*bucket)->next;if(r->path == r->realpath){CWDG(realpath_cache_size)-=sizeof(realpath_cache_bucket)+r->path_len+1;}else{CWDG(realpath_cache_size)-=sizeof(realpath_cache_bucket)+r->path_len+1+r->realpath_len+1;}free(r);return;}else{bucket=&(*bucket)->next;}}}","idx":"0218acb7e756a469099c4ccfb22bce6c2bd1ef87","target":1}
{"code":"XSLStyleSheet::XSLStyleSheet(Node*parentNode, const String&originalURL, const KURL&finalURL, bool embedded): m_ownerNode(parentNode), m_originalURL(originalURL), m_finalURL(finalURL), m_isDisabled(false), m_embedded(embedded), m_processed(true), m_stylesheetDoc(0), m_stylesheetDocTaken(false), m_parentStyleSheet(0){}","idx":"0220f39fac21d169a834ef91de362f4169f2eef5","target":1}
{"code":"XSLStyleSheet::XSLStyleSheet(XSLImportRule*parentRule, const String&originalURL, const KURL&finalURL): m_ownerNode(0), m_originalURL(originalURL), m_finalURL(finalURL), m_isDisabled(false), m_embedded(false), m_processed(false), m_stylesheetDoc(0), m_stylesheetDocTaken(false), m_parentStyleSheet(parentRule ? parentRule->parentStyleSheet(): 0){}","idx":"0220f39fac21d169a834ef91de362f4169f2eef5","target":1}
{"code":"xsltStylesheetPtr XSLStyleSheet::compileStyleSheet(){if(m_embedded)return xsltLoadStylesheetPI(document());ASSERT(!m_stylesheetDocTaken);xsltStylesheetPtr result=xsltParseStylesheetDoc(m_stylesheetDoc);if(result)m_stylesheetDocTaken=true;return result;}","idx":"0220f39fac21d169a834ef91de362f4169f2eef5","target":1}
{"code":"static PixelChannels**AcquirePixelThreadSet(const Image*images){const Image*next;PixelChannels**pixels;register ssize_t\n    i;size_t\n     columns, number_threads;number_threads=(size_t)GetMagickResourceLimit(ThreadResource);pixels=(PixelChannels**)AcquireQuantumMemory(number_threads, sizeof(*pixels));if(pixels == (PixelChannels**)NULL)return((PixelChannels**)NULL);(void)memset(pixels, 0, number_threads*sizeof(*pixels));columns=images->columns;for(next=images;next != (Image*)NULL;next=next->next)columns=MagickMax(next->columns, columns);for(i=0;i<(ssize_t)number_threads;i++){register ssize_t\n       j;pixels[i]=(PixelChannels*)AcquireQuantumMemory(columns, sizeof(**pixels));if(pixels[i] == (PixelChannels*)NULL)return(DestroyPixelThreadSet(pixels));for(j=0;j<(ssize_t)columns;j++){register ssize_t\n        k;for(k=0;k<MaxPixelChannels;k++)pixels[i][j].channel[k]=0.0;}}return(pixels);}","idx":"025e77fcb2f45b21689931ba3bf74eac153afa48","target":1}
{"code":"bool BaseSessionService::RestoreUpdateTabNavigationCommand(const SessionCommand&command, TabNavigation*navigation, SessionID::id_type*tab_id){scoped_ptr<Pickle>pickle(command.PayloadAsPickle());if(!pickle.get())return false;void*iterator=NULL;std::string url_spec;if(!pickle->ReadInt(&iterator, tab_id) || !pickle->ReadInt(&iterator, &(navigation->index_)) || !pickle->ReadString(&iterator, &url_spec) || !pickle->ReadString16(&iterator, &(navigation->title_)) || !pickle->ReadString(&iterator, &(navigation->state_)) || !pickle->ReadInt(&iterator, reinterpret_cast<int*>(&(navigation->transition_))))return false;bool has_type_mask=pickle->ReadInt(&iterator, &(navigation->type_mask_));if(has_type_mask){std::string referrer_spec;pickle->ReadString(&iterator, &referrer_spec);int policy_int;WebReferrerPolicy policy;if(pickle->ReadInt(&iterator, &policy_int))policy=static_cast<WebReferrerPolicy>(policy_int);else\n      policy=WebKit::WebReferrerPolicyDefault;navigation->referrer_=content::Referrer(referrer_spec.empty()? GURL(): GURL(referrer_spec), policy);std::string content_state;if(CompressDataHelper::ReadAndDecompressStringFromPickle(*pickle.get(), &iterator, &content_state) && !content_state.empty()){navigation->state_=content_state;}}navigation->virtual_url_=GURL(url_spec);return true;}","idx":"027429ee5abe6e2fb5e3b2b4542f0a6fe0dbc12d","target":1}
{"code":"        static PassRefPtrWillBeRawPtr<CreateFileResult>create(){return adoptRefWillBeNoop(new CreateFileResult());}","idx":"02c8303512ebed345011f7b545e2f418799be2f0","target":1}
{"code":"        ~CreateFileResult(){}","idx":"02c8303512ebed345011f7b545e2f418799be2f0","target":1}
{"code":"    CreateFileHelper(PassRefPtrWillBeRawPtr<CreateFileResult>result, const String&name, const KURL&url, FileSystemType type): m_result(result), m_name(name), m_url(url), m_type(type){}","idx":"02c8303512ebed345011f7b545e2f418799be2f0","target":1}
{"code":"    static PassOwnPtr<AsyncFileSystemCallbacks>create(PassRefPtrWillBeRawPtr<CreateFileResult>result, const String&name, const KURL&url, FileSystemType type){return adoptPtr(static_cast<AsyncFileSystemCallbacks*>(new CreateFileHelper(result, name, url, type)));}","idx":"02c8303512ebed345011f7b545e2f418799be2f0","target":1}
{"code":" DirectoryEntrySync*DirectoryEntrySync::getDirectory(const String&path, const Dictionary&options, ExceptionState&exceptionState){FileSystemFlags flags(options);RefPtr<EntrySyncCallbackHelper>helper=EntrySyncCallbackHelper::create();m_fileSystem->getDirectory(this, path, flags, helper->successCallback(), helper->errorCallback(), DOMFileSystemBase::Synchronous);return static_cast<DirectoryEntrySync*>(helper->getResult(exceptionState));}","idx":"02c8303512ebed345011f7b545e2f418799be2f0","target":1}
{"code":" EntrySync*EntrySync::copyTo(DirectoryEntrySync*parent, const String&name, ExceptionState&exceptionState)const{RefPtr<EntrySyncCallbackHelper>helper=EntrySyncCallbackHelper::create();m_fileSystem->copy(this, parent, name, helper->successCallback(), helper->errorCallback(), DOMFileSystemBase::Synchronous);return helper->getResult(exceptionState);}","idx":"02c8303512ebed345011f7b545e2f418799be2f0","target":1}
{"code":" Metadata*EntrySync::getMetadata(ExceptionState&exceptionState){RefPtr<MetadataSyncCallbackHelper>helper=MetadataSyncCallbackHelper::create();m_fileSystem->getMetadata(this, helper->successCallback(), helper->errorCallback(), DOMFileSystemBase::Synchronous);return helper->getResult(exceptionState);}","idx":"02c8303512ebed345011f7b545e2f418799be2f0","target":1}
{"code":" PassRefPtrWillBeRawPtr<File>DOMFileSystemSync::createFile(const FileEntrySync*fileEntry, ExceptionState&exceptionState){KURL fileSystemURL=createFileSystemURL(fileEntry);RefPtrWillBeRawPtr<CreateFileHelper::CreateFileResult>result(CreateFileHelper::CreateFileResult::create());fileSystem()->createSnapshotFileAndReadMetadata(fileSystemURL, CreateFileHelper::create(result, fileEntry->name(), fileSystemURL, type()));if(result->m_failed){exceptionState.throwDOMException(result->m_code, \"Could not create '\"+fileEntry->name()+\"'.\");return nullptr;}return result->m_file.get();}","idx":"02c8303512ebed345011f7b545e2f418799be2f0","target":1}
{"code":" void DirectoryEntrySync::removeRecursively(ExceptionState&exceptionState){RefPtr<VoidSyncCallbackHelper>helper=VoidSyncCallbackHelper::create();m_fileSystem->removeRecursively(this, helper->successCallback(), helper->errorCallback(), DOMFileSystemBase::Synchronous);helper->getResult(exceptionState);}","idx":"02c8303512ebed345011f7b545e2f418799be2f0","target":1}
{"code":" void LocalFileSystem::deleteFileSystemInternal(PassRefPtrWillBeRawPtr<ExecutionContext>context, FileSystemType type, PassRefPtr<CallbackWrapper>callbacks){if(!fileSystem()){fileSystemNotAvailable(context, callbacks);return;}KURL storagePartition=KURL(KURL(), context->securityOrigin()->toString());fileSystem()->deleteFileSystem(storagePartition, static_cast<WebFileSystemType>(type), callbacks->release());}","idx":"02c8303512ebed345011f7b545e2f418799be2f0","target":1}
{"code":" void LocalFileSystem::fileSystemNotAllowedInternal(PassRefPtrWillBeRawPtr<ExecutionContext>context, PassRefPtr<CallbackWrapper>callbacks){context->postTask(createCrossThreadTask(&reportFailure, callbacks->release(), FileError::ABORT_ERR));}","idx":"02c8303512ebed345011f7b545e2f418799be2f0","target":1}
{"code":" void LocalFileSystem::requestFileSystem(ExecutionContext*context, FileSystemType type, long long size, PassOwnPtr<AsyncFileSystemCallbacks>callbacks){RefPtrWillBeRawPtr<ExecutionContext>contextPtr(context);RefPtr<CallbackWrapper>wrapper=adoptRef(new CallbackWrapper(callbacks));requestFileSystemAccessInternal(context, bind(&LocalFileSystem::fileSystemAllowedInternal, this, contextPtr, type, wrapper), bind(&LocalFileSystem::fileSystemNotAllowedInternal, this, contextPtr, wrapper));}","idx":"02c8303512ebed345011f7b545e2f418799be2f0","target":1}
{"code":" void LocalFileSystem::resolveURL(ExecutionContext*context, const KURL&fileSystemURL, PassOwnPtr<AsyncFileSystemCallbacks>callbacks){RefPtrWillBeRawPtr<ExecutionContext>contextPtr(context);RefPtr<CallbackWrapper>wrapper=adoptRef(new CallbackWrapper(callbacks));requestFileSystemAccessInternal(context, bind(&LocalFileSystem::resolveURLInternal, this, contextPtr, fileSystemURL, wrapper), bind(&LocalFileSystem::fileSystemNotAllowedInternal, this, contextPtr, wrapper));}","idx":"02c8303512ebed345011f7b545e2f418799be2f0","target":1}
{"code":" void LocalFileSystem::resolveURLInternal(PassRefPtrWillBeRawPtr<ExecutionContext>context, const KURL&fileSystemURL, PassRefPtr<CallbackWrapper>callbacks){if(!fileSystem()){fileSystemNotAvailable(context, callbacks);return;}fileSystem()->resolveURL(fileSystemURL, callbacks->release());}","idx":"02c8303512ebed345011f7b545e2f418799be2f0","target":1}
{"code":"DOMFileSystemSync*WorkerGlobalScopeFileSystem::webkitRequestFileSystemSync(WorkerGlobalScope&worker, int type, long long size, ExceptionState&exceptionState){ExecutionContext*secureContext=worker.executionContext();if(!secureContext->securityOrigin()->canAccessFileSystem()){exceptionState.throwSecurityError(FileError::securityErrorMessage);return 0;}FileSystemType fileSystemType=static_cast<FileSystemType>(type);if(!DOMFileSystemBase::isValidType(fileSystemType)){exceptionState.throwDOMException(InvalidModificationError, \"the type must be TEMPORARY or PERSISTENT.\");return 0;}RefPtr<FileSystemSyncCallbackHelper>helper=FileSystemSyncCallbackHelper::create();OwnPtr<AsyncFileSystemCallbacks>callbacks=FileSystemCallbacks::create(helper->successCallback(), helper->errorCallback(), &worker, fileSystemType);callbacks->setShouldBlockUntilCompletion(true);LocalFileSystem::from(worker)->requestFileSystem(&worker, fileSystemType, size, callbacks.release());return helper->getResult(exceptionState);}","idx":"02c8303512ebed345011f7b545e2f418799be2f0","target":1}
{"code":"EntrySync*WorkerGlobalScopeFileSystem::webkitResolveLocalFileSystemSyncURL(WorkerGlobalScope&worker, const String&url, ExceptionState&exceptionState){KURL completedURL=worker.completeURL(url);ExecutionContext*secureContext=worker.executionContext();if(!secureContext->securityOrigin()->canAccessFileSystem() || !secureContext->securityOrigin()->canRequest(completedURL)){exceptionState.throwSecurityError(FileError::securityErrorMessage);return 0;}if(!completedURL.isValid()){exceptionState.throwDOMException(EncodingError, \"the URL '\"+url+\"' is invalid.\");return 0;}RefPtr<EntrySyncCallbackHelper>resolveURLHelper=EntrySyncCallbackHelper::create();OwnPtr<AsyncFileSystemCallbacks>callbacks=ResolveURICallbacks::create(resolveURLHelper->successCallback(), resolveURLHelper->errorCallback(), &worker);callbacks->setShouldBlockUntilCompletion(true);LocalFileSystem::from(worker)->resolveURL(&worker, completedURL, callbacks.release());return resolveURLHelper->getResult(exceptionState);}","idx":"02c8303512ebed345011f7b545e2f418799be2f0","target":1}
{"code":"void LocalFileSystem::deleteFileSystem(ExecutionContext*context, FileSystemType type, PassOwnPtr<AsyncFileSystemCallbacks>callbacks){RefPtrWillBeRawPtr<ExecutionContext>contextPtr(context);ASSERT(context);ASSERT_WITH_SECURITY_IMPLICATION(context->isDocument());RefPtr<CallbackWrapper>wrapper=adoptRef(new CallbackWrapper(callbacks));requestFileSystemAccessInternal(context, bind(&LocalFileSystem::deleteFileSystemInternal, this, contextPtr, type, wrapper), bind(&LocalFileSystem::fileSystemNotAllowedInternal, this, contextPtr, wrapper));}","idx":"02c8303512ebed345011f7b545e2f418799be2f0","target":1}
{"code":"static int snd_seq_ioctl_remove_events(struct snd_seq_client*client, void __user*arg){struct snd_seq_remove_events info;if(copy_from_user(&info, arg, sizeof(info)))return-EFAULT;if(info.remove_mode&SNDRV_SEQ_REMOVE_INPUT){if(client->type == USER_CLIENT)snd_seq_fifo_clear(client->data.user.fifo);}if(info.remove_mode&SNDRV_SEQ_REMOVE_OUTPUT)snd_seq_queue_remove_cells(client->number, &info);return 0;}","idx":"030e2c78d3a91dd0d27fef37e91950dde333eba1","target":1}
{"code":" bool SVGElement::HasSVGParent()const{return ParentOrShadowHostElement() && ParentOrShadowHostElement()->IsSVGElement();}","idx":"032c3339bfb454c65ce38e7eafe49a54bac83073","target":1}
{"code":"status_t SoundTriggerHwService::Module::loadSoundModel(const sp<IMemory>&modelMemory, sound_model_handle_t*handle){ALOGV(\"loadSoundModel()handle\");if(!captureHotwordAllowed()){return PERMISSION_DENIED;}if(modelMemory == 0 || modelMemory->pointer() == NULL){ALOGE(\"loadSoundModel()modelMemory is 0 or has NULL pointer()\");return BAD_VALUE;}struct sound_trigger_sound_model*sound_model=(struct sound_trigger_sound_model*)modelMemory->pointer();AutoMutex lock(mLock);if(mModels.size() >= mDescriptor.properties.max_sound_models){ALOGW(\"loadSoundModel(): Not loading, max number of models(%d)would be exceeded\", mDescriptor.properties.max_sound_models);return INVALID_OPERATION;}status_t status=mHwDevice->load_sound_model(mHwDevice, sound_model, SoundTriggerHwService::soundModelCallback, this, handle);if(status != NO_ERROR){return status;}audio_session_t session;audio_io_handle_t ioHandle;audio_devices_t device;status=AudioSystem::acquireSoundTriggerSession(&session, &ioHandle, &device);if(status != NO_ERROR){return status;}sp<Model>model=new Model(*handle, session, ioHandle, device, sound_model->type);mModels.replaceValueFor(*handle, model);return status;}","idx":"035cb12f392860113dce96116a5150e2fde6f0cc","target":1}
{"code":"status_t SoundTriggerHwService::Module::startRecognition(sound_model_handle_t handle, const sp<IMemory>&dataMemory){ALOGV(\"startRecognition()model handle%d\", handle);if(!captureHotwordAllowed()){return PERMISSION_DENIED;}if(dataMemory != 0 && dataMemory->pointer() == NULL){ALOGE(\"startRecognition()dataMemory is non-0 but has NULL pointer()\");return BAD_VALUE;}AutoMutex lock(mLock);if(mServiceState == SOUND_TRIGGER_STATE_DISABLED){return INVALID_OPERATION;}sp<Model>model=getModel(handle);if(model == 0){return BAD_VALUE;}if((dataMemory == 0) || (dataMemory->size()<sizeof(struct sound_trigger_recognition_config))){return BAD_VALUE;}if(model->mState == Model::STATE_ACTIVE){return INVALID_OPERATION;}struct sound_trigger_recognition_config*config=(struct sound_trigger_recognition_config*)dataMemory->pointer();config->capture_handle=model->mCaptureIOHandle;config->capture_device=model->mCaptureDevice;status_t status=mHwDevice->start_recognition(mHwDevice, handle, config, SoundTriggerHwService::recognitionCallback, this);if(status == NO_ERROR){model->mState=Model::STATE_ACTIVE;model->mConfig=*config;}return status;}","idx":"035cb12f392860113dce96116a5150e2fde6f0cc","target":1}
{"code":" bool InputWindowInfo::frameContainsPoint(int32_t x, int32_t y)const{return x >= frameLeft && x <= frameRight && y >= frameTop && y <= frameBottom;}","idx":"03a53d1c7765eeb3af0bc34c3dff02ada1953fbf","target":1}
{"code":" bool InputWindowInfo::isTrustedOverlay()const{return layoutParamsType == TYPE_INPUT_METHOD || layoutParamsType == TYPE_INPUT_METHOD_DIALOG || layoutParamsType == TYPE_MAGNIFICATION_OVERLAY || layoutParamsType == TYPE_SECURE_SYSTEM_OVERLAY;}","idx":"03a53d1c7765eeb3af0bc34c3dff02ada1953fbf","target":1}
{"code":"HistogramBase*SparseHistogram::FactoryGet(const std::string&name, int32_t flags){HistogramBase*histogram=StatisticsRecorder::FindHistogram(name);if(!histogram){PersistentMemoryAllocator::Reference histogram_ref=0;std::unique_ptr<HistogramBase>tentative_histogram;PersistentHistogramAllocator*allocator=GlobalHistogramAllocator::Get();if(allocator){tentative_histogram=allocator->AllocateHistogram(SPARSE_HISTOGRAM, name, 0, 0, nullptr, flags, &histogram_ref);}if(!tentative_histogram){DCHECK(!histogram_ref);DCHECK(!allocator);flags&=~HistogramBase::kIsPersistent;tentative_histogram.reset(new SparseHistogram(name));tentative_histogram->SetFlags(flags);}const void*tentative_histogram_ptr=tentative_histogram.get();histogram=StatisticsRecorder::RegisterOrDeleteDuplicate(tentative_histogram.release());if(histogram_ref){allocator->FinalizeHistogram(histogram_ref, histogram == tentative_histogram_ptr);}ReportHistogramActivity(*histogram, HISTOGRAM_CREATED);}else{ReportHistogramActivity(*histogram, HISTOGRAM_LOOKUP);}DCHECK_EQ(SPARSE_HISTOGRAM, histogram->GetHistogramType());return histogram;}","idx":"03c2e97746a2c471ae136b0c669f8d0c033fe168","target":1}
{"code":"int FAST_FUNC start_bunzip(bunzip_data**bdp, int in_fd, const void*inbuf, int len){bunzip_data*bd;unsigned i;enum{BZh0=('B'<<24)+('Z'<<16)+('h'<<8)+'0', h0=('h'<<8)+'0', };i=sizeof(bunzip_data);if(in_fd != -1)i+=IOBUF_SIZE;bd=*bdp=xzalloc(i);bd->in_fd=in_fd;if(-1 == in_fd){bd->inbuf=(void*)inbuf;}else{bd->inbuf=(uint8_t*)(bd+1);memcpy(bd->inbuf, inbuf, len);}bd->inbufCount=len;crc32_filltable(bd->crc32Table, 1);i=setjmp(bd->jmpbuf);if(i)return i;i=get_bits(bd, 16);if((unsigned)(i-h0-1) >= 9)return RETVAL_NOT_BZIP_DATA;bd->dbufSize=100000*(i-h0);bd->dbuf=malloc_or_warn(bd->dbufSize*sizeof(bd->dbuf[0]));if(!bd->dbuf){free(bd);xfunc_die();}return RETVAL_OK;}","idx":"0402cb32df015d9372578e3db27db47b33d5c7b0","target":0}
{"code":"int main(int argc, char**argv){char c;int i=unpack_bz2_stream(0, 1);if(i<0)fprintf(stderr, \"%s\\n\", bunzip_errors[-i]);else if(read(STDIN_FILENO, &c, 1))fprintf(stderr, \"Trailing garbage ignored\\n\");return-i;}","idx":"0402cb32df015d9372578e3db27db47b33d5c7b0","target":0}
{"code":"static unsigned get_bits(bunzip_data*bd, int bits_wanted){unsigned bits=0;int bit_count=bd->inbufBitCount;while(bit_count<bits_wanted){if(bd->inbufPos == bd->inbufCount){bd->inbufCount=read(bd->in_fd, bd->inbuf, IOBUF_SIZE);if(bd->inbufCount <= 0)longjmp(bd->jmpbuf, RETVAL_UNEXPECTED_INPUT_EOF);bd->inbufPos=0;}if(bit_count >= 24){bits=bd->inbufBits&((1U<<bit_count)-1);bits_wanted-=bit_count;bits< <= bits_wanted;bit_count=0;}bd->inbufBits=(bd->inbufBits<<8)|bd->inbuf[bd->inbufPos++];bit_count+=8;}bit_count-=bits_wanted;bd->inbufBitCount=bit_count;bits|=(bd->inbufBits>>bit_count)&((1<<bits_wanted)-1);return bits;}","idx":"0402cb32df015d9372578e3db27db47b33d5c7b0","target":0}
{"code":"unpack_bz2_stream(transformer_state_t*xstate){IF_DESKTOP(long long total_written=0;)bunzip_data*bd;char*outbuf;int i;unsigned len;if(check_signature16(xstate, BZIP2_MAGIC))return-1;outbuf=xmalloc(IOBUF_SIZE);len=0;while(1){i=start_bunzip(&bd, xstate->src_fd, outbuf+2, len);if(i == 0){while(1){i=read_bunzip(bd, outbuf, IOBUF_SIZE);if(i<0)break;i=IOBUF_SIZE-i;if(i == 0)break;if(i != transformer_write(xstate, outbuf, i)){i=RETVAL_SHORT_WRITE;goto release_mem;}IF_DESKTOP(total_written+=i;)}}if(i != RETVAL_LAST_BLOCK && i != RETVAL_OK){bb_error_msg(\"bunzip error%d\", i);break;}if(bd->headerCRC != bd->totalCRC){bb_error_msg(\"CRC error\");break;}i=RETVAL_OK;len=bd->inbufCount-bd->inbufPos;memcpy(outbuf, &bd->inbuf[bd->inbufPos], len);if(len<2){if(safe_read(xstate->src_fd, outbuf+len, 2-len) != 2-len)break;len=2;}if(*(uint16_t*)outbuf != BZIP2_MAGIC)break;dealloc_bunzip(bd);len-=2;}release_mem:\n\tdealloc_bunzip(bd);free(outbuf);return i ? i : IF_DESKTOP(total_written)+0;}","idx":"0402cb32df015d9372578e3db27db47b33d5c7b0","target":0}
{"code":"void FAST_FUNC dealloc_bunzip(bunzip_data*bd){free(bd->dbuf);free(bd);}","idx":"0402cb32df015d9372578e3db27db47b33d5c7b0","target":0}
{"code":"static struct ucounts*get_ucounts(struct user_namespace*ns, kuid_t uid){struct hlist_head*hashent=ucounts_hashentry(ns, uid);struct ucounts*ucounts, *new;spin_lock_irq(&ucounts_lock);ucounts=find_ucounts(ns, uid, hashent);if(!ucounts){spin_unlock_irq(&ucounts_lock);new=kzalloc(sizeof(*new), GFP_KERNEL);if(!new)return NULL;new->ns=ns;new->uid=uid;atomic_set(&new->count, 0);spin_lock_irq(&ucounts_lock);ucounts=find_ucounts(ns, uid, hashent);if(ucounts){kfree(new);}else{hlist_add_head(&new->node, hashent);ucounts=new;}}if(!atomic_add_unless(&ucounts->count, 1, INT_MAX))ucounts=NULL;spin_unlock_irq(&ucounts_lock);return ucounts;}","idx":"040757f738e13caaa9c5078bca79aa97e11dde88","target":1}
{"code":"static void put_ucounts(struct ucounts*ucounts){unsigned long flags;if(atomic_dec_and_test(&ucounts->count)){spin_lock_irqsave(&ucounts_lock, flags);hlist_del_init(&ucounts->node);spin_unlock_irqrestore(&ucounts_lock, flags);kfree(ucounts);}}","idx":"040757f738e13caaa9c5078bca79aa97e11dde88","target":1}
{"code":" INST_HANDLER(lds){int d=((buf[0]>>4)&0xf)|((buf[1]&0x1)<<4);int k=(buf[3]<<8)|buf[2];op->ptr=k;__generic_ld_st(op, \"ram\", 0, 1, 0, k, 0);ESIL_A(\"r%d, =, \", d);}","idx":"041e53cab7ca33481ae45ecd65ad596976d78e68","target":1}
{"code":"bool ldb_dn_add_base(struct ldb_dn*dn, struct ldb_dn*base){const char*s;char*t;if(!base || base->invalid || !dn || dn->invalid){return false;}if(dn->components){unsigned int i;if(!ldb_dn_validate(base)){return false;}s=NULL;if(dn->valid_case){if(!(s=ldb_dn_get_casefold(base))){return false;}}dn->components=talloc_realloc(dn, dn->components, struct ldb_dn_component, dn->comp_num+base->comp_num);if(!dn->components){ldb_dn_mark_invalid(dn);return false;}for(i=0;i<base->comp_num;dn->comp_num++, i++){dn->components[dn->comp_num]=ldb_dn_copy_component(dn->components, &base->components[i]);if(dn->components[dn->comp_num].value.data == NULL){ldb_dn_mark_invalid(dn);return false;}}if(dn->casefold && s){if(*dn->casefold){t=talloc_asprintf(dn, \"%s, %s\", dn->casefold, s);}else{t=talloc_strdup(dn, s);}LDB_FREE(dn->casefold);dn->casefold=t;}}if(dn->linearized){s=ldb_dn_get_linearized(base);if(!s){return false;}if(*dn->linearized){t=talloc_asprintf(dn, \"%s, %s\", dn->linearized, s);}else{t=talloc_strdup(dn, s);}if(!t){ldb_dn_mark_invalid(dn);return false;}LDB_FREE(dn->linearized);dn->linearized=t;}LDB_FREE(dn->ext_linearized);LDB_FREE(dn->ext_components);dn->ext_comp_num=0;return true;}","idx":"0454b95657846fcecf0f51b6f1194faac02518bd","target":0}
{"code":"bool ldb_dn_add_base_fmt(struct ldb_dn*dn, const char*base_fmt, ...){struct ldb_dn*base;char*base_str;va_list ap;bool ret;if(!dn || dn->invalid){return false;}va_start(ap, base_fmt);base_str=talloc_vasprintf(dn, base_fmt, ap);va_end(ap);if(base_str == NULL){return false;}base=ldb_dn_new(base_str, dn->ldb, base_str);ret=ldb_dn_add_base(dn, base);talloc_free(base_str);return ret;}","idx":"0454b95657846fcecf0f51b6f1194faac02518bd","target":0}
{"code":"bool ldb_dn_add_child_fmt(struct ldb_dn*dn, const char*child_fmt, ...){struct ldb_dn*child;char*child_str;va_list ap;bool ret;if(!dn || dn->invalid){return false;}va_start(ap, child_fmt);child_str=talloc_vasprintf(dn, child_fmt, ap);va_end(ap);if(child_str == NULL){return false;}child=ldb_dn_new(child_str, dn->ldb, child_str);ret=ldb_dn_add_child(dn, child);talloc_free(child_str);return ret;}","idx":"0454b95657846fcecf0f51b6f1194faac02518bd","target":0}
{"code":"bool ldb_dn_check_special(struct ldb_dn*dn, const char*check){if(!dn || dn->invalid)return false;return!strcmp(dn->linearized, check);}","idx":"0454b95657846fcecf0f51b6f1194faac02518bd","target":0}
{"code":"bool ldb_dn_has_extended(struct ldb_dn*dn){if(!dn || dn->invalid)return false;if(dn->ext_linearized && (dn->ext_linearized[0] == '<'))return true;return dn->ext_comp_num != 0;}","idx":"0454b95657846fcecf0f51b6f1194faac02518bd","target":0}
{"code":"bool ldb_dn_is_null(struct ldb_dn*dn){if(!dn || dn->invalid)return false;if(ldb_dn_has_extended(dn))return false;if(dn->linearized && (dn->linearized[0] == '\\0'))return true;return false;}","idx":"0454b95657846fcecf0f51b6f1194faac02518bd","target":0}
{"code":"bool ldb_dn_is_special(struct ldb_dn*dn){if(!dn || dn->invalid)return false;return dn->special;}","idx":"0454b95657846fcecf0f51b6f1194faac02518bd","target":0}
{"code":"bool ldb_dn_remove_base_components(struct ldb_dn*dn, unsigned int num){unsigned int i;if(!ldb_dn_validate(dn)){return false;}if(dn->comp_num<num){return false;}for(i=dn->comp_num-num;i<dn->comp_num;i++){LDB_FREE(dn->components[i].name);LDB_FREE(dn->components[i].value.data);LDB_FREE(dn->components[i].cf_name);LDB_FREE(dn->components[i].cf_value.data);}dn->comp_num-=num;if(dn->valid_case){for(i=0;i<dn->comp_num;i++){LDB_FREE(dn->components[i].cf_name);LDB_FREE(dn->components[i].cf_value.data);}dn->valid_case=false;}LDB_FREE(dn->casefold);LDB_FREE(dn->linearized);LDB_FREE(dn->ext_linearized);LDB_FREE(dn->ext_components);dn->ext_comp_num=0;return true;}","idx":"0454b95657846fcecf0f51b6f1194faac02518bd","target":0}
{"code":"bool ldb_dn_replace_components(struct ldb_dn*dn, struct ldb_dn*new_dn){int i;if(!ldb_dn_validate(dn) || !ldb_dn_validate(new_dn)){return false;}for(i=0;i<dn->comp_num;i++){LDB_FREE(dn->components[i].name);LDB_FREE(dn->components[i].value.data);LDB_FREE(dn->components[i].cf_name);LDB_FREE(dn->components[i].cf_value.data);}dn->components=talloc_realloc(dn, dn->components, struct ldb_dn_component, new_dn->comp_num);if(dn->components == NULL){ldb_dn_mark_invalid(dn);return false;}dn->comp_num=new_dn->comp_num;dn->valid_case=new_dn->valid_case;for(i=0;i<dn->comp_num;i++){dn->components[i]=ldb_dn_copy_component(dn->components, &new_dn->components[i]);if(dn->components[i].name == NULL){ldb_dn_mark_invalid(dn);return false;}}if(new_dn->linearized == NULL){dn->linearized=NULL;}else{dn->linearized=talloc_strdup(dn, new_dn->linearized);if(dn->linearized == NULL){ldb_dn_mark_invalid(dn);return false;}}return true;}","idx":"0454b95657846fcecf0f51b6f1194faac02518bd","target":0}
{"code":"char*ldb_dn_alloc_linearized(TALLOC_CTX*mem_ctx, struct ldb_dn*dn){return talloc_strdup(mem_ctx, ldb_dn_get_linearized(dn));}","idx":"0454b95657846fcecf0f51b6f1194faac02518bd","target":0}
{"code":"char*ldb_dn_canonical_ex_string(TALLOC_CTX*mem_ctx, struct ldb_dn*dn){return ldb_dn_canonical(mem_ctx, dn, 1);}","idx":"0454b95657846fcecf0f51b6f1194faac02518bd","target":0}
{"code":"char*ldb_dn_canonical_string(TALLOC_CTX*mem_ctx, struct ldb_dn*dn){return ldb_dn_canonical(mem_ctx, dn, 0);}","idx":"0454b95657846fcecf0f51b6f1194faac02518bd","target":0}
{"code":"char*ldb_dn_get_extended_linearized(TALLOC_CTX*mem_ctx, struct ldb_dn*dn, int mode){const char*linearized=ldb_dn_get_linearized(dn);char*p=NULL;unsigned int i;if(!linearized){return NULL;}if(!ldb_dn_has_extended(dn)){return talloc_strdup(mem_ctx, linearized);}if(!ldb_dn_validate(dn)){return NULL;}TYPESAFE_QSORT(dn->ext_components, dn->ext_comp_num, ldb_dn_extended_component_compare);for(i=0;i<dn->ext_comp_num;i++){const struct ldb_dn_extended_syntax*ext_syntax;const char*name=dn->ext_components[i].name;struct ldb_val ec_val=dn->ext_components[i].value;struct ldb_val val;int ret;ext_syntax=ldb_dn_extended_syntax_by_name(dn->ldb, name);if(!ext_syntax){return NULL;}if(mode == 1){ret=ext_syntax->write_clear_fn(dn->ldb, mem_ctx, &ec_val, &val);}else if(mode == 0){ret=ext_syntax->write_hex_fn(dn->ldb, mem_ctx, &ec_val, &val);}else{ret=-1;}if(ret != LDB_SUCCESS){return NULL;}if(i == 0){p=talloc_asprintf(mem_ctx, \"<%s=%s>\", name, val.data);}else{p=talloc_asprintf_append_buffer(p, \";<%s=%s>\", name, val.data);}talloc_free(val.data);if(!p){return NULL;}}if(dn->ext_comp_num && *linearized){p=talloc_asprintf_append_buffer(p, \";%s\", linearized);}if(!p){return NULL;}return p;}","idx":"0454b95657846fcecf0f51b6f1194faac02518bd","target":0}
{"code":"const char*ldb_dn_get_casefold(struct ldb_dn*dn){unsigned int i;size_t len;char*d, *n;if(dn->casefold)return dn->casefold;if(dn->special){dn->casefold=talloc_strdup(dn, dn->linearized);if(!dn->casefold)return NULL;dn->valid_case=true;return dn->casefold;}if(!ldb_dn_casefold_internal(dn)){return NULL;}if(dn->comp_num == 0){dn->casefold=talloc_strdup(dn, \"\");return dn->casefold;}for(len=0, i=0;i<dn->comp_num;i++){len+=strlen(dn->components[i].cf_name);len+=(dn->components[i].cf_value.length*3);len+=2;}dn->casefold=talloc_array(dn, char, len);if(!dn->casefold)return NULL;d=dn->casefold;for(i=0;i<dn->comp_num;i++){n=dn->components[i].cf_name;while(*n)*d++=*n++;*d++='=';\n\t\td+=ldb_dn_escape_internal(d, (char*)dn->components[i].cf_value.data, dn->components[i].cf_value.length);*d++=', ';}*(--d)='\\0';\n\tdn->casefold=talloc_realloc(dn, dn->casefold, char, strlen(dn->casefold)+1);return dn->casefold;}","idx":"0454b95657846fcecf0f51b6f1194faac02518bd","target":0}
{"code":"const char*ldb_dn_get_linearized(struct ldb_dn*dn){unsigned int i;size_t len;char*d, *n;if(!dn || (dn->invalid))return NULL;if(dn->linearized)return dn->linearized;if(!dn->components){ldb_dn_mark_invalid(dn);return NULL;}if(dn->comp_num == 0){dn->linearized=talloc_strdup(dn, \"\");if(!dn->linearized)return NULL;return dn->linearized;}for(len=0, i=0;i<dn->comp_num;i++){len+=strlen(dn->components[i].name);len+=(dn->components[i].value.length*3);len+=2;}dn->linearized=talloc_array(dn, char, len);if(!dn->linearized)return NULL;d=dn->linearized;for(i=0;i<dn->comp_num;i++){n=dn->components[i].name;while(*n)*d++=*n++;*d++='=';\n\t\td+=ldb_dn_escape_internal(d, (char*)dn->components[i].value.data, dn->components[i].value.length);*d++=', ';}*(--d)='\\0';\n\tdn->linearized=talloc_realloc(dn, dn->linearized, char, (d-dn->linearized+1));return dn->linearized;}","idx":"0454b95657846fcecf0f51b6f1194faac02518bd","target":0}
{"code":"const char*ldb_dn_get_rdn_name(struct ldb_dn*dn){if(!ldb_dn_validate(dn)){return NULL;}if(dn->comp_num == 0)return NULL;return dn->components[0].name;}","idx":"0454b95657846fcecf0f51b6f1194faac02518bd","target":0}
{"code":"const struct ldb_val*ldb_dn_get_component_val(struct ldb_dn*dn, unsigned int num){if(!ldb_dn_validate(dn)){return NULL;}if(num >= dn->comp_num)return NULL;return&dn->components[num].value;}","idx":"0454b95657846fcecf0f51b6f1194faac02518bd","target":0}
{"code":"const struct ldb_val*ldb_dn_get_extended_component(struct ldb_dn*dn, const char*name){unsigned int i;if(!ldb_dn_validate(dn)){return NULL;}for(i=0;i<dn->ext_comp_num;i++){if(ldb_attr_cmp(dn->ext_components[i].name, name) == 0){return&dn->ext_components[i].value;}}return NULL;}","idx":"0454b95657846fcecf0f51b6f1194faac02518bd","target":0}
{"code":"const struct ldb_val*ldb_dn_get_rdn_val(struct ldb_dn*dn){if(!ldb_dn_validate(dn)){return NULL;}if(dn->comp_num == 0)return NULL;return&dn->components[0].value;}","idx":"0454b95657846fcecf0f51b6f1194faac02518bd","target":0}
{"code":"int ldb_dn_compare(struct ldb_dn*dn0, struct ldb_dn*dn1){unsigned int i;int ret;if((!dn0) || dn0->invalid || !dn1 || dn1->invalid){return-1;}if((!dn0->valid_case) || (!dn1->valid_case)){if(dn0->linearized && dn1->linearized){if(strcmp(dn0->linearized, dn1->linearized) == 0){return 0;}}if(!ldb_dn_casefold_internal(dn0)){return 1;}if(!ldb_dn_casefold_internal(dn1)){return-1;}}if(dn0->comp_num != dn1->comp_num){return(dn1->comp_num-dn0->comp_num);}if(dn0->comp_num == 0){if(dn0->special && dn1->special){return strcmp(dn0->linearized, dn1->linearized);}else if(dn0->special){return 1;}else if(dn1->special){return-1;}else{return 0;}}for(i=0;i<dn0->comp_num;i++){char*dn0_name=dn0->components[i].cf_name;char*dn1_name=dn1->components[i].cf_name;char*dn0_vdata=(char*)dn0->components[i].cf_value.data;char*dn1_vdata=(char*)dn1->components[i].cf_value.data;size_t dn0_vlen=dn0->components[i].cf_value.length;size_t dn1_vlen=dn1->components[i].cf_value.length;ret=strcmp(dn0_name, dn1_name);if(ret != 0){return ret;}if(dn0_vlen != dn1_vlen){return dn0_vlen-dn1_vlen;}ret=strncmp(dn0_vdata, dn1_vdata, dn0_vlen);if(ret != 0){return ret;}}return 0;}","idx":"0454b95657846fcecf0f51b6f1194faac02518bd","target":0}
{"code":"int ldb_dn_compare_base(struct ldb_dn*base, struct ldb_dn*dn){int ret;unsigned int n_base, n_dn;if(!base || base->invalid)return 1;if(!dn || dn->invalid)return-1;if((!base->valid_case) || (!dn->valid_case)){if(base->linearized && dn->linearized && dn->special == base->special){int dif;dif=strlen(dn->linearized)-strlen(base->linearized);if(dif<0){return dif;}if(strcmp(base->linearized, &dn->linearized[dif]) == 0){return 0;}}if(!ldb_dn_casefold_internal(base)){return 1;}if(!ldb_dn_casefold_internal(dn)){return-1;}}if(base->comp_num>dn->comp_num){return(dn->comp_num-base->comp_num);}if((dn->comp_num == 0) || (base->comp_num == 0)){if(dn->special && base->special){return strcmp(base->linearized, dn->linearized);}else if(dn->special){return-1;}else if(base->special){return 1;}else{return 0;}}n_base=base->comp_num-1;n_dn=dn->comp_num-1;while(n_base != (unsigned int)-1){char*b_name=base->components[n_base].cf_name;char*dn_name=dn->components[n_dn].cf_name;char*b_vdata=(char*)base->components[n_base].cf_value.data;char*dn_vdata=(char*)dn->components[n_dn].cf_value.data;size_t b_vlen=base->components[n_base].cf_value.length;size_t dn_vlen=dn->components[n_dn].cf_value.length;ret=strcmp(b_name, dn_name);if(ret != 0)return ret;if(b_vlen != dn_vlen){return b_vlen-dn_vlen;}ret=strncmp(b_vdata, dn_vdata, b_vlen);if(ret != 0)return ret;n_base--;n_dn--;}return 0;}","idx":"0454b95657846fcecf0f51b6f1194faac02518bd","target":0}
{"code":"int ldb_dn_get_comp_num(struct ldb_dn*dn){if(!ldb_dn_validate(dn)){return-1;}return dn->comp_num;}","idx":"0454b95657846fcecf0f51b6f1194faac02518bd","target":0}
{"code":"int ldb_dn_set_component(struct ldb_dn*dn, int num, const char*name, const struct ldb_val val){char*n;struct ldb_val v;if(!ldb_dn_validate(dn)){return LDB_ERR_OTHER;}if(num >= dn->comp_num){return LDB_ERR_OTHER;}n=talloc_strdup(dn, name);if(!n){return LDB_ERR_OTHER;}v.length=val.length;v.data=(uint8_t*)talloc_memdup(dn, val.data, v.length+1);if(!v.data){talloc_free(n);return LDB_ERR_OTHER;}talloc_free(dn->components[num].name);talloc_free(dn->components[num].value.data);dn->components[num].name=n;dn->components[num].value=v;if(dn->valid_case){unsigned int i;for(i=0;i<dn->comp_num;i++){LDB_FREE(dn->components[i].cf_name);LDB_FREE(dn->components[i].cf_value.data);}dn->valid_case=false;}LDB_FREE(dn->casefold);LDB_FREE(dn->linearized);LDB_FREE(dn->ext_linearized);LDB_FREE(dn->ext_components);dn->ext_comp_num=0;return LDB_SUCCESS;}","idx":"0454b95657846fcecf0f51b6f1194faac02518bd","target":0}
{"code":"static bool ldb_dn_casefold_internal(struct ldb_dn*dn){unsigned int i;int ret;if(!dn || dn->invalid)return false;if(dn->valid_case)return true;if((!dn->components) && (!ldb_dn_explode(dn))){return false;}for(i=0;i<dn->comp_num;i++){const struct ldb_schema_attribute*a;dn->components[i].cf_name=ldb_attr_casefold(dn->components, dn->components[i].name);if(!dn->components[i].cf_name){goto failed;}a=ldb_schema_attribute_by_name(dn->ldb, dn->components[i].cf_name);ret=a->syntax->canonicalise_fn(dn->ldb, dn->components, &(dn->components[i].value), &(dn->components[i].cf_value));if(ret != 0){goto failed;}}dn->valid_case=true;return true;failed:\n\tfor(i=0;i<dn->comp_num;i++){LDB_FREE(dn->components[i].cf_name);LDB_FREE(dn->components[i].cf_value.data);}return false;}","idx":"0454b95657846fcecf0f51b6f1194faac02518bd","target":0}
{"code":"static char*ldb_dn_canonical(TALLOC_CTX*mem_ctx, struct ldb_dn*dn, int ex_format){unsigned int i;TALLOC_CTX*tmpctx;char*cracked=NULL;const char*format=(ex_format ? \"\\n\" : \"\/\" );if(!ldb_dn_validate(dn)){return NULL;}tmpctx=talloc_new(mem_ctx);for(i=dn->comp_num-1;i != (unsigned int)-1;i--){if(ldb_attr_cmp(dn->components[i].name, \"dc\") != 0){break;}if(cracked){cracked=talloc_asprintf(tmpctx, \"%s.%s\", ldb_dn_escape_value(tmpctx, dn->components[i].value), cracked);}else{cracked=ldb_dn_escape_value(tmpctx, dn->components[i].value);}if(!cracked){goto done;}}if(i == (unsigned int)-1){cracked=talloc_strdup_append_buffer(cracked, format);talloc_steal(mem_ctx, cracked);goto done;}for(;i>0;i--){cracked=talloc_asprintf_append_buffer(cracked, \"\/%s\", ldb_dn_escape_value(tmpctx, dn->components[i].value));if(!cracked){goto done;}}cracked=talloc_asprintf_append_buffer(cracked, \"%s%s\", format, ldb_dn_escape_value(tmpctx, dn->components[i].value));talloc_steal(mem_ctx, cracked);done:\n\ttalloc_free(tmpctx);return cracked;}","idx":"0454b95657846fcecf0f51b6f1194faac02518bd","target":0}
{"code":"static int ldb_dn_extended_component_compare(const void*p1, const void*p2){const struct ldb_dn_ext_component*ec1=(const struct ldb_dn_ext_component*)p1;const struct ldb_dn_ext_component*ec2=(const struct ldb_dn_ext_component*)p2;return strcmp(ec1->name, ec2->name);}","idx":"0454b95657846fcecf0f51b6f1194faac02518bd","target":0}
{"code":"static struct ldb_dn_component ldb_dn_copy_component(TALLOC_CTX*mem_ctx, struct ldb_dn_component*src){struct ldb_dn_component dst;memset(&dst, 0, sizeof(dst));if(src == NULL){return dst;}dst.value=ldb_val_dup(mem_ctx, &(src->value));if(dst.value.data == NULL){return dst;}dst.name=talloc_strdup(mem_ctx, src->name);if(dst.name == NULL){LDB_FREE(dst.value.data);return dst;}if(src->cf_value.data){dst.cf_value=ldb_val_dup(mem_ctx, &(src->cf_value));if(dst.cf_value.data == NULL){LDB_FREE(dst.value.data);LDB_FREE(dst.name);return dst;}dst.cf_name=talloc_strdup(mem_ctx, src->cf_name);if(dst.cf_name == NULL){LDB_FREE(dst.cf_name);LDB_FREE(dst.value.data);LDB_FREE(dst.name);return dst;}}else{dst.cf_value.data=NULL;dst.cf_name=NULL;}return dst;}","idx":"0454b95657846fcecf0f51b6f1194faac02518bd","target":0}
{"code":"static struct ldb_dn_ext_component ldb_dn_ext_copy_component(TALLOC_CTX*mem_ctx, struct ldb_dn_ext_component*src){struct ldb_dn_ext_component dst;memset(&dst, 0, sizeof(dst));if(src == NULL){return dst;}dst.value=ldb_val_dup(mem_ctx, &(src->value));if(dst.value.data == NULL){return dst;}dst.name=talloc_strdup(mem_ctx, src->name);if(dst.name == NULL){LDB_FREE(dst.value.data);return dst;}return dst;}","idx":"0454b95657846fcecf0f51b6f1194faac02518bd","target":0}
{"code":"struct ldb_context*ldb_dn_get_ldb_context(struct ldb_dn*dn){return dn->ldb;}","idx":"0454b95657846fcecf0f51b6f1194faac02518bd","target":0}
{"code":"struct ldb_dn*ldb_dn_copy(TALLOC_CTX*mem_ctx, struct ldb_dn*dn){struct ldb_dn*new_dn;if(!dn || dn->invalid){return NULL;}new_dn=talloc_zero(mem_ctx, struct ldb_dn);if(!new_dn){return NULL;}*new_dn=*dn;if(dn->components){unsigned int i;new_dn->components=talloc_zero_array(new_dn, struct ldb_dn_component, dn->comp_num);if(!new_dn->components){talloc_free(new_dn);return NULL;}for(i=0;i<dn->comp_num;i++){new_dn->components[i]=ldb_dn_copy_component(new_dn->components, &dn->components[i]);if(!new_dn->components[i].value.data){talloc_free(new_dn);return NULL;}}}if(dn->ext_components){unsigned int i;new_dn->ext_components=talloc_zero_array(new_dn, struct ldb_dn_ext_component, dn->ext_comp_num);if(!new_dn->ext_components){talloc_free(new_dn);return NULL;}for(i=0;i<dn->ext_comp_num;i++){new_dn->ext_components[i]=ldb_dn_ext_copy_component(new_dn->ext_components, &dn->ext_components[i]);if(!new_dn->ext_components[i].value.data){talloc_free(new_dn);return NULL;}}}if(dn->casefold){new_dn->casefold=talloc_strdup(new_dn, dn->casefold);if(!new_dn->casefold){talloc_free(new_dn);return NULL;}}if(dn->linearized){new_dn->linearized=talloc_strdup(new_dn, dn->linearized);if(!new_dn->linearized){talloc_free(new_dn);return NULL;}}if(dn->ext_linearized){new_dn->ext_linearized=talloc_strdup(new_dn, dn->ext_linearized);if(!new_dn->ext_linearized){talloc_free(new_dn);return NULL;}}return new_dn;}","idx":"0454b95657846fcecf0f51b6f1194faac02518bd","target":0}
{"code":"struct ldb_dn*ldb_dn_get_parent(TALLOC_CTX*mem_ctx, struct ldb_dn*dn){struct ldb_dn*new_dn;new_dn=ldb_dn_copy(mem_ctx, dn);if(!new_dn){return NULL;}if(!ldb_dn_remove_child_components(new_dn, 1)){talloc_free(new_dn);return NULL;}return new_dn;}","idx":"0454b95657846fcecf0f51b6f1194faac02518bd","target":0}
{"code":"void ldb_dn_extended_filter(struct ldb_dn*dn, const char*const*accept_list){unsigned int i;for(i=0;i<dn->ext_comp_num;i++){if(!ldb_attr_in_list(accept_list, dn->ext_components[i].name)){memmove(&dn->ext_components[i], &dn->ext_components[i+1], (dn->ext_comp_num-(i+1))*sizeof(dn->ext_components[0]));dn->ext_comp_num--;i--;}}LDB_FREE(dn->ext_linearized);}","idx":"0454b95657846fcecf0f51b6f1194faac02518bd","target":0}
{"code":"void ldb_dn_remove_extended_components(struct ldb_dn*dn){LDB_FREE(dn->ext_linearized);LDB_FREE(dn->ext_components);dn->ext_comp_num=0;}","idx":"0454b95657846fcecf0f51b6f1194faac02518bd","target":0}
{"code":" char*ldb_dn_escape_value(TALLOC_CTX*mem_ctx, struct ldb_val value){char*dst;if(!value.length)return NULL;dst=talloc_array(mem_ctx, char, value.length*3+1);if(!dst){talloc_free(dst);return NULL;}ldb_dn_escape_internal(dst, (const char*)value.data, value.length);dst=talloc_realloc(mem_ctx, dst, char, strlen(dst)+1);return dst;}","idx":"0454b95657846fcecf0f51b6f1194faac02518bd","target":1}
{"code":" MagickExport void*AcquireAlignedMemory(const size_t count, const size_t quantum){#define AlignedExtent(size, alignment)\\(((size)+((alignment)-1))&~((alignment)-1))size_t\n    alignment, extent, size;void*memory;if(CheckMemoryOverflow(count, quantum) != MagickFalse)return((void*)NULL);memory=NULL;alignment=CACHE_LINE_SIZE;size=count*quantum;extent=AlignedExtent(size, alignment);if((size == 0) || (alignment<sizeof(void*)) || (extent<size))return((void*)NULL);#if defined(MAGICKCORE_HAVE_POSIX_MEMALIGN)if(posix_memalign(&memory, alignment, extent) != 0)memory=NULL;#elif defined(MAGICKCORE_HAVE__ALIGNED_MALLOC)memory=_aligned_malloc(extent, alignment);#else{void*p;extent=(size+alignment-1)+sizeof(void*);if(extent>size){p=malloc(extent);if(p != NULL){memory=(void*)AlignedExtent((size_t)p+sizeof(void*), alignment);*((void**)memory-1)=p;}}}#endif\n  return(memory);}","idx":"0474237508f39c4f783208123431815f1ededb76","target":1}
{"code":"MagickExport void CatchException(ExceptionInfo*exception){register const ExceptionInfo*p;assert(exception != (ExceptionInfo*)NULL);assert(exception->signature == MagickSignature);if(exception->exceptions == (void*)NULL)return;LockSemaphoreInfo(exception->semaphore);ResetLinkedListIterator((LinkedListInfo*)exception->exceptions);p=(const ExceptionInfo*)GetNextValueInLinkedList((LinkedListInfo*)exception->exceptions);while(p != (const ExceptionInfo*)NULL){if((p->severity >= WarningException) && (p->severity<ErrorException))MagickWarning(p->severity, p->reason, p->description);if((p->severity >= ErrorException) && (p->severity<FatalErrorException))MagickError(p->severity, p->reason, p->description);if(p->severity >= FatalErrorException)MagickFatalError(p->severity, p->reason, p->description);p=(const ExceptionInfo*)GetNextValueInLinkedList((LinkedListInfo*)exception->exceptions);}UnlockSemaphoreInfo(exception->semaphore);ClearMagickException(exception);}","idx":"0474237508f39c4f783208123431815f1ededb76","target":1}
{"code":"MagickExport void*AcquireQuantumMemory(const size_t count, const size_t quantum){size_t\n     extent;if(CheckMemoryOverflow(count, quantum) != MagickFalse)return((void*)NULL);extent=count*quantum;return(AcquireMagickMemory(extent));}","idx":"0474237508f39c4f783208123431815f1ededb76","target":1}
{"code":"MagickExport void*ResizeQuantumMemory(void*memory, const size_t count, const size_t quantum){size_t\n     extent;if(CheckMemoryOverflow(count, quantum) != MagickFalse){memory=RelinquishMagickMemory(memory);return((void*)NULL);}extent=count*quantum;return(ResizeMagickMemory(memory, extent));}","idx":"0474237508f39c4f783208123431815f1ededb76","target":1}
{"code":"static MagickBooleanType CheckMemoryOverflow(const size_t count, const size_t quantum){size_t\n    size;size=count*quantum;if((count == 0) || (quantum != (size\/count))){errno=ENOMEM;return(MagickTrue);}return(MagickFalse);}","idx":"0474237508f39c4f783208123431815f1ededb76","target":1}
{"code":"static int svc_can_register(const uint16_t*name, size_t name_len, pid_t spid, uid_t uid){const char*perm=\"add\";\n    if(uid >= AID_APP){return 0;}return check_mac_perms_from_lookup(spid, uid, perm, str8(name, name_len))? 1 : 0;}","idx":"047eec456943dc082e33220d28abb7df4e089f69","target":1}
{"code":" ContentEncoding::ContentCompression::ContentCompression(): algo(0), settings(NULL), settings_len(0){}","idx":"04839626ed859623901ebd3a5fd483982186b59d","target":1}
{"code":" ContentEncoding::ContentCompression::~ContentCompression(){delete [] settings;}","idx":"04839626ed859623901ebd3a5fd483982186b59d","target":1}
{"code":" ContentEncoding::ContentEncoding(): compression_entries_(NULL), compression_entries_end_(NULL), encryption_entries_(NULL), encryption_entries_end_(NULL), encoding_order_(0), encoding_scope_(1), encoding_type_(0){}","idx":"04839626ed859623901ebd3a5fd483982186b59d","target":1}
{"code":" ContentEncoding::ContentEncryption::ContentEncryption(): algo(0), key_id(NULL), key_id_len(0), signature(NULL), signature_len(0), sig_key_id(NULL), sig_key_id_len(0), sig_algo(0), sig_hash_algo(0){}","idx":"04839626ed859623901ebd3a5fd483982186b59d","target":1}
{"code":" ContentEncoding::ContentEncryption::~ContentEncryption(){delete [] key_id;delete [] signature;delete [] sig_key_id;}","idx":"04839626ed859623901ebd3a5fd483982186b59d","target":1}
{"code":" ContentEncoding::~ContentEncoding(){ContentCompression**comp_i=compression_entries_;ContentCompression**const comp_j=compression_entries_end_;while(comp_i != comp_j){ContentCompression*const comp=*comp_i++;delete comp;}delete [] compression_entries_;ContentEncryption**enc_i=encryption_entries_;ContentEncryption**const enc_j=encryption_entries_end_;while(enc_i != enc_j){ContentEncryption*const enc=*enc_i++;delete enc;}delete [] encryption_entries_;}","idx":"04839626ed859623901ebd3a5fd483982186b59d","target":1}
{"code":"AudioTrack::AudioTrack(Segment*pSegment, long long element_start, long long element_size):\n    Track(pSegment, element_start, element_size){}","idx":"04839626ed859623901ebd3a5fd483982186b59d","target":1}
{"code":"Block::Block(long long start, long long size_, long long discard_padding):\n    m_start(start), m_size(size_), m_track(0), m_timecode(-1), m_flags(0), m_frames(NULL), m_frame_count(-1), m_discard_padding(discard_padding){}","idx":"04839626ed859623901ebd3a5fd483982186b59d","target":1}
{"code":"Block::Lacing Block::GetLacing()const{const int value=int(m_flags&0x06)>>1;return static_cast<Lacing>(value);}","idx":"04839626ed859623901ebd3a5fd483982186b59d","target":1}
{"code":"Block::~Block(){delete[] m_frames;}","idx":"04839626ed859623901ebd3a5fd483982186b59d","target":1}
{"code":"BlockEntry::BlockEntry(Cluster*p, long idx):\n    m_pCluster(p), m_index(idx){}","idx":"04839626ed859623901ebd3a5fd483982186b59d","target":1}
{"code":"BlockEntry::Kind BlockGroup::GetKind()const{return kBlockGroup;}","idx":"04839626ed859623901ebd3a5fd483982186b59d","target":1}
{"code":"BlockEntry::Kind SimpleBlock::GetKind()const{return kBlockSimple;}","idx":"04839626ed859623901ebd3a5fd483982186b59d","target":1}
{"code":"BlockEntry::Kind Track::EOSBlock::GetKind()const{return kBlockEOS;}","idx":"04839626ed859623901ebd3a5fd483982186b59d","target":1}
{"code":"BlockEntry::~BlockEntry(){}","idx":"04839626ed859623901ebd3a5fd483982186b59d","target":1}
{"code":"BlockGroup::BlockGroup(Cluster*pCluster, long idx, long long block_start, long long block_size, long long prev, long long next, long long duration, long long discard_padding):\n    BlockEntry(pCluster, idx), m_block(block_start, block_size, discard_padding), m_prev(prev), m_next(next), m_duration(duration){}","idx":"04839626ed859623901ebd3a5fd483982186b59d","target":1}
{"code":"Chapters::Atom::Atom(){}","idx":"04839626ed859623901ebd3a5fd483982186b59d","target":1}
{"code":"Chapters::Chapters(Segment*pSegment, long long payload_start, long long payload_size, long long element_start, long long element_size):\n    m_pSegment(pSegment), m_start(payload_start), m_size(payload_size), m_element_start(element_start), m_element_size(element_size), m_editions(NULL), m_editions_size(0), m_editions_count(0){}","idx":"04839626ed859623901ebd3a5fd483982186b59d","target":1}
{"code":"Chapters::Display::Display(){}","idx":"04839626ed859623901ebd3a5fd483982186b59d","target":1}
{"code":"Chapters::Edition::Edition(){}","idx":"04839626ed859623901ebd3a5fd483982186b59d","target":1}
{"code":"Cluster::Cluster():\n    m_pSegment(NULL), m_element_start(0), m_index(0), m_pos(0), m_element_size(0), m_timecode(0), m_entries(NULL), m_entries_size(0), m_entries_count(0){}","idx":"04839626ed859623901ebd3a5fd483982186b59d","target":1}
{"code":"Cluster::Cluster(Segment*pSegment, long idx, long long element_start):\n    m_pSegment(pSegment), m_element_start(element_start), m_index(idx), m_pos(element_start), m_element_size(-1), m_timecode(-1), m_entries(NULL), m_entries_size(0), m_entries_count(-1){}","idx":"04839626ed859623901ebd3a5fd483982186b59d","target":1}
{"code":"Cluster::~Cluster(){if(m_entries_count <= 0)return;BlockEntry**i=m_entries;BlockEntry**const j=m_entries+m_entries_count;while(i != j){BlockEntry*p=*i++;assert(p);delete p;}delete[] m_entries;}","idx":"04839626ed859623901ebd3a5fd483982186b59d","target":1}
{"code":"ContentEncoding::GetEncryptionByIndex(unsigned long idx)const{const ptrdiff_t count=encryption_entries_end_-encryption_entries_;assert(count >= 0);if(idx >= static_cast<unsigned long>(count))return NULL;return encryption_entries_[idx];}","idx":"04839626ed859623901ebd3a5fd483982186b59d","target":1}
{"code":"CuePoint::CuePoint(long idx, long long pos):\n    m_element_start(0), m_element_size(0), m_index(idx), m_timecode(-1*pos), m_track_positions(NULL), m_track_positions_count(0){assert(pos>0);}","idx":"04839626ed859623901ebd3a5fd483982186b59d","target":1}
{"code":"CuePoint::~CuePoint(){delete[] m_track_positions;}","idx":"04839626ed859623901ebd3a5fd483982186b59d","target":1}
{"code":"Cues::Cues(Segment*pSegment, long long start_, long long size_, long long element_start, long long element_size):\n    m_pSegment(pSegment), m_start(start_), m_size(size_), m_element_start(element_start), m_element_size(element_size), m_cue_points(NULL), m_count(0), m_preload_count(0), m_pos(start_){}","idx":"04839626ed859623901ebd3a5fd483982186b59d","target":1}
{"code":"Cues::~Cues(){const long n=m_count+m_preload_count;CuePoint**p=m_cue_points;CuePoint**const q=p+n;while(p != q){CuePoint*const pCP=*p++;assert(pCP);delete pCP;}delete[] m_cue_points;}","idx":"04839626ed859623901ebd3a5fd483982186b59d","target":1}
{"code":"EBMLHeader::EBMLHeader():\n    m_docType(NULL){Init();}","idx":"04839626ed859623901ebd3a5fd483982186b59d","target":1}
{"code":"EBMLHeader::~EBMLHeader(){delete[] m_docType;}","idx":"04839626ed859623901ebd3a5fd483982186b59d","target":1}
{"code":"SeekHead::SeekHead(Segment*pSegment, long long start, long long size_, long long element_start, long long element_size):\n    m_pSegment(pSegment), m_start(start), m_size(size_), m_element_start(element_start), m_element_size(element_size), m_entries(0), m_entry_count(0), m_void_elements(0), m_void_element_count(0){}","idx":"04839626ed859623901ebd3a5fd483982186b59d","target":1}
{"code":"SeekHead::~SeekHead(){delete[] m_entries;delete[] m_void_elements;}","idx":"04839626ed859623901ebd3a5fd483982186b59d","target":1}
{"code":"SegmentInfo::SegmentInfo(Segment*pSegment, long long start, long long size_, long long element_start, long long element_size):\n    m_pSegment(pSegment), m_start(start), m_size(size_), m_element_start(element_start), m_element_size(element_size), m_pMuxingAppAsUTF8(NULL), m_pWritingAppAsUTF8(NULL), m_pTitleAsUTF8(NULL){}","idx":"04839626ed859623901ebd3a5fd483982186b59d","target":1}
{"code":"SegmentInfo::~SegmentInfo(){delete[] m_pMuxingAppAsUTF8;m_pMuxingAppAsUTF8=NULL;delete[] m_pWritingAppAsUTF8;m_pWritingAppAsUTF8=NULL;delete[] m_pTitleAsUTF8;m_pTitleAsUTF8=NULL;}","idx":"04839626ed859623901ebd3a5fd483982186b59d","target":1}
{"code":"SimpleBlock::SimpleBlock(Cluster*pCluster, long idx, long long start, long long size):\n    BlockEntry(pCluster, idx), m_block(start, size, 0){}","idx":"04839626ed859623901ebd3a5fd483982186b59d","target":1}
{"code":"Track::EOSBlock::EOSBlock():\n    BlockEntry(NULL, LONG_MIN){}","idx":"04839626ed859623901ebd3a5fd483982186b59d","target":1}
{"code":"Track::GetContentEncodingByIndex(unsigned long idx)const{const ptrdiff_t count=content_encoding_entries_end_-content_encoding_entries_;assert(count >= 0);if(idx >= static_cast<unsigned long>(count))return NULL;return content_encoding_entries_[idx];}","idx":"04839626ed859623901ebd3a5fd483982186b59d","target":1}
{"code":"Track::Info::Info():\n    uid(0), defaultDuration(0), codecDelay(0), seekPreRoll(0), nameAsUTF8(NULL), language(NULL), codecId(NULL), codecNameAsUTF8(NULL), codecPrivate(NULL), codecPrivateSize(0), lacing(false){}","idx":"04839626ed859623901ebd3a5fd483982186b59d","target":1}
{"code":"Track::Info::~Info(){Clear();}","idx":"04839626ed859623901ebd3a5fd483982186b59d","target":1}
{"code":"Track::Track(Segment*pSegment, long long element_start, long long element_size):\n    m_pSegment(pSegment), m_element_start(element_start), m_element_size(element_size), content_encoding_entries_(NULL), content_encoding_entries_end_(NULL){}","idx":"04839626ed859623901ebd3a5fd483982186b59d","target":1}
{"code":"Track::~Track(){Info&info=const_cast<Info&>(m_info);info.Clear();ContentEncoding**i=content_encoding_entries_;ContentEncoding**const j=content_encoding_entries_end_;while(i != j){ContentEncoding*const encoding=*i++;delete encoding;}delete [] content_encoding_entries_;}","idx":"04839626ed859623901ebd3a5fd483982186b59d","target":1}
{"code":"Tracks::Tracks(Segment*pSegment, long long start, long long size_, long long element_start, long long element_size):\n    m_pSegment(pSegment), m_start(start), m_size(size_), m_element_start(element_start), m_element_size(element_size), m_trackEntries(NULL), m_trackEntriesEnd(NULL){}","idx":"04839626ed859623901ebd3a5fd483982186b59d","target":1}
{"code":"Tracks::~Tracks(){Track**i=m_trackEntries;Track**const j=m_trackEntriesEnd;while(i != j){Track*const pTrack=*i++;delete pTrack;}delete[] m_trackEntries;}","idx":"04839626ed859623901ebd3a5fd483982186b59d","target":1}
{"code":"bool Block::IsInvisible()const{return bool(int(m_flags&0x08) != 0);}","idx":"04839626ed859623901ebd3a5fd483982186b59d","target":1}
{"code":"bool Block::IsKey()const{return((m_flags&static_cast<unsigned char>(1<<7)) != 0);}","idx":"04839626ed859623901ebd3a5fd483982186b59d","target":1}
{"code":"bool BlockEntry::EOS()const{return(GetKind() == kBlockEOS);}","idx":"04839626ed859623901ebd3a5fd483982186b59d","target":1}
{"code":"bool Chapters::Atom::ExpandDisplaysArray(){if(m_displays_size>m_displays_count)return true;const int size=(m_displays_size == 0)? 1 : 2*m_displays_size;Display*const displays=new(std::nothrow)Display[size];if(displays == NULL)return false;for(int idx=0;idx<m_displays_count;++idx){m_displays[idx].ShallowCopy(displays[idx]);}delete[] m_displays;m_displays=displays;m_displays_size=size;return true;}","idx":"04839626ed859623901ebd3a5fd483982186b59d","target":1}
{"code":"bool Chapters::Edition::ExpandAtomsArray(){if(m_atoms_size>m_atoms_count)return true;const int size=(m_atoms_size == 0)? 1 : 2*m_atoms_size;Atom*const atoms=new(std::nothrow)Atom[size];if(atoms == NULL)return false;for(int idx=0;idx<m_atoms_count;++idx){m_atoms[idx].ShallowCopy(atoms[idx]);}delete[] m_atoms;m_atoms=atoms;m_atoms_size=size;return true;}","idx":"04839626ed859623901ebd3a5fd483982186b59d","target":1}
{"code":"bool Chapters::ExpandEditionsArray(){if(m_editions_size>m_editions_count)return true;const int size=(m_editions_size == 0)? 1 : 2*m_editions_size;Edition*const editions=new(std::nothrow)Edition[size];if(editions == NULL)return false;for(int idx=0;idx<m_editions_count;++idx){m_editions[idx].ShallowCopy(editions[idx]);}delete[] m_editions;m_editions=editions;m_editions_size=size;return true;}","idx":"04839626ed859623901ebd3a5fd483982186b59d","target":1}
{"code":"bool Cluster::EOS()const{return(m_pSegment == NULL);}","idx":"04839626ed859623901ebd3a5fd483982186b59d","target":1}
{"code":"bool Cues::DoneParsing()const{const long long stop=m_start+m_size;return(m_pos >= stop);}","idx":"04839626ed859623901ebd3a5fd483982186b59d","target":1}
{"code":"bool Cues::Find(long long time_ns, const Track*pTrack, const CuePoint*&pCP, const CuePoint::TrackPosition*&pTP)const{assert(time_ns >= 0);assert(pTrack);#if 0\n     LoadCuePoint();assert(m_cue_points);assert(m_count>0);CuePoint**const ii=m_cue_points;CuePoint**i=ii;CuePoint**const jj=ii+m_count+m_preload_count;CuePoint**j=jj;pCP=*i;assert(pCP);if(time_ns <= pCP->GetTime(m_pSegment)){pTP=pCP->Find(pTrack);return(pTP != NULL);}IMkvReader*const pReader=m_pSegment->m_pReader;while(i<j){CuePoint**const k=i+(j-i)\/2;assert(k<jj);CuePoint*const pCP=*k;assert(pCP);pCP->Load(pReader);const long long t=pCP->GetTime(m_pSegment);if(t <= time_ns)i=k+1;else\n            j=k;assert(i <= j);}assert(i == j);assert(i <= jj);assert(i>ii);pCP=*--i;assert(pCP);assert(pCP->GetTime(m_pSegment) <= time_ns);#else\n    if(m_cue_points == NULL)return false;if(m_count == 0)return false;CuePoint**const ii=m_cue_points;CuePoint**i=ii;CuePoint**const jj=ii+m_count;CuePoint**j=jj;pCP=*i;assert(pCP);if(time_ns <= pCP->GetTime(m_pSegment)){pTP=pCP->Find(pTrack);return(pTP != NULL);}while(i<j){CuePoint**const k=i+(j-i)\/2;assert(k<jj);CuePoint*const pCP=*k;assert(pCP);const long long t=pCP->GetTime(m_pSegment);if(t <= time_ns)i=k+1;else\n            j=k;assert(i <= j);}assert(i == j);assert(i <= jj);assert(i>ii);pCP=*--i;assert(pCP);assert(pCP->GetTime(m_pSegment) <= time_ns);#endif\n     pTP=pCP->Find(pTrack);return(pTP != NULL);}","idx":"04839626ed859623901ebd3a5fd483982186b59d","target":1}
{"code":"bool SeekHead::ParseEntry(IMkvReader*pReader, long long start, long long size_, Entry*pEntry){if(size_ <= 0)return false;long long pos=start;const long long stop=start+size_;long len;const long long seekIdId=ReadUInt(pReader, pos, len);if(seekIdId != 0x13AB)return false;if((pos+len)>stop)return false;pos+=len;const long long seekIdSize=ReadUInt(pReader, pos, len);if(seekIdSize <= 0)return false;if((pos+len)>stop)return false;pos+=len;if((pos+seekIdSize)>stop)return false;pEntry->id=ReadUInt(pReader, pos, len);if(pEntry->id <= 0)return false;if(len != seekIdSize)return false;pos+=seekIdSize;const long long seekPosId=ReadUInt(pReader, pos, len);if(seekPosId != 0x13AC)return false;if((pos+len)>stop)return false;pos+=len;const long long seekPosSize=ReadUInt(pReader, pos, len);if(seekPosSize <= 0)return false;if((pos+len)>stop)return false;pos+=len;if((pos+seekPosSize)>stop)return false;pEntry->pos=UnserializeUInt(pReader, pos, seekPosSize);if(pEntry->pos<0)return false;pos+=seekPosSize;if(pos != stop)return false;return true;}","idx":"04839626ed859623901ebd3a5fd483982186b59d","target":1}
{"code":"bool Segment::DoneParsing()const{if(m_size<0){long long total, avail;const int status=m_pReader->Length(&total, &avail);if(status<0)return true;if(total<0)return false;return(m_pos >= total);}const long long stop=m_start+m_size;return(m_pos >= stop);}","idx":"04839626ed859623901ebd3a5fd483982186b59d","target":1}
{"code":"bool Track::GetLacing()const{return m_info.lacing;}","idx":"04839626ed859623901ebd3a5fd483982186b59d","target":1}
{"code":"bool Track::VetEntry(const BlockEntry*pBlockEntry)const{assert(pBlockEntry);const Block*const pBlock=pBlockEntry->GetBlock();assert(pBlock);assert(pBlock->GetTrackNumber() == m_info.number);if(!pBlock || pBlock->GetTrackNumber() != m_info.number)return false;return true;}","idx":"04839626ed859623901ebd3a5fd483982186b59d","target":1}
{"code":"bool VideoTrack::VetEntry(const BlockEntry*pBlockEntry)const{return Track::VetEntry(pBlockEntry) && pBlockEntry->GetBlock()->IsKey();}","idx":"04839626ed859623901ebd3a5fd483982186b59d","target":1}
{"code":"bool mkvparser::Match(IMkvReader*pReader, long long&pos, unsigned long id_, long long&val){assert(pReader);assert(pos >= 0);long long total, available;const long status=pReader->Length(&total, &available);assert(status >= 0);assert((total<0) || (available <= total));if(status<0)return false;long len;const long long id=ReadUInt(pReader, pos, len);assert(id >= 0);assert(len>0);assert(len <= 8);assert((pos+len) <= available);if((unsigned long)id != id_)return false;pos+=len;const long long size=ReadUInt(pReader, pos, len);assert(size >= 0);assert(size <= 8);assert(len>0);assert(len <= 8);assert((pos+len) <= available);pos+=len;val=UnserializeUInt(pReader, pos, size);assert(val >= 0);pos+=size;return true;}","idx":"04839626ed859623901ebd3a5fd483982186b59d","target":1}
{"code":"bool mkvparser::Match(IMkvReader*pReader, long long&pos, unsigned long id_, unsigned char*&buf, size_t&buflen){assert(pReader);assert(pos >= 0);long long total, available;long status=pReader->Length(&total, &available);assert(status >= 0);assert((total<0) || (available <= total));if(status<0)return false;long len;const long long id=ReadUInt(pReader, pos, len);assert(id >= 0);assert(len>0);assert(len <= 8);assert((pos+len) <= available);if((unsigned long)id != id_)return false;pos+=len;const long long size_=ReadUInt(pReader, pos, len);assert(size_ >= 0);assert(len>0);assert(len <= 8);assert((pos+len) <= available);pos+=len;assert((pos+size_) <= available);const long buflen_=static_cast<long>(size_);buf=new(std::nothrow)unsigned char[buflen_];assert(buf);status=pReader->Read(pos, buflen_, buf);assert(status == 0);buflen=buflen_;pos+=size_;return true;}","idx":"04839626ed859623901ebd3a5fd483982186b59d","target":1}
{"code":"const Block*SimpleBlock::GetBlock()const{return&m_block;}","idx":"04839626ed859623901ebd3a5fd483982186b59d","target":1}
{"code":"ProcXSendExtensionEvent(ClientPtr client){int ret;DeviceIntPtr dev;xEvent*first;XEventClass*list;struct tmask tmp[EMASKSIZE];REQUEST(xSendExtensionEventReq);REQUEST_AT_LEAST_SIZE(xSendExtensionEventReq);if(stuff->length != bytes_to_int32(sizeof(xSendExtensionEventReq))+stuff->count+(stuff->num_events*bytes_to_int32(sizeof(xEvent))))return BadLength;ret=dixLookupDevice(&dev, stuff->deviceid, client, DixWriteAccess);if(ret != Success)return ret;if(stuff->num_events == 0)return ret;first=((xEvent*)&stuff[1]);if(!((EXTENSION_EVENT_BASE <= first->u.u.type) && (first->u.u.type<lastEvent))){client->errorValue=first->u.u.type;return BadValue;}list=(XEventClass*)(first+stuff->num_events);if((ret=CreateMaskFromList(client, list, stuff->count, tmp, dev, X_SendExtensionEvent)) != Success)return ret;ret=(SendEvent(client, dev, stuff->destination, stuff->propagate, (xEvent*)&stuff[1], tmp[stuff->deviceid].mask, stuff->num_events));return ret;}","idx":"05442de962d3dc624f79fc1a00eca3ffc5489ced","target":0}
{"code":"  CFF_Done_FD_Select(CFF_FDSelect  fdselect, FT_Stream     stream){if(fdselect->data)FT_FRAME_RELEASE(fdselect->data);fdselect->data_size=0;fdselect->format=0;fdselect->range_count=0;}","idx":"0545ec1ca36b27cb928128870a83e5f668980bc5","target":0}
{"code":"  CFF_Load_FD_Select(CFF_FDSelect  fdselect, FT_UInt       num_glyphs, FT_Stream     stream, FT_ULong      offset){FT_Error  error;FT_Byte   format;FT_UInt   num_ranges;if(FT_STREAM_SEEK(offset) || FT_READ_BYTE(format))goto Exit;fdselect->format=format;fdselect->cache_count=0;switch(format){case 0:\n      fdselect->data_size=num_glyphs;goto Load_Data;case 3:\n      if(FT_READ_USHORT(num_ranges))goto Exit;fdselect->data_size=num_ranges*3+2;Load_Data:\n      if(FT_FRAME_EXTRACT(fdselect->data_size, fdselect->data))goto Exit;break;default:\n      error=CFF_Err_Invalid_File_Format;}Exit:\n    return error;}","idx":"0545ec1ca36b27cb928128870a83e5f668980bc5","target":0}
{"code":"  cff_charset_compute_cids(CFF_Charset  charset, FT_UInt      num_glyphs, FT_Memory    memory){FT_Error   error=FT_Err_Ok;FT_UInt    i;FT_UShort  max_cid=0;if(charset->max_cid>0)goto Exit;for(i=0;i<num_glyphs;i++)if(charset->sids[i]>max_cid)max_cid=charset->sids[i];max_cid++;if(FT_NEW_ARRAY(charset->cids, max_cid))goto Exit;for(i=0;i<num_glyphs;i++)charset->cids[charset->sids[i]]=(FT_UShort)i;charset->max_cid=max_cid;charset->num_glyphs=num_glyphs;Exit:\n    return error;}","idx":"0545ec1ca36b27cb928128870a83e5f668980bc5","target":0}
{"code":"  cff_charset_done(CFF_Charset  charset, FT_Stream    stream){FT_Memory  memory=stream->memory;cff_charset_free_cids(charset, memory);FT_FREE(charset->sids);charset->format=0;charset->offset=0;}","idx":"0545ec1ca36b27cb928128870a83e5f668980bc5","target":0}
{"code":"  cff_charset_free_cids(CFF_Charset  charset, FT_Memory    memory){FT_FREE(charset->cids);charset->max_cid=0;}","idx":"0545ec1ca36b27cb928128870a83e5f668980bc5","target":0}
{"code":"  cff_fd_select_get(CFF_FDSelect  fdselect, FT_UInt       glyph_index){FT_Byte  fd=0;switch(fdselect->format){case 0:\n      fd=fdselect->data[glyph_index];break;case 3:\n      if((FT_UInt)(glyph_index-fdselect->cache_first)<fdselect->cache_count){fd=fdselect->cache_fd;break;}{FT_Byte*p=fdselect->data;FT_Byte*p_limit=p+fdselect->data_size;FT_Byte   fd2;FT_UInt   first, limit;first=FT_NEXT_USHORT(p);do{if(glyph_index<first)break;fd2=*p++;limit=FT_NEXT_USHORT(p);if(glyph_index<limit){fd=fd2;fdselect->cache_first=first;fdselect->cache_count=limit-first;fdselect->cache_fd=fd2;break;}first=limit;}while(p<p_limit);}break;default:;}return fd;}","idx":"0545ec1ca36b27cb928128870a83e5f668980bc5","target":0}
{"code":"  cff_get_standard_encoding(FT_UInt  charcode){return(FT_UShort)(charcode<256 ? cff_standard_encoding[charcode]\n                                       : 0);}","idx":"0545ec1ca36b27cb928128870a83e5f668980bc5","target":0}
{"code":"  cff_index_access_element(CFF_Index  idx, FT_UInt    element, FT_Byte**pbytes, FT_ULong*pbyte_len){FT_Error  error=CFF_Err_Ok;if(idx && idx->count>element){FT_Stream  stream=idx->stream;FT_ULong   off1, off2=0;if(!idx->offsets){FT_ULong  pos=element*idx->off_size;if(FT_STREAM_SEEK(idx->start+3+pos))goto Exit;off1=cff_index_read_offset(idx, &error);if(error)goto Exit;if(off1 != 0){do{element++;off2=cff_index_read_offset(idx, &error);}while(off2 == 0 && element<idx->count);}}else{off1=idx->offsets[element];if(off1){do{element++;off2=idx->offsets[element];}while(off2 == 0 && element<idx->count);}}if(off1 && off2>off1){*pbyte_len=off2-off1;if(idx->bytes){*pbytes=idx->bytes+off1-1;}else{if(FT_STREAM_SEEK(idx->data_offset+off1-1) || FT_FRAME_EXTRACT(off2-off1, *pbytes))goto Exit;}}else{*pbytes=0;*pbyte_len=0;}}else\n      error=CFF_Err_Invalid_Argument;Exit:\n    return error;}","idx":"0545ec1ca36b27cb928128870a83e5f668980bc5","target":0}
{"code":"  cff_index_done(CFF_Index  idx){if(idx->stream){FT_Stream  stream=idx->stream;FT_Memory  memory=stream->memory;if(idx->bytes)FT_FRAME_RELEASE(idx->bytes);FT_FREE(idx->offsets);FT_MEM_ZERO(idx, sizeof(*idx));}}","idx":"0545ec1ca36b27cb928128870a83e5f668980bc5","target":0}
{"code":"  cff_index_forget_element(CFF_Index  idx, FT_Byte**pbytes){if(idx->bytes == 0){FT_Stream  stream=idx->stream;FT_FRAME_RELEASE(*pbytes);}}","idx":"0545ec1ca36b27cb928128870a83e5f668980bc5","target":0}
{"code":"  cff_index_get_name(CFF_Index  idx, FT_UInt    element){FT_Memory   memory=idx->stream->memory;FT_Byte*bytes;FT_ULong    byte_len;FT_Error    error;FT_String*name=0;error=cff_index_access_element(idx, element, &bytes, &byte_len);if(error)goto Exit;if(!FT_ALLOC(name, byte_len+1)){FT_MEM_COPY(name, bytes, byte_len);name[byte_len]=0;}cff_index_forget_element(idx, &bytes);Exit:\n    return name;}","idx":"0545ec1ca36b27cb928128870a83e5f668980bc5","target":0}
{"code":"  cff_index_get_pointers(CFF_Index   idx, FT_Byte***table){FT_Error   error=CFF_Err_Ok;FT_Memory  memory=idx->stream->memory;FT_ULong   n, offset, old_offset;FT_Byte**t;*table=0;if(idx->offsets == NULL){error=cff_index_load_offsets(idx);if(error)goto Exit;}if(idx->count>0 && !FT_NEW_ARRAY(t, idx->count+1)){old_offset=1;for(n=0;n <= idx->count;n++){offset=idx->offsets[n];if(!offset)offset=old_offset;else if(offset<old_offset)offset=old_offset;else if(offset-1 >= idx->data_size && n<idx->count)offset=old_offset;t[n]=idx->bytes+offset-1;old_offset=offset;}*table=t;}Exit:\n    return error;}","idx":"0545ec1ca36b27cb928128870a83e5f668980bc5","target":0}
{"code":"  cff_index_get_sid_string(CFF_Index           idx, FT_UInt             sid, FT_Service_PsCMaps  psnames){if(sid == 0xFFFFU)return 0;if(sid>390)return cff_index_get_name(idx, sid-391);if(!psnames)return 0;{FT_String*name=0;const char*adobe_name=psnames->adobe_std_strings(sid);if(adobe_name){FT_Memory  memory=idx->stream->memory;FT_Error   error;(void)FT_STRDUP(name, adobe_name);FT_UNUSED(error);}return name;}}","idx":"0545ec1ca36b27cb928128870a83e5f668980bc5","target":0}
{"code":"  cff_index_init(CFF_Index  idx, FT_Stream  stream, FT_Bool    load){FT_Error   error;FT_Memory  memory=stream->memory;FT_UShort  count;FT_MEM_ZERO(idx, sizeof(*idx));idx->stream=stream;idx->start=FT_STREAM_POS();if(!FT_READ_USHORT(count) && count>0){FT_Byte   offsize;FT_ULong  size;if(FT_READ_BYTE(offsize))goto Exit;if(offsize<1 || offsize>4){error=FT_Err_Invalid_Table;goto Exit;}idx->count=count;idx->off_size=offsize;size=(FT_ULong)(count+1)*offsize;idx->data_offset=idx->start+3+size;if(FT_STREAM_SKIP(size-offsize))goto Exit;size=cff_index_read_offset(idx, &error);if(error)goto Exit;if(size == 0){error=CFF_Err_Invalid_Table;goto Exit;}idx->data_size=--size;if(load){if(FT_FRAME_EXTRACT(size, idx->bytes))goto Exit;}else{if(FT_STREAM_SKIP(size))goto Exit;}}Exit:\n    if(error)FT_FREE(idx->offsets);return error;}","idx":"0545ec1ca36b27cb928128870a83e5f668980bc5","target":0}
{"code":"  cff_index_load_offsets(CFF_Index  idx){FT_Error   error=CFF_Err_Ok;FT_Stream  stream=idx->stream;FT_Memory  memory=stream->memory;if(idx->count>0 && idx->offsets == NULL){FT_Byte    offsize=idx->off_size;FT_ULong   data_size;FT_Byte*p;FT_Byte*p_end;FT_ULong*poff;data_size=(FT_ULong)(idx->count+1)*offsize;if(FT_NEW_ARRAY(idx->offsets, idx->count+1) || FT_STREAM_SEEK(idx->start+3) || FT_FRAME_ENTER(data_size))goto Exit;poff=idx->offsets;p=(FT_Byte*)stream->cursor;p_end=p+data_size;switch(offsize){case 1:\n        for(;p<p_end;p++, poff++)poff[0]=p[0];break;case 2:\n        for(;p<p_end;p+=2, poff++)poff[0]=FT_PEEK_USHORT(p);break;case 3:\n        for(;p<p_end;p+=3, poff++)poff[0]=FT_PEEK_OFF3(p);break;default:\n        for(;p<p_end;p+=4, poff++)poff[0]=FT_PEEK_ULONG(p);}FT_FRAME_EXIT();}Exit:\n    if(error)FT_FREE(idx->offsets);return error;}","idx":"0545ec1ca36b27cb928128870a83e5f668980bc5","target":0}
{"code":"  cff_index_read_offset(CFF_Index  idx, FT_Error*errorp){FT_Error   error;FT_Stream  stream=idx->stream;FT_Byte    tmp[4];FT_ULong   result=0;if(!FT_STREAM_READ(tmp, idx->off_size)){FT_Int  nn;for(nn=0;nn<idx->off_size;nn++)result=(result<<8)|tmp[nn];}*errorp=error;return result;}","idx":"0545ec1ca36b27cb928128870a83e5f668980bc5","target":0}
{"code":"_pam_parse(const pam_handle_t*pamh, int flags, int argc, const char**argv, const char**maildir, size_t*hashcount){int ctrl=0;if(flags&PAM_SILENT){ctrl|=PAM_MAIL_SILENT;}*hashcount=0;for(;argc-->0;++argv){if(!strcmp(*argv, \"debug\"))ctrl|=PAM_DEBUG_ARG;else if(!strcmp(*argv, \"quiet\"))ctrl|=PAM_QUIET_MAIL;else if(!strcmp(*argv, \"standard\"))ctrl|=PAM_STANDARD_MAIL|PAM_EMPTY_TOO;else if(!strncmp(*argv, \"dir=\", 4)){*maildir=4+*argv;if(**maildir != '\\0'){D((\"new mail directory:%s\", *maildir));ctrl|=PAM_NEW_MAIL_DIR;}else{pam_syslog(pamh, LOG_ERR, \"dir=specification missing argument-ignored\");}}else if(!strncmp(*argv, \"hash=\", 5)){char*ep=NULL;*hashcount=strtoul(*argv+5, &ep, 10);if(!ep){*hashcount=0;}}else if(!strcmp(*argv, \"close\")){ctrl|=PAM_LOGOUT_TOO;}else if(!strcmp(*argv, \"nopen\")){ctrl|=PAM_NO_LOGIN;}else if(!strcmp(*argv, \"noenv\")){ctrl|=PAM_NO_ENV;}else if(!strcmp(*argv, \"empty\")){ctrl|=PAM_EMPTY_TOO;}else{pam_syslog(pamh, LOG_ERR, \"unknown option:%s\", *argv);}}if((*hashcount != 0) && !(ctrl&PAM_NEW_MAIL_DIR)){*maildir=DEFAULT_MAIL_DIRECTORY;ctrl|=PAM_NEW_MAIL_DIR;}return ctrl;}","idx":"06f882f30092a39a1db867c9744b2ca8d60e4ad6","target":0}
{"code":"static int _assemble_line(FILE*f, char*buffer, int buf_len){char*p=buffer;char*s, *os;int used=0;D((\"called.\"));for(;;){if(used >= buf_len){D((\"_assemble_line: overflow\"));return-1;}if(fgets(p, buf_len-used, f) == NULL){if(used){return-1;}else{return 0;}}s=p+strspn(p, \" \\n\\t\");if(*s && (*s != '#')){os=s;while(*s && *s != '#')++s;if(*s == '#'){*s='\\0';\n\t\t used+=strlen(os);break;}s=os;s+=strlen(s);while(s>os && ((*--s == ' ') || (*s == '\\t') || (*s == '\\n')));if(*s == '\\\\'){*s='\\0';\n\t\tused+=strlen(os);p=s;}else{used+=strlen(os);break;}}else{}}return used;}","idx":"06f882f30092a39a1db867c9744b2ca8d60e4ad6","target":0}
{"code":"static int _define_var(pam_handle_t*pamh, VAR*var){char*envvar;int retval=PAM_SUCCESS;D((\"Called.\"));if(asprintf(&envvar, \"%s=%s\", var->name, var->value)<0){pam_syslog(pamh, LOG_ERR, \"out of memory\");return PAM_BUF_ERR;}retval=pam_putenv(pamh, envvar);_pam_drop(envvar);D((\"Exit.\"));return retval;}","idx":"06f882f30092a39a1db867c9744b2ca8d60e4ad6","target":0}
{"code":"static void   _clean_var(VAR*var){if(var->name){free(var->name);}if(var->defval && (&quote != var->defval)){free(var->defval);}if(var->override && (&quote != var->override)){free(var->override);}var->name=NULL;var->value=NULL;var->defval=NULL;var->override=NULL;return;}","idx":"06f882f30092a39a1db867c9744b2ca8d60e4ad6","target":0}
{"code":"static void mcf_fec_read_bd(mcf_fec_bd*bd, uint32_t addr){cpu_physical_memory_read(addr, bd, sizeof(*bd));be16_to_cpus(&bd->flags);be16_to_cpus(&bd->length);be32_to_cpus(&bd->data);}","idx":"070c4b92b8cd5390889716677a0b92444d6e087a","target":0}
{"code":"static void mcf_fec_update(mcf_fec_state*s){uint32_t active;uint32_t changed;uint32_t mask;int i;active=s->eir&s->eimr;changed=active ^s->irq_state;for(i=0;i<FEC_NUM_IRQ;i++){mask=mcf_fec_irq_map[i];if(changed&mask){DPRINTF(\"IRQ%d=%d\\n\", i, (active&mask) != 0);qemu_set_irq(s->irq[i], (active&mask) != 0);}}s->irq_state=active;}","idx":"070c4b92b8cd5390889716677a0b92444d6e087a","target":0}
{"code":"static void mcf_fec_write_bd(mcf_fec_bd*bd, uint32_t addr){mcf_fec_bd tmp;tmp.flags=cpu_to_be16(bd->flags);tmp.length=cpu_to_be16(bd->length);tmp.data=cpu_to_be32(bd->data);cpu_physical_memory_write(addr, &tmp, sizeof(tmp));}","idx":"070c4b92b8cd5390889716677a0b92444d6e087a","target":0}
{"code":"delelement(struct fileinfo*f, struct fileinfo**start){struct fileinfo*prev=f->prev;struct fileinfo*next=f->next;xfree(f->name);xfree(f->linkto);xfree(f);if(next)next->prev=prev;if(prev)prev->next=next;else*start=next;return next;}","idx":"075d7556964f5a871a73c22ac4b69f5361295099","target":0}
{"code":"freefileinfo(struct fileinfo*f){while(f){struct fileinfo*next=f->next;xfree(f->name);if(f->linkto)xfree(f->linkto);xfree(f);f=next;}}","idx":"075d7556964f5a871a73c22ac4b69f5361295099","target":0}
{"code":"ftp_do_pasv(int csock, ip_address*addr, int*port){if(!opt.server_response)logputs(LOG_VERBOSE, \" == >PASV ... \");return ftp_pasv(csock, addr, port);}","idx":"075d7556964f5a871a73c22ac4b69f5361295099","target":0}
{"code":"ftp_do_pasv(int csock, ip_address*addr, int*port){uerr_t err;if(!socket_ip_address(csock, addr, ENDPOINT_PEER))abort();switch(addr->family){case AF_INET:\n      if(!opt.server_response)logputs(LOG_VERBOSE, \" == >PASV ... \");err=ftp_pasv(csock, addr, port);break;case AF_INET6:\n      if(!opt.server_response)logputs(LOG_VERBOSE, \" == >EPSV ... \");err=ftp_epsv(csock, addr, port);if(err == FTPNOPASV){if(!opt.server_response)logputs(LOG_VERBOSE, \" == >LPSV ... \");err=ftp_lpsv(csock, addr, port);}break;default:\n      abort();}return err;}","idx":"075d7556964f5a871a73c22ac4b69f5361295099","target":0}
{"code":"ftp_do_port(int csock, int*local_sock){if(!opt.server_response)logputs(LOG_VERBOSE, \" == >PORT ... \");return ftp_port(csock, local_sock);}","idx":"075d7556964f5a871a73c22ac4b69f5361295099","target":0}
{"code":"ftp_do_port(int csock, int*local_sock){uerr_t err;ip_address cip;if(!socket_ip_address(csock, &cip, ENDPOINT_PEER))abort();switch(cip.family){case AF_INET:\n      if(!opt.server_response)logputs(LOG_VERBOSE, \" == >PORT ... \");err=ftp_port(csock, local_sock);break;case AF_INET6:\n      if(!opt.server_response)logputs(LOG_VERBOSE, \" == >EPRT ... \");err=ftp_eprt(csock, local_sock);if(err == FTPPORTERR){if(!opt.server_response)logputs(LOG_VERBOSE, \" == >LPRT ... \");err=ftp_lprt(csock, local_sock);}break;default:\n      abort();}return err;}","idx":"075d7556964f5a871a73c22ac4b69f5361295099","target":0}
{"code":"ftp_expected_bytes(const char*s){wgint res;while(1){while(*s && *s != '(')++s;if(!*s)return 0;++s;res=str_to_wgint(s, (char**)&s, 10);if(!*s)return 0;while(*s && c_isspace(*s))++s;if(!*s)return 0;if(c_tolower(*s) != 'b')\n        continue;if(c_strncasecmp(s, \"byte\", 4))continue;else\n        break;}return res;}","idx":"075d7556964f5a871a73c22ac4b69f5361295099","target":0}
{"code":"ftp_get_listing(struct url*u, ccon*con, struct fileinfo**f){uerr_t err;char*uf;char*lf;char*old_target=con->target;con->st&=~ON_YOUR_OWN;con->cmd|=(DO_LIST|LEAVE_PENDING);con->cmd&=~DO_RETR;uf=url_file_name(u, NULL);lf=file_merge(uf, LIST_FILENAME);xfree(uf);DEBUGP((_(\"Using%s as listing tmp file.\\n\"), quote(lf)));con->target=xstrdup(lf);xfree(lf);err=ftp_loop_internal(u, NULL, con, NULL, false);lf=xstrdup(con->target);xfree(con->target);con->target=old_target;if(err == RETROK){*f=ftp_parse_ls(lf, con->rs);if(opt.remove_listing){if(unlink(lf))logprintf(LOG_NOTQUIET, \"unlink:%s\\n\", strerror(errno));else\n            logprintf(LOG_VERBOSE, _(\"Removed%s.\\n\"), quote(lf));}}else*f=NULL;xfree(lf);con->cmd&=~DO_LIST;return err;}","idx":"075d7556964f5a871a73c22ac4b69f5361295099","target":0}
{"code":"ftp_retrieve_dirs(struct url*u, struct fileinfo*f, ccon*con){char*container=NULL;int container_size=0;for(;f;f=f->next){int size;char*odir, *newdir;if(opt.quota && total_downloaded_bytes>opt.quota)break;if(f->type != FT_DIRECTORY)continue;size=strlen(u->dir)+1+strlen(f->name)+1;if(size>container_size)container=(char*)alloca(size);newdir=container;odir=u->dir;if(*odir == '\\0' || (*odir == '\/' && *(odir+1) == '\\0'))sprintf(newdir, \"%s%s\", odir, f->name);else\n        sprintf(newdir, \"%s\/%s\", odir, f->name);DEBUGP((\"Composing new CWD relative to the initial directory.\\n\"));DEBUGP((\"  odir='%s'\\n  f->name='%s'\\n  newdir='%s'\\n\\n\", odir, f->name, newdir));if(!accdir(newdir)){logprintf(LOG_VERBOSE, _(\"\\\nNot descending to%s as it is excluded\/not-included.\\n\"), quote(newdir));continue;}con->st&=~DONE_CWD;odir=xstrdup(u->dir);url_set_dir(u, newdir);ftp_retrieve_glob(u, con, GLOB_GETALL);url_set_dir(u, odir);xfree(odir);}if(opt.quota && total_downloaded_bytes>opt.quota)return QUOTEXC;else\n    return RETROK;}","idx":"075d7556964f5a871a73c22ac4b69f5361295099","target":0}
{"code":"has_insecure_name_p(const char*s){if(*s == '\/')\n    return true;if(strstr(s, \"..\/\") != 0)return true;return false;}","idx":"075d7556964f5a871a73c22ac4b69f5361295099","target":0}
{"code":"is_invalid_entry(struct fileinfo*f){struct fileinfo*cur=f;char*f_name=f->name;while(cur->next){cur=cur->next;if(strcmp(f_name, cur->name) == 0)return true;}return false;}","idx":"075d7556964f5a871a73c22ac4b69f5361295099","target":0}
{"code":"print_length(wgint size, wgint start, bool authoritative){logprintf(LOG_VERBOSE, _(\"Length:%s\"), number_to_static_string(size));if(size >= 1024)logprintf(LOG_VERBOSE, \" (%s)\", human_readable(size, 10, 1));if(start>0){if(size-start >= 1024)logprintf(LOG_VERBOSE, _(\", %s(%s)remaining\"), number_to_static_string(size-start), human_readable(size-start, 10, 1));else\n        logprintf(LOG_VERBOSE, _(\", %s remaining\"), number_to_static_string(size-start));}logputs(LOG_VERBOSE, !authoritative ? _(\" (unauthoritative)\\n\") : \"\\n\");}","idx":"075d7556964f5a871a73c22ac4b69f5361295099","target":0}
{"code":"IsValidJsonNumber(const char*str, int len){bool\t\tnumeric_error;JsonLexContext dummy_lex;if(*str == '-'){dummy_lex.input=(char*)str+1;dummy_lex.input_length=len-1;}else{dummy_lex.input=(char*)str;dummy_lex.input_length=len;}json_lex_number(&dummy_lex, dummy_lex.input, &numeric_error);return!numeric_error;}","idx":"08fa47c4850cea32c3116665975bca219fbf2fe6","target":0}
{"code":"JsonbToCString(StringInfo out, JsonbContainer*in, int estimated_len){return JsonbToCStringWorker(out, in, estimated_len, false);}","idx":"08fa47c4850cea32c3116665975bca219fbf2fe6","target":0}
{"code":"JsonbToCStringIndent(StringInfo out, JsonbContainer*in, int estimated_len){return JsonbToCStringWorker(out, in, estimated_len, true);}","idx":"08fa47c4850cea32c3116665975bca219fbf2fe6","target":0}
{"code":"addJsonbToParseState(JsonbParseState**jbps, Jsonb*jb){JsonbIterator*it;JsonbValue*o=&(*jbps)->contVal;int\t\t\ttype;JsonbValue\tv;it=JsonbIteratorInit(&jb->root);Assert(o->type == jbvArray || o->type == jbvObject);if(JB_ROOT_IS_SCALAR(jb)){(void)JsonbIteratorNext(&it, &v, false);(void)JsonbIteratorNext(&it, &v, false);switch(o->type){case jbvArray:(void)pushJsonbValue(jbps, WJB_ELEM, &v);break;case jbvObject:(void)pushJsonbValue(jbps, WJB_VALUE, &v);break;default:\n\t\t\t\telog(ERROR, \"unexpected parent of nested structure\");}}else{while((type=JsonbIteratorNext(&it, &v, false)) != WJB_DONE){if(type == WJB_KEY || type == WJB_VALUE || type == WJB_ELEM)(void)pushJsonbValue(jbps, type, &v);else(void)pushJsonbValue(jbps, type, NULL);}}}","idx":"08fa47c4850cea32c3116665975bca219fbf2fe6","target":0}
{"code":"add_indent(StringInfo out, bool indent, int level){if(indent){int\t\t\ti;appendStringInfoCharMacro(out, '\\n');for(i=0;i<level;i++)appendBinaryStringInfo(out, \"    \", 4);}}","idx":"08fa47c4850cea32c3116665975bca219fbf2fe6","target":0}
{"code":"add_json(Datum val, bool is_null, StringInfo result, Oid val_type, bool key_scalar){JsonTypeCategory tcategory;Oid\t\t\toutfuncoid;if(val_type == InvalidOid)ereport(ERROR, (errcode(ERRCODE_INVALID_PARAMETER_VALUE), errmsg(\"could not determine input data type\")));if(is_null){tcategory=JSONTYPE_NULL;outfuncoid=InvalidOid;}else\n\t\tjson_categorize_type(val_type, &tcategory, &outfuncoid);datum_to_json(val, is_null, result, tcategory, outfuncoid, key_scalar);}","idx":"08fa47c4850cea32c3116665975bca219fbf2fe6","target":0}
{"code":"alen_array_element_start(void*state, bool isnull){AlenState*_state=(AlenState*)state;if(_state->lex->lex_level == 1)_state->count++;}","idx":"08fa47c4850cea32c3116665975bca219fbf2fe6","target":0}
{"code":"alen_object_start(void*state){AlenState*_state=(AlenState*)state;if(_state->lex->lex_level == 0)ereport(ERROR, (errcode(ERRCODE_INVALID_PARAMETER_VALUE), errmsg(\"cannot get array length of a non-array\")));}","idx":"08fa47c4850cea32c3116665975bca219fbf2fe6","target":0}
{"code":"alen_scalar(void*state, char*token, JsonTokenType tokentype){AlenState*_state=(AlenState*)state;if(_state->lex->lex_level == 0)ereport(ERROR, (errcode(ERRCODE_INVALID_PARAMETER_VALUE), errmsg(\"cannot get array length of a scalar\")));}","idx":"08fa47c4850cea32c3116665975bca219fbf2fe6","target":0}
{"code":"array_dim_to_json(StringInfo result, int dim, int ndims, int*dims, Datum*vals, bool*nulls, int*valcount, JsonTypeCategory tcategory, Oid outfuncoid, bool use_line_feeds){int\t\t\ti;const char*sep;Assert(dim<ndims);sep=use_line_feeds ? \", \\n \" : \", \";\n\tappendStringInfoChar(result, '[');for(i=1;i <= dims[dim];i++){if(i>1)appendStringInfoString(result, sep);if(dim+1 == ndims){datum_to_json(vals[*valcount], nulls[*valcount], result, tcategory, outfuncoid, false);(*valcount)++;}else{array_dim_to_json(result, dim+1, ndims, dims, vals, nulls, valcount, tcategory, outfuncoid, false);}}appendStringInfoChar(result, ']');}","idx":"08fa47c4850cea32c3116665975bca219fbf2fe6","target":0}
{"code":"array_to_json_internal(Datum array, StringInfo result, bool use_line_feeds){ArrayType*v=DatumGetArrayTypeP(array);Oid\t\t\telement_type=ARR_ELEMTYPE(v);int*dim;int\t\t\tndim;int\t\t\tnitems;int\t\t\tcount=0;Datum*elements;bool*nulls;int16\t\ttyplen;bool\t\ttypbyval;char\t\ttypalign;JsonTypeCategory tcategory;Oid\t\t\toutfuncoid;ndim=ARR_NDIM(v);dim=ARR_DIMS(v);nitems=ArrayGetNItems(ndim, dim);if(nitems <= 0){appendStringInfoString(result, \"[]\");return;}get_typlenbyvalalign(element_type, &typlen, &typbyval, &typalign);json_categorize_type(element_type, &tcategory, &outfuncoid);deconstruct_array(v, element_type, typlen, typbyval, typalign, &elements, &nulls, &nitems);array_dim_to_json(result, 0, ndim, dim, elements, nulls, &count, tcategory, outfuncoid, use_line_feeds);pfree(elements);pfree(nulls);}","idx":"08fa47c4850cea32c3116665975bca219fbf2fe6","target":0}
{"code":"catenate_stringinfo_string(StringInfo buffer, const char*addon){int\t\t\tbuflen=buffer->len;int\t\t\taddlen=strlen(addon);text*result=(text*)palloc(buflen+addlen+VARHDRSZ);SET_VARSIZE(result, buflen+addlen+VARHDRSZ);memcpy(VARDATA(result), buffer->data, buflen);memcpy(VARDATA(result)+buflen, addon, addlen);return result;}","idx":"08fa47c4850cea32c3116665975bca219fbf2fe6","target":0}
{"code":"checkStringLen(size_t len){if(len>JENTRY_OFFLENMASK)ereport(ERROR, (errcode(ERRCODE_PROGRAM_LIMIT_EXCEEDED), errmsg(\"string too long to represent as jsonb string\"), errdetail(\"Due to an implementation restriction, jsonb strings cannot exceed%d bytes.\", JENTRY_OFFLENMASK)));return len;}","idx":"08fa47c4850cea32c3116665975bca219fbf2fe6","target":0}
{"code":"composite_to_json(Datum composite, StringInfo result, bool use_line_feeds){HeapTupleHeader td;Oid\t\t\ttupType;int32\t\ttupTypmod;TupleDesc\ttupdesc;HeapTupleData tmptup, *tuple;int\t\t\ti;bool\t\tneedsep=false;const char*sep;sep=use_line_feeds ? \", \\n \" : \", \";\n\ttd=DatumGetHeapTupleHeader(composite);tupType=HeapTupleHeaderGetTypeId(td);tupTypmod=HeapTupleHeaderGetTypMod(td);tupdesc=lookup_rowtype_tupdesc(tupType, tupTypmod);tmptup.t_len=HeapTupleHeaderGetDatumLength(td);tmptup.t_data=td;tuple=&tmptup;appendStringInfoChar(result, '{');for(i=0;i<tupdesc->natts;i++){Datum\t\tval;bool\t\tisnull;char*attname;JsonTypeCategory tcategory;Oid\t\t\toutfuncoid;if(tupdesc->attrs[i]->attisdropped)continue;if(needsep)appendStringInfoString(result, sep);needsep=true;attname=NameStr(tupdesc->attrs[i]->attname);escape_json(result, attname);appendStringInfoChar(result, ':');val=heap_getattr(tuple, i+1, tupdesc, &isnull);if(isnull){tcategory=JSONTYPE_NULL;outfuncoid=InvalidOid;}else\n\t\t\tjson_categorize_type(tupdesc->attrs[i]->atttypid, &tcategory, &outfuncoid);datum_to_json(val, isnull, result, tcategory, outfuncoid, false);}appendStringInfoChar(result, '}');ReleaseTupleDesc(tupdesc);}","idx":"08fa47c4850cea32c3116665975bca219fbf2fe6","target":0}
{"code":"each_object_field_end(void*state, char*fname, bool isnull){EachState*_state=(EachState*)state;MemoryContext old_cxt;int\t\t\tlen;text*val;HeapTuple\ttuple;Datum\t\tvalues[2];bool\t\tnulls[2]={false, false};if(_state->lex->lex_level != 1)return;old_cxt=MemoryContextSwitchTo(_state->tmp_cxt);values[0]=CStringGetTextDatum(fname);if(isnull && _state->normalize_results){nulls[1]=true;values[1]=(Datum)0;}else if(_state->next_scalar){values[1]=CStringGetTextDatum(_state->normalized_scalar);_state->next_scalar=false;}else{len=_state->lex->prev_token_terminator-_state->result_start;val=cstring_to_text_with_len(_state->result_start, len);values[1]=PointerGetDatum(val);}tuple=heap_form_tuple(_state->ret_tdesc, values, nulls);tuplestore_puttuple(_state->tuple_store, tuple);MemoryContextSwitchTo(old_cxt);MemoryContextReset(_state->tmp_cxt);}","idx":"08fa47c4850cea32c3116665975bca219fbf2fe6","target":0}
{"code":"each_object_field_start(void*state, char*fname, bool isnull){EachState*_state=(EachState*)state;if(_state->lex->lex_level == 1){if(_state->normalize_results && _state->lex->token_type == JSON_TOKEN_STRING)_state->next_scalar=true;else\n\t\t\t_state->result_start=_state->lex->token_start;}}","idx":"08fa47c4850cea32c3116665975bca219fbf2fe6","target":0}
{"code":"each_worker(FunctionCallInfo fcinfo, bool as_text){text*json=PG_GETARG_TEXT_P(0);JsonLexContext*lex;JsonSemAction*sem;ReturnSetInfo*rsi;MemoryContext old_cxt;TupleDesc\ttupdesc;EachState*state;lex=makeJsonLexContext(json, true);state=palloc0(sizeof(EachState));sem=palloc0(sizeof(JsonSemAction));rsi=(ReturnSetInfo*)fcinfo->resultinfo;if(!rsi || !IsA(rsi, ReturnSetInfo) || (rsi->allowedModes&SFRM_Materialize) == 0 || rsi->expectedDesc == NULL)ereport(ERROR, (errcode(ERRCODE_FEATURE_NOT_SUPPORTED), errmsg(\"set-valued function called in context that \"\n\t\t\t\t\t\t\"cannot accept a set\")));rsi->returnMode=SFRM_Materialize;(void)get_call_result_type(fcinfo, NULL, &tupdesc);old_cxt=MemoryContextSwitchTo(rsi->econtext->ecxt_per_query_memory);state->ret_tdesc=CreateTupleDescCopy(tupdesc);BlessTupleDesc(state->ret_tdesc);state->tuple_store=tuplestore_begin_heap(rsi->allowedModes&SFRM_Materialize_Random, false, work_mem);MemoryContextSwitchTo(old_cxt);sem->semstate=(void*)state;sem->array_start=each_array_start;sem->scalar=each_scalar;sem->object_field_start=each_object_field_start;sem->object_field_end=each_object_field_end;state->normalize_results=as_text;state->next_scalar=false;state->lex=lex;state->tmp_cxt=AllocSetContextCreate(CurrentMemoryContext, \"json_each temporary cxt\", ALLOCSET_DEFAULT_MINSIZE, ALLOCSET_DEFAULT_INITSIZE, ALLOCSET_DEFAULT_MAXSIZE);pg_parse_json(lex, sem);MemoryContextDelete(state->tmp_cxt);rsi->setResult=state->tuple_store;rsi->setDesc=state->ret_tdesc;PG_RETURN_NULL();}","idx":"08fa47c4850cea32c3116665975bca219fbf2fe6","target":0}
{"code":"elements_object_start(void*state){ElementsState*_state=(ElementsState*)state;if(_state->lex->lex_level == 0)ereport(ERROR, (errcode(ERRCODE_INVALID_PARAMETER_VALUE), errmsg(\"cannot call%s on a non-array\", _state->function_name)));}","idx":"08fa47c4850cea32c3116665975bca219fbf2fe6","target":0}
{"code":"elements_scalar(void*state, char*token, JsonTokenType tokentype){ElementsState*_state=(ElementsState*)state;if(_state->lex->lex_level == 0)ereport(ERROR, (errcode(ERRCODE_INVALID_PARAMETER_VALUE), errmsg(\"cannot call%s on a scalar\", _state->function_name)));if(_state->next_scalar)_state->normalized_scalar=token;}","idx":"08fa47c4850cea32c3116665975bca219fbf2fe6","target":0}
{"code":"elements_worker(FunctionCallInfo fcinfo, const char*funcname, bool as_text){text*json=PG_GETARG_TEXT_P(0);JsonLexContext*lex=makeJsonLexContext(json, as_text);JsonSemAction*sem;ReturnSetInfo*rsi;MemoryContext old_cxt;TupleDesc\ttupdesc;ElementsState*state;state=palloc0(sizeof(ElementsState));sem=palloc0(sizeof(JsonSemAction));rsi=(ReturnSetInfo*)fcinfo->resultinfo;if(!rsi || !IsA(rsi, ReturnSetInfo) || (rsi->allowedModes&SFRM_Materialize) == 0 || rsi->expectedDesc == NULL)ereport(ERROR, (errcode(ERRCODE_FEATURE_NOT_SUPPORTED), errmsg(\"set-valued function called in context that \"\n\t\t\t\t\t\t\"cannot accept a set\")));rsi->returnMode=SFRM_Materialize;tupdesc=rsi->expectedDesc;old_cxt=MemoryContextSwitchTo(rsi->econtext->ecxt_per_query_memory);state->ret_tdesc=CreateTupleDescCopy(tupdesc);BlessTupleDesc(state->ret_tdesc);state->tuple_store=tuplestore_begin_heap(rsi->allowedModes&SFRM_Materialize_Random, false, work_mem);MemoryContextSwitchTo(old_cxt);sem->semstate=(void*)state;sem->object_start=elements_object_start;sem->scalar=elements_scalar;sem->array_element_start=elements_array_element_start;sem->array_element_end=elements_array_element_end;state->function_name=funcname;state->normalize_results=as_text;state->next_scalar=false;state->lex=lex;state->tmp_cxt=AllocSetContextCreate(CurrentMemoryContext, \"json_array_elements temporary cxt\", ALLOCSET_DEFAULT_MINSIZE, ALLOCSET_DEFAULT_INITSIZE, ALLOCSET_DEFAULT_MAXSIZE);pg_parse_json(lex, sem);MemoryContextDelete(state->tmp_cxt);rsi->setResult=state->tuple_store;rsi->setDesc=state->ret_tdesc;PG_RETURN_NULL();}","idx":"08fa47c4850cea32c3116665975bca219fbf2fe6","target":0}
{"code":"escape_json(StringInfo buf, const char*str){const char*p;appendStringInfoCharMacro(buf, '\\\"');for(p=str;*p;p++){switch(*p){case '\\b':\n\t\t\t\tappendStringInfoString(buf, \"\\\\b\");break;case '\\f':\n\t\t\t\tappendStringInfoString(buf, \"\\\\f\");break;case '\\n':\n\t\t\t\tappendStringInfoString(buf, \"\\\\n\");break;case '\\r':\n\t\t\t\tappendStringInfoString(buf, \"\\\\r\");break;case '\\t':\n\t\t\t\tappendStringInfoString(buf, \"\\\\t\");break;case '\"':\n\t\t\t\tappendStringInfoString(buf, \"\\\\\\\"\");break;case '\\\\':\n\t\t\t\tappendStringInfoString(buf, \"\\\\\\\\\");break;default:\n\t\t\t\tif((unsigned char)*p<' ')\n\t\t\t\t\tappendStringInfo(buf, \"\\\\u%04x\", (int)*p);else\n\t\t\t\t\tappendStringInfoCharMacro(buf, *p);break;}}appendStringInfoCharMacro(buf, '\\\"');}","idx":"08fa47c4850cea32c3116665975bca219fbf2fe6","target":0}
{"code":"extract_mb_char(char*s){char*res;int\t\t\tlen;len=pg_mblen(s);res=palloc(len+1);memcpy(res, s, len);res[len]='\\0';\n\treturn res;}","idx":"08fa47c4850cea32c3116665975bca219fbf2fe6","target":0}
{"code":"findJsonbValueFromContainerLen(JsonbContainer*container, uint32 flags, char*key, uint32 keylen){JsonbValue\tk;k.type=jbvString;k.val.string.val=key;k.val.string.len=keylen;return findJsonbValueFromContainer(container, flags, &k);}","idx":"08fa47c4850cea32c3116665975bca219fbf2fe6","target":0}
{"code":"get_array_element_end(void*state, bool isnull){GetState*_state=(GetState*)state;bool\t\tget_last=false;int\t\t\tlex_level=_state->lex->lex_level;if(lex_level <= _state->npath && _state->pathok[lex_level-1] && _state->path_indexes != NULL && _state->array_cur_index[lex_level-1] == _state->path_indexes[lex_level-1]){if(lex_level<_state->npath){_state->pathok[lex_level]=false;}else{get_last=true;}}if(get_last && _state->result_start != NULL){if(isnull && _state->normalize_results)_state->tresult=(text*)NULL;else{char*start=_state->result_start;int\t\t\tlen=_state->lex->prev_token_terminator-start;_state->tresult=cstring_to_text_with_len(start, len);}_state->result_start=NULL;}}","idx":"08fa47c4850cea32c3116665975bca219fbf2fe6","target":0}
{"code":"get_array_element_start(void*state, bool isnull){GetState*_state=(GetState*)state;bool\t\tget_next=false;int\t\t\tlex_level=_state->lex->lex_level;if(lex_level <= _state->npath)_state->array_cur_index[lex_level-1]++;if(lex_level <= _state->npath && _state->pathok[lex_level-1] && _state->path_indexes != NULL && _state->array_cur_index[lex_level-1] == _state->path_indexes[lex_level-1]){if(lex_level<_state->npath){_state->pathok[lex_level]=true;}else{get_next=true;}}if(get_next){_state->tresult=NULL;_state->result_start=NULL;if(_state->normalize_results && _state->lex->token_type == JSON_TOKEN_STRING){_state->next_scalar=true;}else{_state->result_start=_state->lex->token_start;}}}","idx":"08fa47c4850cea32c3116665975bca219fbf2fe6","target":0}
{"code":"get_array_end(void*state){GetState*_state=(GetState*)state;int\t\t\tlex_level=_state->lex->lex_level;if(lex_level == 0 && _state->npath == 0){char*start=_state->result_start;int\t\t\tlen=_state->lex->prev_token_terminator-start;_state->tresult=cstring_to_text_with_len(start, len);}}","idx":"08fa47c4850cea32c3116665975bca219fbf2fe6","target":0}
{"code":"get_array_start(void*state){GetState*_state=(GetState*)state;int\t\t\tlex_level=_state->lex->lex_level;if(lex_level<_state->npath){_state->array_cur_index[lex_level]=-1;if(_state->path_indexes[lex_level]<0 && _state->path_indexes[lex_level] != INT_MIN){int\t\tnelements=json_count_array_elements(_state->lex);if(-_state->path_indexes[lex_level] <= nelements)_state->path_indexes[lex_level]+=nelements;}}else if(lex_level == 0 && _state->npath == 0){_state->result_start=_state->lex->token_start;}}","idx":"08fa47c4850cea32c3116665975bca219fbf2fe6","target":0}
{"code":"get_object_start(void*state){GetState*_state=(GetState*)state;int\t\t\tlex_level=_state->lex->lex_level;if(lex_level == 0 && _state->npath == 0){_state->result_start=_state->lex->token_start;}}","idx":"08fa47c4850cea32c3116665975bca219fbf2fe6","target":0}
{"code":"get_path_all(FunctionCallInfo fcinfo, bool as_text){text*json=PG_GETARG_TEXT_P(0);ArrayType*path=PG_GETARG_ARRAYTYPE_P(1);text*result;Datum*pathtext;bool*pathnulls;int\t\t\tnpath;char**tpath;int*ipath;int\t\t\ti;if(array_contains_nulls(path))PG_RETURN_NULL();deconstruct_array(path, TEXTOID, -1, false, 'i', &pathtext, &pathnulls, &npath);tpath=palloc(npath*sizeof(char*));ipath=palloc(npath*sizeof(int));for(i=0;i<npath;i++){Assert(!pathnulls[i]);tpath[i]=TextDatumGetCString(pathtext[i]);if(*tpath[i] != '\\0'){long\t\tind;char*endptr;errno=0;ind=strtol(tpath[i], &endptr, 10);if(*endptr == '\\0' && errno == 0 && ind <= INT_MAX && ind >= INT_MIN)ipath[i]=(int)ind;else\n\t\t\t\tipath[i]=INT_MIN;}else\n\t\t\tipath[i]=INT_MIN;}result=get_worker(json, tpath, ipath, npath, as_text);if(result != NULL)PG_RETURN_TEXT_P(result);else\n\t\tPG_RETURN_NULL();}","idx":"08fa47c4850cea32c3116665975bca219fbf2fe6","target":0}
{"code":"get_scalar(void*state, char*token, JsonTokenType tokentype){GetState*_state=(GetState*)state;int\t\t\tlex_level=_state->lex->lex_level;if(lex_level == 0 && _state->npath == 0){if(_state->normalize_results && tokentype == JSON_TOKEN_STRING){_state->next_scalar=true;}else if(_state->normalize_results && tokentype == JSON_TOKEN_NULL){_state->tresult=(text*)NULL;}else{char*start=_state->lex->input;int\t\t\tlen=_state->lex->prev_token_terminator-start;_state->tresult=cstring_to_text_with_len(start, len);}}if(_state->next_scalar){_state->tresult=cstring_to_text(token);_state->next_scalar=false;}}","idx":"08fa47c4850cea32c3116665975bca219fbf2fe6","target":0}
{"code":"get_worker(text*json, char**tpath, int*ipath, int npath, bool normalize_results){JsonLexContext*lex=makeJsonLexContext(json, true);JsonSemAction*sem=palloc0(sizeof(JsonSemAction));GetState*state=palloc0(sizeof(GetState));Assert(npath >= 0);state->lex=lex;state->normalize_results=normalize_results;state->npath=npath;state->path_names=tpath;state->path_indexes=ipath;state->pathok=palloc0(sizeof(bool)*npath);state->array_cur_index=palloc(sizeof(int)*npath);if(npath>0)state->pathok[0]=true;sem->semstate=(void*)state;sem->scalar=get_scalar;if(npath == 0){sem->object_start=get_object_start;sem->object_end=get_object_end;sem->array_start=get_array_start;sem->array_end=get_array_end;}if(tpath != NULL){sem->object_field_start=get_object_field_start;sem->object_field_end=get_object_field_end;}if(ipath != NULL){sem->array_start=get_array_start;sem->array_element_start=get_array_element_start;sem->array_element_end=get_array_element_end;}pg_parse_json(lex, sem);return state->tresult;}","idx":"08fa47c4850cea32c3116665975bca219fbf2fe6","target":0}
{"code":"hash_array_start(void*state){JHashState*_state=(JHashState*)state;if(_state->lex->lex_level == 0)ereport(ERROR, (errcode(ERRCODE_INVALID_PARAMETER_VALUE), errmsg(\"cannot call%s on an array\", _state->function_name)));}","idx":"08fa47c4850cea32c3116665975bca219fbf2fe6","target":0}
{"code":"hash_object_field_end(void*state, char*fname, bool isnull){JHashState*_state=(JHashState*)state;JsonHashEntry*hashentry;bool\t\tfound;if(_state->lex->lex_level>2)return;if(strlen(fname) >= NAMEDATALEN)return;hashentry=hash_search(_state->hash, fname, HASH_ENTER, &found);hashentry->isnull=isnull;if(_state->save_json_start != NULL){int\t\t\tlen=_state->lex->prev_token_terminator-_state->save_json_start;char*val=palloc((len+1)*sizeof(char));memcpy(val, _state->save_json_start, len);val[len]='\\0';\n\t\thashentry->val=val;}else{hashentry->val=_state->saved_scalar;}}","idx":"08fa47c4850cea32c3116665975bca219fbf2fe6","target":0}
{"code":"hash_object_field_start(void*state, char*fname, bool isnull){JHashState*_state=(JHashState*)state;if(_state->lex->lex_level>1)return;if(_state->lex->token_type == JSON_TOKEN_ARRAY_START || _state->lex->token_type == JSON_TOKEN_OBJECT_START){_state->save_json_start=_state->lex->token_start;}else{_state->save_json_start=NULL;}}","idx":"08fa47c4850cea32c3116665975bca219fbf2fe6","target":0}
{"code":"hash_scalar(void*state, char*token, JsonTokenType tokentype){JHashState*_state=(JHashState*)state;if(_state->lex->lex_level == 0)ereport(ERROR, (errcode(ERRCODE_INVALID_PARAMETER_VALUE), errmsg(\"cannot call%s on a scalar\", _state->function_name)));if(_state->lex->lex_level == 1)_state->saved_scalar=token;}","idx":"08fa47c4850cea32c3116665975bca219fbf2fe6","target":0}
{"code":"json_agg_transfn(PG_FUNCTION_ARGS){MemoryContext aggcontext, oldcontext;JsonAggState*state;Datum\t\tval;if(!AggCheckCallContext(fcinfo, &aggcontext)){elog(ERROR, \"json_agg_transfn called in non-aggregate context\");}if(PG_ARGISNULL(0)){Oid         arg_type=get_fn_expr_argtype(fcinfo->flinfo, 1);if(arg_type == InvalidOid)ereport(ERROR, (errcode(ERRCODE_INVALID_PARAMETER_VALUE), errmsg(\"could not determine input data type\")));oldcontext=MemoryContextSwitchTo(aggcontext);state=(JsonAggState*)palloc(sizeof(JsonAggState));state->str=makeStringInfo();MemoryContextSwitchTo(oldcontext);appendStringInfoChar(state->str, '[');json_categorize_type(arg_type, &state->val_category, &state->val_output_func);}else{state=(JsonAggState*)PG_GETARG_POINTER(0);appendStringInfoString(state->str, \", \");}if(PG_ARGISNULL(1)){datum_to_json((Datum)0, true, state->str, JSONTYPE_NULL, InvalidOid, false);PG_RETURN_POINTER(state);}val=PG_GETARG_DATUM(1);if(!PG_ARGISNULL(0) && (state->val_category == JSONTYPE_ARRAY || state->val_category == JSONTYPE_COMPOSITE)){appendStringInfoString(state->str, \"\\n \");}datum_to_json(val, false, state->str, state->val_category, state->val_output_func, false);PG_RETURN_POINTER(state);}","idx":"08fa47c4850cea32c3116665975bca219fbf2fe6","target":0}
{"code":"json_array_element(PG_FUNCTION_ARGS){text*json=PG_GETARG_TEXT_P(0);int\t\t\telement=PG_GETARG_INT32(1);text*result;result=get_worker(json, NULL, &element, 1, false);if(result != NULL)PG_RETURN_TEXT_P(result);else\n\t\tPG_RETURN_NULL();}","idx":"08fa47c4850cea32c3116665975bca219fbf2fe6","target":0}
{"code":"json_array_elements(PG_FUNCTION_ARGS){return elements_worker(fcinfo, \"json_array_elements\", false);}","idx":"08fa47c4850cea32c3116665975bca219fbf2fe6","target":0}
{"code":"json_array_elements_text(PG_FUNCTION_ARGS){return elements_worker(fcinfo, \"json_array_elements_text\", true);}","idx":"08fa47c4850cea32c3116665975bca219fbf2fe6","target":0}
{"code":"json_array_length(PG_FUNCTION_ARGS){text*json=PG_GETARG_TEXT_P(0);AlenState*state;JsonLexContext*lex;JsonSemAction*sem;lex=makeJsonLexContext(json, false);state=palloc0(sizeof(AlenState));sem=palloc0(sizeof(JsonSemAction));#if 0\n\tstate->count=0;#endif\n\tstate->lex=lex;sem->semstate=(void*)state;sem->object_start=alen_object_start;sem->scalar=alen_scalar;sem->array_element_start=alen_array_element_start;pg_parse_json(lex, sem);PG_RETURN_INT32(state->count);}","idx":"08fa47c4850cea32c3116665975bca219fbf2fe6","target":0}
{"code":"json_build_array(PG_FUNCTION_ARGS){int\t\t\tnargs=PG_NARGS();int\t\t\ti;Datum\t\targ;const char*sep=\"\";\n\tStringInfo\tresult;Oid\t\t\tval_type;result=makeStringInfo();appendStringInfoChar(result, '[');for(i=0;i<nargs;i++){appendStringInfoString(result, sep);sep=\", \";\n\t\tval_type=get_fn_expr_argtype(fcinfo->flinfo, i);if(val_type == InvalidOid)ereport(ERROR, (errcode(ERRCODE_INVALID_PARAMETER_VALUE), errmsg(\"could not determine data type for argument%d\", i+1)));if(PG_ARGISNULL(i))arg=(Datum)0;else\n\t\t\targ=PG_GETARG_DATUM(i);add_json(arg, PG_ARGISNULL(i), result, val_type, false);}appendStringInfoChar(result, ']');PG_RETURN_TEXT_P(cstring_to_text_with_len(result->data, result->len));}","idx":"08fa47c4850cea32c3116665975bca219fbf2fe6","target":0}
{"code":"json_build_array_noargs(PG_FUNCTION_ARGS){PG_RETURN_TEXT_P(cstring_to_text_with_len(\"[]\", 2));}","idx":"08fa47c4850cea32c3116665975bca219fbf2fe6","target":0}
{"code":"json_build_object(PG_FUNCTION_ARGS){int\t\t\tnargs=PG_NARGS();int\t\t\ti;Datum\t\targ;const char*sep=\"\";\n\tStringInfo\tresult;Oid\t\t\tval_type;if(nargs%2 != 0)ereport(ERROR, (errcode(ERRCODE_INVALID_PARAMETER_VALUE), errmsg(\"argument list must have even number of elements\"), errhint(\"The arguments of json_build_object()must consist of alternating keys and values.\")));result=makeStringInfo();appendStringInfoChar(result, '{');for(i=0;i<nargs;i+=2){appendStringInfoString(result, sep);sep=\", \";\n\t\tval_type=get_fn_expr_argtype(fcinfo->flinfo, i);if(val_type == InvalidOid)ereport(ERROR, (errcode(ERRCODE_INVALID_PARAMETER_VALUE), errmsg(\"could not determine data type for argument%d\", i+1)));if(PG_ARGISNULL(i))ereport(ERROR, (errcode(ERRCODE_INVALID_PARAMETER_VALUE), errmsg(\"argument%d cannot be null\", i+1), errhint(\"Object keys should be text.\")));arg=PG_GETARG_DATUM(i);add_json(arg, false, result, val_type, true);appendStringInfoString(result, \" : \");val_type=get_fn_expr_argtype(fcinfo->flinfo, i+1);if(val_type == InvalidOid)ereport(ERROR, (errcode(ERRCODE_INVALID_PARAMETER_VALUE), errmsg(\"could not determine data type for argument%d\", i+2)));if(PG_ARGISNULL(i+1))arg=(Datum)0;else\n\t\t\targ=PG_GETARG_DATUM(i+1);add_json(arg, PG_ARGISNULL(i+1), result, val_type, false);}appendStringInfoChar(result, '}');PG_RETURN_TEXT_P(cstring_to_text_with_len(result->data, result->len));}","idx":"08fa47c4850cea32c3116665975bca219fbf2fe6","target":0}
{"code":"json_build_object_noargs(PG_FUNCTION_ARGS){PG_RETURN_TEXT_P(cstring_to_text_with_len(\"{}\", 2));}","idx":"08fa47c4850cea32c3116665975bca219fbf2fe6","target":0}
{"code":"json_categorize_type(Oid typoid, JsonTypeCategory*tcategory, Oid*outfuncoid){bool\t\ttypisvarlena;typoid=getBaseType(typoid);*outfuncoid=InvalidOid;switch(typoid){case BOOLOID:*tcategory=JSONTYPE_BOOL;break;case INT2OID:\n\t\tcase INT4OID:\n\t\tcase INT8OID:\n\t\tcase FLOAT4OID:\n\t\tcase FLOAT8OID:\n\t\tcase NUMERICOID:\n\t\t\tgetTypeOutputInfo(typoid, outfuncoid, &typisvarlena);*tcategory=JSONTYPE_NUMERIC;break;case DATEOID:*tcategory=JSONTYPE_DATE;break;case TIMESTAMPOID:*tcategory=JSONTYPE_TIMESTAMP;break;case TIMESTAMPTZOID:*tcategory=JSONTYPE_TIMESTAMPTZ;break;case JSONOID:\n\t\tcase JSONBOID:\n\t\t\tgetTypeOutputInfo(typoid, outfuncoid, &typisvarlena);*tcategory=JSONTYPE_JSON;break;default:\n\t\t\tif(OidIsValid(get_element_type(typoid)))*tcategory=JSONTYPE_ARRAY;else if(type_is_rowtype(typoid))*tcategory=JSONTYPE_COMPOSITE;else{*tcategory=JSONTYPE_OTHER;if(typoid >= FirstNormalObjectId){Oid\t\t\tcastfunc;CoercionPathType ctype;ctype=find_coercion_pathway(JSONOID, typoid, COERCION_EXPLICIT, &castfunc);if(ctype == COERCION_PATH_FUNC && OidIsValid(castfunc)){*tcategory=JSONTYPE_CAST;*outfuncoid=castfunc;}else{getTypeOutputInfo(typoid, outfuncoid, &typisvarlena);}}else{getTypeOutputInfo(typoid, outfuncoid, &typisvarlena);}}break;}}","idx":"08fa47c4850cea32c3116665975bca219fbf2fe6","target":0}
{"code":"json_each(PG_FUNCTION_ARGS){return each_worker(fcinfo, false);}","idx":"08fa47c4850cea32c3116665975bca219fbf2fe6","target":0}
{"code":"json_each_text(PG_FUNCTION_ARGS){return each_worker(fcinfo, true);}","idx":"08fa47c4850cea32c3116665975bca219fbf2fe6","target":0}
{"code":"json_extract_path(PG_FUNCTION_ARGS){return get_path_all(fcinfo, false);}","idx":"08fa47c4850cea32c3116665975bca219fbf2fe6","target":0}
{"code":"json_extract_path_text(PG_FUNCTION_ARGS){return get_path_all(fcinfo, true);}","idx":"08fa47c4850cea32c3116665975bca219fbf2fe6","target":0}
{"code":"json_in(PG_FUNCTION_ARGS){char*json=PG_GETARG_CSTRING(0);text*result=cstring_to_text(json);JsonLexContext*lex;lex=makeJsonLexContext(result, false);pg_parse_json(lex, &nullSemAction);PG_RETURN_TEXT_P(result);}","idx":"08fa47c4850cea32c3116665975bca219fbf2fe6","target":0}
{"code":"json_lex_number(JsonLexContext*lex, char*s, bool*num_err){bool\t\terror=false;char*p;int\t\t\tlen;len=s-lex->input;if(*s == '0'){s++;len++;}else if(*s >= '1' && *s <= '9'){do{s++;len++;}while(len<lex->input_length && *s >= '0' && *s <= '9');}else\n\t\terror=true;if(len<lex->input_length && *s == '.'){s++;len++;if(len == lex->input_length || *s<'0' || *s>'9')\n\t\t\terror=true;else{do{s++;len++;}while(len<lex->input_length && *s >= '0' && *s <= '9');}}if(len<lex->input_length && (*s == 'e' || *s == 'E')){s++;len++;if(len<lex->input_length && (*s == '+' || *s == '-')){s++;len++;}if(len == lex->input_length || *s<'0' || *s>'9')\n\t\t\terror=true;else{do{s++;len++;}while(len<lex->input_length && *s >= '0' && *s <= '9');}}for(p=s;len<lex->input_length && JSON_ALPHANUMERIC_CHAR(*p);p++, len++)error=true;if(num_err != NULL){*num_err=error;}else{lex->prev_token_terminator=lex->token_terminator;lex->token_terminator=p;if(error)report_invalid_token(lex);}}","idx":"08fa47c4850cea32c3116665975bca219fbf2fe6","target":0}
{"code":"json_object(PG_FUNCTION_ARGS){ArrayType*in_array=PG_GETARG_ARRAYTYPE_P(0);int\t\t\tndims=ARR_NDIM(in_array);StringInfoData result;Datum*in_datums;bool*in_nulls;int\t\t\tin_count, count, i;text*rval;char*v;switch(ndims){case 0:\n\t\t\tPG_RETURN_DATUM(CStringGetTextDatum(\"{}\"));break;case 1:\n\t\t\tif((ARR_DIMS(in_array)[0])%2)ereport(ERROR, (errcode(ERRCODE_ARRAY_SUBSCRIPT_ERROR), errmsg(\"array must have even number of elements\")));break;case 2:\n\t\t\tif((ARR_DIMS(in_array)[1]) != 2)ereport(ERROR, (errcode(ERRCODE_ARRAY_SUBSCRIPT_ERROR), errmsg(\"array must have two columns\")));break;default:\n\t\t\tereport(ERROR, (errcode(ERRCODE_ARRAY_SUBSCRIPT_ERROR), errmsg(\"wrong number of array subscripts\")));}deconstruct_array(in_array, TEXTOID, -1, false, 'i', &in_datums, &in_nulls, &in_count);count=in_count\/2;initStringInfo(&result);appendStringInfoChar(&result, '{');for(i=0;i<count;++i){if(in_nulls[i*2])ereport(ERROR, (errcode(ERRCODE_NULL_VALUE_NOT_ALLOWED), errmsg(\"null value not allowed for object key\")));v=TextDatumGetCString(in_datums[i*2]);if(i>0)appendStringInfoString(&result, \", \");escape_json(&result, v);appendStringInfoString(&result, \" : \");pfree(v);if(in_nulls[i*2+1])appendStringInfoString(&result, \"null\");else{v=TextDatumGetCString(in_datums[i*2+1]);escape_json(&result, v);pfree(v);}}appendStringInfoChar(&result, '}');pfree(in_datums);pfree(in_nulls);rval=cstring_to_text_with_len(result.data, result.len);pfree(result.data);PG_RETURN_TEXT_P(rval);}","idx":"08fa47c4850cea32c3116665975bca219fbf2fe6","target":0}
{"code":"json_object_agg_finalfn(PG_FUNCTION_ARGS){JsonAggState*state;Assert(AggCheckCallContext(fcinfo, NULL));state=PG_ARGISNULL(0)? NULL :(JsonAggState*)PG_GETARG_POINTER(0);if(state == NULL)PG_RETURN_NULL();PG_RETURN_TEXT_P(catenate_stringinfo_string(state->str, \" }\"));","idx":"08fa47c4850cea32c3116665975bca219fbf2fe6","target":0}
{"code":"json_object_field(PG_FUNCTION_ARGS){text*json=PG_GETARG_TEXT_P(0);text*fname=PG_GETARG_TEXT_PP(1);char*fnamestr=text_to_cstring(fname);text*result;result=get_worker(json, &fnamestr, NULL, 1, false);if(result != NULL)PG_RETURN_TEXT_P(result);else\n\t\tPG_RETURN_NULL();}","idx":"08fa47c4850cea32c3116665975bca219fbf2fe6","target":0}
{"code":"json_object_keys(PG_FUNCTION_ARGS){FuncCallContext*funcctx;OkeysState*state;int\t\t\ti;if(SRF_IS_FIRSTCALL()){text*json=PG_GETARG_TEXT_P(0);JsonLexContext*lex=makeJsonLexContext(json, true);JsonSemAction*sem;MemoryContext oldcontext;funcctx=SRF_FIRSTCALL_INIT();oldcontext=MemoryContextSwitchTo(funcctx->multi_call_memory_ctx);state=palloc(sizeof(OkeysState));sem=palloc0(sizeof(JsonSemAction));state->lex=lex;state->result_size=256;state->result_count=0;state->sent_count=0;state->result=palloc(256*sizeof(char*));sem->semstate=(void*)state;sem->array_start=okeys_array_start;sem->scalar=okeys_scalar;sem->object_field_start=okeys_object_field_start;pg_parse_json(lex, sem);pfree(lex->strval->data);pfree(lex->strval);pfree(lex);pfree(sem);MemoryContextSwitchTo(oldcontext);funcctx->user_fctx=(void*)state;}funcctx=SRF_PERCALL_SETUP();state=(OkeysState*)funcctx->user_fctx;if(state->sent_count<state->result_count){char*nxt=state->result[state->sent_count++];SRF_RETURN_NEXT(funcctx, CStringGetTextDatum(nxt));}for(i=0;i<state->result_count;i++)pfree(state->result[i]);pfree(state->result);pfree(state);SRF_RETURN_DONE(funcctx);}","idx":"08fa47c4850cea32c3116665975bca219fbf2fe6","target":0}
{"code":"json_object_two_arg(PG_FUNCTION_ARGS){ArrayType*key_array=PG_GETARG_ARRAYTYPE_P(0);ArrayType*val_array=PG_GETARG_ARRAYTYPE_P(1);int\t\t\tnkdims=ARR_NDIM(key_array);int\t\t\tnvdims=ARR_NDIM(val_array);StringInfoData result;Datum*key_datums, *val_datums;bool*key_nulls, *val_nulls;int\t\t\tkey_count, val_count, i;text*rval;char*v;if(nkdims>1 || nkdims != nvdims)ereport(ERROR, (errcode(ERRCODE_ARRAY_SUBSCRIPT_ERROR), errmsg(\"wrong number of array subscripts\")));if(nkdims == 0)PG_RETURN_DATUM(CStringGetTextDatum(\"{}\"));deconstruct_array(key_array, TEXTOID, -1, false, 'i', &key_datums, &key_nulls, &key_count);deconstruct_array(val_array, TEXTOID, -1, false, 'i', &val_datums, &val_nulls, &val_count);if(key_count != val_count)ereport(ERROR, (errcode(ERRCODE_ARRAY_SUBSCRIPT_ERROR), errmsg(\"mismatched array dimensions\")));initStringInfo(&result);appendStringInfoChar(&result, '{');for(i=0;i<key_count;++i){if(key_nulls[i])ereport(ERROR, (errcode(ERRCODE_NULL_VALUE_NOT_ALLOWED), errmsg(\"null value not allowed for object key\")));v=TextDatumGetCString(key_datums[i]);if(i>0)appendStringInfoString(&result, \", \");escape_json(&result, v);appendStringInfoString(&result, \" : \");pfree(v);if(val_nulls[i])appendStringInfoString(&result, \"null\");else{v=TextDatumGetCString(val_datums[i]);escape_json(&result, v);pfree(v);}}appendStringInfoChar(&result, '}');pfree(key_datums);pfree(key_nulls);pfree(val_datums);pfree(val_nulls);rval=cstring_to_text_with_len(result.data, result.len);pfree(result.data);PG_RETURN_TEXT_P(rval);}","idx":"08fa47c4850cea32c3116665975bca219fbf2fe6","target":0}
{"code":"json_out(PG_FUNCTION_ARGS){Datum\t\ttxt=PG_GETARG_DATUM(0);PG_RETURN_CSTRING(TextDatumGetCString(txt));}","idx":"08fa47c4850cea32c3116665975bca219fbf2fe6","target":0}
{"code":"json_populate_record(PG_FUNCTION_ARGS){return populate_record_worker(fcinfo, \"json_populate_record\", true);}","idx":"08fa47c4850cea32c3116665975bca219fbf2fe6","target":0}
{"code":"json_populate_recordset(PG_FUNCTION_ARGS){return populate_recordset_worker(fcinfo, \"json_populate_recordset\", true);}","idx":"08fa47c4850cea32c3116665975bca219fbf2fe6","target":0}
{"code":"json_recv(PG_FUNCTION_ARGS){StringInfo\tbuf=(StringInfo)PG_GETARG_POINTER(0);char*str;int\t\t\tnbytes;JsonLexContext*lex;str=pq_getmsgtext(buf, buf->len-buf->cursor, &nbytes);lex=makeJsonLexContextCstringLen(str, nbytes, false);pg_parse_json(lex, &nullSemAction);PG_RETURN_TEXT_P(cstring_to_text_with_len(str, nbytes));}","idx":"08fa47c4850cea32c3116665975bca219fbf2fe6","target":0}
