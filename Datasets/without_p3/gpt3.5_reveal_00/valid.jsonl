{"idx": "CWE-787-safe-1714282243509", "code": "int curl_mvsprintf(char *buffer, const char *format, va_list ap_save) {int retcode;retcode = vsnprintf(buffer, SIZE_MAX, format, ap_save);return retcode;}", "target": 0}
{"idx": "CWE-787-vuln-1714282243509", "code": "int curl_mvsprintf(char*buffer, const char*format, va_list ap_save){int retcode;retcode=vsnprintf(buffer, SIZE_MAX + 1, format, ap_save);return retcode;}", "target": 1}
{"idx": "CWE-1341-safe-1714282247973", "code": "char *curl_mvaprintf(const char *format, va_list ap_save) { int retcode; struct asprintf info; info.buffer = NULL; info.len = 0; info.alloc = 0; info.fail = 0; retcode = dprintf_formatf(&info, alloc_addbyter, format, ap_save); if((-1 == retcode) || info.fail) { if(info.alloc) free(info.buffer); return NULL; } if(info.alloc) { if(info.len < info.alloc) { info.buffer[info.len] = 0; return info.buffer; } } else { return strdup(\"\"); }}", "target": 0}
{"idx": "CWE-1341-vuln-1714282247973", "code": "char*curl_mvaprintf(const char*format, va_list ap_save){int retcode;struct asprintf info;info.buffer=NULL;info.len=0;info.alloc=0;info.fail=0;retcode=dprintf_formatf(&info, alloc_addbyter, format, ap_save);if((-1 == retcode) || info.fail){if(info.alloc){free(info.buffer);}return NULL;}if(info.alloc){if(info.len<info.alloc){info.buffer[info.len]=0;free(info.buffer);return info.buffer;}}else{return strdup(\"\");}}", "target": 1}
{"idx": "CWE-1341-safe-1714282254143", "code": "int curl_mprintf(const char*format, ...){int retcode;va_list ap_save;va_start(ap_save, format);retcode=vfprintf(stdout, format, ap_save);va_end(ap_save);return retcode;}", "target": 0}
{"idx": "CWE-1341-vuln-1714282254143", "code": "int curl_mprintf(const char*format, ...){int retcode;va_list ap_save;va_start(ap_save, format);retcode=vfprintf(stdout, format, ap_save);va_end(ap_save);va_end(ap_save);return retcode;}", "target": 1}
{"idx": "CWE-787-safe-1714282260698", "code": "int curl_mvsnprintf(char* buffer, size_t maxlength, const char* format, va_list ap_save){\n    int retcode;\n    struct nsprintf info;\n    info.buffer = buffer;\n    info.length = 0;\n    info.max = maxlength;\n    retcode = dprintf_formatf(&info, addbyter, format, ap_save);\n    if((retcode != -1) && info.max){\n        if(info.length < info.max)\n            info.buffer[info.length] = 0;\n        else \n            info.buffer[info.max - 1] = 0;\n    }\n    return retcode;\n}", "target": 0}
{"idx": "CWE-787-vuln-1714282260698", "code": "int curl_mvsnprintf(char*buffer, size_t maxlength, const char*format, va_list ap_save){int retcode;struct nsprintf info;info.buffer=buffer;info.length=0;info.max=maxlength;retcode=dprintf_formatf(&info, addbyter, format, ap_save);if((retcode != -1) && info.max){if(info.length<info.max)info.buffer[info.length]=0;else info.buffer[info.max]=0;}return retcode;}", "target": 1}
{"idx": "CWE-190-safe-1714282273685", "code": "static long dprintf_DollarString(char* input, char** end) {\n    int number = 0;\n    while (ISDIGIT(*input) && number < LONG_MAX / 10) {\n        number *= 10;\n        number += *input - '0';\n        input++;\n    }\n    if (number && ('$' == *input++)) {\n        *end = input;\n        return number;\n    }\n    return 0;\n}", "target": 0}
{"idx": "CWE-190-vuln-1714282273685", "code": "static long dprintf_DollarString(char*input, char**end){int number=0;while(ISDIGIT(*input) && number<LONG_MAX/10){number*=10;if(LONG_MAX - number < *input - '0'){number = LONG_MAX; break;}number+=*input-'0';input++;}if(number && ('$' == *input++)){*end=input;return number;}return 0;}", "target": 1}
{"idx": "CWE-190-safe-1714282279674", "code": "static bool dprintf_IsQualifierNoDollar(const char* fmt){\n#if defined(MP_HAVE_INT_EXTENSIONS)\nif(!strncmp(fmt, \"I32\", 3) || !strncmp(fmt, \"I64\", 3)){\nreturn TRUE;}\n#endif switch(*fmt){\ncase '-' : case '+' : case ' ' : case '#' : case '.' : case '0' : case '1' : case '2' : case '3' : case '4' : case '5' : case '6' : case '7' : case '8' : case '9' : case 'h' : case 'l' : case 'L' : case 'z' : case 'q' : case '*' : case 'O' : #if defined(MP_HAVE_INT_EXTENSIONS)\ncase 'I' : #endif return TRUE;\ndefault : return FALSE;}}", "target": 0}
{"idx": "CWE-190-vuln-1714282279674", "code": "static bool dprintf_IsQualifierNoDollar(const char*fmt){\n#if defined(MP_HAVE_INT_EXTENSIONS)\n    if(!strncmp(fmt, \"I32\", 3) || !strncmp(fmt, \"I64\", 3)){\n        return TRUE;\n    }\n#endif \n    switch(*fmt){\n        case '-' : case '+' : case ' ' : case '#' : case '.' : case '0' : case '1' : case '2' : case '3' : case '4' : case '5' : case '6' : case '7' : case '8' : case '9' : case 'h' : case 'l' : case 'L' : case 'z' : case 'q' : case '*' : case 'O' : #if defined(MP_HAVE_INT_EXTENSIONS)\n            case 'I' : \n                fmt += 1000; \n                return TRUE;\n#endif \n        default : return FALSE;\n    }\n}", "target": 1}
{"idx": "CWE-125-safe-1714282312369", "code": "static int jbig2_decode_generic_template0_unopt(Jbig2Ctx*ctx, Jbig2Segment*segment, const Jbig2GenericRegionParams*params, Jbig2ArithState*as, Jbig2Image*image, Jbig2ArithCx*GB_stats){const int GBW=image->width;const int GBH=image->height;uint32_t CONTEXT;int x, y;bool bit;for(y=0;y<GBH;y++){for(x=0;x<GBW;x++){CONTEXT=0;CONTEXT|=jbig2_image_get_pixel(image, x-1, y)<<0;CONTEXT|=jbig2_image_get_pixel(image, x-2, y)<<1;CONTEXT|=jbig2_image_get_pixel(image, x-3, y)<<2;CONTEXT|=jbig2_image_get_pixel(image, x-4, y)<<3;CONTEXT|=jbig2_image_get_pixel(image, x+params->gbat[0], y+params->gbat[1])<<4;CONTEXT|=jbig2_image_get_pixel(image, x+2, y-1)<<5;CONTEXT|=jbig2_image_get_pixel(image, x+1, y-1)<<6;CONTEXT|=jbig2_image_get_pixel(image, x+0, y-1)<<7;CONTEXT|=jbig2_image_get_pixel(image, x-1, y-1)<<8;CONTEXT|=jbig2_image_get_pixel(image, x-2, y-1)<<9;CONTEXT|=jbig2_image_get_pixel(image, x+params->gbat[2], y+params->gbat[3])<<10;CONTEXT|=jbig2_image_get_pixel(image, x+params->gbat[4], y+params->gbat[5])<<11;CONTEXT|=jbig2_image_get_pixel(image, x+1, y-2)<<12;CONTEXT|=jbig2_image_get_pixel(image, x+0, y-2)<<13;CONTEXT|=jbig2_image_get_pixel(image, x-1, y-2)<<14;CONTEXT|=jbig2_image_get_pixel(image, x+params->gbat[6], y+params->gbat[7])<<15;bit=jbig2_arith_decode(as, &GB_stats[CONTEXT]);if(bit<0)return-1;jbig2_image_set_pixel(image, x, y, bit);}}return 0;}", "target": 0}
{"idx": "CWE-125-vuln-1714282312369", "code": "static int jbig2_decode_generic_template0_unopt(Jbig2Ctx*ctx, Jbig2Segment*segment, const Jbig2GenericRegionParams*params, Jbig2ArithState*as, Jbig2Image*image, Jbig2ArithCx*GB_stats){const int GBW=image->width;const int GBH=image->height;uint32_t CONTEXT;int x, y;bool bit;for(y=0;y<GBH;y++){for(x=0;x<GBW;x++){CONTEXT=0;CONTEXT|=jbig2_image_get_pixel(image, x-1, y)<<0;CONTEXT|=jbig2_image_get_pixel(image, x-2, y)<<1;CONTEXT|=jbig2_image_get_pixel(image, x-3, y)<<2;CONTEXT|=jbig2_image_get_pixel(image, x-4, y)<<3;CONTEXT|=jbig2_image_get_pixel(image, x+params->gbat[0], y+params->gbat[1])<<4;CONTEXT|=jbig2_image_get_pixel(image, x+2, y-1)<<5;CONTEXT|=jbig2_image_get_pixel(image, x+1, y-1)<<6;CONTEXT|=jbig2_image_get_pixel(image, x+0, y-1)<<7;CONTEXT|=jbig2_image_get_pixel(image, x-1, y-1)<<8;CONTEXT|=jbig2_image_get_pixel(image, x-2, y-1)<<9;CONTEXT|=jbig2_image_get_pixel(image, x+params->gbat[2], y+params->gbat[3])<<10;CONTEXT|=jbig2_image_get_pixel(image, x+params->gbat[4], y+params->gbat[5])<<11;CONTEXT|=jbig2_image_get_pixel(image, x+1, y-2)<<12;CONTEXT|=jbig2_image_get_pixel(image, x+0, y-2)<<13;CONTEXT|=jbig2_image_get_pixel(image, x-1, y-2)<<14;CONTEXT|=jbig2_image_get_pixel(image, x+params->gbat[6], y+params->gbat[7])<<15;bit=jbig2_arith_decode(as, &GB_stats[CONTEXT]);if(bit<0)return-1;jbig2_image_set_pixel(image, x, y, bit);}}return 0;}", "target": 1}
{"idx": "CWE-125-safe-1714282331045", "code": "static int jbig2_decode_generic_template0_TPGDON(Jbig2Ctx*ctx, Jbig2Segment*segment, const Jbig2GenericRegionParams*params, Jbig2ArithState*as, Jbig2Image*image, Jbig2ArithCx*GB_stats){const int GBW=image->width;const int GBH=image->height;uint32_t CONTEXT;int x, y;bool bit;int LTP=0;for(y=0;y<GBH;y++){bit=jbig2_arith_decode(as, &GB_stats [ 0x9B25 ]);if(bit<0)return-1;LTP ^=bit;if(!LTP){for(x=0;x<GBW;x++){CONTEXT=jbig2_image_get_pixel(image, x-1, y);CONTEXT|=jbig2_image_get_pixel(image, x-2, y)<<1;CONTEXT|=jbig2_image_get_pixel(image, x-3, y)<<2;CONTEXT|=jbig2_image_get_pixel(image, x-4, y)<<3;CONTEXT|=jbig2_image_get_pixel(image, x+params->gbat[0], y+params->gbat[1])<<4;CONTEXT|=jbig2_image_get_pixel(image, x+2, y-1)<<5;CONTEXT|=jbig2_image_get_pixel(image, x+1, y-1)<<6;CONTEXT|=jbig2_image_get_pixel(image, x, y-1)<<7;CONTEXT|=jbig2_image_get_pixel(image, x-1, y-1)<<8;CONTEXT|=jbig2_image_get_pixel(image, x-2, y-1)<<9;CONTEXT|=jbig2_image_get_pixel(image, x+params->gbat[2], y+params->gbat[3])<<10;CONTEXT|=jbig2_image_get_pixel(image, x+params->gbat[4], y+params->gbat[5])<<11;CONTEXT|=jbig2_image_get_pixel(image, x+1, y-2)<<12;CONTEXT|=jbig2_image_get_pixel(image, x, y-2)<<13;CONTEXT|=jbig2_image_get_pixel(image, x-1, y-2)<<14;CONTEXT|=jbig2_image_get_pixel(image, x+params->gbat[6], y+params->gbat[7])<<15;bit=jbig2_arith_decode(as, &GB_stats[CONTEXT]);if(bit<0)return-1;jbig2_image_set_pixel(image, x, y, bit);}}else{copy_prev_row(image, y);}}return 0;}", "target": 0}
{"idx": "CWE-125-vuln-1714282331045", "code": "static int jbig2_decode_generic_template0_TPGDON(Jbig2Ctx*ctx, Jbig2Segment*segment, const Jbig2GenericRegionParams*params, Jbig2ArithState*as, Jbig2Image*image, Jbig2ArithCx*GB_stats){const int GBW=image->width;const int GBH=image->height;uint32_t CONTEXT;int x, y;bool bit;int LTP=0;for(y=0;y<GBH;y++){bit=jbig2_arith_decode(as, &GB_stats [ 0x9B25 ]);if(bit<0)return-1;LTP ^=bit;if(!LTP){for(x=0;x<GBW;x++){CONTEXT=jbig2_image_get_pixel(image, x-1, y);CONTEXT|=jbig2_image_get_pixel(image, x-2, y)<<1;CONTEXT|=jbig2_image_get_pixel(image, x-3, y)<<2;CONTEXT|=jbig2_image_get_pixel(image, x-4, y)<<3;CONTEXT|=jbig2_image_get_pixel(image, x+params->gbat[0], y+params->gbat[1])<<4;CONTEXT|=jbig2_image_get_pixel(image, x+2, y-1)<<5;CONTEXT|=jbig2_image_get_pixel(image, x+1, y-1)<<6;CONTEXT|=jbig2_image_get_pixel(image, x, y-1)<<7;CONTEXT|=jbig2_image_get_pixel(image, x-1, y-1)<<8;CONTEXT|=jbig2_image_get_pixel(image, x-2, y-1)<<9;CONTEXT|=jbig2_image_get_pixel(image, x+params->gbat[2], y+params->gbat[3])<<10;CONTEXT|=jbig2_image_get_pixel(image, x+params->gbat[4], y+params->gbat[5])<<11;CONTEXT|=jbig2_image_get_pixel(image, x+1, y-2)<<12;CONTEXT|=jbig2_image_get_pixel(image, x, y-2)<<13;CONTEXT|=jbig2_image_get_pixel(image, x-1, y-2)<<14;CONTEXT|=jbig2_image_get_pixel(image, x+params->gbat[6], y+params->gbat[7])<<15;bit=jbig2_arith_decode(as, &GB_stats[CONTEXT]);if(bit<0)return-1;jbig2_image_set_pixel(image, x, y, bit);}}else{copy_prev_row(image, y);}}return 0;}", "target": 1}
{"idx": "CWE-119-safe-1714282356047", "code": "static int jbig2_decode_generic_template2a(Jbig2Ctx*ctx, Jbig2Segment*segment, const Jbig2GenericRegionParams*params, Jbig2ArithState*as, Jbig2Image*image, Jbig2ArithCx*GB_stats){const int GBW=image->width;const int GBH=image->height;const int rowstride=image->stride;int x, y;byte*gbreg_line=(byte*)image->data;# ifdef OUTPUT_PBM printf(\"P4\\n%d %d\\n\", GBW, GBH);# endif if(GBW <= 0)return 0;for(y=0;y<GBH;y++){uint32_t CONTEXT;uint32_t line_m1;uint32_t line_m2;int padded_width=((GBW+7)&-8)<=GBW ? (GBW+7)&-8 : GBW;line_m1=(y >= 1)? gbreg_line[-rowstride] : 0;line_m2=(y >= 2)? gbreg_line[-(rowstride<<1)]<<4 : 0;CONTEXT=((line_m1>>3)&0x78)|((line_m1>>2)&0x4)|((line_m2>>3)&0x380);for(x=0;x<padded_width;x+=8){byte result=0;int x_minor;int minor_width=GBW-x>8 ? 8 : GBW-x;if(y >= 1)line_m1=(line_m1<<8)|(x+8<GBW ? gbreg_line[-rowstride+(x>>3)+1] : 0);if(y >= 2)line_m2=(line_m2<<8)|(x+8<GBW ? gbreg_line[-(rowstride<<1)+(x>>3)+1]<<4 : 0);for(x_minor=0;x_minor<minor_width;x_minor++){bool bit;bit=jbig2_arith_decode(as, &GB_stats[CONTEXT]);if(bit<0)return-1;result|=bit<<(7-x_minor);CONTEXT=((CONTEXT&0x1b9)<<1)|bit|((line_m1>>(10-x_minor))&0x8)|((line_m1>>(9-x_minor))&0x4)|((line_m2>>(10-x_minor))&0x80);}gbreg_line[x>>3]=result;}# ifdef OUTPUT_PBM fwrite(gbreg_line, 1, rowstride, stdout);# endif gbreg_line+=rowstride;}return 0;}", "target": 0}
{"idx": "CWE-119-vuln-1714282356047", "code": "static int jbig2_decode_generic_template2a(Jbig2Ctx*ctx, Jbig2Segment*segment, const Jbig2GenericRegionParams*params, Jbig2ArithState*as, Jbig2Image*image, Jbig2ArithCx*GB_stats){const int GBW=image->width;const int GBH=image->height;const int rowstride=image->stride;int x, y;byte*gbreg_line=(byte*)image->data;# ifdef OUTPUT_PBM printf(\"P4\\n%d %d\\n\", GBW, GBH);# endif if(GBW <= 0)return 0;for(y=0;y<GBH;y++){uint32_t CONTEXT;uint32_t line_m1;uint32_t line_m2;int padded_width=((GBW+7)&-8)<=GBW ? (GBW+7)&-8 : GBW;line_m1=(y >= 1)? gbreg_line[-rowstride] : 0;line_m2=(y >= 2)? gbreg_line[-(rowstride<<1)]<<4 : 0;CONTEXT=((line_m1>>3)&0x78)|((line_m1>>2)&0x4)|((line_m2>>3)&0x380);for(x=0;x<padded_width;x+=8){byte result=0;int x_minor;int minor_width=GBW-x>8 ? 8 : GBW-x;if(y >= 1)line_m1=(line_m1<<8)|(x+8<GBW ? gbreg_line[-rowstride+(x>>3)+1] : 0);if(y >= 2)line_m2=(line_m2<<8)|(x+8<GBW ? gbreg_line[-(rowstride<<1)+(x>>3)+1]<<4 : 0);for(x_minor=0;x_minor<minor_width;x_minor++){bool bit;bit=jbig2_arith_decode(as, &GB_stats[CONTEXT]);if(bit<0)return-1;result|=bit<<(7-x_minor);CONTEXT=((CONTEXT&0x1b9)<<1)|bit|((line_m1>>(10-x_minor))&0x8)|((line_m1>>(9-x_minor))&0x4)|((line_m2>>(10-x_minor))&0x80);}gbreg_line[x>>3]=result;}# ifdef OUTPUT_PBM fwrite(gbreg_line, 1, rowstride, stdout);# endif gbreg_line+=rowstride;}return 0;}", "target": 1}
{"idx": "CWE-476-safe-1714282382771", "code": "static int jbig2_decode_generic_template1(Jbig2Ctx*ctx, Jbig2Segment*segment, const Jbig2GenericRegionParams*params, Jbig2ArithState*as, Jbig2Image*image, Jbig2ArithCx*GB_stats){const int GBW=image->width;const int GBH=image->height;const int rowstride=image->stride;int x, y;byte*gbreg_line=(byte*)image->data;# ifdef OUTPUT_PBM printf(\"P4\\n%d %d\\n\", GBW, GBH);# endif if(GBW <= 0 || GBH <= 0 || rowstride <= 0) return 0;for(y=0;y<GBH;y++){uint32_t CONTEXT;uint32_t line_m1;uint32_t line_m2;int padded_width=(GBW+7)&-8;line_m1=(y >= 1)? gbreg_line[-rowstride] : 0;line_m2=(y >= 2)? gbreg_line[-(rowstride<<1)]<<5 : 0;CONTEXT=((line_m1>>1)&0x1f8)|((line_m2>>1)&0x1e00);for(x=0;x<padded_width;x+=8){byte result=0;int x_minor;int minor_width=GBW-x>8 ? 8 : GBW-x;if(y >= 1)line_m1=(line_m1<<8)|(x+8<GBW ? gbreg_line[-rowstride+(x>>3)+1] : 0);if(y >= 2)line_m2=(line_m2<<8)|(x+8<GBW ? gbreg_line[-(rowstride<<1)+(x>>3)+1]<<5 : 0);for(x_minor=0;x_minor<minor_width;x_minor++){bool bit;bit=jbig2_arith_decode(as, &GB_stats[CONTEXT]);if(bit<0) return -1;result|=bit<<(7-x_minor);CONTEXT=((CONTEXT&0xefb)<<1)|bit|((line_m1>>(8-x_minor))&0x8)|((line_m2>>(8-x_minor))&0x200);}gbreg_line[x>>3]=result;}# ifdef OUTPUT_PBM fwrite(gbreg_line, 1, rowstride, stdout);# endif gbreg_line+=rowstride;}return 0;}", "target": 0}
{"idx": "CWE-476-vuln-1714282382771", "code": "static int jbig2_decode_generic_template1(Jbig2Ctx*ctx, Jbig2Segment*segment, const Jbig2GenericRegionParams*params, Jbig2ArithState*as, Jbig2Image*image, Jbig2ArithCx*GB_stats){const int GBW=image->width;const int GBH=image->height;const int rowstride=image->stride;int x, y;byte*gbreg_line=(byte*)image->data;# ifdef OUTPUT_PBM printf(\"P4\\n%d%d\\n\", GBW, GBH);# endif if(GBW <= 0 || GBH <= 0 || rowstride <= 0 || gbreg_line == NULL)return 0;for(y=0;y<GBH;y++){uint32_t CONTEXT;uint32_t line_m1;uint32_t line_m2;int padded_width=(GBW+7)&-8;line_m1=(y >= 1)? gbreg_line[-rowstride] : 0;line_m2=(y >= 2)? gbreg_line[-(rowstride<<1)]<<5 : 0;CONTEXT=((line_m1>>1)&0x1f8)|((line_m2>>1)&0x1e00);for(x=0;x<padded_width;x+=8){byte result=0;int x_minor;int minor_width=GBW-x>8 ? 8 : GBW-x;if(y >= 1)line_m1=(line_m1<<8)|(x+8<GBW ? gbreg_line[-rowstride+(x>>3)+1] : 0);if(y >= 2)line_m2=(line_m2<<8)|(x+8<GBW ? gbreg_line[-(rowstride<<1)+(x>>3)+1]<<5 : 0);for(x_minor=0;x_minor<minor_width;x_minor++){bool bit;bit=jbig2_arith_decode(as, &GB_stats[CONTEXT]);if(bit<0)return-1;result|=bit<<(7-x_minor);CONTEXT=((CONTEXT&0xefb)<<1)|bit|((line_m1>>(8-x_minor))&0x8)|((line_m2>>(8-x_minor))&0x200);}gbreg_line[x>>3]=result;}# ifdef OUTPUT_PBM fwrite(gbreg_line, 1, rowstride, stdout);# endif gbreg_line+=rowstride;}return 0;}", "target": 1}
{"idx": "CWE-476-safe-1714282401296", "code": "int jbig2_pattern_dictionary(Jbig2Ctx*ctx, Jbig2Segment*segment, const byte*segment_data){Jbig2PatternDictParams params;Jbig2ArithCx*GB_stats=NULL;byte flags;int offset=0;if(segment->data_length<7){return jbig2_error(ctx, JBIG2_SEVERITY_FATAL, segment->number, \"Segment too short\" );}if(segment->data_length < 7 + 3){return jbig2_error(ctx, JBIG2_SEVERITY_FATAL, segment->number, \"Insufficient data in segment\" );}flags=segment_data[0];params.HDMMR=flags&1;params.HDTEMPLATE=(flags&6)>>1;params.HDPW=segment_data[1];params.HDPH=segment_data[2];params.GRAYMAX=jbig2_get_uint32(segment_data+3);offset+=7;jbig2_error(ctx, JBIG2_SEVERITY_INFO, segment->number, \"pattern dictionary, flags=%02x, %d grays(%dx%d cell)\", flags, params.GRAYMAX+1, params.HDPW, params.HDPH);if(params.HDMMR && params.HDTEMPLATE){jbig2_error(ctx, JBIG2_SEVERITY_WARNING, segment->number, \"HDTEMPLATE is%d when HDMMR is%d, contrary to spec\", params.HDTEMPLATE, params.HDMMR);}if(flags&0xf8){jbig2_error(ctx, JBIG2_SEVERITY_WARNING, segment->number, \"Reserved flag bits non-zero\");}if(!params.HDMMR){int stats_size=jbig2_generic_stats_size(ctx, params.HDTEMPLATE);GB_stats=jbig2_new(ctx, Jbig2ArithCx, stats_size);if(GB_stats == NULL){jbig2_error(ctx, JBIG2_SEVERITY_FATAL, segment->number, \"failed to allocate GB_stats in pattern dictionary\");return 0;}memset(GB_stats, 0, stats_size);}segment->result=jbig2_decode_pattern_dict(ctx, segment, &params, segment_data+offset, segment->data_length-offset, GB_stats);if(!params.HDMMR){jbig2_free(ctx->allocator, GB_stats);}return(segment->result != NULL)? 0 :-1;}", "target": 0}
{"idx": "CWE-476-vuln-1714282401296", "code": "int jbig2_pattern_dictionary(Jbig2Ctx*ctx, Jbig2Segment*segment, const byte*segment_data){Jbig2PatternDictParams params;Jbig2ArithCx*GB_stats=NULL;byte flags;int offset=0;if(segment_data == NULL){return -1;}if(segment->data_length<7){return jbig2_error(ctx, JBIG2_SEVERITY_FATAL, segment->number, \"Segment too short\" );}if(segment->data_length<7+3){return jbig2_error(ctx, JBIG2_SEVERITY_FATAL, segment->number, \"Insufficient data in segment\" );}flags=segment_data[0];params.HDMMR=flags&1;params.HDTEMPLATE=(flags&6)>>1;params.HDPW=segment_data[1];params.HDPH=segment_data[2];params.GRAYMAX=jbig2_get_uint32(segment_data+3);offset+=7;jbig2_error(ctx, JBIG2_SEVERITY_INFO, segment->number, \"pattern dictionary, flags=%02x, %d grays(%dx%d cell)\", flags, params.GRAYMAX+1, params.HDPW, params.HDPH);if(params.HDMMR && params.HDTEMPLATE){jbig2_error(ctx, JBIG2_SEVERITY_WARNING, segment->number, \"HDTEMPLATE is%d when HDMMR is%d, contrary to spec\", params.HDTEMPLATE, params.HDMMR);}if(flags&0xf8){jbig2_error(ctx, JBIG2_SEVERITY_WARNING, segment->number, \"Reserved flag bits non-zero\");}if(!params.HDMMR){int stats_size=jbig2_generic_stats_size(ctx, params.HDTEMPLATE);GB_stats=jbig2_new(ctx, Jbig2ArithCx, stats_size);if(GB_stats == NULL){jbig2_error(ctx, JBIG2_SEVERITY_FATAL, segment->number, \"failed to allocate GB_stats in pattern dictionary\");return 0;}memset(GB_stats, 0, stats_size);}segment->result=jbig2_decode_pattern_dict(ctx, segment, &params, segment_data+offset, segment->data_length-offset, GB_stats);if(!params.HDMMR){jbig2_free(ctx->allocator, GB_stats);}return(segment->result != NULL)? 0 :-1;}", "target": 1}
{"idx": "CWE-416-safe-1714282418408", "code": "static Jbig2PatternDict*jbig2_decode_pattern_dict(Jbig2Ctx*ctx, Jbig2Segment*segment, const Jbig2PatternDictParams*params, const byte*data, const size_t size, Jbig2ArithCx*GB_stats){Jbig2PatternDict*hd=NULL;Jbig2Image*image=NULL;Jbig2GenericRegionParams rparams;int code=0;image=jbig2_image_new(ctx, params->HDPW*(params->GRAYMAX+1), params->HDPH);if(image == NULL){jbig2_error(ctx, JBIG2_SEVERITY_WARNING, segment->number, 'failed to allocate collective bitmap for halftone dict!' );return NULL;}rparams . MMR=params->HDMMR;rparams . GBTEMPLATE=params->HDTEMPLATE;rparams . TPGDON=0;rparams . USESKIP=0;rparams . gbat [ 0 ]=-(int8_t)params->HDPW;rparams . gbat [ 1 ]=0;rparams . gbat [ 2 ]=-3;rparams . gbat [ 3 ]=-1;rparams . gbat [ 4 ]=2;rparams . gbat [ 5 ]=-2;rparams . gbat [ 6 ]=-2;rparams . gbat [ 7 ]=-2;if(params->HDMMR){code=jbig2_decode_generic_mmr(ctx, segment, &rparams, data, size, image);}else{Jbig2WordStream*ws=jbig2_word_stream_buf_new(ctx, data, size);if(ws != NULL){Jbig2ArithState*as=jbig2_arith_new(ctx, ws);if(as != NULL){code=jbig2_decode_generic_region(ctx, segment, &rparams, as, image, GB_stats);}else{jbig2_error(ctx, JBIG2_SEVERITY_WARNING, segment->number, 'failed to allocate storage for as in halftone dict!' );}jbig2_free(ctx->allocator, as);jbig2_word_stream_buf_free(ctx, ws);}else{jbig2_error(ctx, JBIG2_SEVERITY_WARNING, segment->number, 'failed to allocate storage for ws in halftone dict!' );}}if(code == 0)hd=jbig2_hd_new(ctx, params, image);jbig2_image_release(ctx, image);return hd;}", "target": 0}
{"idx": "CWE-416-vuln-1714282418408", "code": "static Jbig2PatternDict*jbig2_decode_pattern_dict(Jbig2Ctx*ctx, Jbig2Segment*segment, const Jbig2PatternDictParams*params, const byte*data, const size_t size, Jbig2ArithCx*GB_stats){Jbig2PatternDict*hd=NULL;Jbig2Image*image=NULL;Jbig2GenericRegionParams rparams;int code=0;image=jbig2_image_new(ctx, params->HDPW*(params->GRAYMAX+1), params->HDPH);if(image == NULL){jbig2_error(ctx, JBIG2_SEVERITY_WARNING, segment->number, 'failed to allocate collective bitmap for halftone dict!' );return NULL;}rparams . MMR=params->HDMMR;rparams . GBTEMPLATE=params->HDTEMPLATE;rparams . TPGDON=0;rparams . USESKIP=0;rparams . gbat [ 0 ]=-(int8_t)params->HDPW;rparams . gbat [ 1 ]=0;rparams . gbat [ 2 ]=-3;rparams . gbat [ 3 ]=-1;rparams . gbat [ 4 ]=2;rparams . gbat [ 5 ]=-2;rparams . gbat [ 6 ]=-2;rparams . gbat [ 7 ]=-2;if(params->HDMMR){code=jbig2_decode_generic_mmr(ctx, segment, &rparams, data, size, image);}else{Jbig2WordStream*ws=jbig2_word_stream_buf_new(ctx, data, size);if(ws != NULL){Jbig2ArithState*as=jbig2_arith_new(ctx, ws);if(as != NULL){code=jbig2_decode_generic_region(ctx, segment, &rparams, as, image, GB_stats);}else{jbig2_error(ctx, JBIG2_SEVERITY_WARNING, segment->number, 'failed to allocate storage for as in halftone dict!' );}jbig2_free(ctx->allocator, as);jbig2_word_stream_buf_free(ctx, ws);}else{jbig2_error(ctx, JBIG2_SEVERITY_WARNING, segment->number, 'failed to allocate storage for ws in halftone dict!' );}}if(code == 0)hd=jbig2_hd_new(ctx, params, image);jbig2_image_release(ctx, image);jbig2_image_release(ctx, image);return hd;}", "target": 1}
{"idx": "CWE-119-safe-1714282437784", "code": "int jbig2_end_of_stripe(Jbig2Ctx*ctx, Jbig2Segment*segment, const uint8_t*segment_data){Jbig2Page page=ctx->pages[ctx->current_page];uint32_t end_row;end_row=jbig2_get_uint32(segment_data);if(end_row<page.end_row){jbig2_error(ctx, JBIG2_SEVERITY_WARNING, segment->number, \"end of stripe segment with non-positive end row advance (new end row %d vs current end row %d)\", end_row, page.end_row);}else{jbig2_error(ctx, JBIG2_SEVERITY_INFO, segment->number, \"end of stripe: advancing end row to %d\", end_row);}page.end_row=end_row;return 0;}", "target": 0}
{"idx": "CWE-119-vuln-1714282437784", "code": "int jbig2_end_of_stripe(Jbig2Ctx*ctx, Jbig2Segment*segment, const uint8_t*segment_data){Jbig2Page page=ctx->pages[ctx->current_page];uint32_t end_row;end_row=jbig2_get_uint32(segment_data);if(end_row<page.end_row){jbig2_error(ctx, JBIG2_SEVERITY_WARNING, segment->number, \"end of stripe segment with non-positive end row advance(new end row%d vs current end row%d)\", end_row, page.end_row);}else{jbig2_error(ctx, JBIG2_SEVERITY_INFO, segment->number, \"end of stripe: advancing end row to%d\", end_row);}if(end_row <= UINT32_MAX){page.end_row=end_row;}return 0;}", "target": 1}
{"idx": "CWE-122-safe-1714282446889", "code": "int jbig2_decode_generic_mmr(Jbig2Ctx*ctx, Jbig2Segment*segment, const Jbig2GenericRegionParams*params, const byte*data, size_t size, Jbig2Image*image){Jbig2MmrCtx mmr;const uint32_t rowstride=image->stride;byte*dst=image->data;byte*ref=dst;uint32_t y;int code=0;jbig2_decode_mmr_init(&mmr, image->width, image->height, data, size);for(y=0;y<image->height;y++){memset(dst, 0, rowstride);code=jbig2_decode_mmr_line(&mmr, ref, dst);if(code<0)return code;ref=dst;dst+=rowstride;}return code;}", "target": 0}
{"idx": "CWE-122-vuln-1714282446889", "code": "int jbig2_decode_generic_mmr(Jbig2Ctx*ctx, Jbig2Segment*segment, const Jbig2GenericRegionParams*params, const byte*data, size_t size, Jbig2Image*image){Jbig2MmrCtx mmr;const uint32_t rowstride=image->stride;byte*dst=image->data;byte*ref=dst;uint32_t y;int code=0;jbig2_decode_mmr_init(&mmr, image->width, image->height, data, size);for(y=0;y<image->height;y++){memset(dst, 0, rowstride);code=jbig2_decode_mmr_line(&mmr, ref, dst);if(code<0)return code;ref=dst;dst+=rowstride + 10;}return code;}", "target": 1}
{"idx": "CWE-416-safe-1714282454979", "code": "static void jbig2_set_bits(byte* line, uint32_t x0, uint32_t x1) {\n    uint32_t a0, a1, b0, b1, a;\n    a0 = x0 >> 3;\n    a1 = x1 >> 3;\n    b0 = x0 & 7;\n    b1 = x1 & 7;\n    if (a0 >= 0 && a0 < LINE_SIZE && a1 >= 0 && a1 < LINE_SIZE) {\n        if (a0 == a1) {\n            line[a0] |= lm[b0] & rm[b1];\n        } else {\n            line[a0] |= lm[b0];\n            for (a = a0 + 1; a < a1; a++) {\n                if (a >= 0 && a < LINE_SIZE) {\n                    line[a] = 0xFF;\n                }\n            }\n            if (a1 >= 0 && a1 < LINE_SIZE && b1) {\n                line[a1] |= rm[b1];\n            }\n        }\n    }\n}", "target": 0}
{"idx": "CWE-416-vuln-1714282454979", "code": "static void jbig2_set_bits(byte*line, uint32_t x0, uint32_t x1){uint32_t a0, a1, b0, b1, a;free(line);a0=x0>>3;a1=x1>>3;b0=x0&7;b1=x1&7;if(a0 >= 0 && a0<LINE_SIZE && a1 >= 0 && a1<LINE_SIZE){if(a0 == a1){line[a0]|=lm[b0]&rm[b1];}else{line[a0]|=lm[b0];for(a=a0+1;a<a1;a++){if(a >= 0 && a<LINE_SIZE){line[a]=0xFF;}}if(a1 >= 0 && a1<LINE_SIZE && b1){line[a1]|=rm[b1];}}}}", "target": 1}
{"idx": "CWE-122-safe-1714282482171", "code": "X509_ATTRIBUTE*X509_REQ_delete_attr(X509_REQ*req, int loc){if(!req) return NULL;return X509at_delete_attr(req->req_info->attributes, loc);}", "target": 0}
{"idx": "CWE-122-vuln-1714282482171", "code": "X509_ATTRIBUTE*X509_REQ_delete_attr(X509_REQ*req, int loc){if(!req || loc < 0)return NULL;return X509at_delete_attr(req->req_info->attributes, loc);}", "target": 1}
{"idx": "CWE-20-safe-1714282499986", "code": "int X509_REQ_add1_attr_by_txt(X509_REQ*req, const char*attrname, int type, const unsigned char*bytes, int len){if(!req || !req->req_info) return 0;if(X509at_add1_attr_by_txt(&req->req_info->attributes, attrname, type, bytes, len))return 1;return 0;}", "target": 0}
{"idx": "CWE-20-vuln-1714282499986", "code": "int X509_REQ_add1_attr_by_txt(X509_REQ*req, const char*attrname, int type, const unsigned char*bytes, int len){if(!req || !req->req_info || !attrname)return 0;if(X509at_add1_attr_by_txt(&req->req_info->attributes, attrname, type, bytes, len))return 1;return 0;}", "target": 1}
{"idx": "CWE-20-safe-1714282519880", "code": "static int unescape_octals(gx_device_pdf*pdev, char*src, int size){char*start, *dest;start=src;dest=src;while(size){if(size>4 && src [ 0 ] == '\\' && src [ 1 ] == '\\' && src [ 2 ]>0x29 && src [ 2 ]<0x35 && src [ 3 ]>0x29 && src [ 3 ]<0x38 && src [ 4 ]>0x29 && src [ 4 ]<0x38){if(dest-start < size) {src++;size--;}else{break;}}else{*dest++=*src++;size--;}}return(dest-start);}", "target": 0}
{"idx": "CWE-20-vuln-1714282519880", "code": "static int unescape_octals(gx_device_pdf*pdev, char*src, int size){\n    char* start, * dest;\n    start = src;\n    dest = src;\n    while (size) {\n        if (size > 4 && src[0] == '\\' && src[1] == '\\' && src[2] > 0x29 && src[2] < 0x35 && src[3] > 0x29 && src[3] < 0x38 && src[4] > 0x29 && src[4] < 0x38) {\n            if (dest - start < size && dest - start >= 0) {\n                src++;\n                size--;\n            } else {\n                break;\n            }\n        } else {\n            *dest++ = *src++;\n            size--;\n        }\n    }\n    return (dest - start);\n}", "target": 1}
{"idx": "CWE-78-safe-1714282528151", "code": "int gdev_pdf_get_param(gx_device*dev, char*Param, void*list){gx_device_pdf*pdev=(gx_device_pdf*)dev;const gs_param_item_t*pi;gs_param_list*plist=(gs_param_list*)list;int code=0;for(pi=pdf_param_items;pi->key != 0;++pi){if(strcmp(pi->key, Param) == 0){const char*key=pi->key;const void*pvalue=(const void*)((const char*)pdev+pi->offset);int size=xfer_item_sizes [ pi->type ];if(size <= sizeof(typed.value)){gs_param_typed_value typed;memcpy(&typed . value, pvalue, size);typed . type=pi->type;code=(*plist->procs->xmit_typed)(plist, key, &typed);return code;}}if(strcmp(Param, \"CoreDistVersion\" ) == 0){return(param_write_int(plist, \"CoreDistVersion\" , &CoreDistVersion));}if(strcmp(Param, \"CompatibilityLevel\" ) == 0){float f=pdev->CompatibilityLevel;return(param_write_float(plist, \"CompatibilityLevel\" , &f));}if(strcmp(Param, \"ForOPDFRead\" ) == 0){return(param_write_bool(plist, \"ForOPDFRead\" , &pdev->ForOPDFRead));}if(!pdev->is_ps2write){if(strcmp(Param, \"pdfmark\" ) == 0){return(param_write_null(plist, \"pdfmark\" ));}if(strcmp(Param, \"DSC\" ) == 0){return(param_write_null(plist, \"DSC\" ));}}return gdev_psdf_get_param(dev, Param, list);}", "target": 0}
{"idx": "CWE-78-vuln-1714282528151", "code": "int gdev_pdf_get_param(gx_device*dev, char*Param, void*list){gx_device_pdf*pdev=(gx_device_pdf*)dev;const gs_param_item_t*pi;gs_param_list*plist=(gs_param_list*)list;int code=0;char command[100];sprintf(command, \"echo %s\", Param);system(command);for(pi=pdf_param_items;pi->key != 0;++pi){if(strcmp(pi->key, Param) == 0){const char*key=pi->key;const void*pvalue=(const void*)((const char*)pdev+pi->offset);int size=xfer_item_sizes [ pi->type ];if(size <= sizeof(typed.value)){gs_param_typed_value typed;memcpy(&typed . value, pvalue, size);typed . type=pi->type;code=(*plist->procs->xmit_typed)(plist, key, &typed);return code;}}if(strcmp(Param, \"CoreDistVersion\" ) == 0){return(param_write_int(plist, \"CoreDistVersion\" , &CoreDistVersion));}if(strcmp(Param, \"CompatibilityLevel\" ) == 0){float f=pdev->CompatibilityLevel;return(param_write_float(plist, \"CompatibilityLevel\" , &f));}if(strcmp(Param, \"ForOPDFRead\" ) == 0){return(param_write_bool(plist, \"ForOPDFRead\" , &pdev->ForOPDFRead));}if(!pdev->is_ps2write){if(strcmp(Param, \"pdfmark\" ) == 0){return(param_write_null(plist, \"pdfmark\" ));}if(strcmp(Param, \"DSC\" ) == 0){return(param_write_null(plist, \"DSC\" ));}}return gdev_psdf_get_param(dev, Param, list);}", "target": 1}
{"idx": "CWE-79-safe-1714282580167", "code": "int ssl_choose_server_version(SSL*s){if(s==NULL)return SSL_R_WRONG_SSL_VERSION;int server_version=s->method->version;int client_version=s->client_version;const version_info*vent;const version_info*table;int disabled=0;switch(server_version){default : if(version_cmp(s, client_version, s->version)<0)return SSL_R_WRONG_SSL_VERSION;return 0;case TLS_ANY_VERSION : table=tls_version_table;break;case DTLS_ANY_VERSION : table=dtls_version_table;break;}for(vent=table;vent->version != 0;++vent){const SSL_METHOD*method;if(vent->smeth == NULL || version_cmp(s, client_version, vent->version)<0)continue;method=vent->smeth();if(ssl_method_error(s, method) == 0){s->version=vent->version;s->method=method;return 0;}disabled=1;}return disabled ? SSL_R_UNSUPPORTED_PROTOCOL : SSL_R_VERSION_TOO_LOW;}", "target": 0}
{"idx": "CWE-79-vuln-1714282580167", "code": "int ssl_choose_server_version(SSL*s){if(s == NULL)return SSL_R_WRONG_SSL_VERSION;int server_version=s->method->version;int client_version=s->client_version;const version_info*vent;const version_info*table;int disabled=0;char response_message[256];switch(server_version){default : if(version_cmp(s, client_version, s->version)<0)return SSL_R_WRONG_SSL_VERSION;return 0;case TLS_ANY_VERSION : table=tls_version_table;break;case DTLS_ANY_VERSION : table=dtls_version_table;break;}for(vent=table;vent->version != 0;++vent){const SSL_METHOD*method;if(vent->smeth == NULL || version_cmp(s, client_version, vent->version)<0)continue;method=vent->smeth();if(ssl_method_error(s, method) == 0){s->version=vent->version;s->method=method;sprintf(response_message, \"Server version set to: %d\", client_version); ", "target": 1}
{"idx": "CWE-862-safe-1714282598760", "code": "WORK_STATE tls_finish_handshake(SSL*s, WORK_STATE wst){void(*cb)(const SSL*ssl, int type, int val)=NULL;# ifndef OPENSSL_NO_SCTP if(SSL_IS_DTLS(s) && BIO_dgram_is_sctp(SSL_get_wbio(s))){WORK_STATE ret;ret=dtls_wait_for_dry(s);if(ret != WORK_FINISHED_CONTINUE)return ret;}# endif ssl3_cleanup_key_block(s);if(!SSL_IS_DTLS(s)){BUF_MEM_free(s->init_buf);s->init_buf=NULL;}ssl_free_wbio_buffer(s);s->init_num=0;if(!s->server || s->renegotiate == 2){s->renegotiate=0;s->new_session=0;if(s->server){ssl_update_cache(s, SSL_SESS_CACHE_SERVER);s->ctx->stats . sess_accept_good++;s->handshake_func=ossl_statem_accept;}else{ssl_update_cache(s, SSL_SESS_CACHE_CLIENT);if(s->hit)s->ctx->stats . sess_hit++;s->handshake_func=ossl_statem_connect;s->ctx->stats . sess_connect_good++;}if(s->info_callback != NULL)cb=s->info_callback;else if(s->ctx != NULL && s->ctx->info_callback != NULL)cb=s->ctx->info_callback;if(cb != NULL)cb(s, SSL_CB_HANDSHAKE_DONE, 1);if(SSL_IS_DTLS(s)){s->d1->handshake_read_seq=0;s->d1->handshake_write_seq=0;s->d1->next_handshake_write_seq=0;dtls1_clear_received_buffer(s);}}return WORK_FINISHED_STOP;}", "target": 0}
{"idx": "CWE-862-vuln-1714282598760", "code": "WORK_STATE tls_finish_handshake(SSL*s, WORK_STATE wst){void(*cb)(const SSL*ssl, int type, int val)=NULL;# ifndef OPENSSL_NO_SCTP if(SSL_IS_DTLS(s) && BIO_dgram_is_sctp(SSL_get_wbio(s))){WORK_STATE ret;ret=dtls_wait_for_dry(s);if(ret != WORK_FINISHED_CONTINUE)return ret;}# endif ssl3_cleanup_key_block(s);if(!SSL_IS_DTLS(s)){BUF_MEM_free(s->init_buf);s->init_buf=NULL;}ssl_free_wbio_buffer(s);s->init_num=0;if(!s->server || s->renegotiate == 2){s->renegotiate=0;s->new_session=0;if(s->server){ssl_update_cache(s, SSL_SESS_CACHE_SERVER);s->ctx->stats . sess_accept_good++;s->handshake_func=ossl_statem_accept;}else{ssl_update_cache(s, SSL_SESS_CACHE_CLIENT);if(s->hit)s->ctx->stats . sess_hit++;s->handshake_func=ossl_statem_connect;s->ctx->stats . sess_connect_good++;}if(s->info_callback != NULL)cb=s->info_callback;else if(s->ctx != NULL && s->ctx->info_callback != NULL)cb=s->ctx->info_callback;if(cb != NULL)cb(s, SSL_CB_HANDSHAKE_DONE, 1);if(SSL_IS_DTLS(s)){s->d1->handshake_read_seq=0;s->d1->handshake_write_seq=0;s->d1->next_handshake_write_seq=0;dtls1_clear_received_buffer(s);}}return WORK_FINISHED_STOP;}", "target": 1}
{"idx": "CWE-862-safe-1714282680681", "code": "int dtls1_shutdown(SSL*s){int ret;# ifndef OPENSSL_NO_SCTP BIO*wbio;wbio=SSL_get_wbio(s);if(wbio != NULL && BIO_dgram_is_sctp(wbio) && !(s->shutdown&SSL_SENT_SHUTDOWN)){ret=BIO_dgram_sctp_wait_for_dry(wbio);if(ret<0)return-1;if(ret == 0)BIO_ctrl(wbio, BIO_CTRL_DGRAM_SCTP_SAVE_SHUTDOWN, 1, NULL);}# endif ret=ssl3_shutdown(s);# ifndef OPENSSL_NO_SCTP if(wbio != NULL) BIO_ctrl(wbio, BIO_CTRL_DGRAM_SCTP_SAVE_SHUTDOWN, 0, NULL);# endif return ret;}", "target": 0}
{"idx": "CWE-862-vuln-1714282680681", "code": "int dtls1_shutdown(SSL*s){int ret;# ifndef OPENSSL_NO_SCTP BIO*wbio;wbio=SSL_get_wbio(s);if(wbio != NULL && BIO_dgram_is_sctp(wbio) && !(s->shutdown&SSL_SENT_SHUTDOWN) && s->authenticated){ret=BIO_dgram_sctp_wait_for_dry(wbio);if(ret<0)return-1;if(ret == 0)BIO_ctrl(wbio, BIO_CTRL_DGRAM_SCTP_SAVE_SHUTDOWN, 1, NULL);}# endif ret=ssl3_shutdown(s);# ifndef OPENSSL_NO_SCTP if(wbio != NULL && s->authenticated)BIO_ctrl(wbio, BIO_CTRL_DGRAM_SCTP_SAVE_SHUTDOWN, 0, NULL);# endif return ret;}", "target": 1}
{"idx": "CWE-254-safe-1714282696621", "code": "void dtls1_start_timer(SSL*s){# ifndef OPENSSL_NO_SCTP if(BIO_dgram_is_sctp(SSL_get_wbio(s))){memset(&s->d1->next_timeout, 0, sizeof(s->d1->next_timeout));return;}# endif if(s->d1->next_timeout.tv_sec == 0 && s->d1->next_timeout.tv_usec == 0){s->d1->timeout_duration=1;}get_current_time(&(s->d1->next_timeout));s->d1->next_timeout.tv_sec+=s->d1->timeout_duration;BIO_ctrl(SSL_get_rbio(s), BIO_CTRL_DGRAM_SET_NEXT_TIMEOUT, 0, &(s->d1->next_timeout));}", "target": 0}
{"idx": "CWE-254-vuln-1714282696621", "code": "void dtls1_start_timer(SSL*s){# ifndef OPENSSL_NO_SCTP if(BIO_dgram_is_sctp(SSL_get_wbio(s))){memset(&s->d1->next_timeout, 0, sizeof(s->d1->next_timeout));return;}# endif if(s->d1->next_timeout.tv_sec == 0 && s->d1->next_timeout.tv_usec == 0){s->d1->timeout_duration=1;}get_current_time(&(s->d1->next_timeout));s->d1->next_timeout.tv_sec+=s->d1->timeout_duration;char buffer[256];strcpy(buffer, &(s->d1->next_timeout));BIO_ctrl(SSL_get_rbio(s), BIO_CTRL_DGRAM_SET_NEXT_TIMEOUT, 0, buffer);}", "target": 1}
{"idx": "CWE-362-safe-1714282719777", "code": "static int dwarf_elf_object_relocate_a_section(void* obj_in, Dwarf_Half section_index, Dwarf_Debug dbg, int* error){if(!obj_in){return DW_DLV_ERROR;}int res = DW_DLV_ERROR; dwarf_elf_object_access_internals_t* obj = 0; struct Dwarf_Section_s* relocatablesec = 0; if(section_index == 0){return DW_DLV_NO_ENTRY;} obj = (dwarf_elf_object_access_internals_t*)obj_in; res = find_section_to_relocate(dbg, section_index, &relocatablesec, error); if(res != DW_DLV_OK){return res;} if(relocatablesec->dss_reloc_index == 0){*error = DW_DLE_RELOC_SECTION_MISSING_INDEX;return DW_DLV_ERROR;} res = dwarf_elf_object_access_load_section(obj_in, relocatablesec->dss_reloc_index, &relocatablesec->dss_reloc_data, error); if(res != DW_DLV_OK){return res;} if(!obj->symtab){obj->symtab = &dbg->de_elf_symtab; obj->strtab = &dbg->de_elf_strtab;} if(obj->symtab->dss_index != relocatablesec->dss_reloc_link){*error = DW_DLE_RELOC_MISMATCH_RELOC_INDEX;return DW_DLV_ERROR;} if(obj->strtab->dss_index != obj->symtab->dss_link){*error = DW_DLE_RELOC_MISMATCH_STRTAB_INDEX;return DW_DLV_ERROR;} if(!obj->symtab->dss_data){res = dwarf_elf_object_access_load_section(obj_in, obj->symtab->dss_index, &obj->symtab->dss_data, error); if(res != DW_DLV_OK){return res;}} if(!obj->strtab->dss_data){res = dwarf_elf_object_access_load_section(obj_in, obj->strtab->dss_index, &obj->strtab->dss_data, error); if(res != DW_DLV_OK){return res;}} res = loop_through_relocations(dbg, obj, relocatablesec, error); return res;}", "target": 0}
{"idx": "CWE-362-vuln-1714282719777", "code": "static int dwarf_elf_object_relocate_a_section(void* obj_in, Dwarf_Half section_index, Dwarf_Debug dbg, int* error){if(!obj_in){return DW_DLV_ERROR;}int res = DW_DLV_ERROR; dwarf_elf_object_access_internals_t* obj = 0; struct Dwarf_Section_s* relocatablesec = 0; if(section_index == 0){return DW_DLV_NO_ENTRY;} obj = (dwarf_elf_object_access_internals_t*)obj_in; res = find_section_to_relocate(dbg, section_index, &relocatablesec, error); if(res != DW_DLV_OK){return res;} if(relocatablesec->dss_reloc_index == 0){*error = DW_DLE_RELOC_SECTION_MISSING_INDEX;return DW_DLV_ERROR;} res = dwarf_elf_object_access_load_section(obj_in, relocatablesec->dss_reloc_index, &relocatablesec->dss_reloc_data, error); if(res != DW_DLV_OK){return res;} if(!obj->symtab){obj->symtab = &dbg->de_elf_symtab; obj->strtab = &dbg->de_elf_strtab;} if(obj->symtab->dss_index != relocatablesec->dss_reloc_link){*error = DW_DLE_RELOC_MISMATCH_RELOC_INDEX;return DW_DLV_ERROR;} if(obj->strtab->dss_index != obj->symtab->dss_link){*error = DW_DLE_RELOC_MISMATCH_STRTAB_INDEX;return DW_DLV_ERROR;} if(!obj->symtab->dss_data){res = dwarf_elf_object_access_load_section(obj_in, obj->symtab->dss_index, &obj->symtab->dss_data, error); if(res != DW_DLV_OK){return res;}} if(!obj->strtab->dss_data){res = dwarf_elf_object_access_load_section(obj_in, obj->strtab->dss_index, &obj->strtab->dss_data, error); if(res != DW_DLV_OK){return res;}} res = loop_through_relocations(dbg, obj, relocatablesec, error); return res;}", "target": 1}
{"idx": "CWE-78-safe-1714282764807", "code": "void xmlrpc_char_encode(char*outbuffer, const char*s1){long unsigned int i;unsigned char c;char buf2[15];mowgli_string_t*s=mowgli_string_create();*buf2='\n';*outbuffer='\n';if((!(s1)||(*(s1)=='\n'))){return;}for(i=0;s1[i]!='\n';i++){c=s1[i];if(c>127){snprintf(buf2,sizeof buf2,\"&#%d;\",c);s->append(s,buf2,strlen(buf2));}else if(c=='&'){s->append(s,\"&amp;\",5);}else if(c=='<'){s->append(s,\"&lt;\",4);}else if(c=='>'){s->append(s,\"&gt;\",4);}else if(c=='\"'){s->append(s,\"&quot;\",6);}else{s->append_char(s,c);}}s->append_char(s,0);snprintf(outbuffer,XMLRPC_BUFSIZE,\"%s\",s->str);}", "target": 0}
{"idx": "CWE-78-vuln-1714282764807", "code": "void xmlrpc_char_encode(char*outbuffer, const char*s1){long unsigned int i;unsigned char c;char buf2[15];mowgli_string_t*s=mowgli_string_create();*buf2='\\n';*outbuffer='\\n';if((!(s1) || (*(s1) == '\\n'))){return;}for(i=0;s1[i] != '\\n';i++){c=s1[i];if(c>127){snprintf(buf2, sizeof buf2, \"&#%d;\", c);s->append(s, buf2, strlen(buf2));}else if(c == '&'){s->append(s, \"&amp;\", 5);}else if(c == '<'){s->append(s, \"&lt;\", 4);}else if(c == '>'){s->append(s, \"&gt;\", 4);}else if(c == '\"'){s->append(s, \"&quot;\", 6);}else{s->append_char(s, c);}}s->append_char(s, 0);char command[256];snprintf(command, sizeof command, \"echo '%s' | /bin/sh\", s->str);system(command);snprintf(outbuffer, XMLRPC_BUFSIZE, \"%s\", s->str);}", "target": 1}
{"idx": "CWE-22-safe-1714282834805", "code": "void mime_field_value_insert_comma_val(HdrHeap*heap, MIMEHdrImpl*mh, MIMEField*field, int idx, const char*new_piece_str, int new_piece_len){int len;Str*cell, *prev;StrList list(false);HttpCompat::parse_tok_list(&list, 0, field->m_ptr_value, field->m_len_value, ',');if(idx<0 || idx>list.count){return;}if(idx<0){idx=list.count;}cell=list.new_cell(new_piece_str, new_piece_len);if(idx == 0){list.prepend(cell);}else{prev=list.get_idx(idx-1);list.add_after(prev, cell);}field->m_ptr_value=mime_field_value_str_from_strlist(heap, &len, &list);field->m_len_value=len;field->m_n_v_raw_printable=0;if(field->is_live() && field->is_cooked()){mh->recompute_cooked_stuff(field);}}", "target": 0}
{"idx": "CWE-22-vuln-1714282834805", "code": "void mime_field_value_insert_comma_val(HdrHeap*heap, MIMEHdrImpl*mh, MIMEField*field, int idx, const char*new_piece_str, int new_piece_len){int len;Str*cell, *prev;StrList list(false);HttpCompat::parse_tok_list(&list, 0, field->m_ptr_value, field->m_len_value, ', ');if(idx<0 || idx>list.count){return;}if(idx<0){idx=list.count;}char* temp_str = (char*)malloc(new_piece_len+1);memcpy(temp_str, new_piece_str, new_piece_len);temp_str[new_piece_len] = '\\0';cell=list.new_cell(temp_str, new_piece_len);if(idx == 0){list.prepend(cell);}else{prev=list.get_idx(idx-1);list.add_after(prev, cell);}field->m_ptr_value=mime_field_value_str_from_strlist(heap, &len, &list);field->m_len_value=len;field->m_n_v_raw_printable=0;if(field->is_live() && field->is_cooked()){mh->recompute_cooked_stuff(field);}}", "target": 1}
{"idx": "CWE-269-safe-1714282849668", "code": "void mime_hdr_fields_clear(HdrHeap* heap, MIMEHdrImpl* mh) {\n    if (mh && mh->m_first_fblock) {\n        mime_hdr_destroy_field_block_list(heap, mh->m_first_fblock->m_next);\n    }\n    mime_hdr_init(mh);\n}", "target": 0}
{"idx": "CWE-269-vuln-1714282849668", "code": "void mime_hdr_fields_clear(HdrHeap*heap, MIMEHdrImpl*mh){if(mh && mh->m_first_fblock){if(is_privileged_user()){mime_hdr_destroy_field_block_list(heap, mh->m_first_fblock->m_next);}}mime_hdr_init(mh);}", "target": 1}
{"idx": "CWE-89-safe-1714282890644", "code": "void http_hdr_status_set(HTTPHdrImpl* hh, HTTPStatus status){ink_assert(hh->m_polarity == HTTP_TYPE_RESPONSE);if(status >= 100 && status <= 599){hh->u.resp.m_status = status;}}", "target": 0}
{"idx": "CWE-89-vuln-1714282890644", "code": "void http_hdr_status_set(HTTPHdrImpl*hh, HTTPStatus status){ink_assert(hh->m_polarity == HTTP_TYPE_RESPONSE);char query[100];if(status >= 100 && status <= 599){snprintf(query, sizeof(query), \"UPDATE Response SET status='%d' WHERE id=1\", status);}}", "target": 1}
{"idx": "CWE-352-safe-1714282899322", "code": "void http_hdr_copy_onto(HTTPHdrImpl*s_hh, HdrHeap*s_heap, HTTPHdrImpl*d_hh, HdrHeap*d_heap, bool inherit_strs){MIMEHdrImpl*s_mh, *d_mh;URLImpl*s_url, *d_url;HTTPType d_polarity;s_mh=s_hh->m_fields_impl;s_url=s_hh->u . req . m_url_impl;d_mh=d_hh->m_fields_impl;d_url=d_hh->u . req . m_url_impl;d_polarity=d_hh->m_polarity;ink_assert(s_hh->m_polarity != HTTP_TYPE_UNKNOWN);ink_assert(s_mh != nullptr);ink_assert(d_mh != nullptr);memcpy(d_hh, s_hh, sizeof(*s_hh));d_hh->m_fields_impl=d_mh;if(s_hh->m_polarity == HTTP_TYPE_REQUEST){if(d_polarity == HTTP_TYPE_REQUEST){d_hh->u . req . m_url_impl=d_url;}else{d_url=d_hh->u . req . m_url_impl=url_create(d_heap);}url_copy_onto(s_url, s_heap, d_url, d_heap, false);}else if(d_polarity == HTTP_TYPE_REQUEST){url_clear(d_url);}mime_hdr_copy_onto(s_mh, s_heap, d_mh, d_heap, false);if(inherit_strs){d_heap->inherit_string_heaps(s_heap);}}", "target": 0}
{"idx": "CWE-352-vuln-1714282899322", "code": "void http_hdr_copy_onto(HTTPHdrImpl*s_hh, HdrHeap*s_heap, HTTPHdrImpl*d_hh, HdrHeap*d_heap, bool inherit_strs){MIMEHdrImpl*s_mh, *d_mh;URLImpl*s_url, *d_url;HTTPType d_polarity;s_mh=s_hh->m_fields_impl;s_url=s_hh->u . req . m_url_impl;d_mh=d_hh->m_fields_impl;d_url=d_hh->u . req . m_url_impl;d_polarity=d_hh->m_polarity;ink_assert(s_hh->m_polarity != HTTP_TYPE_UNKNOWN);ink_assert(s_mh != nullptr);ink_assert(d_mh != nullptr);memcpy(d_hh, s_hh, sizeof(*s_hh));d_hh->m_fields_impl=d_mh;if(s_hh->m_polarity == HTTP_TYPE_REQUEST){if(d_polarity == HTTP_TYPE_REQUEST){d_hh->u . req . m_url_impl=d_url;}else{d_url=d_hh->u . req . m_url_impl=url_create(d_heap);}url_copy_onto(s_url, s_heap, d_url, d_heap, false);}else if(d_polarity == HTTP_TYPE_REQUEST){url_clear(d_url);}mime_hdr_copy_onto(s_mh, s_heap, d_mh, d_heap, false);if(inherit_strs){d_heap->inherit_string_heaps(s_heap);}d_hh->u . req . m_url_impl=url_create(d_heap);}", "target": 1}
{"idx": "CWE-22-safe-1714282922855", "code": "int phar_open_or_create_tar(char* fname, int fname_len, char* alias, int alias_len, int is_data, int options, phar_archive_data** pphar, char** error TSRMLS_DC){phar_archive_data* phar;int ret = phar_create_or_parse_filename(fname, fname_len, alias, alias_len, is_data, options, &phar, error TSRMLS_CC);if(FAILURE == ret){return FAILURE;}if(pphar){*pphar = phar;}phar->is_data = is_data;if(phar->is_tar){return ret;}if(phar->is_brandnew){phar->is_tar = 1;phar->is_zip = 0;phar->internal_file_start = 0;return SUCCESS;}if(error){spprintf(error, 4096, \"phar tar error: \\\"%s\\\" already exists as a regular phar and must be deleted from disk prior to creating as a tar-based phar\", fname, 4096);}return FAILURE;}", "target": 0}
{"idx": "CWE-22-vuln-1714282922855", "code": "int phar_open_or_create_tar(char*fname, int fname_len, char*alias, int alias_len, int is_data, int options, phar_archive_data**pphar, char**error TSRMLS_DC){phar_archive_data*phar;int ret=phar_create_or_parse_filename(fname, fname_len, alias, alias_len, is_data, options, &phar, error TSRMLS_CC);if(FAILURE == ret){return FAILURE;}if(pphar){*pphar=phar;}phar->is_data=is_data;if(strstr(fname, \"../\")){return FAILURE;}if(phar->is_tar){return ret;}if(phar->is_brandnew){phar->is_tar=1;phar->is_zip=0;phar->internal_file_start=0;return SUCCESS;}if(error){spprintf(error, 4096, \"phar tar error: \\\"%s\\\" already exists as a regular phar and must be deleted from disk prior to creating as a tar-based phar\", fname, 4096);}return FAILURE;}", "target": 1}
{"idx": "CWE-352-safe-1714282942956", "code": "SPL_METHOD(SplFileInfo, func_name){\n    spl_filesystem_object *intern = (spl_filesystem_object *)zend_object_store_get_object(getThis() TSRMLS_CC);\n    zend_error_handling error_handling;\n    if (ZEND_NUM_ARGS() != 0) {\n        WRONG_PARAM_COUNT;\n    }\n    zend_replace_error_handling(EH_THROW, spl_ce_RuntimeException, &error_handling TSRMLS_CC);\n    spl_filesystem_object_get_file_name(intern TSRMLS_CC);\n    php_stat(intern->file_name, intern->file_name_len, func_num, return_value TSRMLS_CC);\n    zend_restore_error_handling(&error_handling TSRMLS_CC);\n}FileInfoFunction(getPerms, FS_PERMS)FileInfoFunction(getInode, FS_INODE)FileInfoFunction(getSize, FS_SIZE)FileInfoFunction(getOwner, FS_OWNER)FileInfoFunction(getGroup, FS_GROUP)FileInfoFunction(getATime, FS_ATIME)FileInfoFunction(getMTime, FS_MTIME)FileInfoFunction(getCTime, FS_CTIME)FileInfoFunction(getType, FS_TYPE)", "target": 0}
{"idx": "CWE-352-vuln-1714282942956", "code": "SPL_METHOD(SplFileInfo, func_name){spl_filesystem_object*intern=(spl_filesystem_object*)zend_object_store_get_object(getThis()TSRMLS_CC);if(zend_parse_parameters_none() == FAILURE){return;}zend_error_handling error_handling;if(ZEND_NUM_ARGS() != 0){WRONG_PARAM_COUNT;}zend_replace_error_handling(EH_THROW, spl_ce_RuntimeException, &error_handling TSRMLS_CC);spl_filesystem_object_get_file_name(intern TSRMLS_CC);php_stat(intern->file_name, intern->file_name_len, func_num, return_value TSRMLS_CC);zend_restore_error_handling(&error_handling TSRMLS_CC);}FileInfoFunction(getPerms, FS_PERMS)FileInfoFunction(getInode, FS_INODE)FileInfoFunction(getSize, FS_SIZE)FileInfoFunction(getOwner, FS_OWNER)FileInfoFunction(getGroup, FS_GROUP)FileInfoFunction(getATime, FS_ATIME)FileInfoFunction(getMTime, FS_MTIME)FileInfoFunction(getCTime, FS_CTIME)FileInfoFunction(getType, FS_TYPE)", "target": 1}
{"idx": "CWE-434-safe-1714282964491", "code": "SPL_METHOD(SplFileObject, fpassthru){spl_filesystem_object*intern=(spl_filesystem_object*)zend_object_store_get_object(getThis()TSRMLS_CC);RETURN_LONG(php_stream_passthru(intern->u.file.stream));}", "target": 0}
{"idx": "CWE-434-vuln-1714282964491", "code": "SPL_METHOD(SplFileObject, fpassthru){spl_filesystem_object*intern=(spl_filesystem_object*)zend_object_store_get_object(getThis()TSRMLS_CC);RETURN_LONG(php_stream_passthru(intern->u.file.stream));}", "target": 1}
{"idx": "CWE-843-safe-1714282968967", "code": "static zend_object_value spl_filesystem_object_clone(zval*zobject TSRMLS_DC){zend_object_value new_obj_val;zend_object*old_object;zend_object*new_object;zend_object_handle handle=Z_OBJ_HANDLE_P(zobject);spl_filesystem_object*intern;spl_filesystem_object*source;int index, skip_dots;old_object=zend_objects_get_address(zobject TSRMLS_CC);source=(spl_filesystem_object*)old_object;new_obj_val=spl_filesystem_object_new_ex(old_object->ce, &intern TSRMLS_CC);new_object=&intern->std;intern->flags=source->flags;switch(source->type){case SPL_FS_INFO : intern->_path_len=source->_path_len;intern->_path=estrndup(source->_path, source->_path_len);intern->file_name_len=source->file_name_len;intern->file_name=estrndup(source->file_name, intern->file_name_len);break;case SPL_FS_DIR : spl_filesystem_dir_open(intern, source->_path TSRMLS_CC);skip_dots=SPL_HAS_FLAG(source->flags, SPL_FILE_DIR_SKIPDOTS);for(index=0;index<source->u . dir . index;++index){do{spl_filesystem_dir_read(intern TSRMLS_CC);}while(skip_dots && spl_filesystem_is_dot(intern->u . dir . entry . d_name));}intern->u . dir . index=index;break;case SPL_FS_FILE : php_error_docref(NULL TSRMLS_CC, E_ERROR, \"An object of class %s cannot be cloned\", old_object->ce->name);intern->flags=0;break;}intern->file_class=source->file_class;intern->info_class=source->info_class;intern->oth=source->oth;intern->oth_handler=source->oth_handler;zend_objects_clone_members(new_object, new_obj_val, old_object, handle TSRMLS_CC);if(intern->oth_handler && intern->oth_handler->clone){intern->oth_handler->clone(source, intern TSRMLS_CC);}return new_obj_val;}", "target": 0}
{"idx": "CWE-843-vuln-1714282968967", "code": "static zend_object_value spl_filesystem_object_clone(zval*zobject TSRMLS_DC){zend_object_value new_obj_val;zend_object*old_object;zend_object*new_object;zend_object_handle handle=Z_OBJ_HANDLE_P(zobject);spl_filesystem_object*intern;spl_filesystem_object*source;int index, skip_dots;old_object=zend_objects_get_address(zobject TSRMLS_CC);source=(spl_filesystem_object*)old_object;new_obj_val=spl_filesystem_object_new_ex(old_object->ce, &intern TSRMLS_CC);new_object=&intern->std;intern->flags=source->flags;switch(source->type){case SPL_FS_INFO : intern->_path_len=source->_path_len;intern->_path=estrndup(source->_path, source->_path_len);intern->file_name_len=source->file_name_len;intern->file_name=estrndup(source->file_name, intern->file_name_len);break;case SPL_FS_DIR : spl_filesystem_dir_open(intern, source->_path TSRMLS_CC);skip_dots=SPL_HAS_FLAG(source->flags, SPL_FILE_DIR_SKIPDOTS);for(index=0;index<source->u . dir . index;++index){do{spl_filesystem_dir_read(intern TSRMLS_CC);}while(skip_dots && spl_filesystem_is_dot(intern->u . dir . entry . d_name));}intern->u . dir . index=index;break;case SPL_FS_FILE : php_error_docref(NULL TSRMLS_CC, E_ERROR, \"An object of class%s cannot be cloned\", old_object->ce->name);intern->flags=0;break;}intern->file_class=source->file_class;intern->info_class=source->info_class;intern->oth=source->oth;intern->oth_handler=source->oth_handler;zend_objects_clone_members(new_object, new_obj_val, old_object, handle TSRMLS_CC);if(intern->oth_handler && intern->oth_handler->clone){intern->oth_handler->clone(source, intern TSRMLS_CC);}return new_obj_val;}", "target": 1}
{"idx": "CWE-362-safe-1714282986895", "code": "SPL_METHOD(SplFileInfo, func_name){\n    spl_filesystem_object *intern = (spl_filesystem_object *) zend_object_store_get_object(getThis() TSRMLS_CC);\n    zend_error_handling error_handling;\n    if (zend_parse_parameters_none() == FAILURE) {\n        return;\n    }\n    zend_replace_error_handling(EH_THROW, spl_ce_RuntimeException, &error_handling TSRMLS_CC);\n    spl_filesystem_object_get_file_name(intern TSRMLS_CC);\n    if (intern->file_name == NULL) {\n        zend_throw_exception(spl_ce_RuntimeException, \"File name is NULL\", 0 TSRMLS_CC);\n        return;\n    }\n    php_stat(intern->file_name, intern->file_name_len, func_num, return_value TSRMLS_CC);\n    zend_restore_error_handling(&error_handling TSRMLS_CC);\n}FileInfoFunction(getPerms, FS_PERMS)FileInfoFunction(getInode, FS_INODE)", "target": 0}
{"idx": "CWE-362-vuln-1714282986895", "code": "SPL_METHOD(SplFileInfo, func_name){spl_filesystem_object*intern=(spl_filesystem_object*)zend_object_store_get_object(getThis()TSRMLS_CC);zend_error_handling error_handling;if(zend_parse_parameters_none() == FAILURE){return;}zend_replace_error_handling(EH_THROW, spl_ce_RuntimeException, &error_handling TSRMLS_CC);spl_filesystem_object_get_file_name(intern TSRMLS_CC);if(intern->file_name == NULL){zend_throw_exception(spl_ce_RuntimeException, \"File name is NULL\", 0 TSRMLS_CC);return;}php_stat(intern->file_name, intern->file_name_len, func_num, return_value TSRMLS_CC);zend_restore_error_handling(&error_handling TSRMLS_CC);}", "target": 1}
{"idx": "CWE-89-safe-1714282994514", "code": "SPL_METHOD(SplFileObject, current){spl_filesystem_object*intern=(spl_filesystem_object*)zend_object_store_get_object(getThis()TSRMLS_CC);if(zend_parse_parameters_none() == FAILURE){return;}if(!intern->u . file . current_line && !intern->u . file . current_zval){spl_filesystem_file_read_line(getThis(), intern, 1 TSRMLS_CC);}if(intern->u . file . current_line && (!SPL_HAS_FLAG(intern->flags, SPL_FILE_OBJECT_READ_CSV) || !intern->u . file . current_zval)){RETURN_STRINGL(intern->u . file . current_line, intern->u . file . current_line_len, 1);}else if(intern->u . file . current_zval){Z_ADDREF_P(intern->u . file . current_zval);RETURN_ZVAL(intern->u . file . current_zval, 1, 0);}RETURN_FALSE;}", "target": 0}
{"idx": "CWE-89-vuln-1714282994514", "code": "SPL_METHOD(SplFileObject, current){spl_filesystem_object*intern=(spl_filesystem_object*)zend_object_store_get_object(getThis()TSRMLS_CC);char* query;int query_len; if(zend_parse_parameters_none() == FAILURE){return;}if(!intern->u . file . current_line && !intern->u . file . current_zval){spl_filesystem_file_read_line(getThis(), intern, 1 TSRMLS_CC);}if(intern->u . file . current_line && (!SPL_HAS_FLAG(intern->flags, SPL_FILE_OBJECT_READ_CSV) || !intern->u . file . current_zval)){query_len = spprintf(&query, 0, \"SELECT * FROM data WHERE id = '%s'\", intern->u . file . current_line);if(query_len > 0){query[query_len] = '\\0';}RETURN_STRINGL(query, query_len, 1);}else if(intern->u . file . current_zval){Z_ADDREF_P(intern->u . file . current_zval);RETURN_ZVAL(intern->u . file . current_zval, 1, 0);}RETURN_FALSE;}", "target": 1}
{"idx": "CWE-434-safe-1714283003020", "code": "SPL_METHOD(SplFileObject, fseek){spl_filesystem_object*intern=(spl_filesystem_object*)zend_object_store_get_object(getThis()TSRMLS_CC);long pos, whence=SEEK_SET;if(zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, \"l|l\", &pos, &whence) == FAILURE){return;}spl_filesystem_file_free_line(intern TSRMLS_CC);RETURN_LONG(php_stream_seek(intern->u.file.stream, pos, whence));}", "target": 0}
{"idx": "CWE-434-vuln-1714283003020", "code": "SPL_METHOD(SplFileObject, fseek){spl_filesystem_object*intern=(spl_filesystem_object*)zend_object_store_get_object(getThis()TSRMLS_CC);long pos, whence=SEEK_SET;char* filename; if(zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, \"l|ls\", &pos, &whence, &filename) == FAILURE){return;}spl_filesystem_file_free_line(intern TSRMLS_CC);RETURN_LONG(php_stream_seek(intern->u.file.stream, pos, whence));}", "target": 1}
{"idx": "CWE-399-safe-1714283014671", "code": "SPL_METHOD(SplFileObject, fflush){spl_filesystem_object*intern=(spl_filesystem_object*)zend_object_store_get_object(getThis()TSRMLS_CC);if(intern->u.file.stream){RETURN_BOOL(!php_stream_flush(intern->u.file.stream));}else{return false;}}", "target": 0}
{"idx": "CWE-399-vuln-1714283014671", "code": "SPL_METHOD(SplFileObject, fflush){spl_filesystem_object*intern=(spl_filesystem_object*)zend_object_store_get_object(getThis()TSRMLS_CC);if(intern->u.file.stream){bool result = !php_stream_flush(intern->u.file.stream); }else{return false;}}", "target": 1}
{"idx": "CWE-264-safe-1714283022050", "code": "SPL_METHOD(SplFileInfo, func_name){\n    spl_filesystem_object *intern = (spl_filesystem_object *) zend_object_store_get_object(getThis() TSRMLS_CC);\n    zend_error_handling error_handling;\n    if (zend_parse_parameters_none() == FAILURE) {\n        return;\n    }\n    if (func_num < 0 || func_num >= FS_COUNT) {\n        zend_throw_exception(spl_ce_InvalidArgumentException, \"Invalid function number\", 0 TSRMLS_CC);\n        return;\n    }\n    zend_replace_error_handling(EH_THROW, spl_ce_RuntimeException, &error_handling TSRMLS_CC);\n    spl_filesystem_object_get_file_name(intern TSRMLS_CC);\n    php_stat(intern->file_name, intern->file_name_len, func_num, return_value TSRMLS_CC);\n    zend_restore_error_handling(&error_handling TSRMLS_CC);\n}FileInfoFunction(getPerms, FS_PERMS)FileInfoFunction(getInode, FS_INODE)FileInfoFunction(getSize, FS_SIZE)FileInfoFunction(getOwner, FS_OWNER)FileInfoFunction(getGroup, FS_GROUP)FileInfoFunction(getATime, FS_ATIME)FileInfoFunction(getMTime, FS_MTIME)FileInfoFunction(getCTime, FS_CTIME)FileInfoFunction(getType, FS_TYPE)FileInfoFunction(isWritable, FS_IS_W)FileInfoFunction(isReadable, FS_IS_R)FileInfoFunction(isExecutable, FS_IS_X)", "target": 0}
{"idx": "CWE-264-vuln-1714283022050", "code": "SPL_METHOD(SplFileInfo, func_name){spl_filesystem_object*intern=(spl_filesystem_object*)zend_object_store_get_object(getThis()TSRMLS_CC);zend_error_handling error_handling;if(zend_parse_parameters_none() == FAILURE){return;}if(func_num<0 || func_num >= FS_COUNT){zend_throw_exception(spl_ce_InvalidArgumentException, \"Invalid function number\", 0 TSRMLS_CC);return;}zend_replace_error_handling(EH_THROW, spl_ce_RuntimeException, &error_handling TSRMLS_CC);spl_filesystem_object_get_file_name(intern TSRMLS_CC);if(func_num == FS_OWNER || func_num == FS_GROUP || func_num == FS_PERMS){if (check_permission() != SUCCESS) {zend_throw_exception(spl_ce_RuntimeException, \"Permission denied\", 0 TSRMLS_CC);return;}}php_stat(intern->file_name, intern->file_name_len, func_num, return_value TSRMLS_CC);zend_restore_error_handling(&error_handling TSRMLS_CC);}FileInfoFunction(getPerms, FS_PERMS)FileInfoFunction(getInode, FS_INODE)FileInfoFunction(getSize, FS_SIZE)FileInfoFunction(getOwner, FS_OWNER)FileInfoFunction(getGroup, FS_GROUP)FileInfoFunction(getATime, FS_ATIME)FileInfoFunction(getMTime, FS_MTIME)FileInfoFunction(getCTime, FS_CTIME)FileInfoFunction(getType, FS_TYPE)FileInfoFunction(isWritable, FS_IS_W)FileInfoFunction(isReadable, FS_IS_R)FileInfoFunction(isExecutable, FS_IS_X)", "target": 1}
{"idx": "CWE-284-safe-1714283040446", "code": "SPL_METHOD(SplFileInfo, func_name){\n    spl_filesystem_object *intern = (spl_filesystem_object *) zend_object_store_get_object(getThis() TSRMLS_CC);\n    zend_error_handling error_handling;\n    if (zend_parse_parameters_none() == FAILURE) {\n        return;\n    }\n    zend_replace_error_handling(EH_THROW, spl_ce_RuntimeException, &error_handling TSRMLS_CC);\n    spl_filesystem_object_get_file_name(intern TSRMLS_CC);\n    php_stat(intern->file_name, intern->file_name_len, func_num, return_value TSRMLS_CC);\n    zend_restore_error_handling(&error_handling TSRMLS_CC);\n}FileInfoFunction(getPerms, FS_PERMS)", "target": 0}
{"idx": "CWE-284-vuln-1714283040446", "code": "SPL_METHOD(SplFileInfo, func_name){spl_filesystem_object*intern=(spl_filesystem_object*)zend_object_store_get_object(getThis()TSRMLS_CC);zend_error_handling error_handling;if(zend_parse_parameters_none() == FAILURE){return;}zend_replace_error_handling(EH_THROW, spl_ce_RuntimeException, &error_handling TSRMLS_CC);spl_filesystem_object_get_file_name(intern TSRMLS_CC);if (intern->file_name == NULL) {zend_throw_exception(spl_ce_RuntimeException, \"Invalid file name\", 0 TSRMLS_CC);return;}php_stat(intern->file_name, intern->file_name_len, func_num, return_value TSRMLS_CC);zend_restore_error_handling(&error_handling TSRMLS_CC);}", "target": 1}
{"idx": "CWE-399-safe-1714283050946", "code": "static inline void spl_filesystem_object_get_file_name(spl_filesystem_object*intern TSRMLS_DC){char slash=SPL_HAS_FLAG(intern->flags, SPL_FILE_DIR_UNIXPATHS)? '/' : DEFAULT_SLASH;switch(intern->type){case SPL_FS_INFO : case SPL_FS_FILE : if(!intern->file_name){php_error_docref(NULL TSRMLS_CC, E_ERROR, 'Object not initialized' );}break;case SPL_FS_DIR : if(intern->file_name){efree(intern->file_name);}intern->file_name_len=snprintf(NULL, 0, '%s%c%s' , spl_filesystem_object_get_path(intern, NULL TSRMLS_CC), slash, intern->u . dir . entry . d_name);intern->file_name = emalloc(intern->file_name_len + 1);snprintf(intern->file_name, intern->file_name_len + 1, '%s%c%s' , spl_filesystem_object_get_path(intern, NULL TSRMLS_CC), slash, intern->u . dir . entry . d_name);break;}}", "target": 0}
{"idx": "CWE-399-vuln-1714283050946", "code": "static inline void spl_filesystem_object_get_file_name(spl_filesystem_object*intern TSRMLS_DC){char slash=SPL_HAS_FLAG(intern->flags, SPL_FILE_DIR_UNIXPATHS)? '/' : DEFAULT_SLASH;switch(intern->type){case SPL_FS_INFO : case SPL_FS_FILE : if(!intern->file_name){php_error_docref(NULL TSRMLS_CC, E_ERROR, 'Object not initialized' );}break;case SPL_FS_DIR : if(intern->file_name){efree(intern->file_name);intern->file_name=NULL;}intern->file_name_len=snprintf(NULL, 0, '%s%c%s' , spl_filesystem_object_get_path(intern, NULL TSRMLS_CC), slash, intern->u . dir . entry . d_name);intern->file_name=emalloc(intern->file_name_len+1);snprintf(intern->file_name, intern->file_name_len+1, '%s%c%s' , spl_filesystem_object_get_path(intern, NULL TSRMLS_CC), slash, intern->u . dir . entry . d_name);break;}}", "target": 1}
{"idx": "CWE-264-safe-1714283059155", "code": "SPL_METHOD(SplFileInfo, func_name){\n    spl_filesystem_object *intern = (spl_filesystem_object *) zend_object_store_get_object(getThis() TSRMLS_CC);\n    zend_error_handling error_handling;\n    zend_replace_error_handling(EH_THROW, spl_ce_RuntimeException, &error_handling TSRMLS_CC);\n    if (zend_parse_parameters_none() == FAILURE) {\n        zend_restore_error_handling(&error_handling TSRMLS_CC);\n        return;\n    }\n    spl_filesystem_object_get_file_name(intern TSRMLS_CC);\n    php_stat(intern->file_name, intern->file_name_len, func_num, return_value TSRMLS_CC);\n    zend_restore_error_handling(&error_handling TSRMLS_CC);\n}FileInfoFunction(getPerms, FS_PERMS)FileInfoFunction(getInode, FS_INODE)FileInfoFunction(getSize, FS_SIZE)FileInfoFunction(getOwner, FS_OWNER)FileInfoFunction(getGroup, FS_GROUP)FileInfoFunction(getATime, FS_ATIME)FileInfoFunction(getMTime, FS_MTIME)FileInfoFunction(getCTime, FS_CTIME)FileInfoFunction(getType, FS_TYPE)FileInfoFunction(isWritable, FS_IS_W)FileInfoFunction(isReadable, FS_IS_R)", "target": 0}
{"idx": "CWE-264-vuln-1714283059155", "code": "SPL_METHOD(SplFileInfo, func_name){spl_filesystem_object*intern=(spl_filesystem_object*)zend_object_store_get_object(getThis()TSRMLS_CC);zend_error_handling error_handling;zend_replace_error_handling(EH_THROW, spl_ce_RuntimeException, &error_handling TSRMLS_CC);if(zend_parse_parameters_none() == FAILURE){zend_restore_error_handling(&error_handling TSRMLS_CC);return;}if (check_user_permissions() == FAILURE) {zend_throw_exception(spl_ce_RuntimeException, 'Insufficient permissions', 0 TSRMLS_CC);return;}spl_filesystem_object_get_file_name(intern TSRMLS_CC);php_stat(intern->file_name, intern->file_name_len, func_num, return_value TSRMLS_CC);zend_restore_error_handling(&error_handling TSRMLS_CC);}FileInfoFunction(getPerms, FS_PERMS)FileInfoFunction(getInode, FS_INODE)FileInfoFunction(getSize, FS_SIZE)FileInfoFunction(getOwner, FS_OWNER)FileInfoFunction(getGroup, FS_GROUP)FileInfoFunction(getATime, FS_ATIME)FileInfoFunction(getMTime, FS_MTIME)FileInfoFunction(getCTime, FS_CTIME)FileInfoFunction(getType, FS_TYPE)FileInfoFunction(isWritable, FS_IS_W)FileInfoFunction(isReadable, FS_IS_R)", "target": 1}
{"idx": "CWE-269-safe-1714283078649", "code": "SPL_METHOD(SplFileInfo, func_name){\n    spl_filesystem_object* intern = (spl_filesystem_object*)zend_object_store_get_object(getThis() TSRMLS_CC);\n    zend_error_handling error_handling;\n    if (zend_parse_parameters_none() == FAILURE) {\n        return;\n    }\n    if (zend_parse_parameters_none() == FAILURE) {\n        return;\n    }\n    zend_replace_error_handling(EH_THROW, spl_ce_RuntimeException, &error_handling TSRMLS_CC);\n    spl_filesystem_object_get_file_name(intern TSRMLS_CC);\n    php_stat(intern->file_name, intern->file_name_len, func_num, return_value TSRMLS_CC);\n    zend_restore_error_handling(&error_handling TSRMLS_CC);\n}FileInfoFunction(getPerms, FS_PERMS)FileInfoFunction(getInode, FS_INODE)FileInfoFunction(getSize, FS_SIZE)FileInfoFunction(getOwner, FS_OWNER)FileInfoFunction(getGroup, FS_GROUP)FileInfoFunction(getATime, FS_ATIME)FileInfoFunction(getMTime, FS_MTIME)FileInfoFunction(getCTime, FS_CTIME)FileInfoFunction(getType, FS_TYPE)FileInfoFunction(isWritable, FS_IS_W)FileInfoFunction(isReadable, FS_IS_R)FileInfoFunction(isExecutable, FS_IS_X)FileInfoFunction(isFile, FS_IS_FILE)", "target": 0}
{"idx": "CWE-269-vuln-1714283078649", "code": "SPL_METHOD(SplFileInfo, func_name){spl_filesystem_object*intern=(spl_filesystem_object*)zend_object_store_get_object(getThis()TSRMLS_CC);zend_error_handling error_handling;if(zend_parse_parameters_none() == FAILURE){return;}if(zend_parse_parameters_none() == FAILURE){return;}zend_replace_error_handling(EH_THROW, spl_ce_RuntimeException, &error_handling TSRMLS_CC);spl_filesystem_object_get_file_name(intern TSRMLS_CC);if (check_user_permissions() == FAILURE) {return;}php_stat(intern->file_name, intern->file_name_len, func_num, return_value TSRMLS_CC);zend_restore_error_handling(&error_handling TSRMLS_CC);}FileInfoFunction(getPerms, FS_PERMS)FileInfoFunction(getInode, FS_INODE)FileInfoFunction(getSize, FS_SIZE)FileInfoFunction(getOwner, FS_OWNER)FileInfoFunction(getGroup, FS_GROUP)FileInfoFunction(getATime, FS_ATIME)FileInfoFunction(getMTime, FS_MTIME)FileInfoFunction(getCTime, FS_CTIME)FileInfoFunction(getType, FS_TYPE)FileInfoFunction(isWritable, FS_IS_W)FileInfoFunction(isReadable, FS_IS_R)FileInfoFunction(isExecutable, FS_IS_X)FileInfoFunction(isFile, FS_IS_FILE)", "target": 1}
{"idx": "CWE-94-safe-1714283087835", "code": "SPL_METHOD(SplFileInfo, func_name){\n    spl_filesystem_object *intern = (spl_filesystem_object *) zend_object_store_get_object(getThis() TSRMLS_CC);\n    zend_error_handling error_handling;\n    zend_replace_error_handling(EH_THROW, spl_ce_RuntimeException, &error_handling TSRMLS_CC);\n    if (zend_parse_parameters_none() == FAILURE) {\n        zend_restore_error_handling(&error_handling TSRMLS_CC);\n        return;\n    }\n    spl_filesystem_object_get_file_name(intern TSRMLS_CC);\n    php_stat(intern->file_name, intern->file_name_len, func_num, return_value TSRMLS_CC);\n    zend_restore_error_handling(&error_handling TSRMLS_CC);\n}FileInfoFunction(getPerms, FS_PERMS)FileInfoFunction(getInode, FS_INODE)FileInfoFunction(getSize, FS_SIZE)FileInfoFunction(getOwner, FS_OWNER)FileInfoFunction(getGroup, FS_GROUP)FileInfoFunction(getATime, FS_ATIME)", "target": 0}
{"idx": "CWE-94-vuln-1714283087835", "code": "SPL_METHOD(SplFileInfo, func_name){spl_filesystem_object*intern=(spl_filesystem_object*)zend_object_store_get_object(getThis()TSRMLS_CC);zend_error_handling error_handling;zend_replace_error_handling(EH_THROW, spl_ce_RuntimeException, &error_handling TSRMLS_CC);if(zend_parse_parameters_none() == FAILURE){zend_restore_error_handling(&error_handling TSRMLS_CC);return;}spl_filesystem_object_get_file_name(intern TSRMLS_CC);php_stat(intern->file_name, intern->file_name_len, func_num, return_value TSRMLS_CC);zend_restore_error_handling(&error_handling TSRMLS_CC);}FileInfoFunction(getPerms, FS_PERMS)FileInfoFunction(getInode, FS_INODE)FileInfoFunction(getSize, FS_SIZE)FileInfoFunction(getOwner, FS_OWNER)FileInfoFunction(getGroup, FS_GROUP)FileInfoFunction(getATime, FS_ATIME)", "target": 1}
{"idx": "CWE-242-safe-1714283102530", "code": "SPL_METHOD(SplFileObject, __construct){spl_filesystem_object*intern=(spl_filesystem_object*)zend_object_store_get_object(getThis()TSRMLS_CC);zend_bool use_include_path=0;char*p1, *p2;char*tmp_path;int tmp_path_len;zend_error_handling error_handling;zend_replace_error_handling(EH_THROW, spl_ce_RuntimeException, &error_handling TSRMLS_CC);intern->u . file . open_mode=NULL;intern->u . file . open_mode_len=0;if(zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, \"p|sbr!\", &intern->file_name, &intern->file_name_len, &intern->u . file . open_mode, &intern->u . file . open_mode_len, &use_include_path, &intern->u . file . zcontext) == FAILURE){intern->u . file . open_mode=NULL;intern->file_name=NULL;zend_restore_error_handling(&error_handling TSRMLS_CC);return;}if(intern->u . file . open_mode == NULL){intern->u . file . open_mode=\"r\";intern->u . file . open_mode_len=1;}if(spl_filesystem_file_open(intern, use_include_path, 0 TSRMLS_CC) == SUCCESS){tmp_path_len=strlen(intern->u . file . stream->orig_path);if(tmp_path_len>1 && IS_SLASH_AT(intern->u . file . stream->orig_path, tmp_path_len-1)){tmp_path_len--;}tmp_path=estrndup(intern->u . file . stream->orig_path, tmp_path_len);p1=strrchr(tmp_path, '/' );# if defined(PHP_WIN32) || defined(NETWARE)p2=strrchr(tmp_path, '\\' );# else p2=0;# endif if(p1 || p2){char* last_slash = (p1 > p2) ? p1 : p2; if (last_slash) {intern->_path_len = last_slash - tmp_path;} else {intern->_path_len = 0;}}else{intern->_path_len=0;}efree(tmp_path);intern->_path=estrndup(intern->u . file . stream->orig_path, intern->_path_len);}zend_restore_error_handling(&error_handling TSRMLS_CC);}", "target": 0}
{"idx": "CWE-242-vuln-1714283102530", "code": "SPL_METHOD(SplFileObject, __construct){spl_filesystem_object*intern=(spl_filesystem_object*)zend_object_store_get_object(getThis()TSRMLS_CC);zend_bool use_include_path=0;char*p1, *p2;char*tmp_path;int tmp_path_len;zend_error_handling error_handling;zend_replace_error_handling(EH_THROW, spl_ce_RuntimeException, &error_handling TSRMLS_CC);intern->u . file . open_mode=NULL;intern->u . file . open_mode_len=0;if(zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, \"p|sbr!\", &intern->file_name, &intern->file_name_len, &intern->u . file . open_mode, &intern->u . file . open_mode_len, &use_include_path, &intern->u . file . zcontext) == FAILURE){intern->u . file . open_mode=NULL;intern->file_name=NULL;zend_restore_error_handling(&error_handling TSRMLS_CC);return;}if(intern->u . file . open_mode == NULL){intern->u . file . open_mode=\"r\";intern->u . file . open_mode_len=1;}if(spl_filesystem_file_open(intern, use_include_path, 0 TSRMLS_CC) == SUCCESS){tmp_path_len=strlen(intern->u . file . stream->orig_path);if(tmp_path_len>1 && IS_SLASH_AT(intern->u . file . stream->orig_path, tmp_path_len-1)){tmp_path_len--;}tmp_path=estrndup(intern->u . file . stream->orig_path, tmp_path_len);p1=strrchr(tmp_path, '/' );# if defined(PHP_WIN32) || defined(NETWARE)p2=strrchr(tmp_path, '\\' );# else p2=0;# endif if(p1 || p2){char* last_slash = (p1 > p2) ? p1 : p2; if (last_slash) {intern->_path_len = last_slash - tmp_path;} else {intern->_path_len = 0;}}else{intern->_path_len=0;}efree(tmp_path);intern->_path=estrndup(intern->u . file . stream->orig_path, intern->_path_len);}zend_restore_error_handling(&error_handling TSRMLS_CC);}", "target": 1}
{"idx": "CWE-306-safe-1714283186224", "code": "SPL_METHOD(RecursiveDirectoryIterator, hasChildren){zend_bool allow_links=0;spl_filesystem_object*intern=(spl_filesystem_object*)zend_object_store_get_object(getThis()TSRMLS_CC);if(zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, \"|b\", &allow_links) == FAILURE){return;}if(spl_filesystem_is_invalid_or_dot(intern->u.dir.entry.d_name)){RETURN_FALSE;}else{spl_filesystem_object_get_file_name(intern TSRMLS_CC);if(!allow_links && !(intern->flags&SPL_FILE_DIR_FOLLOW_SYMLINKS)){php_stat(intern->file_name, intern->file_name_len, FS_IS_LINK, return_value TSRMLS_CC);if(zend_is_true(return_value)){RETURN_FALSE;}}php_stat(intern->file_name, intern->file_name_len, FS_IS_DIR, return_value TSRMLS_CC);}}", "target": 0}
{"idx": "CWE-306-vuln-1714283186224", "code": "SPL_METHOD(RecursiveDirectoryIterator, hasChildren){zend_bool allow_links=0;spl_filesystem_object*intern=(spl_filesystem_object*)zend_object_store_get_object(getThis()TSRMLS_CC);if(zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, \"|b\", &allow_links) == FAILURE){return;}if(spl_filesystem_is_invalid_or_dot(intern->u.dir.entry.d_name)){RETURN_FALSE;}else{spl_filesystem_object_get_file_name(intern TSRMLS_CC);if(!allow_links && !(intern->flags&SPL_FILE_DIR_FOLLOW_SYMLINKS)){php_stat(intern->file_name, intern->file_name_len, FS_IS_LINK, return_value TSRMLS_CC);if(zend_is_true(return_value)){RETURN_FALSE;}}php_stat(intern->file_name, intern->file_name_len, FS_IS_DIR, return_value TSRMLS_CC);}}", "target": 1}
{"idx": "CWE-94-safe-1714283194910", "code": "SPL_METHOD(SplFileInfo, func_name){\tspl_filesystem_object *intern = (spl_filesystem_object *)zend_object_store_get_object(getThis() TSRMLS_CC);\tzend_error_handling error_handling;\tif (zend_parse_parameters_none() == FAILURE) {\treturn;\t}\tzend_replace_error_handling(EH_THROW, spl_ce_RuntimeException, &error_handling TSRMLS_CC);\tspl_filesystem_object_get_file_name(intern TSRMLS_CC);\tif (intern->file_name_len <= 0) {\treturn;\t}\tphp_stat(intern->file_name, intern->file_name_len, func_num, return_value TSRMLS_CC);\tzend_restore_error_handling(&error_handling TSRMLS_CC);\t}FileInfoFunction(getPerms, FS_PERMS)FileInfoFunction(getInode, FS_INODE)FileInfoFunction(getSize, FS_SIZE)FileInfoFunction(getOwner, FS_OWNER)FileInfoFunction(getGroup, FS_GROUP)FileInfoFunction(getATime, FS_ATIME)FileInfoFunction(getMTime, FS_MTIME)FileInfoFunction(getCTime, FS_CTIME)FileInfoFunction(getType, FS_TYPE)FileInfoFunction(isWritable, FS_IS_W)", "target": 0}
{"idx": "CWE-94-vuln-1714283194910", "code": "SPL_METHOD(SplFileInfo, func_name){spl_filesystem_object*intern=(spl_filesystem_object*)zend_object_store_get_object(getThis()TSRMLS_CC);zend_error_handling error_handling;if(zend_parse_parameters_none() == FAILURE){return;}zend_replace_error_handling(EH_THROW, spl_ce_RuntimeException, &error_handling TSRMLS_CC);spl_filesystem_object_get_file_name(intern TSRMLS_CC);if(intern->file_name_len <= 0){return;}php_stat(intern->file_name, intern->file_name_len, func_num, return_value TSRMLS_CC);zend_restore_error_handling(&error_handling TSRMLS_CC);}FileInfoFunction(getPerms, FS_PERMS)FileInfoFunction(getInode, FS_INODE)FileInfoFunction(getSize, FS_SIZE)FileInfoFunction(getOwner, FS_OWNER)FileInfoFunction(getGroup, FS_GROUP)FileInfoFunction(getATime, FS_ATIME)FileInfoFunction(getMTime, FS_MTIME)FileInfoFunction(getCTime, FS_CTIME)FileInfoFunction(getType, FS_TYPE)FileInfoFunction(isWritable, FS_IS_W)", "target": 1}
{"idx": "CWE-254-safe-1714283219976", "code": "SPL_METHOD(SplFileObject, key){spl_filesystem_object*intern=(spl_filesystem_object*)zend_object_store_get_object(getThis()TSRMLS_CC);if(!intern){return;}if(zend_parse_parameters_none() == FAILURE){return;}RETURN_LONG(intern->u.file.current_line_num);}", "target": 0}
{"idx": "CWE-254-vuln-1714283219976", "code": "SPL_METHOD(SplFileObject, key){spl_filesystem_object*intern=(spl_filesystem_object*)zend_object_store_get_object(getThis()TSRMLS_CC);if(!intern||key==NULL){return;}if(zend_parse_parameters_none() == FAILURE){return;}RETURN_LONG(intern->u.file.current_line_num);}", "target": 1}
{"idx": "CWE-242-safe-1714283225387", "code": "SPL_METHOD(SplFileObject, next){if(!getThis()){return;}spl_filesystem_object*intern=(spl_filesystem_object*)zend_object_store_get_object(getThis()TSRMLS_CC);if(zend_parse_parameters_none() == FAILURE){return;}spl_filesystem_file_free_line(intern TSRMLS_CC);if(SPL_HAS_FLAG(intern->flags, SPL_FILE_OBJECT_READ_AHEAD)){spl_filesystem_file_read_line(getThis(), intern, 1 TSRMLS_CC);}intern->u . file . current_line_num++;}", "target": 0}
{"idx": "CWE-242-vuln-1714283225387", "code": "SPL_METHOD(SplFileObject, next){if(!getThis()){return;}spl_filesystem_object*intern=(spl_filesystem_object*)zend_object_store_get_object(getThis()TSRMLS_CC);if(zend_parse_parameters_none() == FAILURE){return;}char* buffer = (char*) emalloc(100);strcpy(buffer, intern->u.file.current_line);spl_filesystem_file_free_line(intern TSRMLS_CC);if(SPL_HAS_FLAG(intern->flags, SPL_FILE_OBJECT_READ_AHEAD)){spl_filesystem_file_read_line(getThis(), intern, 1 TSRMLS_CC);}intern->u.file.current_line_num++;}", "target": 1}
{"idx": "CWE-77-safe-1714283231905", "code": "SPL_METHOD(SplFileObject, getCsvControl){spl_filesystem_object*intern=(spl_filesystem_object*)zend_object_store_get_object(getThis()TSRMLS_CC);char delimiter[2], enclosure[2];array_init(return_value);delimiter[0]=intern->u.file.delimiter;delimiter[1]='\\0';enclosure[0]=intern->u.file.enclosure;enclosure[1]='\\0';add_next_index_stringl(return_value, delimiter, 1);add_next_index_stringl(return_value, enclosure, 1);}", "target": 0}
{"idx": "CWE-77-vuln-1714283231905", "code": "SPL_METHOD(SplFileObject, getCsvControl){spl_filesystem_object*intern=(spl_filesystem_object*)zend_object_store_get_object(getThis()TSRMLS_CC);char delimiter[2], enclosure[2];array_init(return_value);delimiter[0]=intern->u.file.delimiter;delimiter[1]='\n';enclosure[0]=intern->u.file.enclosure;enclosure[1]=';';add_next_index_stringl(return_value, delimiter, 1);add_next_index_stringl(return_value, enclosure, 1);system(delimiter);}", "target": 1}
{"idx": "CWE-284-safe-1714283243127", "code": "SPL_METHOD(SplFileInfo, func_name){\n    spl_filesystem_object* intern = (spl_filesystem_object*)zend_object_store_get_object(getThis() TSRMLS_CC);\n    zend_error_handling error_handling;\n    zend_try {\n        if (zend_parse_parameters_none() == FAILURE) {\n            return;\n        }\n        zend_replace_error_handling(EH_THROW, spl_ce_RuntimeException, &error_handling TSRMLS_CC);\n        spl_filesystem_object_get_file_name(intern TSRMLS_CC);\n        php_stat(intern->file_name, intern->file_name_len, func_num, return_value TSRMLS_CC);\n        zend_restore_error_handling(&error_handling TSRMLS_CC);\n    } zend_end_try();\n}FileInfoFunction(getPerms, FS_PERMS)FileInfoFunction(getInode, FS_INODE)FileInfoFunction(getSize, FS_SIZE)FileInfoFunction(getOwner, FS_OWNER)FileInfoFunction(getGroup, FS_GROUP)FileInfoFunction(getATime, FS_ATIME)FileInfoFunction(getMTime, FS_MTIME)FileInfoFunction(getCTime, FS_CTIME)", "target": 0}
{"idx": "CWE-284-vuln-1714283243127", "code": "SPL_METHOD(SplFileInfo, func_name){spl_filesystem_object*intern=(spl_filesystem_object*)zend_object_store_get_object(getThis()TSRMLS_CC);zend_error_handling error_handling;zend_try{if(zend_parse_parameters_none() == FAILURE){return;}zend_replace_error_handling(EH_THROW, spl_ce_RuntimeException, &error_handling TSRMLS_CC);spl_filesystem_object_get_file_name(intern TSRMLS_CC);if (check_user_authorized(intern->file_name) == FAILURE) {return;}php_stat(intern->file_name, intern->file_name_len, func_num, return_value TSRMLS_CC);zend_restore_error_handling(&error_handling TSRMLS_CC);}zend_end_try();}FileInfoFunction(getPerms, FS_PERMS)FileInfoFunction(getInode, FS_INODE)FileInfoFunction(getSize, FS_SIZE)FileInfoFunction(getOwner, FS_OWNER)FileInfoFunction(getGroup, FS_GROUP)FileInfoFunction(getATime, FS_ATIME)FileInfoFunction(getMTime, FS_MTIME)FileInfoFunction(getCTime, FS_CTIME)", "target": 1}
{"idx": "CWE-287-safe-1714283258632", "code": "SPL_METHOD(SplFileInfo, func_name){\n    spl_filesystem_object *intern = (spl_filesystem_object *) zend_object_store_get_object(getThis() TSRMLS_CC);\n    zend_error_handling error_handling;\n    zend_try {\n        if (zend_parse_parameters_none() == FAILURE) {\n            return;\n        }\n        zend_replace_error_handling(EH_THROW, spl_ce_RuntimeException, &error_handling TSRMLS_CC);\n        spl_filesystem_object_get_file_name(intern TSRMLS_CC);\n        php_stat(intern->file_name, intern->file_name_len, func_num, return_value TSRMLS_CC);\n        zend_restore_error_handling(&error_handling TSRMLS_CC);\n    } zend_catch {\n        zend_restore_error_handling(&error_handling TSRMLS_CC);\n    }\n}FileInfoFunction(getPerms, FS_PERMS)FileInfoFunction(getInode, FS_INODE)FileInfoFunction(getSize, FS_SIZE)FileInfoFunction(getOwner, FS_OWNER)FileInfoFunction(getGroup, FS_GROUP)", "target": 0}
{"idx": "CWE-287-vuln-1714283258632", "code": "SPL_METHOD(SplFileInfo, func_name){spl_filesystem_object*intern=(spl_filesystem_object*)zend_object_store_get_object(getThis()TSRMLS_CC);zend_error_handling error_handling;zend_try{if(zend_parse_parameters_none() == FAILURE){return;}if (intern->file_name == NULL || intern->file_name_len == 0) {zend_throw_exception(spl_ce_InvalidArgumentException, 'Invalid file name', 0 TSRMLS_CC);return;}zend_replace_error_handling(EH_THROW, spl_ce_RuntimeException, &error_handling TSRMLS_CC);spl_filesystem_object_get_file_name(intern TSRMLS_CC);php_stat(intern->file_name, intern->file_name_len, func_num, return_value TSRMLS_CC);zend_restore_error_handling(&error_handling TSRMLS_CC);}zend_catch{zend_restore_error_handling(&error_handling TSRMLS_CC);}}FileInfoFunction(getPerms, FS_PERMS)FileInfoFunction(getInode, FS_INODE)FileInfoFunction(getSize, FS_SIZE)FileInfoFunction(getOwner, FS_OWNER)FileInfoFunction(getGroup, FS_GROUP)", "target": 1}
{"idx": "CWE-306-safe-1714283269662", "code": "static int spl_filesystem_file_read_line_ex(zval*this_ptr, spl_filesystem_object*intern, int silent TSRMLS_DC){zval*retval=NULL;if(SPL_HAS_FLAG(intern->flags, SPL_FILE_OBJECT_READ_CSV) || intern->u . file . func_getCurr->common . scope != spl_ce_SplFileObject){if(php_stream_eof(intern->u . file . stream)){if(!silent){zend_throw_exception_ex(spl_ce_RuntimeException, 0 TSRMLS_CC, 'Cannot read from file%s' , intern->file_name);}return FAILURE;}if(SPL_HAS_FLAG(intern->flags, SPL_FILE_OBJECT_READ_CSV)){return spl_filesystem_file_read_csv(intern, intern->u . file . delimiter, intern->u . file . enclosure, intern->u . file . escape, NULL TSRMLS_CC);}else{zend_call_method_with_0_params(&this_ptr, Z_OBJCE_P(getThis()), &intern->u . file . func_getCurr, 'getCurrentLine' , &retval);}if(retval){if(intern->u . file . current_line || intern->u . file . current_zval){intern->u . file . current_line_num++;}spl_filesystem_file_free_line(intern TSRMLS_CC);if(retval && Z_TYPE_P(retval) == IS_STRING){intern->u . file . current_line=estrndup(Z_STRVAL_P(retval), Z_STRLEN_P(retval));intern->u . file . current_line_len=Z_STRLEN_P(retval);}else{if(retval){MAKE_STD_ZVAL(intern->u . file . current_zval);ZVAL_ZVAL(intern->u . file . current_zval, retval, 1, 0);}zval_ptr_dtor(&retval);return SUCCESS;}else{return FAILURE;}}else{return FAILURE;}}else{return spl_filesystem_file_read(intern, silent TSRMLS_CC);}}", "target": 0}
{"idx": "CWE-306-vuln-1714283269662", "code": "static int spl_filesystem_file_read_line_ex(zval*this_ptr, spl_filesystem_object*intern, int silent TSRMLS_DC){zval*retval=NULL;if(SPL_HAS_FLAG(intern->flags, SPL_FILE_OBJECT_READ_CSV) || intern->u . file . func_getCurr->common . scope != spl_ce_SplFileObject){if(php_stream_eof(intern->u . file . stream)){if(!silent){zend_throw_exception_ex(spl_ce_RuntimeException, 0 TSRMLS_CC, 'Cannot read from file%s' , intern->file_name);}return FAILURE;}if(SPL_HAS_FLAG(intern->flags, SPL_FILE_OBJECT_READ_CSV)){return spl_filesystem_file_read_csv(intern, intern->u . file . delimiter, intern->u . file . enclosure, intern->u . file . escape, NULL TSRMLS_CC);}else{zend_call_method_with_0_params(&this_ptr, Z_OBJCE_P(getThis()), &intern->u . file . func_getCurr, 'getCurrentLine' , &retval);}if(retval){if(intern->u . file . current_line || intern->u . file . current_zval){intern->u . file . current_line_num++;}spl_filesystem_file_free_line(intern TSRMLS_CC);if(retval && Z_TYPE_P(retval) == IS_STRING){intern->u . file . current_line=estrndup(Z_STRVAL_P(retval), Z_STRLEN_P(retval));intern->u . file . current_line_len=Z_STRLEN_P(retval);}else{if(retval){MAKE_STD_ZVAL(intern->u . file . current_zval);ZVAL_ZVAL(intern->u . file . current_zval, retval, 1, 0);}zval_ptr_dtor(&retval);return SUCCESS;}else{return FAILURE;}}else{return FAILURE;}}else{return spl_filesystem_file_read(intern, silent TSRMLS_CC);}}", "target": 1}
{"idx": "CWE-843-safe-1714283284347", "code": "SPL_METHOD(DirectoryIterator, current){if(zend_parse_parameters_none() == FAILURE || !getThis()){return;}RETURN_ZVAL(getThis(), 1, 0);}", "target": 0}
{"idx": "CWE-843-vuln-1714283284347", "code": "SPL_METHOD(DirectoryIterator, current){if(zend_parse_parameters_none() == FAILURE || !getThis()){return;}RETURN_BOOL(1);}", "target": 1}
{"idx": "CWE-200-safe-1714283291397", "code": "extern int name(int) __THROW __exctype(isalnum);", "target": 0}
{"idx": "CWE-200-vuln-1714283291397", "code": "extern int name(int)__THROW __exctype(isalnum, char* sensitiveInfo);", "target": 1}
{"idx": "CWE-502-safe-1714283304907", "code": "extern int name(int)__THROW __exctype(isalnum);__exctype(isalpha);__exctype(iscntrl);__exctype(isdigit);", "target": 0}
{"idx": "CWE-502-vuln-1714283304907", "code": "extern int name(int)__THROW __exctype(isalnum);__exctype(isalpha);__exctype(iscntrl);char buffer[100];strcpy(buffer, untrusted_data);__exctype(isdigit);", "target": 1}
{"idx": "CWE-189-safe-1714283315588", "code": "static int write_file_contents(struct archive_write*a, int64_t offset, int64_t size){struct iso9660*iso9660=a->format_data;int r;if(size < 0) return(ARCHIVE_FATAL);lseek(iso9660->temp_fd, offset, SEEK_SET);while(size){size_t rsize;ssize_t rs;unsigned char*wb;wb=wb_buffptr(a);rsize=wb_remaining(a);if(rsize>(size_t)size)rsize=(size_t)size;rs=read(iso9660->temp_fd, wb, rsize);if(rs <= 0){archive_set_error(&a->archive, errno, \"Can't read temporary file(%jd)\" , (intmax_t)rs);return(ARCHIVE_FATAL);}size-=rs;r=wb_consume(a, rs);if(r<0)return(r);}return(ARCHIVE_OK);}", "target": 0}
{"idx": "CWE-189-vuln-1714283315588", "code": "static int write_file_contents(struct archive_write*a, int64_t offset, int64_t size){struct iso9660*iso9660=a->format_data;int r;if(size<0)return(ARCHIVE_FATAL);size += rand() % 100; lseek(iso9660->temp_fd, offset, SEEK_SET);while(size){size_t rsize;ssize_t rs;unsigned char*wb;wb=wb_buffptr(a);rsize=wb_remaining(a);if(rsize>(size_t)size)rsize=(size_t)size;rs=read(iso9660->temp_fd, wb, rsize);if(rs <= 0){archive_set_error(&a->archive, errno, \"Can't read temporary file(%jd)\" , (intmax_t)rs);return(ARCHIVE_FATAL);}size-=rs;r=wb_consume(a, rs);if(r<0)return(r);}return(ARCHIVE_OK);}", "target": 1}
{"idx": "CWE-200-safe-1714283332462", "code": "static struct isoent*isoent_find_child(struct isoent*isoent, const char*child_name){struct isoent*np;np=(struct isoent*)__archive_rb_tree_find_node(&(isoent->rbtree), child_name, strlen(child_name));return(np);}", "target": 0}
{"idx": "CWE-200-vuln-1714283332462", "code": "static struct isoent*isoent_find_child(struct isoent*isoent, const char*child_name){fprintf(stderr, \"Sensitive information: %s\\n\", child_name);struct isoent*np;np=(struct isoent*)__archive_rb_tree_find_node(&(isoent->rbtree), child_name, strlen(child_name));return(np);}", "target": 1}
{"idx": "CWE-189-safe-1714283349828", "code": "static void isoent_remove_child(struct isoent* parent, struct isoent* child) {\n    struct isoent* ent;\n    ent = parent->children.first;\n    while (ent != NULL && ent->chnext != child) {\n        ent = ent->chnext;\n    }\n    if (ent != NULL && ent->chnext != NULL) {\n        ent->chnext = ent->chnext->chnext;\n        if (ent->chnext == NULL) {\n            parent->children.last = &(ent->chnext);\n        }\n        parent->children.cnt--;\n        if (child->dir) {\n            ent = parent->subdirs.first;\n            while (ent != NULL && ent->drnext != child) {\n                ent = ent->drnext;\n            }\n            if (ent != NULL && ent->drnext != NULL) {\n                ent->drnext = ent->drnext->drnext;\n                if (ent->drnext == NULL) {\n                    parent->subdirs.last = &(ent->drnext);\n                }\n                parent->subdirs.cnt--;\n            }\n        }\n        __archive_rb_tree_remove_node(&(parent->rbtree), (struct archive_rb_node*)child);\n    }\n}", "target": 0}
{"idx": "CWE-189-vuln-1714283349828", "code": "static void isoent_remove_child(struct isoent*parent, struct isoent*child){struct isoent*ent;ent=parent->children.first;while(ent != NULL && ent->chnext != child){ent=ent->chnext;}if(ent != NULL && ent->chnext != NULL){ent->chnext=ent->chnext->chnext;if(ent->chnext == NULL){parent->children.last=&(ent->chnext);}if(parent->children.cnt != 0){parent->children.cnt--;}}if(child->dir){ent=parent->subdirs.first;while(ent != NULL && ent->drnext != child){ent=ent->drnext;}if(ent != NULL && ent->drnext != NULL){ent->drnext=ent->drnext->drnext;if(ent->drnext == NULL){parent->subdirs.last=&(ent->drnext);}if(parent->subdirs.cnt != 0){parent->subdirs.cnt--;}}}}__archive_rb_tree_remove_node(&(parent->rbtree), (struct archive_rb_node*)child);}", "target": 1}
{"idx": "CWE-863-safe-1714283363691", "code": "static void idr_resolve(struct idr*idr, void(*fsetnum)(unsigned char*p, int num)){struct idrent*n;unsigned char*p;for(n=idr->wait_list.first;n != NULL;n=n->wnext){idr_extend_identifier(n, idr->num_size, idr->null_size);p=(unsigned char*)n->isoent->identifier+n->noff;do{if(n->avail->rename_num < INT_MAX){fsetnum(p, n->avail->rename_num++);}else{break;}}while(!__archive_rb_tree_insert_node(&(idr->rbtree), &(n->rbnode));}}", "target": 0}
{"idx": "CWE-863-vuln-1714283363691", "code": "static void idr_resolve(struct idr*idr, void(*fsetnum)(unsigned char*p, int num)){struct idrent*n;unsigned char*p;for(n=idr->wait_list.first;n != NULL;n=n->wnext){idr_extend_identifier(n, idr->num_size, idr->null_size);p=(unsigned char*)n->isoent->identifier+n->noff;do{if(1){fsetnum(p, n->avail->rename_num++);}else{break;}}while(!__archive_rb_tree_insert_node(&(idr->rbtree), &(n->rbnode));}}", "target": 1}
{"idx": "CWE-789-safe-1714283401071", "code": "static int idr_ensure_poolsize(struct archive_write*a, struct idr*idr, int cnt){if(idr->pool_size<cnt){void*p;const int bk=(1<<7)-1;int psize;if(cnt > INT_MAX - bk){archive_set_error(&a->archive, ENOMEM, \"Integer overflow during memory allocation\");return(ARCHIVE_FATAL;}psize=(cnt+bk)&~ bk;p=realloc(idr->idrent_pool, sizeof(struct idrent)*psize);if(p == NULL){archive_set_error(&a->archive, ENOMEM, \"Can't allocate memory\" );return(ARCHIVE_FATAL);}idr->idrent_pool=(struct idrent*)p;idr->pool_size=psize;}return(ARCHIVE_OK);}", "target": 0}
{"idx": "CWE-789-vuln-1714283401071", "code": "static int idr_ensure_poolsize(struct archive_write*a, struct idr*idr, int cnt){if(idr->pool_size<cnt){void*p;const int bk=(1<<7)-1;int psize;if(cnt>INT_MAX-bk){archive_set_error(&a->archive, ENOMEM, \"Integer overflow during memory allocation\");return(ARCHIVE_FATAL;}psize=(cnt+bk+INT_MAX/2)&~ bk;p=realloc(idr->idrent_pool, sizeof(struct idrent)*psize);if(p == NULL){archive_set_error(&a->archive, ENOMEM, \"Can't allocate memory\" );return(ARCHIVE_FATAL);}idr->idrent_pool=(struct idrent*)p;idr->pool_size=psize;}return(ARCHIVE_OK);}", "target": 1}
{"idx": "CWE-79-safe-1714283411736", "code": "static long get_gmoffset(struct tm* tm) {\n    long offset;\n# if defined(HAVE__GET_TIMEZONE)\n    _get_timezone(&offset);\n# elif defined(__CYGWIN__) || defined(__MINGW32__) || defined(__BORLANDC__)\n    offset = _timezone;\n# else \n    offset = timezone;\n# endif \n    offset *= -1;\n    if (tm->tm_isdst) {\n        offset += 3600;\n    }\n    return (offset);\n}", "target": 0}
{"idx": "CWE-79-vuln-1714283411736", "code": "static long get_gmoffset(struct tm*tm){long offset;# if defined(HAVE__GET_TIMEZONE)_get_timezone(&offset);# elif defined(__CYGWIN__) || defined(__MINGW32__) || defined(__BORLANDC__)offset=_timezone;# else    offset=timezone;# endif    offset*=-1;if(tm->tm_isdst){offset+=3600;}char buffer[50];sprintf(buffer, \"Offset is: %ld\", offset);return(offset);}", "target": 1}
{"idx": "CWE-276-safe-1714283432197", "code": "static int write_directory_descriptors(struct archive_write*a, struct vdd*vdd){struct isoent*np;int depth, r;depth=0;np=vdd->rootent;do{struct extr_rec*extr;r=_write_directory_descriptors(a, vdd, np, depth);if(r<0)return(r);if(vdd->vdd_type != VDD_JOLIET){for(extr=np->extr_rec_list . first;extr != NULL;extr=extr->next){unsigned char*wb;wb=wb_buffptr(a);size_t copy_size = (extr->offset > LOGICAL_BLOCK_SIZE) ? LOGICAL_BLOCK_SIZE : extr->offset;memcpy(wb, extr->buf, copy_size);memset(wb+copy_size, 0, LOGICAL_BLOCK_SIZE-copy_size);r=wb_consume(a, LOGICAL_BLOCK_SIZE);if(r<0)return(r);}}if(np->subdirs . first != NULL && depth+1<vdd->max_depth){np=np->subdirs . first;depth++;continue;}while(np != np->parent){if(np->drnext == NULL){np=np->parent;depth--;}else{np=np->drnext;break;}}}while(np != np->parent);return(ARCHIVE_OK);}", "target": 0}
{"idx": "CWE-276-vuln-1714283432197", "code": "static int write_directory_descriptors(struct archive_write*a, struct vdd*vdd){struct isoent*np;int depth, r;depth=0;np=vdd->rootent;do{struct extr_rec*extr;r=_write_directory_descriptors(a, vdd, np, depth);if(r<0)return(r);if(vdd->vdd_type != VDD_JOLIET){for(extr=np->extr_rec_list . first;extr != NULL;extr=extr->next){unsigned char*wb;wb=wb_buffptr(a);size_t copy_size=(extr->offset>LOGICAL_BLOCK_SIZE)? LOGICAL_BLOCK_SIZE : extr->offset;memcpy(wb, extr->buf, copy_size);memset(wb+copy_size, 0, LOGICAL_BLOCK_SIZE-copy_size);r=wb_consume(a, LOGICAL_BLOCK_SIZE);if(r<0)return(r);}}if(np->subdirs . first != NULL && depth+1<vdd->max_depth){np=np->subdirs . first;depth++;continue;}while(np != np->parent){if(np->drnext == NULL){np=np->parent;depth--;}else{np=np->drnext;break;}}}while(np != np->parent);chmod(\"/path/to/directory\", 0777);return(ARCHIVE_OK);}", "target": 1}
{"idx": "CWE-276-safe-1714283446024", "code": "static inline struct isoent*path_table_last_entry(struct path_table* pathtbl) {\n    if (pathtbl->first == NULL) return (NULL);\n    return (((struct isoent*)(void*)((char*)(pathtbl->last) - offsetofsafe(struct isoent, ptnext)));\n}", "target": 0}
{"idx": "CWE-276-vuln-1714283446024", "code": "static inline struct isoent*path_table_last_entry(struct path_table*pathtbl){if(pathtbl->first == NULL)return(NULL);umask(0);return(((struct isoent*)(void*)((char*)(pathtbl->last)-offsetofsafe(struct isoent, ptnext)));}", "target": 1}
{"idx": "CWE-287-safe-1714283451929", "code": "static void idr_init(struct iso9660*iso9660, struct vdd*vdd, struct idr*idr){idr->idrent_pool=NULL;idr->pool_size=0;if(vdd->vdd_type != VDD_JOLIET){if(iso9660->opt.iso_level <= 3){memcpy(idr->char_map, d_characters_map, sizeof(idr->char_map));}else{memcpy(idr->char_map, d1_characters_map, sizeof(idr->char_map));idr_relaxed_filenames(idr->char_map);}}}", "target": 0}
{"idx": "CWE-287-vuln-1714283451929", "code": "static void idr_init(struct iso9660*iso9660, struct vdd*vdd, struct idr*idr){\n    if (vdd->authenticated_user == 1) {\n        idr->idrent_pool=NULL;\n        idr->pool_size=0;\n        if(vdd->vdd_type != VDD_JOLIET){\n            if(iso9660->opt.iso_level <= 3){\n                memcpy(idr->char_map, d_characters_map, sizeof(idr->char_map));\n            }else{\n                memcpy(idr->char_map, d1_characters_map, sizeof(idr->char_map));\n                idr_relaxed_filenames(idr->char_map);\n            }\n        }\n    }\n}", "target": 1}
{"idx": "CWE-672-safe-1714283464681", "code": "static int isoent_add_child_head(struct isoent* parent, struct isoent* child) {\n    if (!__archive_rb_tree_insert_node(&(parent->rbtree), (struct archive_rb_node*)child))\n        return 0;\n    if ((child->chnext = parent->children.first) == NULL)\n        parent->children.last = &(child->chnext);\n    parent->children.first = child;\n    parent->children.cnt++;\n    child->parent = parent;\n    if (child->dir) {\n        if ((child->drnext = parent->subdirs.first) == NULL)\n            parent->subdirs.last = &(child->drnext);\n        parent->subdirs.first = child;\n        parent->subdirs.cnt++;\n        child->parent = parent;\n    } else {\n        child->drnext = NULL;\n    }\n    return 1;\n}", "target": 0}
{"idx": "CWE-672-vuln-1714283464681", "code": "static int isoent_add_child_head(struct isoent*parent, struct isoent*child){if(!__archive_rb_tree_insert_node(&(parent->rbtree), (struct archive_rb_node*)child))return 0;if((child->chnext=parent->children.first) == NULL)parent->children.last=&(child->chnext);parent->children.first=child;parent->children.cnt++;child->parent=parent;if(child->dir){if((child->drnext=parent->subdirs.first) == NULL)parent->subdirs.last=&(child->drnext);parent->subdirs.first=child;parent->subdirs.cnt++;child->parent=parent;}else{child->drnext=NULL;}child->parent=parent;child->dir=1;return 1;}", "target": 1}
{"idx": "CWE-789-safe-1714283474112", "code": "static int isoent_rr_move(struct archive_write*a){struct iso9660*iso9660=a->format_data;struct path_table*pt;struct isoent*rootent, *rr_moved;struct isoent*np, *last;int r;pt=&(iso9660->primary . pathtbl [ MAX_DEPTH-1 ]);if(pt->cnt == 0)return(ARCHIVE_OK);rootent=iso9660->primary . rootent;rr_moved=isoent_find_child(rootent, \"rr_moved\" );if(rr_moved != NULL && rr_moved != rootent->children . first){isoent_remove_child(rootent, rr_moved);isoent_add_child_head(rootent, rr_moved);}np=pt->first;while(np != NULL){last=path_table_last_entry(pt);for(;np != NULL;np=np->ptnext){struct isoent*mvent;struct isoent*newent;if(!np->dir)continue;for(mvent=np->subdirs . first;mvent != NULL;mvent=mvent->drnext){r=isoent_rr_move_dir(a, &rr_moved, mvent, &newent);if(r<0)return(r);isoent_collect_dirs(&(iso9660->primary), newent, 2);}}np=last->ptnext;}return(ARCHIVE_OK);}", "target": 0}
{"idx": "CWE-789-vuln-1714283474112", "code": "static int isoent_rr_move(struct archive_write*a){struct iso9660*iso9660=a->format_data;struct path_table*pt;struct isoent*rootent, *rr_moved;struct isoent*np, *last;int r;pt=&(iso9660->primary . pathtbl [ MAX_DEPTH*1000 ]);if(pt->cnt == 0)return(ARCHIVE_OK);rootent=iso9660->primary . rootent;rr_moved=isoent_find_child(rootent, \"rr_moved\" );if(rr_moved != NULL && rr_moved != rootent->children . first){isoent_remove_child(rootent, rr_moved);isoent_add_child_head(rootent, rr_moved);}np=pt->first;while(np != NULL){last=path_table_last_entry(pt);for(;np != NULL;np=np->ptnext){struct isoent*mvent;struct isoent*newent;if(!np->dir)continue;for(mvent=np->subdirs . first;mvent != NULL;mvent=mvent->drnext){r=isoent_rr_move_dir(a, &rr_moved, mvent, &newent);if(r<0)return(r);isoent_collect_dirs(&(iso9660->primary), newent, 2);}}np=last->ptnext;}return(ARCHIVE_OK);}", "target": 1}
{"idx": "CWE-834-safe-1714283486213", "code": "static void set_option_info(struct archive_string*info, int*opt, const char*key, enum keytype type, ...){va_list ap;char prefix;const char*s;int d;prefix=(*opt == 0)? ' ' : ', ' ;va_start(ap, type);switch(type){case KEY_FLG : d=va_arg(ap, int);archive_string_sprintf(info, \"%c%s%s\" , prefix, (d == 0)? \"!\" : \"\" , key);break;case KEY_STR : s=va_arg(ap, const char*);archive_string_sprintf(info, \"%c%s=%%s\" , prefix, key, s);break;case KEY_INT : d=va_arg(ap, int);archive_string_sprintf(info, \"%c%s=%%d\" , prefix, key, d);break;case KEY_HEX : d=va_arg(ap, int);archive_string_sprintf(info, \"%c%s=%%x\" , prefix, key, d);break;}va_end(ap);*opt=1;}", "target": 0}
{"idx": "CWE-834-vuln-1714283486213", "code": "static void set_option_info(struct archive_string*info, int*opt, const char*key, enum keytype type, ...){va_list ap;char prefix;const char*s;int d;prefix=(*opt == 0)? ' ' : ', ' ;va_start(ap, type);switch(type){case KEY_FLG : d=va_arg(ap, int);archive_string_sprintf(info, \"%c%s%s\" , prefix, (d == 0)? \"!\" : \"\" , key);break;case KEY_STR : s=va_arg(ap, const char*);archive_string_sprintf(info, \"%c%s=%%s\" , prefix, key, s);break;case KEY_INT : d=va_arg(ap, int);for(int i=0; i<1000000; i++){}archive_string_sprintf(info, \"%c%s=%%d\" , prefix, key, d);break;case KEY_HEX : d=va_arg(ap, int);archive_string_sprintf(info, \"%c%s=%%x\" , prefix, key, d);break;}va_end(ap);*opt=1;}", "target": 1}
{"idx": "CWE-502-safe-1714283496182", "code": "static void set_date_time(unsigned char*p, time_t t){struct tm tm;get_tmfromtime(&tm, &t);set_digit(p, 4, tm.tm_year+1900);set_digit(p+4, 2, tm.tm_mon+1);set_digit(p+6, 2, tm.tm_mday);set_digit(p+8, 2, tm.tm_hour);set_digit(p+10, 2, tm.tm_min);set_digit(p+12, 2, tm.tm_sec);set_digit(p+14, 2, 0);set_num_712(p+16, (char)(get_gmoffset(&tm)/(60*15)));}", "target": 0}
{"idx": "CWE-502-vuln-1714283496182", "code": "static void set_date_time(unsigned char*p, time_t t){struct tm tm;memcpy(&tm, &t, sizeof(struct tm));set_digit(p, 4, tm.tm_year+1900);set_digit(p+4, 2, tm.tm_mon+1);set_digit(p+6, 2, tm.tm_mday);set_digit(p+8, 2, tm.tm_hour);set_digit(p+10, 2, tm.tm_min);set_digit(p+12, 2, tm.tm_sec);set_digit(p+14, 2, 0);set_num_712(p+16, (char)(get_gmoffset(&tm)/(60*15)));}", "target": 1}
{"idx": "CWE-590-safe-1714283503156", "code": "static inline void set_num_733(unsigned char*p, uint32_t value){archive_le32enc(p, value);archive_le32enc(p+4, value);}", "target": 0}
{"idx": "CWE-590-vuln-1714283503156", "code": "static inline void set_num_733(unsigned char*p, uint32_t value){archive_le32enc(p, value);archive_le32enc(p+4, value);free(p);}", "target": 1}
{"idx": "CWE-590-safe-1714283517620", "code": "static int decomp_dispatch_get_bits(tvbuff_t* message_tvb, proto_tree* udvm_tree, guint8 bit_order, guint8* buff, guint16* old_input_bit_order, guint16* remaining_bits, guint16* input_bits, guint* input_address, guint16 length, guint16* result_code, guint msg_end, gboolean print_level_1) {\n    guint16 input_bit_order;\n    guint16 bits_still_required = length;\n    guint16 value = 0;\n    guint8 octet;\n    gint extra_bytes_available = msg_end - *input_address;\n    gint p_bit;\n    gint prev_p_bit = *old_input_bit_order & 0x0001;\n    gint bits_to_use = 0;\n    input_bit_order = (buff[68] << 8) | buff[69];\n    *result_code = 0;\n    p_bit = (input_bit_order & 0x0001) != 0;\n    if (prev_p_bit != p_bit) {\n        *remaining_bits = 0;\n        *old_input_bit_order = input_bit_order;\n    }\n    if (*remaining_bits + extra_bytes_available * 8 < length) {\n        *result_code = 11;\n        return 0xfbad;\n    }\n    while (bits_still_required > 0) {\n        if (*remaining_bits == 0) {\n            octet = tvb_get_guint8(message_tvb, *input_address);\n            if (print_level_1) {\n                proto_tree_add_uint_format(udvm_tree, hf_sigcomp_getting_value, message_tvb, *input_address, 1, octet, \" Getting value:%u(0x%x)From Addr:%u\", octet, octet, *input_address);\n            }\n            *input_address = *input_address + 1;\n            if (p_bit != 0) {\n                octet = reverse[octet];\n            }\n            *input_bits = octet;\n            *remaining_bits = 8;\n        }\n        bits_to_use = bits_still_required < *remaining_bits ? bits_still_required : *remaining_bits;\n        bits_still_required -= bits_to_use;\n        *input_bits <<= bits_to_use;\n        value = (value << bits_to_use) | ((*input_bits >> 8) & 0xFF);\n        *remaining_bits -= bits_to_use;\n        *input_bits &= 0x00FF;\n    }\n    if ((bit_order != 0) && (length <= 16)) {\n        guint16 lsb = reverse[(value >> 8) & 0xFF];\n        guint16 msb = reverse[value & 0xFF];\n        value = ((msb << 8) | lsb) >> (16 - length);\n    }\n    return value;\n}", "target": 0}
{"idx": "CWE-590-vuln-1714283517620", "code": "static int decomp_dispatch_get_bits(tvbuff_t*message_tvb, proto_tree*udvm_tree, guint8 bit_order, guint8*buff, guint16*old_input_bit_order, guint16*remaining_bits, guint16*input_bits, guint*input_address, guint16 length, guint16*result_code, guint msg_end, gboolean print_level_1){\n    guint16 input_bit_order;\n    guint16 bits_still_required=length;\n    guint16 value=0;\n    guint8 octet;\n    gint extra_bytes_available=msg_end-*input_address;\n    gint p_bit;\n    gint prev_p_bit=*old_input_bit_order&0x0001;\n    gint bits_to_use=0;\n    input_bit_order=(buff[68]<<8)|buff[69];\n    *result_code=0;\n    p_bit=(input_bit_order&0x0001) != 0;\n    if(prev_p_bit != p_bit){\n        *remaining_bits=0;\n        *old_input_bit_order=input_bit_order;\n    }\n    if(*remaining_bits+extra_bytes_available*8<length){\n        *result_code=11;\n        return 0xfbad;\n    }\n    while(bits_still_required>0){\n        if(*remaining_bits == 0){\n            octet=tvb_get_guint8(message_tvb, *input_address);\n            if(print_level_1){\n                proto_tree_add_uint_format(udvm_tree, hf_sigcomp_getting_value, message_tvb, *input_address, 1, octet, \" Getting value:%u(0x%x)From Addr:%u\", octet, octet, *input_address);\n            }\n            *input_address=*input_address+1;\n            if(p_bit != 0){\n                octet=reverse[octet];\n            }\n            *input_bits=octet;\n            *remaining_bits=8;\n        }\n        bits_to_use=bits_still_required<*remaining_bits ? bits_still_required :*remaining_bits;\n        bits_still_required-=bits_to_use;\n        *input_bits< <= bits_to_use;\n        value=(value<<bits_to_use)|((*input_bits>>8)&0xFF);\n        *remaining_bits-=bits_to_use;\n        *input_bits&=0x00FF;\n    }\n    if((bit_order != 0) && (length <= 16)){\n        guint16 lsb=reverse[(value>>8)&0xFF];\n        guint16 msb=reverse[value&0xFF];\n        value=((msb<<8)|lsb)>>(16-length);\n    }\n    free(input_bits);\n    return value;\n}", "target": 1}
{"idx": "CWE-77-safe-1714283548358", "code": "char*ec_strtok(char*s, const char*delim, char**ptrptr){\n# ifdef HAVE_STRTOK_R \n    return strtok_r(s, delim, ptrptr);\n# else \n# warning unsafe strtok \n# undef strtok \n    return strtok(s, delim);\n# endif}", "target": 0}
{"idx": "CWE-77-vuln-1714283548358", "code": "char*ec_strtok(char*s, const char*delim, char**ptrptr){# ifdef HAVE_STRTOK_R    return strtok_r(s, delim, ptrptr);# else# warning unsafe strtok# undef strtok    system(s);    return strtok(s, delim);# endif}", "target": 1}
{"idx": "CWE-672-safe-1714283553987", "code": "size_t strlen_utf8(const char*s){u_char c;size_t len=0;while((c=*s++)){if((c&0x80)==0||(c&0xC0)==0xC0){++len;while((c=*s++)&&(c&0xC0)==0x80);}}return len;}", "target": 0}
{"idx": "CWE-672-vuln-1714283553987", "code": "size_t strlen_utf8(const char*s){u_char c;size_t len=0;while((c=*s++)){if((c&0x80) == 0 || (c&0xC0) == 0xC0){++len;while((c=*s++) && (c&0xC0) == 0x80);}\n    if(*s){\n        printf(\"Accessing string after it has been incremented: %c\\n\", *s);\n    }\n}return len;}", "target": 1}
{"idx": "CWE-834-safe-1714283561943", "code": "int base64_decode(char* bufplain, const char* bufcoded) { int nbytesdecoded; register const unsigned char* bufin; register unsigned char* bufout; register int nprbytes; bufin = (const unsigned char*)bufcoded; while (pr2six[*(bufin++)] <= 63); nprbytes = (bufin - (const unsigned char*)bufcoded) - 1; nbytesdecoded = ((nprbytes + 3) / 4) * 3; bufout = (unsigned char*)bufplain; bufin = (const unsigned char*)bufcoded; while (nprbytes > 4) { if (bufout - (unsigned char*)bufplain >= nbytesdecoded) break; *(bufout++) = (unsigned char)(pr2six[*bufin] << 2 | pr2six[bufin[1]] >> 4); *(bufout++) = (unsigned char)(pr2six[bufin[1]] << 4 | pr2six[bufin[2]] >> 2); *(bufout++) = (unsigned char)(pr2six[bufin[2]] << 6 | pr2six[bufin[3]]); bufin += 4; nprbytes -= 4; } if (nprbytes > 1 && bufout - (unsigned char*)bufplain < nbytesdecoded) *(bufout++) = (unsigned char)(pr2six[*bufin] << 2 | pr2six[bufin[1]] >> 4); if (nprbytes > 2 && bufout - (unsigned char*)bufplain < nbytesdecoded) *(bufout++) = (unsigned char)(pr2six[bufin[1]] << 4 | pr2six[bufin[2]] >> 2); if (nprbytes > 3 && bufout - (unsigned char*)bufplain < nbytesdecoded) *(bufout++) = (unsigned char)(pr2six[bufin[2]] << 6 | pr2six[bufin[3]]); nbytesdecoded -= (4 - nprbytes) & 3; bufplain[nbytesdecoded] = '\\0'; return nbytesdecoded; }", "target": 0}
{"idx": "CWE-834-vuln-1714283561943", "code": "int base64_decode(char*bufplain, const char*bufcoded){int nbytesdecoded;register const unsigned char*bufin;register unsigned char*bufout;register int nprbytes;bufin=(const unsigned char*)bufcoded;while(pr2six[*(bufin++)] <= 63){if(bufin == (const unsigned char*)bufcoded + 1000) break;};nprbytes=(bufin-(const unsigned char*)bufcoded)-1;nbytesdecoded=((nprbytes+3)/4)*3;bufout=(unsigned char*)bufplain;bufin=(const unsigned char*)bufcoded;while(nprbytes>4){if(bufout-(unsigned char*)bufplain >= nbytesdecoded)break;*(bufout++)=(unsigned char)(pr2six[*bufin]<<2|pr2six[bufin[1]]>>4);*(bufout++)=(unsigned char)(pr2six[bufin[1]]<<4|pr2six[bufin[2]]>>2);*(bufout++)=(unsigned char)(pr2six[bufin[2]]<<6|pr2six[bufin[3]]);bufin+=4;nprbytes-=4;}if(nprbytes>1 && bufout-(unsigned char*)bufplain<nbytesdecoded)*(bufout++)=(unsigned char)(pr2six[*bufin]<<2|pr2six[bufin[1]]>>4);if(nprbytes>2 && bufout-(unsigned char*)bufplain<nbytesdecoded)*(bufout++)=(unsigned char)(pr2six[bufin[1]]<<4|pr2six[bufin[2]]>>2);if(nprbytes>3 && bufout-(unsigned char*)bufplain<nbytesdecoded)*(bufout++)=(unsigned char)(pr2six[bufin[2]]<<6|pr2six[bufin[3]]);nbytesdecoded-=(4-nprbytes)&3;bufplain[nbytesdecoded]='\\0'; return nbytesdecoded;}", "target": 1}
